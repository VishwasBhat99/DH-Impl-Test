// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double prin_amt = 2;

    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_int_amt();
        self.clear_prin_amt();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub gl_number: ::std::string::String,
    pub gl_desc: ::std::string::String,
    pub pd: ::std::string::String,
    pub prod_type: ::std::string::String,
    pub i: ::std::string::String,
    pub total_pd_sum: f64,
    pub total_pd_count: i64,
    pub as_on_dt: i64,
    pub nxt_rep_dt: i64,
    pub ccy: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string gl_number = 1;

    pub fn clear_gl_number(&mut self) {
        self.gl_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_number(&mut self, v: ::std::string::String) {
        self.gl_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_number(&mut self) -> &mut ::std::string::String {
        &mut self.gl_number
    }

    // Take field
    pub fn take_gl_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_number, ::std::string::String::new())
    }

    pub fn get_gl_number(&self) -> &str {
        &self.gl_number
    }

    // string gl_desc = 2;

    pub fn clear_gl_desc(&mut self) {
        self.gl_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_desc(&mut self, v: ::std::string::String) {
        self.gl_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_desc(&mut self) -> &mut ::std::string::String {
        &mut self.gl_desc
    }

    // Take field
    pub fn take_gl_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_desc, ::std::string::String::new())
    }

    pub fn get_gl_desc(&self) -> &str {
        &self.gl_desc
    }

    // string pd = 3;

    pub fn clear_pd(&mut self) {
        self.pd.clear();
    }

    // Param is passed by value, moved
    pub fn set_pd(&mut self, v: ::std::string::String) {
        self.pd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pd(&mut self) -> &mut ::std::string::String {
        &mut self.pd
    }

    // Take field
    pub fn take_pd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pd, ::std::string::String::new())
    }

    pub fn get_pd(&self) -> &str {
        &self.pd
    }

    // string prod_type = 4;

    pub fn clear_prod_type(&mut self) {
        self.prod_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_type(&mut self, v: ::std::string::String) {
        self.prod_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_type(&mut self) -> &mut ::std::string::String {
        &mut self.prod_type
    }

    // Take field
    pub fn take_prod_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_type, ::std::string::String::new())
    }

    pub fn get_prod_type(&self) -> &str {
        &self.prod_type
    }

    // string i = 5;

    pub fn clear_i(&mut self) {
        self.i.clear();
    }

    // Param is passed by value, moved
    pub fn set_i(&mut self, v: ::std::string::String) {
        self.i = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_i(&mut self) -> &mut ::std::string::String {
        &mut self.i
    }

    // Take field
    pub fn take_i(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.i, ::std::string::String::new())
    }

    pub fn get_i(&self) -> &str {
        &self.i
    }

    // double total_pd_sum = 6;

    pub fn clear_total_pd_sum(&mut self) {
        self.total_pd_sum = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_pd_sum(&mut self, v: f64) {
        self.total_pd_sum = v;
    }

    pub fn get_total_pd_sum(&self) -> f64 {
        self.total_pd_sum
    }

    // int64 total_pd_count = 7;

    pub fn clear_total_pd_count(&mut self) {
        self.total_pd_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_pd_count(&mut self, v: i64) {
        self.total_pd_count = v;
    }

    pub fn get_total_pd_count(&self) -> i64 {
        self.total_pd_count
    }

    // int64 as_on_dt = 8;

    pub fn clear_as_on_dt(&mut self) {
        self.as_on_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on_dt(&mut self, v: i64) {
        self.as_on_dt = v;
    }

    pub fn get_as_on_dt(&self) -> i64 {
        self.as_on_dt
    }

    // int64 nxt_rep_dt = 9;

    pub fn clear_nxt_rep_dt(&mut self) {
        self.nxt_rep_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_rep_dt(&mut self, v: i64) {
        self.nxt_rep_dt = v;
    }

    pub fn get_nxt_rep_dt(&self) -> i64 {
        self.nxt_rep_dt
    }

    // string ccy = 10;

    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }

    // repeated .Cashflow cashflows = 11;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_number)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_desc)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pd)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_type)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.i)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_pd_sum = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.total_pd_count = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on_dt = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_rep_dt = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                11 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.gl_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.gl_number);
        }
        if !self.gl_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.gl_desc);
        }
        if !self.pd.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.pd);
        }
        if !self.prod_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.prod_type);
        }
        if !self.i.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.i);
        }
        if self.total_pd_sum != 0. {
            my_size += 9;
        }
        if self.total_pd_count != 0 {
            my_size += ::protobuf::rt::value_size(7, self.total_pd_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.as_on_dt != 0 {
            my_size += ::protobuf::rt::value_size(8, self.as_on_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.nxt_rep_dt != 0 {
            my_size += ::protobuf::rt::value_size(9, self.nxt_rep_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.ccy);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.gl_number.is_empty() {
            os.write_string(1, &self.gl_number)?;
        }
        if !self.gl_desc.is_empty() {
            os.write_string(2, &self.gl_desc)?;
        }
        if !self.pd.is_empty() {
            os.write_string(3, &self.pd)?;
        }
        if !self.prod_type.is_empty() {
            os.write_string(4, &self.prod_type)?;
        }
        if !self.i.is_empty() {
            os.write_string(5, &self.i)?;
        }
        if self.total_pd_sum != 0. {
            os.write_double(6, self.total_pd_sum)?;
        }
        if self.total_pd_count != 0 {
            os.write_int64(7, self.total_pd_count)?;
        }
        if self.as_on_dt != 0 {
            os.write_int64(8, self.as_on_dt)?;
        }
        if self.nxt_rep_dt != 0 {
            os.write_int64(9, self.nxt_rep_dt)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(10, &self.ccy)?;
        }
        for v in &self.cashflows {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gl_number",
                    |m: &AccountWithCashflows| { &m.gl_number },
                    |m: &mut AccountWithCashflows| { &mut m.gl_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gl_desc",
                    |m: &AccountWithCashflows| { &m.gl_desc },
                    |m: &mut AccountWithCashflows| { &mut m.gl_desc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pd",
                    |m: &AccountWithCashflows| { &m.pd },
                    |m: &mut AccountWithCashflows| { &mut m.pd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "prod_type",
                    |m: &AccountWithCashflows| { &m.prod_type },
                    |m: &mut AccountWithCashflows| { &mut m.prod_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "i",
                    |m: &AccountWithCashflows| { &m.i },
                    |m: &mut AccountWithCashflows| { &mut m.i },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_pd_sum",
                    |m: &AccountWithCashflows| { &m.total_pd_sum },
                    |m: &mut AccountWithCashflows| { &mut m.total_pd_sum },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "total_pd_count",
                    |m: &AccountWithCashflows| { &m.total_pd_count },
                    |m: &mut AccountWithCashflows| { &mut m.total_pd_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "as_on_dt",
                    |m: &AccountWithCashflows| { &m.as_on_dt },
                    |m: &mut AccountWithCashflows| { &mut m.as_on_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "nxt_rep_dt",
                    |m: &AccountWithCashflows| { &m.nxt_rep_dt },
                    |m: &mut AccountWithCashflows| { &mut m.nxt_rep_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy",
                    |m: &AccountWithCashflows| { &m.ccy },
                    |m: &mut AccountWithCashflows| { &mut m.ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_gl_number();
        self.clear_gl_desc();
        self.clear_pd();
        self.clear_prod_type();
        self.clear_i();
        self.clear_total_pd_sum();
        self.clear_total_pd_count();
        self.clear_as_on_dt();
        self.clear_nxt_rep_dt();
        self.clear_ccy();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aAccountWithCashflows.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\
    \x18\x01\x20\x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\
    \x01R\x07prinAmt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xc2\
    \x02\n\x14AccountWithCashflows\x12\x1b\n\tgl_number\x18\x01\x20\x01(\tR\
    \x08glNumber\x12\x17\n\x07gl_desc\x18\x02\x20\x01(\tR\x06glDesc\x12\x0e\
    \n\x02pd\x18\x03\x20\x01(\tR\x02pd\x12\x1b\n\tprod_type\x18\x04\x20\x01(\
    \tR\x08prodType\x12\x0c\n\x01i\x18\x05\x20\x01(\tR\x01i\x12\x20\n\x0ctot\
    al_pd_sum\x18\x06\x20\x01(\x01R\ntotalPdSum\x12$\n\x0etotal_pd_count\x18\
    \x07\x20\x01(\x03R\x0ctotalPdCount\x12\x18\n\x08as_on_dt\x18\x08\x20\x01\
    (\x03R\x06asOnDt\x12\x1c\n\nnxt_rep_dt\x18\t\x20\x01(\x03R\x08nxtRepDt\
    \x12\x10\n\x03ccy\x18\n\x20\x01(\tR\x03ccy\x12'\n\tcashflows\x18\x0b\x20\
    \x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}