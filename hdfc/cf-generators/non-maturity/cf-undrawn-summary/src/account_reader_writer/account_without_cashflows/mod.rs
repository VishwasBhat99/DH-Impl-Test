// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `non-maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct OutputAccount {
    // message fields
    pub v_src_sys_id: ::std::string::String,
    pub n_ccf_prcnt: f64,
    pub v_basel_asset_class_desc: ::std::string::String,
    pub v_party_type_desc: ::std::string::String,
    pub v_ccy_code: ::std::string::String,
    pub v_exp_amt: f64,
    pub n_undrawn_amt: f64,
    pub lcr_category: ::std::string::String,
    pub asset_class_desc: ::std::string::String,
    pub final_mapping: ::std::string::String,
    pub f_uncond_cancelled_exp_ind: ::std::string::String,
    pub slr: f64,
    pub lcr: f64,
    pub v_prod_code: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutputAccount {
    fn default() -> &'a OutputAccount {
        <OutputAccount as ::protobuf::Message>::default_instance()
    }
}

impl OutputAccount {
    pub fn new() -> OutputAccount {
        ::std::default::Default::default()
    }

    // string v_src_sys_id = 1;


    pub fn get_v_src_sys_id(&self) -> &str {
        &self.v_src_sys_id
    }
    pub fn clear_v_src_sys_id(&mut self) {
        self.v_src_sys_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_src_sys_id(&mut self, v: ::std::string::String) {
        self.v_src_sys_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_src_sys_id(&mut self) -> &mut ::std::string::String {
        &mut self.v_src_sys_id
    }

    // Take field
    pub fn take_v_src_sys_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_src_sys_id, ::std::string::String::new())
    }

    // double n_ccf_prcnt = 2;


    pub fn get_n_ccf_prcnt(&self) -> f64 {
        self.n_ccf_prcnt
    }
    pub fn clear_n_ccf_prcnt(&mut self) {
        self.n_ccf_prcnt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_n_ccf_prcnt(&mut self, v: f64) {
        self.n_ccf_prcnt = v;
    }

    // string v_basel_asset_class_desc = 3;


    pub fn get_v_basel_asset_class_desc(&self) -> &str {
        &self.v_basel_asset_class_desc
    }
    pub fn clear_v_basel_asset_class_desc(&mut self) {
        self.v_basel_asset_class_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_basel_asset_class_desc(&mut self, v: ::std::string::String) {
        self.v_basel_asset_class_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_basel_asset_class_desc(&mut self) -> &mut ::std::string::String {
        &mut self.v_basel_asset_class_desc
    }

    // Take field
    pub fn take_v_basel_asset_class_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_basel_asset_class_desc, ::std::string::String::new())
    }

    // string v_party_type_desc = 4;


    pub fn get_v_party_type_desc(&self) -> &str {
        &self.v_party_type_desc
    }
    pub fn clear_v_party_type_desc(&mut self) {
        self.v_party_type_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_party_type_desc(&mut self, v: ::std::string::String) {
        self.v_party_type_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_party_type_desc(&mut self) -> &mut ::std::string::String {
        &mut self.v_party_type_desc
    }

    // Take field
    pub fn take_v_party_type_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_party_type_desc, ::std::string::String::new())
    }

    // string v_ccy_code = 5;


    pub fn get_v_ccy_code(&self) -> &str {
        &self.v_ccy_code
    }
    pub fn clear_v_ccy_code(&mut self) {
        self.v_ccy_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_ccy_code(&mut self, v: ::std::string::String) {
        self.v_ccy_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_ccy_code(&mut self) -> &mut ::std::string::String {
        &mut self.v_ccy_code
    }

    // Take field
    pub fn take_v_ccy_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_ccy_code, ::std::string::String::new())
    }

    // double v_exp_amt = 6;


    pub fn get_v_exp_amt(&self) -> f64 {
        self.v_exp_amt
    }
    pub fn clear_v_exp_amt(&mut self) {
        self.v_exp_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_v_exp_amt(&mut self, v: f64) {
        self.v_exp_amt = v;
    }

    // double n_undrawn_amt = 7;


    pub fn get_n_undrawn_amt(&self) -> f64 {
        self.n_undrawn_amt
    }
    pub fn clear_n_undrawn_amt(&mut self) {
        self.n_undrawn_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_n_undrawn_amt(&mut self, v: f64) {
        self.n_undrawn_amt = v;
    }

    // string lcr_category = 8;


    pub fn get_lcr_category(&self) -> &str {
        &self.lcr_category
    }
    pub fn clear_lcr_category(&mut self) {
        self.lcr_category.clear();
    }

    // Param is passed by value, moved
    pub fn set_lcr_category(&mut self, v: ::std::string::String) {
        self.lcr_category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lcr_category(&mut self) -> &mut ::std::string::String {
        &mut self.lcr_category
    }

    // Take field
    pub fn take_lcr_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lcr_category, ::std::string::String::new())
    }

    // string asset_class_desc = 9;


    pub fn get_asset_class_desc(&self) -> &str {
        &self.asset_class_desc
    }
    pub fn clear_asset_class_desc(&mut self) {
        self.asset_class_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_class_desc(&mut self, v: ::std::string::String) {
        self.asset_class_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_class_desc(&mut self) -> &mut ::std::string::String {
        &mut self.asset_class_desc
    }

    // Take field
    pub fn take_asset_class_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_class_desc, ::std::string::String::new())
    }

    // string final_mapping = 10;


    pub fn get_final_mapping(&self) -> &str {
        &self.final_mapping
    }
    pub fn clear_final_mapping(&mut self) {
        self.final_mapping.clear();
    }

    // Param is passed by value, moved
    pub fn set_final_mapping(&mut self, v: ::std::string::String) {
        self.final_mapping = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_final_mapping(&mut self) -> &mut ::std::string::String {
        &mut self.final_mapping
    }

    // Take field
    pub fn take_final_mapping(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.final_mapping, ::std::string::String::new())
    }

    // string f_uncond_cancelled_exp_ind = 11;


    pub fn get_f_uncond_cancelled_exp_ind(&self) -> &str {
        &self.f_uncond_cancelled_exp_ind
    }
    pub fn clear_f_uncond_cancelled_exp_ind(&mut self) {
        self.f_uncond_cancelled_exp_ind.clear();
    }

    // Param is passed by value, moved
    pub fn set_f_uncond_cancelled_exp_ind(&mut self, v: ::std::string::String) {
        self.f_uncond_cancelled_exp_ind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_f_uncond_cancelled_exp_ind(&mut self) -> &mut ::std::string::String {
        &mut self.f_uncond_cancelled_exp_ind
    }

    // Take field
    pub fn take_f_uncond_cancelled_exp_ind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.f_uncond_cancelled_exp_ind, ::std::string::String::new())
    }

    // double slr = 12;


    pub fn get_slr(&self) -> f64 {
        self.slr
    }
    pub fn clear_slr(&mut self) {
        self.slr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_slr(&mut self, v: f64) {
        self.slr = v;
    }

    // double lcr = 13;


    pub fn get_lcr(&self) -> f64 {
        self.lcr
    }
    pub fn clear_lcr(&mut self) {
        self.lcr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lcr(&mut self, v: f64) {
        self.lcr = v;
    }

    // string v_prod_code = 14;


    pub fn get_v_prod_code(&self) -> &str {
        &self.v_prod_code
    }
    pub fn clear_v_prod_code(&mut self) {
        self.v_prod_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_prod_code(&mut self, v: ::std::string::String) {
        self.v_prod_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_prod_code(&mut self) -> &mut ::std::string::String {
        &mut self.v_prod_code
    }

    // Take field
    pub fn take_v_prod_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_prod_code, ::std::string::String::new())
    }
}

impl ::protobuf::Message for OutputAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_src_sys_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.n_ccf_prcnt = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_basel_asset_class_desc)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_party_type_desc)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_ccy_code)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.v_exp_amt = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.n_undrawn_amt = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lcr_category)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_class_desc)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.final_mapping)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.f_uncond_cancelled_exp_ind)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.slr = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.lcr = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_prod_code)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.v_src_sys_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.v_src_sys_id);
        }
        if self.n_ccf_prcnt != 0. {
            my_size += 9;
        }
        if !self.v_basel_asset_class_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.v_basel_asset_class_desc);
        }
        if !self.v_party_type_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.v_party_type_desc);
        }
        if !self.v_ccy_code.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.v_ccy_code);
        }
        if self.v_exp_amt != 0. {
            my_size += 9;
        }
        if self.n_undrawn_amt != 0. {
            my_size += 9;
        }
        if !self.lcr_category.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.lcr_category);
        }
        if !self.asset_class_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.asset_class_desc);
        }
        if !self.final_mapping.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.final_mapping);
        }
        if !self.f_uncond_cancelled_exp_ind.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.f_uncond_cancelled_exp_ind);
        }
        if self.slr != 0. {
            my_size += 9;
        }
        if self.lcr != 0. {
            my_size += 9;
        }
        if !self.v_prod_code.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.v_prod_code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.v_src_sys_id.is_empty() {
            os.write_string(1, &self.v_src_sys_id)?;
        }
        if self.n_ccf_prcnt != 0. {
            os.write_double(2, self.n_ccf_prcnt)?;
        }
        if !self.v_basel_asset_class_desc.is_empty() {
            os.write_string(3, &self.v_basel_asset_class_desc)?;
        }
        if !self.v_party_type_desc.is_empty() {
            os.write_string(4, &self.v_party_type_desc)?;
        }
        if !self.v_ccy_code.is_empty() {
            os.write_string(5, &self.v_ccy_code)?;
        }
        if self.v_exp_amt != 0. {
            os.write_double(6, self.v_exp_amt)?;
        }
        if self.n_undrawn_amt != 0. {
            os.write_double(7, self.n_undrawn_amt)?;
        }
        if !self.lcr_category.is_empty() {
            os.write_string(8, &self.lcr_category)?;
        }
        if !self.asset_class_desc.is_empty() {
            os.write_string(9, &self.asset_class_desc)?;
        }
        if !self.final_mapping.is_empty() {
            os.write_string(10, &self.final_mapping)?;
        }
        if !self.f_uncond_cancelled_exp_ind.is_empty() {
            os.write_string(11, &self.f_uncond_cancelled_exp_ind)?;
        }
        if self.slr != 0. {
            os.write_double(12, self.slr)?;
        }
        if self.lcr != 0. {
            os.write_double(13, self.lcr)?;
        }
        if !self.v_prod_code.is_empty() {
            os.write_string(14, &self.v_prod_code)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputAccount {
        OutputAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_src_sys_id",
                |m: &OutputAccount| { &m.v_src_sys_id },
                |m: &mut OutputAccount| { &mut m.v_src_sys_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "n_ccf_prcnt",
                |m: &OutputAccount| { &m.n_ccf_prcnt },
                |m: &mut OutputAccount| { &mut m.n_ccf_prcnt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_basel_asset_class_desc",
                |m: &OutputAccount| { &m.v_basel_asset_class_desc },
                |m: &mut OutputAccount| { &mut m.v_basel_asset_class_desc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_party_type_desc",
                |m: &OutputAccount| { &m.v_party_type_desc },
                |m: &mut OutputAccount| { &mut m.v_party_type_desc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_ccy_code",
                |m: &OutputAccount| { &m.v_ccy_code },
                |m: &mut OutputAccount| { &mut m.v_ccy_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "v_exp_amt",
                |m: &OutputAccount| { &m.v_exp_amt },
                |m: &mut OutputAccount| { &mut m.v_exp_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "n_undrawn_amt",
                |m: &OutputAccount| { &m.n_undrawn_amt },
                |m: &mut OutputAccount| { &mut m.n_undrawn_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "lcr_category",
                |m: &OutputAccount| { &m.lcr_category },
                |m: &mut OutputAccount| { &mut m.lcr_category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_class_desc",
                |m: &OutputAccount| { &m.asset_class_desc },
                |m: &mut OutputAccount| { &mut m.asset_class_desc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "final_mapping",
                |m: &OutputAccount| { &m.final_mapping },
                |m: &mut OutputAccount| { &mut m.final_mapping },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "f_uncond_cancelled_exp_ind",
                |m: &OutputAccount| { &m.f_uncond_cancelled_exp_ind },
                |m: &mut OutputAccount| { &mut m.f_uncond_cancelled_exp_ind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "slr",
                |m: &OutputAccount| { &m.slr },
                |m: &mut OutputAccount| { &mut m.slr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "lcr",
                |m: &OutputAccount| { &m.lcr },
                |m: &mut OutputAccount| { &mut m.lcr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_prod_code",
                |m: &OutputAccount| { &m.v_prod_code },
                |m: &mut OutputAccount| { &mut m.v_prod_code },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OutputAccount>(
                "OutputAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OutputAccount {
        static instance: ::protobuf::rt::LazyV2<OutputAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OutputAccount::new)
    }
}

impl ::protobuf::Clear for OutputAccount {
    fn clear(&mut self) {
        self.v_src_sys_id.clear();
        self.n_ccf_prcnt = 0.;
        self.v_basel_asset_class_desc.clear();
        self.v_party_type_desc.clear();
        self.v_ccy_code.clear();
        self.v_exp_amt = 0.;
        self.n_undrawn_amt = 0.;
        self.lcr_category.clear();
        self.asset_class_desc.clear();
        self.final_mapping.clear();
        self.f_uncond_cancelled_exp_ind.clear();
        self.slr = 0.;
        self.lcr = 0.;
        self.v_prod_code.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12non-maturity.proto\"\x83\x04\n\rOutputAccount\x12\x1f\n\x0cv_src_s\
    ys_id\x18\x01\x20\x01(\tR\tvSrcSysId\x12\x1e\n\x0bn_ccf_prcnt\x18\x02\
    \x20\x01(\x01R\tnCcfPrcnt\x126\n\x18v_basel_asset_class_desc\x18\x03\x20\
    \x01(\tR\x14vBaselAssetClassDesc\x12)\n\x11v_party_type_desc\x18\x04\x20\
    \x01(\tR\x0evPartyTypeDesc\x12\x1c\n\nv_ccy_code\x18\x05\x20\x01(\tR\x08\
    vCcyCode\x12\x1a\n\tv_exp_amt\x18\x06\x20\x01(\x01R\x07vExpAmt\x12\"\n\r\
    n_undrawn_amt\x18\x07\x20\x01(\x01R\x0bnUndrawnAmt\x12!\n\x0clcr_categor\
    y\x18\x08\x20\x01(\tR\x0blcrCategory\x12(\n\x10asset_class_desc\x18\t\
    \x20\x01(\tR\x0eassetClassDesc\x12#\n\rfinal_mapping\x18\n\x20\x01(\tR\
    \x0cfinalMapping\x12:\n\x1af_uncond_cancelled_exp_ind\x18\x0b\x20\x01(\t\
    R\x16fUncondCancelledExpInd\x12\x10\n\x03slr\x18\x0c\x20\x01(\x01R\x03sl\
    r\x12\x10\n\x03lcr\x18\r\x20\x01(\x01R\x03lcr\x12\x1e\n\x0bv_prod_code\
    \x18\x0e\x20\x01(\tR\tvProdCodeb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
