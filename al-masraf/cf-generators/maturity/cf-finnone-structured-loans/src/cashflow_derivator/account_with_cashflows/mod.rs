// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub account_number: ::std::string::String,
    pub curr_code: ::std::string::String,
    pub intt_rate: f64,
    pub product_code: ::std::string::String,
    pub mat_date: i64,
    pub rate_flag: ::std::string::String,
    pub repricing_index: ::std::string::String,
    pub psl: ::std::string::String,
    pub npa: ::std::string::String,
    pub indv_corp_flag: ::std::string::String,
    pub customer_type: ::std::string::String,
    pub asset_class_id: ::std::string::String,
    pub customer_id: ::std::string::String,
    pub prod_type: ::std::string::String,
    pub final_int_rate: f64,
    pub cost_centre: i64,
    pub alm_line: ::std::string::String,
    pub coa: ::std::string::String,
    pub division: ::std::string::String,
    pub rep_freq: ::std::string::String,
    pub next_repricing_date: i64,
    pub last_repricing_date: i64,
    pub asset_class: ::std::string::String,
    pub org_date: i64,
    pub branch: ::std::string::String,
    pub al_line: ::std::string::String,
    pub balm_l2: ::std::string::String,
    pub bmid: ::std::string::String,
    pub ia_line: ::std::string::String,
    pub scheme_id: ::std::string::String,
    pub org_tenor: i64,
    pub weaker_code: ::std::string::String,
    pub der_int_rate: f64,
    pub bnchmrk_rate: f64,
    pub spread: f64,
    pub fully_floating_flg: ::std::string::String,
    pub gr_ofs_gl: ::std::string::String,
    pub accrual_basis: ::std::string::String,
    pub accrued_interest: f64,
    pub current_bal: f64,
    pub due_date: i64,
    pub interest_pay_freq: ::std::string::String,
    pub original_balance: f64,
    pub orig_term: i64,
    pub emi: f64,
    pub payment_freq: ::std::string::String,
    pub payment_type: ::std::string::String,
    pub dpd: f64,
    pub customer_name: ::std::string::String,
    pub inst_st_dt: i64,
    pub weaker: ::std::string::String,
    pub current_book_balance: f64,
    pub first_inst_date: i64,
    pub inst_num: i64,
    pub num_inst_paid: i64,
    pub last_inst_date: i64,
    pub gr_dr: f64,
    pub gr_cr: f64,
    pub re_dr: f64,
    pub re_cr: f64,
    pub is_dr: f64,
    pub is_cr: f64,
    pub ui_dr: f64,
    pub ui_cr: f64,
    pub is_ofs_gl: ::std::string::String,
    pub re_ofs_gl: ::std::string::String,
    pub ui_ofs_gl: ::std::string::String,
    pub as_on_date: i64,
    pub A1: f64,
    pub A2: f64,
    pub A3: f64,
    pub A4: f64,
    pub A5: f64,
    pub A6: i64,
    pub A7: i64,
    pub A8: i64,
    pub A9: i64,
    pub A10: i64,
    pub A11: ::std::string::String,
    pub A12: ::std::string::String,
    pub A13: ::std::string::String,
    pub A14: ::std::string::String,
    pub A15: ::std::string::String,
    pub A16: ::std::string::String,
    pub A17: ::std::string::String,
    pub A18: ::std::string::String,
    pub A19: ::std::string::String,
    pub A20: ::std::string::String,
    pub total_interest_amount: f64,
    pub total_principal_amount: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string account_number = 1;


    pub fn get_account_number(&self) -> &str {
        &self.account_number
    }
    pub fn clear_account_number(&mut self) {
        self.account_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_number(&mut self, v: ::std::string::String) {
        self.account_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_number(&mut self) -> &mut ::std::string::String {
        &mut self.account_number
    }

    // Take field
    pub fn take_account_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_number, ::std::string::String::new())
    }

    // string curr_code = 2;


    pub fn get_curr_code(&self) -> &str {
        &self.curr_code
    }
    pub fn clear_curr_code(&mut self) {
        self.curr_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_curr_code(&mut self, v: ::std::string::String) {
        self.curr_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_curr_code(&mut self) -> &mut ::std::string::String {
        &mut self.curr_code
    }

    // Take field
    pub fn take_curr_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.curr_code, ::std::string::String::new())
    }

    // double intt_rate = 3;


    pub fn get_intt_rate(&self) -> f64 {
        self.intt_rate
    }
    pub fn clear_intt_rate(&mut self) {
        self.intt_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_intt_rate(&mut self, v: f64) {
        self.intt_rate = v;
    }

    // string product_code = 4;


    pub fn get_product_code(&self) -> &str {
        &self.product_code
    }
    pub fn clear_product_code(&mut self) {
        self.product_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_code(&mut self, v: ::std::string::String) {
        self.product_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_code(&mut self) -> &mut ::std::string::String {
        &mut self.product_code
    }

    // Take field
    pub fn take_product_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_code, ::std::string::String::new())
    }

    // int64 mat_date = 5;


    pub fn get_mat_date(&self) -> i64 {
        self.mat_date
    }
    pub fn clear_mat_date(&mut self) {
        self.mat_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_date(&mut self, v: i64) {
        self.mat_date = v;
    }

    // string rate_flag = 6;


    pub fn get_rate_flag(&self) -> &str {
        &self.rate_flag
    }
    pub fn clear_rate_flag(&mut self) {
        self.rate_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_flag(&mut self, v: ::std::string::String) {
        self.rate_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_flag(&mut self) -> &mut ::std::string::String {
        &mut self.rate_flag
    }

    // Take field
    pub fn take_rate_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_flag, ::std::string::String::new())
    }

    // string repricing_index = 7;


    pub fn get_repricing_index(&self) -> &str {
        &self.repricing_index
    }
    pub fn clear_repricing_index(&mut self) {
        self.repricing_index.clear();
    }

    // Param is passed by value, moved
    pub fn set_repricing_index(&mut self, v: ::std::string::String) {
        self.repricing_index = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repricing_index(&mut self) -> &mut ::std::string::String {
        &mut self.repricing_index
    }

    // Take field
    pub fn take_repricing_index(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.repricing_index, ::std::string::String::new())
    }

    // string psl = 8;


    pub fn get_psl(&self) -> &str {
        &self.psl
    }
    pub fn clear_psl(&mut self) {
        self.psl.clear();
    }

    // Param is passed by value, moved
    pub fn set_psl(&mut self, v: ::std::string::String) {
        self.psl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_psl(&mut self) -> &mut ::std::string::String {
        &mut self.psl
    }

    // Take field
    pub fn take_psl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.psl, ::std::string::String::new())
    }

    // string npa = 9;


    pub fn get_npa(&self) -> &str {
        &self.npa
    }
    pub fn clear_npa(&mut self) {
        self.npa.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa(&mut self, v: ::std::string::String) {
        self.npa = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa(&mut self) -> &mut ::std::string::String {
        &mut self.npa
    }

    // Take field
    pub fn take_npa(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa, ::std::string::String::new())
    }

    // string indv_corp_flag = 10;


    pub fn get_indv_corp_flag(&self) -> &str {
        &self.indv_corp_flag
    }
    pub fn clear_indv_corp_flag(&mut self) {
        self.indv_corp_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_indv_corp_flag(&mut self, v: ::std::string::String) {
        self.indv_corp_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_indv_corp_flag(&mut self) -> &mut ::std::string::String {
        &mut self.indv_corp_flag
    }

    // Take field
    pub fn take_indv_corp_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.indv_corp_flag, ::std::string::String::new())
    }

    // string customer_type = 11;


    pub fn get_customer_type(&self) -> &str {
        &self.customer_type
    }
    pub fn clear_customer_type(&mut self) {
        self.customer_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_type(&mut self, v: ::std::string::String) {
        self.customer_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_type(&mut self) -> &mut ::std::string::String {
        &mut self.customer_type
    }

    // Take field
    pub fn take_customer_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_type, ::std::string::String::new())
    }

    // string asset_class_id = 12;


    pub fn get_asset_class_id(&self) -> &str {
        &self.asset_class_id
    }
    pub fn clear_asset_class_id(&mut self) {
        self.asset_class_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_class_id(&mut self, v: ::std::string::String) {
        self.asset_class_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_class_id(&mut self) -> &mut ::std::string::String {
        &mut self.asset_class_id
    }

    // Take field
    pub fn take_asset_class_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_class_id, ::std::string::String::new())
    }

    // string customer_id = 13;


    pub fn get_customer_id(&self) -> &str {
        &self.customer_id
    }
    pub fn clear_customer_id(&mut self) {
        self.customer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_id(&mut self, v: ::std::string::String) {
        self.customer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_id(&mut self) -> &mut ::std::string::String {
        &mut self.customer_id
    }

    // Take field
    pub fn take_customer_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_id, ::std::string::String::new())
    }

    // string prod_type = 14;


    pub fn get_prod_type(&self) -> &str {
        &self.prod_type
    }
    pub fn clear_prod_type(&mut self) {
        self.prod_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_type(&mut self, v: ::std::string::String) {
        self.prod_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_type(&mut self) -> &mut ::std::string::String {
        &mut self.prod_type
    }

    // Take field
    pub fn take_prod_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_type, ::std::string::String::new())
    }

    // double final_int_rate = 15;


    pub fn get_final_int_rate(&self) -> f64 {
        self.final_int_rate
    }
    pub fn clear_final_int_rate(&mut self) {
        self.final_int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_final_int_rate(&mut self, v: f64) {
        self.final_int_rate = v;
    }

    // int64 cost_centre = 16;


    pub fn get_cost_centre(&self) -> i64 {
        self.cost_centre
    }
    pub fn clear_cost_centre(&mut self) {
        self.cost_centre = 0;
    }

    // Param is passed by value, moved
    pub fn set_cost_centre(&mut self, v: i64) {
        self.cost_centre = v;
    }

    // string alm_line = 17;


    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }
    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    // string coa = 18;


    pub fn get_coa(&self) -> &str {
        &self.coa
    }
    pub fn clear_coa(&mut self) {
        self.coa.clear();
    }

    // Param is passed by value, moved
    pub fn set_coa(&mut self, v: ::std::string::String) {
        self.coa = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coa(&mut self) -> &mut ::std::string::String {
        &mut self.coa
    }

    // Take field
    pub fn take_coa(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coa, ::std::string::String::new())
    }

    // string division = 19;


    pub fn get_division(&self) -> &str {
        &self.division
    }
    pub fn clear_division(&mut self) {
        self.division.clear();
    }

    // Param is passed by value, moved
    pub fn set_division(&mut self, v: ::std::string::String) {
        self.division = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_division(&mut self) -> &mut ::std::string::String {
        &mut self.division
    }

    // Take field
    pub fn take_division(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.division, ::std::string::String::new())
    }

    // string rep_freq = 20;


    pub fn get_rep_freq(&self) -> &str {
        &self.rep_freq
    }
    pub fn clear_rep_freq(&mut self) {
        self.rep_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_rep_freq(&mut self, v: ::std::string::String) {
        self.rep_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rep_freq(&mut self) -> &mut ::std::string::String {
        &mut self.rep_freq
    }

    // Take field
    pub fn take_rep_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rep_freq, ::std::string::String::new())
    }

    // int64 next_repricing_date = 21;


    pub fn get_next_repricing_date(&self) -> i64 {
        self.next_repricing_date
    }
    pub fn clear_next_repricing_date(&mut self) {
        self.next_repricing_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_repricing_date(&mut self, v: i64) {
        self.next_repricing_date = v;
    }

    // int64 last_repricing_date = 22;


    pub fn get_last_repricing_date(&self) -> i64 {
        self.last_repricing_date
    }
    pub fn clear_last_repricing_date(&mut self) {
        self.last_repricing_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_repricing_date(&mut self, v: i64) {
        self.last_repricing_date = v;
    }

    // string asset_class = 23;


    pub fn get_asset_class(&self) -> &str {
        &self.asset_class
    }
    pub fn clear_asset_class(&mut self) {
        self.asset_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_class(&mut self, v: ::std::string::String) {
        self.asset_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_class(&mut self) -> &mut ::std::string::String {
        &mut self.asset_class
    }

    // Take field
    pub fn take_asset_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_class, ::std::string::String::new())
    }

    // int64 org_date = 24;


    pub fn get_org_date(&self) -> i64 {
        self.org_date
    }
    pub fn clear_org_date(&mut self) {
        self.org_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_org_date(&mut self, v: i64) {
        self.org_date = v;
    }

    // string branch = 25;


    pub fn get_branch(&self) -> &str {
        &self.branch
    }
    pub fn clear_branch(&mut self) {
        self.branch.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch(&mut self, v: ::std::string::String) {
        self.branch = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch(&mut self) -> &mut ::std::string::String {
        &mut self.branch
    }

    // Take field
    pub fn take_branch(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch, ::std::string::String::new())
    }

    // string al_line = 26;


    pub fn get_al_line(&self) -> &str {
        &self.al_line
    }
    pub fn clear_al_line(&mut self) {
        self.al_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_al_line(&mut self, v: ::std::string::String) {
        self.al_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_al_line(&mut self) -> &mut ::std::string::String {
        &mut self.al_line
    }

    // Take field
    pub fn take_al_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.al_line, ::std::string::String::new())
    }

    // string balm_l2 = 27;


    pub fn get_balm_l2(&self) -> &str {
        &self.balm_l2
    }
    pub fn clear_balm_l2(&mut self) {
        self.balm_l2.clear();
    }

    // Param is passed by value, moved
    pub fn set_balm_l2(&mut self, v: ::std::string::String) {
        self.balm_l2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balm_l2(&mut self) -> &mut ::std::string::String {
        &mut self.balm_l2
    }

    // Take field
    pub fn take_balm_l2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balm_l2, ::std::string::String::new())
    }

    // string bmid = 28;


    pub fn get_bmid(&self) -> &str {
        &self.bmid
    }
    pub fn clear_bmid(&mut self) {
        self.bmid.clear();
    }

    // Param is passed by value, moved
    pub fn set_bmid(&mut self, v: ::std::string::String) {
        self.bmid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bmid(&mut self) -> &mut ::std::string::String {
        &mut self.bmid
    }

    // Take field
    pub fn take_bmid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bmid, ::std::string::String::new())
    }

    // string ia_line = 29;


    pub fn get_ia_line(&self) -> &str {
        &self.ia_line
    }
    pub fn clear_ia_line(&mut self) {
        self.ia_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_ia_line(&mut self, v: ::std::string::String) {
        self.ia_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ia_line(&mut self) -> &mut ::std::string::String {
        &mut self.ia_line
    }

    // Take field
    pub fn take_ia_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ia_line, ::std::string::String::new())
    }

    // string scheme_id = 30;


    pub fn get_scheme_id(&self) -> &str {
        &self.scheme_id
    }
    pub fn clear_scheme_id(&mut self) {
        self.scheme_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_scheme_id(&mut self, v: ::std::string::String) {
        self.scheme_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scheme_id(&mut self) -> &mut ::std::string::String {
        &mut self.scheme_id
    }

    // Take field
    pub fn take_scheme_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.scheme_id, ::std::string::String::new())
    }

    // int64 org_tenor = 31;


    pub fn get_org_tenor(&self) -> i64 {
        self.org_tenor
    }
    pub fn clear_org_tenor(&mut self) {
        self.org_tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_org_tenor(&mut self, v: i64) {
        self.org_tenor = v;
    }

    // string weaker_code = 32;


    pub fn get_weaker_code(&self) -> &str {
        &self.weaker_code
    }
    pub fn clear_weaker_code(&mut self) {
        self.weaker_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_weaker_code(&mut self, v: ::std::string::String) {
        self.weaker_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_weaker_code(&mut self) -> &mut ::std::string::String {
        &mut self.weaker_code
    }

    // Take field
    pub fn take_weaker_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.weaker_code, ::std::string::String::new())
    }

    // double der_int_rate = 33;


    pub fn get_der_int_rate(&self) -> f64 {
        self.der_int_rate
    }
    pub fn clear_der_int_rate(&mut self) {
        self.der_int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_der_int_rate(&mut self, v: f64) {
        self.der_int_rate = v;
    }

    // double bnchmrk_rate = 34;


    pub fn get_bnchmrk_rate(&self) -> f64 {
        self.bnchmrk_rate
    }
    pub fn clear_bnchmrk_rate(&mut self) {
        self.bnchmrk_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bnchmrk_rate(&mut self, v: f64) {
        self.bnchmrk_rate = v;
    }

    // double spread = 35;


    pub fn get_spread(&self) -> f64 {
        self.spread
    }
    pub fn clear_spread(&mut self) {
        self.spread = 0.;
    }

    // Param is passed by value, moved
    pub fn set_spread(&mut self, v: f64) {
        self.spread = v;
    }

    // string fully_floating_flg = 36;


    pub fn get_fully_floating_flg(&self) -> &str {
        &self.fully_floating_flg
    }
    pub fn clear_fully_floating_flg(&mut self) {
        self.fully_floating_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_fully_floating_flg(&mut self, v: ::std::string::String) {
        self.fully_floating_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fully_floating_flg(&mut self) -> &mut ::std::string::String {
        &mut self.fully_floating_flg
    }

    // Take field
    pub fn take_fully_floating_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fully_floating_flg, ::std::string::String::new())
    }

    // string gr_ofs_gl = 37;


    pub fn get_gr_ofs_gl(&self) -> &str {
        &self.gr_ofs_gl
    }
    pub fn clear_gr_ofs_gl(&mut self) {
        self.gr_ofs_gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_gr_ofs_gl(&mut self, v: ::std::string::String) {
        self.gr_ofs_gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gr_ofs_gl(&mut self) -> &mut ::std::string::String {
        &mut self.gr_ofs_gl
    }

    // Take field
    pub fn take_gr_ofs_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gr_ofs_gl, ::std::string::String::new())
    }

    // string accrual_basis = 38;


    pub fn get_accrual_basis(&self) -> &str {
        &self.accrual_basis
    }
    pub fn clear_accrual_basis(&mut self) {
        self.accrual_basis.clear();
    }

    // Param is passed by value, moved
    pub fn set_accrual_basis(&mut self, v: ::std::string::String) {
        self.accrual_basis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accrual_basis(&mut self) -> &mut ::std::string::String {
        &mut self.accrual_basis
    }

    // Take field
    pub fn take_accrual_basis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.accrual_basis, ::std::string::String::new())
    }

    // double accrued_interest = 39;


    pub fn get_accrued_interest(&self) -> f64 {
        self.accrued_interest
    }
    pub fn clear_accrued_interest(&mut self) {
        self.accrued_interest = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accrued_interest(&mut self, v: f64) {
        self.accrued_interest = v;
    }

    // double current_bal = 40;


    pub fn get_current_bal(&self) -> f64 {
        self.current_bal
    }
    pub fn clear_current_bal(&mut self) {
        self.current_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_current_bal(&mut self, v: f64) {
        self.current_bal = v;
    }

    // int64 due_date = 41;


    pub fn get_due_date(&self) -> i64 {
        self.due_date
    }
    pub fn clear_due_date(&mut self) {
        self.due_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_due_date(&mut self, v: i64) {
        self.due_date = v;
    }

    // string interest_pay_freq = 42;


    pub fn get_interest_pay_freq(&self) -> &str {
        &self.interest_pay_freq
    }
    pub fn clear_interest_pay_freq(&mut self) {
        self.interest_pay_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_interest_pay_freq(&mut self, v: ::std::string::String) {
        self.interest_pay_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interest_pay_freq(&mut self) -> &mut ::std::string::String {
        &mut self.interest_pay_freq
    }

    // Take field
    pub fn take_interest_pay_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interest_pay_freq, ::std::string::String::new())
    }

    // double original_balance = 43;


    pub fn get_original_balance(&self) -> f64 {
        self.original_balance
    }
    pub fn clear_original_balance(&mut self) {
        self.original_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_original_balance(&mut self, v: f64) {
        self.original_balance = v;
    }

    // int64 orig_term = 44;


    pub fn get_orig_term(&self) -> i64 {
        self.orig_term
    }
    pub fn clear_orig_term(&mut self) {
        self.orig_term = 0;
    }

    // Param is passed by value, moved
    pub fn set_orig_term(&mut self, v: i64) {
        self.orig_term = v;
    }

    // double emi = 45;


    pub fn get_emi(&self) -> f64 {
        self.emi
    }
    pub fn clear_emi(&mut self) {
        self.emi = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi(&mut self, v: f64) {
        self.emi = v;
    }

    // string payment_freq = 46;


    pub fn get_payment_freq(&self) -> &str {
        &self.payment_freq
    }
    pub fn clear_payment_freq(&mut self) {
        self.payment_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_payment_freq(&mut self, v: ::std::string::String) {
        self.payment_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payment_freq(&mut self) -> &mut ::std::string::String {
        &mut self.payment_freq
    }

    // Take field
    pub fn take_payment_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.payment_freq, ::std::string::String::new())
    }

    // string payment_type = 47;


    pub fn get_payment_type(&self) -> &str {
        &self.payment_type
    }
    pub fn clear_payment_type(&mut self) {
        self.payment_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_payment_type(&mut self, v: ::std::string::String) {
        self.payment_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payment_type(&mut self) -> &mut ::std::string::String {
        &mut self.payment_type
    }

    // Take field
    pub fn take_payment_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.payment_type, ::std::string::String::new())
    }

    // double dpd = 48;


    pub fn get_dpd(&self) -> f64 {
        self.dpd
    }
    pub fn clear_dpd(&mut self) {
        self.dpd = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dpd(&mut self, v: f64) {
        self.dpd = v;
    }

    // string customer_name = 49;


    pub fn get_customer_name(&self) -> &str {
        &self.customer_name
    }
    pub fn clear_customer_name(&mut self) {
        self.customer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_name(&mut self, v: ::std::string::String) {
        self.customer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_name(&mut self) -> &mut ::std::string::String {
        &mut self.customer_name
    }

    // Take field
    pub fn take_customer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_name, ::std::string::String::new())
    }

    // int64 inst_st_dt = 50;


    pub fn get_inst_st_dt(&self) -> i64 {
        self.inst_st_dt
    }
    pub fn clear_inst_st_dt(&mut self) {
        self.inst_st_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_inst_st_dt(&mut self, v: i64) {
        self.inst_st_dt = v;
    }

    // string weaker = 51;


    pub fn get_weaker(&self) -> &str {
        &self.weaker
    }
    pub fn clear_weaker(&mut self) {
        self.weaker.clear();
    }

    // Param is passed by value, moved
    pub fn set_weaker(&mut self, v: ::std::string::String) {
        self.weaker = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_weaker(&mut self) -> &mut ::std::string::String {
        &mut self.weaker
    }

    // Take field
    pub fn take_weaker(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.weaker, ::std::string::String::new())
    }

    // double current_book_balance = 52;


    pub fn get_current_book_balance(&self) -> f64 {
        self.current_book_balance
    }
    pub fn clear_current_book_balance(&mut self) {
        self.current_book_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_current_book_balance(&mut self, v: f64) {
        self.current_book_balance = v;
    }

    // int64 first_inst_date = 53;


    pub fn get_first_inst_date(&self) -> i64 {
        self.first_inst_date
    }
    pub fn clear_first_inst_date(&mut self) {
        self.first_inst_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_first_inst_date(&mut self, v: i64) {
        self.first_inst_date = v;
    }

    // int64 inst_num = 54;


    pub fn get_inst_num(&self) -> i64 {
        self.inst_num
    }
    pub fn clear_inst_num(&mut self) {
        self.inst_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_inst_num(&mut self, v: i64) {
        self.inst_num = v;
    }

    // int64 num_inst_paid = 55;


    pub fn get_num_inst_paid(&self) -> i64 {
        self.num_inst_paid
    }
    pub fn clear_num_inst_paid(&mut self) {
        self.num_inst_paid = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_inst_paid(&mut self, v: i64) {
        self.num_inst_paid = v;
    }

    // int64 last_inst_date = 56;


    pub fn get_last_inst_date(&self) -> i64 {
        self.last_inst_date
    }
    pub fn clear_last_inst_date(&mut self) {
        self.last_inst_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_inst_date(&mut self, v: i64) {
        self.last_inst_date = v;
    }

    // double gr_dr = 57;


    pub fn get_gr_dr(&self) -> f64 {
        self.gr_dr
    }
    pub fn clear_gr_dr(&mut self) {
        self.gr_dr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gr_dr(&mut self, v: f64) {
        self.gr_dr = v;
    }

    // double gr_cr = 58;


    pub fn get_gr_cr(&self) -> f64 {
        self.gr_cr
    }
    pub fn clear_gr_cr(&mut self) {
        self.gr_cr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gr_cr(&mut self, v: f64) {
        self.gr_cr = v;
    }

    // double re_dr = 59;


    pub fn get_re_dr(&self) -> f64 {
        self.re_dr
    }
    pub fn clear_re_dr(&mut self) {
        self.re_dr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_re_dr(&mut self, v: f64) {
        self.re_dr = v;
    }

    // double re_cr = 60;


    pub fn get_re_cr(&self) -> f64 {
        self.re_cr
    }
    pub fn clear_re_cr(&mut self) {
        self.re_cr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_re_cr(&mut self, v: f64) {
        self.re_cr = v;
    }

    // double is_dr = 61;


    pub fn get_is_dr(&self) -> f64 {
        self.is_dr
    }
    pub fn clear_is_dr(&mut self) {
        self.is_dr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_is_dr(&mut self, v: f64) {
        self.is_dr = v;
    }

    // double is_cr = 62;


    pub fn get_is_cr(&self) -> f64 {
        self.is_cr
    }
    pub fn clear_is_cr(&mut self) {
        self.is_cr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_is_cr(&mut self, v: f64) {
        self.is_cr = v;
    }

    // double ui_dr = 63;


    pub fn get_ui_dr(&self) -> f64 {
        self.ui_dr
    }
    pub fn clear_ui_dr(&mut self) {
        self.ui_dr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ui_dr(&mut self, v: f64) {
        self.ui_dr = v;
    }

    // double ui_cr = 64;


    pub fn get_ui_cr(&self) -> f64 {
        self.ui_cr
    }
    pub fn clear_ui_cr(&mut self) {
        self.ui_cr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ui_cr(&mut self, v: f64) {
        self.ui_cr = v;
    }

    // string is_ofs_gl = 65;


    pub fn get_is_ofs_gl(&self) -> &str {
        &self.is_ofs_gl
    }
    pub fn clear_is_ofs_gl(&mut self) {
        self.is_ofs_gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_ofs_gl(&mut self, v: ::std::string::String) {
        self.is_ofs_gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_ofs_gl(&mut self) -> &mut ::std::string::String {
        &mut self.is_ofs_gl
    }

    // Take field
    pub fn take_is_ofs_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_ofs_gl, ::std::string::String::new())
    }

    // string re_ofs_gl = 66;


    pub fn get_re_ofs_gl(&self) -> &str {
        &self.re_ofs_gl
    }
    pub fn clear_re_ofs_gl(&mut self) {
        self.re_ofs_gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_re_ofs_gl(&mut self, v: ::std::string::String) {
        self.re_ofs_gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_re_ofs_gl(&mut self) -> &mut ::std::string::String {
        &mut self.re_ofs_gl
    }

    // Take field
    pub fn take_re_ofs_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.re_ofs_gl, ::std::string::String::new())
    }

    // string ui_ofs_gl = 67;


    pub fn get_ui_ofs_gl(&self) -> &str {
        &self.ui_ofs_gl
    }
    pub fn clear_ui_ofs_gl(&mut self) {
        self.ui_ofs_gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_ui_ofs_gl(&mut self, v: ::std::string::String) {
        self.ui_ofs_gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ui_ofs_gl(&mut self) -> &mut ::std::string::String {
        &mut self.ui_ofs_gl
    }

    // Take field
    pub fn take_ui_ofs_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ui_ofs_gl, ::std::string::String::new())
    }

    // int64 as_on_date = 68;


    pub fn get_as_on_date(&self) -> i64 {
        self.as_on_date
    }
    pub fn clear_as_on_date(&mut self) {
        self.as_on_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on_date(&mut self, v: i64) {
        self.as_on_date = v;
    }

    // double A1 = 69;


    pub fn get_A1(&self) -> f64 {
        self.A1
    }
    pub fn clear_A1(&mut self) {
        self.A1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_A1(&mut self, v: f64) {
        self.A1 = v;
    }

    // double A2 = 70;


    pub fn get_A2(&self) -> f64 {
        self.A2
    }
    pub fn clear_A2(&mut self) {
        self.A2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_A2(&mut self, v: f64) {
        self.A2 = v;
    }

    // double A3 = 71;


    pub fn get_A3(&self) -> f64 {
        self.A3
    }
    pub fn clear_A3(&mut self) {
        self.A3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_A3(&mut self, v: f64) {
        self.A3 = v;
    }

    // double A4 = 72;


    pub fn get_A4(&self) -> f64 {
        self.A4
    }
    pub fn clear_A4(&mut self) {
        self.A4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_A4(&mut self, v: f64) {
        self.A4 = v;
    }

    // double A5 = 73;


    pub fn get_A5(&self) -> f64 {
        self.A5
    }
    pub fn clear_A5(&mut self) {
        self.A5 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_A5(&mut self, v: f64) {
        self.A5 = v;
    }

    // int64 A6 = 74;


    pub fn get_A6(&self) -> i64 {
        self.A6
    }
    pub fn clear_A6(&mut self) {
        self.A6 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A6(&mut self, v: i64) {
        self.A6 = v;
    }

    // int64 A7 = 75;


    pub fn get_A7(&self) -> i64 {
        self.A7
    }
    pub fn clear_A7(&mut self) {
        self.A7 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A7(&mut self, v: i64) {
        self.A7 = v;
    }

    // int64 A8 = 76;


    pub fn get_A8(&self) -> i64 {
        self.A8
    }
    pub fn clear_A8(&mut self) {
        self.A8 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A8(&mut self, v: i64) {
        self.A8 = v;
    }

    // int64 A9 = 77;


    pub fn get_A9(&self) -> i64 {
        self.A9
    }
    pub fn clear_A9(&mut self) {
        self.A9 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A9(&mut self, v: i64) {
        self.A9 = v;
    }

    // int64 A10 = 78;


    pub fn get_A10(&self) -> i64 {
        self.A10
    }
    pub fn clear_A10(&mut self) {
        self.A10 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A10(&mut self, v: i64) {
        self.A10 = v;
    }

    // string A11 = 79;


    pub fn get_A11(&self) -> &str {
        &self.A11
    }
    pub fn clear_A11(&mut self) {
        self.A11.clear();
    }

    // Param is passed by value, moved
    pub fn set_A11(&mut self, v: ::std::string::String) {
        self.A11 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A11(&mut self) -> &mut ::std::string::String {
        &mut self.A11
    }

    // Take field
    pub fn take_A11(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A11, ::std::string::String::new())
    }

    // string A12 = 80;


    pub fn get_A12(&self) -> &str {
        &self.A12
    }
    pub fn clear_A12(&mut self) {
        self.A12.clear();
    }

    // Param is passed by value, moved
    pub fn set_A12(&mut self, v: ::std::string::String) {
        self.A12 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A12(&mut self) -> &mut ::std::string::String {
        &mut self.A12
    }

    // Take field
    pub fn take_A12(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A12, ::std::string::String::new())
    }

    // string A13 = 81;


    pub fn get_A13(&self) -> &str {
        &self.A13
    }
    pub fn clear_A13(&mut self) {
        self.A13.clear();
    }

    // Param is passed by value, moved
    pub fn set_A13(&mut self, v: ::std::string::String) {
        self.A13 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A13(&mut self) -> &mut ::std::string::String {
        &mut self.A13
    }

    // Take field
    pub fn take_A13(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A13, ::std::string::String::new())
    }

    // string A14 = 82;


    pub fn get_A14(&self) -> &str {
        &self.A14
    }
    pub fn clear_A14(&mut self) {
        self.A14.clear();
    }

    // Param is passed by value, moved
    pub fn set_A14(&mut self, v: ::std::string::String) {
        self.A14 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A14(&mut self) -> &mut ::std::string::String {
        &mut self.A14
    }

    // Take field
    pub fn take_A14(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A14, ::std::string::String::new())
    }

    // string A15 = 83;


    pub fn get_A15(&self) -> &str {
        &self.A15
    }
    pub fn clear_A15(&mut self) {
        self.A15.clear();
    }

    // Param is passed by value, moved
    pub fn set_A15(&mut self, v: ::std::string::String) {
        self.A15 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A15(&mut self) -> &mut ::std::string::String {
        &mut self.A15
    }

    // Take field
    pub fn take_A15(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A15, ::std::string::String::new())
    }

    // string A16 = 84;


    pub fn get_A16(&self) -> &str {
        &self.A16
    }
    pub fn clear_A16(&mut self) {
        self.A16.clear();
    }

    // Param is passed by value, moved
    pub fn set_A16(&mut self, v: ::std::string::String) {
        self.A16 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A16(&mut self) -> &mut ::std::string::String {
        &mut self.A16
    }

    // Take field
    pub fn take_A16(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A16, ::std::string::String::new())
    }

    // string A17 = 85;


    pub fn get_A17(&self) -> &str {
        &self.A17
    }
    pub fn clear_A17(&mut self) {
        self.A17.clear();
    }

    // Param is passed by value, moved
    pub fn set_A17(&mut self, v: ::std::string::String) {
        self.A17 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A17(&mut self) -> &mut ::std::string::String {
        &mut self.A17
    }

    // Take field
    pub fn take_A17(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A17, ::std::string::String::new())
    }

    // string A18 = 86;


    pub fn get_A18(&self) -> &str {
        &self.A18
    }
    pub fn clear_A18(&mut self) {
        self.A18.clear();
    }

    // Param is passed by value, moved
    pub fn set_A18(&mut self, v: ::std::string::String) {
        self.A18 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A18(&mut self) -> &mut ::std::string::String {
        &mut self.A18
    }

    // Take field
    pub fn take_A18(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A18, ::std::string::String::new())
    }

    // string A19 = 87;


    pub fn get_A19(&self) -> &str {
        &self.A19
    }
    pub fn clear_A19(&mut self) {
        self.A19.clear();
    }

    // Param is passed by value, moved
    pub fn set_A19(&mut self, v: ::std::string::String) {
        self.A19 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A19(&mut self) -> &mut ::std::string::String {
        &mut self.A19
    }

    // Take field
    pub fn take_A19(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A19, ::std::string::String::new())
    }

    // string A20 = 88;


    pub fn get_A20(&self) -> &str {
        &self.A20
    }
    pub fn clear_A20(&mut self) {
        self.A20.clear();
    }

    // Param is passed by value, moved
    pub fn set_A20(&mut self, v: ::std::string::String) {
        self.A20 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A20(&mut self) -> &mut ::std::string::String {
        &mut self.A20
    }

    // Take field
    pub fn take_A20(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A20, ::std::string::String::new())
    }

    // double total_interest_amount = 89;


    pub fn get_total_interest_amount(&self) -> f64 {
        self.total_interest_amount
    }
    pub fn clear_total_interest_amount(&mut self) {
        self.total_interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_amount(&mut self, v: f64) {
        self.total_interest_amount = v;
    }

    // double total_principal_amount = 90;


    pub fn get_total_principal_amount(&self) -> f64 {
        self.total_principal_amount
    }
    pub fn clear_total_principal_amount(&mut self) {
        self.total_principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_principal_amount(&mut self, v: f64) {
        self.total_principal_amount = v;
    }

    // repeated .Cashflow cashflows = 91;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_number)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.curr_code)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.intt_rate = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product_code)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_date = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_flag)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.repricing_index)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.psl)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.indv_corp_flag)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_type)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_class_id)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_id)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_type)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.final_int_rate = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cost_centre = tmp;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alm_line)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coa)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.division)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rep_freq)?;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_repricing_date = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_repricing_date = tmp;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_class)?;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.org_date = tmp;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.al_line)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.balm_l2)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bmid)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ia_line)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.scheme_id)?;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.org_tenor = tmp;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.weaker_code)?;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.der_int_rate = tmp;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bnchmrk_rate = tmp;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.spread = tmp;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fully_floating_flg)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gr_ofs_gl)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.accrual_basis)?;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.accrued_interest = tmp;
                },
                40 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.current_bal = tmp;
                },
                41 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.due_date = tmp;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interest_pay_freq)?;
                },
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.original_balance = tmp;
                },
                44 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.orig_term = tmp;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi = tmp;
                },
                46 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.payment_freq)?;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.payment_type)?;
                },
                48 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.dpd = tmp;
                },
                49 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_name)?;
                },
                50 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.inst_st_dt = tmp;
                },
                51 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.weaker)?;
                },
                52 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.current_book_balance = tmp;
                },
                53 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.first_inst_date = tmp;
                },
                54 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.inst_num = tmp;
                },
                55 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.num_inst_paid = tmp;
                },
                56 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_inst_date = tmp;
                },
                57 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.gr_dr = tmp;
                },
                58 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.gr_cr = tmp;
                },
                59 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.re_dr = tmp;
                },
                60 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.re_cr = tmp;
                },
                61 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.is_dr = tmp;
                },
                62 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.is_cr = tmp;
                },
                63 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ui_dr = tmp;
                },
                64 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ui_cr = tmp;
                },
                65 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_ofs_gl)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.re_ofs_gl)?;
                },
                67 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ui_ofs_gl)?;
                },
                68 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on_date = tmp;
                },
                69 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.A1 = tmp;
                },
                70 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.A2 = tmp;
                },
                71 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.A3 = tmp;
                },
                72 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.A4 = tmp;
                },
                73 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.A5 = tmp;
                },
                74 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A6 = tmp;
                },
                75 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A7 = tmp;
                },
                76 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A8 = tmp;
                },
                77 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A9 = tmp;
                },
                78 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A10 = tmp;
                },
                79 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A11)?;
                },
                80 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A12)?;
                },
                81 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A13)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A14)?;
                },
                83 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A15)?;
                },
                84 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A16)?;
                },
                85 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A17)?;
                },
                86 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A18)?;
                },
                87 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A19)?;
                },
                88 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A20)?;
                },
                89 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_amount = tmp;
                },
                90 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_principal_amount = tmp;
                },
                91 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.account_number);
        }
        if !self.curr_code.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.curr_code);
        }
        if self.intt_rate != 0. {
            my_size += 9;
        }
        if !self.product_code.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.product_code);
        }
        if self.mat_date != 0 {
            my_size += ::protobuf::rt::value_size(5, self.mat_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.rate_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.rate_flag);
        }
        if !self.repricing_index.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.repricing_index);
        }
        if !self.psl.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.psl);
        }
        if !self.npa.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.npa);
        }
        if !self.indv_corp_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.indv_corp_flag);
        }
        if !self.customer_type.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.customer_type);
        }
        if !self.asset_class_id.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.asset_class_id);
        }
        if !self.customer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.customer_id);
        }
        if !self.prod_type.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.prod_type);
        }
        if self.final_int_rate != 0. {
            my_size += 9;
        }
        if self.cost_centre != 0 {
            my_size += ::protobuf::rt::value_size(16, self.cost_centre, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.alm_line);
        }
        if !self.coa.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.coa);
        }
        if !self.division.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.division);
        }
        if !self.rep_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.rep_freq);
        }
        if self.next_repricing_date != 0 {
            my_size += ::protobuf::rt::value_size(21, self.next_repricing_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_repricing_date != 0 {
            my_size += ::protobuf::rt::value_size(22, self.last_repricing_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.asset_class.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.asset_class);
        }
        if self.org_date != 0 {
            my_size += ::protobuf::rt::value_size(24, self.org_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.branch.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.branch);
        }
        if !self.al_line.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.al_line);
        }
        if !self.balm_l2.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.balm_l2);
        }
        if !self.bmid.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.bmid);
        }
        if !self.ia_line.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.ia_line);
        }
        if !self.scheme_id.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.scheme_id);
        }
        if self.org_tenor != 0 {
            my_size += ::protobuf::rt::value_size(31, self.org_tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.weaker_code.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.weaker_code);
        }
        if self.der_int_rate != 0. {
            my_size += 10;
        }
        if self.bnchmrk_rate != 0. {
            my_size += 10;
        }
        if self.spread != 0. {
            my_size += 10;
        }
        if !self.fully_floating_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.fully_floating_flg);
        }
        if !self.gr_ofs_gl.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.gr_ofs_gl);
        }
        if !self.accrual_basis.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.accrual_basis);
        }
        if self.accrued_interest != 0. {
            my_size += 10;
        }
        if self.current_bal != 0. {
            my_size += 10;
        }
        if self.due_date != 0 {
            my_size += ::protobuf::rt::value_size(41, self.due_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.interest_pay_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.interest_pay_freq);
        }
        if self.original_balance != 0. {
            my_size += 10;
        }
        if self.orig_term != 0 {
            my_size += ::protobuf::rt::value_size(44, self.orig_term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.emi != 0. {
            my_size += 10;
        }
        if !self.payment_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.payment_freq);
        }
        if !self.payment_type.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.payment_type);
        }
        if self.dpd != 0. {
            my_size += 10;
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(49, &self.customer_name);
        }
        if self.inst_st_dt != 0 {
            my_size += ::protobuf::rt::value_size(50, self.inst_st_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.weaker.is_empty() {
            my_size += ::protobuf::rt::string_size(51, &self.weaker);
        }
        if self.current_book_balance != 0. {
            my_size += 10;
        }
        if self.first_inst_date != 0 {
            my_size += ::protobuf::rt::value_size(53, self.first_inst_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.inst_num != 0 {
            my_size += ::protobuf::rt::value_size(54, self.inst_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.num_inst_paid != 0 {
            my_size += ::protobuf::rt::value_size(55, self.num_inst_paid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_inst_date != 0 {
            my_size += ::protobuf::rt::value_size(56, self.last_inst_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gr_dr != 0. {
            my_size += 10;
        }
        if self.gr_cr != 0. {
            my_size += 10;
        }
        if self.re_dr != 0. {
            my_size += 10;
        }
        if self.re_cr != 0. {
            my_size += 10;
        }
        if self.is_dr != 0. {
            my_size += 10;
        }
        if self.is_cr != 0. {
            my_size += 10;
        }
        if self.ui_dr != 0. {
            my_size += 10;
        }
        if self.ui_cr != 0. {
            my_size += 10;
        }
        if !self.is_ofs_gl.is_empty() {
            my_size += ::protobuf::rt::string_size(65, &self.is_ofs_gl);
        }
        if !self.re_ofs_gl.is_empty() {
            my_size += ::protobuf::rt::string_size(66, &self.re_ofs_gl);
        }
        if !self.ui_ofs_gl.is_empty() {
            my_size += ::protobuf::rt::string_size(67, &self.ui_ofs_gl);
        }
        if self.as_on_date != 0 {
            my_size += ::protobuf::rt::value_size(68, self.as_on_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A1 != 0. {
            my_size += 10;
        }
        if self.A2 != 0. {
            my_size += 10;
        }
        if self.A3 != 0. {
            my_size += 10;
        }
        if self.A4 != 0. {
            my_size += 10;
        }
        if self.A5 != 0. {
            my_size += 10;
        }
        if self.A6 != 0 {
            my_size += ::protobuf::rt::value_size(74, self.A6, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A7 != 0 {
            my_size += ::protobuf::rt::value_size(75, self.A7, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A8 != 0 {
            my_size += ::protobuf::rt::value_size(76, self.A8, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A9 != 0 {
            my_size += ::protobuf::rt::value_size(77, self.A9, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A10 != 0 {
            my_size += ::protobuf::rt::value_size(78, self.A10, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.A11.is_empty() {
            my_size += ::protobuf::rt::string_size(79, &self.A11);
        }
        if !self.A12.is_empty() {
            my_size += ::protobuf::rt::string_size(80, &self.A12);
        }
        if !self.A13.is_empty() {
            my_size += ::protobuf::rt::string_size(81, &self.A13);
        }
        if !self.A14.is_empty() {
            my_size += ::protobuf::rt::string_size(82, &self.A14);
        }
        if !self.A15.is_empty() {
            my_size += ::protobuf::rt::string_size(83, &self.A15);
        }
        if !self.A16.is_empty() {
            my_size += ::protobuf::rt::string_size(84, &self.A16);
        }
        if !self.A17.is_empty() {
            my_size += ::protobuf::rt::string_size(85, &self.A17);
        }
        if !self.A18.is_empty() {
            my_size += ::protobuf::rt::string_size(86, &self.A18);
        }
        if !self.A19.is_empty() {
            my_size += ::protobuf::rt::string_size(87, &self.A19);
        }
        if !self.A20.is_empty() {
            my_size += ::protobuf::rt::string_size(88, &self.A20);
        }
        if self.total_interest_amount != 0. {
            my_size += 10;
        }
        if self.total_principal_amount != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.account_number.is_empty() {
            os.write_string(1, &self.account_number)?;
        }
        if !self.curr_code.is_empty() {
            os.write_string(2, &self.curr_code)?;
        }
        if self.intt_rate != 0. {
            os.write_double(3, self.intt_rate)?;
        }
        if !self.product_code.is_empty() {
            os.write_string(4, &self.product_code)?;
        }
        if self.mat_date != 0 {
            os.write_int64(5, self.mat_date)?;
        }
        if !self.rate_flag.is_empty() {
            os.write_string(6, &self.rate_flag)?;
        }
        if !self.repricing_index.is_empty() {
            os.write_string(7, &self.repricing_index)?;
        }
        if !self.psl.is_empty() {
            os.write_string(8, &self.psl)?;
        }
        if !self.npa.is_empty() {
            os.write_string(9, &self.npa)?;
        }
        if !self.indv_corp_flag.is_empty() {
            os.write_string(10, &self.indv_corp_flag)?;
        }
        if !self.customer_type.is_empty() {
            os.write_string(11, &self.customer_type)?;
        }
        if !self.asset_class_id.is_empty() {
            os.write_string(12, &self.asset_class_id)?;
        }
        if !self.customer_id.is_empty() {
            os.write_string(13, &self.customer_id)?;
        }
        if !self.prod_type.is_empty() {
            os.write_string(14, &self.prod_type)?;
        }
        if self.final_int_rate != 0. {
            os.write_double(15, self.final_int_rate)?;
        }
        if self.cost_centre != 0 {
            os.write_int64(16, self.cost_centre)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(17, &self.alm_line)?;
        }
        if !self.coa.is_empty() {
            os.write_string(18, &self.coa)?;
        }
        if !self.division.is_empty() {
            os.write_string(19, &self.division)?;
        }
        if !self.rep_freq.is_empty() {
            os.write_string(20, &self.rep_freq)?;
        }
        if self.next_repricing_date != 0 {
            os.write_int64(21, self.next_repricing_date)?;
        }
        if self.last_repricing_date != 0 {
            os.write_int64(22, self.last_repricing_date)?;
        }
        if !self.asset_class.is_empty() {
            os.write_string(23, &self.asset_class)?;
        }
        if self.org_date != 0 {
            os.write_int64(24, self.org_date)?;
        }
        if !self.branch.is_empty() {
            os.write_string(25, &self.branch)?;
        }
        if !self.al_line.is_empty() {
            os.write_string(26, &self.al_line)?;
        }
        if !self.balm_l2.is_empty() {
            os.write_string(27, &self.balm_l2)?;
        }
        if !self.bmid.is_empty() {
            os.write_string(28, &self.bmid)?;
        }
        if !self.ia_line.is_empty() {
            os.write_string(29, &self.ia_line)?;
        }
        if !self.scheme_id.is_empty() {
            os.write_string(30, &self.scheme_id)?;
        }
        if self.org_tenor != 0 {
            os.write_int64(31, self.org_tenor)?;
        }
        if !self.weaker_code.is_empty() {
            os.write_string(32, &self.weaker_code)?;
        }
        if self.der_int_rate != 0. {
            os.write_double(33, self.der_int_rate)?;
        }
        if self.bnchmrk_rate != 0. {
            os.write_double(34, self.bnchmrk_rate)?;
        }
        if self.spread != 0. {
            os.write_double(35, self.spread)?;
        }
        if !self.fully_floating_flg.is_empty() {
            os.write_string(36, &self.fully_floating_flg)?;
        }
        if !self.gr_ofs_gl.is_empty() {
            os.write_string(37, &self.gr_ofs_gl)?;
        }
        if !self.accrual_basis.is_empty() {
            os.write_string(38, &self.accrual_basis)?;
        }
        if self.accrued_interest != 0. {
            os.write_double(39, self.accrued_interest)?;
        }
        if self.current_bal != 0. {
            os.write_double(40, self.current_bal)?;
        }
        if self.due_date != 0 {
            os.write_int64(41, self.due_date)?;
        }
        if !self.interest_pay_freq.is_empty() {
            os.write_string(42, &self.interest_pay_freq)?;
        }
        if self.original_balance != 0. {
            os.write_double(43, self.original_balance)?;
        }
        if self.orig_term != 0 {
            os.write_int64(44, self.orig_term)?;
        }
        if self.emi != 0. {
            os.write_double(45, self.emi)?;
        }
        if !self.payment_freq.is_empty() {
            os.write_string(46, &self.payment_freq)?;
        }
        if !self.payment_type.is_empty() {
            os.write_string(47, &self.payment_type)?;
        }
        if self.dpd != 0. {
            os.write_double(48, self.dpd)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(49, &self.customer_name)?;
        }
        if self.inst_st_dt != 0 {
            os.write_int64(50, self.inst_st_dt)?;
        }
        if !self.weaker.is_empty() {
            os.write_string(51, &self.weaker)?;
        }
        if self.current_book_balance != 0. {
            os.write_double(52, self.current_book_balance)?;
        }
        if self.first_inst_date != 0 {
            os.write_int64(53, self.first_inst_date)?;
        }
        if self.inst_num != 0 {
            os.write_int64(54, self.inst_num)?;
        }
        if self.num_inst_paid != 0 {
            os.write_int64(55, self.num_inst_paid)?;
        }
        if self.last_inst_date != 0 {
            os.write_int64(56, self.last_inst_date)?;
        }
        if self.gr_dr != 0. {
            os.write_double(57, self.gr_dr)?;
        }
        if self.gr_cr != 0. {
            os.write_double(58, self.gr_cr)?;
        }
        if self.re_dr != 0. {
            os.write_double(59, self.re_dr)?;
        }
        if self.re_cr != 0. {
            os.write_double(60, self.re_cr)?;
        }
        if self.is_dr != 0. {
            os.write_double(61, self.is_dr)?;
        }
        if self.is_cr != 0. {
            os.write_double(62, self.is_cr)?;
        }
        if self.ui_dr != 0. {
            os.write_double(63, self.ui_dr)?;
        }
        if self.ui_cr != 0. {
            os.write_double(64, self.ui_cr)?;
        }
        if !self.is_ofs_gl.is_empty() {
            os.write_string(65, &self.is_ofs_gl)?;
        }
        if !self.re_ofs_gl.is_empty() {
            os.write_string(66, &self.re_ofs_gl)?;
        }
        if !self.ui_ofs_gl.is_empty() {
            os.write_string(67, &self.ui_ofs_gl)?;
        }
        if self.as_on_date != 0 {
            os.write_int64(68, self.as_on_date)?;
        }
        if self.A1 != 0. {
            os.write_double(69, self.A1)?;
        }
        if self.A2 != 0. {
            os.write_double(70, self.A2)?;
        }
        if self.A3 != 0. {
            os.write_double(71, self.A3)?;
        }
        if self.A4 != 0. {
            os.write_double(72, self.A4)?;
        }
        if self.A5 != 0. {
            os.write_double(73, self.A5)?;
        }
        if self.A6 != 0 {
            os.write_int64(74, self.A6)?;
        }
        if self.A7 != 0 {
            os.write_int64(75, self.A7)?;
        }
        if self.A8 != 0 {
            os.write_int64(76, self.A8)?;
        }
        if self.A9 != 0 {
            os.write_int64(77, self.A9)?;
        }
        if self.A10 != 0 {
            os.write_int64(78, self.A10)?;
        }
        if !self.A11.is_empty() {
            os.write_string(79, &self.A11)?;
        }
        if !self.A12.is_empty() {
            os.write_string(80, &self.A12)?;
        }
        if !self.A13.is_empty() {
            os.write_string(81, &self.A13)?;
        }
        if !self.A14.is_empty() {
            os.write_string(82, &self.A14)?;
        }
        if !self.A15.is_empty() {
            os.write_string(83, &self.A15)?;
        }
        if !self.A16.is_empty() {
            os.write_string(84, &self.A16)?;
        }
        if !self.A17.is_empty() {
            os.write_string(85, &self.A17)?;
        }
        if !self.A18.is_empty() {
            os.write_string(86, &self.A18)?;
        }
        if !self.A19.is_empty() {
            os.write_string(87, &self.A19)?;
        }
        if !self.A20.is_empty() {
            os.write_string(88, &self.A20)?;
        }
        if self.total_interest_amount != 0. {
            os.write_double(89, self.total_interest_amount)?;
        }
        if self.total_principal_amount != 0. {
            os.write_double(90, self.total_principal_amount)?;
        }
        for v in &self.cashflows {
            os.write_tag(91, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_number",
                |m: &AccountWithCashflows| { &m.account_number },
                |m: &mut AccountWithCashflows| { &mut m.account_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "curr_code",
                |m: &AccountWithCashflows| { &m.curr_code },
                |m: &mut AccountWithCashflows| { &mut m.curr_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "intt_rate",
                |m: &AccountWithCashflows| { &m.intt_rate },
                |m: &mut AccountWithCashflows| { &mut m.intt_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "product_code",
                |m: &AccountWithCashflows| { &m.product_code },
                |m: &mut AccountWithCashflows| { &mut m.product_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "mat_date",
                |m: &AccountWithCashflows| { &m.mat_date },
                |m: &mut AccountWithCashflows| { &mut m.mat_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rate_flag",
                |m: &AccountWithCashflows| { &m.rate_flag },
                |m: &mut AccountWithCashflows| { &mut m.rate_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "repricing_index",
                |m: &AccountWithCashflows| { &m.repricing_index },
                |m: &mut AccountWithCashflows| { &mut m.repricing_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "psl",
                |m: &AccountWithCashflows| { &m.psl },
                |m: &mut AccountWithCashflows| { &mut m.psl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "npa",
                |m: &AccountWithCashflows| { &m.npa },
                |m: &mut AccountWithCashflows| { &mut m.npa },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "indv_corp_flag",
                |m: &AccountWithCashflows| { &m.indv_corp_flag },
                |m: &mut AccountWithCashflows| { &mut m.indv_corp_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_type",
                |m: &AccountWithCashflows| { &m.customer_type },
                |m: &mut AccountWithCashflows| { &mut m.customer_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_class_id",
                |m: &AccountWithCashflows| { &m.asset_class_id },
                |m: &mut AccountWithCashflows| { &mut m.asset_class_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_id",
                |m: &AccountWithCashflows| { &m.customer_id },
                |m: &mut AccountWithCashflows| { &mut m.customer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prod_type",
                |m: &AccountWithCashflows| { &m.prod_type },
                |m: &mut AccountWithCashflows| { &mut m.prod_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "final_int_rate",
                |m: &AccountWithCashflows| { &m.final_int_rate },
                |m: &mut AccountWithCashflows| { &mut m.final_int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cost_centre",
                |m: &AccountWithCashflows| { &m.cost_centre },
                |m: &mut AccountWithCashflows| { &mut m.cost_centre },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "alm_line",
                |m: &AccountWithCashflows| { &m.alm_line },
                |m: &mut AccountWithCashflows| { &mut m.alm_line },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "coa",
                |m: &AccountWithCashflows| { &m.coa },
                |m: &mut AccountWithCashflows| { &mut m.coa },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "division",
                |m: &AccountWithCashflows| { &m.division },
                |m: &mut AccountWithCashflows| { &mut m.division },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rep_freq",
                |m: &AccountWithCashflows| { &m.rep_freq },
                |m: &mut AccountWithCashflows| { &mut m.rep_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_repricing_date",
                |m: &AccountWithCashflows| { &m.next_repricing_date },
                |m: &mut AccountWithCashflows| { &mut m.next_repricing_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_repricing_date",
                |m: &AccountWithCashflows| { &m.last_repricing_date },
                |m: &mut AccountWithCashflows| { &mut m.last_repricing_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_class",
                |m: &AccountWithCashflows| { &m.asset_class },
                |m: &mut AccountWithCashflows| { &mut m.asset_class },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "org_date",
                |m: &AccountWithCashflows| { &m.org_date },
                |m: &mut AccountWithCashflows| { &mut m.org_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "branch",
                |m: &AccountWithCashflows| { &m.branch },
                |m: &mut AccountWithCashflows| { &mut m.branch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "al_line",
                |m: &AccountWithCashflows| { &m.al_line },
                |m: &mut AccountWithCashflows| { &mut m.al_line },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "balm_l2",
                |m: &AccountWithCashflows| { &m.balm_l2 },
                |m: &mut AccountWithCashflows| { &mut m.balm_l2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bmid",
                |m: &AccountWithCashflows| { &m.bmid },
                |m: &mut AccountWithCashflows| { &mut m.bmid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ia_line",
                |m: &AccountWithCashflows| { &m.ia_line },
                |m: &mut AccountWithCashflows| { &mut m.ia_line },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "scheme_id",
                |m: &AccountWithCashflows| { &m.scheme_id },
                |m: &mut AccountWithCashflows| { &mut m.scheme_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "org_tenor",
                |m: &AccountWithCashflows| { &m.org_tenor },
                |m: &mut AccountWithCashflows| { &mut m.org_tenor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "weaker_code",
                |m: &AccountWithCashflows| { &m.weaker_code },
                |m: &mut AccountWithCashflows| { &mut m.weaker_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "der_int_rate",
                |m: &AccountWithCashflows| { &m.der_int_rate },
                |m: &mut AccountWithCashflows| { &mut m.der_int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bnchmrk_rate",
                |m: &AccountWithCashflows| { &m.bnchmrk_rate },
                |m: &mut AccountWithCashflows| { &mut m.bnchmrk_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "spread",
                |m: &AccountWithCashflows| { &m.spread },
                |m: &mut AccountWithCashflows| { &mut m.spread },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fully_floating_flg",
                |m: &AccountWithCashflows| { &m.fully_floating_flg },
                |m: &mut AccountWithCashflows| { &mut m.fully_floating_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gr_ofs_gl",
                |m: &AccountWithCashflows| { &m.gr_ofs_gl },
                |m: &mut AccountWithCashflows| { &mut m.gr_ofs_gl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "accrual_basis",
                |m: &AccountWithCashflows| { &m.accrual_basis },
                |m: &mut AccountWithCashflows| { &mut m.accrual_basis },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "accrued_interest",
                |m: &AccountWithCashflows| { &m.accrued_interest },
                |m: &mut AccountWithCashflows| { &mut m.accrued_interest },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "current_bal",
                |m: &AccountWithCashflows| { &m.current_bal },
                |m: &mut AccountWithCashflows| { &mut m.current_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "due_date",
                |m: &AccountWithCashflows| { &m.due_date },
                |m: &mut AccountWithCashflows| { &mut m.due_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "interest_pay_freq",
                |m: &AccountWithCashflows| { &m.interest_pay_freq },
                |m: &mut AccountWithCashflows| { &mut m.interest_pay_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "original_balance",
                |m: &AccountWithCashflows| { &m.original_balance },
                |m: &mut AccountWithCashflows| { &mut m.original_balance },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "orig_term",
                |m: &AccountWithCashflows| { &m.orig_term },
                |m: &mut AccountWithCashflows| { &mut m.orig_term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "emi",
                |m: &AccountWithCashflows| { &m.emi },
                |m: &mut AccountWithCashflows| { &mut m.emi },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "payment_freq",
                |m: &AccountWithCashflows| { &m.payment_freq },
                |m: &mut AccountWithCashflows| { &mut m.payment_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "payment_type",
                |m: &AccountWithCashflows| { &m.payment_type },
                |m: &mut AccountWithCashflows| { &mut m.payment_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "dpd",
                |m: &AccountWithCashflows| { &m.dpd },
                |m: &mut AccountWithCashflows| { &mut m.dpd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_name",
                |m: &AccountWithCashflows| { &m.customer_name },
                |m: &mut AccountWithCashflows| { &mut m.customer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "inst_st_dt",
                |m: &AccountWithCashflows| { &m.inst_st_dt },
                |m: &mut AccountWithCashflows| { &mut m.inst_st_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "weaker",
                |m: &AccountWithCashflows| { &m.weaker },
                |m: &mut AccountWithCashflows| { &mut m.weaker },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "current_book_balance",
                |m: &AccountWithCashflows| { &m.current_book_balance },
                |m: &mut AccountWithCashflows| { &mut m.current_book_balance },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "first_inst_date",
                |m: &AccountWithCashflows| { &m.first_inst_date },
                |m: &mut AccountWithCashflows| { &mut m.first_inst_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "inst_num",
                |m: &AccountWithCashflows| { &m.inst_num },
                |m: &mut AccountWithCashflows| { &mut m.inst_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "num_inst_paid",
                |m: &AccountWithCashflows| { &m.num_inst_paid },
                |m: &mut AccountWithCashflows| { &mut m.num_inst_paid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_inst_date",
                |m: &AccountWithCashflows| { &m.last_inst_date },
                |m: &mut AccountWithCashflows| { &mut m.last_inst_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "gr_dr",
                |m: &AccountWithCashflows| { &m.gr_dr },
                |m: &mut AccountWithCashflows| { &mut m.gr_dr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "gr_cr",
                |m: &AccountWithCashflows| { &m.gr_cr },
                |m: &mut AccountWithCashflows| { &mut m.gr_cr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "re_dr",
                |m: &AccountWithCashflows| { &m.re_dr },
                |m: &mut AccountWithCashflows| { &mut m.re_dr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "re_cr",
                |m: &AccountWithCashflows| { &m.re_cr },
                |m: &mut AccountWithCashflows| { &mut m.re_cr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "is_dr",
                |m: &AccountWithCashflows| { &m.is_dr },
                |m: &mut AccountWithCashflows| { &mut m.is_dr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "is_cr",
                |m: &AccountWithCashflows| { &m.is_cr },
                |m: &mut AccountWithCashflows| { &mut m.is_cr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ui_dr",
                |m: &AccountWithCashflows| { &m.ui_dr },
                |m: &mut AccountWithCashflows| { &mut m.ui_dr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ui_cr",
                |m: &AccountWithCashflows| { &m.ui_cr },
                |m: &mut AccountWithCashflows| { &mut m.ui_cr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "is_ofs_gl",
                |m: &AccountWithCashflows| { &m.is_ofs_gl },
                |m: &mut AccountWithCashflows| { &mut m.is_ofs_gl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "re_ofs_gl",
                |m: &AccountWithCashflows| { &m.re_ofs_gl },
                |m: &mut AccountWithCashflows| { &mut m.re_ofs_gl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ui_ofs_gl",
                |m: &AccountWithCashflows| { &m.ui_ofs_gl },
                |m: &mut AccountWithCashflows| { &mut m.ui_ofs_gl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "as_on_date",
                |m: &AccountWithCashflows| { &m.as_on_date },
                |m: &mut AccountWithCashflows| { &mut m.as_on_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "A1",
                |m: &AccountWithCashflows| { &m.A1 },
                |m: &mut AccountWithCashflows| { &mut m.A1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "A2",
                |m: &AccountWithCashflows| { &m.A2 },
                |m: &mut AccountWithCashflows| { &mut m.A2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "A3",
                |m: &AccountWithCashflows| { &m.A3 },
                |m: &mut AccountWithCashflows| { &mut m.A3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "A4",
                |m: &AccountWithCashflows| { &m.A4 },
                |m: &mut AccountWithCashflows| { &mut m.A4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "A5",
                |m: &AccountWithCashflows| { &m.A5 },
                |m: &mut AccountWithCashflows| { &mut m.A5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A6",
                |m: &AccountWithCashflows| { &m.A6 },
                |m: &mut AccountWithCashflows| { &mut m.A6 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A7",
                |m: &AccountWithCashflows| { &m.A7 },
                |m: &mut AccountWithCashflows| { &mut m.A7 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A8",
                |m: &AccountWithCashflows| { &m.A8 },
                |m: &mut AccountWithCashflows| { &mut m.A8 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A9",
                |m: &AccountWithCashflows| { &m.A9 },
                |m: &mut AccountWithCashflows| { &mut m.A9 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A10",
                |m: &AccountWithCashflows| { &m.A10 },
                |m: &mut AccountWithCashflows| { &mut m.A10 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A11",
                |m: &AccountWithCashflows| { &m.A11 },
                |m: &mut AccountWithCashflows| { &mut m.A11 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A12",
                |m: &AccountWithCashflows| { &m.A12 },
                |m: &mut AccountWithCashflows| { &mut m.A12 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A13",
                |m: &AccountWithCashflows| { &m.A13 },
                |m: &mut AccountWithCashflows| { &mut m.A13 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A14",
                |m: &AccountWithCashflows| { &m.A14 },
                |m: &mut AccountWithCashflows| { &mut m.A14 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A15",
                |m: &AccountWithCashflows| { &m.A15 },
                |m: &mut AccountWithCashflows| { &mut m.A15 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A16",
                |m: &AccountWithCashflows| { &m.A16 },
                |m: &mut AccountWithCashflows| { &mut m.A16 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A17",
                |m: &AccountWithCashflows| { &m.A17 },
                |m: &mut AccountWithCashflows| { &mut m.A17 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A18",
                |m: &AccountWithCashflows| { &m.A18 },
                |m: &mut AccountWithCashflows| { &mut m.A18 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A19",
                |m: &AccountWithCashflows| { &m.A19 },
                |m: &mut AccountWithCashflows| { &mut m.A19 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A20",
                |m: &AccountWithCashflows| { &m.A20 },
                |m: &mut AccountWithCashflows| { &mut m.A20 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "total_interest_amount",
                |m: &AccountWithCashflows| { &m.total_interest_amount },
                |m: &mut AccountWithCashflows| { &mut m.total_interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "total_principal_amount",
                |m: &AccountWithCashflows| { &m.total_principal_amount },
                |m: &mut AccountWithCashflows| { &mut m.total_principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.account_number.clear();
        self.curr_code.clear();
        self.intt_rate = 0.;
        self.product_code.clear();
        self.mat_date = 0;
        self.rate_flag.clear();
        self.repricing_index.clear();
        self.psl.clear();
        self.npa.clear();
        self.indv_corp_flag.clear();
        self.customer_type.clear();
        self.asset_class_id.clear();
        self.customer_id.clear();
        self.prod_type.clear();
        self.final_int_rate = 0.;
        self.cost_centre = 0;
        self.alm_line.clear();
        self.coa.clear();
        self.division.clear();
        self.rep_freq.clear();
        self.next_repricing_date = 0;
        self.last_repricing_date = 0;
        self.asset_class.clear();
        self.org_date = 0;
        self.branch.clear();
        self.al_line.clear();
        self.balm_l2.clear();
        self.bmid.clear();
        self.ia_line.clear();
        self.scheme_id.clear();
        self.org_tenor = 0;
        self.weaker_code.clear();
        self.der_int_rate = 0.;
        self.bnchmrk_rate = 0.;
        self.spread = 0.;
        self.fully_floating_flg.clear();
        self.gr_ofs_gl.clear();
        self.accrual_basis.clear();
        self.accrued_interest = 0.;
        self.current_bal = 0.;
        self.due_date = 0;
        self.interest_pay_freq.clear();
        self.original_balance = 0.;
        self.orig_term = 0;
        self.emi = 0.;
        self.payment_freq.clear();
        self.payment_type.clear();
        self.dpd = 0.;
        self.customer_name.clear();
        self.inst_st_dt = 0;
        self.weaker.clear();
        self.current_book_balance = 0.;
        self.first_inst_date = 0;
        self.inst_num = 0;
        self.num_inst_paid = 0;
        self.last_inst_date = 0;
        self.gr_dr = 0.;
        self.gr_cr = 0.;
        self.re_dr = 0.;
        self.re_cr = 0.;
        self.is_dr = 0.;
        self.is_cr = 0.;
        self.ui_dr = 0.;
        self.ui_cr = 0.;
        self.is_ofs_gl.clear();
        self.re_ofs_gl.clear();
        self.ui_ofs_gl.clear();
        self.as_on_date = 0;
        self.A1 = 0.;
        self.A2 = 0.;
        self.A3 = 0.;
        self.A4 = 0.;
        self.A5 = 0.;
        self.A6 = 0;
        self.A7 = 0;
        self.A8 = 0;
        self.A9 = 0;
        self.A10 = 0;
        self.A11.clear();
        self.A12.clear();
        self.A13.clear();
        self.A14.clear();
        self.A15.clear();
        self.A16.clear();
        self.A17.clear();
        self.A18.clear();
        self.A19.clear();
        self.A20.clear();
        self.total_interest_amount = 0.;
        self.total_principal_amount = 0.;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\
    \x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\
    \x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\
    \x04date\"\x95\x14\n\x14AccountWithCashflows\x12%\n\x0eaccount_number\
    \x18\x01\x20\x01(\tR\raccountNumber\x12\x1b\n\tcurr_code\x18\x02\x20\x01\
    (\tR\x08currCode\x12\x1b\n\tintt_rate\x18\x03\x20\x01(\x01R\x08inttRate\
    \x12!\n\x0cproduct_code\x18\x04\x20\x01(\tR\x0bproductCode\x12\x19\n\x08\
    mat_date\x18\x05\x20\x01(\x03R\x07matDate\x12\x1b\n\trate_flag\x18\x06\
    \x20\x01(\tR\x08rateFlag\x12'\n\x0frepricing_index\x18\x07\x20\x01(\tR\
    \x0erepricingIndex\x12\x10\n\x03psl\x18\x08\x20\x01(\tR\x03psl\x12\x10\n\
    \x03npa\x18\t\x20\x01(\tR\x03npa\x12$\n\x0eindv_corp_flag\x18\n\x20\x01(\
    \tR\x0cindvCorpFlag\x12#\n\rcustomer_type\x18\x0b\x20\x01(\tR\x0ccustome\
    rType\x12$\n\x0easset_class_id\x18\x0c\x20\x01(\tR\x0cassetClassId\x12\
    \x1f\n\x0bcustomer_id\x18\r\x20\x01(\tR\ncustomerId\x12\x1b\n\tprod_type\
    \x18\x0e\x20\x01(\tR\x08prodType\x12$\n\x0efinal_int_rate\x18\x0f\x20\
    \x01(\x01R\x0cfinalIntRate\x12\x1f\n\x0bcost_centre\x18\x10\x20\x01(\x03\
    R\ncostCentre\x12\x19\n\x08alm_line\x18\x11\x20\x01(\tR\x07almLine\x12\
    \x10\n\x03coa\x18\x12\x20\x01(\tR\x03coa\x12\x1a\n\x08division\x18\x13\
    \x20\x01(\tR\x08division\x12\x19\n\x08rep_freq\x18\x14\x20\x01(\tR\x07re\
    pFreq\x12.\n\x13next_repricing_date\x18\x15\x20\x01(\x03R\x11nextReprici\
    ngDate\x12.\n\x13last_repricing_date\x18\x16\x20\x01(\x03R\x11lastRepric\
    ingDate\x12\x1f\n\x0basset_class\x18\x17\x20\x01(\tR\nassetClass\x12\x19\
    \n\x08org_date\x18\x18\x20\x01(\x03R\x07orgDate\x12\x16\n\x06branch\x18\
    \x19\x20\x01(\tR\x06branch\x12\x17\n\x07al_line\x18\x1a\x20\x01(\tR\x06a\
    lLine\x12\x17\n\x07balm_l2\x18\x1b\x20\x01(\tR\x06balmL2\x12\x12\n\x04bm\
    id\x18\x1c\x20\x01(\tR\x04bmid\x12\x17\n\x07ia_line\x18\x1d\x20\x01(\tR\
    \x06iaLine\x12\x1b\n\tscheme_id\x18\x1e\x20\x01(\tR\x08schemeId\x12\x1b\
    \n\torg_tenor\x18\x1f\x20\x01(\x03R\x08orgTenor\x12\x1f\n\x0bweaker_code\
    \x18\x20\x20\x01(\tR\nweakerCode\x12\x20\n\x0cder_int_rate\x18!\x20\x01(\
    \x01R\nderIntRate\x12!\n\x0cbnchmrk_rate\x18\"\x20\x01(\x01R\x0bbnchmrkR\
    ate\x12\x16\n\x06spread\x18#\x20\x01(\x01R\x06spread\x12,\n\x12fully_flo\
    ating_flg\x18$\x20\x01(\tR\x10fullyFloatingFlg\x12\x1a\n\tgr_ofs_gl\x18%\
    \x20\x01(\tR\x07grOfsGl\x12#\n\raccrual_basis\x18&\x20\x01(\tR\x0caccrua\
    lBasis\x12)\n\x10accrued_interest\x18'\x20\x01(\x01R\x0faccruedInterest\
    \x12\x1f\n\x0bcurrent_bal\x18(\x20\x01(\x01R\ncurrentBal\x12\x19\n\x08du\
    e_date\x18)\x20\x01(\x03R\x07dueDate\x12*\n\x11interest_pay_freq\x18*\
    \x20\x01(\tR\x0finterestPayFreq\x12)\n\x10original_balance\x18+\x20\x01(\
    \x01R\x0foriginalBalance\x12\x1b\n\torig_term\x18,\x20\x01(\x03R\x08orig\
    Term\x12\x10\n\x03emi\x18-\x20\x01(\x01R\x03emi\x12!\n\x0cpayment_freq\
    \x18.\x20\x01(\tR\x0bpaymentFreq\x12!\n\x0cpayment_type\x18/\x20\x01(\tR\
    \x0bpaymentType\x12\x10\n\x03dpd\x180\x20\x01(\x01R\x03dpd\x12#\n\rcusto\
    mer_name\x181\x20\x01(\tR\x0ccustomerName\x12\x1c\n\ninst_st_dt\x182\x20\
    \x01(\x03R\x08instStDt\x12\x16\n\x06weaker\x183\x20\x01(\tR\x06weaker\
    \x120\n\x14current_book_balance\x184\x20\x01(\x01R\x12currentBookBalance\
    \x12&\n\x0ffirst_inst_date\x185\x20\x01(\x03R\rfirstInstDate\x12\x19\n\
    \x08inst_num\x186\x20\x01(\x03R\x07instNum\x12\"\n\rnum_inst_paid\x187\
    \x20\x01(\x03R\x0bnumInstPaid\x12$\n\x0elast_inst_date\x188\x20\x01(\x03\
    R\x0clastInstDate\x12\x13\n\x05gr_dr\x189\x20\x01(\x01R\x04grDr\x12\x13\
    \n\x05gr_cr\x18:\x20\x01(\x01R\x04grCr\x12\x13\n\x05re_dr\x18;\x20\x01(\
    \x01R\x04reDr\x12\x13\n\x05re_cr\x18<\x20\x01(\x01R\x04reCr\x12\x13\n\
    \x05is_dr\x18=\x20\x01(\x01R\x04isDr\x12\x13\n\x05is_cr\x18>\x20\x01(\
    \x01R\x04isCr\x12\x13\n\x05ui_dr\x18?\x20\x01(\x01R\x04uiDr\x12\x13\n\
    \x05ui_cr\x18@\x20\x01(\x01R\x04uiCr\x12\x1a\n\tis_ofs_gl\x18A\x20\x01(\
    \tR\x07isOfsGl\x12\x1a\n\tre_ofs_gl\x18B\x20\x01(\tR\x07reOfsGl\x12\x1a\
    \n\tui_ofs_gl\x18C\x20\x01(\tR\x07uiOfsGl\x12\x1c\n\nas_on_date\x18D\x20\
    \x01(\x03R\x08asOnDate\x12\x0e\n\x02A1\x18E\x20\x01(\x01R\x02A1\x12\x0e\
    \n\x02A2\x18F\x20\x01(\x01R\x02A2\x12\x0e\n\x02A3\x18G\x20\x01(\x01R\x02\
    A3\x12\x0e\n\x02A4\x18H\x20\x01(\x01R\x02A4\x12\x0e\n\x02A5\x18I\x20\x01\
    (\x01R\x02A5\x12\x0e\n\x02A6\x18J\x20\x01(\x03R\x02A6\x12\x0e\n\x02A7\
    \x18K\x20\x01(\x03R\x02A7\x12\x0e\n\x02A8\x18L\x20\x01(\x03R\x02A8\x12\
    \x0e\n\x02A9\x18M\x20\x01(\x03R\x02A9\x12\x10\n\x03A10\x18N\x20\x01(\x03\
    R\x03A10\x12\x10\n\x03A11\x18O\x20\x01(\tR\x03A11\x12\x10\n\x03A12\x18P\
    \x20\x01(\tR\x03A12\x12\x10\n\x03A13\x18Q\x20\x01(\tR\x03A13\x12\x10\n\
    \x03A14\x18R\x20\x01(\tR\x03A14\x12\x10\n\x03A15\x18S\x20\x01(\tR\x03A15\
    \x12\x10\n\x03A16\x18T\x20\x01(\tR\x03A16\x12\x10\n\x03A17\x18U\x20\x01(\
    \tR\x03A17\x12\x10\n\x03A18\x18V\x20\x01(\tR\x03A18\x12\x10\n\x03A19\x18\
    W\x20\x01(\tR\x03A19\x12\x10\n\x03A20\x18X\x20\x01(\tR\x03A20\x122\n\x15\
    total_interest_amount\x18Y\x20\x01(\x01R\x13totalInterestAmount\x124\n\
    \x16total_principal_amount\x18Z\x20\x01(\x01R\x14totalPrincipalAmount\
    \x12'\n\tcashflows\x18[\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
