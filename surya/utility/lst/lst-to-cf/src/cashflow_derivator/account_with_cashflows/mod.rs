// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // double principal_amount = 2;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_amount",
                    |m: &Cashflow| { &m.interest_amount },
                    |m: &mut Cashflow| { &mut m.interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal_amount",
                    |m: &Cashflow| { &m.principal_amount },
                    |m: &mut Cashflow| { &mut m.principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_interest_amount();
        self.clear_principal_amount();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub flow_id: ::std::string::String,
    pub grp_id: ::std::string::String,
    pub llg_id: ::std::string::String,
    pub amount: f64,
    pub ccy_id: ::std::string::String,
    pub intr_rate: f64,
    pub reprice_freq: ::std::string::String,
    pub reprice_dt: i64,
    pub mat_dt: i64,
    pub acc_num: ::std::string::String,
    pub strt_dt: i64,
    pub intr_cal_freq: ::std::string::String,
    pub is_float_rate: ::std::string::String,
    pub float_rate_bm: ::std::string::String,
    pub bu_id: ::std::string::String,
    pub cust_id: ::std::string::String,
    pub cust_name: ::std::string::String,
    pub sprd: f64,
    pub schm_code: ::std::string::String,
    pub min_ir: f64,
    pub max_ir: f64,
    pub dep_amount: f64,
    pub mat_amt: f64,
    pub exch_rate: f64,
    pub cust_ctry_code: ::std::string::String,
    pub cust_crdt_rtng: ::std::string::String,
    pub cust_sect_code: ::std::string::String,
    pub cust_indt_code: ::std::string::String,
    pub custom1: ::std::string::String,
    pub custom2: ::std::string::String,
    pub total_principal_amount: f64,
    pub total_interest_amount: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string flow_id = 1;

    pub fn clear_flow_id(&mut self) {
        self.flow_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_flow_id(&mut self, v: ::std::string::String) {
        self.flow_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flow_id(&mut self) -> &mut ::std::string::String {
        &mut self.flow_id
    }

    // Take field
    pub fn take_flow_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flow_id, ::std::string::String::new())
    }

    pub fn get_flow_id(&self) -> &str {
        &self.flow_id
    }

    // string grp_id = 2;

    pub fn clear_grp_id(&mut self) {
        self.grp_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_grp_id(&mut self, v: ::std::string::String) {
        self.grp_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grp_id(&mut self) -> &mut ::std::string::String {
        &mut self.grp_id
    }

    // Take field
    pub fn take_grp_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grp_id, ::std::string::String::new())
    }

    pub fn get_grp_id(&self) -> &str {
        &self.grp_id
    }

    // string llg_id = 3;

    pub fn clear_llg_id(&mut self) {
        self.llg_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_llg_id(&mut self, v: ::std::string::String) {
        self.llg_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_llg_id(&mut self) -> &mut ::std::string::String {
        &mut self.llg_id
    }

    // Take field
    pub fn take_llg_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.llg_id, ::std::string::String::new())
    }

    pub fn get_llg_id(&self) -> &str {
        &self.llg_id
    }

    // double amount = 4;

    pub fn clear_amount(&mut self) {
        self.amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: f64) {
        self.amount = v;
    }

    pub fn get_amount(&self) -> f64 {
        self.amount
    }

    // string ccy_id = 5;

    pub fn clear_ccy_id(&mut self) {
        self.ccy_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy_id(&mut self, v: ::std::string::String) {
        self.ccy_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy_id(&mut self) -> &mut ::std::string::String {
        &mut self.ccy_id
    }

    // Take field
    pub fn take_ccy_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy_id, ::std::string::String::new())
    }

    pub fn get_ccy_id(&self) -> &str {
        &self.ccy_id
    }

    // double intr_rate = 6;

    pub fn clear_intr_rate(&mut self) {
        self.intr_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_intr_rate(&mut self, v: f64) {
        self.intr_rate = v;
    }

    pub fn get_intr_rate(&self) -> f64 {
        self.intr_rate
    }

    // string reprice_freq = 7;

    pub fn clear_reprice_freq(&mut self) {
        self.reprice_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_reprice_freq(&mut self, v: ::std::string::String) {
        self.reprice_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reprice_freq(&mut self) -> &mut ::std::string::String {
        &mut self.reprice_freq
    }

    // Take field
    pub fn take_reprice_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reprice_freq, ::std::string::String::new())
    }

    pub fn get_reprice_freq(&self) -> &str {
        &self.reprice_freq
    }

    // int64 reprice_dt = 8;

    pub fn clear_reprice_dt(&mut self) {
        self.reprice_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_reprice_dt(&mut self, v: i64) {
        self.reprice_dt = v;
    }

    pub fn get_reprice_dt(&self) -> i64 {
        self.reprice_dt
    }

    // int64 mat_dt = 9;

    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }

    // string acc_num = 10;

    pub fn clear_acc_num(&mut self) {
        self.acc_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_num(&mut self, v: ::std::string::String) {
        self.acc_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_num(&mut self) -> &mut ::std::string::String {
        &mut self.acc_num
    }

    // Take field
    pub fn take_acc_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_num, ::std::string::String::new())
    }

    pub fn get_acc_num(&self) -> &str {
        &self.acc_num
    }

    // int64 strt_dt = 11;

    pub fn clear_strt_dt(&mut self) {
        self.strt_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_strt_dt(&mut self, v: i64) {
        self.strt_dt = v;
    }

    pub fn get_strt_dt(&self) -> i64 {
        self.strt_dt
    }

    // string intr_cal_freq = 12;

    pub fn clear_intr_cal_freq(&mut self) {
        self.intr_cal_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_intr_cal_freq(&mut self, v: ::std::string::String) {
        self.intr_cal_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_intr_cal_freq(&mut self) -> &mut ::std::string::String {
        &mut self.intr_cal_freq
    }

    // Take field
    pub fn take_intr_cal_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.intr_cal_freq, ::std::string::String::new())
    }

    pub fn get_intr_cal_freq(&self) -> &str {
        &self.intr_cal_freq
    }

    // string is_float_rate = 13;

    pub fn clear_is_float_rate(&mut self) {
        self.is_float_rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_float_rate(&mut self, v: ::std::string::String) {
        self.is_float_rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_float_rate(&mut self) -> &mut ::std::string::String {
        &mut self.is_float_rate
    }

    // Take field
    pub fn take_is_float_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_float_rate, ::std::string::String::new())
    }

    pub fn get_is_float_rate(&self) -> &str {
        &self.is_float_rate
    }

    // string float_rate_bm = 14;

    pub fn clear_float_rate_bm(&mut self) {
        self.float_rate_bm.clear();
    }

    // Param is passed by value, moved
    pub fn set_float_rate_bm(&mut self, v: ::std::string::String) {
        self.float_rate_bm = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_float_rate_bm(&mut self) -> &mut ::std::string::String {
        &mut self.float_rate_bm
    }

    // Take field
    pub fn take_float_rate_bm(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.float_rate_bm, ::std::string::String::new())
    }

    pub fn get_float_rate_bm(&self) -> &str {
        &self.float_rate_bm
    }

    // string bu_id = 15;

    pub fn clear_bu_id(&mut self) {
        self.bu_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_bu_id(&mut self, v: ::std::string::String) {
        self.bu_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bu_id(&mut self) -> &mut ::std::string::String {
        &mut self.bu_id
    }

    // Take field
    pub fn take_bu_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bu_id, ::std::string::String::new())
    }

    pub fn get_bu_id(&self) -> &str {
        &self.bu_id
    }

    // string cust_id = 16;

    pub fn clear_cust_id(&mut self) {
        self.cust_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: ::std::string::String) {
        self.cust_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_id
    }

    // Take field
    pub fn take_cust_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_id, ::std::string::String::new())
    }

    pub fn get_cust_id(&self) -> &str {
        &self.cust_id
    }

    // string cust_name = 17;

    pub fn clear_cust_name(&mut self) {
        self.cust_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_name(&mut self, v: ::std::string::String) {
        self.cust_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_name
    }

    // Take field
    pub fn take_cust_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_name, ::std::string::String::new())
    }

    pub fn get_cust_name(&self) -> &str {
        &self.cust_name
    }

    // double sprd = 18;

    pub fn clear_sprd(&mut self) {
        self.sprd = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sprd(&mut self, v: f64) {
        self.sprd = v;
    }

    pub fn get_sprd(&self) -> f64 {
        self.sprd
    }

    // string schm_code = 19;

    pub fn clear_schm_code(&mut self) {
        self.schm_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_schm_code(&mut self, v: ::std::string::String) {
        self.schm_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schm_code(&mut self) -> &mut ::std::string::String {
        &mut self.schm_code
    }

    // Take field
    pub fn take_schm_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schm_code, ::std::string::String::new())
    }

    pub fn get_schm_code(&self) -> &str {
        &self.schm_code
    }

    // double min_ir = 20;

    pub fn clear_min_ir(&mut self) {
        self.min_ir = 0.;
    }

    // Param is passed by value, moved
    pub fn set_min_ir(&mut self, v: f64) {
        self.min_ir = v;
    }

    pub fn get_min_ir(&self) -> f64 {
        self.min_ir
    }

    // double max_ir = 21;

    pub fn clear_max_ir(&mut self) {
        self.max_ir = 0.;
    }

    // Param is passed by value, moved
    pub fn set_max_ir(&mut self, v: f64) {
        self.max_ir = v;
    }

    pub fn get_max_ir(&self) -> f64 {
        self.max_ir
    }

    // double dep_amount = 22;

    pub fn clear_dep_amount(&mut self) {
        self.dep_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dep_amount(&mut self, v: f64) {
        self.dep_amount = v;
    }

    pub fn get_dep_amount(&self) -> f64 {
        self.dep_amount
    }

    // double mat_amt = 23;

    pub fn clear_mat_amt(&mut self) {
        self.mat_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mat_amt(&mut self, v: f64) {
        self.mat_amt = v;
    }

    pub fn get_mat_amt(&self) -> f64 {
        self.mat_amt
    }

    // double exch_rate = 24;

    pub fn clear_exch_rate(&mut self) {
        self.exch_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_exch_rate(&mut self, v: f64) {
        self.exch_rate = v;
    }

    pub fn get_exch_rate(&self) -> f64 {
        self.exch_rate
    }

    // string cust_ctry_code = 25;

    pub fn clear_cust_ctry_code(&mut self) {
        self.cust_ctry_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_ctry_code(&mut self, v: ::std::string::String) {
        self.cust_ctry_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_ctry_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_ctry_code
    }

    // Take field
    pub fn take_cust_ctry_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_ctry_code, ::std::string::String::new())
    }

    pub fn get_cust_ctry_code(&self) -> &str {
        &self.cust_ctry_code
    }

    // string cust_crdt_rtng = 26;

    pub fn clear_cust_crdt_rtng(&mut self) {
        self.cust_crdt_rtng.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_crdt_rtng(&mut self, v: ::std::string::String) {
        self.cust_crdt_rtng = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_crdt_rtng(&mut self) -> &mut ::std::string::String {
        &mut self.cust_crdt_rtng
    }

    // Take field
    pub fn take_cust_crdt_rtng(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_crdt_rtng, ::std::string::String::new())
    }

    pub fn get_cust_crdt_rtng(&self) -> &str {
        &self.cust_crdt_rtng
    }

    // string cust_sect_code = 27;

    pub fn clear_cust_sect_code(&mut self) {
        self.cust_sect_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_sect_code(&mut self, v: ::std::string::String) {
        self.cust_sect_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_sect_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_sect_code
    }

    // Take field
    pub fn take_cust_sect_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_sect_code, ::std::string::String::new())
    }

    pub fn get_cust_sect_code(&self) -> &str {
        &self.cust_sect_code
    }

    // string cust_indt_code = 28;

    pub fn clear_cust_indt_code(&mut self) {
        self.cust_indt_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_indt_code(&mut self, v: ::std::string::String) {
        self.cust_indt_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_indt_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_indt_code
    }

    // Take field
    pub fn take_cust_indt_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_indt_code, ::std::string::String::new())
    }

    pub fn get_cust_indt_code(&self) -> &str {
        &self.cust_indt_code
    }

    // string custom1 = 29;

    pub fn clear_custom1(&mut self) {
        self.custom1.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom1(&mut self, v: ::std::string::String) {
        self.custom1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom1(&mut self) -> &mut ::std::string::String {
        &mut self.custom1
    }

    // Take field
    pub fn take_custom1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom1, ::std::string::String::new())
    }

    pub fn get_custom1(&self) -> &str {
        &self.custom1
    }

    // string custom2 = 30;

    pub fn clear_custom2(&mut self) {
        self.custom2.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom2(&mut self, v: ::std::string::String) {
        self.custom2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom2(&mut self) -> &mut ::std::string::String {
        &mut self.custom2
    }

    // Take field
    pub fn take_custom2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom2, ::std::string::String::new())
    }

    pub fn get_custom2(&self) -> &str {
        &self.custom2
    }

    // double total_principal_amount = 31;

    pub fn clear_total_principal_amount(&mut self) {
        self.total_principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_principal_amount(&mut self, v: f64) {
        self.total_principal_amount = v;
    }

    pub fn get_total_principal_amount(&self) -> f64 {
        self.total_principal_amount
    }

    // double total_interest_amount = 32;

    pub fn clear_total_interest_amount(&mut self) {
        self.total_interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_amount(&mut self, v: f64) {
        self.total_interest_amount = v;
    }

    pub fn get_total_interest_amount(&self) -> f64 {
        self.total_interest_amount
    }

    // repeated .Cashflow cashflows = 33;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flow_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grp_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.llg_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amount = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy_id)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.intr_rate = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reprice_freq)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.reprice_dt = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_num)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.strt_dt = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.intr_cal_freq)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_float_rate)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.float_rate_bm)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bu_id)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_id)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_name)?;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.sprd = tmp;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schm_code)?;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.min_ir = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.max_ir = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.dep_amount = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.mat_amt = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.exch_rate = tmp;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_ctry_code)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_crdt_rtng)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_sect_code)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_indt_code)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom1)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom2)?;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_principal_amount = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_amount = tmp;
                },
                33 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.flow_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.flow_id);
        }
        if !self.grp_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.grp_id);
        }
        if !self.llg_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.llg_id);
        }
        if self.amount != 0. {
            my_size += 9;
        }
        if !self.ccy_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.ccy_id);
        }
        if self.intr_rate != 0. {
            my_size += 9;
        }
        if !self.reprice_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.reprice_freq);
        }
        if self.reprice_dt != 0 {
            my_size += ::protobuf::rt::value_size(8, self.reprice_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mat_dt != 0 {
            my_size += ::protobuf::rt::value_size(9, self.mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.acc_num.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.acc_num);
        }
        if self.strt_dt != 0 {
            my_size += ::protobuf::rt::value_size(11, self.strt_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.intr_cal_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.intr_cal_freq);
        }
        if !self.is_float_rate.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.is_float_rate);
        }
        if !self.float_rate_bm.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.float_rate_bm);
        }
        if !self.bu_id.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.bu_id);
        }
        if !self.cust_id.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.cust_id);
        }
        if !self.cust_name.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.cust_name);
        }
        if self.sprd != 0. {
            my_size += 10;
        }
        if !self.schm_code.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.schm_code);
        }
        if self.min_ir != 0. {
            my_size += 10;
        }
        if self.max_ir != 0. {
            my_size += 10;
        }
        if self.dep_amount != 0. {
            my_size += 10;
        }
        if self.mat_amt != 0. {
            my_size += 10;
        }
        if self.exch_rate != 0. {
            my_size += 10;
        }
        if !self.cust_ctry_code.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.cust_ctry_code);
        }
        if !self.cust_crdt_rtng.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.cust_crdt_rtng);
        }
        if !self.cust_sect_code.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.cust_sect_code);
        }
        if !self.cust_indt_code.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.cust_indt_code);
        }
        if !self.custom1.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.custom1);
        }
        if !self.custom2.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.custom2);
        }
        if self.total_principal_amount != 0. {
            my_size += 10;
        }
        if self.total_interest_amount != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.flow_id.is_empty() {
            os.write_string(1, &self.flow_id)?;
        }
        if !self.grp_id.is_empty() {
            os.write_string(2, &self.grp_id)?;
        }
        if !self.llg_id.is_empty() {
            os.write_string(3, &self.llg_id)?;
        }
        if self.amount != 0. {
            os.write_double(4, self.amount)?;
        }
        if !self.ccy_id.is_empty() {
            os.write_string(5, &self.ccy_id)?;
        }
        if self.intr_rate != 0. {
            os.write_double(6, self.intr_rate)?;
        }
        if !self.reprice_freq.is_empty() {
            os.write_string(7, &self.reprice_freq)?;
        }
        if self.reprice_dt != 0 {
            os.write_int64(8, self.reprice_dt)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(9, self.mat_dt)?;
        }
        if !self.acc_num.is_empty() {
            os.write_string(10, &self.acc_num)?;
        }
        if self.strt_dt != 0 {
            os.write_int64(11, self.strt_dt)?;
        }
        if !self.intr_cal_freq.is_empty() {
            os.write_string(12, &self.intr_cal_freq)?;
        }
        if !self.is_float_rate.is_empty() {
            os.write_string(13, &self.is_float_rate)?;
        }
        if !self.float_rate_bm.is_empty() {
            os.write_string(14, &self.float_rate_bm)?;
        }
        if !self.bu_id.is_empty() {
            os.write_string(15, &self.bu_id)?;
        }
        if !self.cust_id.is_empty() {
            os.write_string(16, &self.cust_id)?;
        }
        if !self.cust_name.is_empty() {
            os.write_string(17, &self.cust_name)?;
        }
        if self.sprd != 0. {
            os.write_double(18, self.sprd)?;
        }
        if !self.schm_code.is_empty() {
            os.write_string(19, &self.schm_code)?;
        }
        if self.min_ir != 0. {
            os.write_double(20, self.min_ir)?;
        }
        if self.max_ir != 0. {
            os.write_double(21, self.max_ir)?;
        }
        if self.dep_amount != 0. {
            os.write_double(22, self.dep_amount)?;
        }
        if self.mat_amt != 0. {
            os.write_double(23, self.mat_amt)?;
        }
        if self.exch_rate != 0. {
            os.write_double(24, self.exch_rate)?;
        }
        if !self.cust_ctry_code.is_empty() {
            os.write_string(25, &self.cust_ctry_code)?;
        }
        if !self.cust_crdt_rtng.is_empty() {
            os.write_string(26, &self.cust_crdt_rtng)?;
        }
        if !self.cust_sect_code.is_empty() {
            os.write_string(27, &self.cust_sect_code)?;
        }
        if !self.cust_indt_code.is_empty() {
            os.write_string(28, &self.cust_indt_code)?;
        }
        if !self.custom1.is_empty() {
            os.write_string(29, &self.custom1)?;
        }
        if !self.custom2.is_empty() {
            os.write_string(30, &self.custom2)?;
        }
        if self.total_principal_amount != 0. {
            os.write_double(31, self.total_principal_amount)?;
        }
        if self.total_interest_amount != 0. {
            os.write_double(32, self.total_interest_amount)?;
        }
        for v in &self.cashflows {
            os.write_tag(33, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "flow_id",
                    |m: &AccountWithCashflows| { &m.flow_id },
                    |m: &mut AccountWithCashflows| { &mut m.flow_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "grp_id",
                    |m: &AccountWithCashflows| { &m.grp_id },
                    |m: &mut AccountWithCashflows| { &mut m.grp_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "llg_id",
                    |m: &AccountWithCashflows| { &m.llg_id },
                    |m: &mut AccountWithCashflows| { &mut m.llg_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "amount",
                    |m: &AccountWithCashflows| { &m.amount },
                    |m: &mut AccountWithCashflows| { &mut m.amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy_id",
                    |m: &AccountWithCashflows| { &m.ccy_id },
                    |m: &mut AccountWithCashflows| { &mut m.ccy_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "intr_rate",
                    |m: &AccountWithCashflows| { &m.intr_rate },
                    |m: &mut AccountWithCashflows| { &mut m.intr_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "reprice_freq",
                    |m: &AccountWithCashflows| { &m.reprice_freq },
                    |m: &mut AccountWithCashflows| { &mut m.reprice_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "reprice_dt",
                    |m: &AccountWithCashflows| { &m.reprice_dt },
                    |m: &mut AccountWithCashflows| { &mut m.reprice_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "mat_dt",
                    |m: &AccountWithCashflows| { &m.mat_dt },
                    |m: &mut AccountWithCashflows| { &mut m.mat_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acc_num",
                    |m: &AccountWithCashflows| { &m.acc_num },
                    |m: &mut AccountWithCashflows| { &mut m.acc_num },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "strt_dt",
                    |m: &AccountWithCashflows| { &m.strt_dt },
                    |m: &mut AccountWithCashflows| { &mut m.strt_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "intr_cal_freq",
                    |m: &AccountWithCashflows| { &m.intr_cal_freq },
                    |m: &mut AccountWithCashflows| { &mut m.intr_cal_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "is_float_rate",
                    |m: &AccountWithCashflows| { &m.is_float_rate },
                    |m: &mut AccountWithCashflows| { &mut m.is_float_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "float_rate_bm",
                    |m: &AccountWithCashflows| { &m.float_rate_bm },
                    |m: &mut AccountWithCashflows| { &mut m.float_rate_bm },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bu_id",
                    |m: &AccountWithCashflows| { &m.bu_id },
                    |m: &mut AccountWithCashflows| { &mut m.bu_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_id",
                    |m: &AccountWithCashflows| { &m.cust_id },
                    |m: &mut AccountWithCashflows| { &mut m.cust_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_name",
                    |m: &AccountWithCashflows| { &m.cust_name },
                    |m: &mut AccountWithCashflows| { &mut m.cust_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "sprd",
                    |m: &AccountWithCashflows| { &m.sprd },
                    |m: &mut AccountWithCashflows| { &mut m.sprd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "schm_code",
                    |m: &AccountWithCashflows| { &m.schm_code },
                    |m: &mut AccountWithCashflows| { &mut m.schm_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "min_ir",
                    |m: &AccountWithCashflows| { &m.min_ir },
                    |m: &mut AccountWithCashflows| { &mut m.min_ir },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "max_ir",
                    |m: &AccountWithCashflows| { &m.max_ir },
                    |m: &mut AccountWithCashflows| { &mut m.max_ir },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "dep_amount",
                    |m: &AccountWithCashflows| { &m.dep_amount },
                    |m: &mut AccountWithCashflows| { &mut m.dep_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "mat_amt",
                    |m: &AccountWithCashflows| { &m.mat_amt },
                    |m: &mut AccountWithCashflows| { &mut m.mat_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "exch_rate",
                    |m: &AccountWithCashflows| { &m.exch_rate },
                    |m: &mut AccountWithCashflows| { &mut m.exch_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_ctry_code",
                    |m: &AccountWithCashflows| { &m.cust_ctry_code },
                    |m: &mut AccountWithCashflows| { &mut m.cust_ctry_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_crdt_rtng",
                    |m: &AccountWithCashflows| { &m.cust_crdt_rtng },
                    |m: &mut AccountWithCashflows| { &mut m.cust_crdt_rtng },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_sect_code",
                    |m: &AccountWithCashflows| { &m.cust_sect_code },
                    |m: &mut AccountWithCashflows| { &mut m.cust_sect_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_indt_code",
                    |m: &AccountWithCashflows| { &m.cust_indt_code },
                    |m: &mut AccountWithCashflows| { &mut m.cust_indt_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "custom1",
                    |m: &AccountWithCashflows| { &m.custom1 },
                    |m: &mut AccountWithCashflows| { &mut m.custom1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "custom2",
                    |m: &AccountWithCashflows| { &m.custom2 },
                    |m: &mut AccountWithCashflows| { &mut m.custom2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_principal_amount",
                    |m: &AccountWithCashflows| { &m.total_principal_amount },
                    |m: &mut AccountWithCashflows| { &mut m.total_principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_interest_amount",
                    |m: &AccountWithCashflows| { &m.total_interest_amount },
                    |m: &mut AccountWithCashflows| { &mut m.total_interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_flow_id();
        self.clear_grp_id();
        self.clear_llg_id();
        self.clear_amount();
        self.clear_ccy_id();
        self.clear_intr_rate();
        self.clear_reprice_freq();
        self.clear_reprice_dt();
        self.clear_mat_dt();
        self.clear_acc_num();
        self.clear_strt_dt();
        self.clear_intr_cal_freq();
        self.clear_is_float_rate();
        self.clear_float_rate_bm();
        self.clear_bu_id();
        self.clear_cust_id();
        self.clear_cust_name();
        self.clear_sprd();
        self.clear_schm_code();
        self.clear_min_ir();
        self.clear_max_ir();
        self.clear_dep_amount();
        self.clear_mat_amt();
        self.clear_exch_rate();
        self.clear_cust_ctry_code();
        self.clear_cust_crdt_rtng();
        self.clear_cust_sect_code();
        self.clear_cust_indt_code();
        self.clear_custom1();
        self.clear_custom2();
        self.clear_total_principal_amount();
        self.clear_total_interest_amount();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmessage.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\x20\
    \x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\x01(\
    \x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\
    \"\xfe\x07\n\x14AccountWithCashflows\x12\x17\n\x07flow_id\x18\x01\x20\
    \x01(\tR\x06flowId\x12\x15\n\x06grp_id\x18\x02\x20\x01(\tR\x05grpId\x12\
    \x15\n\x06llg_id\x18\x03\x20\x01(\tR\x05llgId\x12\x16\n\x06amount\x18\
    \x04\x20\x01(\x01R\x06amount\x12\x15\n\x06ccy_id\x18\x05\x20\x01(\tR\x05\
    ccyId\x12\x1b\n\tintr_rate\x18\x06\x20\x01(\x01R\x08intrRate\x12!\n\x0cr\
    eprice_freq\x18\x07\x20\x01(\tR\x0brepriceFreq\x12\x1d\n\nreprice_dt\x18\
    \x08\x20\x01(\x03R\trepriceDt\x12\x15\n\x06mat_dt\x18\t\x20\x01(\x03R\
    \x05matDt\x12\x17\n\x07acc_num\x18\n\x20\x01(\tR\x06accNum\x12\x17\n\x07\
    strt_dt\x18\x0b\x20\x01(\x03R\x06strtDt\x12\"\n\rintr_cal_freq\x18\x0c\
    \x20\x01(\tR\x0bintrCalFreq\x12\"\n\ris_float_rate\x18\r\x20\x01(\tR\x0b\
    isFloatRate\x12\"\n\rfloat_rate_bm\x18\x0e\x20\x01(\tR\x0bfloatRateBm\
    \x12\x13\n\x05bu_id\x18\x0f\x20\x01(\tR\x04buId\x12\x17\n\x07cust_id\x18\
    \x10\x20\x01(\tR\x06custId\x12\x1b\n\tcust_name\x18\x11\x20\x01(\tR\x08c\
    ustName\x12\x12\n\x04sprd\x18\x12\x20\x01(\x01R\x04sprd\x12\x1b\n\tschm_\
    code\x18\x13\x20\x01(\tR\x08schmCode\x12\x15\n\x06min_ir\x18\x14\x20\x01\
    (\x01R\x05minIr\x12\x15\n\x06max_ir\x18\x15\x20\x01(\x01R\x05maxIr\x12\
    \x1d\n\ndep_amount\x18\x16\x20\x01(\x01R\tdepAmount\x12\x17\n\x07mat_amt\
    \x18\x17\x20\x01(\x01R\x06matAmt\x12\x1b\n\texch_rate\x18\x18\x20\x01(\
    \x01R\x08exchRate\x12$\n\x0ecust_ctry_code\x18\x19\x20\x01(\tR\x0ccustCt\
    ryCode\x12$\n\x0ecust_crdt_rtng\x18\x1a\x20\x01(\tR\x0ccustCrdtRtng\x12$\
    \n\x0ecust_sect_code\x18\x1b\x20\x01(\tR\x0ccustSectCode\x12$\n\x0ecust_\
    indt_code\x18\x1c\x20\x01(\tR\x0ccustIndtCode\x12\x18\n\x07custom1\x18\
    \x1d\x20\x01(\tR\x07custom1\x12\x18\n\x07custom2\x18\x1e\x20\x01(\tR\x07\
    custom2\x124\n\x16total_principal_amount\x18\x1f\x20\x01(\x01R\x14totalP\
    rincipalAmount\x122\n\x15total_interest_amount\x18\x20\x20\x01(\x01R\x13\
    totalInterestAmount\x12'\n\tcashflows\x18!\x20\x03(\x0b2\t.CashflowR\tca\
    shflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
