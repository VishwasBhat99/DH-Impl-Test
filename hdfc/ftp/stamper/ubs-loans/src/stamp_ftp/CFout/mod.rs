// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq, Clone, Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    pub base_rate: f64,
    pub base_rate_amount: f64,
    pub adj1_rate: f64,
    pub adj1_rate_amount: f64,
    pub adj2_rate: f64,
    pub adj2_rate_amount: f64,
    pub adj3_rate: f64,
    pub adj3_rate_amount: f64,
    pub adj4_rate: f64,
    pub adj4_rate_amount: f64,
    pub adj5_rate: f64,
    pub adj5_rate_amount: f64,
    pub adj6_rate: f64,
    pub adj6_rate_amount: f64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // double principal_amount = 2;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }

    // double base_rate = 4;

    pub fn clear_base_rate(&mut self) {
        self.base_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_rate(&mut self, v: f64) {
        self.base_rate = v;
    }

    pub fn get_base_rate(&self) -> f64 {
        self.base_rate
    }

    // double base_rate_amount = 5;

    pub fn clear_base_rate_amount(&mut self) {
        self.base_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_rate_amount(&mut self, v: f64) {
        self.base_rate_amount = v;
    }

    pub fn get_base_rate_amount(&self) -> f64 {
        self.base_rate_amount
    }

    // double adj1_rate = 6;

    pub fn clear_adj1_rate(&mut self) {
        self.adj1_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj1_rate(&mut self, v: f64) {
        self.adj1_rate = v;
    }

    pub fn get_adj1_rate(&self) -> f64 {
        self.adj1_rate
    }

    // double adj1_rate_amount = 7;

    pub fn clear_adj1_rate_amount(&mut self) {
        self.adj1_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj1_rate_amount(&mut self, v: f64) {
        self.adj1_rate_amount = v;
    }

    pub fn get_adj1_rate_amount(&self) -> f64 {
        self.adj1_rate_amount
    }

    // double adj2_rate = 8;

    pub fn clear_adj2_rate(&mut self) {
        self.adj2_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj2_rate(&mut self, v: f64) {
        self.adj2_rate = v;
    }

    pub fn get_adj2_rate(&self) -> f64 {
        self.adj2_rate
    }

    // double adj2_rate_amount = 9;

    pub fn clear_adj2_rate_amount(&mut self) {
        self.adj2_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj2_rate_amount(&mut self, v: f64) {
        self.adj2_rate_amount = v;
    }

    pub fn get_adj2_rate_amount(&self) -> f64 {
        self.adj2_rate_amount
    }

    // double adj3_rate = 10;

    pub fn clear_adj3_rate(&mut self) {
        self.adj3_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj3_rate(&mut self, v: f64) {
        self.adj3_rate = v;
    }

    pub fn get_adj3_rate(&self) -> f64 {
        self.adj3_rate
    }

    // double adj3_rate_amount = 11;

    pub fn clear_adj3_rate_amount(&mut self) {
        self.adj3_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj3_rate_amount(&mut self, v: f64) {
        self.adj3_rate_amount = v;
    }

    pub fn get_adj3_rate_amount(&self) -> f64 {
        self.adj3_rate_amount
    }

    // double adj4_rate = 12;

    pub fn clear_adj4_rate(&mut self) {
        self.adj4_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj4_rate(&mut self, v: f64) {
        self.adj4_rate = v;
    }

    pub fn get_adj4_rate(&self) -> f64 {
        self.adj4_rate
    }

    // double adj4_rate_amount = 13;

    pub fn clear_adj4_rate_amount(&mut self) {
        self.adj4_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj4_rate_amount(&mut self, v: f64) {
        self.adj4_rate_amount = v;
    }

    pub fn get_adj4_rate_amount(&self) -> f64 {
        self.adj4_rate_amount
    }

    // double adj5_rate = 14;

    pub fn clear_adj5_rate(&mut self) {
        self.adj5_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj5_rate(&mut self, v: f64) {
        self.adj5_rate = v;
    }

    pub fn get_adj5_rate(&self) -> f64 {
        self.adj5_rate
    }

    // double adj5_rate_amount = 15;

    pub fn clear_adj5_rate_amount(&mut self) {
        self.adj5_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj5_rate_amount(&mut self, v: f64) {
        self.adj5_rate_amount = v;
    }

    pub fn get_adj5_rate_amount(&self) -> f64 {
        self.adj5_rate_amount
    }

    // double adj6_rate = 16;

    pub fn clear_adj6_rate(&mut self) {
        self.adj6_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj6_rate(&mut self, v: f64) {
        self.adj6_rate = v;
    }

    pub fn get_adj6_rate(&self) -> f64 {
        self.adj6_rate
    }

    // double adj6_rate_amount = 17;

    pub fn clear_adj6_rate_amount(&mut self) {
        self.adj6_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj6_rate_amount(&mut self, v: f64) {
        self.adj6_rate_amount = v;
    }

    pub fn get_adj6_rate_amount(&self) -> f64 {
        self.adj6_rate_amount
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                }
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.base_rate = tmp;
                }
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.base_rate_amount = tmp;
                }
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj1_rate = tmp;
                }
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj1_rate_amount = tmp;
                }
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj2_rate = tmp;
                }
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj2_rate_amount = tmp;
                }
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj3_rate = tmp;
                }
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj3_rate_amount = tmp;
                }
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj4_rate = tmp;
                }
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj4_rate_amount = tmp;
                }
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj5_rate = tmp;
                }
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj5_rate_amount = tmp;
                }
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj6_rate = tmp;
                }
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj6_rate_amount = tmp;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size +=
                ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.base_rate != 0. {
            my_size += 9;
        }
        if self.base_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj1_rate != 0. {
            my_size += 9;
        }
        if self.adj1_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj2_rate != 0. {
            my_size += 9;
        }
        if self.adj2_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj3_rate != 0. {
            my_size += 9;
        }
        if self.adj3_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj4_rate != 0. {
            my_size += 9;
        }
        if self.adj4_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj5_rate != 0. {
            my_size += 9;
        }
        if self.adj5_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj6_rate != 0. {
            my_size += 10;
        }
        if self.adj6_rate_amount != 0. {
            my_size += 10;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream,
    ) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        if self.base_rate != 0. {
            os.write_double(4, self.base_rate)?;
        }
        if self.base_rate_amount != 0. {
            os.write_double(5, self.base_rate_amount)?;
        }
        if self.adj1_rate != 0. {
            os.write_double(6, self.adj1_rate)?;
        }
        if self.adj1_rate_amount != 0. {
            os.write_double(7, self.adj1_rate_amount)?;
        }
        if self.adj2_rate != 0. {
            os.write_double(8, self.adj2_rate)?;
        }
        if self.adj2_rate_amount != 0. {
            os.write_double(9, self.adj2_rate_amount)?;
        }
        if self.adj3_rate != 0. {
            os.write_double(10, self.adj3_rate)?;
        }
        if self.adj3_rate_amount != 0. {
            os.write_double(11, self.adj3_rate_amount)?;
        }
        if self.adj4_rate != 0. {
            os.write_double(12, self.adj4_rate)?;
        }
        if self.adj4_rate_amount != 0. {
            os.write_double(13, self.adj4_rate_amount)?;
        }
        if self.adj5_rate != 0. {
            os.write_double(14, self.adj5_rate)?;
        }
        if self.adj5_rate_amount != 0. {
            os.write_double(15, self.adj5_rate_amount)?;
        }
        if self.adj6_rate != 0. {
            os.write_double(16, self.adj6_rate)?;
        }
        if self.adj6_rate_amount != 0. {
            os.write_double(17, self.adj6_rate_amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "interest_amount",
                    |m: &Cashflow| &m.interest_amount,
                    |m: &mut Cashflow| &mut m.interest_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "principal_amount",
                    |m: &Cashflow| &m.principal_amount,
                    |m: &mut Cashflow| &mut m.principal_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "date",
                    |m: &Cashflow| &m.date,
                    |m: &mut Cashflow| &mut m.date,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "base_rate",
                    |m: &Cashflow| &m.base_rate,
                    |m: &mut Cashflow| &mut m.base_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "base_rate_amount",
                    |m: &Cashflow| &m.base_rate_amount,
                    |m: &mut Cashflow| &mut m.base_rate_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj1_rate",
                    |m: &Cashflow| &m.adj1_rate,
                    |m: &mut Cashflow| &mut m.adj1_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj1_rate_amount",
                    |m: &Cashflow| &m.adj1_rate_amount,
                    |m: &mut Cashflow| &mut m.adj1_rate_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj2_rate",
                    |m: &Cashflow| &m.adj2_rate,
                    |m: &mut Cashflow| &mut m.adj2_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj2_rate_amount",
                    |m: &Cashflow| &m.adj2_rate_amount,
                    |m: &mut Cashflow| &mut m.adj2_rate_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj3_rate",
                    |m: &Cashflow| &m.adj3_rate,
                    |m: &mut Cashflow| &mut m.adj3_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj3_rate_amount",
                    |m: &Cashflow| &m.adj3_rate_amount,
                    |m: &mut Cashflow| &mut m.adj3_rate_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj4_rate",
                    |m: &Cashflow| &m.adj4_rate,
                    |m: &mut Cashflow| &mut m.adj4_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj4_rate_amount",
                    |m: &Cashflow| &m.adj4_rate_amount,
                    |m: &mut Cashflow| &mut m.adj4_rate_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj5_rate",
                    |m: &Cashflow| &m.adj5_rate,
                    |m: &mut Cashflow| &mut m.adj5_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj5_rate_amount",
                    |m: &Cashflow| &m.adj5_rate_amount,
                    |m: &mut Cashflow| &mut m.adj5_rate_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj6_rate",
                    |m: &Cashflow| &m.adj6_rate,
                    |m: &mut Cashflow| &mut m.adj6_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj6_rate_amount",
                    |m: &Cashflow| &m.adj6_rate_amount,
                    |m: &mut Cashflow| &mut m.adj6_rate_amount,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe { instance.get(Cashflow::new) }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_interest_amount();
        self.clear_principal_amount();
        self.clear_date();
        self.clear_base_rate();
        self.clear_base_rate_amount();
        self.clear_adj1_rate();
        self.clear_adj1_rate_amount();
        self.clear_adj2_rate();
        self.clear_adj2_rate_amount();
        self.clear_adj3_rate();
        self.clear_adj3_rate_amount();
        self.clear_adj4_rate();
        self.clear_adj4_rate_amount();
        self.clear_adj5_rate();
        self.clear_adj5_rate_amount();
        self.clear_adj6_rate();
        self.clear_adj6_rate_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct AccountWithCashflows {
    // message fields
    pub cust_no: ::std::string::String,
    pub reference: ::std::string::String,
    pub cust_name: ::std::string::String,
    pub branch_cd: ::std::string::String,
    pub norm_int_rt: f64,
    pub acurl_freq: ::std::string::String,
    pub book_dt: i64,
    pub val_dt: i64,
    pub mat_dt: i64,
    pub user_def_stats: ::std::string::String,
    pub prod_cd: ::std::string::String,
    pub gl: ::std::string::String,
    pub curr: ::std::string::String,
    pub prin_ost_bal: f64,
    pub spread: f64,
    pub compmis2: i64,
    pub rt_flag_new: ::std::string::String,
    pub rt_cd_new: ::std::string::String,
    pub division: ::std::string::String,
    pub alm_line: ::std::string::String,
    pub ia_llg: ::std::string::String,
    pub balm_llg: ::std::string::String,
    pub repricing_freq: ::std::string::String,
    pub lst_repricing_dt: i64,
    pub nxt_repricing_dt: i64,
    pub int_basis: ::std::string::String,
    pub cust_typ: ::std::string::String,
    pub npa_typ: ::std::string::String,
    pub bmid: ::std::string::String,
    pub compmis1: i64,
    pub compmis3: i64,
    pub org_tenor: i64,
    pub resid_tenor: i64,
    pub def_ftp_flag: ::std::string::String,
    pub total_interest_amount: f64,
    pub total_principal_amount: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    pub Method: i32,
    pub BaseCurve: i32,
    pub ftp_runid: i64,
    pub from_date: i32,
    pub to_date: i32,
    pub total_balance: f64,
    pub total_interest_ftp: f64,
    pub total_ftp: f64,
    pub FTP_Rate: f64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string cust_no = 1;

    pub fn clear_cust_no(&mut self) {
        self.cust_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_no(&mut self, v: ::std::string::String) {
        self.cust_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_no(&mut self) -> &mut ::std::string::String {
        &mut self.cust_no
    }

    // Take field
    pub fn take_cust_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_no, ::std::string::String::new())
    }

    pub fn get_cust_no(&self) -> &str {
        &self.cust_no
    }

    // string reference = 2;

    pub fn clear_reference(&mut self) {
        self.reference.clear();
    }

    // Param is passed by value, moved
    pub fn set_reference(&mut self, v: ::std::string::String) {
        self.reference = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reference(&mut self) -> &mut ::std::string::String {
        &mut self.reference
    }

    // Take field
    pub fn take_reference(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reference, ::std::string::String::new())
    }

    pub fn get_reference(&self) -> &str {
        &self.reference
    }

    // string cust_name = 3;

    pub fn clear_cust_name(&mut self) {
        self.cust_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_name(&mut self, v: ::std::string::String) {
        self.cust_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_name
    }

    // Take field
    pub fn take_cust_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_name, ::std::string::String::new())
    }

    pub fn get_cust_name(&self) -> &str {
        &self.cust_name
    }

    // string branch_cd = 4;

    pub fn clear_branch_cd(&mut self) {
        self.branch_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch_cd(&mut self, v: ::std::string::String) {
        self.branch_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch_cd(&mut self) -> &mut ::std::string::String {
        &mut self.branch_cd
    }

    // Take field
    pub fn take_branch_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch_cd, ::std::string::String::new())
    }

    pub fn get_branch_cd(&self) -> &str {
        &self.branch_cd
    }

    // double norm_int_rt = 5;

    pub fn clear_norm_int_rt(&mut self) {
        self.norm_int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_norm_int_rt(&mut self, v: f64) {
        self.norm_int_rt = v;
    }

    pub fn get_norm_int_rt(&self) -> f64 {
        self.norm_int_rt
    }

    // string acurl_freq = 6;

    pub fn clear_acurl_freq(&mut self) {
        self.acurl_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_acurl_freq(&mut self, v: ::std::string::String) {
        self.acurl_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acurl_freq(&mut self) -> &mut ::std::string::String {
        &mut self.acurl_freq
    }

    // Take field
    pub fn take_acurl_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acurl_freq, ::std::string::String::new())
    }

    pub fn get_acurl_freq(&self) -> &str {
        &self.acurl_freq
    }

    // int64 book_dt = 7;

    pub fn clear_book_dt(&mut self) {
        self.book_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_book_dt(&mut self, v: i64) {
        self.book_dt = v;
    }

    pub fn get_book_dt(&self) -> i64 {
        self.book_dt
    }

    // int64 val_dt = 8;

    pub fn clear_val_dt(&mut self) {
        self.val_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_val_dt(&mut self, v: i64) {
        self.val_dt = v;
    }

    pub fn get_val_dt(&self) -> i64 {
        self.val_dt
    }

    // int64 mat_dt = 9;

    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }

    // string user_def_stats = 10;

    pub fn clear_user_def_stats(&mut self) {
        self.user_def_stats.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_def_stats(&mut self, v: ::std::string::String) {
        self.user_def_stats = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_def_stats(&mut self) -> &mut ::std::string::String {
        &mut self.user_def_stats
    }

    // Take field
    pub fn take_user_def_stats(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.user_def_stats, ::std::string::String::new())
    }

    pub fn get_user_def_stats(&self) -> &str {
        &self.user_def_stats
    }

    // string prod_cd = 11;

    pub fn clear_prod_cd(&mut self) {
        self.prod_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_cd(&mut self, v: ::std::string::String) {
        self.prod_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_cd(&mut self) -> &mut ::std::string::String {
        &mut self.prod_cd
    }

    // Take field
    pub fn take_prod_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_cd, ::std::string::String::new())
    }

    pub fn get_prod_cd(&self) -> &str {
        &self.prod_cd
    }

    // string gl = 12;

    pub fn clear_gl(&mut self) {
        self.gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl(&mut self, v: ::std::string::String) {
        self.gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl(&mut self) -> &mut ::std::string::String {
        &mut self.gl
    }

    // Take field
    pub fn take_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl, ::std::string::String::new())
    }

    pub fn get_gl(&self) -> &str {
        &self.gl
    }

    // string curr = 13;

    pub fn clear_curr(&mut self) {
        self.curr.clear();
    }

    // Param is passed by value, moved
    pub fn set_curr(&mut self, v: ::std::string::String) {
        self.curr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_curr(&mut self) -> &mut ::std::string::String {
        &mut self.curr
    }

    // Take field
    pub fn take_curr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.curr, ::std::string::String::new())
    }

    pub fn get_curr(&self) -> &str {
        &self.curr
    }

    // double prin_ost_bal = 14;

    pub fn clear_prin_ost_bal(&mut self) {
        self.prin_ost_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_ost_bal(&mut self, v: f64) {
        self.prin_ost_bal = v;
    }

    pub fn get_prin_ost_bal(&self) -> f64 {
        self.prin_ost_bal
    }

    // double spread = 15;

    pub fn clear_spread(&mut self) {
        self.spread = 0.;
    }

    // Param is passed by value, moved
    pub fn set_spread(&mut self, v: f64) {
        self.spread = v;
    }

    pub fn get_spread(&self) -> f64 {
        self.spread
    }

    // int64 compmis2 = 16;

    pub fn clear_compmis2(&mut self) {
        self.compmis2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_compmis2(&mut self, v: i64) {
        self.compmis2 = v;
    }

    pub fn get_compmis2(&self) -> i64 {
        self.compmis2
    }

    // string rt_flag_new = 17;

    pub fn clear_rt_flag_new(&mut self) {
        self.rt_flag_new.clear();
    }

    // Param is passed by value, moved
    pub fn set_rt_flag_new(&mut self, v: ::std::string::String) {
        self.rt_flag_new = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rt_flag_new(&mut self) -> &mut ::std::string::String {
        &mut self.rt_flag_new
    }

    // Take field
    pub fn take_rt_flag_new(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rt_flag_new, ::std::string::String::new())
    }

    pub fn get_rt_flag_new(&self) -> &str {
        &self.rt_flag_new
    }

    // string rt_cd_new = 18;

    pub fn clear_rt_cd_new(&mut self) {
        self.rt_cd_new.clear();
    }

    // Param is passed by value, moved
    pub fn set_rt_cd_new(&mut self, v: ::std::string::String) {
        self.rt_cd_new = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rt_cd_new(&mut self) -> &mut ::std::string::String {
        &mut self.rt_cd_new
    }

    // Take field
    pub fn take_rt_cd_new(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rt_cd_new, ::std::string::String::new())
    }

    pub fn get_rt_cd_new(&self) -> &str {
        &self.rt_cd_new
    }

    // string division = 19;

    pub fn clear_division(&mut self) {
        self.division.clear();
    }

    // Param is passed by value, moved
    pub fn set_division(&mut self, v: ::std::string::String) {
        self.division = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_division(&mut self) -> &mut ::std::string::String {
        &mut self.division
    }

    // Take field
    pub fn take_division(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.division, ::std::string::String::new())
    }

    pub fn get_division(&self) -> &str {
        &self.division
    }

    // string alm_line = 20;

    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }

    // string ia_llg = 21;

    pub fn clear_ia_llg(&mut self) {
        self.ia_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_ia_llg(&mut self, v: ::std::string::String) {
        self.ia_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ia_llg(&mut self) -> &mut ::std::string::String {
        &mut self.ia_llg
    }

    // Take field
    pub fn take_ia_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ia_llg, ::std::string::String::new())
    }

    pub fn get_ia_llg(&self) -> &str {
        &self.ia_llg
    }

    // string balm_llg = 22;

    pub fn clear_balm_llg(&mut self) {
        self.balm_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_balm_llg(&mut self, v: ::std::string::String) {
        self.balm_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balm_llg(&mut self) -> &mut ::std::string::String {
        &mut self.balm_llg
    }

    // Take field
    pub fn take_balm_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balm_llg, ::std::string::String::new())
    }

    pub fn get_balm_llg(&self) -> &str {
        &self.balm_llg
    }

    // string repricing_freq = 23;

    pub fn clear_repricing_freq(&mut self) {
        self.repricing_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_repricing_freq(&mut self, v: ::std::string::String) {
        self.repricing_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repricing_freq(&mut self) -> &mut ::std::string::String {
        &mut self.repricing_freq
    }

    // Take field
    pub fn take_repricing_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.repricing_freq, ::std::string::String::new())
    }

    pub fn get_repricing_freq(&self) -> &str {
        &self.repricing_freq
    }

    // int64 lst_repricing_dt = 24;

    pub fn clear_lst_repricing_dt(&mut self) {
        self.lst_repricing_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_lst_repricing_dt(&mut self, v: i64) {
        self.lst_repricing_dt = v;
    }

    pub fn get_lst_repricing_dt(&self) -> i64 {
        self.lst_repricing_dt
    }

    // int64 nxt_repricing_dt = 25;

    pub fn clear_nxt_repricing_dt(&mut self) {
        self.nxt_repricing_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_repricing_dt(&mut self, v: i64) {
        self.nxt_repricing_dt = v;
    }

    pub fn get_nxt_repricing_dt(&self) -> i64 {
        self.nxt_repricing_dt
    }

    // string int_basis = 26;

    pub fn clear_int_basis(&mut self) {
        self.int_basis.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_basis(&mut self, v: ::std::string::String) {
        self.int_basis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_basis(&mut self) -> &mut ::std::string::String {
        &mut self.int_basis
    }

    // Take field
    pub fn take_int_basis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_basis, ::std::string::String::new())
    }

    pub fn get_int_basis(&self) -> &str {
        &self.int_basis
    }

    // string cust_typ = 27;

    pub fn clear_cust_typ(&mut self) {
        self.cust_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_typ(&mut self, v: ::std::string::String) {
        self.cust_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_typ(&mut self) -> &mut ::std::string::String {
        &mut self.cust_typ
    }

    // Take field
    pub fn take_cust_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_typ, ::std::string::String::new())
    }

    pub fn get_cust_typ(&self) -> &str {
        &self.cust_typ
    }

    // string npa_typ = 28;

    pub fn clear_npa_typ(&mut self) {
        self.npa_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_typ(&mut self, v: ::std::string::String) {
        self.npa_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_typ(&mut self) -> &mut ::std::string::String {
        &mut self.npa_typ
    }

    // Take field
    pub fn take_npa_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_typ, ::std::string::String::new())
    }

    pub fn get_npa_typ(&self) -> &str {
        &self.npa_typ
    }

    // string bmid = 29;

    pub fn clear_bmid(&mut self) {
        self.bmid.clear();
    }

    // Param is passed by value, moved
    pub fn set_bmid(&mut self, v: ::std::string::String) {
        self.bmid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bmid(&mut self) -> &mut ::std::string::String {
        &mut self.bmid
    }

    // Take field
    pub fn take_bmid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bmid, ::std::string::String::new())
    }

    pub fn get_bmid(&self) -> &str {
        &self.bmid
    }

    // int64 compmis1 = 30;

    pub fn clear_compmis1(&mut self) {
        self.compmis1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_compmis1(&mut self, v: i64) {
        self.compmis1 = v;
    }

    pub fn get_compmis1(&self) -> i64 {
        self.compmis1
    }

    // int64 compmis3 = 31;

    pub fn clear_compmis3(&mut self) {
        self.compmis3 = 0;
    }

    // Param is passed by value, moved
    pub fn set_compmis3(&mut self, v: i64) {
        self.compmis3 = v;
    }

    pub fn get_compmis3(&self) -> i64 {
        self.compmis3
    }

    // int64 org_tenor = 32;

    pub fn clear_org_tenor(&mut self) {
        self.org_tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_org_tenor(&mut self, v: i64) {
        self.org_tenor = v;
    }

    pub fn get_org_tenor(&self) -> i64 {
        self.org_tenor
    }

    // int64 resid_tenor = 33;

    pub fn clear_resid_tenor(&mut self) {
        self.resid_tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_resid_tenor(&mut self, v: i64) {
        self.resid_tenor = v;
    }

    pub fn get_resid_tenor(&self) -> i64 {
        self.resid_tenor
    }

    // string def_ftp_flag = 34;

    pub fn clear_def_ftp_flag(&mut self) {
        self.def_ftp_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_def_ftp_flag(&mut self, v: ::std::string::String) {
        self.def_ftp_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_def_ftp_flag(&mut self) -> &mut ::std::string::String {
        &mut self.def_ftp_flag
    }

    // Take field
    pub fn take_def_ftp_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.def_ftp_flag, ::std::string::String::new())
    }

    pub fn get_def_ftp_flag(&self) -> &str {
        &self.def_ftp_flag
    }

    // double total_interest_amount = 35;

    pub fn clear_total_interest_amount(&mut self) {
        self.total_interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_amount(&mut self, v: f64) {
        self.total_interest_amount = v;
    }

    pub fn get_total_interest_amount(&self) -> f64 {
        self.total_interest_amount
    }

    // double total_principal_amount = 36;

    pub fn clear_total_principal_amount(&mut self) {
        self.total_principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_principal_amount(&mut self, v: f64) {
        self.total_principal_amount = v;
    }

    pub fn get_total_principal_amount(&self) -> f64 {
        self.total_principal_amount
    }

    // repeated .Cashflow cashflows = 37;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }

    // int32 Method = 38;

    pub fn clear_Method(&mut self) {
        self.Method = 0;
    }

    // Param is passed by value, moved
    pub fn set_Method(&mut self, v: i32) {
        self.Method = v;
    }

    pub fn get_Method(&self) -> i32 {
        self.Method
    }

    // int32 BaseCurve = 39;

    pub fn clear_BaseCurve(&mut self) {
        self.BaseCurve = 0;
    }

    // Param is passed by value, moved
    pub fn set_BaseCurve(&mut self, v: i32) {
        self.BaseCurve = v;
    }

    pub fn get_BaseCurve(&self) -> i32 {
        self.BaseCurve
    }

    // int64 ftp_runid = 40;

    pub fn clear_ftp_runid(&mut self) {
        self.ftp_runid = 0;
    }

    // Param is passed by value, moved
    pub fn set_ftp_runid(&mut self, v: i64) {
        self.ftp_runid = v;
    }

    pub fn get_ftp_runid(&self) -> i64 {
        self.ftp_runid
    }

    // int32 from_date = 41;

    pub fn clear_from_date(&mut self) {
        self.from_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_from_date(&mut self, v: i32) {
        self.from_date = v;
    }

    pub fn get_from_date(&self) -> i32 {
        self.from_date
    }

    // int32 to_date = 42;

    pub fn clear_to_date(&mut self) {
        self.to_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_to_date(&mut self, v: i32) {
        self.to_date = v;
    }

    pub fn get_to_date(&self) -> i32 {
        self.to_date
    }

    // double total_balance = 43;

    pub fn clear_total_balance(&mut self) {
        self.total_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_balance(&mut self, v: f64) {
        self.total_balance = v;
    }

    pub fn get_total_balance(&self) -> f64 {
        self.total_balance
    }

    // double total_interest_ftp = 44;

    pub fn clear_total_interest_ftp(&mut self) {
        self.total_interest_ftp = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_ftp(&mut self, v: f64) {
        self.total_interest_ftp = v;
    }

    pub fn get_total_interest_ftp(&self) -> f64 {
        self.total_interest_ftp
    }

    // double total_ftp = 45;

    pub fn clear_total_ftp(&mut self) {
        self.total_ftp = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_ftp(&mut self, v: f64) {
        self.total_ftp = v;
    }

    pub fn get_total_ftp(&self) -> f64 {
        self.total_ftp
    }

    // double FTP_Rate = 46;

    pub fn clear_FTP_Rate(&mut self) {
        self.FTP_Rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_FTP_Rate(&mut self, v: f64) {
        self.FTP_Rate = v;
    }

    pub fn get_FTP_Rate(&self) -> f64 {
        self.FTP_Rate
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.cust_no,
                    )?;
                }
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.reference,
                    )?;
                }
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.cust_name,
                    )?;
                }
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.branch_cd,
                    )?;
                }
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.norm_int_rt = tmp;
                }
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.acurl_freq,
                    )?;
                }
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.book_dt = tmp;
                }
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.val_dt = tmp;
                }
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                }
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.user_def_stats,
                    )?;
                }
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.prod_cd,
                    )?;
                }
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl)?;
                }
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.curr,
                    )?;
                }
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.prin_ost_bal = tmp;
                }
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.spread = tmp;
                }
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.compmis2 = tmp;
                }
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.rt_flag_new,
                    )?;
                }
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.rt_cd_new,
                    )?;
                }
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.division,
                    )?;
                }
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.alm_line,
                    )?;
                }
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.ia_llg,
                    )?;
                }
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.balm_llg,
                    )?;
                }
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.repricing_freq,
                    )?;
                }
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.lst_repricing_dt = tmp;
                }
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_repricing_dt = tmp;
                }
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.int_basis,
                    )?;
                }
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.cust_typ,
                    )?;
                }
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.npa_typ,
                    )?;
                }
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.bmid,
                    )?;
                }
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.compmis1 = tmp;
                }
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.compmis3 = tmp;
                }
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.org_tenor = tmp;
                }
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.resid_tenor = tmp;
                }
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.def_ftp_flag,
                    )?;
                }
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_amount = tmp;
                }
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.total_principal_amount = tmp;
                }
                37 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                }
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.Method = tmp;
                }
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.BaseCurve = tmp;
                }
                40 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.ftp_runid = tmp;
                }
                41 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.from_date = tmp;
                }
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.to_date = tmp;
                }
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.total_balance = tmp;
                }
                44 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_ftp = tmp;
                }
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.total_ftp = tmp;
                }
                46 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.FTP_Rate = tmp;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cust_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cust_no);
        }
        if !self.reference.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.reference);
        }
        if !self.cust_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.cust_name);
        }
        if !self.branch_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.branch_cd);
        }
        if self.norm_int_rt != 0. {
            my_size += 9;
        }
        if !self.acurl_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.acurl_freq);
        }
        if self.book_dt != 0 {
            my_size += ::protobuf::rt::value_size(
                7,
                self.book_dt,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.val_dt != 0 {
            my_size +=
                ::protobuf::rt::value_size(8, self.val_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mat_dt != 0 {
            my_size +=
                ::protobuf::rt::value_size(9, self.mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.user_def_stats.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.user_def_stats);
        }
        if !self.prod_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.prod_cd);
        }
        if !self.gl.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.gl);
        }
        if !self.curr.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.curr);
        }
        if self.prin_ost_bal != 0. {
            my_size += 9;
        }
        if self.spread != 0. {
            my_size += 9;
        }
        if self.compmis2 != 0 {
            my_size += ::protobuf::rt::value_size(
                16,
                self.compmis2,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.rt_flag_new.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.rt_flag_new);
        }
        if !self.rt_cd_new.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.rt_cd_new);
        }
        if !self.division.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.division);
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.alm_line);
        }
        if !self.ia_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.ia_llg);
        }
        if !self.balm_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.balm_llg);
        }
        if !self.repricing_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.repricing_freq);
        }
        if self.lst_repricing_dt != 0 {
            my_size += ::protobuf::rt::value_size(
                24,
                self.lst_repricing_dt,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.nxt_repricing_dt != 0 {
            my_size += ::protobuf::rt::value_size(
                25,
                self.nxt_repricing_dt,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.int_basis.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.int_basis);
        }
        if !self.cust_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.cust_typ);
        }
        if !self.npa_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.npa_typ);
        }
        if !self.bmid.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.bmid);
        }
        if self.compmis1 != 0 {
            my_size += ::protobuf::rt::value_size(
                30,
                self.compmis1,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.compmis3 != 0 {
            my_size += ::protobuf::rt::value_size(
                31,
                self.compmis3,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.org_tenor != 0 {
            my_size += ::protobuf::rt::value_size(
                32,
                self.org_tenor,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.resid_tenor != 0 {
            my_size += ::protobuf::rt::value_size(
                33,
                self.resid_tenor,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.def_ftp_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.def_ftp_flag);
        }
        if self.total_interest_amount != 0. {
            my_size += 10;
        }
        if self.total_principal_amount != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.Method != 0 {
            my_size += ::protobuf::rt::value_size(
                38,
                self.Method,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.BaseCurve != 0 {
            my_size += ::protobuf::rt::value_size(
                39,
                self.BaseCurve,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.ftp_runid != 0 {
            my_size += ::protobuf::rt::value_size(
                40,
                self.ftp_runid,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.from_date != 0 {
            my_size += ::protobuf::rt::value_size(
                41,
                self.from_date,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.to_date != 0 {
            my_size += ::protobuf::rt::value_size(
                42,
                self.to_date,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.total_balance != 0. {
            my_size += 10;
        }
        if self.total_interest_ftp != 0. {
            my_size += 10;
        }
        if self.total_ftp != 0. {
            my_size += 10;
        }
        if self.FTP_Rate != 0. {
            my_size += 10;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.cust_no.is_empty() {
            os.write_string(1, &self.cust_no)?;
        }
        if !self.reference.is_empty() {
            os.write_string(2, &self.reference)?;
        }
        if !self.cust_name.is_empty() {
            os.write_string(3, &self.cust_name)?;
        }
        if !self.branch_cd.is_empty() {
            os.write_string(4, &self.branch_cd)?;
        }
        if self.norm_int_rt != 0. {
            os.write_double(5, self.norm_int_rt)?;
        }
        if !self.acurl_freq.is_empty() {
            os.write_string(6, &self.acurl_freq)?;
        }
        if self.book_dt != 0 {
            os.write_int64(7, self.book_dt)?;
        }
        if self.val_dt != 0 {
            os.write_int64(8, self.val_dt)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(9, self.mat_dt)?;
        }
        if !self.user_def_stats.is_empty() {
            os.write_string(10, &self.user_def_stats)?;
        }
        if !self.prod_cd.is_empty() {
            os.write_string(11, &self.prod_cd)?;
        }
        if !self.gl.is_empty() {
            os.write_string(12, &self.gl)?;
        }
        if !self.curr.is_empty() {
            os.write_string(13, &self.curr)?;
        }
        if self.prin_ost_bal != 0. {
            os.write_double(14, self.prin_ost_bal)?;
        }
        if self.spread != 0. {
            os.write_double(15, self.spread)?;
        }
        if self.compmis2 != 0 {
            os.write_int64(16, self.compmis2)?;
        }
        if !self.rt_flag_new.is_empty() {
            os.write_string(17, &self.rt_flag_new)?;
        }
        if !self.rt_cd_new.is_empty() {
            os.write_string(18, &self.rt_cd_new)?;
        }
        if !self.division.is_empty() {
            os.write_string(19, &self.division)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(20, &self.alm_line)?;
        }
        if !self.ia_llg.is_empty() {
            os.write_string(21, &self.ia_llg)?;
        }
        if !self.balm_llg.is_empty() {
            os.write_string(22, &self.balm_llg)?;
        }
        if !self.repricing_freq.is_empty() {
            os.write_string(23, &self.repricing_freq)?;
        }
        if self.lst_repricing_dt != 0 {
            os.write_int64(24, self.lst_repricing_dt)?;
        }
        if self.nxt_repricing_dt != 0 {
            os.write_int64(25, self.nxt_repricing_dt)?;
        }
        if !self.int_basis.is_empty() {
            os.write_string(26, &self.int_basis)?;
        }
        if !self.cust_typ.is_empty() {
            os.write_string(27, &self.cust_typ)?;
        }
        if !self.npa_typ.is_empty() {
            os.write_string(28, &self.npa_typ)?;
        }
        if !self.bmid.is_empty() {
            os.write_string(29, &self.bmid)?;
        }
        if self.compmis1 != 0 {
            os.write_int64(30, self.compmis1)?;
        }
        if self.compmis3 != 0 {
            os.write_int64(31, self.compmis3)?;
        }
        if self.org_tenor != 0 {
            os.write_int64(32, self.org_tenor)?;
        }
        if self.resid_tenor != 0 {
            os.write_int64(33, self.resid_tenor)?;
        }
        if !self.def_ftp_flag.is_empty() {
            os.write_string(34, &self.def_ftp_flag)?;
        }
        if self.total_interest_amount != 0. {
            os.write_double(35, self.total_interest_amount)?;
        }
        if self.total_principal_amount != 0. {
            os.write_double(36, self.total_principal_amount)?;
        }
        for v in &self.cashflows {
            os.write_tag(37, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.Method != 0 {
            os.write_int32(38, self.Method)?;
        }
        if self.BaseCurve != 0 {
            os.write_int32(39, self.BaseCurve)?;
        }
        if self.ftp_runid != 0 {
            os.write_int64(40, self.ftp_runid)?;
        }
        if self.from_date != 0 {
            os.write_int32(41, self.from_date)?;
        }
        if self.to_date != 0 {
            os.write_int32(42, self.to_date)?;
        }
        if self.total_balance != 0. {
            os.write_double(43, self.total_balance)?;
        }
        if self.total_interest_ftp != 0. {
            os.write_double(44, self.total_interest_ftp)?;
        }
        if self.total_ftp != 0. {
            os.write_double(45, self.total_ftp)?;
        }
        if self.FTP_Rate != 0. {
            os.write_double(46, self.FTP_Rate)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "cust_no",
                    |m: &AccountWithCashflows| &m.cust_no,
                    |m: &mut AccountWithCashflows| &mut m.cust_no,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "reference",
                    |m: &AccountWithCashflows| &m.reference,
                    |m: &mut AccountWithCashflows| &mut m.reference,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "cust_name",
                    |m: &AccountWithCashflows| &m.cust_name,
                    |m: &mut AccountWithCashflows| &mut m.cust_name,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "branch_cd",
                    |m: &AccountWithCashflows| &m.branch_cd,
                    |m: &mut AccountWithCashflows| &mut m.branch_cd,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "norm_int_rt",
                    |m: &AccountWithCashflows| &m.norm_int_rt,
                    |m: &mut AccountWithCashflows| &mut m.norm_int_rt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "acurl_freq",
                    |m: &AccountWithCashflows| &m.acurl_freq,
                    |m: &mut AccountWithCashflows| &mut m.acurl_freq,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "book_dt",
                    |m: &AccountWithCashflows| &m.book_dt,
                    |m: &mut AccountWithCashflows| &mut m.book_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "val_dt",
                    |m: &AccountWithCashflows| &m.val_dt,
                    |m: &mut AccountWithCashflows| &mut m.val_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "mat_dt",
                    |m: &AccountWithCashflows| &m.mat_dt,
                    |m: &mut AccountWithCashflows| &mut m.mat_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "user_def_stats",
                    |m: &AccountWithCashflows| &m.user_def_stats,
                    |m: &mut AccountWithCashflows| &mut m.user_def_stats,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "prod_cd",
                    |m: &AccountWithCashflows| &m.prod_cd,
                    |m: &mut AccountWithCashflows| &mut m.prod_cd,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "gl",
                    |m: &AccountWithCashflows| &m.gl,
                    |m: &mut AccountWithCashflows| &mut m.gl,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "curr",
                    |m: &AccountWithCashflows| &m.curr,
                    |m: &mut AccountWithCashflows| &mut m.curr,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "prin_ost_bal",
                    |m: &AccountWithCashflows| &m.prin_ost_bal,
                    |m: &mut AccountWithCashflows| &mut m.prin_ost_bal,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "spread",
                    |m: &AccountWithCashflows| &m.spread,
                    |m: &mut AccountWithCashflows| &mut m.spread,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "compmis2",
                    |m: &AccountWithCashflows| &m.compmis2,
                    |m: &mut AccountWithCashflows| &mut m.compmis2,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "rt_flag_new",
                    |m: &AccountWithCashflows| &m.rt_flag_new,
                    |m: &mut AccountWithCashflows| &mut m.rt_flag_new,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "rt_cd_new",
                    |m: &AccountWithCashflows| &m.rt_cd_new,
                    |m: &mut AccountWithCashflows| &mut m.rt_cd_new,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "division",
                    |m: &AccountWithCashflows| &m.division,
                    |m: &mut AccountWithCashflows| &mut m.division,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "alm_line",
                    |m: &AccountWithCashflows| &m.alm_line,
                    |m: &mut AccountWithCashflows| &mut m.alm_line,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "ia_llg",
                    |m: &AccountWithCashflows| &m.ia_llg,
                    |m: &mut AccountWithCashflows| &mut m.ia_llg,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "balm_llg",
                    |m: &AccountWithCashflows| &m.balm_llg,
                    |m: &mut AccountWithCashflows| &mut m.balm_llg,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "repricing_freq",
                    |m: &AccountWithCashflows| &m.repricing_freq,
                    |m: &mut AccountWithCashflows| &mut m.repricing_freq,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "lst_repricing_dt",
                    |m: &AccountWithCashflows| &m.lst_repricing_dt,
                    |m: &mut AccountWithCashflows| &mut m.lst_repricing_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "nxt_repricing_dt",
                    |m: &AccountWithCashflows| &m.nxt_repricing_dt,
                    |m: &mut AccountWithCashflows| &mut m.nxt_repricing_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "int_basis",
                    |m: &AccountWithCashflows| &m.int_basis,
                    |m: &mut AccountWithCashflows| &mut m.int_basis,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "cust_typ",
                    |m: &AccountWithCashflows| &m.cust_typ,
                    |m: &mut AccountWithCashflows| &mut m.cust_typ,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "npa_typ",
                    |m: &AccountWithCashflows| &m.npa_typ,
                    |m: &mut AccountWithCashflows| &mut m.npa_typ,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "bmid",
                    |m: &AccountWithCashflows| &m.bmid,
                    |m: &mut AccountWithCashflows| &mut m.bmid,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "compmis1",
                    |m: &AccountWithCashflows| &m.compmis1,
                    |m: &mut AccountWithCashflows| &mut m.compmis1,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "compmis3",
                    |m: &AccountWithCashflows| &m.compmis3,
                    |m: &mut AccountWithCashflows| &mut m.compmis3,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "org_tenor",
                    |m: &AccountWithCashflows| &m.org_tenor,
                    |m: &mut AccountWithCashflows| &mut m.org_tenor,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "resid_tenor",
                    |m: &AccountWithCashflows| &m.resid_tenor,
                    |m: &mut AccountWithCashflows| &mut m.resid_tenor,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "def_ftp_flag",
                    |m: &AccountWithCashflows| &m.def_ftp_flag,
                    |m: &mut AccountWithCashflows| &mut m.def_ftp_flag,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "total_interest_amount",
                    |m: &AccountWithCashflows| &m.total_interest_amount,
                    |m: &mut AccountWithCashflows| &mut m.total_interest_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "total_principal_amount",
                    |m: &AccountWithCashflows| &m.total_principal_amount,
                    |m: &mut AccountWithCashflows| &mut m.total_principal_amount,
                ));
                fields.push(
                    ::protobuf::reflect::accessor::make_repeated_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<Cashflow>,
                    >(
                        "cashflows",
                        |m: &AccountWithCashflows| &m.cashflows,
                        |m: &mut AccountWithCashflows| &mut m.cashflows,
                    ),
                );
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "Method",
                    |m: &AccountWithCashflows| &m.Method,
                    |m: &mut AccountWithCashflows| &mut m.Method,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "BaseCurve",
                    |m: &AccountWithCashflows| &m.BaseCurve,
                    |m: &mut AccountWithCashflows| &mut m.BaseCurve,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "ftp_runid",
                    |m: &AccountWithCashflows| &m.ftp_runid,
                    |m: &mut AccountWithCashflows| &mut m.ftp_runid,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "from_date",
                    |m: &AccountWithCashflows| &m.from_date,
                    |m: &mut AccountWithCashflows| &mut m.from_date,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "to_date",
                    |m: &AccountWithCashflows| &m.to_date,
                    |m: &mut AccountWithCashflows| &mut m.to_date,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "total_balance",
                    |m: &AccountWithCashflows| &m.total_balance,
                    |m: &mut AccountWithCashflows| &mut m.total_balance,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "total_interest_ftp",
                    |m: &AccountWithCashflows| &m.total_interest_ftp,
                    |m: &mut AccountWithCashflows| &mut m.total_interest_ftp,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "total_ftp",
                    |m: &AccountWithCashflows| &m.total_ftp,
                    |m: &mut AccountWithCashflows| &mut m.total_ftp,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "FTP_Rate",
                    |m: &AccountWithCashflows| &m.FTP_Rate,
                    |m: &mut AccountWithCashflows| &mut m.FTP_Rate,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const AccountWithCashflows,
            };
        unsafe { instance.get(AccountWithCashflows::new) }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_cust_no();
        self.clear_reference();
        self.clear_cust_name();
        self.clear_branch_cd();
        self.clear_norm_int_rt();
        self.clear_acurl_freq();
        self.clear_book_dt();
        self.clear_val_dt();
        self.clear_mat_dt();
        self.clear_user_def_stats();
        self.clear_prod_cd();
        self.clear_gl();
        self.clear_curr();
        self.clear_prin_ost_bal();
        self.clear_spread();
        self.clear_compmis2();
        self.clear_rt_flag_new();
        self.clear_rt_cd_new();
        self.clear_division();
        self.clear_alm_line();
        self.clear_ia_llg();
        self.clear_balm_llg();
        self.clear_repricing_freq();
        self.clear_lst_repricing_dt();
        self.clear_nxt_repricing_dt();
        self.clear_int_basis();
        self.clear_cust_typ();
        self.clear_npa_typ();
        self.clear_bmid();
        self.clear_compmis1();
        self.clear_compmis3();
        self.clear_org_tenor();
        self.clear_resid_tenor();
        self.clear_def_ftp_flag();
        self.clear_total_interest_amount();
        self.clear_total_principal_amount();
        self.clear_cashflows();
        self.clear_Method();
        self.clear_BaseCurve();
        self.clear_ftp_runid();
        self.clear_from_date();
        self.clear_to_date();
        self.clear_total_balance();
        self.clear_total_interest_ftp();
        self.clear_total_ftp();
        self.clear_FTP_Rate();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dAccountWithCashflows_ub.proto\"\xe3\x04\n\x08Cashflow\x12'\n\x0fin\
    terest_amount\x18\x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10principa\
    l_amount\x18\x02\x20\x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\
    \x03\x20\x01(\x03R\x04date\x12\x1b\n\tbase_rate\x18\x04\x20\x01(\x01R\
    \x08baseRate\x12(\n\x10base_rate_amount\x18\x05\x20\x01(\x01R\x0ebaseRat\
    eAmount\x12\x1b\n\tadj1_rate\x18\x06\x20\x01(\x01R\x08adj1Rate\x12(\n\
    \x10adj1_rate_amount\x18\x07\x20\x01(\x01R\x0eadj1RateAmount\x12\x1b\n\t\
    adj2_rate\x18\x08\x20\x01(\x01R\x08adj2Rate\x12(\n\x10adj2_rate_amount\
    \x18\t\x20\x01(\x01R\x0eadj2RateAmount\x12\x1b\n\tadj3_rate\x18\n\x20\
    \x01(\x01R\x08adj3Rate\x12(\n\x10adj3_rate_amount\x18\x0b\x20\x01(\x01R\
    \x0eadj3RateAmount\x12\x1b\n\tadj4_rate\x18\x0c\x20\x01(\x01R\x08adj4Rat\
    e\x12(\n\x10adj4_rate_amount\x18\r\x20\x01(\x01R\x0eadj4RateAmount\x12\
    \x1b\n\tadj5_rate\x18\x0e\x20\x01(\x01R\x08adj5Rate\x12(\n\x10adj5_rate_\
    amount\x18\x0f\x20\x01(\x01R\x0eadj5RateAmount\x12\x1b\n\tadj6_rate\x18\
    \x10\x20\x01(\x01R\x08adj6Rate\x12(\n\x10adj6_rate_amount\x18\x11\x20\
    \x01(\x01R\x0eadj6RateAmount\"\x8a\x0b\n\x14AccountWithCashflows\x12\x17\
    \n\x07cust_no\x18\x01\x20\x01(\tR\x06custNo\x12\x1c\n\treference\x18\x02\
    \x20\x01(\tR\treference\x12\x1b\n\tcust_name\x18\x03\x20\x01(\tR\x08cust\
    Name\x12\x1b\n\tbranch_cd\x18\x04\x20\x01(\tR\x08branchCd\x12\x1e\n\x0bn\
    orm_int_rt\x18\x05\x20\x01(\x01R\tnormIntRt\x12\x1d\n\nacurl_freq\x18\
    \x06\x20\x01(\tR\tacurlFreq\x12\x17\n\x07book_dt\x18\x07\x20\x01(\x03R\
    \x06bookDt\x12\x15\n\x06val_dt\x18\x08\x20\x01(\x03R\x05valDt\x12\x15\n\
    \x06mat_dt\x18\t\x20\x01(\x03R\x05matDt\x12$\n\x0euser_def_stats\x18\n\
    \x20\x01(\tR\x0cuserDefStats\x12\x17\n\x07prod_cd\x18\x0b\x20\x01(\tR\
    \x06prodCd\x12\x0e\n\x02gl\x18\x0c\x20\x01(\tR\x02gl\x12\x12\n\x04curr\
    \x18\r\x20\x01(\tR\x04curr\x12\x20\n\x0cprin_ost_bal\x18\x0e\x20\x01(\
    \x01R\nprinOstBal\x12\x16\n\x06spread\x18\x0f\x20\x01(\x01R\x06spread\
    \x12\x1a\n\x08compmis2\x18\x10\x20\x01(\x03R\x08compmis2\x12\x1e\n\x0brt\
    _flag_new\x18\x11\x20\x01(\tR\trtFlagNew\x12\x1a\n\trt_cd_new\x18\x12\
    \x20\x01(\tR\x07rtCdNew\x12\x1a\n\x08division\x18\x13\x20\x01(\tR\x08div\
    ision\x12\x19\n\x08alm_line\x18\x14\x20\x01(\tR\x07almLine\x12\x15\n\x06\
    ia_llg\x18\x15\x20\x01(\tR\x05iaLlg\x12\x19\n\x08balm_llg\x18\x16\x20\
    \x01(\tR\x07balmLlg\x12%\n\x0erepricing_freq\x18\x17\x20\x01(\tR\rrepric\
    ingFreq\x12(\n\x10lst_repricing_dt\x18\x18\x20\x01(\x03R\x0elstRepricing\
    Dt\x12(\n\x10nxt_repricing_dt\x18\x19\x20\x01(\x03R\x0enxtRepricingDt\
    \x12\x1b\n\tint_basis\x18\x1a\x20\x01(\tR\x08intBasis\x12\x19\n\x08cust_\
    typ\x18\x1b\x20\x01(\tR\x07custTyp\x12\x17\n\x07npa_typ\x18\x1c\x20\x01(\
    \tR\x06npaTyp\x12\x12\n\x04bmid\x18\x1d\x20\x01(\tR\x04bmid\x12\x1a\n\
    \x08compmis1\x18\x1e\x20\x01(\x03R\x08compmis1\x12\x1a\n\x08compmis3\x18\
    \x1f\x20\x01(\x03R\x08compmis3\x12\x1b\n\torg_tenor\x18\x20\x20\x01(\x03\
    R\x08orgTenor\x12\x1f\n\x0bresid_tenor\x18!\x20\x01(\x03R\nresidTenor\
    \x12\x20\n\x0cdef_ftp_flag\x18\"\x20\x01(\tR\ndefFtpFlag\x122\n\x15total\
    _interest_amount\x18#\x20\x01(\x01R\x13totalInterestAmount\x124\n\x16tot\
    al_principal_amount\x18$\x20\x01(\x01R\x14totalPrincipalAmount\x12'\n\tc\
    ashflows\x18%\x20\x03(\x0b2\t.CashflowR\tcashflows\x12\x16\n\x06Method\
    \x18&\x20\x01(\x05R\x06Method\x12\x1c\n\tBaseCurve\x18'\x20\x01(\x05R\tB\
    aseCurve\x12\x1b\n\tftp_runid\x18(\x20\x01(\x03R\x08ftpRunid\x12\x1b\n\t\
    from_date\x18)\x20\x01(\x05R\x08fromDate\x12\x17\n\x07to_date\x18*\x20\
    \x01(\x05R\x06toDate\x12#\n\rtotal_balance\x18+\x20\x01(\x01R\x0ctotalBa\
    lance\x12,\n\x12total_interest_ftp\x18,\x20\x01(\x01R\x10totalInterestFt\
    p\x12\x1b\n\ttotal_ftp\x18-\x20\x01(\x01R\x08totalFtp\x12\x19\n\x08FTP_R\
    ate\x18.\x20\x01(\x01R\x07FTPRateb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<
    ::protobuf::descriptor::FileDescriptorProto,
> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe { file_descriptor_proto_lazy.get(|| parse_descriptor_proto()) }
}
