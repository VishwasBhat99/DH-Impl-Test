// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub cf_date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double prin_amt = 2;

    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }

    // int64 cf_date = 3;

    pub fn clear_cf_date(&mut self) {
        self.cf_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_cf_date(&mut self, v: i64) {
        self.cf_date = v;
    }

    pub fn get_cf_date(&self) -> i64 {
        self.cf_date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cf_date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.cf_date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cf_date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.cf_date != 0 {
            os.write_int64(3, self.cf_date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cf_date",
                    |m: &Cashflow| { &m.cf_date },
                    |m: &mut Cashflow| { &mut m.cf_date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_int_amt();
        self.clear_prin_amt();
        self.clear_cf_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub org: ::std::string::String,
    pub logo: ::std::string::String,
    pub acct: ::std::string::String,
    pub loan_nbr: ::std::string::String,
    pub tenure: ::std::string::String,
    pub prin_amt_1: f64,
    pub int_amt_1: f64,
    pub emi_amt_1: f64,
    pub emi_date_1: i64,
    pub prin_amt_2: f64,
    pub int_amt_2: f64,
    pub emi_amt_2: f64,
    pub emi_date_2: i64,
    pub prin_amt_3: f64,
    pub int_amt_3: f64,
    pub emi_amt_3: f64,
    pub emi_date_3: i64,
    pub prin_amt_4: f64,
    pub int_amt_4: f64,
    pub emi_amt_4: f64,
    pub emi_date_4: i64,
    pub prin_amt_5: f64,
    pub int_amt_5: f64,
    pub emi_amt_5: f64,
    pub emi_date_5: i64,
    pub prin_amt_6: f64,
    pub int_amt_6: f64,
    pub emi_amt_6: f64,
    pub emi_date_6: i64,
    pub prin_amt_7: f64,
    pub int_amt_7: f64,
    pub emi_amt_7: f64,
    pub emi_date_7: i64,
    pub prin_amt_8: f64,
    pub int_amt_8: f64,
    pub emi_amt_8: f64,
    pub emi_date_8: i64,
    pub prin_amt_9: f64,
    pub int_amt_9: f64,
    pub emi_amt_9: f64,
    pub emi_date_9: i64,
    pub prin_amt_10: f64,
    pub int_amt_10: f64,
    pub emi_amt_10: f64,
    pub emi_date_10: i64,
    pub prin_amt_11: f64,
    pub int_amt_11: f64,
    pub emi_amt_11: f64,
    pub emi_date_11: i64,
    pub prin_amt_12: f64,
    pub int_amt_12: f64,
    pub emi_amt_12: f64,
    pub emi_date_12: i64,
    pub prin_amt_13: f64,
    pub int_amt_13: f64,
    pub emi_amt_13: f64,
    pub emi_date_13: i64,
    pub prin_amt_14: f64,
    pub int_amt_14: f64,
    pub emi_amt_14: f64,
    pub emi_date_14: i64,
    pub prin_amt_15: f64,
    pub int_amt_15: f64,
    pub emi_amt_15: f64,
    pub emi_date_15: i64,
    pub prin_amt_16: f64,
    pub int_amt_16: f64,
    pub emi_amt_16: f64,
    pub emi_date_16: i64,
    pub prin_amt_17: f64,
    pub int_amt_17: f64,
    pub emi_amt_17: f64,
    pub emi_date_17: i64,
    pub prin_amt_18: f64,
    pub int_amt_18: f64,
    pub emi_amt_18: f64,
    pub emi_date_18: i64,
    pub prin_amt_19: f64,
    pub int_amt_19: f64,
    pub emi_amt_19: f64,
    pub emi_date_19: i64,
    pub prin_amt_20: f64,
    pub int_amt_20: f64,
    pub emi_amt_20: f64,
    pub emi_date_20: i64,
    pub prin_amt_21: f64,
    pub int_amt_21: f64,
    pub emi_amt_21: f64,
    pub emi_date_21: i64,
    pub prin_amt_22: f64,
    pub int_amt_22: f64,
    pub emi_amt_22: f64,
    pub emi_date_22: i64,
    pub prin_amt_23: f64,
    pub int_amt_23: f64,
    pub emi_amt_23: f64,
    pub emi_date_23: i64,
    pub prin_amt_24: f64,
    pub int_amt_24: f64,
    pub emi_amt_24: f64,
    pub emi_date_24: i64,
    pub prin_amt_25: f64,
    pub int_amt_25: f64,
    pub emi_amt_25: f64,
    pub emi_date_25: i64,
    pub prin_amt_26: f64,
    pub int_amt_26: f64,
    pub emi_amt_26: f64,
    pub emi_date_26: i64,
    pub prin_amt_27: f64,
    pub int_amt_27: f64,
    pub emi_amt_27: f64,
    pub emi_date_27: i64,
    pub prin_amt_28: f64,
    pub int_amt_28: f64,
    pub emi_amt_28: f64,
    pub emi_date_28: i64,
    pub prin_amt_29: f64,
    pub int_amt_29: f64,
    pub emi_amt_29: f64,
    pub emi_date_29: i64,
    pub prin_amt_30: f64,
    pub int_amt_30: f64,
    pub emi_amt_30: f64,
    pub emi_date_30: i64,
    pub prin_amt_31: f64,
    pub int_amt_31: f64,
    pub emi_amt_31: f64,
    pub emi_date_31: i64,
    pub prin_amt_32: f64,
    pub int_amt_32: f64,
    pub emi_amt_32: f64,
    pub emi_date_32: i64,
    pub prin_amt_33: f64,
    pub int_amt_33: f64,
    pub emi_amt_33: f64,
    pub emi_date_33: i64,
    pub prin_amt_34: f64,
    pub int_amt_34: f64,
    pub emi_amt_34: f64,
    pub emi_date_34: i64,
    pub prin_amt_35: f64,
    pub int_amt_35: f64,
    pub emi_amt_35: f64,
    pub emi_date_35: i64,
    pub prin_amt_36: f64,
    pub int_amt_36: f64,
    pub emi_amt_36: f64,
    pub emi_date_36: i64,
    pub prin_amt_37: f64,
    pub int_amt_37: f64,
    pub emi_amt_37: f64,
    pub emi_date_37: i64,
    pub prin_amt_38: f64,
    pub int_amt_38: f64,
    pub emi_amt_38: f64,
    pub emi_date_38: i64,
    pub prin_amt_39: f64,
    pub int_amt_39: f64,
    pub emi_amt_39: f64,
    pub emi_date_39: i64,
    pub prin_amt_40: f64,
    pub int_amt_40: f64,
    pub emi_amt_40: f64,
    pub emi_date_40: i64,
    pub prin_amt_41: f64,
    pub int_amt_41: f64,
    pub emi_amt_41: f64,
    pub emi_date_41: i64,
    pub prin_amt_42: f64,
    pub int_amt_42: f64,
    pub emi_amt_42: f64,
    pub emi_date_42: i64,
    pub prin_amt_43: f64,
    pub int_amt_43: f64,
    pub emi_amt_43: f64,
    pub emi_date_43: i64,
    pub prin_amt_44: f64,
    pub int_amt_44: f64,
    pub emi_amt_44: f64,
    pub emi_date_44: i64,
    pub prin_amt_45: f64,
    pub int_amt_45: f64,
    pub emi_amt_45: f64,
    pub emi_date_45: i64,
    pub prin_amt_46: f64,
    pub int_amt_46: f64,
    pub emi_amt_46: f64,
    pub emi_date_46: i64,
    pub prin_amt_47: f64,
    pub int_amt_47: f64,
    pub emi_amt_47: f64,
    pub emi_date_47: i64,
    pub prin_amt_48: f64,
    pub int_amt_48: f64,
    pub emi_amt_48: f64,
    pub emi_date_48: i64,
    pub prin_amt_49: f64,
    pub int_amt_49: f64,
    pub emi_amt_49: f64,
    pub emi_date_49: i64,
    pub prin_amt_50: f64,
    pub int_amt_50: f64,
    pub emi_amt_50: f64,
    pub emi_date_50: i64,
    pub prin_amt_51: f64,
    pub int_amt_51: f64,
    pub emi_amt_51: f64,
    pub emi_date_51: i64,
    pub prin_amt_52: f64,
    pub int_amt_52: f64,
    pub emi_amt_52: f64,
    pub emi_date_52: i64,
    pub prin_amt_53: f64,
    pub int_amt_53: f64,
    pub emi_amt_53: f64,
    pub emi_date_53: i64,
    pub prin_amt_54: f64,
    pub int_amt_54: f64,
    pub emi_amt_54: f64,
    pub emi_date_54: i64,
    pub prin_amt_55: f64,
    pub int_amt_55: f64,
    pub emi_amt_55: f64,
    pub emi_date_55: i64,
    pub prin_amt_56: f64,
    pub int_amt_56: f64,
    pub emi_amt_56: f64,
    pub emi_date_56: i64,
    pub prin_amt_57: f64,
    pub int_amt_57: f64,
    pub emi_amt_57: f64,
    pub emi_date_57: i64,
    pub prin_amt_58: f64,
    pub int_amt_58: f64,
    pub emi_amt_58: f64,
    pub emi_date_58: i64,
    pub prin_amt_59: f64,
    pub int_amt_59: f64,
    pub emi_amt_59: f64,
    pub emi_date_59: i64,
    pub prin_amt_60: f64,
    pub int_amt_60: f64,
    pub emi_amt_60: f64,
    pub emi_date_60: i64,
    pub prin_amt_61: f64,
    pub int_amt_61: f64,
    pub emi_amt_61: f64,
    pub emi_date_61: i64,
    pub prin_amt_62: f64,
    pub int_amt_62: f64,
    pub emi_amt_62: f64,
    pub emi_date_62: i64,
    pub prin_amt_63: f64,
    pub int_amt_63: f64,
    pub emi_amt_63: f64,
    pub emi_date_63: i64,
    pub prin_amt_64: f64,
    pub int_amt_64: f64,
    pub emi_amt_64: f64,
    pub emi_date_64: i64,
    pub prin_amt_65: f64,
    pub int_amt_65: f64,
    pub emi_amt_65: f64,
    pub emi_date_65: i64,
    pub prin_amt_66: f64,
    pub int_amt_66: f64,
    pub emi_amt_66: f64,
    pub emi_date_66: i64,
    pub prin_amt_67: f64,
    pub int_amt_67: f64,
    pub emi_amt_67: f64,
    pub emi_date_67: i64,
    pub prin_amt_68: f64,
    pub int_amt_68: f64,
    pub emi_amt_68: f64,
    pub emi_date_68: i64,
    pub prin_amt_69: f64,
    pub int_amt_69: f64,
    pub emi_amt_69: f64,
    pub emi_date_69: i64,
    pub prin_amt_70: f64,
    pub int_amt_70: f64,
    pub emi_amt_70: f64,
    pub emi_date_70: i64,
    pub prin_amt_71: f64,
    pub int_amt_71: f64,
    pub emi_amt_71: f64,
    pub emi_date_71: i64,
    pub prin_amt_72: f64,
    pub int_amt_72: f64,
    pub emi_amt_72: f64,
    pub emi_date_72: i64,
    pub prin_amt_73: f64,
    pub int_amt_73: f64,
    pub emi_amt_73: f64,
    pub emi_date_73: i64,
    pub prin_amt_74: f64,
    pub int_amt_74: f64,
    pub emi_amt_74: f64,
    pub emi_date_74: i64,
    pub prin_amt_75: f64,
    pub int_amt_75: f64,
    pub emi_amt_75: f64,
    pub emi_date_75: i64,
    pub prin_amt_76: f64,
    pub int_amt_76: f64,
    pub emi_amt_76: f64,
    pub emi_date_76: i64,
    pub prin_amt_77: f64,
    pub int_amt_77: f64,
    pub emi_amt_77: f64,
    pub emi_date_77: i64,
    pub prin_amt_78: f64,
    pub int_amt_78: f64,
    pub emi_amt_78: f64,
    pub emi_date_78: i64,
    pub prin_amt_79: f64,
    pub int_amt_79: f64,
    pub emi_amt_79: f64,
    pub emi_date_79: i64,
    pub prin_amt_80: f64,
    pub int_amt_80: f64,
    pub emi_amt_80: f64,
    pub emi_date_80: i64,
    pub prin_amt_81: f64,
    pub int_amt_81: f64,
    pub emi_amt_81: f64,
    pub emi_date_81: i64,
    pub prin_amt_82: f64,
    pub int_amt_82: f64,
    pub emi_amt_82: f64,
    pub emi_date_82: i64,
    pub prin_amt_83: f64,
    pub int_amt_83: f64,
    pub emi_amt_83: f64,
    pub emi_date_83: i64,
    pub prin_amt_84: f64,
    pub int_amt_84: f64,
    pub emi_amt_84: f64,
    pub emi_date_84: i64,
    pub prin_amt_85: f64,
    pub int_amt_85: f64,
    pub emi_amt_85: f64,
    pub emi_date_85: i64,
    pub prin_amt_86: f64,
    pub int_amt_86: f64,
    pub emi_amt_86: f64,
    pub emi_date_86: i64,
    pub prin_amt_87: f64,
    pub int_amt_87: f64,
    pub emi_amt_87: f64,
    pub emi_date_87: i64,
    pub prin_amt_88: f64,
    pub int_amt_88: f64,
    pub emi_amt_88: f64,
    pub emi_date_88: i64,
    pub prin_amt_89: f64,
    pub int_amt_89: f64,
    pub emi_amt_89: f64,
    pub emi_date_89: i64,
    pub prin_amt_90: f64,
    pub int_amt_90: f64,
    pub emi_amt_90: f64,
    pub emi_date_90: i64,
    pub prin_amt_91: f64,
    pub int_amt_91: f64,
    pub emi_amt_91: f64,
    pub emi_date_91: i64,
    pub prin_amt_92: f64,
    pub int_amt_92: f64,
    pub emi_amt_92: f64,
    pub emi_date_92: i64,
    pub prin_amt_93: f64,
    pub int_amt_93: f64,
    pub emi_amt_93: f64,
    pub emi_date_93: i64,
    pub prin_amt_94: f64,
    pub int_amt_94: f64,
    pub emi_amt_94: f64,
    pub emi_date_94: i64,
    pub prin_amt_95: f64,
    pub int_amt_95: f64,
    pub emi_amt_95: f64,
    pub emi_date_95: i64,
    pub prin_amt_96: f64,
    pub int_amt_96: f64,
    pub emi_amt_96: f64,
    pub emi_date_96: i64,
    pub prin_amt_97: f64,
    pub int_amt_97: f64,
    pub emi_amt_97: f64,
    pub emi_date_97: i64,
    pub prin_amt_98: f64,
    pub int_amt_98: f64,
    pub emi_amt_98: f64,
    pub emi_date_98: i64,
    pub prin_amt_99: f64,
    pub int_amt_99: f64,
    pub emi_amt_99: f64,
    pub emi_date_99: i64,
    pub prin_amt_100: f64,
    pub int_amt_100: f64,
    pub emi_amt_100: f64,
    pub emi_date_100: i64,
    pub prin_amt_101: f64,
    pub int_amt_101: f64,
    pub emi_amt_101: f64,
    pub emi_date_101: i64,
    pub prin_amt_102: f64,
    pub int_amt_102: f64,
    pub emi_amt_102: f64,
    pub emi_date_102: i64,
    pub prin_amt_103: f64,
    pub int_amt_103: f64,
    pub emi_amt_103: f64,
    pub emi_date_103: i64,
    pub prin_amt_104: f64,
    pub int_amt_104: f64,
    pub emi_amt_104: f64,
    pub emi_date_104: i64,
    pub prin_amt_105: f64,
    pub int_amt_105: f64,
    pub emi_amt_105: f64,
    pub emi_date_105: i64,
    pub prin_amt_106: f64,
    pub int_amt_106: f64,
    pub emi_amt_106: f64,
    pub emi_date_106: i64,
    pub prin_amt_107: f64,
    pub int_amt_107: f64,
    pub emi_amt_107: f64,
    pub emi_date_107: i64,
    pub prin_amt_108: f64,
    pub int_amt_108: f64,
    pub emi_amt_108: f64,
    pub emi_date_108: i64,
    pub prin_amt_109: f64,
    pub int_amt_109: f64,
    pub emi_amt_109: f64,
    pub emi_date_109: i64,
    pub prin_amt_110: f64,
    pub int_amt_110: f64,
    pub emi_amt_110: f64,
    pub emi_date_110: i64,
    pub prin_amt_111: f64,
    pub int_amt_111: f64,
    pub emi_amt_111: f64,
    pub emi_date_111: i64,
    pub prin_amt_112: f64,
    pub int_amt_112: f64,
    pub emi_amt_112: f64,
    pub emi_date_112: i64,
    pub prin_amt_113: f64,
    pub int_amt_113: f64,
    pub emi_amt_113: f64,
    pub emi_date_113: i64,
    pub prin_amt_114: f64,
    pub int_amt_114: f64,
    pub emi_amt_114: f64,
    pub emi_date_114: i64,
    pub prin_amt_115: f64,
    pub int_amt_115: f64,
    pub emi_amt_115: f64,
    pub emi_date_115: i64,
    pub prin_amt_116: f64,
    pub int_amt_116: f64,
    pub emi_amt_116: f64,
    pub emi_date_116: i64,
    pub prin_amt_117: f64,
    pub int_amt_117: f64,
    pub emi_amt_117: f64,
    pub emi_date_117: i64,
    pub prin_amt_118: f64,
    pub int_amt_118: f64,
    pub emi_amt_118: f64,
    pub emi_date_118: i64,
    pub prin_amt_119: f64,
    pub int_amt_119: f64,
    pub emi_amt_119: f64,
    pub emi_date_119: i64,
    pub prin_amt_120: f64,
    pub int_amt_120: f64,
    pub emi_amt_120: f64,
    pub emi_date_120: i64,
    pub d_f_coc_emi_date_loan_booked: i64,
    pub v_f_coc_emi_loan_src: ::std::string::String,
    pub v_f_coc_emi_tenure: ::std::string::String,
    pub n_f_coc_emi_loan_amount: f64,
    pub v_f_coc_emi_loan_nbr: ::std::string::String,
    pub n_f_coc_emi_out_prin: f64,
    pub n_f_coc_emi_out_int: f64,
    pub total_outstanding: f64,
    pub v_f_coc_emi_rate_of_int: f64,
    pub n_f_coc_emi_org: ::std::string::String,
    pub v_f_coc_emi_chg_type: ::std::string::String,
    pub filler: i64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string org = 1;

    pub fn clear_org(&mut self) {
        self.org.clear();
    }

    // Param is passed by value, moved
    pub fn set_org(&mut self, v: ::std::string::String) {
        self.org = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_org(&mut self) -> &mut ::std::string::String {
        &mut self.org
    }

    // Take field
    pub fn take_org(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.org, ::std::string::String::new())
    }

    pub fn get_org(&self) -> &str {
        &self.org
    }

    // string logo = 2;

    pub fn clear_logo(&mut self) {
        self.logo.clear();
    }

    // Param is passed by value, moved
    pub fn set_logo(&mut self, v: ::std::string::String) {
        self.logo = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_logo(&mut self) -> &mut ::std::string::String {
        &mut self.logo
    }

    // Take field
    pub fn take_logo(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.logo, ::std::string::String::new())
    }

    pub fn get_logo(&self) -> &str {
        &self.logo
    }

    // string acct = 3;

    pub fn clear_acct(&mut self) {
        self.acct.clear();
    }

    // Param is passed by value, moved
    pub fn set_acct(&mut self, v: ::std::string::String) {
        self.acct = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acct(&mut self) -> &mut ::std::string::String {
        &mut self.acct
    }

    // Take field
    pub fn take_acct(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acct, ::std::string::String::new())
    }

    pub fn get_acct(&self) -> &str {
        &self.acct
    }

    // string loan_nbr = 4;

    pub fn clear_loan_nbr(&mut self) {
        self.loan_nbr.clear();
    }

    // Param is passed by value, moved
    pub fn set_loan_nbr(&mut self, v: ::std::string::String) {
        self.loan_nbr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_loan_nbr(&mut self) -> &mut ::std::string::String {
        &mut self.loan_nbr
    }

    // Take field
    pub fn take_loan_nbr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.loan_nbr, ::std::string::String::new())
    }

    pub fn get_loan_nbr(&self) -> &str {
        &self.loan_nbr
    }

    // string tenure = 5;

    pub fn clear_tenure(&mut self) {
        self.tenure.clear();
    }

    // Param is passed by value, moved
    pub fn set_tenure(&mut self, v: ::std::string::String) {
        self.tenure = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tenure(&mut self) -> &mut ::std::string::String {
        &mut self.tenure
    }

    // Take field
    pub fn take_tenure(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tenure, ::std::string::String::new())
    }

    pub fn get_tenure(&self) -> &str {
        &self.tenure
    }

    // double prin_amt_1 = 6;

    pub fn clear_prin_amt_1(&mut self) {
        self.prin_amt_1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_1(&mut self, v: f64) {
        self.prin_amt_1 = v;
    }

    pub fn get_prin_amt_1(&self) -> f64 {
        self.prin_amt_1
    }

    // double int_amt_1 = 7;

    pub fn clear_int_amt_1(&mut self) {
        self.int_amt_1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_1(&mut self, v: f64) {
        self.int_amt_1 = v;
    }

    pub fn get_int_amt_1(&self) -> f64 {
        self.int_amt_1
    }

    // double emi_amt_1 = 8;

    pub fn clear_emi_amt_1(&mut self) {
        self.emi_amt_1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_1(&mut self, v: f64) {
        self.emi_amt_1 = v;
    }

    pub fn get_emi_amt_1(&self) -> f64 {
        self.emi_amt_1
    }

    // int64 emi_date_1 = 9;

    pub fn clear_emi_date_1(&mut self) {
        self.emi_date_1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_1(&mut self, v: i64) {
        self.emi_date_1 = v;
    }

    pub fn get_emi_date_1(&self) -> i64 {
        self.emi_date_1
    }

    // double prin_amt_2 = 10;

    pub fn clear_prin_amt_2(&mut self) {
        self.prin_amt_2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_2(&mut self, v: f64) {
        self.prin_amt_2 = v;
    }

    pub fn get_prin_amt_2(&self) -> f64 {
        self.prin_amt_2
    }

    // double int_amt_2 = 11;

    pub fn clear_int_amt_2(&mut self) {
        self.int_amt_2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_2(&mut self, v: f64) {
        self.int_amt_2 = v;
    }

    pub fn get_int_amt_2(&self) -> f64 {
        self.int_amt_2
    }

    // double emi_amt_2 = 12;

    pub fn clear_emi_amt_2(&mut self) {
        self.emi_amt_2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_2(&mut self, v: f64) {
        self.emi_amt_2 = v;
    }

    pub fn get_emi_amt_2(&self) -> f64 {
        self.emi_amt_2
    }

    // int64 emi_date_2 = 13;

    pub fn clear_emi_date_2(&mut self) {
        self.emi_date_2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_2(&mut self, v: i64) {
        self.emi_date_2 = v;
    }

    pub fn get_emi_date_2(&self) -> i64 {
        self.emi_date_2
    }

    // double prin_amt_3 = 14;

    pub fn clear_prin_amt_3(&mut self) {
        self.prin_amt_3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_3(&mut self, v: f64) {
        self.prin_amt_3 = v;
    }

    pub fn get_prin_amt_3(&self) -> f64 {
        self.prin_amt_3
    }

    // double int_amt_3 = 15;

    pub fn clear_int_amt_3(&mut self) {
        self.int_amt_3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_3(&mut self, v: f64) {
        self.int_amt_3 = v;
    }

    pub fn get_int_amt_3(&self) -> f64 {
        self.int_amt_3
    }

    // double emi_amt_3 = 16;

    pub fn clear_emi_amt_3(&mut self) {
        self.emi_amt_3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_3(&mut self, v: f64) {
        self.emi_amt_3 = v;
    }

    pub fn get_emi_amt_3(&self) -> f64 {
        self.emi_amt_3
    }

    // int64 emi_date_3 = 17;
    
    pub fn clear_emi_date_3(&mut self) {
        self.emi_date_3 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_3(&mut self, v: i64) {
        self.emi_date_3 = v;
    }

    pub fn get_emi_date_3(&self) -> i64 {
        self.emi_date_3
    }

    // double prin_amt_4 = 18;

    pub fn clear_prin_amt_4(&mut self) {
        self.prin_amt_4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_4(&mut self, v: f64) {
        self.prin_amt_4 = v;
    }

    pub fn get_prin_amt_4(&self) -> f64 {
        self.prin_amt_4
    }

    // double int_amt_4 = 19;

    pub fn clear_int_amt_4(&mut self) {
        self.int_amt_4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_4(&mut self, v: f64) {
        self.int_amt_4 = v;
    }

    pub fn get_int_amt_4(&self) -> f64 {
        self.int_amt_4
    }

    // double emi_amt_4 = 20;

    pub fn clear_emi_amt_4(&mut self) {
        self.emi_amt_4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_4(&mut self, v: f64) {
        self.emi_amt_4 = v;
    }

    pub fn get_emi_amt_4(&self) -> f64 {
        self.emi_amt_4
    }

    // int64 emi_date_4 = 21;

    pub fn clear_emi_date_4(&mut self) {
        self.emi_date_4 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_4(&mut self, v: i64) {
        self.emi_date_4 = v;
    }

    pub fn get_emi_date_4(&self) -> i64 {
        self.emi_date_4
    }

    // double prin_amt_5 = 22;

    pub fn clear_prin_amt_5(&mut self) {
        self.prin_amt_5 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_5(&mut self, v: f64) {
        self.prin_amt_5 = v;
    }

    pub fn get_prin_amt_5(&self) -> f64 {
        self.prin_amt_5
    }

    // double int_amt_5 = 23;

    pub fn clear_int_amt_5(&mut self) {
        self.int_amt_5 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_5(&mut self, v: f64) {
        self.int_amt_5 = v;
    }

    pub fn get_int_amt_5(&self) -> f64 {
        self.int_amt_5
    }

    // double emi_amt_5 = 24;

    pub fn clear_emi_amt_5(&mut self) {
        self.emi_amt_5 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_5(&mut self, v: f64) {
        self.emi_amt_5 = v;
    }

    pub fn get_emi_amt_5(&self) -> f64 {
        self.emi_amt_5
    }

    // int64 emi_date_5 = 25;

    pub fn clear_emi_date_5(&mut self) {
        self.emi_date_5 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_5(&mut self, v: i64) {
        self.emi_date_5 = v;
    }

    pub fn get_emi_date_5(&self) -> i64 {
        self.emi_date_5
    }

    // double prin_amt_6 = 26;

    pub fn clear_prin_amt_6(&mut self) {
        self.prin_amt_6 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_6(&mut self, v: f64) {
        self.prin_amt_6 = v;
    }

    pub fn get_prin_amt_6(&self) -> f64 {
        self.prin_amt_6
    }

    // double int_amt_6 = 27;

    pub fn clear_int_amt_6(&mut self) {
        self.int_amt_6 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_6(&mut self, v: f64) {
        self.int_amt_6 = v;
    }

    pub fn get_int_amt_6(&self) -> f64 {
        self.int_amt_6
    }

    // double emi_amt_6 = 28;

    pub fn clear_emi_amt_6(&mut self) {
        self.emi_amt_6 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_6(&mut self, v: f64) {
        self.emi_amt_6 = v;
    }

    pub fn get_emi_amt_6(&self) -> f64 {
        self.emi_amt_6
    }

    // int64 emi_date_6 = 29;

    pub fn clear_emi_date_6(&mut self) {
        self.emi_date_6 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_6(&mut self, v: i64) {
        self.emi_date_6 = v;
    }

    pub fn get_emi_date_6(&self) -> i64 {
        self.emi_date_6
    }

    // double prin_amt_7 = 30;

    pub fn clear_prin_amt_7(&mut self) {
        self.prin_amt_7 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_7(&mut self, v: f64) {
        self.prin_amt_7 = v;
    }

    pub fn get_prin_amt_7(&self) -> f64 {
        self.prin_amt_7
    }

    // double int_amt_7 = 31;

    pub fn clear_int_amt_7(&mut self) {
        self.int_amt_7 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_7(&mut self, v: f64) {
        self.int_amt_7 = v;
    }

    pub fn get_int_amt_7(&self) -> f64 {
        self.int_amt_7
    }

    // double emi_amt_7 = 32;

    pub fn clear_emi_amt_7(&mut self) {
        self.emi_amt_7 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_7(&mut self, v: f64) {
        self.emi_amt_7 = v;
    }

    pub fn get_emi_amt_7(&self) -> f64 {
        self.emi_amt_7
    }

    // int64 emi_date_7 = 33;

    pub fn clear_emi_date_7(&mut self) {
        self.emi_date_7 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_7(&mut self, v: i64) {
        self.emi_date_7 = v;
    }

    pub fn get_emi_date_7(&self) -> i64 {
        self.emi_date_7
    }

    // double prin_amt_8 = 34;

    pub fn clear_prin_amt_8(&mut self) {
        self.prin_amt_8 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_8(&mut self, v: f64) {
        self.prin_amt_8 = v;
    }

    pub fn get_prin_amt_8(&self) -> f64 {
        self.prin_amt_8
    }

    // double int_amt_8 = 35;

    pub fn clear_int_amt_8(&mut self) {
        self.int_amt_8 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_8(&mut self, v: f64) {
        self.int_amt_8 = v;
    }

    pub fn get_int_amt_8(&self) -> f64 {
        self.int_amt_8
    }

    // double emi_amt_8 = 36;

    pub fn clear_emi_amt_8(&mut self) {
        self.emi_amt_8 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_8(&mut self, v: f64) {
        self.emi_amt_8 = v;
    }

    pub fn get_emi_amt_8(&self) -> f64 {
        self.emi_amt_8
    }

    // int64 emi_date_8 = 37;

    pub fn clear_emi_date_8(&mut self) {
        self.emi_date_8 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_8(&mut self, v: i64) {
        self.emi_date_8 = v;
    }

    pub fn get_emi_date_8(&self) -> i64 {
        self.emi_date_8
    }

    // double prin_amt_9 = 38;

    pub fn clear_prin_amt_9(&mut self) {
        self.prin_amt_9 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_9(&mut self, v: f64) {
        self.prin_amt_9 = v;
    }

    pub fn get_prin_amt_9(&self) -> f64 {
        self.prin_amt_9
    }

    // double int_amt_9 = 39;

    pub fn clear_int_amt_9(&mut self) {
        self.int_amt_9 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_9(&mut self, v: f64) {
        self.int_amt_9 = v;
    }

    pub fn get_int_amt_9(&self) -> f64 {
        self.int_amt_9
    }

    // double emi_amt_9 = 40;

    pub fn clear_emi_amt_9(&mut self) {
        self.emi_amt_9 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_9(&mut self, v: f64) {
        self.emi_amt_9 = v;
    }

    pub fn get_emi_amt_9(&self) -> f64 {
        self.emi_amt_9
    }

    // int64 emi_date_9 = 41;

    pub fn clear_emi_date_9(&mut self) {
        self.emi_date_9 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_9(&mut self, v: i64) {
        self.emi_date_9 = v;
    }

    pub fn get_emi_date_9(&self) -> i64 {
        self.emi_date_9
    }

    // double prin_amt_10 = 42;

    pub fn clear_prin_amt_10(&mut self) {
        self.prin_amt_10 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_10(&mut self, v: f64) {
        self.prin_amt_10 = v;
    }

    pub fn get_prin_amt_10(&self) -> f64 {
        self.prin_amt_10
    }

    // double int_amt_10 = 43;

    pub fn clear_int_amt_10(&mut self) {
        self.int_amt_10 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_10(&mut self, v: f64) {
        self.int_amt_10 = v;
    }

    pub fn get_int_amt_10(&self) -> f64 {
        self.int_amt_10
    }

    // double emi_amt_10 = 44;

    pub fn clear_emi_amt_10(&mut self) {
        self.emi_amt_10 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_10(&mut self, v: f64) {
        self.emi_amt_10 = v;
    }

    pub fn get_emi_amt_10(&self) -> f64 {
        self.emi_amt_10
    }

    // int64 emi_date_10 = 45;

    pub fn clear_emi_date_10(&mut self) {
        self.emi_date_10 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_10(&mut self, v: i64) {
        self.emi_date_10 = v;
    }

    pub fn get_emi_date_10(&self) -> i64 {
        self.emi_date_10
    }

    // double prin_amt_11 = 46;

    pub fn clear_prin_amt_11(&mut self) {
        self.prin_amt_11 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_11(&mut self, v: f64) {
        self.prin_amt_11 = v;
    }

    pub fn get_prin_amt_11(&self) -> f64 {
        self.prin_amt_11
    }

    // double int_amt_11 = 47;

    pub fn clear_int_amt_11(&mut self) {
        self.int_amt_11 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_11(&mut self, v: f64) {
        self.int_amt_11 = v;
    }

    pub fn get_int_amt_11(&self) -> f64 {
        self.int_amt_11
    }

    // double emi_amt_11 = 48;

    pub fn clear_emi_amt_11(&mut self) {
        self.emi_amt_11 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_11(&mut self, v: f64) {
        self.emi_amt_11 = v;
    }

    pub fn get_emi_amt_11(&self) -> f64 {
        self.emi_amt_11
    }

    // int64 emi_date_11 = 49;

    pub fn clear_emi_date_11(&mut self) {
        self.emi_date_11 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_11(&mut self, v: i64) {
        self.emi_date_11 = v;
    }

    pub fn get_emi_date_11(&self) -> i64 {
        self.emi_date_11
    }

    // double prin_amt_12 = 50;

    pub fn clear_prin_amt_12(&mut self) {
        self.prin_amt_12 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_12(&mut self, v: f64) {
        self.prin_amt_12 = v;
    }

    pub fn get_prin_amt_12(&self) -> f64 {
        self.prin_amt_12
    }

    // double int_amt_12 = 51;

    pub fn clear_int_amt_12(&mut self) {
        self.int_amt_12 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_12(&mut self, v: f64) {
        self.int_amt_12 = v;
    }

    pub fn get_int_amt_12(&self) -> f64 {
        self.int_amt_12
    }

    // double emi_amt_12 = 52;

    pub fn clear_emi_amt_12(&mut self) {
        self.emi_amt_12 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_12(&mut self, v: f64) {
        self.emi_amt_12 = v;
    }

    pub fn get_emi_amt_12(&self) -> f64 {
        self.emi_amt_12
    }

    // int64 emi_date_12 = 53;

    pub fn clear_emi_date_12(&mut self) {
        self.emi_date_12 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_12(&mut self, v: i64) {
        self.emi_date_12 = v;
    }

    pub fn get_emi_date_12(&self) -> i64 {
        self.emi_date_12
    }

    // double prin_amt_13 = 54;

    pub fn clear_prin_amt_13(&mut self) {
        self.prin_amt_13 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_13(&mut self, v: f64) {
        self.prin_amt_13 = v;
    }

    pub fn get_prin_amt_13(&self) -> f64 {
        self.prin_amt_13
    }

    // double int_amt_13 = 55;

    pub fn clear_int_amt_13(&mut self) {
        self.int_amt_13 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_13(&mut self, v: f64) {
        self.int_amt_13 = v;
    }

    pub fn get_int_amt_13(&self) -> f64 {
        self.int_amt_13
    }

    // double emi_amt_13 = 56;

    pub fn clear_emi_amt_13(&mut self) {
        self.emi_amt_13 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_13(&mut self, v: f64) {
        self.emi_amt_13 = v;
    }

    pub fn get_emi_amt_13(&self) -> f64 {
        self.emi_amt_13
    }

    // int64 emi_date_13 = 57;

    pub fn clear_emi_date_13(&mut self) {
        self.emi_date_13 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_13(&mut self, v: i64) {
        self.emi_date_13 = v;
    }

    pub fn get_emi_date_13(&self) -> i64 {
        self.emi_date_13
    }

    // double prin_amt_14 = 58;

    pub fn clear_prin_amt_14(&mut self) {
        self.prin_amt_14 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_14(&mut self, v: f64) {
        self.prin_amt_14 = v;
    }

    pub fn get_prin_amt_14(&self) -> f64 {
        self.prin_amt_14
    }

    // double int_amt_14 = 59;

    pub fn clear_int_amt_14(&mut self) {
        self.int_amt_14 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_14(&mut self, v: f64) {
        self.int_amt_14 = v;
    }

    pub fn get_int_amt_14(&self) -> f64 {
        self.int_amt_14
    }

    // double emi_amt_14 = 60;

    pub fn clear_emi_amt_14(&mut self) {
        self.emi_amt_14 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_14(&mut self, v: f64) {
        self.emi_amt_14 = v;
    }

    pub fn get_emi_amt_14(&self) -> f64 {
        self.emi_amt_14
    }

    // int64 emi_date_14 = 61;

    pub fn clear_emi_date_14(&mut self) {
        self.emi_date_14 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_14(&mut self, v: i64) {
        self.emi_date_14 = v;
    }

    pub fn get_emi_date_14(&self) -> i64 {
        self.emi_date_14
    }

    // double prin_amt_15 = 62;

    pub fn clear_prin_amt_15(&mut self) {
        self.prin_amt_15 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_15(&mut self, v: f64) {
        self.prin_amt_15 = v;
    }

    pub fn get_prin_amt_15(&self) -> f64 {
        self.prin_amt_15
    }

    // double int_amt_15 = 63;

    pub fn clear_int_amt_15(&mut self) {
        self.int_amt_15 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_15(&mut self, v: f64) {
        self.int_amt_15 = v;
    }

    pub fn get_int_amt_15(&self) -> f64 {
        self.int_amt_15
    }

    // double emi_amt_15 = 64;

    pub fn clear_emi_amt_15(&mut self) {
        self.emi_amt_15 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_15(&mut self, v: f64) {
        self.emi_amt_15 = v;
    }

    pub fn get_emi_amt_15(&self) -> f64 {
        self.emi_amt_15
    }

    // int64 emi_date_15 = 65;

    pub fn clear_emi_date_15(&mut self) {
        self.emi_date_15 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_15(&mut self, v: i64) {
        self.emi_date_15 = v;
    }

    pub fn get_emi_date_15(&self) -> i64 {
        self.emi_date_15
    }

    // double prin_amt_16 = 66;

    pub fn clear_prin_amt_16(&mut self) {
        self.prin_amt_16 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_16(&mut self, v: f64) {
        self.prin_amt_16 = v;
    }

    pub fn get_prin_amt_16(&self) -> f64 {
        self.prin_amt_16
    }

    // double int_amt_16 = 67;

    pub fn clear_int_amt_16(&mut self) {
        self.int_amt_16 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_16(&mut self, v: f64) {
        self.int_amt_16 = v;
    }

    pub fn get_int_amt_16(&self) -> f64 {
        self.int_amt_16
    }

    // double emi_amt_16 = 68;

    pub fn clear_emi_amt_16(&mut self) {
        self.emi_amt_16 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_16(&mut self, v: f64) {
        self.emi_amt_16 = v;
    }

    pub fn get_emi_amt_16(&self) -> f64 {
        self.emi_amt_16
    }

    // int64 emi_date_16 = 69;

    pub fn clear_emi_date_16(&mut self) {
        self.emi_date_16 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_16(&mut self, v: i64) {
        self.emi_date_16 = v;
    }

    pub fn get_emi_date_16(&self) -> i64 {
        self.emi_date_16
    }

    // double prin_amt_17 = 70;

    pub fn clear_prin_amt_17(&mut self) {
        self.prin_amt_17 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_17(&mut self, v: f64) {
        self.prin_amt_17 = v;
    }

    pub fn get_prin_amt_17(&self) -> f64 {
        self.prin_amt_17
    }

    // double int_amt_17 = 71;

    pub fn clear_int_amt_17(&mut self) {
        self.int_amt_17 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_17(&mut self, v: f64) {
        self.int_amt_17 = v;
    }

    pub fn get_int_amt_17(&self) -> f64 {
        self.int_amt_17
    }

    // double emi_amt_17 = 72;

    pub fn clear_emi_amt_17(&mut self) {
        self.emi_amt_17 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_17(&mut self, v: f64) {
        self.emi_amt_17 = v;
    }

    pub fn get_emi_amt_17(&self) -> f64 {
        self.emi_amt_17
    }

    // int64 emi_date_17 = 73;

    pub fn clear_emi_date_17(&mut self) {
        self.emi_date_17 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_17(&mut self, v: i64) {
        self.emi_date_17 = v;
    }

    pub fn get_emi_date_17(&self) -> i64 {
        self.emi_date_17
    }

    // double prin_amt_18 = 74;

    pub fn clear_prin_amt_18(&mut self) {
        self.prin_amt_18 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_18(&mut self, v: f64) {
        self.prin_amt_18 = v;
    }

    pub fn get_prin_amt_18(&self) -> f64 {
        self.prin_amt_18
    }

    // double int_amt_18 = 75;

    pub fn clear_int_amt_18(&mut self) {
        self.int_amt_18 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_18(&mut self, v: f64) {
        self.int_amt_18 = v;
    }

    pub fn get_int_amt_18(&self) -> f64 {
        self.int_amt_18
    }

    // double emi_amt_18 = 76;

    pub fn clear_emi_amt_18(&mut self) {
        self.emi_amt_18 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_18(&mut self, v: f64) {
        self.emi_amt_18 = v;
    }

    pub fn get_emi_amt_18(&self) -> f64 {
        self.emi_amt_18
    }

    // int64 emi_date_18 = 77;

    pub fn clear_emi_date_18(&mut self) {
        self.emi_date_18 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_18(&mut self, v: i64) {
        self.emi_date_18 = v;
    }

    pub fn get_emi_date_18(&self) -> i64 {
        self.emi_date_18
    }

    // double prin_amt_19 = 78;

    pub fn clear_prin_amt_19(&mut self) {
        self.prin_amt_19 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_19(&mut self, v: f64) {
        self.prin_amt_19 = v;
    }

    pub fn get_prin_amt_19(&self) -> f64 {
        self.prin_amt_19
    }

    // double int_amt_19 = 79;

    pub fn clear_int_amt_19(&mut self) {
        self.int_amt_19 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_19(&mut self, v: f64) {
        self.int_amt_19 = v;
    }

    pub fn get_int_amt_19(&self) -> f64 {
        self.int_amt_19
    }

    // double emi_amt_19 = 80;

    pub fn clear_emi_amt_19(&mut self) {
        self.emi_amt_19 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_19(&mut self, v: f64) {
        self.emi_amt_19 = v;
    }

    pub fn get_emi_amt_19(&self) -> f64 {
        self.emi_amt_19
    }

    // int64 emi_date_19 = 81;

    pub fn clear_emi_date_19(&mut self) {
        self.emi_date_19 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_19(&mut self, v: i64) {
        self.emi_date_19 = v;
    }

    pub fn get_emi_date_19(&self) -> i64 {
        self.emi_date_19
    }

    // double prin_amt_20 = 82;

    pub fn clear_prin_amt_20(&mut self) {
        self.prin_amt_20 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_20(&mut self, v: f64) {
        self.prin_amt_20 = v;
    }

    pub fn get_prin_amt_20(&self) -> f64 {
        self.prin_amt_20
    }

    // double int_amt_20 = 83;

    pub fn clear_int_amt_20(&mut self) {
        self.int_amt_20 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_20(&mut self, v: f64) {
        self.int_amt_20 = v;
    }

    pub fn get_int_amt_20(&self) -> f64 {
        self.int_amt_20
    }

    // double emi_amt_20 = 84;

    pub fn clear_emi_amt_20(&mut self) {
        self.emi_amt_20 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_20(&mut self, v: f64) {
        self.emi_amt_20 = v;
    }

    pub fn get_emi_amt_20(&self) -> f64 {
        self.emi_amt_20
    }

    // int64 emi_date_20 = 85;

    pub fn clear_emi_date_20(&mut self) {
        self.emi_date_20 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_20(&mut self, v: i64) {
        self.emi_date_20 = v;
    }

    pub fn get_emi_date_20(&self) -> i64 {
        self.emi_date_20
    }

    // double prin_amt_21 = 86;

    pub fn clear_prin_amt_21(&mut self) {
        self.prin_amt_21 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_21(&mut self, v: f64) {
        self.prin_amt_21 = v;
    }

    pub fn get_prin_amt_21(&self) -> f64 {
        self.prin_amt_21
    }

    // double int_amt_21 = 87;

    pub fn clear_int_amt_21(&mut self) {
        self.int_amt_21 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_21(&mut self, v: f64) {
        self.int_amt_21 = v;
    }

    pub fn get_int_amt_21(&self) -> f64 {
        self.int_amt_21
    }

    // double emi_amt_21 = 88;

    pub fn clear_emi_amt_21(&mut self) {
        self.emi_amt_21 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_21(&mut self, v: f64) {
        self.emi_amt_21 = v;
    }

    pub fn get_emi_amt_21(&self) -> f64 {
        self.emi_amt_21
    }

    // int64 emi_date_21 = 89;

    pub fn clear_emi_date_21(&mut self) {
        self.emi_date_21 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_21(&mut self, v: i64) {
        self.emi_date_21 = v;
    }

    pub fn get_emi_date_21(&self) -> i64 {
        self.emi_date_21
    }

    // double prin_amt_22 = 90;

    pub fn clear_prin_amt_22(&mut self) {
        self.prin_amt_22 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_22(&mut self, v: f64) {
        self.prin_amt_22 = v;
    }

    pub fn get_prin_amt_22(&self) -> f64 {
        self.prin_amt_22
    }

    // double int_amt_22 = 91;

    pub fn clear_int_amt_22(&mut self) {
        self.int_amt_22 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_22(&mut self, v: f64) {
        self.int_amt_22 = v;
    }

    pub fn get_int_amt_22(&self) -> f64 {
        self.int_amt_22
    }

    // double emi_amt_22 = 92;

    pub fn clear_emi_amt_22(&mut self) {
        self.emi_amt_22 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_22(&mut self, v: f64) {
        self.emi_amt_22 = v;
    }

    pub fn get_emi_amt_22(&self) -> f64 {
        self.emi_amt_22
    }

    // int64 emi_date_22 = 93;

    pub fn clear_emi_date_22(&mut self) {
        self.emi_date_22 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_22(&mut self, v: i64) {
        self.emi_date_22 = v;
    }

    pub fn get_emi_date_22(&self) -> i64 {
        self.emi_date_22
    }

    // double prin_amt_23 = 94;

    pub fn clear_prin_amt_23(&mut self) {
        self.prin_amt_23 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_23(&mut self, v: f64) {
        self.prin_amt_23 = v;
    }

    pub fn get_prin_amt_23(&self) -> f64 {
        self.prin_amt_23
    }

    // double int_amt_23 = 95;

    pub fn clear_int_amt_23(&mut self) {
        self.int_amt_23 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_23(&mut self, v: f64) {
        self.int_amt_23 = v;
    }

    pub fn get_int_amt_23(&self) -> f64 {
        self.int_amt_23
    }

    // double emi_amt_23 = 96;

    pub fn clear_emi_amt_23(&mut self) {
        self.emi_amt_23 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_23(&mut self, v: f64) {
        self.emi_amt_23 = v;
    }

    pub fn get_emi_amt_23(&self) -> f64 {
        self.emi_amt_23
    }

    // int64 emi_date_23 = 97;

    pub fn clear_emi_date_23(&mut self) {
        self.emi_date_23 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_23(&mut self, v: i64) {
        self.emi_date_23 = v;
    }

    pub fn get_emi_date_23(&self) -> i64 {
        self.emi_date_23
    }

    // double prin_amt_24 = 98;

    pub fn clear_prin_amt_24(&mut self) {
        self.prin_amt_24 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_24(&mut self, v: f64) {
        self.prin_amt_24 = v;
    }

    pub fn get_prin_amt_24(&self) -> f64 {
        self.prin_amt_24
    }

    // double int_amt_24 = 99;

    pub fn clear_int_amt_24(&mut self) {
        self.int_amt_24 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_24(&mut self, v: f64) {
        self.int_amt_24 = v;
    }

    pub fn get_int_amt_24(&self) -> f64 {
        self.int_amt_24
    }

    // double emi_amt_24 = 100;

    pub fn clear_emi_amt_24(&mut self) {
        self.emi_amt_24 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_24(&mut self, v: f64) {
        self.emi_amt_24 = v;
    }

    pub fn get_emi_amt_24(&self) -> f64 {
        self.emi_amt_24
    }

    // int64 emi_date_24 = 101;

    pub fn clear_emi_date_24(&mut self) {
        self.emi_date_24 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_24(&mut self, v: i64) {
        self.emi_date_24 = v;
    }

    pub fn get_emi_date_24(&self) -> i64 {
        self.emi_date_24
    }

    // double prin_amt_25 = 102;

    pub fn clear_prin_amt_25(&mut self) {
        self.prin_amt_25 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_25(&mut self, v: f64) {
        self.prin_amt_25 = v;
    }

    pub fn get_prin_amt_25(&self) -> f64 {
        self.prin_amt_25
    }

    // double int_amt_25 = 103;

    pub fn clear_int_amt_25(&mut self) {
        self.int_amt_25 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_25(&mut self, v: f64) {
        self.int_amt_25 = v;
    }

    pub fn get_int_amt_25(&self) -> f64 {
        self.int_amt_25
    }

    // double emi_amt_25 = 104;

    pub fn clear_emi_amt_25(&mut self) {
        self.emi_amt_25 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_25(&mut self, v: f64) {
        self.emi_amt_25 = v;
    }

    pub fn get_emi_amt_25(&self) -> f64 {
        self.emi_amt_25
    }

    // int64 emi_date_25 = 105;

    pub fn clear_emi_date_25(&mut self) {
        self.emi_date_25 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_25(&mut self, v: i64) {
        self.emi_date_25 = v;
    }

    pub fn get_emi_date_25(&self) -> i64 {
        self.emi_date_25
    }

    // double prin_amt_26 = 106;

    pub fn clear_prin_amt_26(&mut self) {
        self.prin_amt_26 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_26(&mut self, v: f64) {
        self.prin_amt_26 = v;
    }

    pub fn get_prin_amt_26(&self) -> f64 {
        self.prin_amt_26
    }

    // double int_amt_26 = 107;

    pub fn clear_int_amt_26(&mut self) {
        self.int_amt_26 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_26(&mut self, v: f64) {
        self.int_amt_26 = v;
    }

    pub fn get_int_amt_26(&self) -> f64 {
        self.int_amt_26
    }

    // double emi_amt_26 = 108;

    pub fn clear_emi_amt_26(&mut self) {
        self.emi_amt_26 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_26(&mut self, v: f64) {
        self.emi_amt_26 = v;
    }

    pub fn get_emi_amt_26(&self) -> f64 {
        self.emi_amt_26
    }

    // int64 emi_date_26 = 109;

    pub fn clear_emi_date_26(&mut self) {
        self.emi_date_26 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_26(&mut self, v: i64) {
        self.emi_date_26 = v;
    }

    pub fn get_emi_date_26(&self) -> i64 {
        self.emi_date_26
    }

    // double prin_amt_27 = 110;

    pub fn clear_prin_amt_27(&mut self) {
        self.prin_amt_27 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_27(&mut self, v: f64) {
        self.prin_amt_27 = v;
    }

    pub fn get_prin_amt_27(&self) -> f64 {
        self.prin_amt_27
    }

    // double int_amt_27 = 111;

    pub fn clear_int_amt_27(&mut self) {
        self.int_amt_27 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_27(&mut self, v: f64) {
        self.int_amt_27 = v;
    }

    pub fn get_int_amt_27(&self) -> f64 {
        self.int_amt_27
    }

    // double emi_amt_27 = 112;

    pub fn clear_emi_amt_27(&mut self) {
        self.emi_amt_27 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_27(&mut self, v: f64) {
        self.emi_amt_27 = v;
    }

    pub fn get_emi_amt_27(&self) -> f64 {
        self.emi_amt_27
    }

    // int64 emi_date_27 = 113;

    pub fn clear_emi_date_27(&mut self) {
        self.emi_date_27 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_27(&mut self, v: i64) {
        self.emi_date_27 = v;
    }

    pub fn get_emi_date_27(&self) -> i64 {
        self.emi_date_27
    }

    // double prin_amt_28 = 114;

    pub fn clear_prin_amt_28(&mut self) {
        self.prin_amt_28 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_28(&mut self, v: f64) {
        self.prin_amt_28 = v;
    }

    pub fn get_prin_amt_28(&self) -> f64 {
        self.prin_amt_28
    }

    // double int_amt_28 = 115;

    pub fn clear_int_amt_28(&mut self) {
        self.int_amt_28 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_28(&mut self, v: f64) {
        self.int_amt_28 = v;
    }

    pub fn get_int_amt_28(&self) -> f64 {
        self.int_amt_28
    }

    // double emi_amt_28 = 116;

    pub fn clear_emi_amt_28(&mut self) {
        self.emi_amt_28 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_28(&mut self, v: f64) {
        self.emi_amt_28 = v;
    }

    pub fn get_emi_amt_28(&self) -> f64 {
        self.emi_amt_28
    }

    // int64 emi_date_28 = 117;

    pub fn clear_emi_date_28(&mut self) {
        self.emi_date_28 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_28(&mut self, v: i64) {
        self.emi_date_28 = v;
    }

    pub fn get_emi_date_28(&self) -> i64 {
        self.emi_date_28
    }

    // double prin_amt_29 = 118;

    pub fn clear_prin_amt_29(&mut self) {
        self.prin_amt_29 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_29(&mut self, v: f64) {
        self.prin_amt_29 = v;
    }

    pub fn get_prin_amt_29(&self) -> f64 {
        self.prin_amt_29
    }

    // double int_amt_29 = 119;

    pub fn clear_int_amt_29(&mut self) {
        self.int_amt_29 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_29(&mut self, v: f64) {
        self.int_amt_29 = v;
    }

    pub fn get_int_amt_29(&self) -> f64 {
        self.int_amt_29
    }

    // double emi_amt_29 = 120;

    pub fn clear_emi_amt_29(&mut self) {
        self.emi_amt_29 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_29(&mut self, v: f64) {
        self.emi_amt_29 = v;
    }

    pub fn get_emi_amt_29(&self) -> f64 {
        self.emi_amt_29
    }

    // int64 emi_date_29 = 121;

    pub fn clear_emi_date_29(&mut self) {
        self.emi_date_29 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_29(&mut self, v: i64) {
        self.emi_date_29 = v;
    }

    pub fn get_emi_date_29(&self) -> i64 {
        self.emi_date_29
    }

    // double prin_amt_30 = 122;

    pub fn clear_prin_amt_30(&mut self) {
        self.prin_amt_30 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_30(&mut self, v: f64) {
        self.prin_amt_30 = v;
    }

    pub fn get_prin_amt_30(&self) -> f64 {
        self.prin_amt_30
    }

    // double int_amt_30 = 123;

    pub fn clear_int_amt_30(&mut self) {
        self.int_amt_30 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_30(&mut self, v: f64) {
        self.int_amt_30 = v;
    }

    pub fn get_int_amt_30(&self) -> f64 {
        self.int_amt_30
    }

    // double emi_amt_30 = 124;

    pub fn clear_emi_amt_30(&mut self) {
        self.emi_amt_30 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_30(&mut self, v: f64) {
        self.emi_amt_30 = v;
    }

    pub fn get_emi_amt_30(&self) -> f64 {
        self.emi_amt_30
    }

    // int64 emi_date_30 = 125;

    pub fn clear_emi_date_30(&mut self) {
        self.emi_date_30 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_30(&mut self, v: i64) {
        self.emi_date_30 = v;
    }

    pub fn get_emi_date_30(&self) -> i64 {
        self.emi_date_30
    }

    // double prin_amt_31 = 126;

    pub fn clear_prin_amt_31(&mut self) {
        self.prin_amt_31 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_31(&mut self, v: f64) {
        self.prin_amt_31 = v;
    }

    pub fn get_prin_amt_31(&self) -> f64 {
        self.prin_amt_31
    }

    // double int_amt_31 = 127;

    pub fn clear_int_amt_31(&mut self) {
        self.int_amt_31 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_31(&mut self, v: f64) {
        self.int_amt_31 = v;
    }

    pub fn get_int_amt_31(&self) -> f64 {
        self.int_amt_31
    }

    // double emi_amt_31 = 128;

    pub fn clear_emi_amt_31(&mut self) {
        self.emi_amt_31 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_31(&mut self, v: f64) {
        self.emi_amt_31 = v;
    }

    pub fn get_emi_amt_31(&self) -> f64 {
        self.emi_amt_31
    }

    // int64 emi_date_31 = 129;

    pub fn clear_emi_date_31(&mut self) {
        self.emi_date_31 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_31(&mut self, v: i64) {
        self.emi_date_31 = v;
    }

    pub fn get_emi_date_31(&self) -> i64 {
        self.emi_date_31
    }

    // double prin_amt_32 = 130;

    pub fn clear_prin_amt_32(&mut self) {
        self.prin_amt_32 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_32(&mut self, v: f64) {
        self.prin_amt_32 = v;
    }

    pub fn get_prin_amt_32(&self) -> f64 {
        self.prin_amt_32
    }

    // double int_amt_32 = 131;

    pub fn clear_int_amt_32(&mut self) {
        self.int_amt_32 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_32(&mut self, v: f64) {
        self.int_amt_32 = v;
    }

    pub fn get_int_amt_32(&self) -> f64 {
        self.int_amt_32
    }

    // double emi_amt_32 = 132;

    pub fn clear_emi_amt_32(&mut self) {
        self.emi_amt_32 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_32(&mut self, v: f64) {
        self.emi_amt_32 = v;
    }

    pub fn get_emi_amt_32(&self) -> f64 {
        self.emi_amt_32
    }

    // int64 emi_date_32 = 133;

    pub fn clear_emi_date_32(&mut self) {
        self.emi_date_32 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_32(&mut self, v: i64) {
        self.emi_date_32 = v;
    }

    pub fn get_emi_date_32(&self) -> i64 {
        self.emi_date_32
    }

    // double prin_amt_33 = 134;

    pub fn clear_prin_amt_33(&mut self) {
        self.prin_amt_33 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_33(&mut self, v: f64) {
        self.prin_amt_33 = v;
    }

    pub fn get_prin_amt_33(&self) -> f64 {
        self.prin_amt_33
    }

    // double int_amt_33 = 135;

    pub fn clear_int_amt_33(&mut self) {
        self.int_amt_33 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_33(&mut self, v: f64) {
        self.int_amt_33 = v;
    }

    pub fn get_int_amt_33(&self) -> f64 {
        self.int_amt_33
    }

    // double emi_amt_33 = 136;

    pub fn clear_emi_amt_33(&mut self) {
        self.emi_amt_33 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_33(&mut self, v: f64) {
        self.emi_amt_33 = v;
    }

    pub fn get_emi_amt_33(&self) -> f64 {
        self.emi_amt_33
    }

    // int64 emi_date_33 = 137;

    pub fn clear_emi_date_33(&mut self) {
        self.emi_date_33 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_33(&mut self, v: i64) {
        self.emi_date_33 = v;
    }

    pub fn get_emi_date_33(&self) -> i64 {
        self.emi_date_33
    }

    // double prin_amt_34 = 138;

    pub fn clear_prin_amt_34(&mut self) {
        self.prin_amt_34 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_34(&mut self, v: f64) {
        self.prin_amt_34 = v;
    }

    pub fn get_prin_amt_34(&self) -> f64 {
        self.prin_amt_34
    }

    // double int_amt_34 = 139;

    pub fn clear_int_amt_34(&mut self) {
        self.int_amt_34 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_34(&mut self, v: f64) {
        self.int_amt_34 = v;
    }

    pub fn get_int_amt_34(&self) -> f64 {
        self.int_amt_34
    }

    // double emi_amt_34 = 140;

    pub fn clear_emi_amt_34(&mut self) {
        self.emi_amt_34 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_34(&mut self, v: f64) {
        self.emi_amt_34 = v;
    }

    pub fn get_emi_amt_34(&self) -> f64 {
        self.emi_amt_34
    }

    // int64 emi_date_34 = 141;

    pub fn clear_emi_date_34(&mut self) {
        self.emi_date_34 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_34(&mut self, v: i64) {
        self.emi_date_34 = v;
    }

    pub fn get_emi_date_34(&self) -> i64 {
        self.emi_date_34
    }

    // double prin_amt_35 = 142;

    pub fn clear_prin_amt_35(&mut self) {
        self.prin_amt_35 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_35(&mut self, v: f64) {
        self.prin_amt_35 = v;
    }

    pub fn get_prin_amt_35(&self) -> f64 {
        self.prin_amt_35
    }

    // double int_amt_35 = 143;

    pub fn clear_int_amt_35(&mut self) {
        self.int_amt_35 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_35(&mut self, v: f64) {
        self.int_amt_35 = v;
    }

    pub fn get_int_amt_35(&self) -> f64 {
        self.int_amt_35
    }

    // double emi_amt_35 = 144;

    pub fn clear_emi_amt_35(&mut self) {
        self.emi_amt_35 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_35(&mut self, v: f64) {
        self.emi_amt_35 = v;
    }

    pub fn get_emi_amt_35(&self) -> f64 {
        self.emi_amt_35
    }

    // int64 emi_date_35 = 145;

    pub fn clear_emi_date_35(&mut self) {
        self.emi_date_35 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_35(&mut self, v: i64) {
        self.emi_date_35 = v;
    }

    pub fn get_emi_date_35(&self) -> i64 {
        self.emi_date_35
    }

    // double prin_amt_36 = 146;

    pub fn clear_prin_amt_36(&mut self) {
        self.prin_amt_36 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_36(&mut self, v: f64) {
        self.prin_amt_36 = v;
    }

    pub fn get_prin_amt_36(&self) -> f64 {
        self.prin_amt_36
    }

    // double int_amt_36 = 147;

    pub fn clear_int_amt_36(&mut self) {
        self.int_amt_36 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_36(&mut self, v: f64) {
        self.int_amt_36 = v;
    }

    pub fn get_int_amt_36(&self) -> f64 {
        self.int_amt_36
    }

    // double emi_amt_36 = 148;

    pub fn clear_emi_amt_36(&mut self) {
        self.emi_amt_36 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_36(&mut self, v: f64) {
        self.emi_amt_36 = v;
    }

    pub fn get_emi_amt_36(&self) -> f64 {
        self.emi_amt_36
    }

    // int64 emi_date_36 = 149;

    pub fn clear_emi_date_36(&mut self) {
        self.emi_date_36 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_36(&mut self, v: i64) {
        self.emi_date_36 = v;
    }

    pub fn get_emi_date_36(&self) -> i64 {
        self.emi_date_36
    }

    // double prin_amt_37 = 150;

    pub fn clear_prin_amt_37(&mut self) {
        self.prin_amt_37 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_37(&mut self, v: f64) {
        self.prin_amt_37 = v;
    }

    pub fn get_prin_amt_37(&self) -> f64 {
        self.prin_amt_37
    }

    // double int_amt_37 = 151;

    pub fn clear_int_amt_37(&mut self) {
        self.int_amt_37 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_37(&mut self, v: f64) {
        self.int_amt_37 = v;
    }

    pub fn get_int_amt_37(&self) -> f64 {
        self.int_amt_37
    }

    // double emi_amt_37 = 152;

    pub fn clear_emi_amt_37(&mut self) {
        self.emi_amt_37 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_37(&mut self, v: f64) {
        self.emi_amt_37 = v;
    }

    pub fn get_emi_amt_37(&self) -> f64 {
        self.emi_amt_37
    }

    // int64 emi_date_37 = 153;

    pub fn clear_emi_date_37(&mut self) {
        self.emi_date_37 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_37(&mut self, v: i64) {
        self.emi_date_37 = v;
    }

    pub fn get_emi_date_37(&self) -> i64 {
        self.emi_date_37
    }

    // double prin_amt_38 = 154;

    pub fn clear_prin_amt_38(&mut self) {
        self.prin_amt_38 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_38(&mut self, v: f64) {
        self.prin_amt_38 = v;
    }

    pub fn get_prin_amt_38(&self) -> f64 {
        self.prin_amt_38
    }

    // double int_amt_38 = 155;

    pub fn clear_int_amt_38(&mut self) {
        self.int_amt_38 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_38(&mut self, v: f64) {
        self.int_amt_38 = v;
    }

    pub fn get_int_amt_38(&self) -> f64 {
        self.int_amt_38
    }

    // double emi_amt_38 = 156;

    pub fn clear_emi_amt_38(&mut self) {
        self.emi_amt_38 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_38(&mut self, v: f64) {
        self.emi_amt_38 = v;
    }

    pub fn get_emi_amt_38(&self) -> f64 {
        self.emi_amt_38
    }

    // int64 emi_date_38 = 157;

    pub fn clear_emi_date_38(&mut self) {
        self.emi_date_38 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_38(&mut self, v: i64) {
        self.emi_date_38 = v;
    }

    pub fn get_emi_date_38(&self) -> i64 {
        self.emi_date_38
    }

    // double prin_amt_39 = 158;

    pub fn clear_prin_amt_39(&mut self) {
        self.prin_amt_39 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_39(&mut self, v: f64) {
        self.prin_amt_39 = v;
    }

    pub fn get_prin_amt_39(&self) -> f64 {
        self.prin_amt_39
    }

    // double int_amt_39 = 159;

    pub fn clear_int_amt_39(&mut self) {
        self.int_amt_39 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_39(&mut self, v: f64) {
        self.int_amt_39 = v;
    }

    pub fn get_int_amt_39(&self) -> f64 {
        self.int_amt_39
    }

    // double emi_amt_39 = 160;

    pub fn clear_emi_amt_39(&mut self) {
        self.emi_amt_39 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_39(&mut self, v: f64) {
        self.emi_amt_39 = v;
    }

    pub fn get_emi_amt_39(&self) -> f64 {
        self.emi_amt_39
    }

    // int64 emi_date_39 = 161;

    pub fn clear_emi_date_39(&mut self) {
        self.emi_date_39 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_39(&mut self, v: i64) {
        self.emi_date_39 = v;
    }

    pub fn get_emi_date_39(&self) -> i64 {
        self.emi_date_39
    }

    // double prin_amt_40 = 162;

    pub fn clear_prin_amt_40(&mut self) {
        self.prin_amt_40 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_40(&mut self, v: f64) {
        self.prin_amt_40 = v;
    }

    pub fn get_prin_amt_40(&self) -> f64 {
        self.prin_amt_40
    }

    // double int_amt_40 = 163;

    pub fn clear_int_amt_40(&mut self) {
        self.int_amt_40 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_40(&mut self, v: f64) {
        self.int_amt_40 = v;
    }

    pub fn get_int_amt_40(&self) -> f64 {
        self.int_amt_40
    }

    // double emi_amt_40 = 164;

    pub fn clear_emi_amt_40(&mut self) {
        self.emi_amt_40 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_40(&mut self, v: f64) {
        self.emi_amt_40 = v;
    }

    pub fn get_emi_amt_40(&self) -> f64 {
        self.emi_amt_40
    }

    // int64 emi_date_40 = 165;

    pub fn clear_emi_date_40(&mut self) {
        self.emi_date_40 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_40(&mut self, v: i64) {
        self.emi_date_40 = v;
    }

    pub fn get_emi_date_40(&self) -> i64 {
        self.emi_date_40
    }

    // double prin_amt_41 = 166;

    pub fn clear_prin_amt_41(&mut self) {
        self.prin_amt_41 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_41(&mut self, v: f64) {
        self.prin_amt_41 = v;
    }

    pub fn get_prin_amt_41(&self) -> f64 {
        self.prin_amt_41
    }

    // double int_amt_41 = 167;

    pub fn clear_int_amt_41(&mut self) {
        self.int_amt_41 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_41(&mut self, v: f64) {
        self.int_amt_41 = v;
    }

    pub fn get_int_amt_41(&self) -> f64 {
        self.int_amt_41
    }

    // double emi_amt_41 = 168;

    pub fn clear_emi_amt_41(&mut self) {
        self.emi_amt_41 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_41(&mut self, v: f64) {
        self.emi_amt_41 = v;
    }

    pub fn get_emi_amt_41(&self) -> f64 {
        self.emi_amt_41
    }

    // int64 emi_date_41 = 169;

    pub fn clear_emi_date_41(&mut self) {
        self.emi_date_41 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_41(&mut self, v: i64) {
        self.emi_date_41 = v;
    }

    pub fn get_emi_date_41(&self) -> i64 {
        self.emi_date_41
    }

    // double prin_amt_42 = 170;

    pub fn clear_prin_amt_42(&mut self) {
        self.prin_amt_42 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_42(&mut self, v: f64) {
        self.prin_amt_42 = v;
    }

    pub fn get_prin_amt_42(&self) -> f64 {
        self.prin_amt_42
    }

    // double int_amt_42 = 171;

    pub fn clear_int_amt_42(&mut self) {
        self.int_amt_42 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_42(&mut self, v: f64) {
        self.int_amt_42 = v;
    }

    pub fn get_int_amt_42(&self) -> f64 {
        self.int_amt_42
    }

    // double emi_amt_42 = 172;

    pub fn clear_emi_amt_42(&mut self) {
        self.emi_amt_42 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_42(&mut self, v: f64) {
        self.emi_amt_42 = v;
    }

    pub fn get_emi_amt_42(&self) -> f64 {
        self.emi_amt_42
    }

    // int64 emi_date_42 = 173;

    pub fn clear_emi_date_42(&mut self) {
        self.emi_date_42 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_42(&mut self, v: i64) {
        self.emi_date_42 = v;
    }

    pub fn get_emi_date_42(&self) -> i64 {
        self.emi_date_42
    }

    // double prin_amt_43 = 174;

    pub fn clear_prin_amt_43(&mut self) {
        self.prin_amt_43 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_43(&mut self, v: f64) {
        self.prin_amt_43 = v;
    }

    pub fn get_prin_amt_43(&self) -> f64 {
        self.prin_amt_43
    }

    // double int_amt_43 = 175;

    pub fn clear_int_amt_43(&mut self) {
        self.int_amt_43 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_43(&mut self, v: f64) {
        self.int_amt_43 = v;
    }

    pub fn get_int_amt_43(&self) -> f64 {
        self.int_amt_43
    }

    // double emi_amt_43 = 176;

    pub fn clear_emi_amt_43(&mut self) {
        self.emi_amt_43 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_43(&mut self, v: f64) {
        self.emi_amt_43 = v;
    }

    pub fn get_emi_amt_43(&self) -> f64 {
        self.emi_amt_43
    }

    // int64 emi_date_43 = 177;

    pub fn clear_emi_date_43(&mut self) {
        self.emi_date_43 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_43(&mut self, v: i64) {
        self.emi_date_43 = v;
    }

    pub fn get_emi_date_43(&self) -> i64 {
        self.emi_date_43
    }

    // double prin_amt_44 = 178;

    pub fn clear_prin_amt_44(&mut self) {
        self.prin_amt_44 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_44(&mut self, v: f64) {
        self.prin_amt_44 = v;
    }

    pub fn get_prin_amt_44(&self) -> f64 {
        self.prin_amt_44
    }

    // double int_amt_44 = 179;

    pub fn clear_int_amt_44(&mut self) {
        self.int_amt_44 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_44(&mut self, v: f64) {
        self.int_amt_44 = v;
    }

    pub fn get_int_amt_44(&self) -> f64 {
        self.int_amt_44
    }

    // double emi_amt_44 = 180;

    pub fn clear_emi_amt_44(&mut self) {
        self.emi_amt_44 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_44(&mut self, v: f64) {
        self.emi_amt_44 = v;
    }

    pub fn get_emi_amt_44(&self) -> f64 {
        self.emi_amt_44
    }

    // int64 emi_date_44 = 181;

    pub fn clear_emi_date_44(&mut self) {
        self.emi_date_44 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_44(&mut self, v: i64) {
        self.emi_date_44 = v;
    }

    pub fn get_emi_date_44(&self) -> i64 {
        self.emi_date_44
    }

    // double prin_amt_45 = 182;

    pub fn clear_prin_amt_45(&mut self) {
        self.prin_amt_45 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_45(&mut self, v: f64) {
        self.prin_amt_45 = v;
    }

    pub fn get_prin_amt_45(&self) -> f64 {
        self.prin_amt_45
    }

    // double int_amt_45 = 183;

    pub fn clear_int_amt_45(&mut self) {
        self.int_amt_45 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_45(&mut self, v: f64) {
        self.int_amt_45 = v;
    }

    pub fn get_int_amt_45(&self) -> f64 {
        self.int_amt_45
    }

    // double emi_amt_45 = 184;

    pub fn clear_emi_amt_45(&mut self) {
        self.emi_amt_45 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_45(&mut self, v: f64) {
        self.emi_amt_45 = v;
    }

    pub fn get_emi_amt_45(&self) -> f64 {
        self.emi_amt_45
    }

    // int64 emi_date_45 = 185;

    pub fn clear_emi_date_45(&mut self) {
        self.emi_date_45 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_45(&mut self, v: i64) {
        self.emi_date_45 = v;
    }

    pub fn get_emi_date_45(&self) -> i64 {
        self.emi_date_45
    }

    // double prin_amt_46 = 186;

    pub fn clear_prin_amt_46(&mut self) {
        self.prin_amt_46 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_46(&mut self, v: f64) {
        self.prin_amt_46 = v;
    }

    pub fn get_prin_amt_46(&self) -> f64 {
        self.prin_amt_46
    }

    // double int_amt_46 = 187;

    pub fn clear_int_amt_46(&mut self) {
        self.int_amt_46 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_46(&mut self, v: f64) {
        self.int_amt_46 = v;
    }

    pub fn get_int_amt_46(&self) -> f64 {
        self.int_amt_46
    }

    // double emi_amt_46 = 188;

    pub fn clear_emi_amt_46(&mut self) {
        self.emi_amt_46 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_46(&mut self, v: f64) {
        self.emi_amt_46 = v;
    }

    pub fn get_emi_amt_46(&self) -> f64 {
        self.emi_amt_46
    }

    // int64 emi_date_46 = 189;

    pub fn clear_emi_date_46(&mut self) {
        self.emi_date_46 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_46(&mut self, v: i64) {
        self.emi_date_46 = v;
    }

    pub fn get_emi_date_46(&self) -> i64 {
        self.emi_date_46
    }

    // double prin_amt_47 = 190;

    pub fn clear_prin_amt_47(&mut self) {
        self.prin_amt_47 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_47(&mut self, v: f64) {
        self.prin_amt_47 = v;
    }

    pub fn get_prin_amt_47(&self) -> f64 {
        self.prin_amt_47
    }

    // double int_amt_47 = 191;

    pub fn clear_int_amt_47(&mut self) {
        self.int_amt_47 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_47(&mut self, v: f64) {
        self.int_amt_47 = v;
    }

    pub fn get_int_amt_47(&self) -> f64 {
        self.int_amt_47
    }

    // double emi_amt_47 = 192;

    pub fn clear_emi_amt_47(&mut self) {
        self.emi_amt_47 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_47(&mut self, v: f64) {
        self.emi_amt_47 = v;
    }

    pub fn get_emi_amt_47(&self) -> f64 {
        self.emi_amt_47
    }

    // int64 emi_date_47 = 193;

    pub fn clear_emi_date_47(&mut self) {
        self.emi_date_47 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_47(&mut self, v: i64) {
        self.emi_date_47 = v;
    }

    pub fn get_emi_date_47(&self) -> i64 {
        self.emi_date_47
    }

    // double prin_amt_48 = 194;

    pub fn clear_prin_amt_48(&mut self) {
        self.prin_amt_48 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_48(&mut self, v: f64) {
        self.prin_amt_48 = v;
    }

    pub fn get_prin_amt_48(&self) -> f64 {
        self.prin_amt_48
    }

    // double int_amt_48 = 195;

    pub fn clear_int_amt_48(&mut self) {
        self.int_amt_48 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_48(&mut self, v: f64) {
        self.int_amt_48 = v;
    }

    pub fn get_int_amt_48(&self) -> f64 {
        self.int_amt_48
    }

    // double emi_amt_48 = 196;

    pub fn clear_emi_amt_48(&mut self) {
        self.emi_amt_48 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_48(&mut self, v: f64) {
        self.emi_amt_48 = v;
    }

    pub fn get_emi_amt_48(&self) -> f64 {
        self.emi_amt_48
    }

    // int64 emi_date_48 = 197;

    pub fn clear_emi_date_48(&mut self) {
        self.emi_date_48 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_48(&mut self, v: i64) {
        self.emi_date_48 = v;
    }

    pub fn get_emi_date_48(&self) -> i64 {
        self.emi_date_48
    }

    // double prin_amt_49 = 198;

    pub fn clear_prin_amt_49(&mut self) {
        self.prin_amt_49 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_49(&mut self, v: f64) {
        self.prin_amt_49 = v;
    }

    pub fn get_prin_amt_49(&self) -> f64 {
        self.prin_amt_49
    }

    // double int_amt_49 = 199;

    pub fn clear_int_amt_49(&mut self) {
        self.int_amt_49 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_49(&mut self, v: f64) {
        self.int_amt_49 = v;
    }

    pub fn get_int_amt_49(&self) -> f64 {
        self.int_amt_49
    }

    // double emi_amt_49 = 200;

    pub fn clear_emi_amt_49(&mut self) {
        self.emi_amt_49 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_49(&mut self, v: f64) {
        self.emi_amt_49 = v;
    }

    pub fn get_emi_amt_49(&self) -> f64 {
        self.emi_amt_49
    }

    // int64 emi_date_49 = 201;

    pub fn clear_emi_date_49(&mut self) {
        self.emi_date_49 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_49(&mut self, v: i64) {
        self.emi_date_49 = v;
    }

    pub fn get_emi_date_49(&self) -> i64 {
        self.emi_date_49
    }

    // double prin_amt_50 = 202;

    pub fn clear_prin_amt_50(&mut self) {
        self.prin_amt_50 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_50(&mut self, v: f64) {
        self.prin_amt_50 = v;
    }

    pub fn get_prin_amt_50(&self) -> f64 {
        self.prin_amt_50
    }

    // double int_amt_50 = 203;

    pub fn clear_int_amt_50(&mut self) {
        self.int_amt_50 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_50(&mut self, v: f64) {
        self.int_amt_50 = v;
    }

    pub fn get_int_amt_50(&self) -> f64 {
        self.int_amt_50
    }

    // double emi_amt_50 = 204;

    pub fn clear_emi_amt_50(&mut self) {
        self.emi_amt_50 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_50(&mut self, v: f64) {
        self.emi_amt_50 = v;
    }

    pub fn get_emi_amt_50(&self) -> f64 {
        self.emi_amt_50
    }

    // int64 emi_date_50 = 205;

    pub fn clear_emi_date_50(&mut self) {
        self.emi_date_50 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_50(&mut self, v: i64) {
        self.emi_date_50 = v;
    }

    pub fn get_emi_date_50(&self) -> i64 {
        self.emi_date_50
    }

    // double prin_amt_51 = 206;

    pub fn clear_prin_amt_51(&mut self) {
        self.prin_amt_51 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_51(&mut self, v: f64) {
        self.prin_amt_51 = v;
    }

    pub fn get_prin_amt_51(&self) -> f64 {
        self.prin_amt_51
    }

    // double int_amt_51 = 207;

    pub fn clear_int_amt_51(&mut self) {
        self.int_amt_51 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_51(&mut self, v: f64) {
        self.int_amt_51 = v;
    }

    pub fn get_int_amt_51(&self) -> f64 {
        self.int_amt_51
    }

    // double emi_amt_51 = 208;

    pub fn clear_emi_amt_51(&mut self) {
        self.emi_amt_51 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_51(&mut self, v: f64) {
        self.emi_amt_51 = v;
    }

    pub fn get_emi_amt_51(&self) -> f64 {
        self.emi_amt_51
    }

    // int64 emi_date_51 = 209;

    pub fn clear_emi_date_51(&mut self) {
        self.emi_date_51 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_51(&mut self, v: i64) {
        self.emi_date_51 = v;
    }

    pub fn get_emi_date_51(&self) -> i64 {
        self.emi_date_51
    }

    // double prin_amt_52 = 210;

    pub fn clear_prin_amt_52(&mut self) {
        self.prin_amt_52 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_52(&mut self, v: f64) {
        self.prin_amt_52 = v;
    }

    pub fn get_prin_amt_52(&self) -> f64 {
        self.prin_amt_52
    }

    // double int_amt_52 = 211;

    pub fn clear_int_amt_52(&mut self) {
        self.int_amt_52 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_52(&mut self, v: f64) {
        self.int_amt_52 = v;
    }

    pub fn get_int_amt_52(&self) -> f64 {
        self.int_amt_52
    }

    // double emi_amt_52 = 212;

    pub fn clear_emi_amt_52(&mut self) {
        self.emi_amt_52 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_52(&mut self, v: f64) {
        self.emi_amt_52 = v;
    }

    pub fn get_emi_amt_52(&self) -> f64 {
        self.emi_amt_52
    }

    // int64 emi_date_52 = 213;

    pub fn clear_emi_date_52(&mut self) {
        self.emi_date_52 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_52(&mut self, v: i64) {
        self.emi_date_52 = v;
    }

    pub fn get_emi_date_52(&self) -> i64 {
        self.emi_date_52
    }

    // double prin_amt_53 = 214;

    pub fn clear_prin_amt_53(&mut self) {
        self.prin_amt_53 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_53(&mut self, v: f64) {
        self.prin_amt_53 = v;
    }

    pub fn get_prin_amt_53(&self) -> f64 {
        self.prin_amt_53
    }

    // double int_amt_53 = 215;

    pub fn clear_int_amt_53(&mut self) {
        self.int_amt_53 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_53(&mut self, v: f64) {
        self.int_amt_53 = v;
    }

    pub fn get_int_amt_53(&self) -> f64 {
        self.int_amt_53
    }

    // double emi_amt_53 = 216;

    pub fn clear_emi_amt_53(&mut self) {
        self.emi_amt_53 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_53(&mut self, v: f64) {
        self.emi_amt_53 = v;
    }

    pub fn get_emi_amt_53(&self) -> f64 {
        self.emi_amt_53
    }

    // int64 emi_date_53 = 217;

    pub fn clear_emi_date_53(&mut self) {
        self.emi_date_53 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_53(&mut self, v: i64) {
        self.emi_date_53 = v;
    }

    pub fn get_emi_date_53(&self) -> i64 {
        self.emi_date_53
    }

    // double prin_amt_54 = 218;

    pub fn clear_prin_amt_54(&mut self) {
        self.prin_amt_54 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_54(&mut self, v: f64) {
        self.prin_amt_54 = v;
    }

    pub fn get_prin_amt_54(&self) -> f64 {
        self.prin_amt_54
    }

    // double int_amt_54 = 219;

    pub fn clear_int_amt_54(&mut self) {
        self.int_amt_54 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_54(&mut self, v: f64) {
        self.int_amt_54 = v;
    }

    pub fn get_int_amt_54(&self) -> f64 {
        self.int_amt_54
    }

    // double emi_amt_54 = 220;

    pub fn clear_emi_amt_54(&mut self) {
        self.emi_amt_54 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_54(&mut self, v: f64) {
        self.emi_amt_54 = v;
    }

    pub fn get_emi_amt_54(&self) -> f64 {
        self.emi_amt_54
    }

    // int64 emi_date_54 = 221;

    pub fn clear_emi_date_54(&mut self) {
        self.emi_date_54 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_54(&mut self, v: i64) {
        self.emi_date_54 = v;
    }

    pub fn get_emi_date_54(&self) -> i64 {
        self.emi_date_54
    }

    // double prin_amt_55 = 222;

    pub fn clear_prin_amt_55(&mut self) {
        self.prin_amt_55 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_55(&mut self, v: f64) {
        self.prin_amt_55 = v;
    }

    pub fn get_prin_amt_55(&self) -> f64 {
        self.prin_amt_55
    }

    // double int_amt_55 = 223;

    pub fn clear_int_amt_55(&mut self) {
        self.int_amt_55 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_55(&mut self, v: f64) {
        self.int_amt_55 = v;
    }

    pub fn get_int_amt_55(&self) -> f64 {
        self.int_amt_55
    }

    // double emi_amt_55 = 224;

    pub fn clear_emi_amt_55(&mut self) {
        self.emi_amt_55 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_55(&mut self, v: f64) {
        self.emi_amt_55 = v;
    }

    pub fn get_emi_amt_55(&self) -> f64 {
        self.emi_amt_55
    }

    // int64 emi_date_55 = 225;

    pub fn clear_emi_date_55(&mut self) {
        self.emi_date_55 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_55(&mut self, v: i64) {
        self.emi_date_55 = v;
    }

    pub fn get_emi_date_55(&self) -> i64 {
        self.emi_date_55
    }

    // double prin_amt_56 = 226;

    pub fn clear_prin_amt_56(&mut self) {
        self.prin_amt_56 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_56(&mut self, v: f64) {
        self.prin_amt_56 = v;
    }

    pub fn get_prin_amt_56(&self) -> f64 {
        self.prin_amt_56
    }

    // double int_amt_56 = 227;

    pub fn clear_int_amt_56(&mut self) {
        self.int_amt_56 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_56(&mut self, v: f64) {
        self.int_amt_56 = v;
    }

    pub fn get_int_amt_56(&self) -> f64 {
        self.int_amt_56
    }

    // double emi_amt_56 = 228;

    pub fn clear_emi_amt_56(&mut self) {
        self.emi_amt_56 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_56(&mut self, v: f64) {
        self.emi_amt_56 = v;
    }

    pub fn get_emi_amt_56(&self) -> f64 {
        self.emi_amt_56
    }

    // int64 emi_date_56 = 229;

    pub fn clear_emi_date_56(&mut self) {
        self.emi_date_56 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_56(&mut self, v: i64) {
        self.emi_date_56 = v;
    }

    pub fn get_emi_date_56(&self) -> i64 {
        self.emi_date_56
    }

    // double prin_amt_57 = 230;

    pub fn clear_prin_amt_57(&mut self) {
        self.prin_amt_57 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_57(&mut self, v: f64) {
        self.prin_amt_57 = v;
    }

    pub fn get_prin_amt_57(&self) -> f64 {
        self.prin_amt_57
    }

    // double int_amt_57 = 231;

    pub fn clear_int_amt_57(&mut self) {
        self.int_amt_57 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_57(&mut self, v: f64) {
        self.int_amt_57 = v;
    }

    pub fn get_int_amt_57(&self) -> f64 {
        self.int_amt_57
    }

    // double emi_amt_57 = 232;

    pub fn clear_emi_amt_57(&mut self) {
        self.emi_amt_57 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_57(&mut self, v: f64) {
        self.emi_amt_57 = v;
    }

    pub fn get_emi_amt_57(&self) -> f64 {
        self.emi_amt_57
    }

    // int64 emi_date_57 = 233;

    pub fn clear_emi_date_57(&mut self) {
        self.emi_date_57 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_57(&mut self, v: i64) {
        self.emi_date_57 = v;
    }

    pub fn get_emi_date_57(&self) -> i64 {
        self.emi_date_57
    }

    // double prin_amt_58 = 234;

    pub fn clear_prin_amt_58(&mut self) {
        self.prin_amt_58 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_58(&mut self, v: f64) {
        self.prin_amt_58 = v;
    }

    pub fn get_prin_amt_58(&self) -> f64 {
        self.prin_amt_58
    }

    // double int_amt_58 = 235;

    pub fn clear_int_amt_58(&mut self) {
        self.int_amt_58 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_58(&mut self, v: f64) {
        self.int_amt_58 = v;
    }

    pub fn get_int_amt_58(&self) -> f64 {
        self.int_amt_58
    }

    // double emi_amt_58 = 236;

    pub fn clear_emi_amt_58(&mut self) {
        self.emi_amt_58 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_58(&mut self, v: f64) {
        self.emi_amt_58 = v;
    }

    pub fn get_emi_amt_58(&self) -> f64 {
        self.emi_amt_58
    }

    // int64 emi_date_58 = 237;

    pub fn clear_emi_date_58(&mut self) {
        self.emi_date_58 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_58(&mut self, v: i64) {
        self.emi_date_58 = v;
    }

    pub fn get_emi_date_58(&self) -> i64 {
        self.emi_date_58
    }

    // double prin_amt_59 = 238;

    pub fn clear_prin_amt_59(&mut self) {
        self.prin_amt_59 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_59(&mut self, v: f64) {
        self.prin_amt_59 = v;
    }

    pub fn get_prin_amt_59(&self) -> f64 {
        self.prin_amt_59
    }

    // double int_amt_59 = 239;

    pub fn clear_int_amt_59(&mut self) {
        self.int_amt_59 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_59(&mut self, v: f64) {
        self.int_amt_59 = v;
    }

    pub fn get_int_amt_59(&self) -> f64 {
        self.int_amt_59
    }

    // double emi_amt_59 = 240;

    pub fn clear_emi_amt_59(&mut self) {
        self.emi_amt_59 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_59(&mut self, v: f64) {
        self.emi_amt_59 = v;
    }

    pub fn get_emi_amt_59(&self) -> f64 {
        self.emi_amt_59
    }

    // int64 emi_date_59 = 241;

    pub fn clear_emi_date_59(&mut self) {
        self.emi_date_59 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_59(&mut self, v: i64) {
        self.emi_date_59 = v;
    }

    pub fn get_emi_date_59(&self) -> i64 {
        self.emi_date_59
    }

    // double prin_amt_60 = 242;

    pub fn clear_prin_amt_60(&mut self) {
        self.prin_amt_60 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_60(&mut self, v: f64) {
        self.prin_amt_60 = v;
    }

    pub fn get_prin_amt_60(&self) -> f64 {
        self.prin_amt_60
    }

    // double int_amt_60 = 243;

    pub fn clear_int_amt_60(&mut self) {
        self.int_amt_60 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_60(&mut self, v: f64) {
        self.int_amt_60 = v;
    }

    pub fn get_int_amt_60(&self) -> f64 {
        self.int_amt_60
    }

    // double emi_amt_60 = 244;

    pub fn clear_emi_amt_60(&mut self) {
        self.emi_amt_60 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_60(&mut self, v: f64) {
        self.emi_amt_60 = v;
    }

    pub fn get_emi_amt_60(&self) -> f64 {
        self.emi_amt_60
    }

    // int64 emi_date_60 = 245;

    pub fn clear_emi_date_60(&mut self) {
        self.emi_date_60 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_60(&mut self, v: i64) {
        self.emi_date_60 = v;
    }

    pub fn get_emi_date_60(&self) -> i64 {
        self.emi_date_60
    }

    // double prin_amt_61 = 246;

    pub fn clear_prin_amt_61(&mut self) {
        self.prin_amt_61 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_61(&mut self, v: f64) {
        self.prin_amt_61 = v;
    }

    pub fn get_prin_amt_61(&self) -> f64 {
        self.prin_amt_61
    }

    // double int_amt_61 = 247;

    pub fn clear_int_amt_61(&mut self) {
        self.int_amt_61 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_61(&mut self, v: f64) {
        self.int_amt_61 = v;
    }

    pub fn get_int_amt_61(&self) -> f64 {
        self.int_amt_61
    }

    // double emi_amt_61 = 248;

    pub fn clear_emi_amt_61(&mut self) {
        self.emi_amt_61 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_61(&mut self, v: f64) {
        self.emi_amt_61 = v;
    }

    pub fn get_emi_amt_61(&self) -> f64 {
        self.emi_amt_61
    }

    // int64 emi_date_61 = 249;

    pub fn clear_emi_date_61(&mut self) {
        self.emi_date_61 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_61(&mut self, v: i64) {
        self.emi_date_61 = v;
    }

    pub fn get_emi_date_61(&self) -> i64 {
        self.emi_date_61
    }

    // double prin_amt_62 = 250;

    pub fn clear_prin_amt_62(&mut self) {
        self.prin_amt_62 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_62(&mut self, v: f64) {
        self.prin_amt_62 = v;
    }

    pub fn get_prin_amt_62(&self) -> f64 {
        self.prin_amt_62
    }

    // double int_amt_62 = 251;

    pub fn clear_int_amt_62(&mut self) {
        self.int_amt_62 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_62(&mut self, v: f64) {
        self.int_amt_62 = v;
    }

    pub fn get_int_amt_62(&self) -> f64 {
        self.int_amt_62
    }

    // double emi_amt_62 = 252;

    pub fn clear_emi_amt_62(&mut self) {
        self.emi_amt_62 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_62(&mut self, v: f64) {
        self.emi_amt_62 = v;
    }

    pub fn get_emi_amt_62(&self) -> f64 {
        self.emi_amt_62
    }

    // int64 emi_date_62 = 253;

    pub fn clear_emi_date_62(&mut self) {
        self.emi_date_62 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_62(&mut self, v: i64) {
        self.emi_date_62 = v;
    }

    pub fn get_emi_date_62(&self) -> i64 {
        self.emi_date_62
    }

    // double prin_amt_63 = 254;

    pub fn clear_prin_amt_63(&mut self) {
        self.prin_amt_63 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_63(&mut self, v: f64) {
        self.prin_amt_63 = v;
    }

    pub fn get_prin_amt_63(&self) -> f64 {
        self.prin_amt_63
    }

    // double int_amt_63 = 255;

    pub fn clear_int_amt_63(&mut self) {
        self.int_amt_63 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_63(&mut self, v: f64) {
        self.int_amt_63 = v;
    }

    pub fn get_int_amt_63(&self) -> f64 {
        self.int_amt_63
    }

    // double emi_amt_63 = 256;

    pub fn clear_emi_amt_63(&mut self) {
        self.emi_amt_63 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_63(&mut self, v: f64) {
        self.emi_amt_63 = v;
    }

    pub fn get_emi_amt_63(&self) -> f64 {
        self.emi_amt_63
    }

    // int64 emi_date_63 = 257;

    pub fn clear_emi_date_63(&mut self) {
        self.emi_date_63 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_63(&mut self, v: i64) {
        self.emi_date_63 = v;
    }

    pub fn get_emi_date_63(&self) -> i64 {
        self.emi_date_63
    }

    // double prin_amt_64 = 258;

    pub fn clear_prin_amt_64(&mut self) {
        self.prin_amt_64 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_64(&mut self, v: f64) {
        self.prin_amt_64 = v;
    }

    pub fn get_prin_amt_64(&self) -> f64 {
        self.prin_amt_64
    }

    // double int_amt_64 = 259;

    pub fn clear_int_amt_64(&mut self) {
        self.int_amt_64 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_64(&mut self, v: f64) {
        self.int_amt_64 = v;
    }

    pub fn get_int_amt_64(&self) -> f64 {
        self.int_amt_64
    }

    // double emi_amt_64 = 260;

    pub fn clear_emi_amt_64(&mut self) {
        self.emi_amt_64 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_64(&mut self, v: f64) {
        self.emi_amt_64 = v;
    }

    pub fn get_emi_amt_64(&self) -> f64 {
        self.emi_amt_64
    }

    // int64 emi_date_64 = 261;

    pub fn clear_emi_date_64(&mut self) {
        self.emi_date_64 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_64(&mut self, v: i64) {
        self.emi_date_64 = v;
    }

    pub fn get_emi_date_64(&self) -> i64 {
        self.emi_date_64
    }

    // double prin_amt_65 = 262;

    pub fn clear_prin_amt_65(&mut self) {
        self.prin_amt_65 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_65(&mut self, v: f64) {
        self.prin_amt_65 = v;
    }

    pub fn get_prin_amt_65(&self) -> f64 {
        self.prin_amt_65
    }

    // double int_amt_65 = 263;

    pub fn clear_int_amt_65(&mut self) {
        self.int_amt_65 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_65(&mut self, v: f64) {
        self.int_amt_65 = v;
    }

    pub fn get_int_amt_65(&self) -> f64 {
        self.int_amt_65
    }

    // double emi_amt_65 = 264;

    pub fn clear_emi_amt_65(&mut self) {
        self.emi_amt_65 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_65(&mut self, v: f64) {
        self.emi_amt_65 = v;
    }

    pub fn get_emi_amt_65(&self) -> f64 {
        self.emi_amt_65
    }

    // int64 emi_date_65 = 265;

    pub fn clear_emi_date_65(&mut self) {
        self.emi_date_65 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_65(&mut self, v: i64) {
        self.emi_date_65 = v;
    }

    pub fn get_emi_date_65(&self) -> i64 {
        self.emi_date_65
    }

    // double prin_amt_66 = 266;

    pub fn clear_prin_amt_66(&mut self) {
        self.prin_amt_66 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_66(&mut self, v: f64) {
        self.prin_amt_66 = v;
    }

    pub fn get_prin_amt_66(&self) -> f64 {
        self.prin_amt_66
    }

    // double int_amt_66 = 267;

    pub fn clear_int_amt_66(&mut self) {
        self.int_amt_66 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_66(&mut self, v: f64) {
        self.int_amt_66 = v;
    }

    pub fn get_int_amt_66(&self) -> f64 {
        self.int_amt_66
    }

    // double emi_amt_66 = 268;

    pub fn clear_emi_amt_66(&mut self) {
        self.emi_amt_66 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_66(&mut self, v: f64) {
        self.emi_amt_66 = v;
    }

    pub fn get_emi_amt_66(&self) -> f64 {
        self.emi_amt_66
    }

    // int64 emi_date_66 = 269;

    pub fn clear_emi_date_66(&mut self) {
        self.emi_date_66 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_66(&mut self, v: i64) {
        self.emi_date_66 = v;
    }

    pub fn get_emi_date_66(&self) -> i64 {
        self.emi_date_66
    }

    // double prin_amt_67 = 270;

    pub fn clear_prin_amt_67(&mut self) {
        self.prin_amt_67 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_67(&mut self, v: f64) {
        self.prin_amt_67 = v;
    }

    pub fn get_prin_amt_67(&self) -> f64 {
        self.prin_amt_67
    }

    // double int_amt_67 = 271;

    pub fn clear_int_amt_67(&mut self) {
        self.int_amt_67 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_67(&mut self, v: f64) {
        self.int_amt_67 = v;
    }

    pub fn get_int_amt_67(&self) -> f64 {
        self.int_amt_67
    }

    // double emi_amt_67 = 272;

    pub fn clear_emi_amt_67(&mut self) {
        self.emi_amt_67 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_67(&mut self, v: f64) {
        self.emi_amt_67 = v;
    }

    pub fn get_emi_amt_67(&self) -> f64 {
        self.emi_amt_67
    }

    // int64 emi_date_67 = 273;

    pub fn clear_emi_date_67(&mut self) {
        self.emi_date_67 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_67(&mut self, v: i64) {
        self.emi_date_67 = v;
    }

    pub fn get_emi_date_67(&self) -> i64 {
        self.emi_date_67
    }

    // double prin_amt_68 = 274;

    pub fn clear_prin_amt_68(&mut self) {
        self.prin_amt_68 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_68(&mut self, v: f64) {
        self.prin_amt_68 = v;
    }

    pub fn get_prin_amt_68(&self) -> f64 {
        self.prin_amt_68
    }

    // double int_amt_68 = 275;

    pub fn clear_int_amt_68(&mut self) {
        self.int_amt_68 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_68(&mut self, v: f64) {
        self.int_amt_68 = v;
    }

    pub fn get_int_amt_68(&self) -> f64 {
        self.int_amt_68
    }

    // double emi_amt_68 = 276;

    pub fn clear_emi_amt_68(&mut self) {
        self.emi_amt_68 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_68(&mut self, v: f64) {
        self.emi_amt_68 = v;
    }

    pub fn get_emi_amt_68(&self) -> f64 {
        self.emi_amt_68
    }

    // int64 emi_date_68 = 277;

    pub fn clear_emi_date_68(&mut self) {
        self.emi_date_68 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_68(&mut self, v: i64) {
        self.emi_date_68 = v;
    }

    pub fn get_emi_date_68(&self) -> i64 {
        self.emi_date_68
    }

    // double prin_amt_69 = 278;

    pub fn clear_prin_amt_69(&mut self) {
        self.prin_amt_69 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_69(&mut self, v: f64) {
        self.prin_amt_69 = v;
    }

    pub fn get_prin_amt_69(&self) -> f64 {
        self.prin_amt_69
    }

    // double int_amt_69 = 279;

    pub fn clear_int_amt_69(&mut self) {
        self.int_amt_69 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_69(&mut self, v: f64) {
        self.int_amt_69 = v;
    }

    pub fn get_int_amt_69(&self) -> f64 {
        self.int_amt_69
    }

    // double emi_amt_69 = 280;

    pub fn clear_emi_amt_69(&mut self) {
        self.emi_amt_69 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_69(&mut self, v: f64) {
        self.emi_amt_69 = v;
    }

    pub fn get_emi_amt_69(&self) -> f64 {
        self.emi_amt_69
    }

    // int64 emi_date_69 = 281;

    pub fn clear_emi_date_69(&mut self) {
        self.emi_date_69 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_69(&mut self, v: i64) {
        self.emi_date_69 = v;
    }

    pub fn get_emi_date_69(&self) -> i64 {
        self.emi_date_69
    }

    // double prin_amt_70 = 282;

    pub fn clear_prin_amt_70(&mut self) {
        self.prin_amt_70 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_70(&mut self, v: f64) {
        self.prin_amt_70 = v;
    }

    pub fn get_prin_amt_70(&self) -> f64 {
        self.prin_amt_70
    }

    // double int_amt_70 = 283;

    pub fn clear_int_amt_70(&mut self) {
        self.int_amt_70 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_70(&mut self, v: f64) {
        self.int_amt_70 = v;
    }

    pub fn get_int_amt_70(&self) -> f64 {
        self.int_amt_70
    }

    // double emi_amt_70 = 284;

    pub fn clear_emi_amt_70(&mut self) {
        self.emi_amt_70 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_70(&mut self, v: f64) {
        self.emi_amt_70 = v;
    }

    pub fn get_emi_amt_70(&self) -> f64 {
        self.emi_amt_70
    }

    // int64 emi_date_70 = 285;

    pub fn clear_emi_date_70(&mut self) {
        self.emi_date_70 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_70(&mut self, v: i64) {
        self.emi_date_70 = v;
    }

    pub fn get_emi_date_70(&self) -> i64 {
        self.emi_date_70
    }

    // double prin_amt_71 = 286;

    pub fn clear_prin_amt_71(&mut self) {
        self.prin_amt_71 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_71(&mut self, v: f64) {
        self.prin_amt_71 = v;
    }

    pub fn get_prin_amt_71(&self) -> f64 {
        self.prin_amt_71
    }

    // double int_amt_71 = 287;

    pub fn clear_int_amt_71(&mut self) {
        self.int_amt_71 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_71(&mut self, v: f64) {
        self.int_amt_71 = v;
    }

    pub fn get_int_amt_71(&self) -> f64 {
        self.int_amt_71
    }

    // double emi_amt_71 = 288;

    pub fn clear_emi_amt_71(&mut self) {
        self.emi_amt_71 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_71(&mut self, v: f64) {
        self.emi_amt_71 = v;
    }

    pub fn get_emi_amt_71(&self) -> f64 {
        self.emi_amt_71
    }

    // int64 emi_date_71 = 289;

    pub fn clear_emi_date_71(&mut self) {
        self.emi_date_71 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_71(&mut self, v: i64) {
        self.emi_date_71 = v;
    }

    pub fn get_emi_date_71(&self) -> i64 {
        self.emi_date_71
    }

    // double prin_amt_72 = 290;

    pub fn clear_prin_amt_72(&mut self) {
        self.prin_amt_72 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_72(&mut self, v: f64) {
        self.prin_amt_72 = v;
    }

    pub fn get_prin_amt_72(&self) -> f64 {
        self.prin_amt_72
    }

    // double int_amt_72 = 291;

    pub fn clear_int_amt_72(&mut self) {
        self.int_amt_72 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_72(&mut self, v: f64) {
        self.int_amt_72 = v;
    }

    pub fn get_int_amt_72(&self) -> f64 {
        self.int_amt_72
    }

    // double emi_amt_72 = 292;

    pub fn clear_emi_amt_72(&mut self) {
        self.emi_amt_72 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_72(&mut self, v: f64) {
        self.emi_amt_72 = v;
    }

    pub fn get_emi_amt_72(&self) -> f64 {
        self.emi_amt_72
    }

    // int64 emi_date_72 = 293;

    pub fn clear_emi_date_72(&mut self) {
        self.emi_date_72 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_72(&mut self, v: i64) {
        self.emi_date_72 = v;
    }

    pub fn get_emi_date_72(&self) -> i64 {
        self.emi_date_72
    }

    // double prin_amt_73 = 294;

    pub fn clear_prin_amt_73(&mut self) {
        self.prin_amt_73 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_73(&mut self, v: f64) {
        self.prin_amt_73 = v;
    }

    pub fn get_prin_amt_73(&self) -> f64 {
        self.prin_amt_73
    }

    // double int_amt_73 = 295;

    pub fn clear_int_amt_73(&mut self) {
        self.int_amt_73 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_73(&mut self, v: f64) {
        self.int_amt_73 = v;
    }

    pub fn get_int_amt_73(&self) -> f64 {
        self.int_amt_73
    }

    // double emi_amt_73 = 296;

    pub fn clear_emi_amt_73(&mut self) {
        self.emi_amt_73 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_73(&mut self, v: f64) {
        self.emi_amt_73 = v;
    }

    pub fn get_emi_amt_73(&self) -> f64 {
        self.emi_amt_73
    }

    // int64 emi_date_73 = 297;

    pub fn clear_emi_date_73(&mut self) {
        self.emi_date_73 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_73(&mut self, v: i64) {
        self.emi_date_73 = v;
    }

    pub fn get_emi_date_73(&self) -> i64 {
        self.emi_date_73
    }

    // double prin_amt_74 = 298;

    pub fn clear_prin_amt_74(&mut self) {
        self.prin_amt_74 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_74(&mut self, v: f64) {
        self.prin_amt_74 = v;
    }

    pub fn get_prin_amt_74(&self) -> f64 {
        self.prin_amt_74
    }

    // double int_amt_74 = 299;

    pub fn clear_int_amt_74(&mut self) {
        self.int_amt_74 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_74(&mut self, v: f64) {
        self.int_amt_74 = v;
    }

    pub fn get_int_amt_74(&self) -> f64 {
        self.int_amt_74
    }

    // double emi_amt_74 = 300;

    pub fn clear_emi_amt_74(&mut self) {
        self.emi_amt_74 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_74(&mut self, v: f64) {
        self.emi_amt_74 = v;
    }

    pub fn get_emi_amt_74(&self) -> f64 {
        self.emi_amt_74
    }

    // int64 emi_date_74 = 301;

    pub fn clear_emi_date_74(&mut self) {
        self.emi_date_74 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_74(&mut self, v: i64) {
        self.emi_date_74 = v;
    }

    pub fn get_emi_date_74(&self) -> i64 {
        self.emi_date_74
    }

    // double prin_amt_75 = 302;

    pub fn clear_prin_amt_75(&mut self) {
        self.prin_amt_75 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_75(&mut self, v: f64) {
        self.prin_amt_75 = v;
    }

    pub fn get_prin_amt_75(&self) -> f64 {
        self.prin_amt_75
    }

    // double int_amt_75 = 303;

    pub fn clear_int_amt_75(&mut self) {
        self.int_amt_75 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_75(&mut self, v: f64) {
        self.int_amt_75 = v;
    }

    pub fn get_int_amt_75(&self) -> f64 {
        self.int_amt_75
    }

    // double emi_amt_75 = 304;

    pub fn clear_emi_amt_75(&mut self) {
        self.emi_amt_75 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_75(&mut self, v: f64) {
        self.emi_amt_75 = v;
    }

    pub fn get_emi_amt_75(&self) -> f64 {
        self.emi_amt_75
    }

    // int64 emi_date_75 = 305;

    pub fn clear_emi_date_75(&mut self) {
        self.emi_date_75 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_75(&mut self, v: i64) {
        self.emi_date_75 = v;
    }

    pub fn get_emi_date_75(&self) -> i64 {
        self.emi_date_75
    }

    // double prin_amt_76 = 306;

    pub fn clear_prin_amt_76(&mut self) {
        self.prin_amt_76 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_76(&mut self, v: f64) {
        self.prin_amt_76 = v;
    }

    pub fn get_prin_amt_76(&self) -> f64 {
        self.prin_amt_76
    }

    // double int_amt_76 = 307;

    pub fn clear_int_amt_76(&mut self) {
        self.int_amt_76 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_76(&mut self, v: f64) {
        self.int_amt_76 = v;
    }

    pub fn get_int_amt_76(&self) -> f64 {
        self.int_amt_76
    }

    // double emi_amt_76 = 308;

    pub fn clear_emi_amt_76(&mut self) {
        self.emi_amt_76 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_76(&mut self, v: f64) {
        self.emi_amt_76 = v;
    }

    pub fn get_emi_amt_76(&self) -> f64 {
        self.emi_amt_76
    }

    // int64 emi_date_76 = 309;

    pub fn clear_emi_date_76(&mut self) {
        self.emi_date_76 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_76(&mut self, v: i64) {
        self.emi_date_76 = v;
    }

    pub fn get_emi_date_76(&self) -> i64 {
        self.emi_date_76
    }

    // double prin_amt_77 = 310;

    pub fn clear_prin_amt_77(&mut self) {
        self.prin_amt_77 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_77(&mut self, v: f64) {
        self.prin_amt_77 = v;
    }

    pub fn get_prin_amt_77(&self) -> f64 {
        self.prin_amt_77
    }

    // double int_amt_77 = 311;

    pub fn clear_int_amt_77(&mut self) {
        self.int_amt_77 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_77(&mut self, v: f64) {
        self.int_amt_77 = v;
    }

    pub fn get_int_amt_77(&self) -> f64 {
        self.int_amt_77
    }

    // double emi_amt_77 = 312;

    pub fn clear_emi_amt_77(&mut self) {
        self.emi_amt_77 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_77(&mut self, v: f64) {
        self.emi_amt_77 = v;
    }

    pub fn get_emi_amt_77(&self) -> f64 {
        self.emi_amt_77
    }

    // int64 emi_date_77 = 313;

    pub fn clear_emi_date_77(&mut self) {
        self.emi_date_77 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_77(&mut self, v: i64) {
        self.emi_date_77 = v;
    }

    pub fn get_emi_date_77(&self) -> i64 {
        self.emi_date_77
    }

    // double prin_amt_78 = 314;

    pub fn clear_prin_amt_78(&mut self) {
        self.prin_amt_78 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_78(&mut self, v: f64) {
        self.prin_amt_78 = v;
    }

    pub fn get_prin_amt_78(&self) -> f64 {
        self.prin_amt_78
    }

    // double int_amt_78 = 315;

    pub fn clear_int_amt_78(&mut self) {
        self.int_amt_78 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_78(&mut self, v: f64) {
        self.int_amt_78 = v;
    }

    pub fn get_int_amt_78(&self) -> f64 {
        self.int_amt_78
    }

    // double emi_amt_78 = 316;

    pub fn clear_emi_amt_78(&mut self) {
        self.emi_amt_78 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_78(&mut self, v: f64) {
        self.emi_amt_78 = v;
    }

    pub fn get_emi_amt_78(&self) -> f64 {
        self.emi_amt_78
    }

    // int64 emi_date_78 = 317;

    pub fn clear_emi_date_78(&mut self) {
        self.emi_date_78 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_78(&mut self, v: i64) {
        self.emi_date_78 = v;
    }

    pub fn get_emi_date_78(&self) -> i64 {
        self.emi_date_78
    }

    // double prin_amt_79 = 318;

    pub fn clear_prin_amt_79(&mut self) {
        self.prin_amt_79 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_79(&mut self, v: f64) {
        self.prin_amt_79 = v;
    }

    pub fn get_prin_amt_79(&self) -> f64 {
        self.prin_amt_79
    }

    // double int_amt_79 = 319;

    pub fn clear_int_amt_79(&mut self) {
        self.int_amt_79 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_79(&mut self, v: f64) {
        self.int_amt_79 = v;
    }

    pub fn get_int_amt_79(&self) -> f64 {
        self.int_amt_79
    }

    // double emi_amt_79 = 320;

    pub fn clear_emi_amt_79(&mut self) {
        self.emi_amt_79 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_79(&mut self, v: f64) {
        self.emi_amt_79 = v;
    }

    pub fn get_emi_amt_79(&self) -> f64 {
        self.emi_amt_79
    }

    // int64 emi_date_79 = 321;

    pub fn clear_emi_date_79(&mut self) {
        self.emi_date_79 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_79(&mut self, v: i64) {
        self.emi_date_79 = v;
    }

    pub fn get_emi_date_79(&self) -> i64 {
        self.emi_date_79
    }

    // double prin_amt_80 = 322;

    pub fn clear_prin_amt_80(&mut self) {
        self.prin_amt_80 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_80(&mut self, v: f64) {
        self.prin_amt_80 = v;
    }

    pub fn get_prin_amt_80(&self) -> f64 {
        self.prin_amt_80
    }

    // double int_amt_80 = 323;

    pub fn clear_int_amt_80(&mut self) {
        self.int_amt_80 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_80(&mut self, v: f64) {
        self.int_amt_80 = v;
    }

    pub fn get_int_amt_80(&self) -> f64 {
        self.int_amt_80
    }

    // double emi_amt_80 = 324;

    pub fn clear_emi_amt_80(&mut self) {
        self.emi_amt_80 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_80(&mut self, v: f64) {
        self.emi_amt_80 = v;
    }

    pub fn get_emi_amt_80(&self) -> f64 {
        self.emi_amt_80
    }

    // int64 emi_date_80 = 325;

    pub fn clear_emi_date_80(&mut self) {
        self.emi_date_80 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_80(&mut self, v: i64) {
        self.emi_date_80 = v;
    }

    pub fn get_emi_date_80(&self) -> i64 {
        self.emi_date_80
    }

    // double prin_amt_81 = 326;

    pub fn clear_prin_amt_81(&mut self) {
        self.prin_amt_81 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_81(&mut self, v: f64) {
        self.prin_amt_81 = v;
    }

    pub fn get_prin_amt_81(&self) -> f64 {
        self.prin_amt_81
    }

    // double int_amt_81 = 327;

    pub fn clear_int_amt_81(&mut self) {
        self.int_amt_81 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_81(&mut self, v: f64) {
        self.int_amt_81 = v;
    }

    pub fn get_int_amt_81(&self) -> f64 {
        self.int_amt_81
    }

    // double emi_amt_81 = 328;

    pub fn clear_emi_amt_81(&mut self) {
        self.emi_amt_81 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_81(&mut self, v: f64) {
        self.emi_amt_81 = v;
    }

    pub fn get_emi_amt_81(&self) -> f64 {
        self.emi_amt_81
    }

    // int64 emi_date_81 = 329;

    pub fn clear_emi_date_81(&mut self) {
        self.emi_date_81 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_81(&mut self, v: i64) {
        self.emi_date_81 = v;
    }

    pub fn get_emi_date_81(&self) -> i64 {
        self.emi_date_81
    }

    // double prin_amt_82 = 330;

    pub fn clear_prin_amt_82(&mut self) {
        self.prin_amt_82 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_82(&mut self, v: f64) {
        self.prin_amt_82 = v;
    }

    pub fn get_prin_amt_82(&self) -> f64 {
        self.prin_amt_82
    }

    // double int_amt_82 = 331;

    pub fn clear_int_amt_82(&mut self) {
        self.int_amt_82 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_82(&mut self, v: f64) {
        self.int_amt_82 = v;
    }

    pub fn get_int_amt_82(&self) -> f64 {
        self.int_amt_82
    }

    // double emi_amt_82 = 332;

    pub fn clear_emi_amt_82(&mut self) {
        self.emi_amt_82 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_82(&mut self, v: f64) {
        self.emi_amt_82 = v;
    }

    pub fn get_emi_amt_82(&self) -> f64 {
        self.emi_amt_82
    }

    // int64 emi_date_82 = 333;

    pub fn clear_emi_date_82(&mut self) {
        self.emi_date_82 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_82(&mut self, v: i64) {
        self.emi_date_82 = v;
    }

    pub fn get_emi_date_82(&self) -> i64 {
        self.emi_date_82
    }

    // double prin_amt_83 = 334;

    pub fn clear_prin_amt_83(&mut self) {
        self.prin_amt_83 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_83(&mut self, v: f64) {
        self.prin_amt_83 = v;
    }

    pub fn get_prin_amt_83(&self) -> f64 {
        self.prin_amt_83
    }

    // double int_amt_83 = 335;

    pub fn clear_int_amt_83(&mut self) {
        self.int_amt_83 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_83(&mut self, v: f64) {
        self.int_amt_83 = v;
    }

    pub fn get_int_amt_83(&self) -> f64 {
        self.int_amt_83
    }

    // double emi_amt_83 = 336;

    pub fn clear_emi_amt_83(&mut self) {
        self.emi_amt_83 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_83(&mut self, v: f64) {
        self.emi_amt_83 = v;
    }

    pub fn get_emi_amt_83(&self) -> f64 {
        self.emi_amt_83
    }

    // int64 emi_date_83 = 337;

    pub fn clear_emi_date_83(&mut self) {
        self.emi_date_83 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_83(&mut self, v: i64) {
        self.emi_date_83 = v;
    }

    pub fn get_emi_date_83(&self) -> i64 {
        self.emi_date_83
    }

    // double prin_amt_84 = 338;

    pub fn clear_prin_amt_84(&mut self) {
        self.prin_amt_84 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_84(&mut self, v: f64) {
        self.prin_amt_84 = v;
    }

    pub fn get_prin_amt_84(&self) -> f64 {
        self.prin_amt_84
    }

    // double int_amt_84 = 339;

    pub fn clear_int_amt_84(&mut self) {
        self.int_amt_84 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_84(&mut self, v: f64) {
        self.int_amt_84 = v;
    }

    pub fn get_int_amt_84(&self) -> f64 {
        self.int_amt_84
    }

    // double emi_amt_84 = 340;

    pub fn clear_emi_amt_84(&mut self) {
        self.emi_amt_84 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_84(&mut self, v: f64) {
        self.emi_amt_84 = v;
    }

    pub fn get_emi_amt_84(&self) -> f64 {
        self.emi_amt_84
    }

    // int64 emi_date_84 = 341;

    pub fn clear_emi_date_84(&mut self) {
        self.emi_date_84 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_84(&mut self, v: i64) {
        self.emi_date_84 = v;
    }

    pub fn get_emi_date_84(&self) -> i64 {
        self.emi_date_84
    }

    // double prin_amt_85 = 342;

    pub fn clear_prin_amt_85(&mut self) {
        self.prin_amt_85 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_85(&mut self, v: f64) {
        self.prin_amt_85 = v;
    }

    pub fn get_prin_amt_85(&self) -> f64 {
        self.prin_amt_85
    }

    // double int_amt_85 = 343;

    pub fn clear_int_amt_85(&mut self) {
        self.int_amt_85 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_85(&mut self, v: f64) {
        self.int_amt_85 = v;
    }

    pub fn get_int_amt_85(&self) -> f64 {
        self.int_amt_85
    }

    // double emi_amt_85 = 344;

    pub fn clear_emi_amt_85(&mut self) {
        self.emi_amt_85 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_85(&mut self, v: f64) {
        self.emi_amt_85 = v;
    }

    pub fn get_emi_amt_85(&self) -> f64 {
        self.emi_amt_85
    }

    // int64 emi_date_85 = 345;

    pub fn clear_emi_date_85(&mut self) {
        self.emi_date_85 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_85(&mut self, v: i64) {
        self.emi_date_85 = v;
    }

    pub fn get_emi_date_85(&self) -> i64 {
        self.emi_date_85
    }

    // double prin_amt_86 = 346;

    pub fn clear_prin_amt_86(&mut self) {
        self.prin_amt_86 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_86(&mut self, v: f64) {
        self.prin_amt_86 = v;
    }

    pub fn get_prin_amt_86(&self) -> f64 {
        self.prin_amt_86
    }

    // double int_amt_86 = 347;

    pub fn clear_int_amt_86(&mut self) {
        self.int_amt_86 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_86(&mut self, v: f64) {
        self.int_amt_86 = v;
    }

    pub fn get_int_amt_86(&self) -> f64 {
        self.int_amt_86
    }

    // double emi_amt_86 = 348;

    pub fn clear_emi_amt_86(&mut self) {
        self.emi_amt_86 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_86(&mut self, v: f64) {
        self.emi_amt_86 = v;
    }

    pub fn get_emi_amt_86(&self) -> f64 {
        self.emi_amt_86
    }

    // int64 emi_date_86 = 349;

    pub fn clear_emi_date_86(&mut self) {
        self.emi_date_86 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_86(&mut self, v: i64) {
        self.emi_date_86 = v;
    }

    pub fn get_emi_date_86(&self) -> i64 {
        self.emi_date_86
    }

    // double prin_amt_87 = 350;

    pub fn clear_prin_amt_87(&mut self) {
        self.prin_amt_87 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_87(&mut self, v: f64) {
        self.prin_amt_87 = v;
    }

    pub fn get_prin_amt_87(&self) -> f64 {
        self.prin_amt_87
    }

    // double int_amt_87 = 351;

    pub fn clear_int_amt_87(&mut self) {
        self.int_amt_87 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_87(&mut self, v: f64) {
        self.int_amt_87 = v;
    }

    pub fn get_int_amt_87(&self) -> f64 {
        self.int_amt_87
    }

    // double emi_amt_87 = 352;

    pub fn clear_emi_amt_87(&mut self) {
        self.emi_amt_87 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_87(&mut self, v: f64) {
        self.emi_amt_87 = v;
    }

    pub fn get_emi_amt_87(&self) -> f64 {
        self.emi_amt_87
    }

    // int64 emi_date_87 = 353;

    pub fn clear_emi_date_87(&mut self) {
        self.emi_date_87 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_87(&mut self, v: i64) {
        self.emi_date_87 = v;
    }

    pub fn get_emi_date_87(&self) -> i64 {
        self.emi_date_87
    }

    // double prin_amt_88 = 354;

    pub fn clear_prin_amt_88(&mut self) {
        self.prin_amt_88 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_88(&mut self, v: f64) {
        self.prin_amt_88 = v;
    }

    pub fn get_prin_amt_88(&self) -> f64 {
        self.prin_amt_88
    }

    // double int_amt_88 = 355;

    pub fn clear_int_amt_88(&mut self) {
        self.int_amt_88 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_88(&mut self, v: f64) {
        self.int_amt_88 = v;
    }

    pub fn get_int_amt_88(&self) -> f64 {
        self.int_amt_88
    }

    // double emi_amt_88 = 356;

    pub fn clear_emi_amt_88(&mut self) {
        self.emi_amt_88 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_88(&mut self, v: f64) {
        self.emi_amt_88 = v;
    }

    pub fn get_emi_amt_88(&self) -> f64 {
        self.emi_amt_88
    }

    // int64 emi_date_88 = 357;

    pub fn clear_emi_date_88(&mut self) {
        self.emi_date_88 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_88(&mut self, v: i64) {
        self.emi_date_88 = v;
    }

    pub fn get_emi_date_88(&self) -> i64 {
        self.emi_date_88
    }

    // double prin_amt_89 = 358;

    pub fn clear_prin_amt_89(&mut self) {
        self.prin_amt_89 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_89(&mut self, v: f64) {
        self.prin_amt_89 = v;
    }

    pub fn get_prin_amt_89(&self) -> f64 {
        self.prin_amt_89
    }

    // double int_amt_89 = 359;

    pub fn clear_int_amt_89(&mut self) {
        self.int_amt_89 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_89(&mut self, v: f64) {
        self.int_amt_89 = v;
    }

    pub fn get_int_amt_89(&self) -> f64 {
        self.int_amt_89
    }

    // double emi_amt_89 = 360;

    pub fn clear_emi_amt_89(&mut self) {
        self.emi_amt_89 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_89(&mut self, v: f64) {
        self.emi_amt_89 = v;
    }

    pub fn get_emi_amt_89(&self) -> f64 {
        self.emi_amt_89
    }

    // int64 emi_date_89 = 361;

    pub fn clear_emi_date_89(&mut self) {
        self.emi_date_89 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_89(&mut self, v: i64) {
        self.emi_date_89 = v;
    }

    pub fn get_emi_date_89(&self) -> i64 {
        self.emi_date_89
    }

    // double prin_amt_90 = 362;

    pub fn clear_prin_amt_90(&mut self) {
        self.prin_amt_90 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_90(&mut self, v: f64) {
        self.prin_amt_90 = v;
    }

    pub fn get_prin_amt_90(&self) -> f64 {
        self.prin_amt_90
    }

    // double int_amt_90 = 363;

    pub fn clear_int_amt_90(&mut self) {
        self.int_amt_90 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_90(&mut self, v: f64) {
        self.int_amt_90 = v;
    }

    pub fn get_int_amt_90(&self) -> f64 {
        self.int_amt_90
    }

    // double emi_amt_90 = 364;

    pub fn clear_emi_amt_90(&mut self) {
        self.emi_amt_90 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_90(&mut self, v: f64) {
        self.emi_amt_90 = v;
    }

    pub fn get_emi_amt_90(&self) -> f64 {
        self.emi_amt_90
    }

    // int64 emi_date_90 = 365;

    pub fn clear_emi_date_90(&mut self) {
        self.emi_date_90 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_90(&mut self, v: i64) {
        self.emi_date_90 = v;
    }

    pub fn get_emi_date_90(&self) -> i64 {
        self.emi_date_90
    }

    // double prin_amt_91 = 366;

    pub fn clear_prin_amt_91(&mut self) {
        self.prin_amt_91 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_91(&mut self, v: f64) {
        self.prin_amt_91 = v;
    }

    pub fn get_prin_amt_91(&self) -> f64 {
        self.prin_amt_91
    }

    // double int_amt_91 = 367;

    pub fn clear_int_amt_91(&mut self) {
        self.int_amt_91 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_91(&mut self, v: f64) {
        self.int_amt_91 = v;
    }

    pub fn get_int_amt_91(&self) -> f64 {
        self.int_amt_91
    }

    // double emi_amt_91 = 368;

    pub fn clear_emi_amt_91(&mut self) {
        self.emi_amt_91 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_91(&mut self, v: f64) {
        self.emi_amt_91 = v;
    }

    pub fn get_emi_amt_91(&self) -> f64 {
        self.emi_amt_91
    }

    // int64 emi_date_91 = 369;

    pub fn clear_emi_date_91(&mut self) {
        self.emi_date_91 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_91(&mut self, v: i64) {
        self.emi_date_91 = v;
    }

    pub fn get_emi_date_91(&self) -> i64 {
        self.emi_date_91
    }

    // double prin_amt_92 = 370;

    pub fn clear_prin_amt_92(&mut self) {
        self.prin_amt_92 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_92(&mut self, v: f64) {
        self.prin_amt_92 = v;
    }

    pub fn get_prin_amt_92(&self) -> f64 {
        self.prin_amt_92
    }

    // double int_amt_92 = 371;

    pub fn clear_int_amt_92(&mut self) {
        self.int_amt_92 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_92(&mut self, v: f64) {
        self.int_amt_92 = v;
    }

    pub fn get_int_amt_92(&self) -> f64 {
        self.int_amt_92
    }

    // double emi_amt_92 = 372;

    pub fn clear_emi_amt_92(&mut self) {
        self.emi_amt_92 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_92(&mut self, v: f64) {
        self.emi_amt_92 = v;
    }

    pub fn get_emi_amt_92(&self) -> f64 {
        self.emi_amt_92
    }

    // int64 emi_date_92 = 373;

    pub fn clear_emi_date_92(&mut self) {
        self.emi_date_92 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_92(&mut self, v: i64) {
        self.emi_date_92 = v;
    }

    pub fn get_emi_date_92(&self) -> i64 {
        self.emi_date_92
    }

    // double prin_amt_93 = 374;

    pub fn clear_prin_amt_93(&mut self) {
        self.prin_amt_93 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_93(&mut self, v: f64) {
        self.prin_amt_93 = v;
    }

    pub fn get_prin_amt_93(&self) -> f64 {
        self.prin_amt_93
    }

    // double int_amt_93 = 375;

    pub fn clear_int_amt_93(&mut self) {
        self.int_amt_93 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_93(&mut self, v: f64) {
        self.int_amt_93 = v;
    }

    pub fn get_int_amt_93(&self) -> f64 {
        self.int_amt_93
    }

    // double emi_amt_93 = 376;

    pub fn clear_emi_amt_93(&mut self) {
        self.emi_amt_93 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_93(&mut self, v: f64) {
        self.emi_amt_93 = v;
    }

    pub fn get_emi_amt_93(&self) -> f64 {
        self.emi_amt_93
    }

    // int64 emi_date_93 = 377;

    pub fn clear_emi_date_93(&mut self) {
        self.emi_date_93 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_93(&mut self, v: i64) {
        self.emi_date_93 = v;
    }

    pub fn get_emi_date_93(&self) -> i64 {
        self.emi_date_93
    }

    // double prin_amt_94 = 378;

    pub fn clear_prin_amt_94(&mut self) {
        self.prin_amt_94 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_94(&mut self, v: f64) {
        self.prin_amt_94 = v;
    }

    pub fn get_prin_amt_94(&self) -> f64 {
        self.prin_amt_94
    }

    // double int_amt_94 = 379;

    pub fn clear_int_amt_94(&mut self) {
        self.int_amt_94 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_94(&mut self, v: f64) {
        self.int_amt_94 = v;
    }

    pub fn get_int_amt_94(&self) -> f64 {
        self.int_amt_94
    }

    // double emi_amt_94 = 380;

    pub fn clear_emi_amt_94(&mut self) {
        self.emi_amt_94 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_94(&mut self, v: f64) {
        self.emi_amt_94 = v;
    }

    pub fn get_emi_amt_94(&self) -> f64 {
        self.emi_amt_94
    }

    // int64 emi_date_94 = 381;

    pub fn clear_emi_date_94(&mut self) {
        self.emi_date_94 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_94(&mut self, v: i64) {
        self.emi_date_94 = v;
    }

    pub fn get_emi_date_94(&self) -> i64 {
        self.emi_date_94
    }

    // double prin_amt_95 = 382;

    pub fn clear_prin_amt_95(&mut self) {
        self.prin_amt_95 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_95(&mut self, v: f64) {
        self.prin_amt_95 = v;
    }

    pub fn get_prin_amt_95(&self) -> f64 {
        self.prin_amt_95
    }

    // double int_amt_95 = 383;

    pub fn clear_int_amt_95(&mut self) {
        self.int_amt_95 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_95(&mut self, v: f64) {
        self.int_amt_95 = v;
    }

    pub fn get_int_amt_95(&self) -> f64 {
        self.int_amt_95
    }

    // double emi_amt_95 = 384;

    pub fn clear_emi_amt_95(&mut self) {
        self.emi_amt_95 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_95(&mut self, v: f64) {
        self.emi_amt_95 = v;
    }

    pub fn get_emi_amt_95(&self) -> f64 {
        self.emi_amt_95
    }

    // int64 emi_date_95 = 385;

    pub fn clear_emi_date_95(&mut self) {
        self.emi_date_95 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_95(&mut self, v: i64) {
        self.emi_date_95 = v;
    }

    pub fn get_emi_date_95(&self) -> i64 {
        self.emi_date_95
    }

    // double prin_amt_96 = 386;

    pub fn clear_prin_amt_96(&mut self) {
        self.prin_amt_96 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_96(&mut self, v: f64) {
        self.prin_amt_96 = v;
    }

    pub fn get_prin_amt_96(&self) -> f64 {
        self.prin_amt_96
    }

    // double int_amt_96 = 387;

    pub fn clear_int_amt_96(&mut self) {
        self.int_amt_96 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_96(&mut self, v: f64) {
        self.int_amt_96 = v;
    }

    pub fn get_int_amt_96(&self) -> f64 {
        self.int_amt_96
    }

    // double emi_amt_96 = 388;

    pub fn clear_emi_amt_96(&mut self) {
        self.emi_amt_96 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_96(&mut self, v: f64) {
        self.emi_amt_96 = v;
    }

    pub fn get_emi_amt_96(&self) -> f64 {
        self.emi_amt_96
    }

    // int64 emi_date_96 = 389;

    pub fn clear_emi_date_96(&mut self) {
        self.emi_date_96 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_96(&mut self, v: i64) {
        self.emi_date_96 = v;
    }

    pub fn get_emi_date_96(&self) -> i64 {
        self.emi_date_96
    }

    // double prin_amt_97 = 390;

    pub fn clear_prin_amt_97(&mut self) {
        self.prin_amt_97 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_97(&mut self, v: f64) {
        self.prin_amt_97 = v;
    }

    pub fn get_prin_amt_97(&self) -> f64 {
        self.prin_amt_97
    }

    // double int_amt_97 = 391;

    pub fn clear_int_amt_97(&mut self) {
        self.int_amt_97 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_97(&mut self, v: f64) {
        self.int_amt_97 = v;
    }

    pub fn get_int_amt_97(&self) -> f64 {
        self.int_amt_97
    }

    // double emi_amt_97 = 392;

    pub fn clear_emi_amt_97(&mut self) {
        self.emi_amt_97 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_97(&mut self, v: f64) {
        self.emi_amt_97 = v;
    }

    pub fn get_emi_amt_97(&self) -> f64 {
        self.emi_amt_97
    }

    // int64 emi_date_97 = 393;

    pub fn clear_emi_date_97(&mut self) {
        self.emi_date_97 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_97(&mut self, v: i64) {
        self.emi_date_97 = v;
    }

    pub fn get_emi_date_97(&self) -> i64 {
        self.emi_date_97
    }

    // double prin_amt_98 = 394;

    pub fn clear_prin_amt_98(&mut self) {
        self.prin_amt_98 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_98(&mut self, v: f64) {
        self.prin_amt_98 = v;
    }

    pub fn get_prin_amt_98(&self) -> f64 {
        self.prin_amt_98
    }

    // double int_amt_98 = 395;

    pub fn clear_int_amt_98(&mut self) {
        self.int_amt_98 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_98(&mut self, v: f64) {
        self.int_amt_98 = v;
    }

    pub fn get_int_amt_98(&self) -> f64 {
        self.int_amt_98
    }

    // double emi_amt_98 = 396;

    pub fn clear_emi_amt_98(&mut self) {
        self.emi_amt_98 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_98(&mut self, v: f64) {
        self.emi_amt_98 = v;
    }

    pub fn get_emi_amt_98(&self) -> f64 {
        self.emi_amt_98
    }

    // int64 emi_date_98 = 397;

    pub fn clear_emi_date_98(&mut self) {
        self.emi_date_98 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_98(&mut self, v: i64) {
        self.emi_date_98 = v;
    }

    pub fn get_emi_date_98(&self) -> i64 {
        self.emi_date_98
    }

    // double prin_amt_99 = 398;

    pub fn clear_prin_amt_99(&mut self) {
        self.prin_amt_99 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_99(&mut self, v: f64) {
        self.prin_amt_99 = v;
    }

    pub fn get_prin_amt_99(&self) -> f64 {
        self.prin_amt_99
    }

    // double int_amt_99 = 399;

    pub fn clear_int_amt_99(&mut self) {
        self.int_amt_99 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_99(&mut self, v: f64) {
        self.int_amt_99 = v;
    }

    pub fn get_int_amt_99(&self) -> f64 {
        self.int_amt_99
    }

    // double emi_amt_99 = 400;

    pub fn clear_emi_amt_99(&mut self) {
        self.emi_amt_99 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_99(&mut self, v: f64) {
        self.emi_amt_99 = v;
    }

    pub fn get_emi_amt_99(&self) -> f64 {
        self.emi_amt_99
    }

    // int64 emi_date_99 = 401;

    pub fn clear_emi_date_99(&mut self) {
        self.emi_date_99 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_99(&mut self, v: i64) {
        self.emi_date_99 = v;
    }

    pub fn get_emi_date_99(&self) -> i64 {
        self.emi_date_99
    }

    // double prin_amt_100 = 402;

    pub fn clear_prin_amt_100(&mut self) {
        self.prin_amt_100 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_100(&mut self, v: f64) {
        self.prin_amt_100 = v;
    }

    pub fn get_prin_amt_100(&self) -> f64 {
        self.prin_amt_100
    }

    // double int_amt_100 = 403;

    pub fn clear_int_amt_100(&mut self) {
        self.int_amt_100 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_100(&mut self, v: f64) {
        self.int_amt_100 = v;
    }

    pub fn get_int_amt_100(&self) -> f64 {
        self.int_amt_100
    }

    // double emi_amt_100 = 404;

    pub fn clear_emi_amt_100(&mut self) {
        self.emi_amt_100 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_100(&mut self, v: f64) {
        self.emi_amt_100 = v;
    }

    pub fn get_emi_amt_100(&self) -> f64 {
        self.emi_amt_100
    }

    // int64 emi_date_100 = 405;

    pub fn clear_emi_date_100(&mut self) {
        self.emi_date_100 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_100(&mut self, v: i64) {
        self.emi_date_100 = v;
    }

    pub fn get_emi_date_100(&self) -> i64 {
        self.emi_date_100
    }

    // double prin_amt_101 = 406;

    pub fn clear_prin_amt_101(&mut self) {
        self.prin_amt_101 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_101(&mut self, v: f64) {
        self.prin_amt_101 = v;
    }

    pub fn get_prin_amt_101(&self) -> f64 {
        self.prin_amt_101
    }

    // double int_amt_101 = 407;

    pub fn clear_int_amt_101(&mut self) {
        self.int_amt_101 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_101(&mut self, v: f64) {
        self.int_amt_101 = v;
    }

    pub fn get_int_amt_101(&self) -> f64 {
        self.int_amt_101
    }

    // double emi_amt_101 = 408;

    pub fn clear_emi_amt_101(&mut self) {
        self.emi_amt_101 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_101(&mut self, v: f64) {
        self.emi_amt_101 = v;
    }

    pub fn get_emi_amt_101(&self) -> f64 {
        self.emi_amt_101
    }

    // int64 emi_date_101 = 409;

    pub fn clear_emi_date_101(&mut self) {
        self.emi_date_101 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_101(&mut self, v: i64) {
        self.emi_date_101 = v;
    }

    pub fn get_emi_date_101(&self) -> i64 {
        self.emi_date_101
    }

    // double prin_amt_102 = 410;

    pub fn clear_prin_amt_102(&mut self) {
        self.prin_amt_102 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_102(&mut self, v: f64) {
        self.prin_amt_102 = v;
    }

    pub fn get_prin_amt_102(&self) -> f64 {
        self.prin_amt_102
    }

    // double int_amt_102 = 411;

    pub fn clear_int_amt_102(&mut self) {
        self.int_amt_102 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_102(&mut self, v: f64) {
        self.int_amt_102 = v;
    }

    pub fn get_int_amt_102(&self) -> f64 {
        self.int_amt_102
    }

    // double emi_amt_102 = 412;

    pub fn clear_emi_amt_102(&mut self) {
        self.emi_amt_102 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_102(&mut self, v: f64) {
        self.emi_amt_102 = v;
    }

    pub fn get_emi_amt_102(&self) -> f64 {
        self.emi_amt_102
    }

    // int64 emi_date_102 = 413;

    pub fn clear_emi_date_102(&mut self) {
        self.emi_date_102 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_102(&mut self, v: i64) {
        self.emi_date_102 = v;
    }

    pub fn get_emi_date_102(&self) -> i64 {
        self.emi_date_102
    }

    // double prin_amt_103 = 414;

    pub fn clear_prin_amt_103(&mut self) {
        self.prin_amt_103 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_103(&mut self, v: f64) {
        self.prin_amt_103 = v;
    }

    pub fn get_prin_amt_103(&self) -> f64 {
        self.prin_amt_103
    }

    // double int_amt_103 = 415;

    pub fn clear_int_amt_103(&mut self) {
        self.int_amt_103 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_103(&mut self, v: f64) {
        self.int_amt_103 = v;
    }

    pub fn get_int_amt_103(&self) -> f64 {
        self.int_amt_103
    }

    // double emi_amt_103 = 416;

    pub fn clear_emi_amt_103(&mut self) {
        self.emi_amt_103 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_103(&mut self, v: f64) {
        self.emi_amt_103 = v;
    }

    pub fn get_emi_amt_103(&self) -> f64 {
        self.emi_amt_103
    }

    // int64 emi_date_103 = 417;

    pub fn clear_emi_date_103(&mut self) {
        self.emi_date_103 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_103(&mut self, v: i64) {
        self.emi_date_103 = v;
    }

    pub fn get_emi_date_103(&self) -> i64 {
        self.emi_date_103
    }

    // double prin_amt_104 = 418;

    pub fn clear_prin_amt_104(&mut self) {
        self.prin_amt_104 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_104(&mut self, v: f64) {
        self.prin_amt_104 = v;
    }

    pub fn get_prin_amt_104(&self) -> f64 {
        self.prin_amt_104
    }

    // double int_amt_104 = 419;

    pub fn clear_int_amt_104(&mut self) {
        self.int_amt_104 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_104(&mut self, v: f64) {
        self.int_amt_104 = v;
    }

    pub fn get_int_amt_104(&self) -> f64 {
        self.int_amt_104
    }

    // double emi_amt_104 = 420;

    pub fn clear_emi_amt_104(&mut self) {
        self.emi_amt_104 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_104(&mut self, v: f64) {
        self.emi_amt_104 = v;
    }

    pub fn get_emi_amt_104(&self) -> f64 {
        self.emi_amt_104
    }

    // int64 emi_date_104 = 421;

    pub fn clear_emi_date_104(&mut self) {
        self.emi_date_104 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_104(&mut self, v: i64) {
        self.emi_date_104 = v;
    }

    pub fn get_emi_date_104(&self) -> i64 {
        self.emi_date_104
    }

    // double prin_amt_105 = 422;

    pub fn clear_prin_amt_105(&mut self) {
        self.prin_amt_105 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_105(&mut self, v: f64) {
        self.prin_amt_105 = v;
    }

    pub fn get_prin_amt_105(&self) -> f64 {
        self.prin_amt_105
    }

    // double int_amt_105 = 423;

    pub fn clear_int_amt_105(&mut self) {
        self.int_amt_105 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_105(&mut self, v: f64) {
        self.int_amt_105 = v;
    }

    pub fn get_int_amt_105(&self) -> f64 {
        self.int_amt_105
    }

    // double emi_amt_105 = 424;

    pub fn clear_emi_amt_105(&mut self) {
        self.emi_amt_105 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_105(&mut self, v: f64) {
        self.emi_amt_105 = v;
    }

    pub fn get_emi_amt_105(&self) -> f64 {
        self.emi_amt_105
    }

    // int64 emi_date_105 = 425;

    pub fn clear_emi_date_105(&mut self) {
        self.emi_date_105 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_105(&mut self, v: i64) {
        self.emi_date_105 = v;
    }

    pub fn get_emi_date_105(&self) -> i64 {
        self.emi_date_105
    }

    // double prin_amt_106 = 426;

    pub fn clear_prin_amt_106(&mut self) {
        self.prin_amt_106 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_106(&mut self, v: f64) {
        self.prin_amt_106 = v;
    }

    pub fn get_prin_amt_106(&self) -> f64 {
        self.prin_amt_106
    }

    // double int_amt_106 = 427;

    pub fn clear_int_amt_106(&mut self) {
        self.int_amt_106 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_106(&mut self, v: f64) {
        self.int_amt_106 = v;
    }

    pub fn get_int_amt_106(&self) -> f64 {
        self.int_amt_106
    }

    // double emi_amt_106 = 428;

    pub fn clear_emi_amt_106(&mut self) {
        self.emi_amt_106 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_106(&mut self, v: f64) {
        self.emi_amt_106 = v;
    }

    pub fn get_emi_amt_106(&self) -> f64 {
        self.emi_amt_106
    }

    // int64 emi_date_106 = 429;

    pub fn clear_emi_date_106(&mut self) {
        self.emi_date_106 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_106(&mut self, v: i64) {
        self.emi_date_106 = v;
    }

    pub fn get_emi_date_106(&self) -> i64 {
        self.emi_date_106
    }

    // double prin_amt_107 = 430;

    pub fn clear_prin_amt_107(&mut self) {
        self.prin_amt_107 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_107(&mut self, v: f64) {
        self.prin_amt_107 = v;
    }

    pub fn get_prin_amt_107(&self) -> f64 {
        self.prin_amt_107
    }

    // double int_amt_107 = 431;

    pub fn clear_int_amt_107(&mut self) {
        self.int_amt_107 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_107(&mut self, v: f64) {
        self.int_amt_107 = v;
    }

    pub fn get_int_amt_107(&self) -> f64 {
        self.int_amt_107
    }

    // double emi_amt_107 = 432;

    pub fn clear_emi_amt_107(&mut self) {
        self.emi_amt_107 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_107(&mut self, v: f64) {
        self.emi_amt_107 = v;
    }

    pub fn get_emi_amt_107(&self) -> f64 {
        self.emi_amt_107
    }

    // int64 emi_date_107 = 433;

    pub fn clear_emi_date_107(&mut self) {
        self.emi_date_107 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_107(&mut self, v: i64) {
        self.emi_date_107 = v;
    }

    pub fn get_emi_date_107(&self) -> i64 {
        self.emi_date_107
    }

    // double prin_amt_108 = 434;

    pub fn clear_prin_amt_108(&mut self) {
        self.prin_amt_108 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_108(&mut self, v: f64) {
        self.prin_amt_108 = v;
    }

    pub fn get_prin_amt_108(&self) -> f64 {
        self.prin_amt_108
    }

    // double int_amt_108 = 435;

    pub fn clear_int_amt_108(&mut self) {
        self.int_amt_108 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_108(&mut self, v: f64) {
        self.int_amt_108 = v;
    }

    pub fn get_int_amt_108(&self) -> f64 {
        self.int_amt_108
    }

    // double emi_amt_108 = 436;

    pub fn clear_emi_amt_108(&mut self) {
        self.emi_amt_108 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_108(&mut self, v: f64) {
        self.emi_amt_108 = v;
    }

    pub fn get_emi_amt_108(&self) -> f64 {
        self.emi_amt_108
    }

    // int64 emi_date_108 = 437;

    pub fn clear_emi_date_108(&mut self) {
        self.emi_date_108 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_108(&mut self, v: i64) {
        self.emi_date_108 = v;
    }

    pub fn get_emi_date_108(&self) -> i64 {
        self.emi_date_108
    }

    // double prin_amt_109 = 438;

    pub fn clear_prin_amt_109(&mut self) {
        self.prin_amt_109 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_109(&mut self, v: f64) {
        self.prin_amt_109 = v;
    }

    pub fn get_prin_amt_109(&self) -> f64 {
        self.prin_amt_109
    }

    // double int_amt_109 = 439;

    pub fn clear_int_amt_109(&mut self) {
        self.int_amt_109 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_109(&mut self, v: f64) {
        self.int_amt_109 = v;
    }

    pub fn get_int_amt_109(&self) -> f64 {
        self.int_amt_109
    }

    // double emi_amt_109 = 440;

    pub fn clear_emi_amt_109(&mut self) {
        self.emi_amt_109 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_109(&mut self, v: f64) {
        self.emi_amt_109 = v;
    }

    pub fn get_emi_amt_109(&self) -> f64 {
        self.emi_amt_109
    }

    // int64 emi_date_109 = 441;

    pub fn clear_emi_date_109(&mut self) {
        self.emi_date_109 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_109(&mut self, v: i64) {
        self.emi_date_109 = v;
    }

    pub fn get_emi_date_109(&self) -> i64 {
        self.emi_date_109
    }

    // double prin_amt_110 = 442;

    pub fn clear_prin_amt_110(&mut self) {
        self.prin_amt_110 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_110(&mut self, v: f64) {
        self.prin_amt_110 = v;
    }

    pub fn get_prin_amt_110(&self) -> f64 {
        self.prin_amt_110
    }

    // double int_amt_110 = 443;

    pub fn clear_int_amt_110(&mut self) {
        self.int_amt_110 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_110(&mut self, v: f64) {
        self.int_amt_110 = v;
    }

    pub fn get_int_amt_110(&self) -> f64 {
        self.int_amt_110
    }

    // double emi_amt_110 = 444;

    pub fn clear_emi_amt_110(&mut self) {
        self.emi_amt_110 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_110(&mut self, v: f64) {
        self.emi_amt_110 = v;
    }

    pub fn get_emi_amt_110(&self) -> f64 {
        self.emi_amt_110
    }

    // int64 emi_date_110 = 445;

    pub fn clear_emi_date_110(&mut self) {
        self.emi_date_110 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_110(&mut self, v: i64) {
        self.emi_date_110 = v;
    }

    pub fn get_emi_date_110(&self) -> i64 {
        self.emi_date_110
    }

    // double prin_amt_111 = 446;

    pub fn clear_prin_amt_111(&mut self) {
        self.prin_amt_111 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_111(&mut self, v: f64) {
        self.prin_amt_111 = v;
    }

    pub fn get_prin_amt_111(&self) -> f64 {
        self.prin_amt_111
    }

    // double int_amt_111 = 447;

    pub fn clear_int_amt_111(&mut self) {
        self.int_amt_111 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_111(&mut self, v: f64) {
        self.int_amt_111 = v;
    }

    pub fn get_int_amt_111(&self) -> f64 {
        self.int_amt_111
    }

    // double emi_amt_111 = 448;

    pub fn clear_emi_amt_111(&mut self) {
        self.emi_amt_111 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_111(&mut self, v: f64) {
        self.emi_amt_111 = v;
    }

    pub fn get_emi_amt_111(&self) -> f64 {
        self.emi_amt_111
    }

    // int64 emi_date_111 = 449;

    pub fn clear_emi_date_111(&mut self) {
        self.emi_date_111 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_111(&mut self, v: i64) {
        self.emi_date_111 = v;
    }

    pub fn get_emi_date_111(&self) -> i64 {
        self.emi_date_111
    }

    // double prin_amt_112 = 450;

    pub fn clear_prin_amt_112(&mut self) {
        self.prin_amt_112 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_112(&mut self, v: f64) {
        self.prin_amt_112 = v;
    }

    pub fn get_prin_amt_112(&self) -> f64 {
        self.prin_amt_112
    }

    // double int_amt_112 = 451;

    pub fn clear_int_amt_112(&mut self) {
        self.int_amt_112 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_112(&mut self, v: f64) {
        self.int_amt_112 = v;
    }

    pub fn get_int_amt_112(&self) -> f64 {
        self.int_amt_112
    }

    // double emi_amt_112 = 452;

    pub fn clear_emi_amt_112(&mut self) {
        self.emi_amt_112 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_112(&mut self, v: f64) {
        self.emi_amt_112 = v;
    }

    pub fn get_emi_amt_112(&self) -> f64 {
        self.emi_amt_112
    }

    // int64 emi_date_112 = 453;

    pub fn clear_emi_date_112(&mut self) {
        self.emi_date_112 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_112(&mut self, v: i64) {
        self.emi_date_112 = v;
    }

    pub fn get_emi_date_112(&self) -> i64 {
        self.emi_date_112
    }

    // double prin_amt_113 = 454;

    pub fn clear_prin_amt_113(&mut self) {
        self.prin_amt_113 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_113(&mut self, v: f64) {
        self.prin_amt_113 = v;
    }

    pub fn get_prin_amt_113(&self) -> f64 {
        self.prin_amt_113
    }

    // double int_amt_113 = 455;

    pub fn clear_int_amt_113(&mut self) {
        self.int_amt_113 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_113(&mut self, v: f64) {
        self.int_amt_113 = v;
    }

    pub fn get_int_amt_113(&self) -> f64 {
        self.int_amt_113
    }

    // double emi_amt_113 = 456;

    pub fn clear_emi_amt_113(&mut self) {
        self.emi_amt_113 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_113(&mut self, v: f64) {
        self.emi_amt_113 = v;
    }

    pub fn get_emi_amt_113(&self) -> f64 {
        self.emi_amt_113
    }

    // int64 emi_date_113 = 457;

    pub fn clear_emi_date_113(&mut self) {
        self.emi_date_113 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_113(&mut self, v: i64) {
        self.emi_date_113 = v;
    }

    pub fn get_emi_date_113(&self) -> i64 {
        self.emi_date_113
    }

    // double prin_amt_114 = 458;

    pub fn clear_prin_amt_114(&mut self) {
        self.prin_amt_114 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_114(&mut self, v: f64) {
        self.prin_amt_114 = v;
    }

    pub fn get_prin_amt_114(&self) -> f64 {
        self.prin_amt_114
    }

    // double int_amt_114 = 459;

    pub fn clear_int_amt_114(&mut self) {
        self.int_amt_114 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_114(&mut self, v: f64) {
        self.int_amt_114 = v;
    }

    pub fn get_int_amt_114(&self) -> f64 {
        self.int_amt_114
    }

    // double emi_amt_114 = 460;

    pub fn clear_emi_amt_114(&mut self) {
        self.emi_amt_114 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_114(&mut self, v: f64) {
        self.emi_amt_114 = v;
    }

    pub fn get_emi_amt_114(&self) -> f64 {
        self.emi_amt_114
    }

    // int64 emi_date_114 = 461;

    pub fn clear_emi_date_114(&mut self) {
        self.emi_date_114 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_114(&mut self, v: i64) {
        self.emi_date_114 = v;
    }

    pub fn get_emi_date_114(&self) -> i64 {
        self.emi_date_114
    }

    // double prin_amt_115 = 462;

    pub fn clear_prin_amt_115(&mut self) {
        self.prin_amt_115 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_115(&mut self, v: f64) {
        self.prin_amt_115 = v;
    }

    pub fn get_prin_amt_115(&self) -> f64 {
        self.prin_amt_115
    }

    // double int_amt_115 = 463;

    pub fn clear_int_amt_115(&mut self) {
        self.int_amt_115 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_115(&mut self, v: f64) {
        self.int_amt_115 = v;
    }

    pub fn get_int_amt_115(&self) -> f64 {
        self.int_amt_115
    }

    // double emi_amt_115 = 464;

    pub fn clear_emi_amt_115(&mut self) {
        self.emi_amt_115 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_115(&mut self, v: f64) {
        self.emi_amt_115 = v;
    }

    pub fn get_emi_amt_115(&self) -> f64 {
        self.emi_amt_115
    }

    // int64 emi_date_115 = 465;

    pub fn clear_emi_date_115(&mut self) {
        self.emi_date_115 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_115(&mut self, v: i64) {
        self.emi_date_115 = v;
    }

    pub fn get_emi_date_115(&self) -> i64 {
        self.emi_date_115
    }

    // double prin_amt_116 = 466;

    pub fn clear_prin_amt_116(&mut self) {
        self.prin_amt_116 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_116(&mut self, v: f64) {
        self.prin_amt_116 = v;
    }

    pub fn get_prin_amt_116(&self) -> f64 {
        self.prin_amt_116
    }

    // double int_amt_116 = 467;

    pub fn clear_int_amt_116(&mut self) {
        self.int_amt_116 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_116(&mut self, v: f64) {
        self.int_amt_116 = v;
    }

    pub fn get_int_amt_116(&self) -> f64 {
        self.int_amt_116
    }

    // double emi_amt_116 = 468;

    pub fn clear_emi_amt_116(&mut self) {
        self.emi_amt_116 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_116(&mut self, v: f64) {
        self.emi_amt_116 = v;
    }

    pub fn get_emi_amt_116(&self) -> f64 {
        self.emi_amt_116
    }

    // int64 emi_date_116 = 469;

    pub fn clear_emi_date_116(&mut self) {
        self.emi_date_116 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_116(&mut self, v: i64) {
        self.emi_date_116 = v;
    }

    pub fn get_emi_date_116(&self) -> i64 {
        self.emi_date_116
    }

    // double prin_amt_117 = 470;

    pub fn clear_prin_amt_117(&mut self) {
        self.prin_amt_117 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_117(&mut self, v: f64) {
        self.prin_amt_117 = v;
    }

    pub fn get_prin_amt_117(&self) -> f64 {
        self.prin_amt_117
    }

    // double int_amt_117 = 471;

    pub fn clear_int_amt_117(&mut self) {
        self.int_amt_117 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_117(&mut self, v: f64) {
        self.int_amt_117 = v;
    }

    pub fn get_int_amt_117(&self) -> f64 {
        self.int_amt_117
    }

    // double emi_amt_117 = 472;

    pub fn clear_emi_amt_117(&mut self) {
        self.emi_amt_117 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_117(&mut self, v: f64) {
        self.emi_amt_117 = v;
    }

    pub fn get_emi_amt_117(&self) -> f64 {
        self.emi_amt_117
    }

    // int64 emi_date_117 = 473;

    pub fn clear_emi_date_117(&mut self) {
        self.emi_date_117 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_117(&mut self, v: i64) {
        self.emi_date_117 = v;
    }

    pub fn get_emi_date_117(&self) -> i64 {
        self.emi_date_117
    }

    // double prin_amt_118 = 474;

    pub fn clear_prin_amt_118(&mut self) {
        self.prin_amt_118 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_118(&mut self, v: f64) {
        self.prin_amt_118 = v;
    }

    pub fn get_prin_amt_118(&self) -> f64 {
        self.prin_amt_118
    }

    // double int_amt_118 = 475;

    pub fn clear_int_amt_118(&mut self) {
        self.int_amt_118 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_118(&mut self, v: f64) {
        self.int_amt_118 = v;
    }

    pub fn get_int_amt_118(&self) -> f64 {
        self.int_amt_118
    }

    // double emi_amt_118 = 476;

    pub fn clear_emi_amt_118(&mut self) {
        self.emi_amt_118 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_118(&mut self, v: f64) {
        self.emi_amt_118 = v;
    }

    pub fn get_emi_amt_118(&self) -> f64 {
        self.emi_amt_118
    }

    // int64 emi_date_118 = 477;

    pub fn clear_emi_date_118(&mut self) {
        self.emi_date_118 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_118(&mut self, v: i64) {
        self.emi_date_118 = v;
    }

    pub fn get_emi_date_118(&self) -> i64 {
        self.emi_date_118
    }

    // double prin_amt_119 = 478;

    pub fn clear_prin_amt_119(&mut self) {
        self.prin_amt_119 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_119(&mut self, v: f64) {
        self.prin_amt_119 = v;
    }

    pub fn get_prin_amt_119(&self) -> f64 {
        self.prin_amt_119
    }

    // double int_amt_119 = 479;

    pub fn clear_int_amt_119(&mut self) {
        self.int_amt_119 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_119(&mut self, v: f64) {
        self.int_amt_119 = v;
    }

    pub fn get_int_amt_119(&self) -> f64 {
        self.int_amt_119
    }

    // double emi_amt_119 = 480;

    pub fn clear_emi_amt_119(&mut self) {
        self.emi_amt_119 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_119(&mut self, v: f64) {
        self.emi_amt_119 = v;
    }

    pub fn get_emi_amt_119(&self) -> f64 {
        self.emi_amt_119
    }

    // int64 emi_date_119 = 481;

    pub fn clear_emi_date_119(&mut self) {
        self.emi_date_119 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_119(&mut self, v: i64) {
        self.emi_date_119 = v;
    }

    pub fn get_emi_date_119(&self) -> i64 {
        self.emi_date_119
    }

    // double prin_amt_120 = 482;

    pub fn clear_prin_amt_120(&mut self) {
        self.prin_amt_120 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt_120(&mut self, v: f64) {
        self.prin_amt_120 = v;
    }

    pub fn get_prin_amt_120(&self) -> f64 {
        self.prin_amt_120
    }

    // double int_amt_120 = 483;

    pub fn clear_int_amt_120(&mut self) {
        self.int_amt_120 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_120(&mut self, v: f64) {
        self.int_amt_120 = v;
    }

    pub fn get_int_amt_120(&self) -> f64 {
        self.int_amt_120
    }

    // double emi_amt_120 = 484;

    pub fn clear_emi_amt_120(&mut self) {
        self.emi_amt_120 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt_120(&mut self, v: f64) {
        self.emi_amt_120 = v;
    }

    pub fn get_emi_amt_120(&self) -> f64 {
        self.emi_amt_120
    }

    // int64 emi_date_120 = 485;

    pub fn clear_emi_date_120(&mut self) {
        self.emi_date_120 = 0;
    }

    // Param is passed by value, moved
    pub fn set_emi_date_120(&mut self, v: i64) {
        self.emi_date_120 = v;
    }

    pub fn get_emi_date_120(&self) -> i64 {
        self.emi_date_120
    }

    // int64 d_f_coc_emi_date_loan_booked = 486;

    pub fn clear_d_f_coc_emi_date_loan_booked(&mut self) {
        self.d_f_coc_emi_date_loan_booked = 0;
    }

    // Param is passed by value, moved
    pub fn set_d_f_coc_emi_date_loan_booked(&mut self, v: i64) {
        self.d_f_coc_emi_date_loan_booked = v;
    }

    pub fn get_d_f_coc_emi_date_loan_booked(&self) -> i64 {
        self.d_f_coc_emi_date_loan_booked
    }

    // string v_f_coc_emi_loan_src = 487;

    pub fn clear_v_f_coc_emi_loan_src(&mut self) {
        self.v_f_coc_emi_loan_src.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_f_coc_emi_loan_src(&mut self, v: ::std::string::String) {
        self.v_f_coc_emi_loan_src = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_f_coc_emi_loan_src(&mut self) -> &mut ::std::string::String {
        &mut self.v_f_coc_emi_loan_src
    }

    // Take field
    pub fn take_v_f_coc_emi_loan_src(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_f_coc_emi_loan_src, ::std::string::String::new())
    }

    pub fn get_v_f_coc_emi_loan_src(&self) -> &str {
        &self.v_f_coc_emi_loan_src
    }

    // string v_f_coc_emi_tenure = 488;

    pub fn clear_v_f_coc_emi_tenure(&mut self) {
        self.v_f_coc_emi_tenure.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_f_coc_emi_tenure(&mut self, v: ::std::string::String) {
        self.v_f_coc_emi_tenure = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_f_coc_emi_tenure(&mut self) -> &mut ::std::string::String {
        &mut self.v_f_coc_emi_tenure
    }

    // Take field
    pub fn take_v_f_coc_emi_tenure(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_f_coc_emi_tenure, ::std::string::String::new())
    }

    pub fn get_v_f_coc_emi_tenure(&self) -> &str {
        &self.v_f_coc_emi_tenure
    }

    // double n_f_coc_emi_loan_amount = 489;

    pub fn clear_n_f_coc_emi_loan_amount(&mut self) {
        self.n_f_coc_emi_loan_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_n_f_coc_emi_loan_amount(&mut self, v: f64) {
        self.n_f_coc_emi_loan_amount = v;
    }

    pub fn get_n_f_coc_emi_loan_amount(&self) -> f64 {
        self.n_f_coc_emi_loan_amount
    }

    // string v_f_coc_emi_loan_nbr = 490;

    pub fn clear_v_f_coc_emi_loan_nbr(&mut self) {
        self.v_f_coc_emi_loan_nbr.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_f_coc_emi_loan_nbr(&mut self, v: ::std::string::String) {
        self.v_f_coc_emi_loan_nbr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_f_coc_emi_loan_nbr(&mut self) -> &mut ::std::string::String {
        &mut self.v_f_coc_emi_loan_nbr
    }

    // Take field
    pub fn take_v_f_coc_emi_loan_nbr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_f_coc_emi_loan_nbr, ::std::string::String::new())
    }

    pub fn get_v_f_coc_emi_loan_nbr(&self) -> &str {
        &self.v_f_coc_emi_loan_nbr
    }

    // double n_f_coc_emi_out_prin = 491;

    pub fn clear_n_f_coc_emi_out_prin(&mut self) {
        self.n_f_coc_emi_out_prin = 0.;
    }

    // Param is passed by value, moved
    pub fn set_n_f_coc_emi_out_prin(&mut self, v: f64) {
        self.n_f_coc_emi_out_prin = v;
    }

    pub fn get_n_f_coc_emi_out_prin(&self) -> f64 {
        self.n_f_coc_emi_out_prin
    }

    // double n_f_coc_emi_out_int = 492;

    pub fn clear_n_f_coc_emi_out_int(&mut self) {
        self.n_f_coc_emi_out_int = 0.;
    }

    // Param is passed by value, moved
    pub fn set_n_f_coc_emi_out_int(&mut self, v: f64) {
        self.n_f_coc_emi_out_int = v;
    }

    pub fn get_n_f_coc_emi_out_int(&self) -> f64 {
        self.n_f_coc_emi_out_int
    }

    // double total_outstanding = 493;

    pub fn clear_total_outstanding(&mut self) {
        self.total_outstanding = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_outstanding(&mut self, v: f64) {
        self.total_outstanding = v;
    }

    pub fn get_total_outstanding(&self) -> f64 {
        self.total_outstanding
    }

    // double v_f_coc_emi_rate_of_int = 494;

    pub fn clear_v_f_coc_emi_rate_of_int(&mut self) {
        self.v_f_coc_emi_rate_of_int = 0.;
    }

    // Param is passed by value, moved
    pub fn set_v_f_coc_emi_rate_of_int(&mut self, v: f64) {
        self.v_f_coc_emi_rate_of_int = v;
    }

    pub fn get_v_f_coc_emi_rate_of_int(&self) -> f64 {
        self.v_f_coc_emi_rate_of_int
    }

    // string n_f_coc_emi_org = 495;

    pub fn clear_n_f_coc_emi_org(&mut self) {
        self.n_f_coc_emi_org.clear();
    }

    // Param is passed by value, moved
    pub fn set_n_f_coc_emi_org(&mut self, v: ::std::string::String) {
        self.n_f_coc_emi_org = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_n_f_coc_emi_org(&mut self) -> &mut ::std::string::String {
        &mut self.n_f_coc_emi_org
    }

    // Take field
    pub fn take_n_f_coc_emi_org(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.n_f_coc_emi_org, ::std::string::String::new())
    }

    pub fn get_n_f_coc_emi_org(&self) -> &str {
        &self.n_f_coc_emi_org
    }

    // string v_f_coc_emi_chg_type = 496;

    pub fn clear_v_f_coc_emi_chg_type(&mut self) {
        self.v_f_coc_emi_chg_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_f_coc_emi_chg_type(&mut self, v: ::std::string::String) {
        self.v_f_coc_emi_chg_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_f_coc_emi_chg_type(&mut self) -> &mut ::std::string::String {
        &mut self.v_f_coc_emi_chg_type
    }

    // Take field
    pub fn take_v_f_coc_emi_chg_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_f_coc_emi_chg_type, ::std::string::String::new())
    }

    pub fn get_v_f_coc_emi_chg_type(&self) -> &str {
        &self.v_f_coc_emi_chg_type
    }

    // int64 filler = 497;

    pub fn clear_filler(&mut self) {
        self.filler = 0;
    }

    // Param is passed by value, moved
    pub fn set_filler(&mut self, v: i64) {
        self.filler = v;
    }

    pub fn get_filler(&self) -> i64 {
        self.filler
    }

    // repeated .Cashflow cashflows = 498;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.org)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.logo)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acct)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.loan_nbr)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tenure)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_1 = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_1 = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_1 = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_1 = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_2 = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_2 = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_2 = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_2 = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_3 = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_3 = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_3 = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_3 = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_4 = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_4 = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_4 = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_4 = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_5 = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_5 = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_5 = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_5 = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_6 = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_6 = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_6 = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_6 = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_7 = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_7 = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_7 = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_7 = tmp;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_8 = tmp;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_8 = tmp;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_8 = tmp;
                },
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_8 = tmp;
                },
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_9 = tmp;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_9 = tmp;
                },
                40 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_9 = tmp;
                },
                41 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_9 = tmp;
                },
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_10 = tmp;
                },
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_10 = tmp;
                },
                44 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_10 = tmp;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_10 = tmp;
                },
                46 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_11 = tmp;
                },
                47 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_11 = tmp;
                },
                48 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_11 = tmp;
                },
                49 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_11 = tmp;
                },
                50 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_12 = tmp;
                },
                51 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_12 = tmp;
                },
                52 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_12 = tmp;
                },
                53 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_12 = tmp;
                },
                54 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_13 = tmp;
                },
                55 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_13 = tmp;
                },
                56 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_13 = tmp;
                },
                57 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_13 = tmp;
                },
                58 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_14 = tmp;
                },
                59 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_14 = tmp;
                },
                60 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_14 = tmp;
                },
                61 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_14 = tmp;
                },
                62 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_15 = tmp;
                },
                63 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_15 = tmp;
                },
                64 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_15 = tmp;
                },
                65 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_15 = tmp;
                },
                66 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_16 = tmp;
                },
                67 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_16 = tmp;
                },
                68 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_16 = tmp;
                },
                69 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_16 = tmp;
                },
                70 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_17 = tmp;
                },
                71 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_17 = tmp;
                },
                72 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_17 = tmp;
                },
                73 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_17 = tmp;
                },
                74 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_18 = tmp;
                },
                75 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_18 = tmp;
                },
                76 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_18 = tmp;
                },
                77 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_18 = tmp;
                },
                78 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_19 = tmp;
                },
                79 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_19 = tmp;
                },
                80 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_19 = tmp;
                },
                81 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_19 = tmp;
                },
                82 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_20 = tmp;
                },
                83 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_20 = tmp;
                },
                84 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_20 = tmp;
                },
                85 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_20 = tmp;
                },
                86 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_21 = tmp;
                },
                87 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_21 = tmp;
                },
                88 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_21 = tmp;
                },
                89 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_21 = tmp;
                },
                90 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_22 = tmp;
                },
                91 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_22 = tmp;
                },
                92 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_22 = tmp;
                },
                93 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_22 = tmp;
                },
                94 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_23 = tmp;
                },
                95 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_23 = tmp;
                },
                96 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_23 = tmp;
                },
                97 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_23 = tmp;
                },
                98 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_24 = tmp;
                },
                99 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_24 = tmp;
                },
                100 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_24 = tmp;
                },
                101 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_24 = tmp;
                },
                102 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_25 = tmp;
                },
                103 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_25 = tmp;
                },
                104 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_25 = tmp;
                },
                105 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_25 = tmp;
                },
                106 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_26 = tmp;
                },
                107 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_26 = tmp;
                },
                108 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_26 = tmp;
                },
                109 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_26 = tmp;
                },
                110 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_27 = tmp;
                },
                111 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_27 = tmp;
                },
                112 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_27 = tmp;
                },
                113 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_27 = tmp;
                },
                114 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_28 = tmp;
                },
                115 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_28 = tmp;
                },
                116 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_28 = tmp;
                },
                117 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_28 = tmp;
                },
                118 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_29 = tmp;
                },
                119 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_29 = tmp;
                },
                120 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_29 = tmp;
                },
                121 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_29 = tmp;
                },
                122 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_30 = tmp;
                },
                123 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_30 = tmp;
                },
                124 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_30 = tmp;
                },
                125 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_30 = tmp;
                },
                126 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_31 = tmp;
                },
                127 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_31 = tmp;
                },
                128 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_31 = tmp;
                },
                129 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_31 = tmp;
                },
                130 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_32 = tmp;
                },
                131 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_32 = tmp;
                },
                132 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_32 = tmp;
                },
                133 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_32 = tmp;
                },
                134 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_33 = tmp;
                },
                135 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_33 = tmp;
                },
                136 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_33 = tmp;
                },
                137 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_33 = tmp;
                },
                138 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_34 = tmp;
                },
                139 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_34 = tmp;
                },
                140 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_34 = tmp;
                },
                141 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_34 = tmp;
                },
                142 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_35 = tmp;
                },
                143 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_35 = tmp;
                },
                144 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_35 = tmp;
                },
                145 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_35 = tmp;
                },
                146 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_36 = tmp;
                },
                147 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_36 = tmp;
                },
                148 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_36 = tmp;
                },
                149 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_36 = tmp;
                },
                150 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_37 = tmp;
                },
                151 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_37 = tmp;
                },
                152 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_37 = tmp;
                },
                153 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_37 = tmp;
                },
                154 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_38 = tmp;
                },
                155 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_38 = tmp;
                },
                156 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_38 = tmp;
                },
                157 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_38 = tmp;
                },
                158 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_39 = tmp;
                },
                159 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_39 = tmp;
                },
                160 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_39 = tmp;
                },
                161 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_39 = tmp;
                },
                162 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_40 = tmp;
                },
                163 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_40 = tmp;
                },
                164 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_40 = tmp;
                },
                165 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_40 = tmp;
                },
                166 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_41 = tmp;
                },
                167 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_41 = tmp;
                },
                168 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_41 = tmp;
                },
                169 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_41 = tmp;
                },
                170 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_42 = tmp;
                },
                171 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_42 = tmp;
                },
                172 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_42 = tmp;
                },
                173 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_42 = tmp;
                },
                174 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_43 = tmp;
                },
                175 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_43 = tmp;
                },
                176 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_43 = tmp;
                },
                177 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_43 = tmp;
                },
                178 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_44 = tmp;
                },
                179 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_44 = tmp;
                },
                180 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_44 = tmp;
                },
                181 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_44 = tmp;
                },
                182 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_45 = tmp;
                },
                183 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_45 = tmp;
                },
                184 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_45 = tmp;
                },
                185 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_45 = tmp;
                },
                186 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_46 = tmp;
                },
                187 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_46 = tmp;
                },
                188 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_46 = tmp;
                },
                189 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_46 = tmp;
                },
                190 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_47 = tmp;
                },
                191 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_47 = tmp;
                },
                192 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_47 = tmp;
                },
                193 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_47 = tmp;
                },
                194 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_48 = tmp;
                },
                195 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_48 = tmp;
                },
                196 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_48 = tmp;
                },
                197 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_48 = tmp;
                },
                198 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_49 = tmp;
                },
                199 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_49 = tmp;
                },
                200 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_49 = tmp;
                },
                201 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_49 = tmp;
                },
                202 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_50 = tmp;
                },
                203 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_50 = tmp;
                },
                204 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_50 = tmp;
                },
                205 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_50 = tmp;
                },
                206 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_51 = tmp;
                },
                207 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_51 = tmp;
                },
                208 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_51 = tmp;
                },
                209 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_51 = tmp;
                },
                210 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_52 = tmp;
                },
                211 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_52 = tmp;
                },
                212 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_52 = tmp;
                },
                213 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_52 = tmp;
                },
                214 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_53 = tmp;
                },
                215 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_53 = tmp;
                },
                216 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_53 = tmp;
                },
                217 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_53 = tmp;
                },
                218 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_54 = tmp;
                },
                219 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_54 = tmp;
                },
                220 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_54 = tmp;
                },
                221 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_54 = tmp;
                },
                222 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_55 = tmp;
                },
                223 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_55 = tmp;
                },
                224 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_55 = tmp;
                },
                225 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_55 = tmp;
                },
                226 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_56 = tmp;
                },
                227 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_56 = tmp;
                },
                228 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_56 = tmp;
                },
                229 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_56 = tmp;
                },
                230 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_57 = tmp;
                },
                231 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_57 = tmp;
                },
                232 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_57 = tmp;
                },
                233 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_57 = tmp;
                },
                234 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_58 = tmp;
                },
                235 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_58 = tmp;
                },
                236 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_58 = tmp;
                },
                237 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_58 = tmp;
                },
                238 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_59 = tmp;
                },
                239 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_59 = tmp;
                },
                240 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_59 = tmp;
                },
                241 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_59 = tmp;
                },
                242 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_60 = tmp;
                },
                243 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_60 = tmp;
                },
                244 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_60 = tmp;
                },
                245 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_60 = tmp;
                },
                246 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_61 = tmp;
                },
                247 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_61 = tmp;
                },
                248 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_61 = tmp;
                },
                249 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_61 = tmp;
                },
                250 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_62 = tmp;
                },
                251 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_62 = tmp;
                },
                252 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_62 = tmp;
                },
                253 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_62 = tmp;
                },
                254 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_63 = tmp;
                },
                255 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_63 = tmp;
                },
                256 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_63 = tmp;
                },
                257 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_63 = tmp;
                },
                258 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_64 = tmp;
                },
                259 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_64 = tmp;
                },
                260 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_64 = tmp;
                },
                261 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_64 = tmp;
                },
                262 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_65 = tmp;
                },
                263 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_65 = tmp;
                },
                264 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_65 = tmp;
                },
                265 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_65 = tmp;
                },
                266 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_66 = tmp;
                },
                267 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_66 = tmp;
                },
                268 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_66 = tmp;
                },
                269 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_66 = tmp;
                },
                270 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_67 = tmp;
                },
                271 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_67 = tmp;
                },
                272 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_67 = tmp;
                },
                273 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_67 = tmp;
                },
                274 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_68 = tmp;
                },
                275 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_68 = tmp;
                },
                276 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_68 = tmp;
                },
                277 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_68 = tmp;
                },
                278 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_69 = tmp;
                },
                279 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_69 = tmp;
                },
                280 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_69 = tmp;
                },
                281 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_69 = tmp;
                },
                282 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_70 = tmp;
                },
                283 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_70 = tmp;
                },
                284 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_70 = tmp;
                },
                285 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_70 = tmp;
                },
                286 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_71 = tmp;
                },
                287 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_71 = tmp;
                },
                288 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_71 = tmp;
                },
                289 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_71 = tmp;
                },
                290 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_72 = tmp;
                },
                291 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_72 = tmp;
                },
                292 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_72 = tmp;
                },
                293 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_72 = tmp;
                },
                294 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_73 = tmp;
                },
                295 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_73 = tmp;
                },
                296 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_73 = tmp;
                },
                297 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_73 = tmp;
                },
                298 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_74 = tmp;
                },
                299 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_74 = tmp;
                },
                300 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_74 = tmp;
                },
                301 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_74 = tmp;
                },
                302 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_75 = tmp;
                },
                303 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_75 = tmp;
                },
                304 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_75 = tmp;
                },
                305 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_75 = tmp;
                },
                306 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_76 = tmp;
                },
                307 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_76 = tmp;
                },
                308 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_76 = tmp;
                },
                309 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_76 = tmp;
                },
                310 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_77 = tmp;
                },
                311 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_77 = tmp;
                },
                312 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_77 = tmp;
                },
                313 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_77 = tmp;
                },
                314 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_78 = tmp;
                },
                315 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_78 = tmp;
                },
                316 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_78 = tmp;
                },
                317 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_78 = tmp;
                },
                318 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_79 = tmp;
                },
                319 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_79 = tmp;
                },
                320 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_79 = tmp;
                },
                321 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_79 = tmp;
                },
                322 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_80 = tmp;
                },
                323 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_80 = tmp;
                },
                324 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_80 = tmp;
                },
                325 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_80 = tmp;
                },
                326 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_81 = tmp;
                },
                327 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_81 = tmp;
                },
                328 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_81 = tmp;
                },
                329 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_81 = tmp;
                },
                330 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_82 = tmp;
                },
                331 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_82 = tmp;
                },
                332 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_82 = tmp;
                },
                333 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_82 = tmp;
                },
                334 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_83 = tmp;
                },
                335 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_83 = tmp;
                },
                336 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_83 = tmp;
                },
                337 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_83 = tmp;
                },
                338 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_84 = tmp;
                },
                339 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_84 = tmp;
                },
                340 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_84 = tmp;
                },
                341 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_84 = tmp;
                },
                342 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_85 = tmp;
                },
                343 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_85 = tmp;
                },
                344 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_85 = tmp;
                },
                345 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_85 = tmp;
                },
                346 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_86 = tmp;
                },
                347 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_86 = tmp;
                },
                348 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_86 = tmp;
                },
                349 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_86 = tmp;
                },
                350 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_87 = tmp;
                },
                351 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_87 = tmp;
                },
                352 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_87 = tmp;
                },
                353 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_87 = tmp;
                },
                354 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_88 = tmp;
                },
                355 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_88 = tmp;
                },
                356 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_88 = tmp;
                },
                357 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_88 = tmp;
                },
                358 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_89 = tmp;
                },
                359 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_89 = tmp;
                },
                360 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_89 = tmp;
                },
                361 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_89 = tmp;
                },
                362 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_90 = tmp;
                },
                363 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_90 = tmp;
                },
                364 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_90 = tmp;
                },
                365 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_90 = tmp;
                },
                366 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_91 = tmp;
                },
                367 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_91 = tmp;
                },
                368 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_91 = tmp;
                },
                369 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_91 = tmp;
                },
                370 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_92 = tmp;
                },
                371 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_92 = tmp;
                },
                372 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_92 = tmp;
                },
                373 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_92 = tmp;
                },
                374 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_93 = tmp;
                },
                375 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_93 = tmp;
                },
                376 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_93 = tmp;
                },
                377 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_93 = tmp;
                },
                378 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_94 = tmp;
                },
                379 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_94 = tmp;
                },
                380 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_94 = tmp;
                },
                381 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_94 = tmp;
                },
                382 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_95 = tmp;
                },
                383 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_95 = tmp;
                },
                384 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_95 = tmp;
                },
                385 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_95 = tmp;
                },
                386 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_96 = tmp;
                },
                387 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_96 = tmp;
                },
                388 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_96 = tmp;
                },
                389 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_96 = tmp;
                },
                390 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_97 = tmp;
                },
                391 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_97 = tmp;
                },
                392 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_97 = tmp;
                },
                393 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_97 = tmp;
                },
                394 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_98 = tmp;
                },
                395 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_98 = tmp;
                },
                396 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_98 = tmp;
                },
                397 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_98 = tmp;
                },
                398 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_99 = tmp;
                },
                399 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_99 = tmp;
                },
                400 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_99 = tmp;
                },
                401 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_99 = tmp;
                },
                402 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_100 = tmp;
                },
                403 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_100 = tmp;
                },
                404 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_100 = tmp;
                },
                405 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_100 = tmp;
                },
                406 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_101 = tmp;
                },
                407 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_101 = tmp;
                },
                408 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_101 = tmp;
                },
                409 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_101 = tmp;
                },
                410 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_102 = tmp;
                },
                411 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_102 = tmp;
                },
                412 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_102 = tmp;
                },
                413 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_102 = tmp;
                },
                414 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_103 = tmp;
                },
                415 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_103 = tmp;
                },
                416 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_103 = tmp;
                },
                417 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_103 = tmp;
                },
                418 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_104 = tmp;
                },
                419 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_104 = tmp;
                },
                420 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_104 = tmp;
                },
                421 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_104 = tmp;
                },
                422 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_105 = tmp;
                },
                423 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_105 = tmp;
                },
                424 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_105 = tmp;
                },
                425 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_105 = tmp;
                },
                426 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_106 = tmp;
                },
                427 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_106 = tmp;
                },
                428 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_106 = tmp;
                },
                429 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_106 = tmp;
                },
                430 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_107 = tmp;
                },
                431 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_107 = tmp;
                },
                432 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_107 = tmp;
                },
                433 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_107 = tmp;
                },
                434 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_108 = tmp;
                },
                435 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_108 = tmp;
                },
                436 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_108 = tmp;
                },
                437 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_108 = tmp;
                },
                438 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_109 = tmp;
                },
                439 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_109 = tmp;
                },
                440 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_109 = tmp;
                },
                441 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_109 = tmp;
                },
                442 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_110 = tmp;
                },
                443 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_110 = tmp;
                },
                444 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_110 = tmp;
                },
                445 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_110 = tmp;
                },
                446 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_111 = tmp;
                },
                447 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_111 = tmp;
                },
                448 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_111 = tmp;
                },
                449 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_111 = tmp;
                },
                450 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_112 = tmp;
                },
                451 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_112 = tmp;
                },
                452 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_112 = tmp;
                },
                453 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_112 = tmp;
                },
                454 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_113 = tmp;
                },
                455 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_113 = tmp;
                },
                456 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_113 = tmp;
                },
                457 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_113 = tmp;
                },
                458 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_114 = tmp;
                },
                459 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_114 = tmp;
                },
                460 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_114 = tmp;
                },
                461 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_114 = tmp;
                },
                462 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_115 = tmp;
                },
                463 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_115 = tmp;
                },
                464 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_115 = tmp;
                },
                465 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_115 = tmp;
                },
                466 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_116 = tmp;
                },
                467 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_116 = tmp;
                },
                468 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_116 = tmp;
                },
                469 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_116 = tmp;
                },
                470 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_117 = tmp;
                },
                471 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_117 = tmp;
                },
                472 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_117 = tmp;
                },
                473 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_117 = tmp;
                },
                474 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_118 = tmp;
                },
                475 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_118 = tmp;
                },
                476 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_118 = tmp;
                },
                477 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_118 = tmp;
                },
                478 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_119 = tmp;
                },
                479 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_119 = tmp;
                },
                480 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_119 = tmp;
                },
                481 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_119 = tmp;
                },
                482 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt_120 = tmp;
                },
                483 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_120 = tmp;
                },
                484 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt_120 = tmp;
                },
                485 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.emi_date_120 = tmp;
                },
                486 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.d_f_coc_emi_date_loan_booked = tmp;
                },
                487 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_f_coc_emi_loan_src)?;
                },
                488 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_f_coc_emi_tenure)?;
                },
                489 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.n_f_coc_emi_loan_amount = tmp;
                },
                490 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_f_coc_emi_loan_nbr)?;
                },
                491 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.n_f_coc_emi_out_prin = tmp;
                },
                492 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.n_f_coc_emi_out_int = tmp;
                },
                493 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_outstanding = tmp;
                },
                494 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.v_f_coc_emi_rate_of_int = tmp;
                },
                495 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.n_f_coc_emi_org)?;
                },
                496 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_f_coc_emi_chg_type)?;
                },
                497 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.filler = tmp;
                },
                498 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.org.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.org);
        }
        if !self.logo.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.logo);
        }
        if !self.acct.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.acct);
        }
        if !self.loan_nbr.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.loan_nbr);
        }
        if !self.tenure.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.tenure);
        }
        if self.prin_amt_1 != 0. {
            my_size += 9;
        }
        if self.int_amt_1 != 0. {
            my_size += 9;
        }
        if self.emi_amt_1 != 0. {
            my_size += 9;
        }
        if self.emi_date_1 != 0 {
            my_size += ::protobuf::rt::value_size(9, self.emi_date_1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_2 != 0. {
            my_size += 9;
        }
        if self.int_amt_2 != 0. {
            my_size += 9;
        }
        if self.emi_amt_2 != 0. {
            my_size += 9;
        }
        if self.emi_date_2 != 0 {
            my_size += ::protobuf::rt::value_size(13, self.emi_date_2, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_3 != 0. {
            my_size += 9;
        }
        if self.int_amt_3 != 0. {
            my_size += 9;
        }
        if self.emi_amt_3 != 0. {
            my_size += 10;
        }
        if self.emi_date_3 != 0 {
            my_size += ::protobuf::rt::value_size(17, self.emi_date_3, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_4 != 0. {
            my_size += 10;
        }
        if self.int_amt_4 != 0. {
            my_size += 10;
        }
        if self.emi_amt_4 != 0. {
            my_size += 10;
        }
        if self.emi_date_4 != 0 {
            my_size += ::protobuf::rt::value_size(21, self.emi_date_4, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_5 != 0. {
            my_size += 10;
        }
        if self.int_amt_5 != 0. {
            my_size += 10;
        }
        if self.emi_amt_5 != 0. {
            my_size += 10;
        }
        if self.emi_date_5 != 0 {
            my_size += ::protobuf::rt::value_size(25, self.emi_date_5, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_6 != 0. {
            my_size += 10;
        }
        if self.int_amt_6 != 0. {
            my_size += 10;
        }
        if self.emi_amt_6 != 0. {
            my_size += 10;
        }
        if self.emi_date_6 != 0 {
            my_size += ::protobuf::rt::value_size(29, self.emi_date_6, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_7 != 0. {
            my_size += 10;
        }
        if self.int_amt_7 != 0. {
            my_size += 10;
        }
        if self.emi_amt_7 != 0. {
            my_size += 10;
        }
        if self.emi_date_7 != 0 {
            my_size += ::protobuf::rt::value_size(33, self.emi_date_7, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_8 != 0. {
            my_size += 10;
        }
        if self.int_amt_8 != 0. {
            my_size += 10;
        }
        if self.emi_amt_8 != 0. {
            my_size += 10;
        }
        if self.emi_date_8 != 0 {
            my_size += ::protobuf::rt::value_size(37, self.emi_date_8, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_9 != 0. {
            my_size += 10;
        }
        if self.int_amt_9 != 0. {
            my_size += 10;
        }
        if self.emi_amt_9 != 0. {
            my_size += 10;
        }
        if self.emi_date_9 != 0 {
            my_size += ::protobuf::rt::value_size(41, self.emi_date_9, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_10 != 0. {
            my_size += 10;
        }
        if self.int_amt_10 != 0. {
            my_size += 10;
        }
        if self.emi_amt_10 != 0. {
            my_size += 10;
        }
        if self.emi_date_10 != 0 {
            my_size += ::protobuf::rt::value_size(45, self.emi_date_10, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_11 != 0. {
            my_size += 10;
        }
        if self.int_amt_11 != 0. {
            my_size += 10;
        }
        if self.emi_amt_11 != 0. {
            my_size += 10;
        }
        if self.emi_date_11 != 0 {
            my_size += ::protobuf::rt::value_size(49, self.emi_date_11, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_12 != 0. {
            my_size += 10;
        }
        if self.int_amt_12 != 0. {
            my_size += 10;
        }
        if self.emi_amt_12 != 0. {
            my_size += 10;
        }
        if self.emi_date_12 != 0 {
            my_size += ::protobuf::rt::value_size(53, self.emi_date_12, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_13 != 0. {
            my_size += 10;
        }
        if self.int_amt_13 != 0. {
            my_size += 10;
        }
        if self.emi_amt_13 != 0. {
            my_size += 10;
        }
        if self.emi_date_13 != 0 {
            my_size += ::protobuf::rt::value_size(57, self.emi_date_13, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_14 != 0. {
            my_size += 10;
        }
        if self.int_amt_14 != 0. {
            my_size += 10;
        }
        if self.emi_amt_14 != 0. {
            my_size += 10;
        }
        if self.emi_date_14 != 0 {
            my_size += ::protobuf::rt::value_size(61, self.emi_date_14, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_15 != 0. {
            my_size += 10;
        }
        if self.int_amt_15 != 0. {
            my_size += 10;
        }
        if self.emi_amt_15 != 0. {
            my_size += 10;
        }
        if self.emi_date_15 != 0 {
            my_size += ::protobuf::rt::value_size(65, self.emi_date_15, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_16 != 0. {
            my_size += 10;
        }
        if self.int_amt_16 != 0. {
            my_size += 10;
        }
        if self.emi_amt_16 != 0. {
            my_size += 10;
        }
        if self.emi_date_16 != 0 {
            my_size += ::protobuf::rt::value_size(69, self.emi_date_16, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_17 != 0. {
            my_size += 10;
        }
        if self.int_amt_17 != 0. {
            my_size += 10;
        }
        if self.emi_amt_17 != 0. {
            my_size += 10;
        }
        if self.emi_date_17 != 0 {
            my_size += ::protobuf::rt::value_size(73, self.emi_date_17, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_18 != 0. {
            my_size += 10;
        }
        if self.int_amt_18 != 0. {
            my_size += 10;
        }
        if self.emi_amt_18 != 0. {
            my_size += 10;
        }
        if self.emi_date_18 != 0 {
            my_size += ::protobuf::rt::value_size(77, self.emi_date_18, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_19 != 0. {
            my_size += 10;
        }
        if self.int_amt_19 != 0. {
            my_size += 10;
        }
        if self.emi_amt_19 != 0. {
            my_size += 10;
        }
        if self.emi_date_19 != 0 {
            my_size += ::protobuf::rt::value_size(81, self.emi_date_19, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_20 != 0. {
            my_size += 10;
        }
        if self.int_amt_20 != 0. {
            my_size += 10;
        }
        if self.emi_amt_20 != 0. {
            my_size += 10;
        }
        if self.emi_date_20 != 0 {
            my_size += ::protobuf::rt::value_size(85, self.emi_date_20, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_21 != 0. {
            my_size += 10;
        }
        if self.int_amt_21 != 0. {
            my_size += 10;
        }
        if self.emi_amt_21 != 0. {
            my_size += 10;
        }
        if self.emi_date_21 != 0 {
            my_size += ::protobuf::rt::value_size(89, self.emi_date_21, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_22 != 0. {
            my_size += 10;
        }
        if self.int_amt_22 != 0. {
            my_size += 10;
        }
        if self.emi_amt_22 != 0. {
            my_size += 10;
        }
        if self.emi_date_22 != 0 {
            my_size += ::protobuf::rt::value_size(93, self.emi_date_22, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_23 != 0. {
            my_size += 10;
        }
        if self.int_amt_23 != 0. {
            my_size += 10;
        }
        if self.emi_amt_23 != 0. {
            my_size += 10;
        }
        if self.emi_date_23 != 0 {
            my_size += ::protobuf::rt::value_size(97, self.emi_date_23, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_24 != 0. {
            my_size += 10;
        }
        if self.int_amt_24 != 0. {
            my_size += 10;
        }
        if self.emi_amt_24 != 0. {
            my_size += 10;
        }
        if self.emi_date_24 != 0 {
            my_size += ::protobuf::rt::value_size(101, self.emi_date_24, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_25 != 0. {
            my_size += 10;
        }
        if self.int_amt_25 != 0. {
            my_size += 10;
        }
        if self.emi_amt_25 != 0. {
            my_size += 10;
        }
        if self.emi_date_25 != 0 {
            my_size += ::protobuf::rt::value_size(105, self.emi_date_25, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_26 != 0. {
            my_size += 10;
        }
        if self.int_amt_26 != 0. {
            my_size += 10;
        }
        if self.emi_amt_26 != 0. {
            my_size += 10;
        }
        if self.emi_date_26 != 0 {
            my_size += ::protobuf::rt::value_size(109, self.emi_date_26, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_27 != 0. {
            my_size += 10;
        }
        if self.int_amt_27 != 0. {
            my_size += 10;
        }
        if self.emi_amt_27 != 0. {
            my_size += 10;
        }
        if self.emi_date_27 != 0 {
            my_size += ::protobuf::rt::value_size(113, self.emi_date_27, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_28 != 0. {
            my_size += 10;
        }
        if self.int_amt_28 != 0. {
            my_size += 10;
        }
        if self.emi_amt_28 != 0. {
            my_size += 10;
        }
        if self.emi_date_28 != 0 {
            my_size += ::protobuf::rt::value_size(117, self.emi_date_28, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_29 != 0. {
            my_size += 10;
        }
        if self.int_amt_29 != 0. {
            my_size += 10;
        }
        if self.emi_amt_29 != 0. {
            my_size += 10;
        }
        if self.emi_date_29 != 0 {
            my_size += ::protobuf::rt::value_size(121, self.emi_date_29, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_30 != 0. {
            my_size += 10;
        }
        if self.int_amt_30 != 0. {
            my_size += 10;
        }
        if self.emi_amt_30 != 0. {
            my_size += 10;
        }
        if self.emi_date_30 != 0 {
            my_size += ::protobuf::rt::value_size(125, self.emi_date_30, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_31 != 0. {
            my_size += 10;
        }
        if self.int_amt_31 != 0. {
            my_size += 10;
        }
        if self.emi_amt_31 != 0. {
            my_size += 10;
        }
        if self.emi_date_31 != 0 {
            my_size += ::protobuf::rt::value_size(129, self.emi_date_31, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_32 != 0. {
            my_size += 10;
        }
        if self.int_amt_32 != 0. {
            my_size += 10;
        }
        if self.emi_amt_32 != 0. {
            my_size += 10;
        }
        if self.emi_date_32 != 0 {
            my_size += ::protobuf::rt::value_size(133, self.emi_date_32, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_33 != 0. {
            my_size += 10;
        }
        if self.int_amt_33 != 0. {
            my_size += 10;
        }
        if self.emi_amt_33 != 0. {
            my_size += 10;
        }
        if self.emi_date_33 != 0 {
            my_size += ::protobuf::rt::value_size(137, self.emi_date_33, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_34 != 0. {
            my_size += 10;
        }
        if self.int_amt_34 != 0. {
            my_size += 10;
        }
        if self.emi_amt_34 != 0. {
            my_size += 10;
        }
        if self.emi_date_34 != 0 {
            my_size += ::protobuf::rt::value_size(141, self.emi_date_34, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_35 != 0. {
            my_size += 10;
        }
        if self.int_amt_35 != 0. {
            my_size += 10;
        }
        if self.emi_amt_35 != 0. {
            my_size += 10;
        }
        if self.emi_date_35 != 0 {
            my_size += ::protobuf::rt::value_size(145, self.emi_date_35, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_36 != 0. {
            my_size += 10;
        }
        if self.int_amt_36 != 0. {
            my_size += 10;
        }
        if self.emi_amt_36 != 0. {
            my_size += 10;
        }
        if self.emi_date_36 != 0 {
            my_size += ::protobuf::rt::value_size(149, self.emi_date_36, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_37 != 0. {
            my_size += 10;
        }
        if self.int_amt_37 != 0. {
            my_size += 10;
        }
        if self.emi_amt_37 != 0. {
            my_size += 10;
        }
        if self.emi_date_37 != 0 {
            my_size += ::protobuf::rt::value_size(153, self.emi_date_37, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_38 != 0. {
            my_size += 10;
        }
        if self.int_amt_38 != 0. {
            my_size += 10;
        }
        if self.emi_amt_38 != 0. {
            my_size += 10;
        }
        if self.emi_date_38 != 0 {
            my_size += ::protobuf::rt::value_size(157, self.emi_date_38, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_39 != 0. {
            my_size += 10;
        }
        if self.int_amt_39 != 0. {
            my_size += 10;
        }
        if self.emi_amt_39 != 0. {
            my_size += 10;
        }
        if self.emi_date_39 != 0 {
            my_size += ::protobuf::rt::value_size(161, self.emi_date_39, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_40 != 0. {
            my_size += 10;
        }
        if self.int_amt_40 != 0. {
            my_size += 10;
        }
        if self.emi_amt_40 != 0. {
            my_size += 10;
        }
        if self.emi_date_40 != 0 {
            my_size += ::protobuf::rt::value_size(165, self.emi_date_40, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_41 != 0. {
            my_size += 10;
        }
        if self.int_amt_41 != 0. {
            my_size += 10;
        }
        if self.emi_amt_41 != 0. {
            my_size += 10;
        }
        if self.emi_date_41 != 0 {
            my_size += ::protobuf::rt::value_size(169, self.emi_date_41, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_42 != 0. {
            my_size += 10;
        }
        if self.int_amt_42 != 0. {
            my_size += 10;
        }
        if self.emi_amt_42 != 0. {
            my_size += 10;
        }
        if self.emi_date_42 != 0 {
            my_size += ::protobuf::rt::value_size(173, self.emi_date_42, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_43 != 0. {
            my_size += 10;
        }
        if self.int_amt_43 != 0. {
            my_size += 10;
        }
        if self.emi_amt_43 != 0. {
            my_size += 10;
        }
        if self.emi_date_43 != 0 {
            my_size += ::protobuf::rt::value_size(177, self.emi_date_43, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_44 != 0. {
            my_size += 10;
        }
        if self.int_amt_44 != 0. {
            my_size += 10;
        }
        if self.emi_amt_44 != 0. {
            my_size += 10;
        }
        if self.emi_date_44 != 0 {
            my_size += ::protobuf::rt::value_size(181, self.emi_date_44, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_45 != 0. {
            my_size += 10;
        }
        if self.int_amt_45 != 0. {
            my_size += 10;
        }
        if self.emi_amt_45 != 0. {
            my_size += 10;
        }
        if self.emi_date_45 != 0 {
            my_size += ::protobuf::rt::value_size(185, self.emi_date_45, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_46 != 0. {
            my_size += 10;
        }
        if self.int_amt_46 != 0. {
            my_size += 10;
        }
        if self.emi_amt_46 != 0. {
            my_size += 10;
        }
        if self.emi_date_46 != 0 {
            my_size += ::protobuf::rt::value_size(189, self.emi_date_46, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_47 != 0. {
            my_size += 10;
        }
        if self.int_amt_47 != 0. {
            my_size += 10;
        }
        if self.emi_amt_47 != 0. {
            my_size += 10;
        }
        if self.emi_date_47 != 0 {
            my_size += ::protobuf::rt::value_size(193, self.emi_date_47, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_48 != 0. {
            my_size += 10;
        }
        if self.int_amt_48 != 0. {
            my_size += 10;
        }
        if self.emi_amt_48 != 0. {
            my_size += 10;
        }
        if self.emi_date_48 != 0 {
            my_size += ::protobuf::rt::value_size(197, self.emi_date_48, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_49 != 0. {
            my_size += 10;
        }
        if self.int_amt_49 != 0. {
            my_size += 10;
        }
        if self.emi_amt_49 != 0. {
            my_size += 10;
        }
        if self.emi_date_49 != 0 {
            my_size += ::protobuf::rt::value_size(201, self.emi_date_49, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_50 != 0. {
            my_size += 10;
        }
        if self.int_amt_50 != 0. {
            my_size += 10;
        }
        if self.emi_amt_50 != 0. {
            my_size += 10;
        }
        if self.emi_date_50 != 0 {
            my_size += ::protobuf::rt::value_size(205, self.emi_date_50, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_51 != 0. {
            my_size += 10;
        }
        if self.int_amt_51 != 0. {
            my_size += 10;
        }
        if self.emi_amt_51 != 0. {
            my_size += 10;
        }
        if self.emi_date_51 != 0 {
            my_size += ::protobuf::rt::value_size(209, self.emi_date_51, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_52 != 0. {
            my_size += 10;
        }
        if self.int_amt_52 != 0. {
            my_size += 10;
        }
        if self.emi_amt_52 != 0. {
            my_size += 10;
        }
        if self.emi_date_52 != 0 {
            my_size += ::protobuf::rt::value_size(213, self.emi_date_52, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_53 != 0. {
            my_size += 10;
        }
        if self.int_amt_53 != 0. {
            my_size += 10;
        }
        if self.emi_amt_53 != 0. {
            my_size += 10;
        }
        if self.emi_date_53 != 0 {
            my_size += ::protobuf::rt::value_size(217, self.emi_date_53, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_54 != 0. {
            my_size += 10;
        }
        if self.int_amt_54 != 0. {
            my_size += 10;
        }
        if self.emi_amt_54 != 0. {
            my_size += 10;
        }
        if self.emi_date_54 != 0 {
            my_size += ::protobuf::rt::value_size(221, self.emi_date_54, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_55 != 0. {
            my_size += 10;
        }
        if self.int_amt_55 != 0. {
            my_size += 10;
        }
        if self.emi_amt_55 != 0. {
            my_size += 10;
        }
        if self.emi_date_55 != 0 {
            my_size += ::protobuf::rt::value_size(225, self.emi_date_55, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_56 != 0. {
            my_size += 10;
        }
        if self.int_amt_56 != 0. {
            my_size += 10;
        }
        if self.emi_amt_56 != 0. {
            my_size += 10;
        }
        if self.emi_date_56 != 0 {
            my_size += ::protobuf::rt::value_size(229, self.emi_date_56, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_57 != 0. {
            my_size += 10;
        }
        if self.int_amt_57 != 0. {
            my_size += 10;
        }
        if self.emi_amt_57 != 0. {
            my_size += 10;
        }
        if self.emi_date_57 != 0 {
            my_size += ::protobuf::rt::value_size(233, self.emi_date_57, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_58 != 0. {
            my_size += 10;
        }
        if self.int_amt_58 != 0. {
            my_size += 10;
        }
        if self.emi_amt_58 != 0. {
            my_size += 10;
        }
        if self.emi_date_58 != 0 {
            my_size += ::protobuf::rt::value_size(237, self.emi_date_58, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_59 != 0. {
            my_size += 10;
        }
        if self.int_amt_59 != 0. {
            my_size += 10;
        }
        if self.emi_amt_59 != 0. {
            my_size += 10;
        }
        if self.emi_date_59 != 0 {
            my_size += ::protobuf::rt::value_size(241, self.emi_date_59, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_60 != 0. {
            my_size += 10;
        }
        if self.int_amt_60 != 0. {
            my_size += 10;
        }
        if self.emi_amt_60 != 0. {
            my_size += 10;
        }
        if self.emi_date_60 != 0 {
            my_size += ::protobuf::rt::value_size(245, self.emi_date_60, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_61 != 0. {
            my_size += 10;
        }
        if self.int_amt_61 != 0. {
            my_size += 10;
        }
        if self.emi_amt_61 != 0. {
            my_size += 10;
        }
        if self.emi_date_61 != 0 {
            my_size += ::protobuf::rt::value_size(249, self.emi_date_61, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_62 != 0. {
            my_size += 10;
        }
        if self.int_amt_62 != 0. {
            my_size += 10;
        }
        if self.emi_amt_62 != 0. {
            my_size += 10;
        }
        if self.emi_date_62 != 0 {
            my_size += ::protobuf::rt::value_size(253, self.emi_date_62, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_63 != 0. {
            my_size += 10;
        }
        if self.int_amt_63 != 0. {
            my_size += 10;
        }
        if self.emi_amt_63 != 0. {
            my_size += 10;
        }
        if self.emi_date_63 != 0 {
            my_size += ::protobuf::rt::value_size(257, self.emi_date_63, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_64 != 0. {
            my_size += 10;
        }
        if self.int_amt_64 != 0. {
            my_size += 10;
        }
        if self.emi_amt_64 != 0. {
            my_size += 10;
        }
        if self.emi_date_64 != 0 {
            my_size += ::protobuf::rt::value_size(261, self.emi_date_64, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_65 != 0. {
            my_size += 10;
        }
        if self.int_amt_65 != 0. {
            my_size += 10;
        }
        if self.emi_amt_65 != 0. {
            my_size += 10;
        }
        if self.emi_date_65 != 0 {
            my_size += ::protobuf::rt::value_size(265, self.emi_date_65, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_66 != 0. {
            my_size += 10;
        }
        if self.int_amt_66 != 0. {
            my_size += 10;
        }
        if self.emi_amt_66 != 0. {
            my_size += 10;
        }
        if self.emi_date_66 != 0 {
            my_size += ::protobuf::rt::value_size(269, self.emi_date_66, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_67 != 0. {
            my_size += 10;
        }
        if self.int_amt_67 != 0. {
            my_size += 10;
        }
        if self.emi_amt_67 != 0. {
            my_size += 10;
        }
        if self.emi_date_67 != 0 {
            my_size += ::protobuf::rt::value_size(273, self.emi_date_67, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_68 != 0. {
            my_size += 10;
        }
        if self.int_amt_68 != 0. {
            my_size += 10;
        }
        if self.emi_amt_68 != 0. {
            my_size += 10;
        }
        if self.emi_date_68 != 0 {
            my_size += ::protobuf::rt::value_size(277, self.emi_date_68, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_69 != 0. {
            my_size += 10;
        }
        if self.int_amt_69 != 0. {
            my_size += 10;
        }
        if self.emi_amt_69 != 0. {
            my_size += 10;
        }
        if self.emi_date_69 != 0 {
            my_size += ::protobuf::rt::value_size(281, self.emi_date_69, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_70 != 0. {
            my_size += 10;
        }
        if self.int_amt_70 != 0. {
            my_size += 10;
        }
        if self.emi_amt_70 != 0. {
            my_size += 10;
        }
        if self.emi_date_70 != 0 {
            my_size += ::protobuf::rt::value_size(285, self.emi_date_70, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_71 != 0. {
            my_size += 10;
        }
        if self.int_amt_71 != 0. {
            my_size += 10;
        }
        if self.emi_amt_71 != 0. {
            my_size += 10;
        }
        if self.emi_date_71 != 0 {
            my_size += ::protobuf::rt::value_size(289, self.emi_date_71, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_72 != 0. {
            my_size += 10;
        }
        if self.int_amt_72 != 0. {
            my_size += 10;
        }
        if self.emi_amt_72 != 0. {
            my_size += 10;
        }
        if self.emi_date_72 != 0 {
            my_size += ::protobuf::rt::value_size(293, self.emi_date_72, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_73 != 0. {
            my_size += 10;
        }
        if self.int_amt_73 != 0. {
            my_size += 10;
        }
        if self.emi_amt_73 != 0. {
            my_size += 10;
        }
        if self.emi_date_73 != 0 {
            my_size += ::protobuf::rt::value_size(297, self.emi_date_73, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_74 != 0. {
            my_size += 10;
        }
        if self.int_amt_74 != 0. {
            my_size += 10;
        }
        if self.emi_amt_74 != 0. {
            my_size += 10;
        }
        if self.emi_date_74 != 0 {
            my_size += ::protobuf::rt::value_size(301, self.emi_date_74, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_75 != 0. {
            my_size += 10;
        }
        if self.int_amt_75 != 0. {
            my_size += 10;
        }
        if self.emi_amt_75 != 0. {
            my_size += 10;
        }
        if self.emi_date_75 != 0 {
            my_size += ::protobuf::rt::value_size(305, self.emi_date_75, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_76 != 0. {
            my_size += 10;
        }
        if self.int_amt_76 != 0. {
            my_size += 10;
        }
        if self.emi_amt_76 != 0. {
            my_size += 10;
        }
        if self.emi_date_76 != 0 {
            my_size += ::protobuf::rt::value_size(309, self.emi_date_76, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_77 != 0. {
            my_size += 10;
        }
        if self.int_amt_77 != 0. {
            my_size += 10;
        }
        if self.emi_amt_77 != 0. {
            my_size += 10;
        }
        if self.emi_date_77 != 0 {
            my_size += ::protobuf::rt::value_size(313, self.emi_date_77, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_78 != 0. {
            my_size += 10;
        }
        if self.int_amt_78 != 0. {
            my_size += 10;
        }
        if self.emi_amt_78 != 0. {
            my_size += 10;
        }
        if self.emi_date_78 != 0 {
            my_size += ::protobuf::rt::value_size(317, self.emi_date_78, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_79 != 0. {
            my_size += 10;
        }
        if self.int_amt_79 != 0. {
            my_size += 10;
        }
        if self.emi_amt_79 != 0. {
            my_size += 10;
        }
        if self.emi_date_79 != 0 {
            my_size += ::protobuf::rt::value_size(321, self.emi_date_79, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_80 != 0. {
            my_size += 10;
        }
        if self.int_amt_80 != 0. {
            my_size += 10;
        }
        if self.emi_amt_80 != 0. {
            my_size += 10;
        }
        if self.emi_date_80 != 0 {
            my_size += ::protobuf::rt::value_size(325, self.emi_date_80, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_81 != 0. {
            my_size += 10;
        }
        if self.int_amt_81 != 0. {
            my_size += 10;
        }
        if self.emi_amt_81 != 0. {
            my_size += 10;
        }
        if self.emi_date_81 != 0 {
            my_size += ::protobuf::rt::value_size(329, self.emi_date_81, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_82 != 0. {
            my_size += 10;
        }
        if self.int_amt_82 != 0. {
            my_size += 10;
        }
        if self.emi_amt_82 != 0. {
            my_size += 10;
        }
        if self.emi_date_82 != 0 {
            my_size += ::protobuf::rt::value_size(333, self.emi_date_82, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_83 != 0. {
            my_size += 10;
        }
        if self.int_amt_83 != 0. {
            my_size += 10;
        }
        if self.emi_amt_83 != 0. {
            my_size += 10;
        }
        if self.emi_date_83 != 0 {
            my_size += ::protobuf::rt::value_size(337, self.emi_date_83, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_84 != 0. {
            my_size += 10;
        }
        if self.int_amt_84 != 0. {
            my_size += 10;
        }
        if self.emi_amt_84 != 0. {
            my_size += 10;
        }
        if self.emi_date_84 != 0 {
            my_size += ::protobuf::rt::value_size(341, self.emi_date_84, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_85 != 0. {
            my_size += 10;
        }
        if self.int_amt_85 != 0. {
            my_size += 10;
        }
        if self.emi_amt_85 != 0. {
            my_size += 10;
        }
        if self.emi_date_85 != 0 {
            my_size += ::protobuf::rt::value_size(345, self.emi_date_85, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_86 != 0. {
            my_size += 10;
        }
        if self.int_amt_86 != 0. {
            my_size += 10;
        }
        if self.emi_amt_86 != 0. {
            my_size += 10;
        }
        if self.emi_date_86 != 0 {
            my_size += ::protobuf::rt::value_size(349, self.emi_date_86, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_87 != 0. {
            my_size += 10;
        }
        if self.int_amt_87 != 0. {
            my_size += 10;
        }
        if self.emi_amt_87 != 0. {
            my_size += 10;
        }
        if self.emi_date_87 != 0 {
            my_size += ::protobuf::rt::value_size(353, self.emi_date_87, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_88 != 0. {
            my_size += 10;
        }
        if self.int_amt_88 != 0. {
            my_size += 10;
        }
        if self.emi_amt_88 != 0. {
            my_size += 10;
        }
        if self.emi_date_88 != 0 {
            my_size += ::protobuf::rt::value_size(357, self.emi_date_88, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_89 != 0. {
            my_size += 10;
        }
        if self.int_amt_89 != 0. {
            my_size += 10;
        }
        if self.emi_amt_89 != 0. {
            my_size += 10;
        }
        if self.emi_date_89 != 0 {
            my_size += ::protobuf::rt::value_size(361, self.emi_date_89, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_90 != 0. {
            my_size += 10;
        }
        if self.int_amt_90 != 0. {
            my_size += 10;
        }
        if self.emi_amt_90 != 0. {
            my_size += 10;
        }
        if self.emi_date_90 != 0 {
            my_size += ::protobuf::rt::value_size(365, self.emi_date_90, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_91 != 0. {
            my_size += 10;
        }
        if self.int_amt_91 != 0. {
            my_size += 10;
        }
        if self.emi_amt_91 != 0. {
            my_size += 10;
        }
        if self.emi_date_91 != 0 {
            my_size += ::protobuf::rt::value_size(369, self.emi_date_91, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_92 != 0. {
            my_size += 10;
        }
        if self.int_amt_92 != 0. {
            my_size += 10;
        }
        if self.emi_amt_92 != 0. {
            my_size += 10;
        }
        if self.emi_date_92 != 0 {
            my_size += ::protobuf::rt::value_size(373, self.emi_date_92, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_93 != 0. {
            my_size += 10;
        }
        if self.int_amt_93 != 0. {
            my_size += 10;
        }
        if self.emi_amt_93 != 0. {
            my_size += 10;
        }
        if self.emi_date_93 != 0 {
            my_size += ::protobuf::rt::value_size(377, self.emi_date_93, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_94 != 0. {
            my_size += 10;
        }
        if self.int_amt_94 != 0. {
            my_size += 10;
        }
        if self.emi_amt_94 != 0. {
            my_size += 10;
        }
        if self.emi_date_94 != 0 {
            my_size += ::protobuf::rt::value_size(381, self.emi_date_94, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_95 != 0. {
            my_size += 10;
        }
        if self.int_amt_95 != 0. {
            my_size += 10;
        }
        if self.emi_amt_95 != 0. {
            my_size += 10;
        }
        if self.emi_date_95 != 0 {
            my_size += ::protobuf::rt::value_size(385, self.emi_date_95, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_96 != 0. {
            my_size += 10;
        }
        if self.int_amt_96 != 0. {
            my_size += 10;
        }
        if self.emi_amt_96 != 0. {
            my_size += 10;
        }
        if self.emi_date_96 != 0 {
            my_size += ::protobuf::rt::value_size(389, self.emi_date_96, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_97 != 0. {
            my_size += 10;
        }
        if self.int_amt_97 != 0. {
            my_size += 10;
        }
        if self.emi_amt_97 != 0. {
            my_size += 10;
        }
        if self.emi_date_97 != 0 {
            my_size += ::protobuf::rt::value_size(393, self.emi_date_97, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_98 != 0. {
            my_size += 10;
        }
        if self.int_amt_98 != 0. {
            my_size += 10;
        }
        if self.emi_amt_98 != 0. {
            my_size += 10;
        }
        if self.emi_date_98 != 0 {
            my_size += ::protobuf::rt::value_size(397, self.emi_date_98, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_99 != 0. {
            my_size += 10;
        }
        if self.int_amt_99 != 0. {
            my_size += 10;
        }
        if self.emi_amt_99 != 0. {
            my_size += 10;
        }
        if self.emi_date_99 != 0 {
            my_size += ::protobuf::rt::value_size(401, self.emi_date_99, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_100 != 0. {
            my_size += 10;
        }
        if self.int_amt_100 != 0. {
            my_size += 10;
        }
        if self.emi_amt_100 != 0. {
            my_size += 10;
        }
        if self.emi_date_100 != 0 {
            my_size += ::protobuf::rt::value_size(405, self.emi_date_100, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_101 != 0. {
            my_size += 10;
        }
        if self.int_amt_101 != 0. {
            my_size += 10;
        }
        if self.emi_amt_101 != 0. {
            my_size += 10;
        }
        if self.emi_date_101 != 0 {
            my_size += ::protobuf::rt::value_size(409, self.emi_date_101, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_102 != 0. {
            my_size += 10;
        }
        if self.int_amt_102 != 0. {
            my_size += 10;
        }
        if self.emi_amt_102 != 0. {
            my_size += 10;
        }
        if self.emi_date_102 != 0 {
            my_size += ::protobuf::rt::value_size(413, self.emi_date_102, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_103 != 0. {
            my_size += 10;
        }
        if self.int_amt_103 != 0. {
            my_size += 10;
        }
        if self.emi_amt_103 != 0. {
            my_size += 10;
        }
        if self.emi_date_103 != 0 {
            my_size += ::protobuf::rt::value_size(417, self.emi_date_103, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_104 != 0. {
            my_size += 10;
        }
        if self.int_amt_104 != 0. {
            my_size += 10;
        }
        if self.emi_amt_104 != 0. {
            my_size += 10;
        }
        if self.emi_date_104 != 0 {
            my_size += ::protobuf::rt::value_size(421, self.emi_date_104, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_105 != 0. {
            my_size += 10;
        }
        if self.int_amt_105 != 0. {
            my_size += 10;
        }
        if self.emi_amt_105 != 0. {
            my_size += 10;
        }
        if self.emi_date_105 != 0 {
            my_size += ::protobuf::rt::value_size(425, self.emi_date_105, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_106 != 0. {
            my_size += 10;
        }
        if self.int_amt_106 != 0. {
            my_size += 10;
        }
        if self.emi_amt_106 != 0. {
            my_size += 10;
        }
        if self.emi_date_106 != 0 {
            my_size += ::protobuf::rt::value_size(429, self.emi_date_106, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_107 != 0. {
            my_size += 10;
        }
        if self.int_amt_107 != 0. {
            my_size += 10;
        }
        if self.emi_amt_107 != 0. {
            my_size += 10;
        }
        if self.emi_date_107 != 0 {
            my_size += ::protobuf::rt::value_size(433, self.emi_date_107, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_108 != 0. {
            my_size += 10;
        }
        if self.int_amt_108 != 0. {
            my_size += 10;
        }
        if self.emi_amt_108 != 0. {
            my_size += 10;
        }
        if self.emi_date_108 != 0 {
            my_size += ::protobuf::rt::value_size(437, self.emi_date_108, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_109 != 0. {
            my_size += 10;
        }
        if self.int_amt_109 != 0. {
            my_size += 10;
        }
        if self.emi_amt_109 != 0. {
            my_size += 10;
        }
        if self.emi_date_109 != 0 {
            my_size += ::protobuf::rt::value_size(441, self.emi_date_109, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_110 != 0. {
            my_size += 10;
        }
        if self.int_amt_110 != 0. {
            my_size += 10;
        }
        if self.emi_amt_110 != 0. {
            my_size += 10;
        }
        if self.emi_date_110 != 0 {
            my_size += ::protobuf::rt::value_size(445, self.emi_date_110, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_111 != 0. {
            my_size += 10;
        }
        if self.int_amt_111 != 0. {
            my_size += 10;
        }
        if self.emi_amt_111 != 0. {
            my_size += 10;
        }
        if self.emi_date_111 != 0 {
            my_size += ::protobuf::rt::value_size(449, self.emi_date_111, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_112 != 0. {
            my_size += 10;
        }
        if self.int_amt_112 != 0. {
            my_size += 10;
        }
        if self.emi_amt_112 != 0. {
            my_size += 10;
        }
        if self.emi_date_112 != 0 {
            my_size += ::protobuf::rt::value_size(453, self.emi_date_112, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_113 != 0. {
            my_size += 10;
        }
        if self.int_amt_113 != 0. {
            my_size += 10;
        }
        if self.emi_amt_113 != 0. {
            my_size += 10;
        }
        if self.emi_date_113 != 0 {
            my_size += ::protobuf::rt::value_size(457, self.emi_date_113, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_114 != 0. {
            my_size += 10;
        }
        if self.int_amt_114 != 0. {
            my_size += 10;
        }
        if self.emi_amt_114 != 0. {
            my_size += 10;
        }
        if self.emi_date_114 != 0 {
            my_size += ::protobuf::rt::value_size(461, self.emi_date_114, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_115 != 0. {
            my_size += 10;
        }
        if self.int_amt_115 != 0. {
            my_size += 10;
        }
        if self.emi_amt_115 != 0. {
            my_size += 10;
        }
        if self.emi_date_115 != 0 {
            my_size += ::protobuf::rt::value_size(465, self.emi_date_115, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_116 != 0. {
            my_size += 10;
        }
        if self.int_amt_116 != 0. {
            my_size += 10;
        }
        if self.emi_amt_116 != 0. {
            my_size += 10;
        }
        if self.emi_date_116 != 0 {
            my_size += ::protobuf::rt::value_size(469, self.emi_date_116, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_117 != 0. {
            my_size += 10;
        }
        if self.int_amt_117 != 0. {
            my_size += 10;
        }
        if self.emi_amt_117 != 0. {
            my_size += 10;
        }
        if self.emi_date_117 != 0 {
            my_size += ::protobuf::rt::value_size(473, self.emi_date_117, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_118 != 0. {
            my_size += 10;
        }
        if self.int_amt_118 != 0. {
            my_size += 10;
        }
        if self.emi_amt_118 != 0. {
            my_size += 10;
        }
        if self.emi_date_118 != 0 {
            my_size += ::protobuf::rt::value_size(477, self.emi_date_118, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_119 != 0. {
            my_size += 10;
        }
        if self.int_amt_119 != 0. {
            my_size += 10;
        }
        if self.emi_amt_119 != 0. {
            my_size += 10;
        }
        if self.emi_date_119 != 0 {
            my_size += ::protobuf::rt::value_size(481, self.emi_date_119, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt_120 != 0. {
            my_size += 10;
        }
        if self.int_amt_120 != 0. {
            my_size += 10;
        }
        if self.emi_amt_120 != 0. {
            my_size += 10;
        }
        if self.emi_date_120 != 0 {
            my_size += ::protobuf::rt::value_size(485, self.emi_date_120, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.d_f_coc_emi_date_loan_booked != 0 {
            my_size += ::protobuf::rt::value_size(486, self.d_f_coc_emi_date_loan_booked, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.v_f_coc_emi_loan_src.is_empty() {
            my_size += ::protobuf::rt::string_size(487, &self.v_f_coc_emi_loan_src);
        }
        if !self.v_f_coc_emi_tenure.is_empty() {
            my_size += ::protobuf::rt::string_size(488, &self.v_f_coc_emi_tenure);
        }
        if self.n_f_coc_emi_loan_amount != 0. {
            my_size += 10;
        }
        if !self.v_f_coc_emi_loan_nbr.is_empty() {
            my_size += ::protobuf::rt::string_size(490, &self.v_f_coc_emi_loan_nbr);
        }
        if self.n_f_coc_emi_out_prin != 0. {
            my_size += 10;
        }
        if self.n_f_coc_emi_out_int != 0. {
            my_size += 10;
        }
        if self.total_outstanding != 0. {
            my_size += 10;
        }
        if self.v_f_coc_emi_rate_of_int != 0. {
            my_size += 10;
        }
        if !self.n_f_coc_emi_org.is_empty() {
            my_size += ::protobuf::rt::string_size(495, &self.n_f_coc_emi_org);
        }
        if !self.v_f_coc_emi_chg_type.is_empty() {
            my_size += ::protobuf::rt::string_size(496, &self.v_f_coc_emi_chg_type);
        }
        if self.filler != 0 {
            my_size += ::protobuf::rt::value_size(497, self.filler, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.org.is_empty() {
            os.write_string(1, &self.org)?;
        }
        if !self.logo.is_empty() {
            os.write_string(2, &self.logo)?;
        }
        if !self.acct.is_empty() {
            os.write_string(3, &self.acct)?;
        }
        if !self.loan_nbr.is_empty() {
            os.write_string(4, &self.loan_nbr)?;
        }
        if !self.tenure.is_empty() {
            os.write_string(5, &self.tenure)?;
        }
        if self.prin_amt_1 != 0. {
            os.write_double(6, self.prin_amt_1)?;
        }
        if self.int_amt_1 != 0. {
            os.write_double(7, self.int_amt_1)?;
        }
        if self.emi_amt_1 != 0. {
            os.write_double(8, self.emi_amt_1)?;
        }
        if self.emi_date_1 != 0 {
            os.write_int64(9, self.emi_date_1)?;
        }
        if self.prin_amt_2 != 0. {
            os.write_double(10, self.prin_amt_2)?;
        }
        if self.int_amt_2 != 0. {
            os.write_double(11, self.int_amt_2)?;
        }
        if self.emi_amt_2 != 0. {
            os.write_double(12, self.emi_amt_2)?;
        }
        if self.emi_date_2 != 0 {
            os.write_int64(13, self.emi_date_2)?;
        }
        if self.prin_amt_3 != 0. {
            os.write_double(14, self.prin_amt_3)?;
        }
        if self.int_amt_3 != 0. {
            os.write_double(15, self.int_amt_3)?;
        }
        if self.emi_amt_3 != 0. {
            os.write_double(16, self.emi_amt_3)?;
        }
        if self.emi_date_3 != 0 {
            os.write_int64(17, self.emi_date_3)?;
        }
        if self.prin_amt_4 != 0. {
            os.write_double(18, self.prin_amt_4)?;
        }
        if self.int_amt_4 != 0. {
            os.write_double(19, self.int_amt_4)?;
        }
        if self.emi_amt_4 != 0. {
            os.write_double(20, self.emi_amt_4)?;
        }
        if self.emi_date_4 != 0 {
            os.write_int64(21, self.emi_date_4)?;
        }
        if self.prin_amt_5 != 0. {
            os.write_double(22, self.prin_amt_5)?;
        }
        if self.int_amt_5 != 0. {
            os.write_double(23, self.int_amt_5)?;
        }
        if self.emi_amt_5 != 0. {
            os.write_double(24, self.emi_amt_5)?;
        }
        if self.emi_date_5 != 0 {
            os.write_int64(25, self.emi_date_5)?;
        }
        if self.prin_amt_6 != 0. {
            os.write_double(26, self.prin_amt_6)?;
        }
        if self.int_amt_6 != 0. {
            os.write_double(27, self.int_amt_6)?;
        }
        if self.emi_amt_6 != 0. {
            os.write_double(28, self.emi_amt_6)?;
        }
        if self.emi_date_6 != 0 {
            os.write_int64(29, self.emi_date_6)?;
        }
        if self.prin_amt_7 != 0. {
            os.write_double(30, self.prin_amt_7)?;
        }
        if self.int_amt_7 != 0. {
            os.write_double(31, self.int_amt_7)?;
        }
        if self.emi_amt_7 != 0. {
            os.write_double(32, self.emi_amt_7)?;
        }
        if self.emi_date_7 != 0 {
            os.write_int64(33, self.emi_date_7)?;
        }
        if self.prin_amt_8 != 0. {
            os.write_double(34, self.prin_amt_8)?;
        }
        if self.int_amt_8 != 0. {
            os.write_double(35, self.int_amt_8)?;
        }
        if self.emi_amt_8 != 0. {
            os.write_double(36, self.emi_amt_8)?;
        }
        if self.emi_date_8 != 0 {
            os.write_int64(37, self.emi_date_8)?;
        }
        if self.prin_amt_9 != 0. {
            os.write_double(38, self.prin_amt_9)?;
        }
        if self.int_amt_9 != 0. {
            os.write_double(39, self.int_amt_9)?;
        }
        if self.emi_amt_9 != 0. {
            os.write_double(40, self.emi_amt_9)?;
        }
        if self.emi_date_9 != 0 {
            os.write_int64(41, self.emi_date_9)?;
        }
        if self.prin_amt_10 != 0. {
            os.write_double(42, self.prin_amt_10)?;
        }
        if self.int_amt_10 != 0. {
            os.write_double(43, self.int_amt_10)?;
        }
        if self.emi_amt_10 != 0. {
            os.write_double(44, self.emi_amt_10)?;
        }
        if self.emi_date_10 != 0 {
            os.write_int64(45, self.emi_date_10)?;
        }
        if self.prin_amt_11 != 0. {
            os.write_double(46, self.prin_amt_11)?;
        }
        if self.int_amt_11 != 0. {
            os.write_double(47, self.int_amt_11)?;
        }
        if self.emi_amt_11 != 0. {
            os.write_double(48, self.emi_amt_11)?;
        }
        if self.emi_date_11 != 0 {
            os.write_int64(49, self.emi_date_11)?;
        }
        if self.prin_amt_12 != 0. {
            os.write_double(50, self.prin_amt_12)?;
        }
        if self.int_amt_12 != 0. {
            os.write_double(51, self.int_amt_12)?;
        }
        if self.emi_amt_12 != 0. {
            os.write_double(52, self.emi_amt_12)?;
        }
        if self.emi_date_12 != 0 {
            os.write_int64(53, self.emi_date_12)?;
        }
        if self.prin_amt_13 != 0. {
            os.write_double(54, self.prin_amt_13)?;
        }
        if self.int_amt_13 != 0. {
            os.write_double(55, self.int_amt_13)?;
        }
        if self.emi_amt_13 != 0. {
            os.write_double(56, self.emi_amt_13)?;
        }
        if self.emi_date_13 != 0 {
            os.write_int64(57, self.emi_date_13)?;
        }
        if self.prin_amt_14 != 0. {
            os.write_double(58, self.prin_amt_14)?;
        }
        if self.int_amt_14 != 0. {
            os.write_double(59, self.int_amt_14)?;
        }
        if self.emi_amt_14 != 0. {
            os.write_double(60, self.emi_amt_14)?;
        }
        if self.emi_date_14 != 0 {
            os.write_int64(61, self.emi_date_14)?;
        }
        if self.prin_amt_15 != 0. {
            os.write_double(62, self.prin_amt_15)?;
        }
        if self.int_amt_15 != 0. {
            os.write_double(63, self.int_amt_15)?;
        }
        if self.emi_amt_15 != 0. {
            os.write_double(64, self.emi_amt_15)?;
        }
        if self.emi_date_15 != 0 {
            os.write_int64(65, self.emi_date_15)?;
        }
        if self.prin_amt_16 != 0. {
            os.write_double(66, self.prin_amt_16)?;
        }
        if self.int_amt_16 != 0. {
            os.write_double(67, self.int_amt_16)?;
        }
        if self.emi_amt_16 != 0. {
            os.write_double(68, self.emi_amt_16)?;
        }
        if self.emi_date_16 != 0 {
            os.write_int64(69, self.emi_date_16)?;
        }
        if self.prin_amt_17 != 0. {
            os.write_double(70, self.prin_amt_17)?;
        }
        if self.int_amt_17 != 0. {
            os.write_double(71, self.int_amt_17)?;
        }
        if self.emi_amt_17 != 0. {
            os.write_double(72, self.emi_amt_17)?;
        }
        if self.emi_date_17 != 0 {
            os.write_int64(73, self.emi_date_17)?;
        }
        if self.prin_amt_18 != 0. {
            os.write_double(74, self.prin_amt_18)?;
        }
        if self.int_amt_18 != 0. {
            os.write_double(75, self.int_amt_18)?;
        }
        if self.emi_amt_18 != 0. {
            os.write_double(76, self.emi_amt_18)?;
        }
        if self.emi_date_18 != 0 {
            os.write_int64(77, self.emi_date_18)?;
        }
        if self.prin_amt_19 != 0. {
            os.write_double(78, self.prin_amt_19)?;
        }
        if self.int_amt_19 != 0. {
            os.write_double(79, self.int_amt_19)?;
        }
        if self.emi_amt_19 != 0. {
            os.write_double(80, self.emi_amt_19)?;
        }
        if self.emi_date_19 != 0 {
            os.write_int64(81, self.emi_date_19)?;
        }
        if self.prin_amt_20 != 0. {
            os.write_double(82, self.prin_amt_20)?;
        }
        if self.int_amt_20 != 0. {
            os.write_double(83, self.int_amt_20)?;
        }
        if self.emi_amt_20 != 0. {
            os.write_double(84, self.emi_amt_20)?;
        }
        if self.emi_date_20 != 0 {
            os.write_int64(85, self.emi_date_20)?;
        }
        if self.prin_amt_21 != 0. {
            os.write_double(86, self.prin_amt_21)?;
        }
        if self.int_amt_21 != 0. {
            os.write_double(87, self.int_amt_21)?;
        }
        if self.emi_amt_21 != 0. {
            os.write_double(88, self.emi_amt_21)?;
        }
        if self.emi_date_21 != 0 {
            os.write_int64(89, self.emi_date_21)?;
        }
        if self.prin_amt_22 != 0. {
            os.write_double(90, self.prin_amt_22)?;
        }
        if self.int_amt_22 != 0. {
            os.write_double(91, self.int_amt_22)?;
        }
        if self.emi_amt_22 != 0. {
            os.write_double(92, self.emi_amt_22)?;
        }
        if self.emi_date_22 != 0 {
            os.write_int64(93, self.emi_date_22)?;
        }
        if self.prin_amt_23 != 0. {
            os.write_double(94, self.prin_amt_23)?;
        }
        if self.int_amt_23 != 0. {
            os.write_double(95, self.int_amt_23)?;
        }
        if self.emi_amt_23 != 0. {
            os.write_double(96, self.emi_amt_23)?;
        }
        if self.emi_date_23 != 0 {
            os.write_int64(97, self.emi_date_23)?;
        }
        if self.prin_amt_24 != 0. {
            os.write_double(98, self.prin_amt_24)?;
        }
        if self.int_amt_24 != 0. {
            os.write_double(99, self.int_amt_24)?;
        }
        if self.emi_amt_24 != 0. {
            os.write_double(100, self.emi_amt_24)?;
        }
        if self.emi_date_24 != 0 {
            os.write_int64(101, self.emi_date_24)?;
        }
        if self.prin_amt_25 != 0. {
            os.write_double(102, self.prin_amt_25)?;
        }
        if self.int_amt_25 != 0. {
            os.write_double(103, self.int_amt_25)?;
        }
        if self.emi_amt_25 != 0. {
            os.write_double(104, self.emi_amt_25)?;
        }
        if self.emi_date_25 != 0 {
            os.write_int64(105, self.emi_date_25)?;
        }
        if self.prin_amt_26 != 0. {
            os.write_double(106, self.prin_amt_26)?;
        }
        if self.int_amt_26 != 0. {
            os.write_double(107, self.int_amt_26)?;
        }
        if self.emi_amt_26 != 0. {
            os.write_double(108, self.emi_amt_26)?;
        }
        if self.emi_date_26 != 0 {
            os.write_int64(109, self.emi_date_26)?;
        }
        if self.prin_amt_27 != 0. {
            os.write_double(110, self.prin_amt_27)?;
        }
        if self.int_amt_27 != 0. {
            os.write_double(111, self.int_amt_27)?;
        }
        if self.emi_amt_27 != 0. {
            os.write_double(112, self.emi_amt_27)?;
        }
        if self.emi_date_27 != 0 {
            os.write_int64(113, self.emi_date_27)?;
        }
        if self.prin_amt_28 != 0. {
            os.write_double(114, self.prin_amt_28)?;
        }
        if self.int_amt_28 != 0. {
            os.write_double(115, self.int_amt_28)?;
        }
        if self.emi_amt_28 != 0. {
            os.write_double(116, self.emi_amt_28)?;
        }
        if self.emi_date_28 != 0 {
            os.write_int64(117, self.emi_date_28)?;
        }
        if self.prin_amt_29 != 0. {
            os.write_double(118, self.prin_amt_29)?;
        }
        if self.int_amt_29 != 0. {
            os.write_double(119, self.int_amt_29)?;
        }
        if self.emi_amt_29 != 0. {
            os.write_double(120, self.emi_amt_29)?;
        }
        if self.emi_date_29 != 0 {
            os.write_int64(121, self.emi_date_29)?;
        }
        if self.prin_amt_30 != 0. {
            os.write_double(122, self.prin_amt_30)?;
        }
        if self.int_amt_30 != 0. {
            os.write_double(123, self.int_amt_30)?;
        }
        if self.emi_amt_30 != 0. {
            os.write_double(124, self.emi_amt_30)?;
        }
        if self.emi_date_30 != 0 {
            os.write_int64(125, self.emi_date_30)?;
        }
        if self.prin_amt_31 != 0. {
            os.write_double(126, self.prin_amt_31)?;
        }
        if self.int_amt_31 != 0. {
            os.write_double(127, self.int_amt_31)?;
        }
        if self.emi_amt_31 != 0. {
            os.write_double(128, self.emi_amt_31)?;
        }
        if self.emi_date_31 != 0 {
            os.write_int64(129, self.emi_date_31)?;
        }
        if self.prin_amt_32 != 0. {
            os.write_double(130, self.prin_amt_32)?;
        }
        if self.int_amt_32 != 0. {
            os.write_double(131, self.int_amt_32)?;
        }
        if self.emi_amt_32 != 0. {
            os.write_double(132, self.emi_amt_32)?;
        }
        if self.emi_date_32 != 0 {
            os.write_int64(133, self.emi_date_32)?;
        }
        if self.prin_amt_33 != 0. {
            os.write_double(134, self.prin_amt_33)?;
        }
        if self.int_amt_33 != 0. {
            os.write_double(135, self.int_amt_33)?;
        }
        if self.emi_amt_33 != 0. {
            os.write_double(136, self.emi_amt_33)?;
        }
        if self.emi_date_33 != 0 {
            os.write_int64(137, self.emi_date_33)?;
        }
        if self.prin_amt_34 != 0. {
            os.write_double(138, self.prin_amt_34)?;
        }
        if self.int_amt_34 != 0. {
            os.write_double(139, self.int_amt_34)?;
        }
        if self.emi_amt_34 != 0. {
            os.write_double(140, self.emi_amt_34)?;
        }
        if self.emi_date_34 != 0 {
            os.write_int64(141, self.emi_date_34)?;
        }
        if self.prin_amt_35 != 0. {
            os.write_double(142, self.prin_amt_35)?;
        }
        if self.int_amt_35 != 0. {
            os.write_double(143, self.int_amt_35)?;
        }
        if self.emi_amt_35 != 0. {
            os.write_double(144, self.emi_amt_35)?;
        }
        if self.emi_date_35 != 0 {
            os.write_int64(145, self.emi_date_35)?;
        }
        if self.prin_amt_36 != 0. {
            os.write_double(146, self.prin_amt_36)?;
        }
        if self.int_amt_36 != 0. {
            os.write_double(147, self.int_amt_36)?;
        }
        if self.emi_amt_36 != 0. {
            os.write_double(148, self.emi_amt_36)?;
        }
        if self.emi_date_36 != 0 {
            os.write_int64(149, self.emi_date_36)?;
        }
        if self.prin_amt_37 != 0. {
            os.write_double(150, self.prin_amt_37)?;
        }
        if self.int_amt_37 != 0. {
            os.write_double(151, self.int_amt_37)?;
        }
        if self.emi_amt_37 != 0. {
            os.write_double(152, self.emi_amt_37)?;
        }
        if self.emi_date_37 != 0 {
            os.write_int64(153, self.emi_date_37)?;
        }
        if self.prin_amt_38 != 0. {
            os.write_double(154, self.prin_amt_38)?;
        }
        if self.int_amt_38 != 0. {
            os.write_double(155, self.int_amt_38)?;
        }
        if self.emi_amt_38 != 0. {
            os.write_double(156, self.emi_amt_38)?;
        }
        if self.emi_date_38 != 0 {
            os.write_int64(157, self.emi_date_38)?;
        }
        if self.prin_amt_39 != 0. {
            os.write_double(158, self.prin_amt_39)?;
        }
        if self.int_amt_39 != 0. {
            os.write_double(159, self.int_amt_39)?;
        }
        if self.emi_amt_39 != 0. {
            os.write_double(160, self.emi_amt_39)?;
        }
        if self.emi_date_39 != 0 {
            os.write_int64(161, self.emi_date_39)?;
        }
        if self.prin_amt_40 != 0. {
            os.write_double(162, self.prin_amt_40)?;
        }
        if self.int_amt_40 != 0. {
            os.write_double(163, self.int_amt_40)?;
        }
        if self.emi_amt_40 != 0. {
            os.write_double(164, self.emi_amt_40)?;
        }
        if self.emi_date_40 != 0 {
            os.write_int64(165, self.emi_date_40)?;
        }
        if self.prin_amt_41 != 0. {
            os.write_double(166, self.prin_amt_41)?;
        }
        if self.int_amt_41 != 0. {
            os.write_double(167, self.int_amt_41)?;
        }
        if self.emi_amt_41 != 0. {
            os.write_double(168, self.emi_amt_41)?;
        }
        if self.emi_date_41 != 0 {
            os.write_int64(169, self.emi_date_41)?;
        }
        if self.prin_amt_42 != 0. {
            os.write_double(170, self.prin_amt_42)?;
        }
        if self.int_amt_42 != 0. {
            os.write_double(171, self.int_amt_42)?;
        }
        if self.emi_amt_42 != 0. {
            os.write_double(172, self.emi_amt_42)?;
        }
        if self.emi_date_42 != 0 {
            os.write_int64(173, self.emi_date_42)?;
        }
        if self.prin_amt_43 != 0. {
            os.write_double(174, self.prin_amt_43)?;
        }
        if self.int_amt_43 != 0. {
            os.write_double(175, self.int_amt_43)?;
        }
        if self.emi_amt_43 != 0. {
            os.write_double(176, self.emi_amt_43)?;
        }
        if self.emi_date_43 != 0 {
            os.write_int64(177, self.emi_date_43)?;
        }
        if self.prin_amt_44 != 0. {
            os.write_double(178, self.prin_amt_44)?;
        }
        if self.int_amt_44 != 0. {
            os.write_double(179, self.int_amt_44)?;
        }
        if self.emi_amt_44 != 0. {
            os.write_double(180, self.emi_amt_44)?;
        }
        if self.emi_date_44 != 0 {
            os.write_int64(181, self.emi_date_44)?;
        }
        if self.prin_amt_45 != 0. {
            os.write_double(182, self.prin_amt_45)?;
        }
        if self.int_amt_45 != 0. {
            os.write_double(183, self.int_amt_45)?;
        }
        if self.emi_amt_45 != 0. {
            os.write_double(184, self.emi_amt_45)?;
        }
        if self.emi_date_45 != 0 {
            os.write_int64(185, self.emi_date_45)?;
        }
        if self.prin_amt_46 != 0. {
            os.write_double(186, self.prin_amt_46)?;
        }
        if self.int_amt_46 != 0. {
            os.write_double(187, self.int_amt_46)?;
        }
        if self.emi_amt_46 != 0. {
            os.write_double(188, self.emi_amt_46)?;
        }
        if self.emi_date_46 != 0 {
            os.write_int64(189, self.emi_date_46)?;
        }
        if self.prin_amt_47 != 0. {
            os.write_double(190, self.prin_amt_47)?;
        }
        if self.int_amt_47 != 0. {
            os.write_double(191, self.int_amt_47)?;
        }
        if self.emi_amt_47 != 0. {
            os.write_double(192, self.emi_amt_47)?;
        }
        if self.emi_date_47 != 0 {
            os.write_int64(193, self.emi_date_47)?;
        }
        if self.prin_amt_48 != 0. {
            os.write_double(194, self.prin_amt_48)?;
        }
        if self.int_amt_48 != 0. {
            os.write_double(195, self.int_amt_48)?;
        }
        if self.emi_amt_48 != 0. {
            os.write_double(196, self.emi_amt_48)?;
        }
        if self.emi_date_48 != 0 {
            os.write_int64(197, self.emi_date_48)?;
        }
        if self.prin_amt_49 != 0. {
            os.write_double(198, self.prin_amt_49)?;
        }
        if self.int_amt_49 != 0. {
            os.write_double(199, self.int_amt_49)?;
        }
        if self.emi_amt_49 != 0. {
            os.write_double(200, self.emi_amt_49)?;
        }
        if self.emi_date_49 != 0 {
            os.write_int64(201, self.emi_date_49)?;
        }
        if self.prin_amt_50 != 0. {
            os.write_double(202, self.prin_amt_50)?;
        }
        if self.int_amt_50 != 0. {
            os.write_double(203, self.int_amt_50)?;
        }
        if self.emi_amt_50 != 0. {
            os.write_double(204, self.emi_amt_50)?;
        }
        if self.emi_date_50 != 0 {
            os.write_int64(205, self.emi_date_50)?;
        }
        if self.prin_amt_51 != 0. {
            os.write_double(206, self.prin_amt_51)?;
        }
        if self.int_amt_51 != 0. {
            os.write_double(207, self.int_amt_51)?;
        }
        if self.emi_amt_51 != 0. {
            os.write_double(208, self.emi_amt_51)?;
        }
        if self.emi_date_51 != 0 {
            os.write_int64(209, self.emi_date_51)?;
        }
        if self.prin_amt_52 != 0. {
            os.write_double(210, self.prin_amt_52)?;
        }
        if self.int_amt_52 != 0. {
            os.write_double(211, self.int_amt_52)?;
        }
        if self.emi_amt_52 != 0. {
            os.write_double(212, self.emi_amt_52)?;
        }
        if self.emi_date_52 != 0 {
            os.write_int64(213, self.emi_date_52)?;
        }
        if self.prin_amt_53 != 0. {
            os.write_double(214, self.prin_amt_53)?;
        }
        if self.int_amt_53 != 0. {
            os.write_double(215, self.int_amt_53)?;
        }
        if self.emi_amt_53 != 0. {
            os.write_double(216, self.emi_amt_53)?;
        }
        if self.emi_date_53 != 0 {
            os.write_int64(217, self.emi_date_53)?;
        }
        if self.prin_amt_54 != 0. {
            os.write_double(218, self.prin_amt_54)?;
        }
        if self.int_amt_54 != 0. {
            os.write_double(219, self.int_amt_54)?;
        }
        if self.emi_amt_54 != 0. {
            os.write_double(220, self.emi_amt_54)?;
        }
        if self.emi_date_54 != 0 {
            os.write_int64(221, self.emi_date_54)?;
        }
        if self.prin_amt_55 != 0. {
            os.write_double(222, self.prin_amt_55)?;
        }
        if self.int_amt_55 != 0. {
            os.write_double(223, self.int_amt_55)?;
        }
        if self.emi_amt_55 != 0. {
            os.write_double(224, self.emi_amt_55)?;
        }
        if self.emi_date_55 != 0 {
            os.write_int64(225, self.emi_date_55)?;
        }
        if self.prin_amt_56 != 0. {
            os.write_double(226, self.prin_amt_56)?;
        }
        if self.int_amt_56 != 0. {
            os.write_double(227, self.int_amt_56)?;
        }
        if self.emi_amt_56 != 0. {
            os.write_double(228, self.emi_amt_56)?;
        }
        if self.emi_date_56 != 0 {
            os.write_int64(229, self.emi_date_56)?;
        }
        if self.prin_amt_57 != 0. {
            os.write_double(230, self.prin_amt_57)?;
        }
        if self.int_amt_57 != 0. {
            os.write_double(231, self.int_amt_57)?;
        }
        if self.emi_amt_57 != 0. {
            os.write_double(232, self.emi_amt_57)?;
        }
        if self.emi_date_57 != 0 {
            os.write_int64(233, self.emi_date_57)?;
        }
        if self.prin_amt_58 != 0. {
            os.write_double(234, self.prin_amt_58)?;
        }
        if self.int_amt_58 != 0. {
            os.write_double(235, self.int_amt_58)?;
        }
        if self.emi_amt_58 != 0. {
            os.write_double(236, self.emi_amt_58)?;
        }
        if self.emi_date_58 != 0 {
            os.write_int64(237, self.emi_date_58)?;
        }
        if self.prin_amt_59 != 0. {
            os.write_double(238, self.prin_amt_59)?;
        }
        if self.int_amt_59 != 0. {
            os.write_double(239, self.int_amt_59)?;
        }
        if self.emi_amt_59 != 0. {
            os.write_double(240, self.emi_amt_59)?;
        }
        if self.emi_date_59 != 0 {
            os.write_int64(241, self.emi_date_59)?;
        }
        if self.prin_amt_60 != 0. {
            os.write_double(242, self.prin_amt_60)?;
        }
        if self.int_amt_60 != 0. {
            os.write_double(243, self.int_amt_60)?;
        }
        if self.emi_amt_60 != 0. {
            os.write_double(244, self.emi_amt_60)?;
        }
        if self.emi_date_60 != 0 {
            os.write_int64(245, self.emi_date_60)?;
        }
        if self.prin_amt_61 != 0. {
            os.write_double(246, self.prin_amt_61)?;
        }
        if self.int_amt_61 != 0. {
            os.write_double(247, self.int_amt_61)?;
        }
        if self.emi_amt_61 != 0. {
            os.write_double(248, self.emi_amt_61)?;
        }
        if self.emi_date_61 != 0 {
            os.write_int64(249, self.emi_date_61)?;
        }
        if self.prin_amt_62 != 0. {
            os.write_double(250, self.prin_amt_62)?;
        }
        if self.int_amt_62 != 0. {
            os.write_double(251, self.int_amt_62)?;
        }
        if self.emi_amt_62 != 0. {
            os.write_double(252, self.emi_amt_62)?;
        }
        if self.emi_date_62 != 0 {
            os.write_int64(253, self.emi_date_62)?;
        }
        if self.prin_amt_63 != 0. {
            os.write_double(254, self.prin_amt_63)?;
        }
        if self.int_amt_63 != 0. {
            os.write_double(255, self.int_amt_63)?;
        }
        if self.emi_amt_63 != 0. {
            os.write_double(256, self.emi_amt_63)?;
        }
        if self.emi_date_63 != 0 {
            os.write_int64(257, self.emi_date_63)?;
        }
        if self.prin_amt_64 != 0. {
            os.write_double(258, self.prin_amt_64)?;
        }
        if self.int_amt_64 != 0. {
            os.write_double(259, self.int_amt_64)?;
        }
        if self.emi_amt_64 != 0. {
            os.write_double(260, self.emi_amt_64)?;
        }
        if self.emi_date_64 != 0 {
            os.write_int64(261, self.emi_date_64)?;
        }
        if self.prin_amt_65 != 0. {
            os.write_double(262, self.prin_amt_65)?;
        }
        if self.int_amt_65 != 0. {
            os.write_double(263, self.int_amt_65)?;
        }
        if self.emi_amt_65 != 0. {
            os.write_double(264, self.emi_amt_65)?;
        }
        if self.emi_date_65 != 0 {
            os.write_int64(265, self.emi_date_65)?;
        }
        if self.prin_amt_66 != 0. {
            os.write_double(266, self.prin_amt_66)?;
        }
        if self.int_amt_66 != 0. {
            os.write_double(267, self.int_amt_66)?;
        }
        if self.emi_amt_66 != 0. {
            os.write_double(268, self.emi_amt_66)?;
        }
        if self.emi_date_66 != 0 {
            os.write_int64(269, self.emi_date_66)?;
        }
        if self.prin_amt_67 != 0. {
            os.write_double(270, self.prin_amt_67)?;
        }
        if self.int_amt_67 != 0. {
            os.write_double(271, self.int_amt_67)?;
        }
        if self.emi_amt_67 != 0. {
            os.write_double(272, self.emi_amt_67)?;
        }
        if self.emi_date_67 != 0 {
            os.write_int64(273, self.emi_date_67)?;
        }
        if self.prin_amt_68 != 0. {
            os.write_double(274, self.prin_amt_68)?;
        }
        if self.int_amt_68 != 0. {
            os.write_double(275, self.int_amt_68)?;
        }
        if self.emi_amt_68 != 0. {
            os.write_double(276, self.emi_amt_68)?;
        }
        if self.emi_date_68 != 0 {
            os.write_int64(277, self.emi_date_68)?;
        }
        if self.prin_amt_69 != 0. {
            os.write_double(278, self.prin_amt_69)?;
        }
        if self.int_amt_69 != 0. {
            os.write_double(279, self.int_amt_69)?;
        }
        if self.emi_amt_69 != 0. {
            os.write_double(280, self.emi_amt_69)?;
        }
        if self.emi_date_69 != 0 {
            os.write_int64(281, self.emi_date_69)?;
        }
        if self.prin_amt_70 != 0. {
            os.write_double(282, self.prin_amt_70)?;
        }
        if self.int_amt_70 != 0. {
            os.write_double(283, self.int_amt_70)?;
        }
        if self.emi_amt_70 != 0. {
            os.write_double(284, self.emi_amt_70)?;
        }
        if self.emi_date_70 != 0 {
            os.write_int64(285, self.emi_date_70)?;
        }
        if self.prin_amt_71 != 0. {
            os.write_double(286, self.prin_amt_71)?;
        }
        if self.int_amt_71 != 0. {
            os.write_double(287, self.int_amt_71)?;
        }
        if self.emi_amt_71 != 0. {
            os.write_double(288, self.emi_amt_71)?;
        }
        if self.emi_date_71 != 0 {
            os.write_int64(289, self.emi_date_71)?;
        }
        if self.prin_amt_72 != 0. {
            os.write_double(290, self.prin_amt_72)?;
        }
        if self.int_amt_72 != 0. {
            os.write_double(291, self.int_amt_72)?;
        }
        if self.emi_amt_72 != 0. {
            os.write_double(292, self.emi_amt_72)?;
        }
        if self.emi_date_72 != 0 {
            os.write_int64(293, self.emi_date_72)?;
        }
        if self.prin_amt_73 != 0. {
            os.write_double(294, self.prin_amt_73)?;
        }
        if self.int_amt_73 != 0. {
            os.write_double(295, self.int_amt_73)?;
        }
        if self.emi_amt_73 != 0. {
            os.write_double(296, self.emi_amt_73)?;
        }
        if self.emi_date_73 != 0 {
            os.write_int64(297, self.emi_date_73)?;
        }
        if self.prin_amt_74 != 0. {
            os.write_double(298, self.prin_amt_74)?;
        }
        if self.int_amt_74 != 0. {
            os.write_double(299, self.int_amt_74)?;
        }
        if self.emi_amt_74 != 0. {
            os.write_double(300, self.emi_amt_74)?;
        }
        if self.emi_date_74 != 0 {
            os.write_int64(301, self.emi_date_74)?;
        }
        if self.prin_amt_75 != 0. {
            os.write_double(302, self.prin_amt_75)?;
        }
        if self.int_amt_75 != 0. {
            os.write_double(303, self.int_amt_75)?;
        }
        if self.emi_amt_75 != 0. {
            os.write_double(304, self.emi_amt_75)?;
        }
        if self.emi_date_75 != 0 {
            os.write_int64(305, self.emi_date_75)?;
        }
        if self.prin_amt_76 != 0. {
            os.write_double(306, self.prin_amt_76)?;
        }
        if self.int_amt_76 != 0. {
            os.write_double(307, self.int_amt_76)?;
        }
        if self.emi_amt_76 != 0. {
            os.write_double(308, self.emi_amt_76)?;
        }
        if self.emi_date_76 != 0 {
            os.write_int64(309, self.emi_date_76)?;
        }
        if self.prin_amt_77 != 0. {
            os.write_double(310, self.prin_amt_77)?;
        }
        if self.int_amt_77 != 0. {
            os.write_double(311, self.int_amt_77)?;
        }
        if self.emi_amt_77 != 0. {
            os.write_double(312, self.emi_amt_77)?;
        }
        if self.emi_date_77 != 0 {
            os.write_int64(313, self.emi_date_77)?;
        }
        if self.prin_amt_78 != 0. {
            os.write_double(314, self.prin_amt_78)?;
        }
        if self.int_amt_78 != 0. {
            os.write_double(315, self.int_amt_78)?;
        }
        if self.emi_amt_78 != 0. {
            os.write_double(316, self.emi_amt_78)?;
        }
        if self.emi_date_78 != 0 {
            os.write_int64(317, self.emi_date_78)?;
        }
        if self.prin_amt_79 != 0. {
            os.write_double(318, self.prin_amt_79)?;
        }
        if self.int_amt_79 != 0. {
            os.write_double(319, self.int_amt_79)?;
        }
        if self.emi_amt_79 != 0. {
            os.write_double(320, self.emi_amt_79)?;
        }
        if self.emi_date_79 != 0 {
            os.write_int64(321, self.emi_date_79)?;
        }
        if self.prin_amt_80 != 0. {
            os.write_double(322, self.prin_amt_80)?;
        }
        if self.int_amt_80 != 0. {
            os.write_double(323, self.int_amt_80)?;
        }
        if self.emi_amt_80 != 0. {
            os.write_double(324, self.emi_amt_80)?;
        }
        if self.emi_date_80 != 0 {
            os.write_int64(325, self.emi_date_80)?;
        }
        if self.prin_amt_81 != 0. {
            os.write_double(326, self.prin_amt_81)?;
        }
        if self.int_amt_81 != 0. {
            os.write_double(327, self.int_amt_81)?;
        }
        if self.emi_amt_81 != 0. {
            os.write_double(328, self.emi_amt_81)?;
        }
        if self.emi_date_81 != 0 {
            os.write_int64(329, self.emi_date_81)?;
        }
        if self.prin_amt_82 != 0. {
            os.write_double(330, self.prin_amt_82)?;
        }
        if self.int_amt_82 != 0. {
            os.write_double(331, self.int_amt_82)?;
        }
        if self.emi_amt_82 != 0. {
            os.write_double(332, self.emi_amt_82)?;
        }
        if self.emi_date_82 != 0 {
            os.write_int64(333, self.emi_date_82)?;
        }
        if self.prin_amt_83 != 0. {
            os.write_double(334, self.prin_amt_83)?;
        }
        if self.int_amt_83 != 0. {
            os.write_double(335, self.int_amt_83)?;
        }
        if self.emi_amt_83 != 0. {
            os.write_double(336, self.emi_amt_83)?;
        }
        if self.emi_date_83 != 0 {
            os.write_int64(337, self.emi_date_83)?;
        }
        if self.prin_amt_84 != 0. {
            os.write_double(338, self.prin_amt_84)?;
        }
        if self.int_amt_84 != 0. {
            os.write_double(339, self.int_amt_84)?;
        }
        if self.emi_amt_84 != 0. {
            os.write_double(340, self.emi_amt_84)?;
        }
        if self.emi_date_84 != 0 {
            os.write_int64(341, self.emi_date_84)?;
        }
        if self.prin_amt_85 != 0. {
            os.write_double(342, self.prin_amt_85)?;
        }
        if self.int_amt_85 != 0. {
            os.write_double(343, self.int_amt_85)?;
        }
        if self.emi_amt_85 != 0. {
            os.write_double(344, self.emi_amt_85)?;
        }
        if self.emi_date_85 != 0 {
            os.write_int64(345, self.emi_date_85)?;
        }
        if self.prin_amt_86 != 0. {
            os.write_double(346, self.prin_amt_86)?;
        }
        if self.int_amt_86 != 0. {
            os.write_double(347, self.int_amt_86)?;
        }
        if self.emi_amt_86 != 0. {
            os.write_double(348, self.emi_amt_86)?;
        }
        if self.emi_date_86 != 0 {
            os.write_int64(349, self.emi_date_86)?;
        }
        if self.prin_amt_87 != 0. {
            os.write_double(350, self.prin_amt_87)?;
        }
        if self.int_amt_87 != 0. {
            os.write_double(351, self.int_amt_87)?;
        }
        if self.emi_amt_87 != 0. {
            os.write_double(352, self.emi_amt_87)?;
        }
        if self.emi_date_87 != 0 {
            os.write_int64(353, self.emi_date_87)?;
        }
        if self.prin_amt_88 != 0. {
            os.write_double(354, self.prin_amt_88)?;
        }
        if self.int_amt_88 != 0. {
            os.write_double(355, self.int_amt_88)?;
        }
        if self.emi_amt_88 != 0. {
            os.write_double(356, self.emi_amt_88)?;
        }
        if self.emi_date_88 != 0 {
            os.write_int64(357, self.emi_date_88)?;
        }
        if self.prin_amt_89 != 0. {
            os.write_double(358, self.prin_amt_89)?;
        }
        if self.int_amt_89 != 0. {
            os.write_double(359, self.int_amt_89)?;
        }
        if self.emi_amt_89 != 0. {
            os.write_double(360, self.emi_amt_89)?;
        }
        if self.emi_date_89 != 0 {
            os.write_int64(361, self.emi_date_89)?;
        }
        if self.prin_amt_90 != 0. {
            os.write_double(362, self.prin_amt_90)?;
        }
        if self.int_amt_90 != 0. {
            os.write_double(363, self.int_amt_90)?;
        }
        if self.emi_amt_90 != 0. {
            os.write_double(364, self.emi_amt_90)?;
        }
        if self.emi_date_90 != 0 {
            os.write_int64(365, self.emi_date_90)?;
        }
        if self.prin_amt_91 != 0. {
            os.write_double(366, self.prin_amt_91)?;
        }
        if self.int_amt_91 != 0. {
            os.write_double(367, self.int_amt_91)?;
        }
        if self.emi_amt_91 != 0. {
            os.write_double(368, self.emi_amt_91)?;
        }
        if self.emi_date_91 != 0 {
            os.write_int64(369, self.emi_date_91)?;
        }
        if self.prin_amt_92 != 0. {
            os.write_double(370, self.prin_amt_92)?;
        }
        if self.int_amt_92 != 0. {
            os.write_double(371, self.int_amt_92)?;
        }
        if self.emi_amt_92 != 0. {
            os.write_double(372, self.emi_amt_92)?;
        }
        if self.emi_date_92 != 0 {
            os.write_int64(373, self.emi_date_92)?;
        }
        if self.prin_amt_93 != 0. {
            os.write_double(374, self.prin_amt_93)?;
        }
        if self.int_amt_93 != 0. {
            os.write_double(375, self.int_amt_93)?;
        }
        if self.emi_amt_93 != 0. {
            os.write_double(376, self.emi_amt_93)?;
        }
        if self.emi_date_93 != 0 {
            os.write_int64(377, self.emi_date_93)?;
        }
        if self.prin_amt_94 != 0. {
            os.write_double(378, self.prin_amt_94)?;
        }
        if self.int_amt_94 != 0. {
            os.write_double(379, self.int_amt_94)?;
        }
        if self.emi_amt_94 != 0. {
            os.write_double(380, self.emi_amt_94)?;
        }
        if self.emi_date_94 != 0 {
            os.write_int64(381, self.emi_date_94)?;
        }
        if self.prin_amt_95 != 0. {
            os.write_double(382, self.prin_amt_95)?;
        }
        if self.int_amt_95 != 0. {
            os.write_double(383, self.int_amt_95)?;
        }
        if self.emi_amt_95 != 0. {
            os.write_double(384, self.emi_amt_95)?;
        }
        if self.emi_date_95 != 0 {
            os.write_int64(385, self.emi_date_95)?;
        }
        if self.prin_amt_96 != 0. {
            os.write_double(386, self.prin_amt_96)?;
        }
        if self.int_amt_96 != 0. {
            os.write_double(387, self.int_amt_96)?;
        }
        if self.emi_amt_96 != 0. {
            os.write_double(388, self.emi_amt_96)?;
        }
        if self.emi_date_96 != 0 {
            os.write_int64(389, self.emi_date_96)?;
        }
        if self.prin_amt_97 != 0. {
            os.write_double(390, self.prin_amt_97)?;
        }
        if self.int_amt_97 != 0. {
            os.write_double(391, self.int_amt_97)?;
        }
        if self.emi_amt_97 != 0. {
            os.write_double(392, self.emi_amt_97)?;
        }
        if self.emi_date_97 != 0 {
            os.write_int64(393, self.emi_date_97)?;
        }
        if self.prin_amt_98 != 0. {
            os.write_double(394, self.prin_amt_98)?;
        }
        if self.int_amt_98 != 0. {
            os.write_double(395, self.int_amt_98)?;
        }
        if self.emi_amt_98 != 0. {
            os.write_double(396, self.emi_amt_98)?;
        }
        if self.emi_date_98 != 0 {
            os.write_int64(397, self.emi_date_98)?;
        }
        if self.prin_amt_99 != 0. {
            os.write_double(398, self.prin_amt_99)?;
        }
        if self.int_amt_99 != 0. {
            os.write_double(399, self.int_amt_99)?;
        }
        if self.emi_amt_99 != 0. {
            os.write_double(400, self.emi_amt_99)?;
        }
        if self.emi_date_99 != 0 {
            os.write_int64(401, self.emi_date_99)?;
        }
        if self.prin_amt_100 != 0. {
            os.write_double(402, self.prin_amt_100)?;
        }
        if self.int_amt_100 != 0. {
            os.write_double(403, self.int_amt_100)?;
        }
        if self.emi_amt_100 != 0. {
            os.write_double(404, self.emi_amt_100)?;
        }
        if self.emi_date_100 != 0 {
            os.write_int64(405, self.emi_date_100)?;
        }
        if self.prin_amt_101 != 0. {
            os.write_double(406, self.prin_amt_101)?;
        }
        if self.int_amt_101 != 0. {
            os.write_double(407, self.int_amt_101)?;
        }
        if self.emi_amt_101 != 0. {
            os.write_double(408, self.emi_amt_101)?;
        }
        if self.emi_date_101 != 0 {
            os.write_int64(409, self.emi_date_101)?;
        }
        if self.prin_amt_102 != 0. {
            os.write_double(410, self.prin_amt_102)?;
        }
        if self.int_amt_102 != 0. {
            os.write_double(411, self.int_amt_102)?;
        }
        if self.emi_amt_102 != 0. {
            os.write_double(412, self.emi_amt_102)?;
        }
        if self.emi_date_102 != 0 {
            os.write_int64(413, self.emi_date_102)?;
        }
        if self.prin_amt_103 != 0. {
            os.write_double(414, self.prin_amt_103)?;
        }
        if self.int_amt_103 != 0. {
            os.write_double(415, self.int_amt_103)?;
        }
        if self.emi_amt_103 != 0. {
            os.write_double(416, self.emi_amt_103)?;
        }
        if self.emi_date_103 != 0 {
            os.write_int64(417, self.emi_date_103)?;
        }
        if self.prin_amt_104 != 0. {
            os.write_double(418, self.prin_amt_104)?;
        }
        if self.int_amt_104 != 0. {
            os.write_double(419, self.int_amt_104)?;
        }
        if self.emi_amt_104 != 0. {
            os.write_double(420, self.emi_amt_104)?;
        }
        if self.emi_date_104 != 0 {
            os.write_int64(421, self.emi_date_104)?;
        }
        if self.prin_amt_105 != 0. {
            os.write_double(422, self.prin_amt_105)?;
        }
        if self.int_amt_105 != 0. {
            os.write_double(423, self.int_amt_105)?;
        }
        if self.emi_amt_105 != 0. {
            os.write_double(424, self.emi_amt_105)?;
        }
        if self.emi_date_105 != 0 {
            os.write_int64(425, self.emi_date_105)?;
        }
        if self.prin_amt_106 != 0. {
            os.write_double(426, self.prin_amt_106)?;
        }
        if self.int_amt_106 != 0. {
            os.write_double(427, self.int_amt_106)?;
        }
        if self.emi_amt_106 != 0. {
            os.write_double(428, self.emi_amt_106)?;
        }
        if self.emi_date_106 != 0 {
            os.write_int64(429, self.emi_date_106)?;
        }
        if self.prin_amt_107 != 0. {
            os.write_double(430, self.prin_amt_107)?;
        }
        if self.int_amt_107 != 0. {
            os.write_double(431, self.int_amt_107)?;
        }
        if self.emi_amt_107 != 0. {
            os.write_double(432, self.emi_amt_107)?;
        }
        if self.emi_date_107 != 0 {
            os.write_int64(433, self.emi_date_107)?;
        }
        if self.prin_amt_108 != 0. {
            os.write_double(434, self.prin_amt_108)?;
        }
        if self.int_amt_108 != 0. {
            os.write_double(435, self.int_amt_108)?;
        }
        if self.emi_amt_108 != 0. {
            os.write_double(436, self.emi_amt_108)?;
        }
        if self.emi_date_108 != 0 {
            os.write_int64(437, self.emi_date_108)?;
        }
        if self.prin_amt_109 != 0. {
            os.write_double(438, self.prin_amt_109)?;
        }
        if self.int_amt_109 != 0. {
            os.write_double(439, self.int_amt_109)?;
        }
        if self.emi_amt_109 != 0. {
            os.write_double(440, self.emi_amt_109)?;
        }
        if self.emi_date_109 != 0 {
            os.write_int64(441, self.emi_date_109)?;
        }
        if self.prin_amt_110 != 0. {
            os.write_double(442, self.prin_amt_110)?;
        }
        if self.int_amt_110 != 0. {
            os.write_double(443, self.int_amt_110)?;
        }
        if self.emi_amt_110 != 0. {
            os.write_double(444, self.emi_amt_110)?;
        }
        if self.emi_date_110 != 0 {
            os.write_int64(445, self.emi_date_110)?;
        }
        if self.prin_amt_111 != 0. {
            os.write_double(446, self.prin_amt_111)?;
        }
        if self.int_amt_111 != 0. {
            os.write_double(447, self.int_amt_111)?;
        }
        if self.emi_amt_111 != 0. {
            os.write_double(448, self.emi_amt_111)?;
        }
        if self.emi_date_111 != 0 {
            os.write_int64(449, self.emi_date_111)?;
        }
        if self.prin_amt_112 != 0. {
            os.write_double(450, self.prin_amt_112)?;
        }
        if self.int_amt_112 != 0. {
            os.write_double(451, self.int_amt_112)?;
        }
        if self.emi_amt_112 != 0. {
            os.write_double(452, self.emi_amt_112)?;
        }
        if self.emi_date_112 != 0 {
            os.write_int64(453, self.emi_date_112)?;
        }
        if self.prin_amt_113 != 0. {
            os.write_double(454, self.prin_amt_113)?;
        }
        if self.int_amt_113 != 0. {
            os.write_double(455, self.int_amt_113)?;
        }
        if self.emi_amt_113 != 0. {
            os.write_double(456, self.emi_amt_113)?;
        }
        if self.emi_date_113 != 0 {
            os.write_int64(457, self.emi_date_113)?;
        }
        if self.prin_amt_114 != 0. {
            os.write_double(458, self.prin_amt_114)?;
        }
        if self.int_amt_114 != 0. {
            os.write_double(459, self.int_amt_114)?;
        }
        if self.emi_amt_114 != 0. {
            os.write_double(460, self.emi_amt_114)?;
        }
        if self.emi_date_114 != 0 {
            os.write_int64(461, self.emi_date_114)?;
        }
        if self.prin_amt_115 != 0. {
            os.write_double(462, self.prin_amt_115)?;
        }
        if self.int_amt_115 != 0. {
            os.write_double(463, self.int_amt_115)?;
        }
        if self.emi_amt_115 != 0. {
            os.write_double(464, self.emi_amt_115)?;
        }
        if self.emi_date_115 != 0 {
            os.write_int64(465, self.emi_date_115)?;
        }
        if self.prin_amt_116 != 0. {
            os.write_double(466, self.prin_amt_116)?;
        }
        if self.int_amt_116 != 0. {
            os.write_double(467, self.int_amt_116)?;
        }
        if self.emi_amt_116 != 0. {
            os.write_double(468, self.emi_amt_116)?;
        }
        if self.emi_date_116 != 0 {
            os.write_int64(469, self.emi_date_116)?;
        }
        if self.prin_amt_117 != 0. {
            os.write_double(470, self.prin_amt_117)?;
        }
        if self.int_amt_117 != 0. {
            os.write_double(471, self.int_amt_117)?;
        }
        if self.emi_amt_117 != 0. {
            os.write_double(472, self.emi_amt_117)?;
        }
        if self.emi_date_117 != 0 {
            os.write_int64(473, self.emi_date_117)?;
        }
        if self.prin_amt_118 != 0. {
            os.write_double(474, self.prin_amt_118)?;
        }
        if self.int_amt_118 != 0. {
            os.write_double(475, self.int_amt_118)?;
        }
        if self.emi_amt_118 != 0. {
            os.write_double(476, self.emi_amt_118)?;
        }
        if self.emi_date_118 != 0 {
            os.write_int64(477, self.emi_date_118)?;
        }
        if self.prin_amt_119 != 0. {
            os.write_double(478, self.prin_amt_119)?;
        }
        if self.int_amt_119 != 0. {
            os.write_double(479, self.int_amt_119)?;
        }
        if self.emi_amt_119 != 0. {
            os.write_double(480, self.emi_amt_119)?;
        }
        if self.emi_date_119 != 0 {
            os.write_int64(481, self.emi_date_119)?;
        }
        if self.prin_amt_120 != 0. {
            os.write_double(482, self.prin_amt_120)?;
        }
        if self.int_amt_120 != 0. {
            os.write_double(483, self.int_amt_120)?;
        }
        if self.emi_amt_120 != 0. {
            os.write_double(484, self.emi_amt_120)?;
        }
        if self.emi_date_120 != 0 {
            os.write_int64(485, self.emi_date_120)?;
        }
        if self.d_f_coc_emi_date_loan_booked != 0 {
            os.write_int64(486, self.d_f_coc_emi_date_loan_booked)?;
        }
        if !self.v_f_coc_emi_loan_src.is_empty() {
            os.write_string(487, &self.v_f_coc_emi_loan_src)?;
        }
        if !self.v_f_coc_emi_tenure.is_empty() {
            os.write_string(488, &self.v_f_coc_emi_tenure)?;
        }
        if self.n_f_coc_emi_loan_amount != 0. {
            os.write_double(489, self.n_f_coc_emi_loan_amount)?;
        }
        if !self.v_f_coc_emi_loan_nbr.is_empty() {
            os.write_string(490, &self.v_f_coc_emi_loan_nbr)?;
        }
        if self.n_f_coc_emi_out_prin != 0. {
            os.write_double(491, self.n_f_coc_emi_out_prin)?;
        }
        if self.n_f_coc_emi_out_int != 0. {
            os.write_double(492, self.n_f_coc_emi_out_int)?;
        }
        if self.total_outstanding != 0. {
            os.write_double(493, self.total_outstanding)?;
        }
        if self.v_f_coc_emi_rate_of_int != 0. {
            os.write_double(494, self.v_f_coc_emi_rate_of_int)?;
        }
        if !self.n_f_coc_emi_org.is_empty() {
            os.write_string(495, &self.n_f_coc_emi_org)?;
        }
        if !self.v_f_coc_emi_chg_type.is_empty() {
            os.write_string(496, &self.v_f_coc_emi_chg_type)?;
        }
        if self.filler != 0 {
            os.write_int64(497, self.filler)?;
        }
        for v in &self.cashflows {
            os.write_tag(498, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "org",
                    |m: &AccountWithCashflows| { &m.org },
                    |m: &mut AccountWithCashflows| { &mut m.org },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "logo",
                    |m: &AccountWithCashflows| { &m.logo },
                    |m: &mut AccountWithCashflows| { &mut m.logo },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acct",
                    |m: &AccountWithCashflows| { &m.acct },
                    |m: &mut AccountWithCashflows| { &mut m.acct },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "loan_nbr",
                    |m: &AccountWithCashflows| { &m.loan_nbr },
                    |m: &mut AccountWithCashflows| { &mut m.loan_nbr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "tenure",
                    |m: &AccountWithCashflows| { &m.tenure },
                    |m: &mut AccountWithCashflows| { &mut m.tenure },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_1",
                    |m: &AccountWithCashflows| { &m.prin_amt_1 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_1",
                    |m: &AccountWithCashflows| { &m.int_amt_1 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_1",
                    |m: &AccountWithCashflows| { &m.emi_amt_1 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_1",
                    |m: &AccountWithCashflows| { &m.emi_date_1 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_2",
                    |m: &AccountWithCashflows| { &m.prin_amt_2 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_2",
                    |m: &AccountWithCashflows| { &m.int_amt_2 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_2",
                    |m: &AccountWithCashflows| { &m.emi_amt_2 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_2",
                    |m: &AccountWithCashflows| { &m.emi_date_2 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_3",
                    |m: &AccountWithCashflows| { &m.prin_amt_3 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_3",
                    |m: &AccountWithCashflows| { &m.int_amt_3 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_3",
                    |m: &AccountWithCashflows| { &m.emi_amt_3 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_3",
                    |m: &AccountWithCashflows| { &m.emi_date_3 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_4",
                    |m: &AccountWithCashflows| { &m.prin_amt_4 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_4",
                    |m: &AccountWithCashflows| { &m.int_amt_4 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_4",
                    |m: &AccountWithCashflows| { &m.emi_amt_4 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_4",
                    |m: &AccountWithCashflows| { &m.emi_date_4 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_5",
                    |m: &AccountWithCashflows| { &m.prin_amt_5 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_5",
                    |m: &AccountWithCashflows| { &m.int_amt_5 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_5",
                    |m: &AccountWithCashflows| { &m.emi_amt_5 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_5",
                    |m: &AccountWithCashflows| { &m.emi_date_5 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_6",
                    |m: &AccountWithCashflows| { &m.prin_amt_6 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_6 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_6",
                    |m: &AccountWithCashflows| { &m.int_amt_6 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_6 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_6",
                    |m: &AccountWithCashflows| { &m.emi_amt_6 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_6 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_6",
                    |m: &AccountWithCashflows| { &m.emi_date_6 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_6 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_7",
                    |m: &AccountWithCashflows| { &m.prin_amt_7 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_7 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_7",
                    |m: &AccountWithCashflows| { &m.int_amt_7 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_7 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_7",
                    |m: &AccountWithCashflows| { &m.emi_amt_7 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_7 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_7",
                    |m: &AccountWithCashflows| { &m.emi_date_7 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_7 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_8",
                    |m: &AccountWithCashflows| { &m.prin_amt_8 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_8 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_8",
                    |m: &AccountWithCashflows| { &m.int_amt_8 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_8 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_8",
                    |m: &AccountWithCashflows| { &m.emi_amt_8 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_8 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_8",
                    |m: &AccountWithCashflows| { &m.emi_date_8 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_8 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_9",
                    |m: &AccountWithCashflows| { &m.prin_amt_9 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_9 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_9",
                    |m: &AccountWithCashflows| { &m.int_amt_9 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_9 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_9",
                    |m: &AccountWithCashflows| { &m.emi_amt_9 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_9 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_9",
                    |m: &AccountWithCashflows| { &m.emi_date_9 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_9 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_10",
                    |m: &AccountWithCashflows| { &m.prin_amt_10 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_10 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_10",
                    |m: &AccountWithCashflows| { &m.int_amt_10 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_10 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_10",
                    |m: &AccountWithCashflows| { &m.emi_amt_10 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_10 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_10",
                    |m: &AccountWithCashflows| { &m.emi_date_10 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_10 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_11",
                    |m: &AccountWithCashflows| { &m.prin_amt_11 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_11 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_11",
                    |m: &AccountWithCashflows| { &m.int_amt_11 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_11 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_11",
                    |m: &AccountWithCashflows| { &m.emi_amt_11 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_11 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_11",
                    |m: &AccountWithCashflows| { &m.emi_date_11 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_11 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_12",
                    |m: &AccountWithCashflows| { &m.prin_amt_12 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_12 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_12",
                    |m: &AccountWithCashflows| { &m.int_amt_12 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_12 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_12",
                    |m: &AccountWithCashflows| { &m.emi_amt_12 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_12 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_12",
                    |m: &AccountWithCashflows| { &m.emi_date_12 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_12 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_13",
                    |m: &AccountWithCashflows| { &m.prin_amt_13 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_13 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_13",
                    |m: &AccountWithCashflows| { &m.int_amt_13 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_13 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_13",
                    |m: &AccountWithCashflows| { &m.emi_amt_13 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_13 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_13",
                    |m: &AccountWithCashflows| { &m.emi_date_13 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_13 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_14",
                    |m: &AccountWithCashflows| { &m.prin_amt_14 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_14 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_14",
                    |m: &AccountWithCashflows| { &m.int_amt_14 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_14 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_14",
                    |m: &AccountWithCashflows| { &m.emi_amt_14 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_14 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_14",
                    |m: &AccountWithCashflows| { &m.emi_date_14 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_14 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_15",
                    |m: &AccountWithCashflows| { &m.prin_amt_15 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_15 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_15",
                    |m: &AccountWithCashflows| { &m.int_amt_15 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_15 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_15",
                    |m: &AccountWithCashflows| { &m.emi_amt_15 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_15 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_15",
                    |m: &AccountWithCashflows| { &m.emi_date_15 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_15 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_16",
                    |m: &AccountWithCashflows| { &m.prin_amt_16 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_16 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_16",
                    |m: &AccountWithCashflows| { &m.int_amt_16 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_16 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_16",
                    |m: &AccountWithCashflows| { &m.emi_amt_16 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_16 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_16",
                    |m: &AccountWithCashflows| { &m.emi_date_16 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_16 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_17",
                    |m: &AccountWithCashflows| { &m.prin_amt_17 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_17 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_17",
                    |m: &AccountWithCashflows| { &m.int_amt_17 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_17 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_17",
                    |m: &AccountWithCashflows| { &m.emi_amt_17 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_17 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_17",
                    |m: &AccountWithCashflows| { &m.emi_date_17 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_17 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_18",
                    |m: &AccountWithCashflows| { &m.prin_amt_18 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_18 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_18",
                    |m: &AccountWithCashflows| { &m.int_amt_18 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_18 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_18",
                    |m: &AccountWithCashflows| { &m.emi_amt_18 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_18 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_18",
                    |m: &AccountWithCashflows| { &m.emi_date_18 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_18 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_19",
                    |m: &AccountWithCashflows| { &m.prin_amt_19 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_19 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_19",
                    |m: &AccountWithCashflows| { &m.int_amt_19 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_19 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_19",
                    |m: &AccountWithCashflows| { &m.emi_amt_19 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_19 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_19",
                    |m: &AccountWithCashflows| { &m.emi_date_19 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_19 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_20",
                    |m: &AccountWithCashflows| { &m.prin_amt_20 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_20 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_20",
                    |m: &AccountWithCashflows| { &m.int_amt_20 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_20 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_20",
                    |m: &AccountWithCashflows| { &m.emi_amt_20 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_20 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_20",
                    |m: &AccountWithCashflows| { &m.emi_date_20 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_20 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_21",
                    |m: &AccountWithCashflows| { &m.prin_amt_21 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_21 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_21",
                    |m: &AccountWithCashflows| { &m.int_amt_21 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_21 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_21",
                    |m: &AccountWithCashflows| { &m.emi_amt_21 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_21 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_21",
                    |m: &AccountWithCashflows| { &m.emi_date_21 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_21 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_22",
                    |m: &AccountWithCashflows| { &m.prin_amt_22 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_22 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_22",
                    |m: &AccountWithCashflows| { &m.int_amt_22 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_22 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_22",
                    |m: &AccountWithCashflows| { &m.emi_amt_22 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_22 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_22",
                    |m: &AccountWithCashflows| { &m.emi_date_22 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_22 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_23",
                    |m: &AccountWithCashflows| { &m.prin_amt_23 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_23 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_23",
                    |m: &AccountWithCashflows| { &m.int_amt_23 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_23 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_23",
                    |m: &AccountWithCashflows| { &m.emi_amt_23 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_23 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_23",
                    |m: &AccountWithCashflows| { &m.emi_date_23 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_23 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_24",
                    |m: &AccountWithCashflows| { &m.prin_amt_24 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_24 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_24",
                    |m: &AccountWithCashflows| { &m.int_amt_24 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_24 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_24",
                    |m: &AccountWithCashflows| { &m.emi_amt_24 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_24 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_24",
                    |m: &AccountWithCashflows| { &m.emi_date_24 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_24 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_25",
                    |m: &AccountWithCashflows| { &m.prin_amt_25 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_25 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_25",
                    |m: &AccountWithCashflows| { &m.int_amt_25 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_25 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_25",
                    |m: &AccountWithCashflows| { &m.emi_amt_25 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_25 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_25",
                    |m: &AccountWithCashflows| { &m.emi_date_25 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_25 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_26",
                    |m: &AccountWithCashflows| { &m.prin_amt_26 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_26 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_26",
                    |m: &AccountWithCashflows| { &m.int_amt_26 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_26 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_26",
                    |m: &AccountWithCashflows| { &m.emi_amt_26 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_26 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_26",
                    |m: &AccountWithCashflows| { &m.emi_date_26 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_26 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_27",
                    |m: &AccountWithCashflows| { &m.prin_amt_27 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_27 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_27",
                    |m: &AccountWithCashflows| { &m.int_amt_27 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_27 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_27",
                    |m: &AccountWithCashflows| { &m.emi_amt_27 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_27 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_27",
                    |m: &AccountWithCashflows| { &m.emi_date_27 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_27 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_28",
                    |m: &AccountWithCashflows| { &m.prin_amt_28 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_28 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_28",
                    |m: &AccountWithCashflows| { &m.int_amt_28 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_28 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_28",
                    |m: &AccountWithCashflows| { &m.emi_amt_28 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_28 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_28",
                    |m: &AccountWithCashflows| { &m.emi_date_28 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_28 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_29",
                    |m: &AccountWithCashflows| { &m.prin_amt_29 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_29 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_29",
                    |m: &AccountWithCashflows| { &m.int_amt_29 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_29 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_29",
                    |m: &AccountWithCashflows| { &m.emi_amt_29 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_29 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_29",
                    |m: &AccountWithCashflows| { &m.emi_date_29 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_29 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_30",
                    |m: &AccountWithCashflows| { &m.prin_amt_30 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_30 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_30",
                    |m: &AccountWithCashflows| { &m.int_amt_30 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_30 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_30",
                    |m: &AccountWithCashflows| { &m.emi_amt_30 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_30 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_30",
                    |m: &AccountWithCashflows| { &m.emi_date_30 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_30 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_31",
                    |m: &AccountWithCashflows| { &m.prin_amt_31 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_31 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_31",
                    |m: &AccountWithCashflows| { &m.int_amt_31 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_31 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_31",
                    |m: &AccountWithCashflows| { &m.emi_amt_31 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_31 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_31",
                    |m: &AccountWithCashflows| { &m.emi_date_31 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_31 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_32",
                    |m: &AccountWithCashflows| { &m.prin_amt_32 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_32 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_32",
                    |m: &AccountWithCashflows| { &m.int_amt_32 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_32 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_32",
                    |m: &AccountWithCashflows| { &m.emi_amt_32 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_32 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_32",
                    |m: &AccountWithCashflows| { &m.emi_date_32 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_32 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_33",
                    |m: &AccountWithCashflows| { &m.prin_amt_33 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_33 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_33",
                    |m: &AccountWithCashflows| { &m.int_amt_33 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_33 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_33",
                    |m: &AccountWithCashflows| { &m.emi_amt_33 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_33 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_33",
                    |m: &AccountWithCashflows| { &m.emi_date_33 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_33 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_34",
                    |m: &AccountWithCashflows| { &m.prin_amt_34 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_34 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_34",
                    |m: &AccountWithCashflows| { &m.int_amt_34 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_34 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_34",
                    |m: &AccountWithCashflows| { &m.emi_amt_34 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_34 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_34",
                    |m: &AccountWithCashflows| { &m.emi_date_34 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_34 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_35",
                    |m: &AccountWithCashflows| { &m.prin_amt_35 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_35 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_35",
                    |m: &AccountWithCashflows| { &m.int_amt_35 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_35 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_35",
                    |m: &AccountWithCashflows| { &m.emi_amt_35 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_35 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_35",
                    |m: &AccountWithCashflows| { &m.emi_date_35 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_35 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_36",
                    |m: &AccountWithCashflows| { &m.prin_amt_36 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_36 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_36",
                    |m: &AccountWithCashflows| { &m.int_amt_36 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_36 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_36",
                    |m: &AccountWithCashflows| { &m.emi_amt_36 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_36 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_36",
                    |m: &AccountWithCashflows| { &m.emi_date_36 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_36 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_37",
                    |m: &AccountWithCashflows| { &m.prin_amt_37 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_37 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_37",
                    |m: &AccountWithCashflows| { &m.int_amt_37 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_37 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_37",
                    |m: &AccountWithCashflows| { &m.emi_amt_37 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_37 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_37",
                    |m: &AccountWithCashflows| { &m.emi_date_37 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_37 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_38",
                    |m: &AccountWithCashflows| { &m.prin_amt_38 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_38 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_38",
                    |m: &AccountWithCashflows| { &m.int_amt_38 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_38 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_38",
                    |m: &AccountWithCashflows| { &m.emi_amt_38 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_38 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_38",
                    |m: &AccountWithCashflows| { &m.emi_date_38 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_38 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_39",
                    |m: &AccountWithCashflows| { &m.prin_amt_39 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_39 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_39",
                    |m: &AccountWithCashflows| { &m.int_amt_39 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_39 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_39",
                    |m: &AccountWithCashflows| { &m.emi_amt_39 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_39 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_39",
                    |m: &AccountWithCashflows| { &m.emi_date_39 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_39 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_40",
                    |m: &AccountWithCashflows| { &m.prin_amt_40 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_40 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_40",
                    |m: &AccountWithCashflows| { &m.int_amt_40 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_40 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_40",
                    |m: &AccountWithCashflows| { &m.emi_amt_40 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_40 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_40",
                    |m: &AccountWithCashflows| { &m.emi_date_40 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_40 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_41",
                    |m: &AccountWithCashflows| { &m.prin_amt_41 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_41 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_41",
                    |m: &AccountWithCashflows| { &m.int_amt_41 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_41 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_41",
                    |m: &AccountWithCashflows| { &m.emi_amt_41 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_41 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_41",
                    |m: &AccountWithCashflows| { &m.emi_date_41 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_41 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_42",
                    |m: &AccountWithCashflows| { &m.prin_amt_42 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_42 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_42",
                    |m: &AccountWithCashflows| { &m.int_amt_42 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_42 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_42",
                    |m: &AccountWithCashflows| { &m.emi_amt_42 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_42 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_42",
                    |m: &AccountWithCashflows| { &m.emi_date_42 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_42 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_43",
                    |m: &AccountWithCashflows| { &m.prin_amt_43 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_43 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_43",
                    |m: &AccountWithCashflows| { &m.int_amt_43 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_43 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_43",
                    |m: &AccountWithCashflows| { &m.emi_amt_43 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_43 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_43",
                    |m: &AccountWithCashflows| { &m.emi_date_43 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_43 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_44",
                    |m: &AccountWithCashflows| { &m.prin_amt_44 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_44 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_44",
                    |m: &AccountWithCashflows| { &m.int_amt_44 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_44 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_44",
                    |m: &AccountWithCashflows| { &m.emi_amt_44 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_44 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_44",
                    |m: &AccountWithCashflows| { &m.emi_date_44 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_44 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_45",
                    |m: &AccountWithCashflows| { &m.prin_amt_45 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_45 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_45",
                    |m: &AccountWithCashflows| { &m.int_amt_45 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_45 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_45",
                    |m: &AccountWithCashflows| { &m.emi_amt_45 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_45 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_45",
                    |m: &AccountWithCashflows| { &m.emi_date_45 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_45 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_46",
                    |m: &AccountWithCashflows| { &m.prin_amt_46 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_46 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_46",
                    |m: &AccountWithCashflows| { &m.int_amt_46 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_46 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_46",
                    |m: &AccountWithCashflows| { &m.emi_amt_46 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_46 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_46",
                    |m: &AccountWithCashflows| { &m.emi_date_46 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_46 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_47",
                    |m: &AccountWithCashflows| { &m.prin_amt_47 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_47 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_47",
                    |m: &AccountWithCashflows| { &m.int_amt_47 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_47 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_47",
                    |m: &AccountWithCashflows| { &m.emi_amt_47 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_47 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_47",
                    |m: &AccountWithCashflows| { &m.emi_date_47 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_47 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_48",
                    |m: &AccountWithCashflows| { &m.prin_amt_48 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_48 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_48",
                    |m: &AccountWithCashflows| { &m.int_amt_48 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_48 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_48",
                    |m: &AccountWithCashflows| { &m.emi_amt_48 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_48 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_48",
                    |m: &AccountWithCashflows| { &m.emi_date_48 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_48 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_49",
                    |m: &AccountWithCashflows| { &m.prin_amt_49 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_49 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_49",
                    |m: &AccountWithCashflows| { &m.int_amt_49 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_49 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_49",
                    |m: &AccountWithCashflows| { &m.emi_amt_49 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_49 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_49",
                    |m: &AccountWithCashflows| { &m.emi_date_49 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_49 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_50",
                    |m: &AccountWithCashflows| { &m.prin_amt_50 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_50 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_50",
                    |m: &AccountWithCashflows| { &m.int_amt_50 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_50 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_50",
                    |m: &AccountWithCashflows| { &m.emi_amt_50 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_50 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_50",
                    |m: &AccountWithCashflows| { &m.emi_date_50 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_50 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_51",
                    |m: &AccountWithCashflows| { &m.prin_amt_51 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_51 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_51",
                    |m: &AccountWithCashflows| { &m.int_amt_51 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_51 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_51",
                    |m: &AccountWithCashflows| { &m.emi_amt_51 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_51 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_51",
                    |m: &AccountWithCashflows| { &m.emi_date_51 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_51 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_52",
                    |m: &AccountWithCashflows| { &m.prin_amt_52 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_52 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_52",
                    |m: &AccountWithCashflows| { &m.int_amt_52 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_52 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_52",
                    |m: &AccountWithCashflows| { &m.emi_amt_52 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_52 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_52",
                    |m: &AccountWithCashflows| { &m.emi_date_52 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_52 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_53",
                    |m: &AccountWithCashflows| { &m.prin_amt_53 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_53 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_53",
                    |m: &AccountWithCashflows| { &m.int_amt_53 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_53 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_53",
                    |m: &AccountWithCashflows| { &m.emi_amt_53 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_53 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_53",
                    |m: &AccountWithCashflows| { &m.emi_date_53 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_53 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_54",
                    |m: &AccountWithCashflows| { &m.prin_amt_54 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_54 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_54",
                    |m: &AccountWithCashflows| { &m.int_amt_54 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_54 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_54",
                    |m: &AccountWithCashflows| { &m.emi_amt_54 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_54 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_54",
                    |m: &AccountWithCashflows| { &m.emi_date_54 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_54 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_55",
                    |m: &AccountWithCashflows| { &m.prin_amt_55 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_55 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_55",
                    |m: &AccountWithCashflows| { &m.int_amt_55 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_55 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_55",
                    |m: &AccountWithCashflows| { &m.emi_amt_55 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_55 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_55",
                    |m: &AccountWithCashflows| { &m.emi_date_55 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_55 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_56",
                    |m: &AccountWithCashflows| { &m.prin_amt_56 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_56 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_56",
                    |m: &AccountWithCashflows| { &m.int_amt_56 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_56 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_56",
                    |m: &AccountWithCashflows| { &m.emi_amt_56 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_56 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_56",
                    |m: &AccountWithCashflows| { &m.emi_date_56 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_56 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_57",
                    |m: &AccountWithCashflows| { &m.prin_amt_57 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_57 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_57",
                    |m: &AccountWithCashflows| { &m.int_amt_57 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_57 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_57",
                    |m: &AccountWithCashflows| { &m.emi_amt_57 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_57 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_57",
                    |m: &AccountWithCashflows| { &m.emi_date_57 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_57 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_58",
                    |m: &AccountWithCashflows| { &m.prin_amt_58 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_58 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_58",
                    |m: &AccountWithCashflows| { &m.int_amt_58 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_58 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_58",
                    |m: &AccountWithCashflows| { &m.emi_amt_58 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_58 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_58",
                    |m: &AccountWithCashflows| { &m.emi_date_58 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_58 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_59",
                    |m: &AccountWithCashflows| { &m.prin_amt_59 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_59 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_59",
                    |m: &AccountWithCashflows| { &m.int_amt_59 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_59 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_59",
                    |m: &AccountWithCashflows| { &m.emi_amt_59 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_59 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_59",
                    |m: &AccountWithCashflows| { &m.emi_date_59 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_59 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_60",
                    |m: &AccountWithCashflows| { &m.prin_amt_60 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_60 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_60",
                    |m: &AccountWithCashflows| { &m.int_amt_60 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_60 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_60",
                    |m: &AccountWithCashflows| { &m.emi_amt_60 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_60 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_60",
                    |m: &AccountWithCashflows| { &m.emi_date_60 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_60 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_61",
                    |m: &AccountWithCashflows| { &m.prin_amt_61 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_61 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_61",
                    |m: &AccountWithCashflows| { &m.int_amt_61 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_61 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_61",
                    |m: &AccountWithCashflows| { &m.emi_amt_61 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_61 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_61",
                    |m: &AccountWithCashflows| { &m.emi_date_61 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_61 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_62",
                    |m: &AccountWithCashflows| { &m.prin_amt_62 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_62 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_62",
                    |m: &AccountWithCashflows| { &m.int_amt_62 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_62 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_62",
                    |m: &AccountWithCashflows| { &m.emi_amt_62 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_62 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_62",
                    |m: &AccountWithCashflows| { &m.emi_date_62 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_62 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_63",
                    |m: &AccountWithCashflows| { &m.prin_amt_63 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_63 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_63",
                    |m: &AccountWithCashflows| { &m.int_amt_63 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_63 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_63",
                    |m: &AccountWithCashflows| { &m.emi_amt_63 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_63 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_63",
                    |m: &AccountWithCashflows| { &m.emi_date_63 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_63 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_64",
                    |m: &AccountWithCashflows| { &m.prin_amt_64 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_64 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_64",
                    |m: &AccountWithCashflows| { &m.int_amt_64 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_64 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_64",
                    |m: &AccountWithCashflows| { &m.emi_amt_64 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_64 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_64",
                    |m: &AccountWithCashflows| { &m.emi_date_64 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_64 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_65",
                    |m: &AccountWithCashflows| { &m.prin_amt_65 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_65 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_65",
                    |m: &AccountWithCashflows| { &m.int_amt_65 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_65 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_65",
                    |m: &AccountWithCashflows| { &m.emi_amt_65 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_65 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_65",
                    |m: &AccountWithCashflows| { &m.emi_date_65 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_65 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_66",
                    |m: &AccountWithCashflows| { &m.prin_amt_66 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_66 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_66",
                    |m: &AccountWithCashflows| { &m.int_amt_66 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_66 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_66",
                    |m: &AccountWithCashflows| { &m.emi_amt_66 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_66 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_66",
                    |m: &AccountWithCashflows| { &m.emi_date_66 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_66 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_67",
                    |m: &AccountWithCashflows| { &m.prin_amt_67 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_67 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_67",
                    |m: &AccountWithCashflows| { &m.int_amt_67 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_67 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_67",
                    |m: &AccountWithCashflows| { &m.emi_amt_67 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_67 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_67",
                    |m: &AccountWithCashflows| { &m.emi_date_67 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_67 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_68",
                    |m: &AccountWithCashflows| { &m.prin_amt_68 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_68 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_68",
                    |m: &AccountWithCashflows| { &m.int_amt_68 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_68 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_68",
                    |m: &AccountWithCashflows| { &m.emi_amt_68 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_68 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_68",
                    |m: &AccountWithCashflows| { &m.emi_date_68 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_68 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_69",
                    |m: &AccountWithCashflows| { &m.prin_amt_69 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_69 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_69",
                    |m: &AccountWithCashflows| { &m.int_amt_69 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_69 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_69",
                    |m: &AccountWithCashflows| { &m.emi_amt_69 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_69 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_69",
                    |m: &AccountWithCashflows| { &m.emi_date_69 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_69 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_70",
                    |m: &AccountWithCashflows| { &m.prin_amt_70 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_70 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_70",
                    |m: &AccountWithCashflows| { &m.int_amt_70 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_70 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_70",
                    |m: &AccountWithCashflows| { &m.emi_amt_70 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_70 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_70",
                    |m: &AccountWithCashflows| { &m.emi_date_70 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_70 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_71",
                    |m: &AccountWithCashflows| { &m.prin_amt_71 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_71 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_71",
                    |m: &AccountWithCashflows| { &m.int_amt_71 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_71 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_71",
                    |m: &AccountWithCashflows| { &m.emi_amt_71 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_71 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_71",
                    |m: &AccountWithCashflows| { &m.emi_date_71 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_71 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_72",
                    |m: &AccountWithCashflows| { &m.prin_amt_72 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_72 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_72",
                    |m: &AccountWithCashflows| { &m.int_amt_72 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_72 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_72",
                    |m: &AccountWithCashflows| { &m.emi_amt_72 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_72 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_72",
                    |m: &AccountWithCashflows| { &m.emi_date_72 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_72 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_73",
                    |m: &AccountWithCashflows| { &m.prin_amt_73 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_73 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_73",
                    |m: &AccountWithCashflows| { &m.int_amt_73 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_73 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_73",
                    |m: &AccountWithCashflows| { &m.emi_amt_73 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_73 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_73",
                    |m: &AccountWithCashflows| { &m.emi_date_73 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_73 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_74",
                    |m: &AccountWithCashflows| { &m.prin_amt_74 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_74 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_74",
                    |m: &AccountWithCashflows| { &m.int_amt_74 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_74 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_74",
                    |m: &AccountWithCashflows| { &m.emi_amt_74 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_74 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_74",
                    |m: &AccountWithCashflows| { &m.emi_date_74 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_74 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_75",
                    |m: &AccountWithCashflows| { &m.prin_amt_75 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_75 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_75",
                    |m: &AccountWithCashflows| { &m.int_amt_75 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_75 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_75",
                    |m: &AccountWithCashflows| { &m.emi_amt_75 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_75 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_75",
                    |m: &AccountWithCashflows| { &m.emi_date_75 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_75 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_76",
                    |m: &AccountWithCashflows| { &m.prin_amt_76 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_76 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_76",
                    |m: &AccountWithCashflows| { &m.int_amt_76 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_76 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_76",
                    |m: &AccountWithCashflows| { &m.emi_amt_76 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_76 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_76",
                    |m: &AccountWithCashflows| { &m.emi_date_76 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_76 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_77",
                    |m: &AccountWithCashflows| { &m.prin_amt_77 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_77 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_77",
                    |m: &AccountWithCashflows| { &m.int_amt_77 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_77 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_77",
                    |m: &AccountWithCashflows| { &m.emi_amt_77 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_77 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_77",
                    |m: &AccountWithCashflows| { &m.emi_date_77 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_77 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_78",
                    |m: &AccountWithCashflows| { &m.prin_amt_78 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_78 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_78",
                    |m: &AccountWithCashflows| { &m.int_amt_78 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_78 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_78",
                    |m: &AccountWithCashflows| { &m.emi_amt_78 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_78 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_78",
                    |m: &AccountWithCashflows| { &m.emi_date_78 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_78 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_79",
                    |m: &AccountWithCashflows| { &m.prin_amt_79 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_79 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_79",
                    |m: &AccountWithCashflows| { &m.int_amt_79 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_79 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_79",
                    |m: &AccountWithCashflows| { &m.emi_amt_79 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_79 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_79",
                    |m: &AccountWithCashflows| { &m.emi_date_79 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_79 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_80",
                    |m: &AccountWithCashflows| { &m.prin_amt_80 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_80 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_80",
                    |m: &AccountWithCashflows| { &m.int_amt_80 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_80 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_80",
                    |m: &AccountWithCashflows| { &m.emi_amt_80 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_80 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_80",
                    |m: &AccountWithCashflows| { &m.emi_date_80 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_80 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_81",
                    |m: &AccountWithCashflows| { &m.prin_amt_81 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_81 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_81",
                    |m: &AccountWithCashflows| { &m.int_amt_81 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_81 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_81",
                    |m: &AccountWithCashflows| { &m.emi_amt_81 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_81 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_81",
                    |m: &AccountWithCashflows| { &m.emi_date_81 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_81 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_82",
                    |m: &AccountWithCashflows| { &m.prin_amt_82 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_82 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_82",
                    |m: &AccountWithCashflows| { &m.int_amt_82 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_82 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_82",
                    |m: &AccountWithCashflows| { &m.emi_amt_82 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_82 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_82",
                    |m: &AccountWithCashflows| { &m.emi_date_82 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_82 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_83",
                    |m: &AccountWithCashflows| { &m.prin_amt_83 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_83 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_83",
                    |m: &AccountWithCashflows| { &m.int_amt_83 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_83 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_83",
                    |m: &AccountWithCashflows| { &m.emi_amt_83 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_83 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_83",
                    |m: &AccountWithCashflows| { &m.emi_date_83 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_83 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_84",
                    |m: &AccountWithCashflows| { &m.prin_amt_84 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_84 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_84",
                    |m: &AccountWithCashflows| { &m.int_amt_84 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_84 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_84",
                    |m: &AccountWithCashflows| { &m.emi_amt_84 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_84 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_84",
                    |m: &AccountWithCashflows| { &m.emi_date_84 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_84 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_85",
                    |m: &AccountWithCashflows| { &m.prin_amt_85 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_85 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_85",
                    |m: &AccountWithCashflows| { &m.int_amt_85 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_85 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_85",
                    |m: &AccountWithCashflows| { &m.emi_amt_85 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_85 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_85",
                    |m: &AccountWithCashflows| { &m.emi_date_85 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_85 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_86",
                    |m: &AccountWithCashflows| { &m.prin_amt_86 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_86 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_86",
                    |m: &AccountWithCashflows| { &m.int_amt_86 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_86 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_86",
                    |m: &AccountWithCashflows| { &m.emi_amt_86 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_86 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_86",
                    |m: &AccountWithCashflows| { &m.emi_date_86 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_86 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_87",
                    |m: &AccountWithCashflows| { &m.prin_amt_87 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_87 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_87",
                    |m: &AccountWithCashflows| { &m.int_amt_87 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_87 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_87",
                    |m: &AccountWithCashflows| { &m.emi_amt_87 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_87 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_87",
                    |m: &AccountWithCashflows| { &m.emi_date_87 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_87 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_88",
                    |m: &AccountWithCashflows| { &m.prin_amt_88 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_88 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_88",
                    |m: &AccountWithCashflows| { &m.int_amt_88 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_88 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_88",
                    |m: &AccountWithCashflows| { &m.emi_amt_88 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_88 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_88",
                    |m: &AccountWithCashflows| { &m.emi_date_88 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_88 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_89",
                    |m: &AccountWithCashflows| { &m.prin_amt_89 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_89 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_89",
                    |m: &AccountWithCashflows| { &m.int_amt_89 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_89 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_89",
                    |m: &AccountWithCashflows| { &m.emi_amt_89 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_89 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_89",
                    |m: &AccountWithCashflows| { &m.emi_date_89 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_89 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_90",
                    |m: &AccountWithCashflows| { &m.prin_amt_90 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_90 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_90",
                    |m: &AccountWithCashflows| { &m.int_amt_90 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_90 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_90",
                    |m: &AccountWithCashflows| { &m.emi_amt_90 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_90 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_90",
                    |m: &AccountWithCashflows| { &m.emi_date_90 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_90 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_91",
                    |m: &AccountWithCashflows| { &m.prin_amt_91 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_91 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_91",
                    |m: &AccountWithCashflows| { &m.int_amt_91 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_91 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_91",
                    |m: &AccountWithCashflows| { &m.emi_amt_91 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_91 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_91",
                    |m: &AccountWithCashflows| { &m.emi_date_91 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_91 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_92",
                    |m: &AccountWithCashflows| { &m.prin_amt_92 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_92 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_92",
                    |m: &AccountWithCashflows| { &m.int_amt_92 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_92 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_92",
                    |m: &AccountWithCashflows| { &m.emi_amt_92 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_92 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_92",
                    |m: &AccountWithCashflows| { &m.emi_date_92 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_92 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_93",
                    |m: &AccountWithCashflows| { &m.prin_amt_93 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_93 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_93",
                    |m: &AccountWithCashflows| { &m.int_amt_93 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_93 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_93",
                    |m: &AccountWithCashflows| { &m.emi_amt_93 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_93 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_93",
                    |m: &AccountWithCashflows| { &m.emi_date_93 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_93 }
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_94",
                    |m: &AccountWithCashflows| { &m.prin_amt_94 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_94 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_94",
                    |m: &AccountWithCashflows| { &m.int_amt_94 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_94 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_94",
                    |m: &AccountWithCashflows| { &m.emi_amt_94 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_94 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_94",
                    |m: &AccountWithCashflows| { &m.emi_date_94 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_94 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_95",
                    |m: &AccountWithCashflows| { &m.prin_amt_95 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_95 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_95",
                    |m: &AccountWithCashflows| { &m.int_amt_95 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_95 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_95",
                    |m: &AccountWithCashflows| { &m.emi_amt_95 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_95 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_95",
                    |m: &AccountWithCashflows| { &m.emi_date_95 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_95 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_96",
                    |m: &AccountWithCashflows| { &m.prin_amt_96 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_96 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_96",
                    |m: &AccountWithCashflows| { &m.int_amt_96 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_96 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_96",
                    |m: &AccountWithCashflows| { &m.emi_amt_96 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_96 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_96",
                    |m: &AccountWithCashflows| { &m.emi_date_96 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_96 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_97",
                    |m: &AccountWithCashflows| { &m.prin_amt_97 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_97 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_97",
                    |m: &AccountWithCashflows| { &m.int_amt_97 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_97 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_97",
                    |m: &AccountWithCashflows| { &m.emi_amt_97 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_97 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_97",
                    |m: &AccountWithCashflows| { &m.emi_date_97 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_97 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_98",
                    |m: &AccountWithCashflows| { &m.prin_amt_98 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_98 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_98",
                    |m: &AccountWithCashflows| { &m.int_amt_98 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_98 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_98",
                    |m: &AccountWithCashflows| { &m.emi_amt_98 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_98 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_98",
                    |m: &AccountWithCashflows| { &m.emi_date_98 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_98 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_99",
                    |m: &AccountWithCashflows| { &m.prin_amt_99 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_99 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_99",
                    |m: &AccountWithCashflows| { &m.int_amt_99 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_99 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_99",
                    |m: &AccountWithCashflows| { &m.emi_amt_99 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_99 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_99",
                    |m: &AccountWithCashflows| { &m.emi_date_99 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_99 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_100",
                    |m: &AccountWithCashflows| { &m.prin_amt_100 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_100 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_100",
                    |m: &AccountWithCashflows| { &m.int_amt_100 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_100 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_100",
                    |m: &AccountWithCashflows| { &m.emi_amt_100 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_100 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_100",
                    |m: &AccountWithCashflows| { &m.emi_date_100 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_100 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_101",
                    |m: &AccountWithCashflows| { &m.prin_amt_101 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_101 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_101",
                    |m: &AccountWithCashflows| { &m.int_amt_101 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_101 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_101",
                    |m: &AccountWithCashflows| { &m.emi_amt_101 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_101 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_101",
                    |m: &AccountWithCashflows| { &m.emi_date_101 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_101 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_102",
                    |m: &AccountWithCashflows| { &m.prin_amt_102 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_102 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_102",
                    |m: &AccountWithCashflows| { &m.int_amt_102 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_102 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_102",
                    |m: &AccountWithCashflows| { &m.emi_amt_102 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_102 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_102",
                    |m: &AccountWithCashflows| { &m.emi_date_102 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_102 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_103",
                    |m: &AccountWithCashflows| { &m.prin_amt_103 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_103 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_103",
                    |m: &AccountWithCashflows| { &m.int_amt_103 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_103 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_103",
                    |m: &AccountWithCashflows| { &m.emi_amt_103 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_103 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_103",
                    |m: &AccountWithCashflows| { &m.emi_date_103 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_103 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_104",
                    |m: &AccountWithCashflows| { &m.prin_amt_104 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_104 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_104",
                    |m: &AccountWithCashflows| { &m.int_amt_104 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_104 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_104",
                    |m: &AccountWithCashflows| { &m.emi_amt_104 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_104 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_104",
                    |m: &AccountWithCashflows| { &m.emi_date_104 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_104 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_105",
                    |m: &AccountWithCashflows| { &m.prin_amt_105 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_105 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_105",
                    |m: &AccountWithCashflows| { &m.int_amt_105 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_105 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_105",
                    |m: &AccountWithCashflows| { &m.emi_amt_105 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_105 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_105",
                    |m: &AccountWithCashflows| { &m.emi_date_105 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_105 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_106",
                    |m: &AccountWithCashflows| { &m.prin_amt_106 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_106 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_106",
                    |m: &AccountWithCashflows| { &m.int_amt_106 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_106 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_106",
                    |m: &AccountWithCashflows| { &m.emi_amt_106 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_106 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_106",
                    |m: &AccountWithCashflows| { &m.emi_date_106 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_106 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_107",
                    |m: &AccountWithCashflows| { &m.prin_amt_107 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_107 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_107",
                    |m: &AccountWithCashflows| { &m.int_amt_107 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_107 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_107",
                    |m: &AccountWithCashflows| { &m.emi_amt_107 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_107 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_107",
                    |m: &AccountWithCashflows| { &m.emi_date_107 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_107 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_108",
                    |m: &AccountWithCashflows| { &m.prin_amt_108 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_108 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_108",
                    |m: &AccountWithCashflows| { &m.int_amt_108 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_108 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_108",
                    |m: &AccountWithCashflows| { &m.emi_amt_108 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_108 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_108",
                    |m: &AccountWithCashflows| { &m.emi_date_108 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_108 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_109",
                    |m: &AccountWithCashflows| { &m.prin_amt_109 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_109 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_109",
                    |m: &AccountWithCashflows| { &m.int_amt_109 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_109 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_109",
                    |m: &AccountWithCashflows| { &m.emi_amt_109 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_109 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_109",
                    |m: &AccountWithCashflows| { &m.emi_date_109 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_109 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_110",
                    |m: &AccountWithCashflows| { &m.prin_amt_110 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_110 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_110",
                    |m: &AccountWithCashflows| { &m.int_amt_110 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_110 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_110",
                    |m: &AccountWithCashflows| { &m.emi_amt_110 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_110 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_110",
                    |m: &AccountWithCashflows| { &m.emi_date_110 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_110 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_111",
                    |m: &AccountWithCashflows| { &m.prin_amt_111 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_111 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_111",
                    |m: &AccountWithCashflows| { &m.int_amt_111 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_111 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_111",
                    |m: &AccountWithCashflows| { &m.emi_amt_111 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_111 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_111",
                    |m: &AccountWithCashflows| { &m.emi_date_111 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_111 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_112",
                    |m: &AccountWithCashflows| { &m.prin_amt_112 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_112 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_112",
                    |m: &AccountWithCashflows| { &m.int_amt_112 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_112 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_112",
                    |m: &AccountWithCashflows| { &m.emi_amt_112 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_112 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_112",
                    |m: &AccountWithCashflows| { &m.emi_date_112 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_112 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_113",
                    |m: &AccountWithCashflows| { &m.prin_amt_113 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_113 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_113",
                    |m: &AccountWithCashflows| { &m.int_amt_113 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_113 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_113",
                    |m: &AccountWithCashflows| { &m.emi_amt_113 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_113 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_113",
                    |m: &AccountWithCashflows| { &m.emi_date_113 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_113 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_114",
                    |m: &AccountWithCashflows| { &m.prin_amt_114 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_114 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_114",
                    |m: &AccountWithCashflows| { &m.int_amt_114 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_114 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_114",
                    |m: &AccountWithCashflows| { &m.emi_amt_114 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_114 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_114",
                    |m: &AccountWithCashflows| { &m.emi_date_114 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_114 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_115",
                    |m: &AccountWithCashflows| { &m.prin_amt_115 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_115 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_115",
                    |m: &AccountWithCashflows| { &m.int_amt_115 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_115 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_115",
                    |m: &AccountWithCashflows| { &m.emi_amt_115 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_115 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_115",
                    |m: &AccountWithCashflows| { &m.emi_date_115 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_115 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_116",
                    |m: &AccountWithCashflows| { &m.prin_amt_116 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_116 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_116",
                    |m: &AccountWithCashflows| { &m.int_amt_116 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_116 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_116",
                    |m: &AccountWithCashflows| { &m.emi_amt_116 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_116 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_116",
                    |m: &AccountWithCashflows| { &m.emi_date_116 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_116 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_117",
                    |m: &AccountWithCashflows| { &m.prin_amt_117 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_117 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_117",
                    |m: &AccountWithCashflows| { &m.int_amt_117 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_117 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_117",
                    |m: &AccountWithCashflows| { &m.emi_amt_117 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_117 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_117",
                    |m: &AccountWithCashflows| { &m.emi_date_117 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_117 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_118",
                    |m: &AccountWithCashflows| { &m.prin_amt_118 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_118 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_118",
                    |m: &AccountWithCashflows| { &m.int_amt_118 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_118 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_118",
                    |m: &AccountWithCashflows| { &m.emi_amt_118 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_118 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_118",
                    |m: &AccountWithCashflows| { &m.emi_date_118 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_118 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_119",
                    |m: &AccountWithCashflows| { &m.prin_amt_119 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_119 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_119",
                    |m: &AccountWithCashflows| { &m.int_amt_119 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_119 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_119",
                    |m: &AccountWithCashflows| { &m.emi_amt_119 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_119 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_119",
                    |m: &AccountWithCashflows| { &m.emi_date_119 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_119 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt_120",
                    |m: &AccountWithCashflows| { &m.prin_amt_120 },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt_120 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_120",
                    |m: &AccountWithCashflows| { &m.int_amt_120 },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_120 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "emi_amt_120",
                    |m: &AccountWithCashflows| { &m.emi_amt_120 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_amt_120 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "emi_date_120",
                    |m: &AccountWithCashflows| { &m.emi_date_120 },
                    |m: &mut AccountWithCashflows| { &mut m.emi_date_120 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "d_f_coc_emi_date_loan_booked",
                    |m: &AccountWithCashflows| { &m.d_f_coc_emi_date_loan_booked },
                    |m: &mut AccountWithCashflows| { &mut m.d_f_coc_emi_date_loan_booked },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "v_f_coc_emi_loan_src",
                    |m: &AccountWithCashflows| { &m.v_f_coc_emi_loan_src },
                    |m: &mut AccountWithCashflows| { &mut m.v_f_coc_emi_loan_src },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "v_f_coc_emi_tenure",
                    |m: &AccountWithCashflows| { &m.v_f_coc_emi_tenure },
                    |m: &mut AccountWithCashflows| { &mut m.v_f_coc_emi_tenure },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "n_f_coc_emi_loan_amount",
                    |m: &AccountWithCashflows| { &m.n_f_coc_emi_loan_amount },
                    |m: &mut AccountWithCashflows| { &mut m.n_f_coc_emi_loan_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "v_f_coc_emi_loan_nbr",
                    |m: &AccountWithCashflows| { &m.v_f_coc_emi_loan_nbr },
                    |m: &mut AccountWithCashflows| { &mut m.v_f_coc_emi_loan_nbr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "n_f_coc_emi_out_prin",
                    |m: &AccountWithCashflows| { &m.n_f_coc_emi_out_prin },
                    |m: &mut AccountWithCashflows| { &mut m.n_f_coc_emi_out_prin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "n_f_coc_emi_out_int",
                    |m: &AccountWithCashflows| { &m.n_f_coc_emi_out_int },
                    |m: &mut AccountWithCashflows| { &mut m.n_f_coc_emi_out_int },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_outstanding",
                    |m: &AccountWithCashflows| { &m.total_outstanding },
                    |m: &mut AccountWithCashflows| { &mut m.total_outstanding },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "v_f_coc_emi_rate_of_int",
                    |m: &AccountWithCashflows| { &m.v_f_coc_emi_rate_of_int },
                    |m: &mut AccountWithCashflows| { &mut m.v_f_coc_emi_rate_of_int },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "n_f_coc_emi_org",
                    |m: &AccountWithCashflows| { &m.n_f_coc_emi_org },
                    |m: &mut AccountWithCashflows| { &mut m.n_f_coc_emi_org },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "v_f_coc_emi_chg_type",
                    |m: &AccountWithCashflows| { &m.v_f_coc_emi_chg_type },
                    |m: &mut AccountWithCashflows| { &mut m.v_f_coc_emi_chg_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "filler",
                    |m: &AccountWithCashflows| { &m.filler },
                    |m: &mut AccountWithCashflows| { &mut m.filler },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_org();
        self.clear_logo();
        self.clear_acct();
        self.clear_loan_nbr();
        self.clear_tenure();
        self.clear_prin_amt_1();
        self.clear_int_amt_1();
        self.clear_emi_amt_1();
        self.clear_emi_date_1();
        self.clear_prin_amt_2();
        self.clear_int_amt_2();
        self.clear_emi_amt_2();
        self.clear_emi_date_2();
        self.clear_prin_amt_3();
        self.clear_int_amt_3();
        self.clear_emi_amt_3();
        self.clear_emi_date_3();
        self.clear_prin_amt_4();
        self.clear_int_amt_4();
        self.clear_emi_amt_4();
        self.clear_emi_date_4();
        self.clear_prin_amt_5();
        self.clear_int_amt_5();
        self.clear_emi_amt_5();
        self.clear_emi_date_5();
        self.clear_prin_amt_6();
        self.clear_int_amt_6();
        self.clear_emi_amt_6();
        self.clear_emi_date_6();
        self.clear_prin_amt_7();
        self.clear_int_amt_7();
        self.clear_emi_amt_7();
        self.clear_emi_date_7();
        self.clear_prin_amt_8();
        self.clear_int_amt_8();
        self.clear_emi_amt_8();
        self.clear_emi_date_8();
        self.clear_prin_amt_9();
        self.clear_int_amt_9();
        self.clear_emi_amt_9();
        self.clear_emi_date_9();
        self.clear_prin_amt_10();
        self.clear_int_amt_10();
        self.clear_emi_amt_10();
        self.clear_emi_date_10();
        self.clear_prin_amt_11();
        self.clear_int_amt_11();
        self.clear_emi_amt_11();
        self.clear_emi_date_11();
        self.clear_prin_amt_12();
        self.clear_int_amt_12();
        self.clear_emi_amt_12();
        self.clear_emi_date_12();
        self.clear_prin_amt_13();
        self.clear_int_amt_13();
        self.clear_emi_amt_13();
        self.clear_emi_date_13();
        self.clear_prin_amt_14();
        self.clear_int_amt_14();
        self.clear_emi_amt_14();
        self.clear_emi_date_14();
        self.clear_prin_amt_15();
        self.clear_int_amt_15();
        self.clear_emi_amt_15();
        self.clear_emi_date_15();
        self.clear_prin_amt_16();
        self.clear_int_amt_16();
        self.clear_emi_amt_16();
        self.clear_emi_date_16();
        self.clear_prin_amt_17();
        self.clear_int_amt_17();
        self.clear_emi_amt_17();
        self.clear_emi_date_17();
        self.clear_prin_amt_18();
        self.clear_int_amt_18();
        self.clear_emi_amt_18();
        self.clear_emi_date_18();
        self.clear_prin_amt_19();
        self.clear_int_amt_19();
        self.clear_emi_amt_19();
        self.clear_emi_date_19();
        self.clear_prin_amt_20();
        self.clear_int_amt_20();
        self.clear_emi_amt_20();
        self.clear_emi_date_20();
        self.clear_prin_amt_21();
        self.clear_int_amt_21();
        self.clear_emi_amt_21();
        self.clear_emi_date_21();
        self.clear_prin_amt_22();
        self.clear_int_amt_22();
        self.clear_emi_amt_22();
        self.clear_emi_date_22();
        self.clear_prin_amt_23();
        self.clear_int_amt_23();
        self.clear_emi_amt_23();
        self.clear_emi_date_23();
        self.clear_prin_amt_24();
        self.clear_int_amt_24();
        self.clear_emi_amt_24();
        self.clear_emi_date_24();
        self.clear_prin_amt_25();
        self.clear_int_amt_25();
        self.clear_emi_amt_25();
        self.clear_emi_date_25();
        self.clear_prin_amt_26();
        self.clear_int_amt_26();
        self.clear_emi_amt_26();
        self.clear_emi_date_26();
        self.clear_prin_amt_27();
        self.clear_int_amt_27();
        self.clear_emi_amt_27();
        self.clear_emi_date_27();
        self.clear_prin_amt_28();
        self.clear_int_amt_28();
        self.clear_emi_amt_28();
        self.clear_emi_date_28();
        self.clear_prin_amt_29();
        self.clear_int_amt_29();
        self.clear_emi_amt_29();
        self.clear_emi_date_29();
        self.clear_prin_amt_30();
        self.clear_int_amt_30();
        self.clear_emi_amt_30();
        self.clear_emi_date_30();
        self.clear_prin_amt_31();
        self.clear_int_amt_31();
        self.clear_emi_amt_31();
        self.clear_emi_date_31();
        self.clear_prin_amt_32();
        self.clear_int_amt_32();
        self.clear_emi_amt_32();
        self.clear_emi_date_32();
        self.clear_prin_amt_33();
        self.clear_int_amt_33();
        self.clear_emi_amt_33();
        self.clear_emi_date_33();
        self.clear_prin_amt_34();
        self.clear_int_amt_34();
        self.clear_emi_amt_34();
        self.clear_emi_date_34();
        self.clear_prin_amt_35();
        self.clear_int_amt_35();
        self.clear_emi_amt_35();
        self.clear_emi_date_35();
        self.clear_prin_amt_36();
        self.clear_int_amt_36();
        self.clear_emi_amt_36();
        self.clear_emi_date_36();
        self.clear_prin_amt_37();
        self.clear_int_amt_37();
        self.clear_emi_amt_37();
        self.clear_emi_date_37();
        self.clear_prin_amt_38();
        self.clear_int_amt_38();
        self.clear_emi_amt_38();
        self.clear_emi_date_38();
        self.clear_prin_amt_39();
        self.clear_int_amt_39();
        self.clear_emi_amt_39();
        self.clear_emi_date_39();
        self.clear_prin_amt_40();
        self.clear_int_amt_40();
        self.clear_emi_amt_40();
        self.clear_emi_date_40();
        self.clear_prin_amt_41();
        self.clear_int_amt_41();
        self.clear_emi_amt_41();
        self.clear_emi_date_41();
        self.clear_prin_amt_42();
        self.clear_int_amt_42();
        self.clear_emi_amt_42();
        self.clear_emi_date_42();
        self.clear_prin_amt_43();
        self.clear_int_amt_43();
        self.clear_emi_amt_43();
        self.clear_emi_date_43();
        self.clear_prin_amt_44();
        self.clear_int_amt_44();
        self.clear_emi_amt_44();
        self.clear_emi_date_44();
        self.clear_prin_amt_45();
        self.clear_int_amt_45();
        self.clear_emi_amt_45();
        self.clear_emi_date_45();
        self.clear_prin_amt_46();
        self.clear_int_amt_46();
        self.clear_emi_amt_46();
        self.clear_emi_date_46();
        self.clear_prin_amt_47();
        self.clear_int_amt_47();
        self.clear_emi_amt_47();
        self.clear_emi_date_47();
        self.clear_prin_amt_48();
        self.clear_int_amt_48();
        self.clear_emi_amt_48();
        self.clear_emi_date_48();
        self.clear_prin_amt_49();
        self.clear_int_amt_49();
        self.clear_emi_amt_49();
        self.clear_emi_date_49();
        self.clear_prin_amt_50();
        self.clear_int_amt_50();
        self.clear_emi_amt_50();
        self.clear_emi_date_50();
        self.clear_prin_amt_51();
        self.clear_int_amt_51();
        self.clear_emi_amt_51();
        self.clear_emi_date_51();
        self.clear_prin_amt_52();
        self.clear_int_amt_52();
        self.clear_emi_amt_52();
        self.clear_emi_date_52();
        self.clear_prin_amt_53();
        self.clear_int_amt_53();
        self.clear_emi_amt_53();
        self.clear_emi_date_53();
        self.clear_prin_amt_54();
        self.clear_int_amt_54();
        self.clear_emi_amt_54();
        self.clear_emi_date_54();
        self.clear_prin_amt_55();
        self.clear_int_amt_55();
        self.clear_emi_amt_55();
        self.clear_emi_date_55();
        self.clear_prin_amt_56();
        self.clear_int_amt_56();
        self.clear_emi_amt_56();
        self.clear_emi_date_56();
        self.clear_prin_amt_57();
        self.clear_int_amt_57();
        self.clear_emi_amt_57();
        self.clear_emi_date_57();
        self.clear_prin_amt_58();
        self.clear_int_amt_58();
        self.clear_emi_amt_58();
        self.clear_emi_date_58();
        self.clear_prin_amt_59();
        self.clear_int_amt_59();
        self.clear_emi_amt_59();
        self.clear_emi_date_59();
        self.clear_prin_amt_60();
        self.clear_int_amt_60();
        self.clear_emi_amt_60();
        self.clear_emi_date_60();
        self.clear_prin_amt_61();
        self.clear_int_amt_61();
        self.clear_emi_amt_61();
        self.clear_emi_date_61();
        self.clear_prin_amt_62();
        self.clear_int_amt_62();
        self.clear_emi_amt_62();
        self.clear_emi_date_62();
        self.clear_prin_amt_63();
        self.clear_int_amt_63();
        self.clear_emi_amt_63();
        self.clear_emi_date_63();
        self.clear_prin_amt_64();
        self.clear_int_amt_64();
        self.clear_emi_amt_64();
        self.clear_emi_date_64();
        self.clear_prin_amt_65();
        self.clear_int_amt_65();
        self.clear_emi_amt_65();
        self.clear_emi_date_65();
        self.clear_prin_amt_66();
        self.clear_int_amt_66();
        self.clear_emi_amt_66();
        self.clear_emi_date_66();
        self.clear_prin_amt_67();
        self.clear_int_amt_67();
        self.clear_emi_amt_67();
        self.clear_emi_date_67();
        self.clear_prin_amt_68();
        self.clear_int_amt_68();
        self.clear_emi_amt_68();
        self.clear_emi_date_68();
        self.clear_prin_amt_69();
        self.clear_int_amt_69();
        self.clear_emi_amt_69();
        self.clear_emi_date_69();
        self.clear_prin_amt_70();
        self.clear_int_amt_70();
        self.clear_emi_amt_70();
        self.clear_emi_date_70();
        self.clear_prin_amt_71();
        self.clear_int_amt_71();
        self.clear_emi_amt_71();
        self.clear_emi_date_71();
        self.clear_prin_amt_72();
        self.clear_int_amt_72();
        self.clear_emi_amt_72();
        self.clear_emi_date_72();
        self.clear_prin_amt_73();
        self.clear_int_amt_73();
        self.clear_emi_amt_73();
        self.clear_emi_date_73();
        self.clear_prin_amt_74();
        self.clear_int_amt_74();
        self.clear_emi_amt_74();
        self.clear_emi_date_74();
        self.clear_prin_amt_75();
        self.clear_int_amt_75();
        self.clear_emi_amt_75();
        self.clear_emi_date_75();
        self.clear_prin_amt_76();
        self.clear_int_amt_76();
        self.clear_emi_amt_76();
        self.clear_emi_date_76();
        self.clear_prin_amt_77();
        self.clear_int_amt_77();
        self.clear_emi_amt_77();
        self.clear_emi_date_77();
        self.clear_prin_amt_78();
        self.clear_int_amt_78();
        self.clear_emi_amt_78();
        self.clear_emi_date_78();
        self.clear_prin_amt_79();
        self.clear_int_amt_79();
        self.clear_emi_amt_79();
        self.clear_emi_date_79();
        self.clear_prin_amt_80();
        self.clear_int_amt_80();
        self.clear_emi_amt_80();
        self.clear_emi_date_80();
        self.clear_prin_amt_81();
        self.clear_int_amt_81();
        self.clear_emi_amt_81();
        self.clear_emi_date_81();
        self.clear_prin_amt_82();
        self.clear_int_amt_82();
        self.clear_emi_amt_82();
        self.clear_emi_date_82();
        self.clear_prin_amt_83();
        self.clear_int_amt_83();
        self.clear_emi_amt_83();
        self.clear_emi_date_83();
        self.clear_prin_amt_84();
        self.clear_int_amt_84();
        self.clear_emi_amt_84();
        self.clear_emi_date_84();
        self.clear_prin_amt_85();
        self.clear_int_amt_85();
        self.clear_emi_amt_85();
        self.clear_emi_date_85();
        self.clear_prin_amt_86();
        self.clear_int_amt_86();
        self.clear_emi_amt_86();
        self.clear_emi_date_86();
        self.clear_prin_amt_87();
        self.clear_int_amt_87();
        self.clear_emi_amt_87();
        self.clear_emi_date_87();
        self.clear_prin_amt_88();
        self.clear_int_amt_88();
        self.clear_emi_amt_88();
        self.clear_emi_date_88();
        self.clear_prin_amt_89();
        self.clear_int_amt_89();
        self.clear_emi_amt_89();
        self.clear_emi_date_89();
        self.clear_prin_amt_90();
        self.clear_int_amt_90();
        self.clear_emi_amt_90();
        self.clear_emi_date_90();
        self.clear_prin_amt_91();
        self.clear_int_amt_91();
        self.clear_emi_amt_91();
        self.clear_emi_date_91();
        self.clear_prin_amt_92();
        self.clear_int_amt_92();
        self.clear_emi_amt_92();
        self.clear_emi_date_92();
        self.clear_prin_amt_93();
        self.clear_int_amt_93();
        self.clear_emi_amt_93();
        self.clear_emi_date_93();
        self.clear_prin_amt_94();
        self.clear_int_amt_94();
        self.clear_emi_amt_94();
        self.clear_emi_date_94();
        self.clear_prin_amt_95();
        self.clear_int_amt_95();
        self.clear_emi_amt_95();
        self.clear_emi_date_95();
        self.clear_prin_amt_96();
        self.clear_int_amt_96();
        self.clear_emi_amt_96();
        self.clear_emi_date_96();
        self.clear_prin_amt_97();
        self.clear_int_amt_97();
        self.clear_emi_amt_97();
        self.clear_emi_date_97();
        self.clear_prin_amt_98();
        self.clear_int_amt_98();
        self.clear_emi_amt_98();
        self.clear_emi_date_98();
        self.clear_prin_amt_99();
        self.clear_int_amt_99();
        self.clear_emi_amt_99();
        self.clear_emi_date_99();
        self.clear_prin_amt_100();
        self.clear_int_amt_100();
        self.clear_emi_amt_100();
        self.clear_emi_date_100();
        self.clear_prin_amt_101();
        self.clear_int_amt_101();
        self.clear_emi_amt_101();
        self.clear_emi_date_101();
        self.clear_prin_amt_102();
        self.clear_int_amt_102();
        self.clear_emi_amt_102();
        self.clear_emi_date_102();
        self.clear_prin_amt_103();
        self.clear_int_amt_103();
        self.clear_emi_amt_103();
        self.clear_emi_date_103();
        self.clear_prin_amt_104();
        self.clear_int_amt_104();
        self.clear_emi_amt_104();
        self.clear_emi_date_104();
        self.clear_prin_amt_105();
        self.clear_int_amt_105();
        self.clear_emi_amt_105();
        self.clear_emi_date_105();
        self.clear_prin_amt_106();
        self.clear_int_amt_106();
        self.clear_emi_amt_106();
        self.clear_emi_date_106();
        self.clear_prin_amt_107();
        self.clear_int_amt_107();
        self.clear_emi_amt_107();
        self.clear_emi_date_107();
        self.clear_prin_amt_108();
        self.clear_int_amt_108();
        self.clear_emi_amt_108();
        self.clear_emi_date_108();
        self.clear_prin_amt_109();
        self.clear_int_amt_109();
        self.clear_emi_amt_109();
        self.clear_emi_date_109();
        self.clear_prin_amt_110();
        self.clear_int_amt_110();
        self.clear_emi_amt_110();
        self.clear_emi_date_110();
        self.clear_prin_amt_111();
        self.clear_int_amt_111();
        self.clear_emi_amt_111();
        self.clear_emi_date_111();
        self.clear_prin_amt_112();
        self.clear_int_amt_112();
        self.clear_emi_amt_112();
        self.clear_emi_date_112();
        self.clear_prin_amt_113();
        self.clear_int_amt_113();
        self.clear_emi_amt_113();
        self.clear_emi_date_113();
        self.clear_prin_amt_114();
        self.clear_int_amt_114();
        self.clear_emi_amt_114();
        self.clear_emi_date_114();
        self.clear_prin_amt_115();
        self.clear_int_amt_115();
        self.clear_emi_amt_115();
        self.clear_emi_date_115();
        self.clear_prin_amt_116();
        self.clear_int_amt_116();
        self.clear_emi_amt_116();
        self.clear_emi_date_116();
        self.clear_prin_amt_117();
        self.clear_int_amt_117();
        self.clear_emi_amt_117();
        self.clear_emi_date_117();
        self.clear_prin_amt_118();
        self.clear_int_amt_118();
        self.clear_emi_amt_118();
        self.clear_emi_date_118();
        self.clear_prin_amt_119();
        self.clear_int_amt_119();
        self.clear_emi_amt_119();
        self.clear_emi_date_119();
        self.clear_prin_amt_120();
        self.clear_int_amt_120();
        self.clear_emi_amt_120();
        self.clear_emi_date_120();
        self.clear_d_f_coc_emi_date_loan_booked();
        self.clear_v_f_coc_emi_loan_src();
        self.clear_v_f_coc_emi_tenure();
        self.clear_n_f_coc_emi_loan_amount();
        self.clear_v_f_coc_emi_loan_nbr();
        self.clear_n_f_coc_emi_out_prin();
        self.clear_n_f_coc_emi_out_int();
        self.clear_total_outstanding();
        self.clear_v_f_coc_emi_rate_of_int();
        self.clear_n_f_coc_emi_org();
        self.clear_v_f_coc_emi_chg_type();
        self.clear_filler();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17proto/credit_card.proto\"W\n\x08Cashflow\x12\x17\n\x07int_amt\x18\
    \x01\x20\x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\
    \x07prinAmt\x12\x17\n\x07cf_date\x18\x03\x20\x01(\x03R\x06cfDate\"\xc6}\
    \n\x14AccountWithCashflows\x12\x10\n\x03org\x18\x01\x20\x01(\tR\x03org\
    \x12\x12\n\x04logo\x18\x02\x20\x01(\tR\x04logo\x12\x12\n\x04acct\x18\x03\
    \x20\x01(\tR\x04acct\x12\x19\n\x08loan_nbr\x18\x04\x20\x01(\tR\x07loanNb\
    r\x12\x16\n\x06tenure\x18\x05\x20\x01(\tR\x06tenure\x12\x1c\n\nprin_amt_\
    1\x18\x06\x20\x01(\x01R\x08prinAmt1\x12\x1a\n\tint_amt_1\x18\x07\x20\x01\
    (\x01R\x07intAmt1\x12\x1a\n\temi_amt_1\x18\x08\x20\x01(\x01R\x07emiAmt1\
    \x12\x1c\n\nemi_date_1\x18\t\x20\x01(\x03R\x08emiDate1\x12\x1c\n\nprin_a\
    mt_2\x18\n\x20\x01(\x01R\x08prinAmt2\x12\x1a\n\tint_amt_2\x18\x0b\x20\
    \x01(\x01R\x07intAmt2\x12\x1a\n\temi_amt_2\x18\x0c\x20\x01(\x01R\x07emiA\
    mt2\x12\x1c\n\nemi_date_2\x18\r\x20\x01(\x03R\x08emiDate2\x12\x1c\n\npri\
    n_amt_3\x18\x0e\x20\x01(\x01R\x08prinAmt3\x12\x1a\n\tint_amt_3\x18\x0f\
    \x20\x01(\x01R\x07intAmt3\x12\x1a\n\temi_amt_3\x18\x10\x20\x01(\x01R\x07\
    emiAmt3\x12\x1c\n\nemi_date_3\x18\x11\x20\x01(\x03R\x08emiDate3\x12\x1c\
    \n\nprin_amt_4\x18\x12\x20\x01(\x01R\x08prinAmt4\x12\x1a\n\tint_amt_4\
    \x18\x13\x20\x01(\x01R\x07intAmt4\x12\x1a\n\temi_amt_4\x18\x14\x20\x01(\
    \x01R\x07emiAmt4\x12\x1c\n\nemi_date_4\x18\x15\x20\x01(\x03R\x08emiDate4\
    \x12\x1c\n\nprin_amt_5\x18\x16\x20\x01(\x01R\x08prinAmt5\x12\x1a\n\tint_\
    amt_5\x18\x17\x20\x01(\x01R\x07intAmt5\x12\x1a\n\temi_amt_5\x18\x18\x20\
    \x01(\x01R\x07emiAmt5\x12\x1c\n\nemi_date_5\x18\x19\x20\x01(\x03R\x08emi\
    Date5\x12\x1c\n\nprin_amt_6\x18\x1a\x20\x01(\x01R\x08prinAmt6\x12\x1a\n\
    \tint_amt_6\x18\x1b\x20\x01(\x01R\x07intAmt6\x12\x1a\n\temi_amt_6\x18\
    \x1c\x20\x01(\x01R\x07emiAmt6\x12\x1c\n\nemi_date_6\x18\x1d\x20\x01(\x03\
    R\x08emiDate6\x12\x1c\n\nprin_amt_7\x18\x1e\x20\x01(\x01R\x08prinAmt7\
    \x12\x1a\n\tint_amt_7\x18\x1f\x20\x01(\x01R\x07intAmt7\x12\x1a\n\temi_am\
    t_7\x18\x20\x20\x01(\x01R\x07emiAmt7\x12\x1c\n\nemi_date_7\x18!\x20\x01(\
    \x03R\x08emiDate7\x12\x1c\n\nprin_amt_8\x18\"\x20\x01(\x01R\x08prinAmt8\
    \x12\x1a\n\tint_amt_8\x18#\x20\x01(\x01R\x07intAmt8\x12\x1a\n\temi_amt_8\
    \x18$\x20\x01(\x01R\x07emiAmt8\x12\x1c\n\nemi_date_8\x18%\x20\x01(\x03R\
    \x08emiDate8\x12\x1c\n\nprin_amt_9\x18&\x20\x01(\x01R\x08prinAmt9\x12\
    \x1a\n\tint_amt_9\x18'\x20\x01(\x01R\x07intAmt9\x12\x1a\n\temi_amt_9\x18\
    (\x20\x01(\x01R\x07emiAmt9\x12\x1c\n\nemi_date_9\x18)\x20\x01(\x03R\x08e\
    miDate9\x12\x1e\n\x0bprin_amt_10\x18*\x20\x01(\x01R\tprinAmt10\x12\x1c\n\
    \nint_amt_10\x18+\x20\x01(\x01R\x08intAmt10\x12\x1c\n\nemi_amt_10\x18,\
    \x20\x01(\x01R\x08emiAmt10\x12\x1e\n\x0bemi_date_10\x18-\x20\x01(\x03R\t\
    emiDate10\x12\x1e\n\x0bprin_amt_11\x18.\x20\x01(\x01R\tprinAmt11\x12\x1c\
    \n\nint_amt_11\x18/\x20\x01(\x01R\x08intAmt11\x12\x1c\n\nemi_amt_11\x180\
    \x20\x01(\x01R\x08emiAmt11\x12\x1e\n\x0bemi_date_11\x181\x20\x01(\x03R\t\
    emiDate11\x12\x1e\n\x0bprin_amt_12\x182\x20\x01(\x01R\tprinAmt12\x12\x1c\
    \n\nint_amt_12\x183\x20\x01(\x01R\x08intAmt12\x12\x1c\n\nemi_amt_12\x184\
    \x20\x01(\x01R\x08emiAmt12\x12\x1e\n\x0bemi_date_12\x185\x20\x01(\x03R\t\
    emiDate12\x12\x1e\n\x0bprin_amt_13\x186\x20\x01(\x01R\tprinAmt13\x12\x1c\
    \n\nint_amt_13\x187\x20\x01(\x01R\x08intAmt13\x12\x1c\n\nemi_amt_13\x188\
    \x20\x01(\x01R\x08emiAmt13\x12\x1e\n\x0bemi_date_13\x189\x20\x01(\x03R\t\
    emiDate13\x12\x1e\n\x0bprin_amt_14\x18:\x20\x01(\x01R\tprinAmt14\x12\x1c\
    \n\nint_amt_14\x18;\x20\x01(\x01R\x08intAmt14\x12\x1c\n\nemi_amt_14\x18<\
    \x20\x01(\x01R\x08emiAmt14\x12\x1e\n\x0bemi_date_14\x18=\x20\x01(\x03R\t\
    emiDate14\x12\x1e\n\x0bprin_amt_15\x18>\x20\x01(\x01R\tprinAmt15\x12\x1c\
    \n\nint_amt_15\x18?\x20\x01(\x01R\x08intAmt15\x12\x1c\n\nemi_amt_15\x18@\
    \x20\x01(\x01R\x08emiAmt15\x12\x1e\n\x0bemi_date_15\x18A\x20\x01(\x03R\t\
    emiDate15\x12\x1e\n\x0bprin_amt_16\x18B\x20\x01(\x01R\tprinAmt16\x12\x1c\
    \n\nint_amt_16\x18C\x20\x01(\x01R\x08intAmt16\x12\x1c\n\nemi_amt_16\x18D\
    \x20\x01(\x01R\x08emiAmt16\x12\x1e\n\x0bemi_date_16\x18E\x20\x01(\x03R\t\
    emiDate16\x12\x1e\n\x0bprin_amt_17\x18F\x20\x01(\x01R\tprinAmt17\x12\x1c\
    \n\nint_amt_17\x18G\x20\x01(\x01R\x08intAmt17\x12\x1c\n\nemi_amt_17\x18H\
    \x20\x01(\x01R\x08emiAmt17\x12\x1e\n\x0bemi_date_17\x18I\x20\x01(\x03R\t\
    emiDate17\x12\x1e\n\x0bprin_amt_18\x18J\x20\x01(\x01R\tprinAmt18\x12\x1c\
    \n\nint_amt_18\x18K\x20\x01(\x01R\x08intAmt18\x12\x1c\n\nemi_amt_18\x18L\
    \x20\x01(\x01R\x08emiAmt18\x12\x1e\n\x0bemi_date_18\x18M\x20\x01(\x03R\t\
    emiDate18\x12\x1e\n\x0bprin_amt_19\x18N\x20\x01(\x01R\tprinAmt19\x12\x1c\
    \n\nint_amt_19\x18O\x20\x01(\x01R\x08intAmt19\x12\x1c\n\nemi_amt_19\x18P\
    \x20\x01(\x01R\x08emiAmt19\x12\x1e\n\x0bemi_date_19\x18Q\x20\x01(\x03R\t\
    emiDate19\x12\x1e\n\x0bprin_amt_20\x18R\x20\x01(\x01R\tprinAmt20\x12\x1c\
    \n\nint_amt_20\x18S\x20\x01(\x01R\x08intAmt20\x12\x1c\n\nemi_amt_20\x18T\
    \x20\x01(\x01R\x08emiAmt20\x12\x1e\n\x0bemi_date_20\x18U\x20\x01(\x03R\t\
    emiDate20\x12\x1e\n\x0bprin_amt_21\x18V\x20\x01(\x01R\tprinAmt21\x12\x1c\
    \n\nint_amt_21\x18W\x20\x01(\x01R\x08intAmt21\x12\x1c\n\nemi_amt_21\x18X\
    \x20\x01(\x01R\x08emiAmt21\x12\x1e\n\x0bemi_date_21\x18Y\x20\x01(\x03R\t\
    emiDate21\x12\x1e\n\x0bprin_amt_22\x18Z\x20\x01(\x01R\tprinAmt22\x12\x1c\
    \n\nint_amt_22\x18[\x20\x01(\x01R\x08intAmt22\x12\x1c\n\nemi_amt_22\x18\
    \\\x20\x01(\x01R\x08emiAmt22\x12\x1e\n\x0bemi_date_22\x18]\x20\x01(\x03R\
    \temiDate22\x12\x1e\n\x0bprin_amt_23\x18^\x20\x01(\x01R\tprinAmt23\x12\
    \x1c\n\nint_amt_23\x18_\x20\x01(\x01R\x08intAmt23\x12\x1c\n\nemi_amt_23\
    \x18`\x20\x01(\x01R\x08emiAmt23\x12\x1e\n\x0bemi_date_23\x18a\x20\x01(\
    \x03R\temiDate23\x12\x1e\n\x0bprin_amt_24\x18b\x20\x01(\x01R\tprinAmt24\
    \x12\x1c\n\nint_amt_24\x18c\x20\x01(\x01R\x08intAmt24\x12\x1c\n\nemi_amt\
    _24\x18d\x20\x01(\x01R\x08emiAmt24\x12\x1e\n\x0bemi_date_24\x18e\x20\x01\
    (\x03R\temiDate24\x12\x1e\n\x0bprin_amt_25\x18f\x20\x01(\x01R\tprinAmt25\
    \x12\x1c\n\nint_amt_25\x18g\x20\x01(\x01R\x08intAmt25\x12\x1c\n\nemi_amt\
    _25\x18h\x20\x01(\x01R\x08emiAmt25\x12\x1e\n\x0bemi_date_25\x18i\x20\x01\
    (\x03R\temiDate25\x12\x1e\n\x0bprin_amt_26\x18j\x20\x01(\x01R\tprinAmt26\
    \x12\x1c\n\nint_amt_26\x18k\x20\x01(\x01R\x08intAmt26\x12\x1c\n\nemi_amt\
    _26\x18l\x20\x01(\x01R\x08emiAmt26\x12\x1e\n\x0bemi_date_26\x18m\x20\x01\
    (\x03R\temiDate26\x12\x1e\n\x0bprin_amt_27\x18n\x20\x01(\x01R\tprinAmt27\
    \x12\x1c\n\nint_amt_27\x18o\x20\x01(\x01R\x08intAmt27\x12\x1c\n\nemi_amt\
    _27\x18p\x20\x01(\x01R\x08emiAmt27\x12\x1e\n\x0bemi_date_27\x18q\x20\x01\
    (\x03R\temiDate27\x12\x1e\n\x0bprin_amt_28\x18r\x20\x01(\x01R\tprinAmt28\
    \x12\x1c\n\nint_amt_28\x18s\x20\x01(\x01R\x08intAmt28\x12\x1c\n\nemi_amt\
    _28\x18t\x20\x01(\x01R\x08emiAmt28\x12\x1e\n\x0bemi_date_28\x18u\x20\x01\
    (\x03R\temiDate28\x12\x1e\n\x0bprin_amt_29\x18v\x20\x01(\x01R\tprinAmt29\
    \x12\x1c\n\nint_amt_29\x18w\x20\x01(\x01R\x08intAmt29\x12\x1c\n\nemi_amt\
    _29\x18x\x20\x01(\x01R\x08emiAmt29\x12\x1e\n\x0bemi_date_29\x18y\x20\x01\
    (\x03R\temiDate29\x12\x1e\n\x0bprin_amt_30\x18z\x20\x01(\x01R\tprinAmt30\
    \x12\x1c\n\nint_amt_30\x18{\x20\x01(\x01R\x08intAmt30\x12\x1c\n\nemi_amt\
    _30\x18|\x20\x01(\x01R\x08emiAmt30\x12\x1e\n\x0bemi_date_30\x18}\x20\x01\
    (\x03R\temiDate30\x12\x1e\n\x0bprin_amt_31\x18~\x20\x01(\x01R\tprinAmt31\
    \x12\x1c\n\nint_amt_31\x18\x7f\x20\x01(\x01R\x08intAmt31\x12\x1d\n\nemi_\
    amt_31\x18\x80\x01\x20\x01(\x01R\x08emiAmt31\x12\x1f\n\x0bemi_date_31\
    \x18\x81\x01\x20\x01(\x03R\temiDate31\x12\x1f\n\x0bprin_amt_32\x18\x82\
    \x01\x20\x01(\x01R\tprinAmt32\x12\x1d\n\nint_amt_32\x18\x83\x01\x20\x01(\
    \x01R\x08intAmt32\x12\x1d\n\nemi_amt_32\x18\x84\x01\x20\x01(\x01R\x08emi\
    Amt32\x12\x1f\n\x0bemi_date_32\x18\x85\x01\x20\x01(\x03R\temiDate32\x12\
    \x1f\n\x0bprin_amt_33\x18\x86\x01\x20\x01(\x01R\tprinAmt33\x12\x1d\n\nin\
    t_amt_33\x18\x87\x01\x20\x01(\x01R\x08intAmt33\x12\x1d\n\nemi_amt_33\x18\
    \x88\x01\x20\x01(\x01R\x08emiAmt33\x12\x1f\n\x0bemi_date_33\x18\x89\x01\
    \x20\x01(\x03R\temiDate33\x12\x1f\n\x0bprin_amt_34\x18\x8a\x01\x20\x01(\
    \x01R\tprinAmt34\x12\x1d\n\nint_amt_34\x18\x8b\x01\x20\x01(\x01R\x08intA\
    mt34\x12\x1d\n\nemi_amt_34\x18\x8c\x01\x20\x01(\x01R\x08emiAmt34\x12\x1f\
    \n\x0bemi_date_34\x18\x8d\x01\x20\x01(\x03R\temiDate34\x12\x1f\n\x0bprin\
    _amt_35\x18\x8e\x01\x20\x01(\x01R\tprinAmt35\x12\x1d\n\nint_amt_35\x18\
    \x8f\x01\x20\x01(\x01R\x08intAmt35\x12\x1d\n\nemi_amt_35\x18\x90\x01\x20\
    \x01(\x01R\x08emiAmt35\x12\x1f\n\x0bemi_date_35\x18\x91\x01\x20\x01(\x03\
    R\temiDate35\x12\x1f\n\x0bprin_amt_36\x18\x92\x01\x20\x01(\x01R\tprinAmt\
    36\x12\x1d\n\nint_amt_36\x18\x93\x01\x20\x01(\x01R\x08intAmt36\x12\x1d\n\
    \nemi_amt_36\x18\x94\x01\x20\x01(\x01R\x08emiAmt36\x12\x1f\n\x0bemi_date\
    _36\x18\x95\x01\x20\x01(\x03R\temiDate36\x12\x1f\n\x0bprin_amt_37\x18\
    \x96\x01\x20\x01(\x01R\tprinAmt37\x12\x1d\n\nint_amt_37\x18\x97\x01\x20\
    \x01(\x01R\x08intAmt37\x12\x1d\n\nemi_amt_37\x18\x98\x01\x20\x01(\x01R\
    \x08emiAmt37\x12\x1f\n\x0bemi_date_37\x18\x99\x01\x20\x01(\x03R\temiDate\
    37\x12\x1f\n\x0bprin_amt_38\x18\x9a\x01\x20\x01(\x01R\tprinAmt38\x12\x1d\
    \n\nint_amt_38\x18\x9b\x01\x20\x01(\x01R\x08intAmt38\x12\x1d\n\nemi_amt_\
    38\x18\x9c\x01\x20\x01(\x01R\x08emiAmt38\x12\x1f\n\x0bemi_date_38\x18\
    \x9d\x01\x20\x01(\x03R\temiDate38\x12\x1f\n\x0bprin_amt_39\x18\x9e\x01\
    \x20\x01(\x01R\tprinAmt39\x12\x1d\n\nint_amt_39\x18\x9f\x01\x20\x01(\x01\
    R\x08intAmt39\x12\x1d\n\nemi_amt_39\x18\xa0\x01\x20\x01(\x01R\x08emiAmt3\
    9\x12\x1f\n\x0bemi_date_39\x18\xa1\x01\x20\x01(\x03R\temiDate39\x12\x1f\
    \n\x0bprin_amt_40\x18\xa2\x01\x20\x01(\x01R\tprinAmt40\x12\x1d\n\nint_am\
    t_40\x18\xa3\x01\x20\x01(\x01R\x08intAmt40\x12\x1d\n\nemi_amt_40\x18\xa4\
    \x01\x20\x01(\x01R\x08emiAmt40\x12\x1f\n\x0bemi_date_40\x18\xa5\x01\x20\
    \x01(\x03R\temiDate40\x12\x1f\n\x0bprin_amt_41\x18\xa6\x01\x20\x01(\x01R\
    \tprinAmt41\x12\x1d\n\nint_amt_41\x18\xa7\x01\x20\x01(\x01R\x08intAmt41\
    \x12\x1d\n\nemi_amt_41\x18\xa8\x01\x20\x01(\x01R\x08emiAmt41\x12\x1f\n\
    \x0bemi_date_41\x18\xa9\x01\x20\x01(\x03R\temiDate41\x12\x1f\n\x0bprin_a\
    mt_42\x18\xaa\x01\x20\x01(\x01R\tprinAmt42\x12\x1d\n\nint_amt_42\x18\xab\
    \x01\x20\x01(\x01R\x08intAmt42\x12\x1d\n\nemi_amt_42\x18\xac\x01\x20\x01\
    (\x01R\x08emiAmt42\x12\x1f\n\x0bemi_date_42\x18\xad\x01\x20\x01(\x03R\te\
    miDate42\x12\x1f\n\x0bprin_amt_43\x18\xae\x01\x20\x01(\x01R\tprinAmt43\
    \x12\x1d\n\nint_amt_43\x18\xaf\x01\x20\x01(\x01R\x08intAmt43\x12\x1d\n\n\
    emi_amt_43\x18\xb0\x01\x20\x01(\x01R\x08emiAmt43\x12\x1f\n\x0bemi_date_4\
    3\x18\xb1\x01\x20\x01(\x03R\temiDate43\x12\x1f\n\x0bprin_amt_44\x18\xb2\
    \x01\x20\x01(\x01R\tprinAmt44\x12\x1d\n\nint_amt_44\x18\xb3\x01\x20\x01(\
    \x01R\x08intAmt44\x12\x1d\n\nemi_amt_44\x18\xb4\x01\x20\x01(\x01R\x08emi\
    Amt44\x12\x1f\n\x0bemi_date_44\x18\xb5\x01\x20\x01(\x03R\temiDate44\x12\
    \x1f\n\x0bprin_amt_45\x18\xb6\x01\x20\x01(\x01R\tprinAmt45\x12\x1d\n\nin\
    t_amt_45\x18\xb7\x01\x20\x01(\x01R\x08intAmt45\x12\x1d\n\nemi_amt_45\x18\
    \xb8\x01\x20\x01(\x01R\x08emiAmt45\x12\x1f\n\x0bemi_date_45\x18\xb9\x01\
    \x20\x01(\x03R\temiDate45\x12\x1f\n\x0bprin_amt_46\x18\xba\x01\x20\x01(\
    \x01R\tprinAmt46\x12\x1d\n\nint_amt_46\x18\xbb\x01\x20\x01(\x01R\x08intA\
    mt46\x12\x1d\n\nemi_amt_46\x18\xbc\x01\x20\x01(\x01R\x08emiAmt46\x12\x1f\
    \n\x0bemi_date_46\x18\xbd\x01\x20\x01(\x03R\temiDate46\x12\x1f\n\x0bprin\
    _amt_47\x18\xbe\x01\x20\x01(\x01R\tprinAmt47\x12\x1d\n\nint_amt_47\x18\
    \xbf\x01\x20\x01(\x01R\x08intAmt47\x12\x1d\n\nemi_amt_47\x18\xc0\x01\x20\
    \x01(\x01R\x08emiAmt47\x12\x1f\n\x0bemi_date_47\x18\xc1\x01\x20\x01(\x03\
    R\temiDate47\x12\x1f\n\x0bprin_amt_48\x18\xc2\x01\x20\x01(\x01R\tprinAmt\
    48\x12\x1d\n\nint_amt_48\x18\xc3\x01\x20\x01(\x01R\x08intAmt48\x12\x1d\n\
    \nemi_amt_48\x18\xc4\x01\x20\x01(\x01R\x08emiAmt48\x12\x1f\n\x0bemi_date\
    _48\x18\xc5\x01\x20\x01(\x03R\temiDate48\x12\x1f\n\x0bprin_amt_49\x18\
    \xc6\x01\x20\x01(\x01R\tprinAmt49\x12\x1d\n\nint_amt_49\x18\xc7\x01\x20\
    \x01(\x01R\x08intAmt49\x12\x1d\n\nemi_amt_49\x18\xc8\x01\x20\x01(\x01R\
    \x08emiAmt49\x12\x1f\n\x0bemi_date_49\x18\xc9\x01\x20\x01(\x03R\temiDate\
    49\x12\x1f\n\x0bprin_amt_50\x18\xca\x01\x20\x01(\x01R\tprinAmt50\x12\x1d\
    \n\nint_amt_50\x18\xcb\x01\x20\x01(\x01R\x08intAmt50\x12\x1d\n\nemi_amt_\
    50\x18\xcc\x01\x20\x01(\x01R\x08emiAmt50\x12\x1f\n\x0bemi_date_50\x18\
    \xcd\x01\x20\x01(\x03R\temiDate50\x12\x1f\n\x0bprin_amt_51\x18\xce\x01\
    \x20\x01(\x01R\tprinAmt51\x12\x1d\n\nint_amt_51\x18\xcf\x01\x20\x01(\x01\
    R\x08intAmt51\x12\x1d\n\nemi_amt_51\x18\xd0\x01\x20\x01(\x01R\x08emiAmt5\
    1\x12\x1f\n\x0bemi_date_51\x18\xd1\x01\x20\x01(\x03R\temiDate51\x12\x1f\
    \n\x0bprin_amt_52\x18\xd2\x01\x20\x01(\x01R\tprinAmt52\x12\x1d\n\nint_am\
    t_52\x18\xd3\x01\x20\x01(\x01R\x08intAmt52\x12\x1d\n\nemi_amt_52\x18\xd4\
    \x01\x20\x01(\x01R\x08emiAmt52\x12\x1f\n\x0bemi_date_52\x18\xd5\x01\x20\
    \x01(\x03R\temiDate52\x12\x1f\n\x0bprin_amt_53\x18\xd6\x01\x20\x01(\x01R\
    \tprinAmt53\x12\x1d\n\nint_amt_53\x18\xd7\x01\x20\x01(\x01R\x08intAmt53\
    \x12\x1d\n\nemi_amt_53\x18\xd8\x01\x20\x01(\x01R\x08emiAmt53\x12\x1f\n\
    \x0bemi_date_53\x18\xd9\x01\x20\x01(\x03R\temiDate53\x12\x1f\n\x0bprin_a\
    mt_54\x18\xda\x01\x20\x01(\x01R\tprinAmt54\x12\x1d\n\nint_amt_54\x18\xdb\
    \x01\x20\x01(\x01R\x08intAmt54\x12\x1d\n\nemi_amt_54\x18\xdc\x01\x20\x01\
    (\x01R\x08emiAmt54\x12\x1f\n\x0bemi_date_54\x18\xdd\x01\x20\x01(\x03R\te\
    miDate54\x12\x1f\n\x0bprin_amt_55\x18\xde\x01\x20\x01(\x01R\tprinAmt55\
    \x12\x1d\n\nint_amt_55\x18\xdf\x01\x20\x01(\x01R\x08intAmt55\x12\x1d\n\n\
    emi_amt_55\x18\xe0\x01\x20\x01(\x01R\x08emiAmt55\x12\x1f\n\x0bemi_date_5\
    5\x18\xe1\x01\x20\x01(\x03R\temiDate55\x12\x1f\n\x0bprin_amt_56\x18\xe2\
    \x01\x20\x01(\x01R\tprinAmt56\x12\x1d\n\nint_amt_56\x18\xe3\x01\x20\x01(\
    \x01R\x08intAmt56\x12\x1d\n\nemi_amt_56\x18\xe4\x01\x20\x01(\x01R\x08emi\
    Amt56\x12\x1f\n\x0bemi_date_56\x18\xe5\x01\x20\x01(\x03R\temiDate56\x12\
    \x1f\n\x0bprin_amt_57\x18\xe6\x01\x20\x01(\x01R\tprinAmt57\x12\x1d\n\nin\
    t_amt_57\x18\xe7\x01\x20\x01(\x01R\x08intAmt57\x12\x1d\n\nemi_amt_57\x18\
    \xe8\x01\x20\x01(\x01R\x08emiAmt57\x12\x1f\n\x0bemi_date_57\x18\xe9\x01\
    \x20\x01(\x03R\temiDate57\x12\x1f\n\x0bprin_amt_58\x18\xea\x01\x20\x01(\
    \x01R\tprinAmt58\x12\x1d\n\nint_amt_58\x18\xeb\x01\x20\x01(\x01R\x08intA\
    mt58\x12\x1d\n\nemi_amt_58\x18\xec\x01\x20\x01(\x01R\x08emiAmt58\x12\x1f\
    \n\x0bemi_date_58\x18\xed\x01\x20\x01(\x03R\temiDate58\x12\x1f\n\x0bprin\
    _amt_59\x18\xee\x01\x20\x01(\x01R\tprinAmt59\x12\x1d\n\nint_amt_59\x18\
    \xef\x01\x20\x01(\x01R\x08intAmt59\x12\x1d\n\nemi_amt_59\x18\xf0\x01\x20\
    \x01(\x01R\x08emiAmt59\x12\x1f\n\x0bemi_date_59\x18\xf1\x01\x20\x01(\x03\
    R\temiDate59\x12\x1f\n\x0bprin_amt_60\x18\xf2\x01\x20\x01(\x01R\tprinAmt\
    60\x12\x1d\n\nint_amt_60\x18\xf3\x01\x20\x01(\x01R\x08intAmt60\x12\x1d\n\
    \nemi_amt_60\x18\xf4\x01\x20\x01(\x01R\x08emiAmt60\x12\x1f\n\x0bemi_date\
    _60\x18\xf5\x01\x20\x01(\x03R\temiDate60\x12\x1f\n\x0bprin_amt_61\x18\
    \xf6\x01\x20\x01(\x01R\tprinAmt61\x12\x1d\n\nint_amt_61\x18\xf7\x01\x20\
    \x01(\x01R\x08intAmt61\x12\x1d\n\nemi_amt_61\x18\xf8\x01\x20\x01(\x01R\
    \x08emiAmt61\x12\x1f\n\x0bemi_date_61\x18\xf9\x01\x20\x01(\x03R\temiDate\
    61\x12\x1f\n\x0bprin_amt_62\x18\xfa\x01\x20\x01(\x01R\tprinAmt62\x12\x1d\
    \n\nint_amt_62\x18\xfb\x01\x20\x01(\x01R\x08intAmt62\x12\x1d\n\nemi_amt_\
    62\x18\xfc\x01\x20\x01(\x01R\x08emiAmt62\x12\x1f\n\x0bemi_date_62\x18\
    \xfd\x01\x20\x01(\x03R\temiDate62\x12\x1f\n\x0bprin_amt_63\x18\xfe\x01\
    \x20\x01(\x01R\tprinAmt63\x12\x1d\n\nint_amt_63\x18\xff\x01\x20\x01(\x01\
    R\x08intAmt63\x12\x1d\n\nemi_amt_63\x18\x80\x02\x20\x01(\x01R\x08emiAmt6\
    3\x12\x1f\n\x0bemi_date_63\x18\x81\x02\x20\x01(\x03R\temiDate63\x12\x1f\
    \n\x0bprin_amt_64\x18\x82\x02\x20\x01(\x01R\tprinAmt64\x12\x1d\n\nint_am\
    t_64\x18\x83\x02\x20\x01(\x01R\x08intAmt64\x12\x1d\n\nemi_amt_64\x18\x84\
    \x02\x20\x01(\x01R\x08emiAmt64\x12\x1f\n\x0bemi_date_64\x18\x85\x02\x20\
    \x01(\x03R\temiDate64\x12\x1f\n\x0bprin_amt_65\x18\x86\x02\x20\x01(\x01R\
    \tprinAmt65\x12\x1d\n\nint_amt_65\x18\x87\x02\x20\x01(\x01R\x08intAmt65\
    \x12\x1d\n\nemi_amt_65\x18\x88\x02\x20\x01(\x01R\x08emiAmt65\x12\x1f\n\
    \x0bemi_date_65\x18\x89\x02\x20\x01(\x03R\temiDate65\x12\x1f\n\x0bprin_a\
    mt_66\x18\x8a\x02\x20\x01(\x01R\tprinAmt66\x12\x1d\n\nint_amt_66\x18\x8b\
    \x02\x20\x01(\x01R\x08intAmt66\x12\x1d\n\nemi_amt_66\x18\x8c\x02\x20\x01\
    (\x01R\x08emiAmt66\x12\x1f\n\x0bemi_date_66\x18\x8d\x02\x20\x01(\x03R\te\
    miDate66\x12\x1f\n\x0bprin_amt_67\x18\x8e\x02\x20\x01(\x01R\tprinAmt67\
    \x12\x1d\n\nint_amt_67\x18\x8f\x02\x20\x01(\x01R\x08intAmt67\x12\x1d\n\n\
    emi_amt_67\x18\x90\x02\x20\x01(\x01R\x08emiAmt67\x12\x1f\n\x0bemi_date_6\
    7\x18\x91\x02\x20\x01(\x03R\temiDate67\x12\x1f\n\x0bprin_amt_68\x18\x92\
    \x02\x20\x01(\x01R\tprinAmt68\x12\x1d\n\nint_amt_68\x18\x93\x02\x20\x01(\
    \x01R\x08intAmt68\x12\x1d\n\nemi_amt_68\x18\x94\x02\x20\x01(\x01R\x08emi\
    Amt68\x12\x1f\n\x0bemi_date_68\x18\x95\x02\x20\x01(\x03R\temiDate68\x12\
    \x1f\n\x0bprin_amt_69\x18\x96\x02\x20\x01(\x01R\tprinAmt69\x12\x1d\n\nin\
    t_amt_69\x18\x97\x02\x20\x01(\x01R\x08intAmt69\x12\x1d\n\nemi_amt_69\x18\
    \x98\x02\x20\x01(\x01R\x08emiAmt69\x12\x1f\n\x0bemi_date_69\x18\x99\x02\
    \x20\x01(\x03R\temiDate69\x12\x1f\n\x0bprin_amt_70\x18\x9a\x02\x20\x01(\
    \x01R\tprinAmt70\x12\x1d\n\nint_amt_70\x18\x9b\x02\x20\x01(\x01R\x08intA\
    mt70\x12\x1d\n\nemi_amt_70\x18\x9c\x02\x20\x01(\x01R\x08emiAmt70\x12\x1f\
    \n\x0bemi_date_70\x18\x9d\x02\x20\x01(\x03R\temiDate70\x12\x1f\n\x0bprin\
    _amt_71\x18\x9e\x02\x20\x01(\x01R\tprinAmt71\x12\x1d\n\nint_amt_71\x18\
    \x9f\x02\x20\x01(\x01R\x08intAmt71\x12\x1d\n\nemi_amt_71\x18\xa0\x02\x20\
    \x01(\x01R\x08emiAmt71\x12\x1f\n\x0bemi_date_71\x18\xa1\x02\x20\x01(\x03\
    R\temiDate71\x12\x1f\n\x0bprin_amt_72\x18\xa2\x02\x20\x01(\x01R\tprinAmt\
    72\x12\x1d\n\nint_amt_72\x18\xa3\x02\x20\x01(\x01R\x08intAmt72\x12\x1d\n\
    \nemi_amt_72\x18\xa4\x02\x20\x01(\x01R\x08emiAmt72\x12\x1f\n\x0bemi_date\
    _72\x18\xa5\x02\x20\x01(\x03R\temiDate72\x12\x1f\n\x0bprin_amt_73\x18\
    \xa6\x02\x20\x01(\x01R\tprinAmt73\x12\x1d\n\nint_amt_73\x18\xa7\x02\x20\
    \x01(\x01R\x08intAmt73\x12\x1d\n\nemi_amt_73\x18\xa8\x02\x20\x01(\x01R\
    \x08emiAmt73\x12\x1f\n\x0bemi_date_73\x18\xa9\x02\x20\x01(\x03R\temiDate\
    73\x12\x1f\n\x0bprin_amt_74\x18\xaa\x02\x20\x01(\x01R\tprinAmt74\x12\x1d\
    \n\nint_amt_74\x18\xab\x02\x20\x01(\x01R\x08intAmt74\x12\x1d\n\nemi_amt_\
    74\x18\xac\x02\x20\x01(\x01R\x08emiAmt74\x12\x1f\n\x0bemi_date_74\x18\
    \xad\x02\x20\x01(\x03R\temiDate74\x12\x1f\n\x0bprin_amt_75\x18\xae\x02\
    \x20\x01(\x01R\tprinAmt75\x12\x1d\n\nint_amt_75\x18\xaf\x02\x20\x01(\x01\
    R\x08intAmt75\x12\x1d\n\nemi_amt_75\x18\xb0\x02\x20\x01(\x01R\x08emiAmt7\
    5\x12\x1f\n\x0bemi_date_75\x18\xb1\x02\x20\x01(\x03R\temiDate75\x12\x1f\
    \n\x0bprin_amt_76\x18\xb2\x02\x20\x01(\x01R\tprinAmt76\x12\x1d\n\nint_am\
    t_76\x18\xb3\x02\x20\x01(\x01R\x08intAmt76\x12\x1d\n\nemi_amt_76\x18\xb4\
    \x02\x20\x01(\x01R\x08emiAmt76\x12\x1f\n\x0bemi_date_76\x18\xb5\x02\x20\
    \x01(\x03R\temiDate76\x12\x1f\n\x0bprin_amt_77\x18\xb6\x02\x20\x01(\x01R\
    \tprinAmt77\x12\x1d\n\nint_amt_77\x18\xb7\x02\x20\x01(\x01R\x08intAmt77\
    \x12\x1d\n\nemi_amt_77\x18\xb8\x02\x20\x01(\x01R\x08emiAmt77\x12\x1f\n\
    \x0bemi_date_77\x18\xb9\x02\x20\x01(\x03R\temiDate77\x12\x1f\n\x0bprin_a\
    mt_78\x18\xba\x02\x20\x01(\x01R\tprinAmt78\x12\x1d\n\nint_amt_78\x18\xbb\
    \x02\x20\x01(\x01R\x08intAmt78\x12\x1d\n\nemi_amt_78\x18\xbc\x02\x20\x01\
    (\x01R\x08emiAmt78\x12\x1f\n\x0bemi_date_78\x18\xbd\x02\x20\x01(\x03R\te\
    miDate78\x12\x1f\n\x0bprin_amt_79\x18\xbe\x02\x20\x01(\x01R\tprinAmt79\
    \x12\x1d\n\nint_amt_79\x18\xbf\x02\x20\x01(\x01R\x08intAmt79\x12\x1d\n\n\
    emi_amt_79\x18\xc0\x02\x20\x01(\x01R\x08emiAmt79\x12\x1f\n\x0bemi_date_7\
    9\x18\xc1\x02\x20\x01(\x03R\temiDate79\x12\x1f\n\x0bprin_amt_80\x18\xc2\
    \x02\x20\x01(\x01R\tprinAmt80\x12\x1d\n\nint_amt_80\x18\xc3\x02\x20\x01(\
    \x01R\x08intAmt80\x12\x1d\n\nemi_amt_80\x18\xc4\x02\x20\x01(\x01R\x08emi\
    Amt80\x12\x1f\n\x0bemi_date_80\x18\xc5\x02\x20\x01(\x03R\temiDate80\x12\
    \x1f\n\x0bprin_amt_81\x18\xc6\x02\x20\x01(\x01R\tprinAmt81\x12\x1d\n\nin\
    t_amt_81\x18\xc7\x02\x20\x01(\x01R\x08intAmt81\x12\x1d\n\nemi_amt_81\x18\
    \xc8\x02\x20\x01(\x01R\x08emiAmt81\x12\x1f\n\x0bemi_date_81\x18\xc9\x02\
    \x20\x01(\x03R\temiDate81\x12\x1f\n\x0bprin_amt_82\x18\xca\x02\x20\x01(\
    \x01R\tprinAmt82\x12\x1d\n\nint_amt_82\x18\xcb\x02\x20\x01(\x01R\x08intA\
    mt82\x12\x1d\n\nemi_amt_82\x18\xcc\x02\x20\x01(\x01R\x08emiAmt82\x12\x1f\
    \n\x0bemi_date_82\x18\xcd\x02\x20\x01(\x03R\temiDate82\x12\x1f\n\x0bprin\
    _amt_83\x18\xce\x02\x20\x01(\x01R\tprinAmt83\x12\x1d\n\nint_amt_83\x18\
    \xcf\x02\x20\x01(\x01R\x08intAmt83\x12\x1d\n\nemi_amt_83\x18\xd0\x02\x20\
    \x01(\x01R\x08emiAmt83\x12\x1f\n\x0bemi_date_83\x18\xd1\x02\x20\x01(\x03\
    R\temiDate83\x12\x1f\n\x0bprin_amt_84\x18\xd2\x02\x20\x01(\x01R\tprinAmt\
    84\x12\x1d\n\nint_amt_84\x18\xd3\x02\x20\x01(\x01R\x08intAmt84\x12\x1d\n\
    \nemi_amt_84\x18\xd4\x02\x20\x01(\x01R\x08emiAmt84\x12\x1f\n\x0bemi_date\
    _84\x18\xd5\x02\x20\x01(\x03R\temiDate84\x12\x1f\n\x0bprin_amt_85\x18\
    \xd6\x02\x20\x01(\x01R\tprinAmt85\x12\x1d\n\nint_amt_85\x18\xd7\x02\x20\
    \x01(\x01R\x08intAmt85\x12\x1d\n\nemi_amt_85\x18\xd8\x02\x20\x01(\x01R\
    \x08emiAmt85\x12\x1f\n\x0bemi_date_85\x18\xd9\x02\x20\x01(\x03R\temiDate\
    85\x12\x1f\n\x0bprin_amt_86\x18\xda\x02\x20\x01(\x01R\tprinAmt86\x12\x1d\
    \n\nint_amt_86\x18\xdb\x02\x20\x01(\x01R\x08intAmt86\x12\x1d\n\nemi_amt_\
    86\x18\xdc\x02\x20\x01(\x01R\x08emiAmt86\x12\x1f\n\x0bemi_date_86\x18\
    \xdd\x02\x20\x01(\x03R\temiDate86\x12\x1f\n\x0bprin_amt_87\x18\xde\x02\
    \x20\x01(\x01R\tprinAmt87\x12\x1d\n\nint_amt_87\x18\xdf\x02\x20\x01(\x01\
    R\x08intAmt87\x12\x1d\n\nemi_amt_87\x18\xe0\x02\x20\x01(\x01R\x08emiAmt8\
    7\x12\x1f\n\x0bemi_date_87\x18\xe1\x02\x20\x01(\x03R\temiDate87\x12\x1f\
    \n\x0bprin_amt_88\x18\xe2\x02\x20\x01(\x01R\tprinAmt88\x12\x1d\n\nint_am\
    t_88\x18\xe3\x02\x20\x01(\x01R\x08intAmt88\x12\x1d\n\nemi_amt_88\x18\xe4\
    \x02\x20\x01(\x01R\x08emiAmt88\x12\x1f\n\x0bemi_date_88\x18\xe5\x02\x20\
    \x01(\x03R\temiDate88\x12\x1f\n\x0bprin_amt_89\x18\xe6\x02\x20\x01(\x01R\
    \tprinAmt89\x12\x1d\n\nint_amt_89\x18\xe7\x02\x20\x01(\x01R\x08intAmt89\
    \x12\x1d\n\nemi_amt_89\x18\xe8\x02\x20\x01(\x01R\x08emiAmt89\x12\x1f\n\
    \x0bemi_date_89\x18\xe9\x02\x20\x01(\x03R\temiDate89\x12\x1f\n\x0bprin_a\
    mt_90\x18\xea\x02\x20\x01(\x01R\tprinAmt90\x12\x1d\n\nint_amt_90\x18\xeb\
    \x02\x20\x01(\x01R\x08intAmt90\x12\x1d\n\nemi_amt_90\x18\xec\x02\x20\x01\
    (\x01R\x08emiAmt90\x12\x1f\n\x0bemi_date_90\x18\xed\x02\x20\x01(\x03R\te\
    miDate90\x12\x1f\n\x0bprin_amt_91\x18\xee\x02\x20\x01(\x01R\tprinAmt91\
    \x12\x1d\n\nint_amt_91\x18\xef\x02\x20\x01(\x01R\x08intAmt91\x12\x1d\n\n\
    emi_amt_91\x18\xf0\x02\x20\x01(\x01R\x08emiAmt91\x12\x1f\n\x0bemi_date_9\
    1\x18\xf1\x02\x20\x01(\x03R\temiDate91\x12\x1f\n\x0bprin_amt_92\x18\xf2\
    \x02\x20\x01(\x01R\tprinAmt92\x12\x1d\n\nint_amt_92\x18\xf3\x02\x20\x01(\
    \x01R\x08intAmt92\x12\x1d\n\nemi_amt_92\x18\xf4\x02\x20\x01(\x01R\x08emi\
    Amt92\x12\x1f\n\x0bemi_date_92\x18\xf5\x02\x20\x01(\x03R\temiDate92\x12\
    \x1f\n\x0bprin_amt_93\x18\xf6\x02\x20\x01(\x01R\tprinAmt93\x12\x1d\n\nin\
    t_amt_93\x18\xf7\x02\x20\x01(\x01R\x08intAmt93\x12\x1d\n\nemi_amt_93\x18\
    \xf8\x02\x20\x01(\x01R\x08emiAmt93\x12\x1f\n\x0bemi_date_93\x18\xf9\x02\
    \x20\x01(\x03R\temiDate93\x12\x1f\n\x0bprin_amt_94\x18\xfa\x02\x20\x01(\
    \x01R\tprinAmt94\x12\x1d\n\nint_amt_94\x18\xfb\x02\x20\x01(\x01R\x08intA\
    mt94\x12\x1d\n\nemi_amt_94\x18\xfc\x02\x20\x01(\x01R\x08emiAmt94\x12\x1f\
    \n\x0bemi_date_94\x18\xfd\x02\x20\x01(\x03R\temiDate94\x12\x1f\n\x0bprin\
    _amt_95\x18\xfe\x02\x20\x01(\x01R\tprinAmt95\x12\x1d\n\nint_amt_95\x18\
    \xff\x02\x20\x01(\x01R\x08intAmt95\x12\x1d\n\nemi_amt_95\x18\x80\x03\x20\
    \x01(\x01R\x08emiAmt95\x12\x1f\n\x0bemi_date_95\x18\x81\x03\x20\x01(\x03\
    R\temiDate95\x12\x1f\n\x0bprin_amt_96\x18\x82\x03\x20\x01(\x01R\tprinAmt\
    96\x12\x1d\n\nint_amt_96\x18\x83\x03\x20\x01(\x01R\x08intAmt96\x12\x1d\n\
    \nemi_amt_96\x18\x84\x03\x20\x01(\x01R\x08emiAmt96\x12\x1f\n\x0bemi_date\
    _96\x18\x85\x03\x20\x01(\x03R\temiDate96\x12\x1f\n\x0bprin_amt_97\x18\
    \x86\x03\x20\x01(\x01R\tprinAmt97\x12\x1d\n\nint_amt_97\x18\x87\x03\x20\
    \x01(\x01R\x08intAmt97\x12\x1d\n\nemi_amt_97\x18\x88\x03\x20\x01(\x01R\
    \x08emiAmt97\x12\x1f\n\x0bemi_date_97\x18\x89\x03\x20\x01(\x03R\temiDate\
    97\x12\x1f\n\x0bprin_amt_98\x18\x8a\x03\x20\x01(\x01R\tprinAmt98\x12\x1d\
    \n\nint_amt_98\x18\x8b\x03\x20\x01(\x01R\x08intAmt98\x12\x1d\n\nemi_amt_\
    98\x18\x8c\x03\x20\x01(\x01R\x08emiAmt98\x12\x1f\n\x0bemi_date_98\x18\
    \x8d\x03\x20\x01(\x03R\temiDate98\x12\x1f\n\x0bprin_amt_99\x18\x8e\x03\
    \x20\x01(\x01R\tprinAmt99\x12\x1d\n\nint_amt_99\x18\x8f\x03\x20\x01(\x01\
    R\x08intAmt99\x12\x1d\n\nemi_amt_99\x18\x90\x03\x20\x01(\x01R\x08emiAmt9\
    9\x12\x1f\n\x0bemi_date_99\x18\x91\x03\x20\x01(\x03R\temiDate99\x12!\n\
    \x0cprin_amt_100\x18\x92\x03\x20\x01(\x01R\nprinAmt100\x12\x1f\n\x0bint_\
    amt_100\x18\x93\x03\x20\x01(\x01R\tintAmt100\x12\x1f\n\x0bemi_amt_100\
    \x18\x94\x03\x20\x01(\x01R\temiAmt100\x12!\n\x0cemi_date_100\x18\x95\x03\
    \x20\x01(\x03R\nemiDate100\x12!\n\x0cprin_amt_101\x18\x96\x03\x20\x01(\
    \x01R\nprinAmt101\x12\x1f\n\x0bint_amt_101\x18\x97\x03\x20\x01(\x01R\tin\
    tAmt101\x12\x1f\n\x0bemi_amt_101\x18\x98\x03\x20\x01(\x01R\temiAmt101\
    \x12!\n\x0cemi_date_101\x18\x99\x03\x20\x01(\x03R\nemiDate101\x12!\n\x0c\
    prin_amt_102\x18\x9a\x03\x20\x01(\x01R\nprinAmt102\x12\x1f\n\x0bint_amt_\
    102\x18\x9b\x03\x20\x01(\x01R\tintAmt102\x12\x1f\n\x0bemi_amt_102\x18\
    \x9c\x03\x20\x01(\x01R\temiAmt102\x12!\n\x0cemi_date_102\x18\x9d\x03\x20\
    \x01(\x03R\nemiDate102\x12!\n\x0cprin_amt_103\x18\x9e\x03\x20\x01(\x01R\
    \nprinAmt103\x12\x1f\n\x0bint_amt_103\x18\x9f\x03\x20\x01(\x01R\tintAmt1\
    03\x12\x1f\n\x0bemi_amt_103\x18\xa0\x03\x20\x01(\x01R\temiAmt103\x12!\n\
    \x0cemi_date_103\x18\xa1\x03\x20\x01(\x03R\nemiDate103\x12!\n\x0cprin_am\
    t_104\x18\xa2\x03\x20\x01(\x01R\nprinAmt104\x12\x1f\n\x0bint_amt_104\x18\
    \xa3\x03\x20\x01(\x01R\tintAmt104\x12\x1f\n\x0bemi_amt_104\x18\xa4\x03\
    \x20\x01(\x01R\temiAmt104\x12!\n\x0cemi_date_104\x18\xa5\x03\x20\x01(\
    \x03R\nemiDate104\x12!\n\x0cprin_amt_105\x18\xa6\x03\x20\x01(\x01R\nprin\
    Amt105\x12\x1f\n\x0bint_amt_105\x18\xa7\x03\x20\x01(\x01R\tintAmt105\x12\
    \x1f\n\x0bemi_amt_105\x18\xa8\x03\x20\x01(\x01R\temiAmt105\x12!\n\x0cemi\
    _date_105\x18\xa9\x03\x20\x01(\x03R\nemiDate105\x12!\n\x0cprin_amt_106\
    \x18\xaa\x03\x20\x01(\x01R\nprinAmt106\x12\x1f\n\x0bint_amt_106\x18\xab\
    \x03\x20\x01(\x01R\tintAmt106\x12\x1f\n\x0bemi_amt_106\x18\xac\x03\x20\
    \x01(\x01R\temiAmt106\x12!\n\x0cemi_date_106\x18\xad\x03\x20\x01(\x03R\n\
    emiDate106\x12!\n\x0cprin_amt_107\x18\xae\x03\x20\x01(\x01R\nprinAmt107\
    \x12\x1f\n\x0bint_amt_107\x18\xaf\x03\x20\x01(\x01R\tintAmt107\x12\x1f\n\
    \x0bemi_amt_107\x18\xb0\x03\x20\x01(\x01R\temiAmt107\x12!\n\x0cemi_date_\
    107\x18\xb1\x03\x20\x01(\x03R\nemiDate107\x12!\n\x0cprin_amt_108\x18\xb2\
    \x03\x20\x01(\x01R\nprinAmt108\x12\x1f\n\x0bint_amt_108\x18\xb3\x03\x20\
    \x01(\x01R\tintAmt108\x12\x1f\n\x0bemi_amt_108\x18\xb4\x03\x20\x01(\x01R\
    \temiAmt108\x12!\n\x0cemi_date_108\x18\xb5\x03\x20\x01(\x03R\nemiDate108\
    \x12!\n\x0cprin_amt_109\x18\xb6\x03\x20\x01(\x01R\nprinAmt109\x12\x1f\n\
    \x0bint_amt_109\x18\xb7\x03\x20\x01(\x01R\tintAmt109\x12\x1f\n\x0bemi_am\
    t_109\x18\xb8\x03\x20\x01(\x01R\temiAmt109\x12!\n\x0cemi_date_109\x18\
    \xb9\x03\x20\x01(\x03R\nemiDate109\x12!\n\x0cprin_amt_110\x18\xba\x03\
    \x20\x01(\x01R\nprinAmt110\x12\x1f\n\x0bint_amt_110\x18\xbb\x03\x20\x01(\
    \x01R\tintAmt110\x12\x1f\n\x0bemi_amt_110\x18\xbc\x03\x20\x01(\x01R\temi\
    Amt110\x12!\n\x0cemi_date_110\x18\xbd\x03\x20\x01(\x03R\nemiDate110\x12!\
    \n\x0cprin_amt_111\x18\xbe\x03\x20\x01(\x01R\nprinAmt111\x12\x1f\n\x0bin\
    t_amt_111\x18\xbf\x03\x20\x01(\x01R\tintAmt111\x12\x1f\n\x0bemi_amt_111\
    \x18\xc0\x03\x20\x01(\x01R\temiAmt111\x12!\n\x0cemi_date_111\x18\xc1\x03\
    \x20\x01(\x03R\nemiDate111\x12!\n\x0cprin_amt_112\x18\xc2\x03\x20\x01(\
    \x01R\nprinAmt112\x12\x1f\n\x0bint_amt_112\x18\xc3\x03\x20\x01(\x01R\tin\
    tAmt112\x12\x1f\n\x0bemi_amt_112\x18\xc4\x03\x20\x01(\x01R\temiAmt112\
    \x12!\n\x0cemi_date_112\x18\xc5\x03\x20\x01(\x03R\nemiDate112\x12!\n\x0c\
    prin_amt_113\x18\xc6\x03\x20\x01(\x01R\nprinAmt113\x12\x1f\n\x0bint_amt_\
    113\x18\xc7\x03\x20\x01(\x01R\tintAmt113\x12\x1f\n\x0bemi_amt_113\x18\
    \xc8\x03\x20\x01(\x01R\temiAmt113\x12!\n\x0cemi_date_113\x18\xc9\x03\x20\
    \x01(\x03R\nemiDate113\x12!\n\x0cprin_amt_114\x18\xca\x03\x20\x01(\x01R\
    \nprinAmt114\x12\x1f\n\x0bint_amt_114\x18\xcb\x03\x20\x01(\x01R\tintAmt1\
    14\x12\x1f\n\x0bemi_amt_114\x18\xcc\x03\x20\x01(\x01R\temiAmt114\x12!\n\
    \x0cemi_date_114\x18\xcd\x03\x20\x01(\x03R\nemiDate114\x12!\n\x0cprin_am\
    t_115\x18\xce\x03\x20\x01(\x01R\nprinAmt115\x12\x1f\n\x0bint_amt_115\x18\
    \xcf\x03\x20\x01(\x01R\tintAmt115\x12\x1f\n\x0bemi_amt_115\x18\xd0\x03\
    \x20\x01(\x01R\temiAmt115\x12!\n\x0cemi_date_115\x18\xd1\x03\x20\x01(\
    \x03R\nemiDate115\x12!\n\x0cprin_amt_116\x18\xd2\x03\x20\x01(\x01R\nprin\
    Amt116\x12\x1f\n\x0bint_amt_116\x18\xd3\x03\x20\x01(\x01R\tintAmt116\x12\
    \x1f\n\x0bemi_amt_116\x18\xd4\x03\x20\x01(\x01R\temiAmt116\x12!\n\x0cemi\
    _date_116\x18\xd5\x03\x20\x01(\x03R\nemiDate116\x12!\n\x0cprin_amt_117\
    \x18\xd6\x03\x20\x01(\x01R\nprinAmt117\x12\x1f\n\x0bint_amt_117\x18\xd7\
    \x03\x20\x01(\x01R\tintAmt117\x12\x1f\n\x0bemi_amt_117\x18\xd8\x03\x20\
    \x01(\x01R\temiAmt117\x12!\n\x0cemi_date_117\x18\xd9\x03\x20\x01(\x03R\n\
    emiDate117\x12!\n\x0cprin_amt_118\x18\xda\x03\x20\x01(\x01R\nprinAmt118\
    \x12\x1f\n\x0bint_amt_118\x18\xdb\x03\x20\x01(\x01R\tintAmt118\x12\x1f\n\
    \x0bemi_amt_118\x18\xdc\x03\x20\x01(\x01R\temiAmt118\x12!\n\x0cemi_date_\
    118\x18\xdd\x03\x20\x01(\x03R\nemiDate118\x12!\n\x0cprin_amt_119\x18\xde\
    \x03\x20\x01(\x01R\nprinAmt119\x12\x1f\n\x0bint_amt_119\x18\xdf\x03\x20\
    \x01(\x01R\tintAmt119\x12\x1f\n\x0bemi_amt_119\x18\xe0\x03\x20\x01(\x01R\
    \temiAmt119\x12!\n\x0cemi_date_119\x18\xe1\x03\x20\x01(\x03R\nemiDate119\
    \x12!\n\x0cprin_amt_120\x18\xe2\x03\x20\x01(\x01R\nprinAmt120\x12\x1f\n\
    \x0bint_amt_120\x18\xe3\x03\x20\x01(\x01R\tintAmt120\x12\x1f\n\x0bemi_am\
    t_120\x18\xe4\x03\x20\x01(\x01R\temiAmt120\x12!\n\x0cemi_date_120\x18\
    \xe5\x03\x20\x01(\x03R\nemiDate120\x12=\n\x1cd_f_coc_emi_date_loan_booke\
    d\x18\xe6\x03\x20\x01(\x03R\x16dFCocEmiDateLoanBooked\x12.\n\x14v_f_coc_\
    emi_loan_src\x18\xe7\x03\x20\x01(\tR\x0fvFCocEmiLoanSrc\x12+\n\x12v_f_co\
    c_emi_tenure\x18\xe8\x03\x20\x01(\tR\x0evFCocEmiTenure\x124\n\x17n_f_coc\
    _emi_loan_amount\x18\xe9\x03\x20\x01(\x01R\x12nFCocEmiLoanAmount\x12.\n\
    \x14v_f_coc_emi_loan_nbr\x18\xea\x03\x20\x01(\tR\x0fvFCocEmiLoanNbr\x12.\
    \n\x14n_f_coc_emi_out_prin\x18\xeb\x03\x20\x01(\x01R\x0fnFCocEmiOutPrin\
    \x12,\n\x13n_f_coc_emi_out_int\x18\xec\x03\x20\x01(\x01R\x0enFCocEmiOutI\
    nt\x12,\n\x11total_outstanding\x18\xed\x03\x20\x01(\x01R\x10totalOutstan\
    ding\x123\n\x17v_f_coc_emi_rate_of_int\x18\xee\x03\x20\x01(\x01R\x11vFCo\
    cEmiRateOfInt\x12%\n\x0fn_f_coc_emi_org\x18\xef\x03\x20\x01(\tR\x0bnFCoc\
    EmiOrg\x12.\n\x14v_f_coc_emi_chg_type\x18\xf0\x03\x20\x01(\tR\x0fvFCocEm\
    iChgType\x12\x17\n\x06filler\x18\xf1\x03\x20\x01(\x03R\x06filler\x12(\n\
    \tcashflows\x18\xf2\x03\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
