// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `gen_acc.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Account {
    // message fields
    pub as_on: ::std::string::String,
    pub source: ::std::string::String,
    pub acc_no: ::std::string::String,
    pub prod_code: ::std::string::String,
    pub mis1: ::std::string::String,
    pub gl_liab: ::std::string::String,
    pub gl_int_comp: ::std::string::String,
    pub concat: ::std::string::String,
    pub div: ::std::string::String,
    pub alm_line: ::std::string::String,
    pub ia_line: ::std::string::String,
    pub alco: ::std::string::String,
    pub org_tenor: ::std::string::String,
    pub res_tenor: ::std::string::String,
    pub ia_tenor: ::std::string::String,
    pub bucket_val: ::std::string::String,
    pub cat_val: ::std::string::String,
    pub cust_id: ::std::string::String,
    pub wd_nwd_val: ::std::string::String,
    pub bal_lcy: ::std::string::String,
    pub int_comp: ::std::string::String,
    pub rate: ::std::string::String,
    pub rate_var: ::std::string::String,
    pub rate_var2: ::std::string::String,
    pub amt: ::std::string::String,
    pub yld: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Account {
    fn default() -> &'a Account {
        <Account as ::protobuf::Message>::default_instance()
    }
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    // string as_on = 1;


    pub fn get_as_on(&self) -> &str {
        &self.as_on
    }
    pub fn clear_as_on(&mut self) {
        self.as_on.clear();
    }

    // Param is passed by value, moved
    pub fn set_as_on(&mut self, v: ::std::string::String) {
        self.as_on = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_as_on(&mut self) -> &mut ::std::string::String {
        &mut self.as_on
    }

    // Take field
    pub fn take_as_on(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.as_on, ::std::string::String::new())
    }

    // string source = 2;


    pub fn get_source(&self) -> &str {
        &self.source
    }
    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: ::std::string::String) {
        self.source = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut ::std::string::String {
        &mut self.source
    }

    // Take field
    pub fn take_source(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source, ::std::string::String::new())
    }

    // string acc_no = 3;


    pub fn get_acc_no(&self) -> &str {
        &self.acc_no
    }
    pub fn clear_acc_no(&mut self) {
        self.acc_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_no(&mut self, v: ::std::string::String) {
        self.acc_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_no(&mut self) -> &mut ::std::string::String {
        &mut self.acc_no
    }

    // Take field
    pub fn take_acc_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_no, ::std::string::String::new())
    }

    // string prod_code = 4;


    pub fn get_prod_code(&self) -> &str {
        &self.prod_code
    }
    pub fn clear_prod_code(&mut self) {
        self.prod_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_code(&mut self, v: ::std::string::String) {
        self.prod_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_code(&mut self) -> &mut ::std::string::String {
        &mut self.prod_code
    }

    // Take field
    pub fn take_prod_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_code, ::std::string::String::new())
    }

    // string mis1 = 5;


    pub fn get_mis1(&self) -> &str {
        &self.mis1
    }
    pub fn clear_mis1(&mut self) {
        self.mis1.clear();
    }

    // Param is passed by value, moved
    pub fn set_mis1(&mut self, v: ::std::string::String) {
        self.mis1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mis1(&mut self) -> &mut ::std::string::String {
        &mut self.mis1
    }

    // Take field
    pub fn take_mis1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mis1, ::std::string::String::new())
    }

    // string gl_liab = 6;


    pub fn get_gl_liab(&self) -> &str {
        &self.gl_liab
    }
    pub fn clear_gl_liab(&mut self) {
        self.gl_liab.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_liab(&mut self, v: ::std::string::String) {
        self.gl_liab = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_liab(&mut self) -> &mut ::std::string::String {
        &mut self.gl_liab
    }

    // Take field
    pub fn take_gl_liab(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_liab, ::std::string::String::new())
    }

    // string gl_int_comp = 7;


    pub fn get_gl_int_comp(&self) -> &str {
        &self.gl_int_comp
    }
    pub fn clear_gl_int_comp(&mut self) {
        self.gl_int_comp.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_int_comp(&mut self, v: ::std::string::String) {
        self.gl_int_comp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_int_comp(&mut self) -> &mut ::std::string::String {
        &mut self.gl_int_comp
    }

    // Take field
    pub fn take_gl_int_comp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_int_comp, ::std::string::String::new())
    }

    // string concat = 8;


    pub fn get_concat(&self) -> &str {
        &self.concat
    }
    pub fn clear_concat(&mut self) {
        self.concat.clear();
    }

    // Param is passed by value, moved
    pub fn set_concat(&mut self, v: ::std::string::String) {
        self.concat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_concat(&mut self) -> &mut ::std::string::String {
        &mut self.concat
    }

    // Take field
    pub fn take_concat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.concat, ::std::string::String::new())
    }

    // string div = 9;


    pub fn get_div(&self) -> &str {
        &self.div
    }
    pub fn clear_div(&mut self) {
        self.div.clear();
    }

    // Param is passed by value, moved
    pub fn set_div(&mut self, v: ::std::string::String) {
        self.div = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_div(&mut self) -> &mut ::std::string::String {
        &mut self.div
    }

    // Take field
    pub fn take_div(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.div, ::std::string::String::new())
    }

    // string alm_line = 10;


    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }
    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    // string ia_line = 11;


    pub fn get_ia_line(&self) -> &str {
        &self.ia_line
    }
    pub fn clear_ia_line(&mut self) {
        self.ia_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_ia_line(&mut self, v: ::std::string::String) {
        self.ia_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ia_line(&mut self) -> &mut ::std::string::String {
        &mut self.ia_line
    }

    // Take field
    pub fn take_ia_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ia_line, ::std::string::String::new())
    }

    // string alco = 12;


    pub fn get_alco(&self) -> &str {
        &self.alco
    }
    pub fn clear_alco(&mut self) {
        self.alco.clear();
    }

    // Param is passed by value, moved
    pub fn set_alco(&mut self, v: ::std::string::String) {
        self.alco = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alco(&mut self) -> &mut ::std::string::String {
        &mut self.alco
    }

    // Take field
    pub fn take_alco(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alco, ::std::string::String::new())
    }

    // string org_tenor = 13;


    pub fn get_org_tenor(&self) -> &str {
        &self.org_tenor
    }
    pub fn clear_org_tenor(&mut self) {
        self.org_tenor.clear();
    }

    // Param is passed by value, moved
    pub fn set_org_tenor(&mut self, v: ::std::string::String) {
        self.org_tenor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_org_tenor(&mut self) -> &mut ::std::string::String {
        &mut self.org_tenor
    }

    // Take field
    pub fn take_org_tenor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.org_tenor, ::std::string::String::new())
    }

    // string res_tenor = 14;


    pub fn get_res_tenor(&self) -> &str {
        &self.res_tenor
    }
    pub fn clear_res_tenor(&mut self) {
        self.res_tenor.clear();
    }

    // Param is passed by value, moved
    pub fn set_res_tenor(&mut self, v: ::std::string::String) {
        self.res_tenor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_res_tenor(&mut self) -> &mut ::std::string::String {
        &mut self.res_tenor
    }

    // Take field
    pub fn take_res_tenor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.res_tenor, ::std::string::String::new())
    }

    // string ia_tenor = 15;


    pub fn get_ia_tenor(&self) -> &str {
        &self.ia_tenor
    }
    pub fn clear_ia_tenor(&mut self) {
        self.ia_tenor.clear();
    }

    // Param is passed by value, moved
    pub fn set_ia_tenor(&mut self, v: ::std::string::String) {
        self.ia_tenor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ia_tenor(&mut self) -> &mut ::std::string::String {
        &mut self.ia_tenor
    }

    // Take field
    pub fn take_ia_tenor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ia_tenor, ::std::string::String::new())
    }

    // string bucket_val = 16;


    pub fn get_bucket_val(&self) -> &str {
        &self.bucket_val
    }
    pub fn clear_bucket_val(&mut self) {
        self.bucket_val.clear();
    }

    // Param is passed by value, moved
    pub fn set_bucket_val(&mut self, v: ::std::string::String) {
        self.bucket_val = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bucket_val(&mut self) -> &mut ::std::string::String {
        &mut self.bucket_val
    }

    // Take field
    pub fn take_bucket_val(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bucket_val, ::std::string::String::new())
    }

    // string cat_val = 17;


    pub fn get_cat_val(&self) -> &str {
        &self.cat_val
    }
    pub fn clear_cat_val(&mut self) {
        self.cat_val.clear();
    }

    // Param is passed by value, moved
    pub fn set_cat_val(&mut self, v: ::std::string::String) {
        self.cat_val = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cat_val(&mut self) -> &mut ::std::string::String {
        &mut self.cat_val
    }

    // Take field
    pub fn take_cat_val(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cat_val, ::std::string::String::new())
    }

    // string cust_id = 18;


    pub fn get_cust_id(&self) -> &str {
        &self.cust_id
    }
    pub fn clear_cust_id(&mut self) {
        self.cust_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: ::std::string::String) {
        self.cust_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_id
    }

    // Take field
    pub fn take_cust_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_id, ::std::string::String::new())
    }

    // string wd_nwd_val = 19;


    pub fn get_wd_nwd_val(&self) -> &str {
        &self.wd_nwd_val
    }
    pub fn clear_wd_nwd_val(&mut self) {
        self.wd_nwd_val.clear();
    }

    // Param is passed by value, moved
    pub fn set_wd_nwd_val(&mut self, v: ::std::string::String) {
        self.wd_nwd_val = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_wd_nwd_val(&mut self) -> &mut ::std::string::String {
        &mut self.wd_nwd_val
    }

    // Take field
    pub fn take_wd_nwd_val(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.wd_nwd_val, ::std::string::String::new())
    }

    // string bal_lcy = 20;


    pub fn get_bal_lcy(&self) -> &str {
        &self.bal_lcy
    }
    pub fn clear_bal_lcy(&mut self) {
        self.bal_lcy.clear();
    }

    // Param is passed by value, moved
    pub fn set_bal_lcy(&mut self, v: ::std::string::String) {
        self.bal_lcy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bal_lcy(&mut self) -> &mut ::std::string::String {
        &mut self.bal_lcy
    }

    // Take field
    pub fn take_bal_lcy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bal_lcy, ::std::string::String::new())
    }

    // string int_comp = 21;


    pub fn get_int_comp(&self) -> &str {
        &self.int_comp
    }
    pub fn clear_int_comp(&mut self) {
        self.int_comp.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_comp(&mut self, v: ::std::string::String) {
        self.int_comp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_comp(&mut self) -> &mut ::std::string::String {
        &mut self.int_comp
    }

    // Take field
    pub fn take_int_comp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_comp, ::std::string::String::new())
    }

    // string rate = 22;


    pub fn get_rate(&self) -> &str {
        &self.rate
    }
    pub fn clear_rate(&mut self) {
        self.rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate(&mut self, v: ::std::string::String) {
        self.rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate(&mut self) -> &mut ::std::string::String {
        &mut self.rate
    }

    // Take field
    pub fn take_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate, ::std::string::String::new())
    }

    // string rate_var = 23;


    pub fn get_rate_var(&self) -> &str {
        &self.rate_var
    }
    pub fn clear_rate_var(&mut self) {
        self.rate_var.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_var(&mut self, v: ::std::string::String) {
        self.rate_var = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_var(&mut self) -> &mut ::std::string::String {
        &mut self.rate_var
    }

    // Take field
    pub fn take_rate_var(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_var, ::std::string::String::new())
    }

    // string rate_var2 = 24;


    pub fn get_rate_var2(&self) -> &str {
        &self.rate_var2
    }
    pub fn clear_rate_var2(&mut self) {
        self.rate_var2.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_var2(&mut self, v: ::std::string::String) {
        self.rate_var2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_var2(&mut self) -> &mut ::std::string::String {
        &mut self.rate_var2
    }

    // Take field
    pub fn take_rate_var2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_var2, ::std::string::String::new())
    }

    // string amt = 25;


    pub fn get_amt(&self) -> &str {
        &self.amt
    }
    pub fn clear_amt(&mut self) {
        self.amt.clear();
    }

    // Param is passed by value, moved
    pub fn set_amt(&mut self, v: ::std::string::String) {
        self.amt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amt(&mut self) -> &mut ::std::string::String {
        &mut self.amt
    }

    // Take field
    pub fn take_amt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amt, ::std::string::String::new())
    }

    // string yld = 26;


    pub fn get_yld(&self) -> &str {
        &self.yld
    }
    pub fn clear_yld(&mut self) {
        self.yld.clear();
    }

    // Param is passed by value, moved
    pub fn set_yld(&mut self, v: ::std::string::String) {
        self.yld = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_yld(&mut self) -> &mut ::std::string::String {
        &mut self.yld
    }

    // Take field
    pub fn take_yld(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.yld, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Account {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.as_on)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_no)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_code)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mis1)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_liab)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_int_comp)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.concat)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.div)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alm_line)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ia_line)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alco)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.org_tenor)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.res_tenor)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ia_tenor)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bucket_val)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cat_val)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_id)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.wd_nwd_val)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bal_lcy)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_comp)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_var)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_var2)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amt)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.yld)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.as_on.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.as_on);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.source);
        }
        if !self.acc_no.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.acc_no);
        }
        if !self.prod_code.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.prod_code);
        }
        if !self.mis1.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.mis1);
        }
        if !self.gl_liab.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.gl_liab);
        }
        if !self.gl_int_comp.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.gl_int_comp);
        }
        if !self.concat.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.concat);
        }
        if !self.div.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.div);
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.alm_line);
        }
        if !self.ia_line.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.ia_line);
        }
        if !self.alco.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.alco);
        }
        if !self.org_tenor.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.org_tenor);
        }
        if !self.res_tenor.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.res_tenor);
        }
        if !self.ia_tenor.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.ia_tenor);
        }
        if !self.bucket_val.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.bucket_val);
        }
        if !self.cat_val.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.cat_val);
        }
        if !self.cust_id.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.cust_id);
        }
        if !self.wd_nwd_val.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.wd_nwd_val);
        }
        if !self.bal_lcy.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.bal_lcy);
        }
        if !self.int_comp.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.int_comp);
        }
        if !self.rate.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.rate);
        }
        if !self.rate_var.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.rate_var);
        }
        if !self.rate_var2.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.rate_var2);
        }
        if !self.amt.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.amt);
        }
        if !self.yld.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.yld);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.as_on.is_empty() {
            os.write_string(1, &self.as_on)?;
        }
        if !self.source.is_empty() {
            os.write_string(2, &self.source)?;
        }
        if !self.acc_no.is_empty() {
            os.write_string(3, &self.acc_no)?;
        }
        if !self.prod_code.is_empty() {
            os.write_string(4, &self.prod_code)?;
        }
        if !self.mis1.is_empty() {
            os.write_string(5, &self.mis1)?;
        }
        if !self.gl_liab.is_empty() {
            os.write_string(6, &self.gl_liab)?;
        }
        if !self.gl_int_comp.is_empty() {
            os.write_string(7, &self.gl_int_comp)?;
        }
        if !self.concat.is_empty() {
            os.write_string(8, &self.concat)?;
        }
        if !self.div.is_empty() {
            os.write_string(9, &self.div)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(10, &self.alm_line)?;
        }
        if !self.ia_line.is_empty() {
            os.write_string(11, &self.ia_line)?;
        }
        if !self.alco.is_empty() {
            os.write_string(12, &self.alco)?;
        }
        if !self.org_tenor.is_empty() {
            os.write_string(13, &self.org_tenor)?;
        }
        if !self.res_tenor.is_empty() {
            os.write_string(14, &self.res_tenor)?;
        }
        if !self.ia_tenor.is_empty() {
            os.write_string(15, &self.ia_tenor)?;
        }
        if !self.bucket_val.is_empty() {
            os.write_string(16, &self.bucket_val)?;
        }
        if !self.cat_val.is_empty() {
            os.write_string(17, &self.cat_val)?;
        }
        if !self.cust_id.is_empty() {
            os.write_string(18, &self.cust_id)?;
        }
        if !self.wd_nwd_val.is_empty() {
            os.write_string(19, &self.wd_nwd_val)?;
        }
        if !self.bal_lcy.is_empty() {
            os.write_string(20, &self.bal_lcy)?;
        }
        if !self.int_comp.is_empty() {
            os.write_string(21, &self.int_comp)?;
        }
        if !self.rate.is_empty() {
            os.write_string(22, &self.rate)?;
        }
        if !self.rate_var.is_empty() {
            os.write_string(23, &self.rate_var)?;
        }
        if !self.rate_var2.is_empty() {
            os.write_string(24, &self.rate_var2)?;
        }
        if !self.amt.is_empty() {
            os.write_string(25, &self.amt)?;
        }
        if !self.yld.is_empty() {
            os.write_string(26, &self.yld)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Account {
        Account::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "as_on",
                |m: &Account| { &m.as_on },
                |m: &mut Account| { &mut m.as_on },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "source",
                |m: &Account| { &m.source },
                |m: &mut Account| { &mut m.source },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acc_no",
                |m: &Account| { &m.acc_no },
                |m: &mut Account| { &mut m.acc_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prod_code",
                |m: &Account| { &m.prod_code },
                |m: &mut Account| { &mut m.prod_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mis1",
                |m: &Account| { &m.mis1 },
                |m: &mut Account| { &mut m.mis1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_liab",
                |m: &Account| { &m.gl_liab },
                |m: &mut Account| { &mut m.gl_liab },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_int_comp",
                |m: &Account| { &m.gl_int_comp },
                |m: &mut Account| { &mut m.gl_int_comp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "concat",
                |m: &Account| { &m.concat },
                |m: &mut Account| { &mut m.concat },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "div",
                |m: &Account| { &m.div },
                |m: &mut Account| { &mut m.div },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "alm_line",
                |m: &Account| { &m.alm_line },
                |m: &mut Account| { &mut m.alm_line },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ia_line",
                |m: &Account| { &m.ia_line },
                |m: &mut Account| { &mut m.ia_line },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "alco",
                |m: &Account| { &m.alco },
                |m: &mut Account| { &mut m.alco },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "org_tenor",
                |m: &Account| { &m.org_tenor },
                |m: &mut Account| { &mut m.org_tenor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "res_tenor",
                |m: &Account| { &m.res_tenor },
                |m: &mut Account| { &mut m.res_tenor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ia_tenor",
                |m: &Account| { &m.ia_tenor },
                |m: &mut Account| { &mut m.ia_tenor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bucket_val",
                |m: &Account| { &m.bucket_val },
                |m: &mut Account| { &mut m.bucket_val },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cat_val",
                |m: &Account| { &m.cat_val },
                |m: &mut Account| { &mut m.cat_val },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_id",
                |m: &Account| { &m.cust_id },
                |m: &mut Account| { &mut m.cust_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "wd_nwd_val",
                |m: &Account| { &m.wd_nwd_val },
                |m: &mut Account| { &mut m.wd_nwd_val },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bal_lcy",
                |m: &Account| { &m.bal_lcy },
                |m: &mut Account| { &mut m.bal_lcy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_comp",
                |m: &Account| { &m.int_comp },
                |m: &mut Account| { &mut m.int_comp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rate",
                |m: &Account| { &m.rate },
                |m: &mut Account| { &mut m.rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rate_var",
                |m: &Account| { &m.rate_var },
                |m: &mut Account| { &mut m.rate_var },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rate_var2",
                |m: &Account| { &m.rate_var2 },
                |m: &mut Account| { &mut m.rate_var2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "amt",
                |m: &Account| { &m.amt },
                |m: &mut Account| { &mut m.amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "yld",
                |m: &Account| { &m.yld },
                |m: &mut Account| { &mut m.yld },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Account>(
                "Account",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Account {
        static instance: ::protobuf::rt::LazyV2<Account> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Account::new)
    }
}

impl ::protobuf::Clear for Account {
    fn clear(&mut self) {
        self.as_on.clear();
        self.source.clear();
        self.acc_no.clear();
        self.prod_code.clear();
        self.mis1.clear();
        self.gl_liab.clear();
        self.gl_int_comp.clear();
        self.concat.clear();
        self.div.clear();
        self.alm_line.clear();
        self.ia_line.clear();
        self.alco.clear();
        self.org_tenor.clear();
        self.res_tenor.clear();
        self.ia_tenor.clear();
        self.bucket_val.clear();
        self.cat_val.clear();
        self.cust_id.clear();
        self.wd_nwd_val.clear();
        self.bal_lcy.clear();
        self.int_comp.clear();
        self.rate.clear();
        self.rate_var.clear();
        self.rate_var2.clear();
        self.amt.clear();
        self.yld.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rgen_acc.proto\"\x91\x05\n\x07Account\x12\x13\n\x05as_on\x18\x01\x20\
    \x01(\tR\x04asOn\x12\x16\n\x06source\x18\x02\x20\x01(\tR\x06source\x12\
    \x15\n\x06acc_no\x18\x03\x20\x01(\tR\x05accNo\x12\x1b\n\tprod_code\x18\
    \x04\x20\x01(\tR\x08prodCode\x12\x12\n\x04mis1\x18\x05\x20\x01(\tR\x04mi\
    s1\x12\x17\n\x07gl_liab\x18\x06\x20\x01(\tR\x06glLiab\x12\x1e\n\x0bgl_in\
    t_comp\x18\x07\x20\x01(\tR\tglIntComp\x12\x16\n\x06concat\x18\x08\x20\
    \x01(\tR\x06concat\x12\x10\n\x03div\x18\t\x20\x01(\tR\x03div\x12\x19\n\
    \x08alm_line\x18\n\x20\x01(\tR\x07almLine\x12\x17\n\x07ia_line\x18\x0b\
    \x20\x01(\tR\x06iaLine\x12\x12\n\x04alco\x18\x0c\x20\x01(\tR\x04alco\x12\
    \x1b\n\torg_tenor\x18\r\x20\x01(\tR\x08orgTenor\x12\x1b\n\tres_tenor\x18\
    \x0e\x20\x01(\tR\x08resTenor\x12\x19\n\x08ia_tenor\x18\x0f\x20\x01(\tR\
    \x07iaTenor\x12\x1d\n\nbucket_val\x18\x10\x20\x01(\tR\tbucketVal\x12\x17\
    \n\x07cat_val\x18\x11\x20\x01(\tR\x06catVal\x12\x17\n\x07cust_id\x18\x12\
    \x20\x01(\tR\x06custId\x12\x1c\n\nwd_nwd_val\x18\x13\x20\x01(\tR\x08wdNw\
    dVal\x12\x17\n\x07bal_lcy\x18\x14\x20\x01(\tR\x06balLcy\x12\x19\n\x08int\
    _comp\x18\x15\x20\x01(\tR\x07intComp\x12\x12\n\x04rate\x18\x16\x20\x01(\
    \tR\x04rate\x12\x19\n\x08rate_var\x18\x17\x20\x01(\tR\x07rateVar\x12\x1b\
    \n\trate_var2\x18\x18\x20\x01(\tR\x08rateVar2\x12\x10\n\x03amt\x18\x19\
    \x20\x01(\tR\x03amt\x12\x10\n\x03yld\x18\x1a\x20\x01(\tR\x03yldb\x06prot\
    o3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
