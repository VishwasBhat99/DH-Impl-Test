// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_amt",
                |m: &Cashflow| { &m.int_amt },
                |m: &mut Cashflow| { &mut m.int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "prin_amt",
                |m: &Cashflow| { &m.prin_amt },
                |m: &mut Cashflow| { &mut m.prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub tranche_desc: ::std::string::String,
    pub date_of_modification: i64,
    pub deposit: f64,
    pub rate_of_interest: f64,
    pub due_date: i64,
    pub repaid_on: ::std::string::String,
    pub repay_amt: f64,
    pub os_bal: f64,
    pub tr_dt: i64,
    pub tr_type: ::std::string::String,
    pub cmuser: ::std::string::String,
    pub cmdate: i64,
    pub vuser: ::std::string::String,
    pub vdate: i64,
    pub curr: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string tranche_desc = 1;


    pub fn get_tranche_desc(&self) -> &str {
        &self.tranche_desc
    }
    pub fn clear_tranche_desc(&mut self) {
        self.tranche_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_tranche_desc(&mut self, v: ::std::string::String) {
        self.tranche_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tranche_desc(&mut self) -> &mut ::std::string::String {
        &mut self.tranche_desc
    }

    // Take field
    pub fn take_tranche_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tranche_desc, ::std::string::String::new())
    }

    // int64 date_of_modification = 2;


    pub fn get_date_of_modification(&self) -> i64 {
        self.date_of_modification
    }
    pub fn clear_date_of_modification(&mut self) {
        self.date_of_modification = 0;
    }

    // Param is passed by value, moved
    pub fn set_date_of_modification(&mut self, v: i64) {
        self.date_of_modification = v;
    }

    // double deposit = 3;


    pub fn get_deposit(&self) -> f64 {
        self.deposit
    }
    pub fn clear_deposit(&mut self) {
        self.deposit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_deposit(&mut self, v: f64) {
        self.deposit = v;
    }

    // double rate_of_interest = 4;


    pub fn get_rate_of_interest(&self) -> f64 {
        self.rate_of_interest
    }
    pub fn clear_rate_of_interest(&mut self) {
        self.rate_of_interest = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rate_of_interest(&mut self, v: f64) {
        self.rate_of_interest = v;
    }

    // int64 due_date = 5;


    pub fn get_due_date(&self) -> i64 {
        self.due_date
    }
    pub fn clear_due_date(&mut self) {
        self.due_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_due_date(&mut self, v: i64) {
        self.due_date = v;
    }

    // string repaid_on = 6;


    pub fn get_repaid_on(&self) -> &str {
        &self.repaid_on
    }
    pub fn clear_repaid_on(&mut self) {
        self.repaid_on.clear();
    }

    // Param is passed by value, moved
    pub fn set_repaid_on(&mut self, v: ::std::string::String) {
        self.repaid_on = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repaid_on(&mut self) -> &mut ::std::string::String {
        &mut self.repaid_on
    }

    // Take field
    pub fn take_repaid_on(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.repaid_on, ::std::string::String::new())
    }

    // double repay_amt = 7;


    pub fn get_repay_amt(&self) -> f64 {
        self.repay_amt
    }
    pub fn clear_repay_amt(&mut self) {
        self.repay_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_repay_amt(&mut self, v: f64) {
        self.repay_amt = v;
    }

    // double os_bal = 8;


    pub fn get_os_bal(&self) -> f64 {
        self.os_bal
    }
    pub fn clear_os_bal(&mut self) {
        self.os_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_os_bal(&mut self, v: f64) {
        self.os_bal = v;
    }

    // int64 tr_dt = 9;


    pub fn get_tr_dt(&self) -> i64 {
        self.tr_dt
    }
    pub fn clear_tr_dt(&mut self) {
        self.tr_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_tr_dt(&mut self, v: i64) {
        self.tr_dt = v;
    }

    // string tr_type = 10;


    pub fn get_tr_type(&self) -> &str {
        &self.tr_type
    }
    pub fn clear_tr_type(&mut self) {
        self.tr_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_tr_type(&mut self, v: ::std::string::String) {
        self.tr_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tr_type(&mut self) -> &mut ::std::string::String {
        &mut self.tr_type
    }

    // Take field
    pub fn take_tr_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tr_type, ::std::string::String::new())
    }

    // string cmuser = 11;


    pub fn get_cmuser(&self) -> &str {
        &self.cmuser
    }
    pub fn clear_cmuser(&mut self) {
        self.cmuser.clear();
    }

    // Param is passed by value, moved
    pub fn set_cmuser(&mut self, v: ::std::string::String) {
        self.cmuser = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cmuser(&mut self) -> &mut ::std::string::String {
        &mut self.cmuser
    }

    // Take field
    pub fn take_cmuser(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cmuser, ::std::string::String::new())
    }

    // int64 cmdate = 12;


    pub fn get_cmdate(&self) -> i64 {
        self.cmdate
    }
    pub fn clear_cmdate(&mut self) {
        self.cmdate = 0;
    }

    // Param is passed by value, moved
    pub fn set_cmdate(&mut self, v: i64) {
        self.cmdate = v;
    }

    // string vuser = 13;


    pub fn get_vuser(&self) -> &str {
        &self.vuser
    }
    pub fn clear_vuser(&mut self) {
        self.vuser.clear();
    }

    // Param is passed by value, moved
    pub fn set_vuser(&mut self, v: ::std::string::String) {
        self.vuser = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vuser(&mut self) -> &mut ::std::string::String {
        &mut self.vuser
    }

    // Take field
    pub fn take_vuser(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.vuser, ::std::string::String::new())
    }

    // int64 vdate = 14;


    pub fn get_vdate(&self) -> i64 {
        self.vdate
    }
    pub fn clear_vdate(&mut self) {
        self.vdate = 0;
    }

    // Param is passed by value, moved
    pub fn set_vdate(&mut self, v: i64) {
        self.vdate = v;
    }

    // string curr = 15;


    pub fn get_curr(&self) -> &str {
        &self.curr
    }
    pub fn clear_curr(&mut self) {
        self.curr.clear();
    }

    // Param is passed by value, moved
    pub fn set_curr(&mut self, v: ::std::string::String) {
        self.curr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_curr(&mut self) -> &mut ::std::string::String {
        &mut self.curr
    }

    // Take field
    pub fn take_curr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.curr, ::std::string::String::new())
    }

    // repeated .Cashflow cashflows = 16;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tranche_desc)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date_of_modification = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.deposit = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rate_of_interest = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.due_date = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.repaid_on)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.repay_amt = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.os_bal = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tr_dt = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tr_type)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cmuser)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cmdate = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.vuser)?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.vdate = tmp;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.curr)?;
                },
                16 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.tranche_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tranche_desc);
        }
        if self.date_of_modification != 0 {
            my_size += ::protobuf::rt::value_size(2, self.date_of_modification, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.deposit != 0. {
            my_size += 9;
        }
        if self.rate_of_interest != 0. {
            my_size += 9;
        }
        if self.due_date != 0 {
            my_size += ::protobuf::rt::value_size(5, self.due_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.repaid_on.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.repaid_on);
        }
        if self.repay_amt != 0. {
            my_size += 9;
        }
        if self.os_bal != 0. {
            my_size += 9;
        }
        if self.tr_dt != 0 {
            my_size += ::protobuf::rt::value_size(9, self.tr_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.tr_type.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.tr_type);
        }
        if !self.cmuser.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.cmuser);
        }
        if self.cmdate != 0 {
            my_size += ::protobuf::rt::value_size(12, self.cmdate, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.vuser.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.vuser);
        }
        if self.vdate != 0 {
            my_size += ::protobuf::rt::value_size(14, self.vdate, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.curr.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.curr);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.tranche_desc.is_empty() {
            os.write_string(1, &self.tranche_desc)?;
        }
        if self.date_of_modification != 0 {
            os.write_int64(2, self.date_of_modification)?;
        }
        if self.deposit != 0. {
            os.write_double(3, self.deposit)?;
        }
        if self.rate_of_interest != 0. {
            os.write_double(4, self.rate_of_interest)?;
        }
        if self.due_date != 0 {
            os.write_int64(5, self.due_date)?;
        }
        if !self.repaid_on.is_empty() {
            os.write_string(6, &self.repaid_on)?;
        }
        if self.repay_amt != 0. {
            os.write_double(7, self.repay_amt)?;
        }
        if self.os_bal != 0. {
            os.write_double(8, self.os_bal)?;
        }
        if self.tr_dt != 0 {
            os.write_int64(9, self.tr_dt)?;
        }
        if !self.tr_type.is_empty() {
            os.write_string(10, &self.tr_type)?;
        }
        if !self.cmuser.is_empty() {
            os.write_string(11, &self.cmuser)?;
        }
        if self.cmdate != 0 {
            os.write_int64(12, self.cmdate)?;
        }
        if !self.vuser.is_empty() {
            os.write_string(13, &self.vuser)?;
        }
        if self.vdate != 0 {
            os.write_int64(14, self.vdate)?;
        }
        if !self.curr.is_empty() {
            os.write_string(15, &self.curr)?;
        }
        for v in &self.cashflows {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tranche_desc",
                |m: &AccountWithCashflows| { &m.tranche_desc },
                |m: &mut AccountWithCashflows| { &mut m.tranche_desc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date_of_modification",
                |m: &AccountWithCashflows| { &m.date_of_modification },
                |m: &mut AccountWithCashflows| { &mut m.date_of_modification },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "deposit",
                |m: &AccountWithCashflows| { &m.deposit },
                |m: &mut AccountWithCashflows| { &mut m.deposit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "rate_of_interest",
                |m: &AccountWithCashflows| { &m.rate_of_interest },
                |m: &mut AccountWithCashflows| { &mut m.rate_of_interest },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "due_date",
                |m: &AccountWithCashflows| { &m.due_date },
                |m: &mut AccountWithCashflows| { &mut m.due_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "repaid_on",
                |m: &AccountWithCashflows| { &m.repaid_on },
                |m: &mut AccountWithCashflows| { &mut m.repaid_on },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "repay_amt",
                |m: &AccountWithCashflows| { &m.repay_amt },
                |m: &mut AccountWithCashflows| { &mut m.repay_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "os_bal",
                |m: &AccountWithCashflows| { &m.os_bal },
                |m: &mut AccountWithCashflows| { &mut m.os_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "tr_dt",
                |m: &AccountWithCashflows| { &m.tr_dt },
                |m: &mut AccountWithCashflows| { &mut m.tr_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tr_type",
                |m: &AccountWithCashflows| { &m.tr_type },
                |m: &mut AccountWithCashflows| { &mut m.tr_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cmuser",
                |m: &AccountWithCashflows| { &m.cmuser },
                |m: &mut AccountWithCashflows| { &mut m.cmuser },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cmdate",
                |m: &AccountWithCashflows| { &m.cmdate },
                |m: &mut AccountWithCashflows| { &mut m.cmdate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "vuser",
                |m: &AccountWithCashflows| { &m.vuser },
                |m: &mut AccountWithCashflows| { &mut m.vuser },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "vdate",
                |m: &AccountWithCashflows| { &m.vdate },
                |m: &mut AccountWithCashflows| { &mut m.vdate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "curr",
                |m: &AccountWithCashflows| { &m.curr },
                |m: &mut AccountWithCashflows| { &mut m.curr },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.tranche_desc.clear();
        self.date_of_modification = 0;
        self.deposit = 0.;
        self.rate_of_interest = 0.;
        self.due_date = 0;
        self.repaid_on.clear();
        self.repay_amt = 0.;
        self.os_bal = 0.;
        self.tr_dt = 0;
        self.tr_type.clear();
        self.cmuser.clear();
        self.cmdate = 0;
        self.vuser.clear();
        self.vdate = 0;
        self.curr.clear();
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\
    \x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prin\
    Amt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xe2\x03\n\x14Accou\
    ntWithCashflows\x12!\n\x0ctranche_desc\x18\x01\x20\x01(\tR\x0btrancheDes\
    c\x120\n\x14date_of_modification\x18\x02\x20\x01(\x03R\x12dateOfModifica\
    tion\x12\x18\n\x07deposit\x18\x03\x20\x01(\x01R\x07deposit\x12(\n\x10rat\
    e_of_interest\x18\x04\x20\x01(\x01R\x0erateOfInterest\x12\x19\n\x08due_d\
    ate\x18\x05\x20\x01(\x03R\x07dueDate\x12\x1b\n\trepaid_on\x18\x06\x20\
    \x01(\tR\x08repaidOn\x12\x1b\n\trepay_amt\x18\x07\x20\x01(\x01R\x08repay\
    Amt\x12\x15\n\x06os_bal\x18\x08\x20\x01(\x01R\x05osBal\x12\x13\n\x05tr_d\
    t\x18\t\x20\x01(\x03R\x04trDt\x12\x17\n\x07tr_type\x18\n\x20\x01(\tR\x06\
    trType\x12\x16\n\x06cmuser\x18\x0b\x20\x01(\tR\x06cmuser\x12\x16\n\x06cm\
    date\x18\x0c\x20\x01(\x03R\x06cmdate\x12\x14\n\x05vuser\x18\r\x20\x01(\t\
    R\x05vuser\x12\x14\n\x05vdate\x18\x0e\x20\x01(\x03R\x05vdate\x12\x12\n\
    \x04curr\x18\x0f\x20\x01(\tR\x04curr\x12'\n\tcashflows\x18\x10\x20\x03(\
    \x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
