// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub entity: ::std::string::String,
    pub trade_id: ::std::string::String,
    pub contract_id: f64,
    pub folder: ::std::string::String,
    pub trading_banking: ::std::string::String,
    pub intrnl_extrnl: ::std::string::String,
    pub cntr_prty_name: ::std::string::String,
    pub trade_dt: i64,
    pub st_dt: i64,
    pub deal_ccy: ::std::string::String,
    pub org_notional: f64,
    pub pay_int_rt: f64,
    pub rec_int_rt: f64,
    pub exchng_rt: f64,
    pub pay_reset_dt: i64,
    pub rec_reset_dt: i64,
    pub pay_payment_dt: i64,
    pub rec_payment_dt: i64,
    pub pay_payment_freq: ::std::string::String,
    pub rec_payment_freq: ::std::string::String,
    pub deal_stats: ::std::string::String,
    pub inp_id: ::std::string::String,
    pub trade_bank: ::std::string::String,
    pub m_bank: ::std::string::String,
    pub flow_typ: ::std::string::String,
    pub flow_typ1: ::std::string::String,
    pub flow_typ2: ::std::string::String,
    pub flow_typ3: ::std::string::String,
    pub flow_typ4: ::std::string::String,
    pub flow_amt: f64,
    pub cf_dt: i64,
    pub flow_ccy: ::std::string::String,
    pub hkd_rt: f64,
    pub hkd_amt: f64,
    pub m_h_rep_dt2: i64,
    pub inr_amt: f64,
    pub inr_rt: f64,
    pub int_rt: f64,
    pub tot_int_amt: f64,
    pub tot_prin_amt: f64,
    pub contract_typology: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string entity = 1;


    pub fn get_entity(&self) -> &str {
        &self.entity
    }
    pub fn clear_entity(&mut self) {
        self.entity.clear();
    }

    // Param is passed by value, moved
    pub fn set_entity(&mut self, v: ::std::string::String) {
        self.entity = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entity(&mut self) -> &mut ::std::string::String {
        &mut self.entity
    }

    // Take field
    pub fn take_entity(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.entity, ::std::string::String::new())
    }

    // string trade_id = 2;


    pub fn get_trade_id(&self) -> &str {
        &self.trade_id
    }
    pub fn clear_trade_id(&mut self) {
        self.trade_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_trade_id(&mut self, v: ::std::string::String) {
        self.trade_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trade_id(&mut self) -> &mut ::std::string::String {
        &mut self.trade_id
    }

    // Take field
    pub fn take_trade_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trade_id, ::std::string::String::new())
    }

    // double contract_id = 3;


    pub fn get_contract_id(&self) -> f64 {
        self.contract_id
    }
    pub fn clear_contract_id(&mut self) {
        self.contract_id = 0.;
    }

    // Param is passed by value, moved
    pub fn set_contract_id(&mut self, v: f64) {
        self.contract_id = v;
    }

    // string folder = 4;


    pub fn get_folder(&self) -> &str {
        &self.folder
    }
    pub fn clear_folder(&mut self) {
        self.folder.clear();
    }

    // Param is passed by value, moved
    pub fn set_folder(&mut self, v: ::std::string::String) {
        self.folder = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_folder(&mut self) -> &mut ::std::string::String {
        &mut self.folder
    }

    // Take field
    pub fn take_folder(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.folder, ::std::string::String::new())
    }

    // string trading_banking = 5;


    pub fn get_trading_banking(&self) -> &str {
        &self.trading_banking
    }
    pub fn clear_trading_banking(&mut self) {
        self.trading_banking.clear();
    }

    // Param is passed by value, moved
    pub fn set_trading_banking(&mut self, v: ::std::string::String) {
        self.trading_banking = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trading_banking(&mut self) -> &mut ::std::string::String {
        &mut self.trading_banking
    }

    // Take field
    pub fn take_trading_banking(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trading_banking, ::std::string::String::new())
    }

    // string intrnl_extrnl = 6;


    pub fn get_intrnl_extrnl(&self) -> &str {
        &self.intrnl_extrnl
    }
    pub fn clear_intrnl_extrnl(&mut self) {
        self.intrnl_extrnl.clear();
    }

    // Param is passed by value, moved
    pub fn set_intrnl_extrnl(&mut self, v: ::std::string::String) {
        self.intrnl_extrnl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_intrnl_extrnl(&mut self) -> &mut ::std::string::String {
        &mut self.intrnl_extrnl
    }

    // Take field
    pub fn take_intrnl_extrnl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.intrnl_extrnl, ::std::string::String::new())
    }

    // string cntr_prty_name = 7;


    pub fn get_cntr_prty_name(&self) -> &str {
        &self.cntr_prty_name
    }
    pub fn clear_cntr_prty_name(&mut self) {
        self.cntr_prty_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cntr_prty_name(&mut self, v: ::std::string::String) {
        self.cntr_prty_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cntr_prty_name(&mut self) -> &mut ::std::string::String {
        &mut self.cntr_prty_name
    }

    // Take field
    pub fn take_cntr_prty_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cntr_prty_name, ::std::string::String::new())
    }

    // int64 trade_dt = 8;


    pub fn get_trade_dt(&self) -> i64 {
        self.trade_dt
    }
    pub fn clear_trade_dt(&mut self) {
        self.trade_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_trade_dt(&mut self, v: i64) {
        self.trade_dt = v;
    }

    // int64 st_dt = 9;


    pub fn get_st_dt(&self) -> i64 {
        self.st_dt
    }
    pub fn clear_st_dt(&mut self) {
        self.st_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_st_dt(&mut self, v: i64) {
        self.st_dt = v;
    }

    // string deal_ccy = 10;


    pub fn get_deal_ccy(&self) -> &str {
        &self.deal_ccy
    }
    pub fn clear_deal_ccy(&mut self) {
        self.deal_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_ccy(&mut self, v: ::std::string::String) {
        self.deal_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.deal_ccy
    }

    // Take field
    pub fn take_deal_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_ccy, ::std::string::String::new())
    }

    // double org_notional = 11;


    pub fn get_org_notional(&self) -> f64 {
        self.org_notional
    }
    pub fn clear_org_notional(&mut self) {
        self.org_notional = 0.;
    }

    // Param is passed by value, moved
    pub fn set_org_notional(&mut self, v: f64) {
        self.org_notional = v;
    }

    // double pay_int_rt = 12;


    pub fn get_pay_int_rt(&self) -> f64 {
        self.pay_int_rt
    }
    pub fn clear_pay_int_rt(&mut self) {
        self.pay_int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pay_int_rt(&mut self, v: f64) {
        self.pay_int_rt = v;
    }

    // double rec_int_rt = 13;


    pub fn get_rec_int_rt(&self) -> f64 {
        self.rec_int_rt
    }
    pub fn clear_rec_int_rt(&mut self) {
        self.rec_int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rec_int_rt(&mut self, v: f64) {
        self.rec_int_rt = v;
    }

    // double exchng_rt = 14;


    pub fn get_exchng_rt(&self) -> f64 {
        self.exchng_rt
    }
    pub fn clear_exchng_rt(&mut self) {
        self.exchng_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_exchng_rt(&mut self, v: f64) {
        self.exchng_rt = v;
    }

    // int64 pay_reset_dt = 15;


    pub fn get_pay_reset_dt(&self) -> i64 {
        self.pay_reset_dt
    }
    pub fn clear_pay_reset_dt(&mut self) {
        self.pay_reset_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_pay_reset_dt(&mut self, v: i64) {
        self.pay_reset_dt = v;
    }

    // int64 rec_reset_dt = 16;


    pub fn get_rec_reset_dt(&self) -> i64 {
        self.rec_reset_dt
    }
    pub fn clear_rec_reset_dt(&mut self) {
        self.rec_reset_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_rec_reset_dt(&mut self, v: i64) {
        self.rec_reset_dt = v;
    }

    // int64 pay_payment_dt = 17;


    pub fn get_pay_payment_dt(&self) -> i64 {
        self.pay_payment_dt
    }
    pub fn clear_pay_payment_dt(&mut self) {
        self.pay_payment_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_pay_payment_dt(&mut self, v: i64) {
        self.pay_payment_dt = v;
    }

    // int64 rec_payment_dt = 18;


    pub fn get_rec_payment_dt(&self) -> i64 {
        self.rec_payment_dt
    }
    pub fn clear_rec_payment_dt(&mut self) {
        self.rec_payment_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_rec_payment_dt(&mut self, v: i64) {
        self.rec_payment_dt = v;
    }

    // string pay_payment_freq = 19;


    pub fn get_pay_payment_freq(&self) -> &str {
        &self.pay_payment_freq
    }
    pub fn clear_pay_payment_freq(&mut self) {
        self.pay_payment_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_pay_payment_freq(&mut self, v: ::std::string::String) {
        self.pay_payment_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pay_payment_freq(&mut self) -> &mut ::std::string::String {
        &mut self.pay_payment_freq
    }

    // Take field
    pub fn take_pay_payment_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pay_payment_freq, ::std::string::String::new())
    }

    // string rec_payment_freq = 20;


    pub fn get_rec_payment_freq(&self) -> &str {
        &self.rec_payment_freq
    }
    pub fn clear_rec_payment_freq(&mut self) {
        self.rec_payment_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_rec_payment_freq(&mut self, v: ::std::string::String) {
        self.rec_payment_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rec_payment_freq(&mut self) -> &mut ::std::string::String {
        &mut self.rec_payment_freq
    }

    // Take field
    pub fn take_rec_payment_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rec_payment_freq, ::std::string::String::new())
    }

    // string deal_stats = 21;


    pub fn get_deal_stats(&self) -> &str {
        &self.deal_stats
    }
    pub fn clear_deal_stats(&mut self) {
        self.deal_stats.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_stats(&mut self, v: ::std::string::String) {
        self.deal_stats = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_stats(&mut self) -> &mut ::std::string::String {
        &mut self.deal_stats
    }

    // Take field
    pub fn take_deal_stats(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_stats, ::std::string::String::new())
    }

    // string inp_id = 22;


    pub fn get_inp_id(&self) -> &str {
        &self.inp_id
    }
    pub fn clear_inp_id(&mut self) {
        self.inp_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_inp_id(&mut self, v: ::std::string::String) {
        self.inp_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inp_id(&mut self) -> &mut ::std::string::String {
        &mut self.inp_id
    }

    // Take field
    pub fn take_inp_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.inp_id, ::std::string::String::new())
    }

    // string trade_bank = 23;


    pub fn get_trade_bank(&self) -> &str {
        &self.trade_bank
    }
    pub fn clear_trade_bank(&mut self) {
        self.trade_bank.clear();
    }

    // Param is passed by value, moved
    pub fn set_trade_bank(&mut self, v: ::std::string::String) {
        self.trade_bank = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trade_bank(&mut self) -> &mut ::std::string::String {
        &mut self.trade_bank
    }

    // Take field
    pub fn take_trade_bank(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trade_bank, ::std::string::String::new())
    }

    // string m_bank = 24;


    pub fn get_m_bank(&self) -> &str {
        &self.m_bank
    }
    pub fn clear_m_bank(&mut self) {
        self.m_bank.clear();
    }

    // Param is passed by value, moved
    pub fn set_m_bank(&mut self, v: ::std::string::String) {
        self.m_bank = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_m_bank(&mut self) -> &mut ::std::string::String {
        &mut self.m_bank
    }

    // Take field
    pub fn take_m_bank(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.m_bank, ::std::string::String::new())
    }

    // string flow_typ = 25;


    pub fn get_flow_typ(&self) -> &str {
        &self.flow_typ
    }
    pub fn clear_flow_typ(&mut self) {
        self.flow_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_flow_typ(&mut self, v: ::std::string::String) {
        self.flow_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flow_typ(&mut self) -> &mut ::std::string::String {
        &mut self.flow_typ
    }

    // Take field
    pub fn take_flow_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flow_typ, ::std::string::String::new())
    }

    // string flow_typ1 = 26;


    pub fn get_flow_typ1(&self) -> &str {
        &self.flow_typ1
    }
    pub fn clear_flow_typ1(&mut self) {
        self.flow_typ1.clear();
    }

    // Param is passed by value, moved
    pub fn set_flow_typ1(&mut self, v: ::std::string::String) {
        self.flow_typ1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flow_typ1(&mut self) -> &mut ::std::string::String {
        &mut self.flow_typ1
    }

    // Take field
    pub fn take_flow_typ1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flow_typ1, ::std::string::String::new())
    }

    // string flow_typ2 = 27;


    pub fn get_flow_typ2(&self) -> &str {
        &self.flow_typ2
    }
    pub fn clear_flow_typ2(&mut self) {
        self.flow_typ2.clear();
    }

    // Param is passed by value, moved
    pub fn set_flow_typ2(&mut self, v: ::std::string::String) {
        self.flow_typ2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flow_typ2(&mut self) -> &mut ::std::string::String {
        &mut self.flow_typ2
    }

    // Take field
    pub fn take_flow_typ2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flow_typ2, ::std::string::String::new())
    }

    // string flow_typ3 = 28;


    pub fn get_flow_typ3(&self) -> &str {
        &self.flow_typ3
    }
    pub fn clear_flow_typ3(&mut self) {
        self.flow_typ3.clear();
    }

    // Param is passed by value, moved
    pub fn set_flow_typ3(&mut self, v: ::std::string::String) {
        self.flow_typ3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flow_typ3(&mut self) -> &mut ::std::string::String {
        &mut self.flow_typ3
    }

    // Take field
    pub fn take_flow_typ3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flow_typ3, ::std::string::String::new())
    }

    // string flow_typ4 = 29;


    pub fn get_flow_typ4(&self) -> &str {
        &self.flow_typ4
    }
    pub fn clear_flow_typ4(&mut self) {
        self.flow_typ4.clear();
    }

    // Param is passed by value, moved
    pub fn set_flow_typ4(&mut self, v: ::std::string::String) {
        self.flow_typ4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flow_typ4(&mut self) -> &mut ::std::string::String {
        &mut self.flow_typ4
    }

    // Take field
    pub fn take_flow_typ4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flow_typ4, ::std::string::String::new())
    }

    // double flow_amt = 30;


    pub fn get_flow_amt(&self) -> f64 {
        self.flow_amt
    }
    pub fn clear_flow_amt(&mut self) {
        self.flow_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_flow_amt(&mut self, v: f64) {
        self.flow_amt = v;
    }

    // int64 cf_dt = 31;


    pub fn get_cf_dt(&self) -> i64 {
        self.cf_dt
    }
    pub fn clear_cf_dt(&mut self) {
        self.cf_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_cf_dt(&mut self, v: i64) {
        self.cf_dt = v;
    }

    // string flow_ccy = 32;


    pub fn get_flow_ccy(&self) -> &str {
        &self.flow_ccy
    }
    pub fn clear_flow_ccy(&mut self) {
        self.flow_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_flow_ccy(&mut self, v: ::std::string::String) {
        self.flow_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flow_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.flow_ccy
    }

    // Take field
    pub fn take_flow_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flow_ccy, ::std::string::String::new())
    }

    // double hkd_rt = 33;


    pub fn get_hkd_rt(&self) -> f64 {
        self.hkd_rt
    }
    pub fn clear_hkd_rt(&mut self) {
        self.hkd_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_hkd_rt(&mut self, v: f64) {
        self.hkd_rt = v;
    }

    // double hkd_amt = 34;


    pub fn get_hkd_amt(&self) -> f64 {
        self.hkd_amt
    }
    pub fn clear_hkd_amt(&mut self) {
        self.hkd_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_hkd_amt(&mut self, v: f64) {
        self.hkd_amt = v;
    }

    // int64 m_h_rep_dt2 = 35;


    pub fn get_m_h_rep_dt2(&self) -> i64 {
        self.m_h_rep_dt2
    }
    pub fn clear_m_h_rep_dt2(&mut self) {
        self.m_h_rep_dt2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_m_h_rep_dt2(&mut self, v: i64) {
        self.m_h_rep_dt2 = v;
    }

    // double inr_amt = 36;


    pub fn get_inr_amt(&self) -> f64 {
        self.inr_amt
    }
    pub fn clear_inr_amt(&mut self) {
        self.inr_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_inr_amt(&mut self, v: f64) {
        self.inr_amt = v;
    }

    // double inr_rt = 37;


    pub fn get_inr_rt(&self) -> f64 {
        self.inr_rt
    }
    pub fn clear_inr_rt(&mut self) {
        self.inr_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_inr_rt(&mut self, v: f64) {
        self.inr_rt = v;
    }

    // double int_rt = 38;


    pub fn get_int_rt(&self) -> f64 {
        self.int_rt
    }
    pub fn clear_int_rt(&mut self) {
        self.int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rt(&mut self, v: f64) {
        self.int_rt = v;
    }

    // double tot_int_amt = 39;


    pub fn get_tot_int_amt(&self) -> f64 {
        self.tot_int_amt
    }
    pub fn clear_tot_int_amt(&mut self) {
        self.tot_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_int_amt(&mut self, v: f64) {
        self.tot_int_amt = v;
    }

    // double tot_prin_amt = 40;


    pub fn get_tot_prin_amt(&self) -> f64 {
        self.tot_prin_amt
    }
    pub fn clear_tot_prin_amt(&mut self) {
        self.tot_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_prin_amt(&mut self, v: f64) {
        self.tot_prin_amt = v;
    }

    // string contract_typology = 41;


    pub fn get_contract_typology(&self) -> &str {
        &self.contract_typology
    }
    pub fn clear_contract_typology(&mut self) {
        self.contract_typology.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_typology(&mut self, v: ::std::string::String) {
        self.contract_typology = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_typology(&mut self) -> &mut ::std::string::String {
        &mut self.contract_typology
    }

    // Take field
    pub fn take_contract_typology(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_typology, ::std::string::String::new())
    }

    // repeated .Cashflow cashflows = 42;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.entity)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trade_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.contract_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.folder)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trading_banking)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.intrnl_extrnl)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cntr_prty_name)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.trade_dt = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.st_dt = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_ccy)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.org_notional = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pay_int_rt = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rec_int_rt = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.exchng_rt = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pay_reset_dt = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rec_reset_dt = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pay_payment_dt = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rec_payment_dt = tmp;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pay_payment_freq)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rec_payment_freq)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_stats)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.inp_id)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trade_bank)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.m_bank)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flow_typ)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flow_typ1)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flow_typ2)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flow_typ3)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flow_typ4)?;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.flow_amt = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cf_dt = tmp;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flow_ccy)?;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.hkd_rt = tmp;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.hkd_amt = tmp;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.m_h_rep_dt2 = tmp;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.inr_amt = tmp;
                },
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.inr_rt = tmp;
                },
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rt = tmp;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_int_amt = tmp;
                },
                40 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_prin_amt = tmp;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_typology)?;
                },
                42 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.entity.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.entity);
        }
        if !self.trade_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.trade_id);
        }
        if self.contract_id != 0. {
            my_size += 9;
        }
        if !self.folder.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.folder);
        }
        if !self.trading_banking.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.trading_banking);
        }
        if !self.intrnl_extrnl.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.intrnl_extrnl);
        }
        if !self.cntr_prty_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.cntr_prty_name);
        }
        if self.trade_dt != 0 {
            my_size += ::protobuf::rt::value_size(8, self.trade_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.st_dt != 0 {
            my_size += ::protobuf::rt::value_size(9, self.st_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.deal_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.deal_ccy);
        }
        if self.org_notional != 0. {
            my_size += 9;
        }
        if self.pay_int_rt != 0. {
            my_size += 9;
        }
        if self.rec_int_rt != 0. {
            my_size += 9;
        }
        if self.exchng_rt != 0. {
            my_size += 9;
        }
        if self.pay_reset_dt != 0 {
            my_size += ::protobuf::rt::value_size(15, self.pay_reset_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rec_reset_dt != 0 {
            my_size += ::protobuf::rt::value_size(16, self.rec_reset_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pay_payment_dt != 0 {
            my_size += ::protobuf::rt::value_size(17, self.pay_payment_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rec_payment_dt != 0 {
            my_size += ::protobuf::rt::value_size(18, self.rec_payment_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.pay_payment_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.pay_payment_freq);
        }
        if !self.rec_payment_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.rec_payment_freq);
        }
        if !self.deal_stats.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.deal_stats);
        }
        if !self.inp_id.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.inp_id);
        }
        if !self.trade_bank.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.trade_bank);
        }
        if !self.m_bank.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.m_bank);
        }
        if !self.flow_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.flow_typ);
        }
        if !self.flow_typ1.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.flow_typ1);
        }
        if !self.flow_typ2.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.flow_typ2);
        }
        if !self.flow_typ3.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.flow_typ3);
        }
        if !self.flow_typ4.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.flow_typ4);
        }
        if self.flow_amt != 0. {
            my_size += 10;
        }
        if self.cf_dt != 0 {
            my_size += ::protobuf::rt::value_size(31, self.cf_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.flow_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.flow_ccy);
        }
        if self.hkd_rt != 0. {
            my_size += 10;
        }
        if self.hkd_amt != 0. {
            my_size += 10;
        }
        if self.m_h_rep_dt2 != 0 {
            my_size += ::protobuf::rt::value_size(35, self.m_h_rep_dt2, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.inr_amt != 0. {
            my_size += 10;
        }
        if self.inr_rt != 0. {
            my_size += 10;
        }
        if self.int_rt != 0. {
            my_size += 10;
        }
        if self.tot_int_amt != 0. {
            my_size += 10;
        }
        if self.tot_prin_amt != 0. {
            my_size += 10;
        }
        if !self.contract_typology.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.contract_typology);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.entity.is_empty() {
            os.write_string(1, &self.entity)?;
        }
        if !self.trade_id.is_empty() {
            os.write_string(2, &self.trade_id)?;
        }
        if self.contract_id != 0. {
            os.write_double(3, self.contract_id)?;
        }
        if !self.folder.is_empty() {
            os.write_string(4, &self.folder)?;
        }
        if !self.trading_banking.is_empty() {
            os.write_string(5, &self.trading_banking)?;
        }
        if !self.intrnl_extrnl.is_empty() {
            os.write_string(6, &self.intrnl_extrnl)?;
        }
        if !self.cntr_prty_name.is_empty() {
            os.write_string(7, &self.cntr_prty_name)?;
        }
        if self.trade_dt != 0 {
            os.write_int64(8, self.trade_dt)?;
        }
        if self.st_dt != 0 {
            os.write_int64(9, self.st_dt)?;
        }
        if !self.deal_ccy.is_empty() {
            os.write_string(10, &self.deal_ccy)?;
        }
        if self.org_notional != 0. {
            os.write_double(11, self.org_notional)?;
        }
        if self.pay_int_rt != 0. {
            os.write_double(12, self.pay_int_rt)?;
        }
        if self.rec_int_rt != 0. {
            os.write_double(13, self.rec_int_rt)?;
        }
        if self.exchng_rt != 0. {
            os.write_double(14, self.exchng_rt)?;
        }
        if self.pay_reset_dt != 0 {
            os.write_int64(15, self.pay_reset_dt)?;
        }
        if self.rec_reset_dt != 0 {
            os.write_int64(16, self.rec_reset_dt)?;
        }
        if self.pay_payment_dt != 0 {
            os.write_int64(17, self.pay_payment_dt)?;
        }
        if self.rec_payment_dt != 0 {
            os.write_int64(18, self.rec_payment_dt)?;
        }
        if !self.pay_payment_freq.is_empty() {
            os.write_string(19, &self.pay_payment_freq)?;
        }
        if !self.rec_payment_freq.is_empty() {
            os.write_string(20, &self.rec_payment_freq)?;
        }
        if !self.deal_stats.is_empty() {
            os.write_string(21, &self.deal_stats)?;
        }
        if !self.inp_id.is_empty() {
            os.write_string(22, &self.inp_id)?;
        }
        if !self.trade_bank.is_empty() {
            os.write_string(23, &self.trade_bank)?;
        }
        if !self.m_bank.is_empty() {
            os.write_string(24, &self.m_bank)?;
        }
        if !self.flow_typ.is_empty() {
            os.write_string(25, &self.flow_typ)?;
        }
        if !self.flow_typ1.is_empty() {
            os.write_string(26, &self.flow_typ1)?;
        }
        if !self.flow_typ2.is_empty() {
            os.write_string(27, &self.flow_typ2)?;
        }
        if !self.flow_typ3.is_empty() {
            os.write_string(28, &self.flow_typ3)?;
        }
        if !self.flow_typ4.is_empty() {
            os.write_string(29, &self.flow_typ4)?;
        }
        if self.flow_amt != 0. {
            os.write_double(30, self.flow_amt)?;
        }
        if self.cf_dt != 0 {
            os.write_int64(31, self.cf_dt)?;
        }
        if !self.flow_ccy.is_empty() {
            os.write_string(32, &self.flow_ccy)?;
        }
        if self.hkd_rt != 0. {
            os.write_double(33, self.hkd_rt)?;
        }
        if self.hkd_amt != 0. {
            os.write_double(34, self.hkd_amt)?;
        }
        if self.m_h_rep_dt2 != 0 {
            os.write_int64(35, self.m_h_rep_dt2)?;
        }
        if self.inr_amt != 0. {
            os.write_double(36, self.inr_amt)?;
        }
        if self.inr_rt != 0. {
            os.write_double(37, self.inr_rt)?;
        }
        if self.int_rt != 0. {
            os.write_double(38, self.int_rt)?;
        }
        if self.tot_int_amt != 0. {
            os.write_double(39, self.tot_int_amt)?;
        }
        if self.tot_prin_amt != 0. {
            os.write_double(40, self.tot_prin_amt)?;
        }
        if !self.contract_typology.is_empty() {
            os.write_string(41, &self.contract_typology)?;
        }
        for v in &self.cashflows {
            os.write_tag(42, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "entity",
                |m: &AccountWithCashflows| { &m.entity },
                |m: &mut AccountWithCashflows| { &mut m.entity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "trade_id",
                |m: &AccountWithCashflows| { &m.trade_id },
                |m: &mut AccountWithCashflows| { &mut m.trade_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "contract_id",
                |m: &AccountWithCashflows| { &m.contract_id },
                |m: &mut AccountWithCashflows| { &mut m.contract_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "folder",
                |m: &AccountWithCashflows| { &m.folder },
                |m: &mut AccountWithCashflows| { &mut m.folder },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "trading_banking",
                |m: &AccountWithCashflows| { &m.trading_banking },
                |m: &mut AccountWithCashflows| { &mut m.trading_banking },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "intrnl_extrnl",
                |m: &AccountWithCashflows| { &m.intrnl_extrnl },
                |m: &mut AccountWithCashflows| { &mut m.intrnl_extrnl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cntr_prty_name",
                |m: &AccountWithCashflows| { &m.cntr_prty_name },
                |m: &mut AccountWithCashflows| { &mut m.cntr_prty_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "trade_dt",
                |m: &AccountWithCashflows| { &m.trade_dt },
                |m: &mut AccountWithCashflows| { &mut m.trade_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "st_dt",
                |m: &AccountWithCashflows| { &m.st_dt },
                |m: &mut AccountWithCashflows| { &mut m.st_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "deal_ccy",
                |m: &AccountWithCashflows| { &m.deal_ccy },
                |m: &mut AccountWithCashflows| { &mut m.deal_ccy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "org_notional",
                |m: &AccountWithCashflows| { &m.org_notional },
                |m: &mut AccountWithCashflows| { &mut m.org_notional },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pay_int_rt",
                |m: &AccountWithCashflows| { &m.pay_int_rt },
                |m: &mut AccountWithCashflows| { &mut m.pay_int_rt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "rec_int_rt",
                |m: &AccountWithCashflows| { &m.rec_int_rt },
                |m: &mut AccountWithCashflows| { &mut m.rec_int_rt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "exchng_rt",
                |m: &AccountWithCashflows| { &m.exchng_rt },
                |m: &mut AccountWithCashflows| { &mut m.exchng_rt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pay_reset_dt",
                |m: &AccountWithCashflows| { &m.pay_reset_dt },
                |m: &mut AccountWithCashflows| { &mut m.pay_reset_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "rec_reset_dt",
                |m: &AccountWithCashflows| { &m.rec_reset_dt },
                |m: &mut AccountWithCashflows| { &mut m.rec_reset_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pay_payment_dt",
                |m: &AccountWithCashflows| { &m.pay_payment_dt },
                |m: &mut AccountWithCashflows| { &mut m.pay_payment_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "rec_payment_dt",
                |m: &AccountWithCashflows| { &m.rec_payment_dt },
                |m: &mut AccountWithCashflows| { &mut m.rec_payment_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pay_payment_freq",
                |m: &AccountWithCashflows| { &m.pay_payment_freq },
                |m: &mut AccountWithCashflows| { &mut m.pay_payment_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rec_payment_freq",
                |m: &AccountWithCashflows| { &m.rec_payment_freq },
                |m: &mut AccountWithCashflows| { &mut m.rec_payment_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "deal_stats",
                |m: &AccountWithCashflows| { &m.deal_stats },
                |m: &mut AccountWithCashflows| { &mut m.deal_stats },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "inp_id",
                |m: &AccountWithCashflows| { &m.inp_id },
                |m: &mut AccountWithCashflows| { &mut m.inp_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "trade_bank",
                |m: &AccountWithCashflows| { &m.trade_bank },
                |m: &mut AccountWithCashflows| { &mut m.trade_bank },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "m_bank",
                |m: &AccountWithCashflows| { &m.m_bank },
                |m: &mut AccountWithCashflows| { &mut m.m_bank },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "flow_typ",
                |m: &AccountWithCashflows| { &m.flow_typ },
                |m: &mut AccountWithCashflows| { &mut m.flow_typ },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "flow_typ1",
                |m: &AccountWithCashflows| { &m.flow_typ1 },
                |m: &mut AccountWithCashflows| { &mut m.flow_typ1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "flow_typ2",
                |m: &AccountWithCashflows| { &m.flow_typ2 },
                |m: &mut AccountWithCashflows| { &mut m.flow_typ2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "flow_typ3",
                |m: &AccountWithCashflows| { &m.flow_typ3 },
                |m: &mut AccountWithCashflows| { &mut m.flow_typ3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "flow_typ4",
                |m: &AccountWithCashflows| { &m.flow_typ4 },
                |m: &mut AccountWithCashflows| { &mut m.flow_typ4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "flow_amt",
                |m: &AccountWithCashflows| { &m.flow_amt },
                |m: &mut AccountWithCashflows| { &mut m.flow_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cf_dt",
                |m: &AccountWithCashflows| { &m.cf_dt },
                |m: &mut AccountWithCashflows| { &mut m.cf_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "flow_ccy",
                |m: &AccountWithCashflows| { &m.flow_ccy },
                |m: &mut AccountWithCashflows| { &mut m.flow_ccy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "hkd_rt",
                |m: &AccountWithCashflows| { &m.hkd_rt },
                |m: &mut AccountWithCashflows| { &mut m.hkd_rt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "hkd_amt",
                |m: &AccountWithCashflows| { &m.hkd_amt },
                |m: &mut AccountWithCashflows| { &mut m.hkd_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "m_h_rep_dt2",
                |m: &AccountWithCashflows| { &m.m_h_rep_dt2 },
                |m: &mut AccountWithCashflows| { &mut m.m_h_rep_dt2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "inr_amt",
                |m: &AccountWithCashflows| { &m.inr_amt },
                |m: &mut AccountWithCashflows| { &mut m.inr_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "inr_rt",
                |m: &AccountWithCashflows| { &m.inr_rt },
                |m: &mut AccountWithCashflows| { &mut m.inr_rt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_rt",
                |m: &AccountWithCashflows| { &m.int_rt },
                |m: &mut AccountWithCashflows| { &mut m.int_rt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_int_amt",
                |m: &AccountWithCashflows| { &m.tot_int_amt },
                |m: &mut AccountWithCashflows| { &mut m.tot_int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_prin_amt",
                |m: &AccountWithCashflows| { &m.tot_prin_amt },
                |m: &mut AccountWithCashflows| { &mut m.tot_prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contract_typology",
                |m: &AccountWithCashflows| { &m.contract_typology },
                |m: &mut AccountWithCashflows| { &mut m.contract_typology },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.entity.clear();
        self.trade_id.clear();
        self.contract_id = 0.;
        self.folder.clear();
        self.trading_banking.clear();
        self.intrnl_extrnl.clear();
        self.cntr_prty_name.clear();
        self.trade_dt = 0;
        self.st_dt = 0;
        self.deal_ccy.clear();
        self.org_notional = 0.;
        self.pay_int_rt = 0.;
        self.rec_int_rt = 0.;
        self.exchng_rt = 0.;
        self.pay_reset_dt = 0;
        self.rec_reset_dt = 0;
        self.pay_payment_dt = 0;
        self.rec_payment_dt = 0;
        self.pay_payment_freq.clear();
        self.rec_payment_freq.clear();
        self.deal_stats.clear();
        self.inp_id.clear();
        self.trade_bank.clear();
        self.m_bank.clear();
        self.flow_typ.clear();
        self.flow_typ1.clear();
        self.flow_typ2.clear();
        self.flow_typ3.clear();
        self.flow_typ4.clear();
        self.flow_amt = 0.;
        self.cf_dt = 0;
        self.flow_ccy.clear();
        self.hkd_rt = 0.;
        self.hkd_amt = 0.;
        self.m_h_rep_dt2 = 0;
        self.inr_amt = 0.;
        self.inr_rt = 0.;
        self.int_rt = 0.;
        self.tot_int_amt = 0.;
        self.tot_prin_amt = 0.;
        self.contract_typology.clear();
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\
    \x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\
    \x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\
    \x04date\"\x95\n\n\x14AccountWithCashflows\x12\x16\n\x06entity\x18\x01\
    \x20\x01(\tR\x06entity\x12\x19\n\x08trade_id\x18\x02\x20\x01(\tR\x07trad\
    eId\x12\x1f\n\x0bcontract_id\x18\x03\x20\x01(\x01R\ncontractId\x12\x16\n\
    \x06folder\x18\x04\x20\x01(\tR\x06folder\x12'\n\x0ftrading_banking\x18\
    \x05\x20\x01(\tR\x0etradingBanking\x12#\n\rintrnl_extrnl\x18\x06\x20\x01\
    (\tR\x0cintrnlExtrnl\x12$\n\x0ecntr_prty_name\x18\x07\x20\x01(\tR\x0ccnt\
    rPrtyName\x12\x19\n\x08trade_dt\x18\x08\x20\x01(\x03R\x07tradeDt\x12\x13\
    \n\x05st_dt\x18\t\x20\x01(\x03R\x04stDt\x12\x19\n\x08deal_ccy\x18\n\x20\
    \x01(\tR\x07dealCcy\x12!\n\x0corg_notional\x18\x0b\x20\x01(\x01R\x0borgN\
    otional\x12\x1c\n\npay_int_rt\x18\x0c\x20\x01(\x01R\x08payIntRt\x12\x1c\
    \n\nrec_int_rt\x18\r\x20\x01(\x01R\x08recIntRt\x12\x1b\n\texchng_rt\x18\
    \x0e\x20\x01(\x01R\x08exchngRt\x12\x20\n\x0cpay_reset_dt\x18\x0f\x20\x01\
    (\x03R\npayResetDt\x12\x20\n\x0crec_reset_dt\x18\x10\x20\x01(\x03R\nrecR\
    esetDt\x12$\n\x0epay_payment_dt\x18\x11\x20\x01(\x03R\x0cpayPaymentDt\
    \x12$\n\x0erec_payment_dt\x18\x12\x20\x01(\x03R\x0crecPaymentDt\x12(\n\
    \x10pay_payment_freq\x18\x13\x20\x01(\tR\x0epayPaymentFreq\x12(\n\x10rec\
    _payment_freq\x18\x14\x20\x01(\tR\x0erecPaymentFreq\x12\x1d\n\ndeal_stat\
    s\x18\x15\x20\x01(\tR\tdealStats\x12\x15\n\x06inp_id\x18\x16\x20\x01(\tR\
    \x05inpId\x12\x1d\n\ntrade_bank\x18\x17\x20\x01(\tR\ttradeBank\x12\x15\n\
    \x06m_bank\x18\x18\x20\x01(\tR\x05mBank\x12\x19\n\x08flow_typ\x18\x19\
    \x20\x01(\tR\x07flowTyp\x12\x1b\n\tflow_typ1\x18\x1a\x20\x01(\tR\x08flow\
    Typ1\x12\x1b\n\tflow_typ2\x18\x1b\x20\x01(\tR\x08flowTyp2\x12\x1b\n\tflo\
    w_typ3\x18\x1c\x20\x01(\tR\x08flowTyp3\x12\x1b\n\tflow_typ4\x18\x1d\x20\
    \x01(\tR\x08flowTyp4\x12\x19\n\x08flow_amt\x18\x1e\x20\x01(\x01R\x07flow\
    Amt\x12\x13\n\x05cf_dt\x18\x1f\x20\x01(\x03R\x04cfDt\x12\x19\n\x08flow_c\
    cy\x18\x20\x20\x01(\tR\x07flowCcy\x12\x15\n\x06hkd_rt\x18!\x20\x01(\x01R\
    \x05hkdRt\x12\x17\n\x07hkd_amt\x18\"\x20\x01(\x01R\x06hkdAmt\x12\x1d\n\
    \x0bm_h_rep_dt2\x18#\x20\x01(\x03R\x08mHRepDt2\x12\x17\n\x07inr_amt\x18$\
    \x20\x01(\x01R\x06inrAmt\x12\x15\n\x06inr_rt\x18%\x20\x01(\x01R\x05inrRt\
    \x12\x15\n\x06int_rt\x18&\x20\x01(\x01R\x05intRt\x12\x1e\n\x0btot_int_am\
    t\x18'\x20\x01(\x01R\ttotIntAmt\x12\x20\n\x0ctot_prin_amt\x18(\x20\x01(\
    \x01R\ntotPrinAmt\x12+\n\x11contract_typology\x18)\x20\x01(\tR\x10contra\
    ctTypology\x12'\n\tcashflows\x18*\x20\x03(\x0b2\t.CashflowR\tcashflowsb\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}