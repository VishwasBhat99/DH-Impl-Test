// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // double principal_amount = 2;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_amount",
                    |m: &Cashflow| { &m.interest_amount },
                    |m: &mut Cashflow| { &mut m.interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal_amount",
                    |m: &Cashflow| { &m.principal_amount },
                    |m: &mut Cashflow| { &mut m.principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_interest_amount();
        self.clear_principal_amount();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub customer_id: ::std::string::String,
    pub account_id: ::std::string::String,
    pub prod_type: ::std::string::String,
    pub scheme_type: ::std::string::String,
    pub prod_code: ::std::string::String,
    pub currency: ::std::string::String,
    pub customer_type: ::std::string::String,
    pub gl_account_principal: ::std::string::String,
    pub open_date: i64,
    pub value_date: i64,
    pub maturity_date: i64,
    pub limit_amt: f64,
    pub curr_bal_amount: f64,
    pub asset_type: ::std::string::String,
    pub loan_limit_amount: ::std::string::String,
    pub index_code: ::std::string::String,
    pub effective_roi: f64,
    pub reset_frequency: ::std::string::String,
    pub next_reset_date: i64,
    pub classification: ::std::string::String,
    pub final_reset_date: i64,
    pub npa_final_status: ::std::string::String,
    pub add_string_1: ::std::string::String,
    pub add_string_2: ::std::string::String,
    pub add_float_1: f64,
    pub add_float_2: f64,
    pub add_int_1: i64,
    pub add_int_2: i64,
    pub add_date_1: i64,
    pub add_date_2: i64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string customer_id = 1;

    pub fn clear_customer_id(&mut self) {
        self.customer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_id(&mut self, v: ::std::string::String) {
        self.customer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_id(&mut self) -> &mut ::std::string::String {
        &mut self.customer_id
    }

    // Take field
    pub fn take_customer_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_id, ::std::string::String::new())
    }

    pub fn get_customer_id(&self) -> &str {
        &self.customer_id
    }

    // string account_id = 2;

    pub fn clear_account_id(&mut self) {
        self.account_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: ::std::string::String) {
        self.account_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_id(&mut self) -> &mut ::std::string::String {
        &mut self.account_id
    }

    // Take field
    pub fn take_account_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_id, ::std::string::String::new())
    }

    pub fn get_account_id(&self) -> &str {
        &self.account_id
    }

    // string prod_type = 3;

    pub fn clear_prod_type(&mut self) {
        self.prod_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_type(&mut self, v: ::std::string::String) {
        self.prod_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_type(&mut self) -> &mut ::std::string::String {
        &mut self.prod_type
    }

    // Take field
    pub fn take_prod_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_type, ::std::string::String::new())
    }

    pub fn get_prod_type(&self) -> &str {
        &self.prod_type
    }

    // string scheme_type = 4;

    pub fn clear_scheme_type(&mut self) {
        self.scheme_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_scheme_type(&mut self, v: ::std::string::String) {
        self.scheme_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scheme_type(&mut self) -> &mut ::std::string::String {
        &mut self.scheme_type
    }

    // Take field
    pub fn take_scheme_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.scheme_type, ::std::string::String::new())
    }

    pub fn get_scheme_type(&self) -> &str {
        &self.scheme_type
    }

    // string prod_code = 5;

    pub fn clear_prod_code(&mut self) {
        self.prod_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_code(&mut self, v: ::std::string::String) {
        self.prod_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_code(&mut self) -> &mut ::std::string::String {
        &mut self.prod_code
    }

    // Take field
    pub fn take_prod_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_code, ::std::string::String::new())
    }

    pub fn get_prod_code(&self) -> &str {
        &self.prod_code
    }

    // string currency = 6;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // string customer_type = 7;

    pub fn clear_customer_type(&mut self) {
        self.customer_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_type(&mut self, v: ::std::string::String) {
        self.customer_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_type(&mut self) -> &mut ::std::string::String {
        &mut self.customer_type
    }

    // Take field
    pub fn take_customer_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_type, ::std::string::String::new())
    }

    pub fn get_customer_type(&self) -> &str {
        &self.customer_type
    }

    // string gl_account_principal = 8;

    pub fn clear_gl_account_principal(&mut self) {
        self.gl_account_principal.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_account_principal(&mut self, v: ::std::string::String) {
        self.gl_account_principal = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_account_principal(&mut self) -> &mut ::std::string::String {
        &mut self.gl_account_principal
    }

    // Take field
    pub fn take_gl_account_principal(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_account_principal, ::std::string::String::new())
    }

    pub fn get_gl_account_principal(&self) -> &str {
        &self.gl_account_principal
    }

    // int64 open_date = 9;

    pub fn clear_open_date(&mut self) {
        self.open_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_open_date(&mut self, v: i64) {
        self.open_date = v;
    }

    pub fn get_open_date(&self) -> i64 {
        self.open_date
    }

    // int64 value_date = 10;

    pub fn clear_value_date(&mut self) {
        self.value_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_date(&mut self, v: i64) {
        self.value_date = v;
    }

    pub fn get_value_date(&self) -> i64 {
        self.value_date
    }

    // int64 maturity_date = 11;

    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }

    // double limit_amt = 12;

    pub fn clear_limit_amt(&mut self) {
        self.limit_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_limit_amt(&mut self, v: f64) {
        self.limit_amt = v;
    }

    pub fn get_limit_amt(&self) -> f64 {
        self.limit_amt
    }

    // double curr_bal_amount = 13;

    pub fn clear_curr_bal_amount(&mut self) {
        self.curr_bal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_curr_bal_amount(&mut self, v: f64) {
        self.curr_bal_amount = v;
    }

    pub fn get_curr_bal_amount(&self) -> f64 {
        self.curr_bal_amount
    }

    // string asset_type = 14;

    pub fn clear_asset_type(&mut self) {
        self.asset_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_type(&mut self, v: ::std::string::String) {
        self.asset_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_type(&mut self) -> &mut ::std::string::String {
        &mut self.asset_type
    }

    // Take field
    pub fn take_asset_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_type, ::std::string::String::new())
    }

    pub fn get_asset_type(&self) -> &str {
        &self.asset_type
    }

    // string loan_limit_amount = 15;

    pub fn clear_loan_limit_amount(&mut self) {
        self.loan_limit_amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_loan_limit_amount(&mut self, v: ::std::string::String) {
        self.loan_limit_amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_loan_limit_amount(&mut self) -> &mut ::std::string::String {
        &mut self.loan_limit_amount
    }

    // Take field
    pub fn take_loan_limit_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.loan_limit_amount, ::std::string::String::new())
    }

    pub fn get_loan_limit_amount(&self) -> &str {
        &self.loan_limit_amount
    }

    // string index_code = 16;

    pub fn clear_index_code(&mut self) {
        self.index_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_index_code(&mut self, v: ::std::string::String) {
        self.index_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_index_code(&mut self) -> &mut ::std::string::String {
        &mut self.index_code
    }

    // Take field
    pub fn take_index_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.index_code, ::std::string::String::new())
    }

    pub fn get_index_code(&self) -> &str {
        &self.index_code
    }

    // double effective_roi = 17;

    pub fn clear_effective_roi(&mut self) {
        self.effective_roi = 0.;
    }

    // Param is passed by value, moved
    pub fn set_effective_roi(&mut self, v: f64) {
        self.effective_roi = v;
    }

    pub fn get_effective_roi(&self) -> f64 {
        self.effective_roi
    }

    // string reset_frequency = 18;

    pub fn clear_reset_frequency(&mut self) {
        self.reset_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_reset_frequency(&mut self, v: ::std::string::String) {
        self.reset_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reset_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.reset_frequency
    }

    // Take field
    pub fn take_reset_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reset_frequency, ::std::string::String::new())
    }

    pub fn get_reset_frequency(&self) -> &str {
        &self.reset_frequency
    }

    // int64 next_reset_date = 19;

    pub fn clear_next_reset_date(&mut self) {
        self.next_reset_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_reset_date(&mut self, v: i64) {
        self.next_reset_date = v;
    }

    pub fn get_next_reset_date(&self) -> i64 {
        self.next_reset_date
    }

    // string classification = 20;

    pub fn clear_classification(&mut self) {
        self.classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_classification(&mut self, v: ::std::string::String) {
        self.classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_classification(&mut self) -> &mut ::std::string::String {
        &mut self.classification
    }

    // Take field
    pub fn take_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.classification, ::std::string::String::new())
    }

    pub fn get_classification(&self) -> &str {
        &self.classification
    }

    // int64 final_reset_date = 21;

    pub fn clear_final_reset_date(&mut self) {
        self.final_reset_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_final_reset_date(&mut self, v: i64) {
        self.final_reset_date = v;
    }

    pub fn get_final_reset_date(&self) -> i64 {
        self.final_reset_date
    }

    // string npa_final_status = 22;

    pub fn clear_npa_final_status(&mut self) {
        self.npa_final_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_final_status(&mut self, v: ::std::string::String) {
        self.npa_final_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_final_status(&mut self) -> &mut ::std::string::String {
        &mut self.npa_final_status
    }

    // Take field
    pub fn take_npa_final_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_final_status, ::std::string::String::new())
    }

    pub fn get_npa_final_status(&self) -> &str {
        &self.npa_final_status
    }

    // string add_string_1 = 23;

    pub fn clear_add_string_1(&mut self) {
        self.add_string_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_string_1(&mut self, v: ::std::string::String) {
        self.add_string_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_string_1(&mut self) -> &mut ::std::string::String {
        &mut self.add_string_1
    }

    // Take field
    pub fn take_add_string_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_string_1, ::std::string::String::new())
    }

    pub fn get_add_string_1(&self) -> &str {
        &self.add_string_1
    }

    // string add_string_2 = 24;

    pub fn clear_add_string_2(&mut self) {
        self.add_string_2.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_string_2(&mut self, v: ::std::string::String) {
        self.add_string_2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_string_2(&mut self) -> &mut ::std::string::String {
        &mut self.add_string_2
    }

    // Take field
    pub fn take_add_string_2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_string_2, ::std::string::String::new())
    }

    pub fn get_add_string_2(&self) -> &str {
        &self.add_string_2
    }

    // double add_float_1 = 25;

    pub fn clear_add_float_1(&mut self) {
        self.add_float_1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_add_float_1(&mut self, v: f64) {
        self.add_float_1 = v;
    }

    pub fn get_add_float_1(&self) -> f64 {
        self.add_float_1
    }

    // double add_float_2 = 26;

    pub fn clear_add_float_2(&mut self) {
        self.add_float_2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_add_float_2(&mut self, v: f64) {
        self.add_float_2 = v;
    }

    pub fn get_add_float_2(&self) -> f64 {
        self.add_float_2
    }

    // int64 add_int_1 = 27;

    pub fn clear_add_int_1(&mut self) {
        self.add_int_1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_add_int_1(&mut self, v: i64) {
        self.add_int_1 = v;
    }

    pub fn get_add_int_1(&self) -> i64 {
        self.add_int_1
    }

    // int64 add_int_2 = 28;

    pub fn clear_add_int_2(&mut self) {
        self.add_int_2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_add_int_2(&mut self, v: i64) {
        self.add_int_2 = v;
    }

    pub fn get_add_int_2(&self) -> i64 {
        self.add_int_2
    }

    // int64 add_date_1 = 29;

    pub fn clear_add_date_1(&mut self) {
        self.add_date_1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_add_date_1(&mut self, v: i64) {
        self.add_date_1 = v;
    }

    pub fn get_add_date_1(&self) -> i64 {
        self.add_date_1
    }

    // int64 add_date_2 = 30;

    pub fn clear_add_date_2(&mut self) {
        self.add_date_2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_add_date_2(&mut self, v: i64) {
        self.add_date_2 = v;
    }

    pub fn get_add_date_2(&self) -> i64 {
        self.add_date_2
    }

    // repeated .Cashflow cashflows = 31;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_type)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.scheme_type)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_code)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_type)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_account_principal)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.open_date = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.value_date = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.limit_amt = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.curr_bal_amount = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_type)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.loan_limit_amount)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.index_code)?;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.effective_roi = tmp;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reset_frequency)?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_reset_date = tmp;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.classification)?;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.final_reset_date = tmp;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa_final_status)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_string_1)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_string_2)?;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.add_float_1 = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.add_float_2 = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.add_int_1 = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.add_int_2 = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.add_date_1 = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.add_date_2 = tmp;
                },
                31 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_id);
        }
        if !self.account_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.account_id);
        }
        if !self.prod_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.prod_type);
        }
        if !self.scheme_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.scheme_type);
        }
        if !self.prod_code.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.prod_code);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.currency);
        }
        if !self.customer_type.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.customer_type);
        }
        if !self.gl_account_principal.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.gl_account_principal);
        }
        if self.open_date != 0 {
            my_size += ::protobuf::rt::value_size(9, self.open_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.value_date != 0 {
            my_size += ::protobuf::rt::value_size(10, self.value_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(11, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.limit_amt != 0. {
            my_size += 9;
        }
        if self.curr_bal_amount != 0. {
            my_size += 9;
        }
        if !self.asset_type.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.asset_type);
        }
        if !self.loan_limit_amount.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.loan_limit_amount);
        }
        if !self.index_code.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.index_code);
        }
        if self.effective_roi != 0. {
            my_size += 10;
        }
        if !self.reset_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.reset_frequency);
        }
        if self.next_reset_date != 0 {
            my_size += ::protobuf::rt::value_size(19, self.next_reset_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.classification.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.classification);
        }
        if self.final_reset_date != 0 {
            my_size += ::protobuf::rt::value_size(21, self.final_reset_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.npa_final_status.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.npa_final_status);
        }
        if !self.add_string_1.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.add_string_1);
        }
        if !self.add_string_2.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.add_string_2);
        }
        if self.add_float_1 != 0. {
            my_size += 10;
        }
        if self.add_float_2 != 0. {
            my_size += 10;
        }
        if self.add_int_1 != 0 {
            my_size += ::protobuf::rt::value_size(27, self.add_int_1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.add_int_2 != 0 {
            my_size += ::protobuf::rt::value_size(28, self.add_int_2, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.add_date_1 != 0 {
            my_size += ::protobuf::rt::value_size(29, self.add_date_1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.add_date_2 != 0 {
            my_size += ::protobuf::rt::value_size(30, self.add_date_2, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_id.is_empty() {
            os.write_string(1, &self.customer_id)?;
        }
        if !self.account_id.is_empty() {
            os.write_string(2, &self.account_id)?;
        }
        if !self.prod_type.is_empty() {
            os.write_string(3, &self.prod_type)?;
        }
        if !self.scheme_type.is_empty() {
            os.write_string(4, &self.scheme_type)?;
        }
        if !self.prod_code.is_empty() {
            os.write_string(5, &self.prod_code)?;
        }
        if !self.currency.is_empty() {
            os.write_string(6, &self.currency)?;
        }
        if !self.customer_type.is_empty() {
            os.write_string(7, &self.customer_type)?;
        }
        if !self.gl_account_principal.is_empty() {
            os.write_string(8, &self.gl_account_principal)?;
        }
        if self.open_date != 0 {
            os.write_int64(9, self.open_date)?;
        }
        if self.value_date != 0 {
            os.write_int64(10, self.value_date)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(11, self.maturity_date)?;
        }
        if self.limit_amt != 0. {
            os.write_double(12, self.limit_amt)?;
        }
        if self.curr_bal_amount != 0. {
            os.write_double(13, self.curr_bal_amount)?;
        }
        if !self.asset_type.is_empty() {
            os.write_string(14, &self.asset_type)?;
        }
        if !self.loan_limit_amount.is_empty() {
            os.write_string(15, &self.loan_limit_amount)?;
        }
        if !self.index_code.is_empty() {
            os.write_string(16, &self.index_code)?;
        }
        if self.effective_roi != 0. {
            os.write_double(17, self.effective_roi)?;
        }
        if !self.reset_frequency.is_empty() {
            os.write_string(18, &self.reset_frequency)?;
        }
        if self.next_reset_date != 0 {
            os.write_int64(19, self.next_reset_date)?;
        }
        if !self.classification.is_empty() {
            os.write_string(20, &self.classification)?;
        }
        if self.final_reset_date != 0 {
            os.write_int64(21, self.final_reset_date)?;
        }
        if !self.npa_final_status.is_empty() {
            os.write_string(22, &self.npa_final_status)?;
        }
        if !self.add_string_1.is_empty() {
            os.write_string(23, &self.add_string_1)?;
        }
        if !self.add_string_2.is_empty() {
            os.write_string(24, &self.add_string_2)?;
        }
        if self.add_float_1 != 0. {
            os.write_double(25, self.add_float_1)?;
        }
        if self.add_float_2 != 0. {
            os.write_double(26, self.add_float_2)?;
        }
        if self.add_int_1 != 0 {
            os.write_int64(27, self.add_int_1)?;
        }
        if self.add_int_2 != 0 {
            os.write_int64(28, self.add_int_2)?;
        }
        if self.add_date_1 != 0 {
            os.write_int64(29, self.add_date_1)?;
        }
        if self.add_date_2 != 0 {
            os.write_int64(30, self.add_date_2)?;
        }
        for v in &self.cashflows {
            os.write_tag(31, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "customer_id",
                    |m: &AccountWithCashflows| { &m.customer_id },
                    |m: &mut AccountWithCashflows| { &mut m.customer_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "account_id",
                    |m: &AccountWithCashflows| { &m.account_id },
                    |m: &mut AccountWithCashflows| { &mut m.account_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "prod_type",
                    |m: &AccountWithCashflows| { &m.prod_type },
                    |m: &mut AccountWithCashflows| { &mut m.prod_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "scheme_type",
                    |m: &AccountWithCashflows| { &m.scheme_type },
                    |m: &mut AccountWithCashflows| { &mut m.scheme_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "prod_code",
                    |m: &AccountWithCashflows| { &m.prod_code },
                    |m: &mut AccountWithCashflows| { &mut m.prod_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &AccountWithCashflows| { &m.currency },
                    |m: &mut AccountWithCashflows| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "customer_type",
                    |m: &AccountWithCashflows| { &m.customer_type },
                    |m: &mut AccountWithCashflows| { &mut m.customer_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gl_account_principal",
                    |m: &AccountWithCashflows| { &m.gl_account_principal },
                    |m: &mut AccountWithCashflows| { &mut m.gl_account_principal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "open_date",
                    |m: &AccountWithCashflows| { &m.open_date },
                    |m: &mut AccountWithCashflows| { &mut m.open_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "value_date",
                    |m: &AccountWithCashflows| { &m.value_date },
                    |m: &mut AccountWithCashflows| { &mut m.value_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "maturity_date",
                    |m: &AccountWithCashflows| { &m.maturity_date },
                    |m: &mut AccountWithCashflows| { &mut m.maturity_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "limit_amt",
                    |m: &AccountWithCashflows| { &m.limit_amt },
                    |m: &mut AccountWithCashflows| { &mut m.limit_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "curr_bal_amount",
                    |m: &AccountWithCashflows| { &m.curr_bal_amount },
                    |m: &mut AccountWithCashflows| { &mut m.curr_bal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "asset_type",
                    |m: &AccountWithCashflows| { &m.asset_type },
                    |m: &mut AccountWithCashflows| { &mut m.asset_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "loan_limit_amount",
                    |m: &AccountWithCashflows| { &m.loan_limit_amount },
                    |m: &mut AccountWithCashflows| { &mut m.loan_limit_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "index_code",
                    |m: &AccountWithCashflows| { &m.index_code },
                    |m: &mut AccountWithCashflows| { &mut m.index_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "effective_roi",
                    |m: &AccountWithCashflows| { &m.effective_roi },
                    |m: &mut AccountWithCashflows| { &mut m.effective_roi },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "reset_frequency",
                    |m: &AccountWithCashflows| { &m.reset_frequency },
                    |m: &mut AccountWithCashflows| { &mut m.reset_frequency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "next_reset_date",
                    |m: &AccountWithCashflows| { &m.next_reset_date },
                    |m: &mut AccountWithCashflows| { &mut m.next_reset_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "classification",
                    |m: &AccountWithCashflows| { &m.classification },
                    |m: &mut AccountWithCashflows| { &mut m.classification },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "final_reset_date",
                    |m: &AccountWithCashflows| { &m.final_reset_date },
                    |m: &mut AccountWithCashflows| { &mut m.final_reset_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "npa_final_status",
                    |m: &AccountWithCashflows| { &m.npa_final_status },
                    |m: &mut AccountWithCashflows| { &mut m.npa_final_status },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "add_string_1",
                    |m: &AccountWithCashflows| { &m.add_string_1 },
                    |m: &mut AccountWithCashflows| { &mut m.add_string_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "add_string_2",
                    |m: &AccountWithCashflows| { &m.add_string_2 },
                    |m: &mut AccountWithCashflows| { &mut m.add_string_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "add_float_1",
                    |m: &AccountWithCashflows| { &m.add_float_1 },
                    |m: &mut AccountWithCashflows| { &mut m.add_float_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "add_float_2",
                    |m: &AccountWithCashflows| { &m.add_float_2 },
                    |m: &mut AccountWithCashflows| { &mut m.add_float_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "add_int_1",
                    |m: &AccountWithCashflows| { &m.add_int_1 },
                    |m: &mut AccountWithCashflows| { &mut m.add_int_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "add_int_2",
                    |m: &AccountWithCashflows| { &m.add_int_2 },
                    |m: &mut AccountWithCashflows| { &mut m.add_int_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "add_date_1",
                    |m: &AccountWithCashflows| { &m.add_date_1 },
                    |m: &mut AccountWithCashflows| { &mut m.add_date_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "add_date_2",
                    |m: &AccountWithCashflows| { &m.add_date_2 },
                    |m: &mut AccountWithCashflows| { &mut m.add_date_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_customer_id();
        self.clear_account_id();
        self.clear_prod_type();
        self.clear_scheme_type();
        self.clear_prod_code();
        self.clear_currency();
        self.clear_customer_type();
        self.clear_gl_account_principal();
        self.clear_open_date();
        self.clear_value_date();
        self.clear_maturity_date();
        self.clear_limit_amt();
        self.clear_curr_bal_amount();
        self.clear_asset_type();
        self.clear_loan_limit_amount();
        self.clear_index_code();
        self.clear_effective_roi();
        self.clear_reset_frequency();
        self.clear_next_reset_date();
        self.clear_classification();
        self.clear_final_reset_date();
        self.clear_npa_final_status();
        self.clear_add_string_1();
        self.clear_add_string_2();
        self.clear_add_float_1();
        self.clear_add_float_2();
        self.clear_add_int_1();
        self.clear_add_int_2();
        self.clear_add_date_1();
        self.clear_add_date_2();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13proto/cf_blob.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\
    \x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\
    \x20\x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03\
    R\x04date\"\xc7\x08\n\x14AccountWithCashflows\x12\x1f\n\x0bcustomer_id\
    \x18\x01\x20\x01(\tR\ncustomerId\x12\x1d\n\naccount_id\x18\x02\x20\x01(\
    \tR\taccountId\x12\x1b\n\tprod_type\x18\x03\x20\x01(\tR\x08prodType\x12\
    \x1f\n\x0bscheme_type\x18\x04\x20\x01(\tR\nschemeType\x12\x1b\n\tprod_co\
    de\x18\x05\x20\x01(\tR\x08prodCode\x12\x1a\n\x08currency\x18\x06\x20\x01\
    (\tR\x08currency\x12#\n\rcustomer_type\x18\x07\x20\x01(\tR\x0ccustomerTy\
    pe\x120\n\x14gl_account_principal\x18\x08\x20\x01(\tR\x12glAccountPrinci\
    pal\x12\x1b\n\topen_date\x18\t\x20\x01(\x03R\x08openDate\x12\x1d\n\nvalu\
    e_date\x18\n\x20\x01(\x03R\tvalueDate\x12#\n\rmaturity_date\x18\x0b\x20\
    \x01(\x03R\x0cmaturityDate\x12\x1b\n\tlimit_amt\x18\x0c\x20\x01(\x01R\
    \x08limitAmt\x12&\n\x0fcurr_bal_amount\x18\r\x20\x01(\x01R\rcurrBalAmoun\
    t\x12\x1d\n\nasset_type\x18\x0e\x20\x01(\tR\tassetType\x12*\n\x11loan_li\
    mit_amount\x18\x0f\x20\x01(\tR\x0floanLimitAmount\x12\x1d\n\nindex_code\
    \x18\x10\x20\x01(\tR\tindexCode\x12#\n\reffective_roi\x18\x11\x20\x01(\
    \x01R\x0ceffectiveRoi\x12'\n\x0freset_frequency\x18\x12\x20\x01(\tR\x0er\
    esetFrequency\x12&\n\x0fnext_reset_date\x18\x13\x20\x01(\x03R\rnextReset\
    Date\x12&\n\x0eclassification\x18\x14\x20\x01(\tR\x0eclassification\x12(\
    \n\x10final_reset_date\x18\x15\x20\x01(\x03R\x0efinalResetDate\x12(\n\
    \x10npa_final_status\x18\x16\x20\x01(\tR\x0enpaFinalStatus\x12\x20\n\x0c\
    add_string_1\x18\x17\x20\x01(\tR\naddString1\x12\x20\n\x0cadd_string_2\
    \x18\x18\x20\x01(\tR\naddString2\x12\x1e\n\x0badd_float_1\x18\x19\x20\
    \x01(\x01R\taddFloat1\x12\x1e\n\x0badd_float_2\x18\x1a\x20\x01(\x01R\tad\
    dFloat2\x12\x1a\n\tadd_int_1\x18\x1b\x20\x01(\x03R\x07addInt1\x12\x1a\n\
    \tadd_int_2\x18\x1c\x20\x01(\x03R\x07addInt2\x12\x1c\n\nadd_date_1\x18\
    \x1d\x20\x01(\x03R\x08addDate1\x12\x1c\n\nadd_date_2\x18\x1e\x20\x01(\
    \x03R\x08addDate2\x12'\n\tcashflows\x18\x1f\x20\x03(\x0b2\t.CashflowR\tc\
    ashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
