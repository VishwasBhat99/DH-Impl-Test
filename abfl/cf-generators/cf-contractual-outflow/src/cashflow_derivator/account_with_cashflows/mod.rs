// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `contractual_outflow.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_amt",
                |m: &Cashflow| { &m.int_amt },
                |m: &mut Cashflow| { &mut m.int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "prin_amt",
                |m: &Cashflow| { &m.prin_amt },
                |m: &mut Cashflow| { &mut m.prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub serial_no: ::std::string::String,
    pub incr_dt: i64,
    pub incr_amt: f64,
    pub applicable_dt: i64,
    pub projected_outflow: f64,
    pub lob: ::std::string::String,
    pub currency: ::std::string::String,
    pub add_field1: ::std::string::String,
    pub add_field2: ::std::string::String,
    pub add_field3: ::std::string::String,
    pub add_field4: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string serial_no = 1;


    pub fn get_serial_no(&self) -> &str {
        &self.serial_no
    }
    pub fn clear_serial_no(&mut self) {
        self.serial_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_serial_no(&mut self, v: ::std::string::String) {
        self.serial_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_no(&mut self) -> &mut ::std::string::String {
        &mut self.serial_no
    }

    // Take field
    pub fn take_serial_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.serial_no, ::std::string::String::new())
    }

    // int64 incr_dt = 2;


    pub fn get_incr_dt(&self) -> i64 {
        self.incr_dt
    }
    pub fn clear_incr_dt(&mut self) {
        self.incr_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_incr_dt(&mut self, v: i64) {
        self.incr_dt = v;
    }

    // double incr_amt = 3;


    pub fn get_incr_amt(&self) -> f64 {
        self.incr_amt
    }
    pub fn clear_incr_amt(&mut self) {
        self.incr_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_incr_amt(&mut self, v: f64) {
        self.incr_amt = v;
    }

    // int64 applicable_dt = 4;


    pub fn get_applicable_dt(&self) -> i64 {
        self.applicable_dt
    }
    pub fn clear_applicable_dt(&mut self) {
        self.applicable_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_applicable_dt(&mut self, v: i64) {
        self.applicable_dt = v;
    }

    // double projected_outflow = 5;


    pub fn get_projected_outflow(&self) -> f64 {
        self.projected_outflow
    }
    pub fn clear_projected_outflow(&mut self) {
        self.projected_outflow = 0.;
    }

    // Param is passed by value, moved
    pub fn set_projected_outflow(&mut self, v: f64) {
        self.projected_outflow = v;
    }

    // string lob = 6;


    pub fn get_lob(&self) -> &str {
        &self.lob
    }
    pub fn clear_lob(&mut self) {
        self.lob.clear();
    }

    // Param is passed by value, moved
    pub fn set_lob(&mut self, v: ::std::string::String) {
        self.lob = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lob(&mut self) -> &mut ::std::string::String {
        &mut self.lob
    }

    // Take field
    pub fn take_lob(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lob, ::std::string::String::new())
    }

    // string currency = 7;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // string add_field1 = 8;


    pub fn get_add_field1(&self) -> &str {
        &self.add_field1
    }
    pub fn clear_add_field1(&mut self) {
        self.add_field1.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_field1(&mut self, v: ::std::string::String) {
        self.add_field1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_field1(&mut self) -> &mut ::std::string::String {
        &mut self.add_field1
    }

    // Take field
    pub fn take_add_field1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_field1, ::std::string::String::new())
    }

    // string add_field2 = 9;


    pub fn get_add_field2(&self) -> &str {
        &self.add_field2
    }
    pub fn clear_add_field2(&mut self) {
        self.add_field2.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_field2(&mut self, v: ::std::string::String) {
        self.add_field2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_field2(&mut self) -> &mut ::std::string::String {
        &mut self.add_field2
    }

    // Take field
    pub fn take_add_field2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_field2, ::std::string::String::new())
    }

    // string add_field3 = 10;


    pub fn get_add_field3(&self) -> &str {
        &self.add_field3
    }
    pub fn clear_add_field3(&mut self) {
        self.add_field3.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_field3(&mut self, v: ::std::string::String) {
        self.add_field3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_field3(&mut self) -> &mut ::std::string::String {
        &mut self.add_field3
    }

    // Take field
    pub fn take_add_field3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_field3, ::std::string::String::new())
    }

    // string add_field4 = 11;


    pub fn get_add_field4(&self) -> &str {
        &self.add_field4
    }
    pub fn clear_add_field4(&mut self) {
        self.add_field4.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_field4(&mut self, v: ::std::string::String) {
        self.add_field4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_field4(&mut self) -> &mut ::std::string::String {
        &mut self.add_field4
    }

    // Take field
    pub fn take_add_field4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_field4, ::std::string::String::new())
    }

    // repeated .Cashflow cashflows = 12;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.serial_no)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.incr_dt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.incr_amt = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.applicable_dt = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.projected_outflow = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lob)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_field1)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_field2)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_field3)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_field4)?;
                },
                12 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.serial_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.serial_no);
        }
        if self.incr_dt != 0 {
            my_size += ::protobuf::rt::value_size(2, self.incr_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.incr_amt != 0. {
            my_size += 9;
        }
        if self.applicable_dt != 0 {
            my_size += ::protobuf::rt::value_size(4, self.applicable_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.projected_outflow != 0. {
            my_size += 9;
        }
        if !self.lob.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.lob);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.currency);
        }
        if !self.add_field1.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.add_field1);
        }
        if !self.add_field2.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.add_field2);
        }
        if !self.add_field3.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.add_field3);
        }
        if !self.add_field4.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.add_field4);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.serial_no.is_empty() {
            os.write_string(1, &self.serial_no)?;
        }
        if self.incr_dt != 0 {
            os.write_int64(2, self.incr_dt)?;
        }
        if self.incr_amt != 0. {
            os.write_double(3, self.incr_amt)?;
        }
        if self.applicable_dt != 0 {
            os.write_int64(4, self.applicable_dt)?;
        }
        if self.projected_outflow != 0. {
            os.write_double(5, self.projected_outflow)?;
        }
        if !self.lob.is_empty() {
            os.write_string(6, &self.lob)?;
        }
        if !self.currency.is_empty() {
            os.write_string(7, &self.currency)?;
        }
        if !self.add_field1.is_empty() {
            os.write_string(8, &self.add_field1)?;
        }
        if !self.add_field2.is_empty() {
            os.write_string(9, &self.add_field2)?;
        }
        if !self.add_field3.is_empty() {
            os.write_string(10, &self.add_field3)?;
        }
        if !self.add_field4.is_empty() {
            os.write_string(11, &self.add_field4)?;
        }
        for v in &self.cashflows {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "serial_no",
                |m: &AccountWithCashflows| { &m.serial_no },
                |m: &mut AccountWithCashflows| { &mut m.serial_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "incr_dt",
                |m: &AccountWithCashflows| { &m.incr_dt },
                |m: &mut AccountWithCashflows| { &mut m.incr_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "incr_amt",
                |m: &AccountWithCashflows| { &m.incr_amt },
                |m: &mut AccountWithCashflows| { &mut m.incr_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "applicable_dt",
                |m: &AccountWithCashflows| { &m.applicable_dt },
                |m: &mut AccountWithCashflows| { &mut m.applicable_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "projected_outflow",
                |m: &AccountWithCashflows| { &m.projected_outflow },
                |m: &mut AccountWithCashflows| { &mut m.projected_outflow },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "lob",
                |m: &AccountWithCashflows| { &m.lob },
                |m: &mut AccountWithCashflows| { &mut m.lob },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &AccountWithCashflows| { &m.currency },
                |m: &mut AccountWithCashflows| { &mut m.currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "add_field1",
                |m: &AccountWithCashflows| { &m.add_field1 },
                |m: &mut AccountWithCashflows| { &mut m.add_field1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "add_field2",
                |m: &AccountWithCashflows| { &m.add_field2 },
                |m: &mut AccountWithCashflows| { &mut m.add_field2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "add_field3",
                |m: &AccountWithCashflows| { &m.add_field3 },
                |m: &mut AccountWithCashflows| { &mut m.add_field3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "add_field4",
                |m: &AccountWithCashflows| { &m.add_field4 },
                |m: &mut AccountWithCashflows| { &mut m.add_field4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.serial_no.clear();
        self.incr_dt = 0;
        self.incr_amt = 0.;
        self.applicable_dt = 0;
        self.projected_outflow = 0.;
        self.lob.clear();
        self.currency.clear();
        self.add_field1.clear();
        self.add_field2.clear();
        self.add_field3.clear();
        self.add_field4.clear();
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19contractual_outflow.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\
    \x18\x01\x20\x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\
    \x01R\x07prinAmt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\x8c\
    \x03\n\x14AccountWithCashflows\x12\x1b\n\tserial_no\x18\x01\x20\x01(\tR\
    \x08serialNo\x12\x17\n\x07incr_dt\x18\x02\x20\x01(\x03R\x06incrDt\x12\
    \x19\n\x08incr_amt\x18\x03\x20\x01(\x01R\x07incrAmt\x12#\n\rapplicable_d\
    t\x18\x04\x20\x01(\x03R\x0capplicableDt\x12+\n\x11projected_outflow\x18\
    \x05\x20\x01(\x01R\x10projectedOutflow\x12\x10\n\x03lob\x18\x06\x20\x01(\
    \tR\x03lob\x12\x1a\n\x08currency\x18\x07\x20\x01(\tR\x08currency\x12\x1d\
    \n\nadd_field1\x18\x08\x20\x01(\tR\taddField1\x12\x1d\n\nadd_field2\x18\
    \t\x20\x01(\tR\taddField2\x12\x1d\n\nadd_field3\x18\n\x20\x01(\tR\taddFi\
    eld3\x12\x1d\n\nadd_field4\x18\x0b\x20\x01(\tR\taddField4\x12'\n\tcashfl\
    ows\x18\x0c\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
