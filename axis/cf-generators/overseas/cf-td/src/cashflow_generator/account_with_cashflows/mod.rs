// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `axis_Cf_td1.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub amount: f64,
    pub ccy: ::std::string::String,
    pub intr_rate: f64,
    pub repricing_freq: ::std::string::String,
    pub early_dt: i64,
    pub maturity_dt: i64,
    pub deal_number: ::std::string::String,
    pub start_dt: i64,
    pub intr_computation_freq: ::std::string::String,
    pub is_floating_rt: ::std::string::String,
    pub floating_rt_benchmark: ::std::string::String,
    pub biz_uid: ::std::string::String,
    pub cust_id: ::std::string::String,
    pub cust_name: ::std::string::String,
    pub spread: f64,
    pub schm_code: ::std::string::String,
    pub min_intr_rt: f64,
    pub max_intr_rt: f64,
    pub deposit_amt: f64,
    pub maturity_amt: f64,
    pub currency_conversion_rate: f64,
    pub cust_ctry_code: ::std::string::String,
    pub cust_crdt_rtng: ::std::string::String,
    pub cust_sect_code: ::std::string::String,
    pub cust_indt_code: ::std::string::String,
    pub custom1: ::std::string::String,
    pub custom2: ::std::string::String,
    pub gl_sub_head_code: ::std::string::String,
    pub cust_hlth_code: ::std::string::String,
    pub schm_type: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // double amount = 1;


    pub fn get_amount(&self) -> f64 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: f64) {
        self.amount = v;
    }

    // string ccy = 2;


    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }
    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    // double intr_rate = 3;


    pub fn get_intr_rate(&self) -> f64 {
        self.intr_rate
    }
    pub fn clear_intr_rate(&mut self) {
        self.intr_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_intr_rate(&mut self, v: f64) {
        self.intr_rate = v;
    }

    // string repricing_freq = 4;


    pub fn get_repricing_freq(&self) -> &str {
        &self.repricing_freq
    }
    pub fn clear_repricing_freq(&mut self) {
        self.repricing_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_repricing_freq(&mut self, v: ::std::string::String) {
        self.repricing_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repricing_freq(&mut self) -> &mut ::std::string::String {
        &mut self.repricing_freq
    }

    // Take field
    pub fn take_repricing_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.repricing_freq, ::std::string::String::new())
    }

    // int64 early_dt = 5;


    pub fn get_early_dt(&self) -> i64 {
        self.early_dt
    }
    pub fn clear_early_dt(&mut self) {
        self.early_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_early_dt(&mut self, v: i64) {
        self.early_dt = v;
    }

    // int64 maturity_dt = 6;


    pub fn get_maturity_dt(&self) -> i64 {
        self.maturity_dt
    }
    pub fn clear_maturity_dt(&mut self) {
        self.maturity_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_dt(&mut self, v: i64) {
        self.maturity_dt = v;
    }

    // string deal_number = 7;


    pub fn get_deal_number(&self) -> &str {
        &self.deal_number
    }
    pub fn clear_deal_number(&mut self) {
        self.deal_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_number(&mut self, v: ::std::string::String) {
        self.deal_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_number(&mut self) -> &mut ::std::string::String {
        &mut self.deal_number
    }

    // Take field
    pub fn take_deal_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_number, ::std::string::String::new())
    }

    // int64 start_dt = 8;


    pub fn get_start_dt(&self) -> i64 {
        self.start_dt
    }
    pub fn clear_start_dt(&mut self) {
        self.start_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_dt(&mut self, v: i64) {
        self.start_dt = v;
    }

    // string intr_computation_freq = 9;


    pub fn get_intr_computation_freq(&self) -> &str {
        &self.intr_computation_freq
    }
    pub fn clear_intr_computation_freq(&mut self) {
        self.intr_computation_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_intr_computation_freq(&mut self, v: ::std::string::String) {
        self.intr_computation_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_intr_computation_freq(&mut self) -> &mut ::std::string::String {
        &mut self.intr_computation_freq
    }

    // Take field
    pub fn take_intr_computation_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.intr_computation_freq, ::std::string::String::new())
    }

    // string is_floating_rt = 10;


    pub fn get_is_floating_rt(&self) -> &str {
        &self.is_floating_rt
    }
    pub fn clear_is_floating_rt(&mut self) {
        self.is_floating_rt.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_floating_rt(&mut self, v: ::std::string::String) {
        self.is_floating_rt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_floating_rt(&mut self) -> &mut ::std::string::String {
        &mut self.is_floating_rt
    }

    // Take field
    pub fn take_is_floating_rt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_floating_rt, ::std::string::String::new())
    }

    // string floating_rt_benchmark = 11;


    pub fn get_floating_rt_benchmark(&self) -> &str {
        &self.floating_rt_benchmark
    }
    pub fn clear_floating_rt_benchmark(&mut self) {
        self.floating_rt_benchmark.clear();
    }

    // Param is passed by value, moved
    pub fn set_floating_rt_benchmark(&mut self, v: ::std::string::String) {
        self.floating_rt_benchmark = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_floating_rt_benchmark(&mut self) -> &mut ::std::string::String {
        &mut self.floating_rt_benchmark
    }

    // Take field
    pub fn take_floating_rt_benchmark(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.floating_rt_benchmark, ::std::string::String::new())
    }

    // string biz_uid = 12;


    pub fn get_biz_uid(&self) -> &str {
        &self.biz_uid
    }
    pub fn clear_biz_uid(&mut self) {
        self.biz_uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_biz_uid(&mut self, v: ::std::string::String) {
        self.biz_uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_biz_uid(&mut self) -> &mut ::std::string::String {
        &mut self.biz_uid
    }

    // Take field
    pub fn take_biz_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.biz_uid, ::std::string::String::new())
    }

    // string cust_id = 13;


    pub fn get_cust_id(&self) -> &str {
        &self.cust_id
    }
    pub fn clear_cust_id(&mut self) {
        self.cust_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: ::std::string::String) {
        self.cust_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_id
    }

    // Take field
    pub fn take_cust_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_id, ::std::string::String::new())
    }

    // string cust_name = 14;


    pub fn get_cust_name(&self) -> &str {
        &self.cust_name
    }
    pub fn clear_cust_name(&mut self) {
        self.cust_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_name(&mut self, v: ::std::string::String) {
        self.cust_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_name
    }

    // Take field
    pub fn take_cust_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_name, ::std::string::String::new())
    }

    // double spread = 15;


    pub fn get_spread(&self) -> f64 {
        self.spread
    }
    pub fn clear_spread(&mut self) {
        self.spread = 0.;
    }

    // Param is passed by value, moved
    pub fn set_spread(&mut self, v: f64) {
        self.spread = v;
    }

    // string schm_code = 16;


    pub fn get_schm_code(&self) -> &str {
        &self.schm_code
    }
    pub fn clear_schm_code(&mut self) {
        self.schm_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_schm_code(&mut self, v: ::std::string::String) {
        self.schm_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schm_code(&mut self) -> &mut ::std::string::String {
        &mut self.schm_code
    }

    // Take field
    pub fn take_schm_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schm_code, ::std::string::String::new())
    }

    // double min_intr_rt = 17;


    pub fn get_min_intr_rt(&self) -> f64 {
        self.min_intr_rt
    }
    pub fn clear_min_intr_rt(&mut self) {
        self.min_intr_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_min_intr_rt(&mut self, v: f64) {
        self.min_intr_rt = v;
    }

    // double max_intr_rt = 18;


    pub fn get_max_intr_rt(&self) -> f64 {
        self.max_intr_rt
    }
    pub fn clear_max_intr_rt(&mut self) {
        self.max_intr_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_max_intr_rt(&mut self, v: f64) {
        self.max_intr_rt = v;
    }

    // double deposit_amt = 19;


    pub fn get_deposit_amt(&self) -> f64 {
        self.deposit_amt
    }
    pub fn clear_deposit_amt(&mut self) {
        self.deposit_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_deposit_amt(&mut self, v: f64) {
        self.deposit_amt = v;
    }

    // double maturity_amt = 20;


    pub fn get_maturity_amt(&self) -> f64 {
        self.maturity_amt
    }
    pub fn clear_maturity_amt(&mut self) {
        self.maturity_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_maturity_amt(&mut self, v: f64) {
        self.maturity_amt = v;
    }

    // double currency_conversion_rate = 21;


    pub fn get_currency_conversion_rate(&self) -> f64 {
        self.currency_conversion_rate
    }
    pub fn clear_currency_conversion_rate(&mut self) {
        self.currency_conversion_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_currency_conversion_rate(&mut self, v: f64) {
        self.currency_conversion_rate = v;
    }

    // string cust_ctry_code = 22;


    pub fn get_cust_ctry_code(&self) -> &str {
        &self.cust_ctry_code
    }
    pub fn clear_cust_ctry_code(&mut self) {
        self.cust_ctry_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_ctry_code(&mut self, v: ::std::string::String) {
        self.cust_ctry_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_ctry_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_ctry_code
    }

    // Take field
    pub fn take_cust_ctry_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_ctry_code, ::std::string::String::new())
    }

    // string cust_crdt_rtng = 23;


    pub fn get_cust_crdt_rtng(&self) -> &str {
        &self.cust_crdt_rtng
    }
    pub fn clear_cust_crdt_rtng(&mut self) {
        self.cust_crdt_rtng.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_crdt_rtng(&mut self, v: ::std::string::String) {
        self.cust_crdt_rtng = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_crdt_rtng(&mut self) -> &mut ::std::string::String {
        &mut self.cust_crdt_rtng
    }

    // Take field
    pub fn take_cust_crdt_rtng(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_crdt_rtng, ::std::string::String::new())
    }

    // string cust_sect_code = 24;


    pub fn get_cust_sect_code(&self) -> &str {
        &self.cust_sect_code
    }
    pub fn clear_cust_sect_code(&mut self) {
        self.cust_sect_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_sect_code(&mut self, v: ::std::string::String) {
        self.cust_sect_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_sect_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_sect_code
    }

    // Take field
    pub fn take_cust_sect_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_sect_code, ::std::string::String::new())
    }

    // string cust_indt_code = 25;


    pub fn get_cust_indt_code(&self) -> &str {
        &self.cust_indt_code
    }
    pub fn clear_cust_indt_code(&mut self) {
        self.cust_indt_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_indt_code(&mut self, v: ::std::string::String) {
        self.cust_indt_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_indt_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_indt_code
    }

    // Take field
    pub fn take_cust_indt_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_indt_code, ::std::string::String::new())
    }

    // string custom1 = 26;


    pub fn get_custom1(&self) -> &str {
        &self.custom1
    }
    pub fn clear_custom1(&mut self) {
        self.custom1.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom1(&mut self, v: ::std::string::String) {
        self.custom1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom1(&mut self) -> &mut ::std::string::String {
        &mut self.custom1
    }

    // Take field
    pub fn take_custom1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom1, ::std::string::String::new())
    }

    // string custom2 = 27;


    pub fn get_custom2(&self) -> &str {
        &self.custom2
    }
    pub fn clear_custom2(&mut self) {
        self.custom2.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom2(&mut self, v: ::std::string::String) {
        self.custom2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom2(&mut self) -> &mut ::std::string::String {
        &mut self.custom2
    }

    // Take field
    pub fn take_custom2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom2, ::std::string::String::new())
    }

    // string gl_sub_head_code = 28;


    pub fn get_gl_sub_head_code(&self) -> &str {
        &self.gl_sub_head_code
    }
    pub fn clear_gl_sub_head_code(&mut self) {
        self.gl_sub_head_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_sub_head_code(&mut self, v: ::std::string::String) {
        self.gl_sub_head_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_sub_head_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_sub_head_code
    }

    // Take field
    pub fn take_gl_sub_head_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_sub_head_code, ::std::string::String::new())
    }

    // string cust_hlth_code = 29;


    pub fn get_cust_hlth_code(&self) -> &str {
        &self.cust_hlth_code
    }
    pub fn clear_cust_hlth_code(&mut self) {
        self.cust_hlth_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_hlth_code(&mut self, v: ::std::string::String) {
        self.cust_hlth_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_hlth_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_hlth_code
    }

    // Take field
    pub fn take_cust_hlth_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_hlth_code, ::std::string::String::new())
    }

    // string schm_type = 30;


    pub fn get_schm_type(&self) -> &str {
        &self.schm_type
    }
    pub fn clear_schm_type(&mut self) {
        self.schm_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_schm_type(&mut self, v: ::std::string::String) {
        self.schm_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schm_type(&mut self) -> &mut ::std::string::String {
        &mut self.schm_type
    }

    // Take field
    pub fn take_schm_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schm_type, ::std::string::String::new())
    }

    // repeated .Cashflow cashflows = 31;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amount = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.intr_rate = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.repricing_freq)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.early_dt = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_dt = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_number)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.start_dt = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.intr_computation_freq)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_floating_rt)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.floating_rt_benchmark)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.biz_uid)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_id)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_name)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.spread = tmp;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schm_code)?;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.min_intr_rt = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.max_intr_rt = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.deposit_amt = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.maturity_amt = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.currency_conversion_rate = tmp;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_ctry_code)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_crdt_rtng)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_sect_code)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_indt_code)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom1)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom2)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_sub_head_code)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_hlth_code)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schm_type)?;
                },
                31 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.amount != 0. {
            my_size += 9;
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ccy);
        }
        if self.intr_rate != 0. {
            my_size += 9;
        }
        if !self.repricing_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.repricing_freq);
        }
        if self.early_dt != 0 {
            my_size += ::protobuf::rt::value_size(5, self.early_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_dt != 0 {
            my_size += ::protobuf::rt::value_size(6, self.maturity_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.deal_number.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.deal_number);
        }
        if self.start_dt != 0 {
            my_size += ::protobuf::rt::value_size(8, self.start_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.intr_computation_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.intr_computation_freq);
        }
        if !self.is_floating_rt.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.is_floating_rt);
        }
        if !self.floating_rt_benchmark.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.floating_rt_benchmark);
        }
        if !self.biz_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.biz_uid);
        }
        if !self.cust_id.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.cust_id);
        }
        if !self.cust_name.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.cust_name);
        }
        if self.spread != 0. {
            my_size += 9;
        }
        if !self.schm_code.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.schm_code);
        }
        if self.min_intr_rt != 0. {
            my_size += 10;
        }
        if self.max_intr_rt != 0. {
            my_size += 10;
        }
        if self.deposit_amt != 0. {
            my_size += 10;
        }
        if self.maturity_amt != 0. {
            my_size += 10;
        }
        if self.currency_conversion_rate != 0. {
            my_size += 10;
        }
        if !self.cust_ctry_code.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.cust_ctry_code);
        }
        if !self.cust_crdt_rtng.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.cust_crdt_rtng);
        }
        if !self.cust_sect_code.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.cust_sect_code);
        }
        if !self.cust_indt_code.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.cust_indt_code);
        }
        if !self.custom1.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.custom1);
        }
        if !self.custom2.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.custom2);
        }
        if !self.gl_sub_head_code.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.gl_sub_head_code);
        }
        if !self.cust_hlth_code.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.cust_hlth_code);
        }
        if !self.schm_type.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.schm_type);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.amount != 0. {
            os.write_double(1, self.amount)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(2, &self.ccy)?;
        }
        if self.intr_rate != 0. {
            os.write_double(3, self.intr_rate)?;
        }
        if !self.repricing_freq.is_empty() {
            os.write_string(4, &self.repricing_freq)?;
        }
        if self.early_dt != 0 {
            os.write_int64(5, self.early_dt)?;
        }
        if self.maturity_dt != 0 {
            os.write_int64(6, self.maturity_dt)?;
        }
        if !self.deal_number.is_empty() {
            os.write_string(7, &self.deal_number)?;
        }
        if self.start_dt != 0 {
            os.write_int64(8, self.start_dt)?;
        }
        if !self.intr_computation_freq.is_empty() {
            os.write_string(9, &self.intr_computation_freq)?;
        }
        if !self.is_floating_rt.is_empty() {
            os.write_string(10, &self.is_floating_rt)?;
        }
        if !self.floating_rt_benchmark.is_empty() {
            os.write_string(11, &self.floating_rt_benchmark)?;
        }
        if !self.biz_uid.is_empty() {
            os.write_string(12, &self.biz_uid)?;
        }
        if !self.cust_id.is_empty() {
            os.write_string(13, &self.cust_id)?;
        }
        if !self.cust_name.is_empty() {
            os.write_string(14, &self.cust_name)?;
        }
        if self.spread != 0. {
            os.write_double(15, self.spread)?;
        }
        if !self.schm_code.is_empty() {
            os.write_string(16, &self.schm_code)?;
        }
        if self.min_intr_rt != 0. {
            os.write_double(17, self.min_intr_rt)?;
        }
        if self.max_intr_rt != 0. {
            os.write_double(18, self.max_intr_rt)?;
        }
        if self.deposit_amt != 0. {
            os.write_double(19, self.deposit_amt)?;
        }
        if self.maturity_amt != 0. {
            os.write_double(20, self.maturity_amt)?;
        }
        if self.currency_conversion_rate != 0. {
            os.write_double(21, self.currency_conversion_rate)?;
        }
        if !self.cust_ctry_code.is_empty() {
            os.write_string(22, &self.cust_ctry_code)?;
        }
        if !self.cust_crdt_rtng.is_empty() {
            os.write_string(23, &self.cust_crdt_rtng)?;
        }
        if !self.cust_sect_code.is_empty() {
            os.write_string(24, &self.cust_sect_code)?;
        }
        if !self.cust_indt_code.is_empty() {
            os.write_string(25, &self.cust_indt_code)?;
        }
        if !self.custom1.is_empty() {
            os.write_string(26, &self.custom1)?;
        }
        if !self.custom2.is_empty() {
            os.write_string(27, &self.custom2)?;
        }
        if !self.gl_sub_head_code.is_empty() {
            os.write_string(28, &self.gl_sub_head_code)?;
        }
        if !self.cust_hlth_code.is_empty() {
            os.write_string(29, &self.cust_hlth_code)?;
        }
        if !self.schm_type.is_empty() {
            os.write_string(30, &self.schm_type)?;
        }
        for v in &self.cashflows {
            os.write_tag(31, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "amount",
                |m: &AccountWithCashflows| { &m.amount },
                |m: &mut AccountWithCashflows| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ccy",
                |m: &AccountWithCashflows| { &m.ccy },
                |m: &mut AccountWithCashflows| { &mut m.ccy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "intr_rate",
                |m: &AccountWithCashflows| { &m.intr_rate },
                |m: &mut AccountWithCashflows| { &mut m.intr_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "repricing_freq",
                |m: &AccountWithCashflows| { &m.repricing_freq },
                |m: &mut AccountWithCashflows| { &mut m.repricing_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "early_dt",
                |m: &AccountWithCashflows| { &m.early_dt },
                |m: &mut AccountWithCashflows| { &mut m.early_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "maturity_dt",
                |m: &AccountWithCashflows| { &m.maturity_dt },
                |m: &mut AccountWithCashflows| { &mut m.maturity_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "deal_number",
                |m: &AccountWithCashflows| { &m.deal_number },
                |m: &mut AccountWithCashflows| { &mut m.deal_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "start_dt",
                |m: &AccountWithCashflows| { &m.start_dt },
                |m: &mut AccountWithCashflows| { &mut m.start_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "intr_computation_freq",
                |m: &AccountWithCashflows| { &m.intr_computation_freq },
                |m: &mut AccountWithCashflows| { &mut m.intr_computation_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "is_floating_rt",
                |m: &AccountWithCashflows| { &m.is_floating_rt },
                |m: &mut AccountWithCashflows| { &mut m.is_floating_rt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "floating_rt_benchmark",
                |m: &AccountWithCashflows| { &m.floating_rt_benchmark },
                |m: &mut AccountWithCashflows| { &mut m.floating_rt_benchmark },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "biz_uid",
                |m: &AccountWithCashflows| { &m.biz_uid },
                |m: &mut AccountWithCashflows| { &mut m.biz_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_id",
                |m: &AccountWithCashflows| { &m.cust_id },
                |m: &mut AccountWithCashflows| { &mut m.cust_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_name",
                |m: &AccountWithCashflows| { &m.cust_name },
                |m: &mut AccountWithCashflows| { &mut m.cust_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "spread",
                |m: &AccountWithCashflows| { &m.spread },
                |m: &mut AccountWithCashflows| { &mut m.spread },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "schm_code",
                |m: &AccountWithCashflows| { &m.schm_code },
                |m: &mut AccountWithCashflows| { &mut m.schm_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "min_intr_rt",
                |m: &AccountWithCashflows| { &m.min_intr_rt },
                |m: &mut AccountWithCashflows| { &mut m.min_intr_rt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "max_intr_rt",
                |m: &AccountWithCashflows| { &m.max_intr_rt },
                |m: &mut AccountWithCashflows| { &mut m.max_intr_rt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "deposit_amt",
                |m: &AccountWithCashflows| { &m.deposit_amt },
                |m: &mut AccountWithCashflows| { &mut m.deposit_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "maturity_amt",
                |m: &AccountWithCashflows| { &m.maturity_amt },
                |m: &mut AccountWithCashflows| { &mut m.maturity_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "currency_conversion_rate",
                |m: &AccountWithCashflows| { &m.currency_conversion_rate },
                |m: &mut AccountWithCashflows| { &mut m.currency_conversion_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_ctry_code",
                |m: &AccountWithCashflows| { &m.cust_ctry_code },
                |m: &mut AccountWithCashflows| { &mut m.cust_ctry_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_crdt_rtng",
                |m: &AccountWithCashflows| { &m.cust_crdt_rtng },
                |m: &mut AccountWithCashflows| { &mut m.cust_crdt_rtng },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_sect_code",
                |m: &AccountWithCashflows| { &m.cust_sect_code },
                |m: &mut AccountWithCashflows| { &mut m.cust_sect_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_indt_code",
                |m: &AccountWithCashflows| { &m.cust_indt_code },
                |m: &mut AccountWithCashflows| { &mut m.cust_indt_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "custom1",
                |m: &AccountWithCashflows| { &m.custom1 },
                |m: &mut AccountWithCashflows| { &mut m.custom1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "custom2",
                |m: &AccountWithCashflows| { &m.custom2 },
                |m: &mut AccountWithCashflows| { &mut m.custom2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_sub_head_code",
                |m: &AccountWithCashflows| { &m.gl_sub_head_code },
                |m: &mut AccountWithCashflows| { &mut m.gl_sub_head_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_hlth_code",
                |m: &AccountWithCashflows| { &m.cust_hlth_code },
                |m: &mut AccountWithCashflows| { &mut m.cust_hlth_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "schm_type",
                |m: &AccountWithCashflows| { &m.schm_type },
                |m: &mut AccountWithCashflows| { &mut m.schm_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.amount = 0.;
        self.ccy.clear();
        self.intr_rate = 0.;
        self.repricing_freq.clear();
        self.early_dt = 0;
        self.maturity_dt = 0;
        self.deal_number.clear();
        self.start_dt = 0;
        self.intr_computation_freq.clear();
        self.is_floating_rt.clear();
        self.floating_rt_benchmark.clear();
        self.biz_uid.clear();
        self.cust_id.clear();
        self.cust_name.clear();
        self.spread = 0.;
        self.schm_code.clear();
        self.min_intr_rt = 0.;
        self.max_intr_rt = 0.;
        self.deposit_amt = 0.;
        self.maturity_amt = 0.;
        self.currency_conversion_rate = 0.;
        self.cust_ctry_code.clear();
        self.cust_crdt_rtng.clear();
        self.cust_sect_code.clear();
        self.cust_indt_code.clear();
        self.custom1.clear();
        self.custom2.clear();
        self.gl_sub_head_code.clear();
        self.cust_hlth_code.clear();
        self.schm_type.clear();
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11axis_Cf_td1.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\
    \x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\
    \x20\x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03\
    R\x04date\"\xad\x08\n\x14AccountWithCashflows\x12\x16\n\x06amount\x18\
    \x01\x20\x01(\x01R\x06amount\x12\x10\n\x03ccy\x18\x02\x20\x01(\tR\x03ccy\
    \x12\x1b\n\tintr_rate\x18\x03\x20\x01(\x01R\x08intrRate\x12%\n\x0erepric\
    ing_freq\x18\x04\x20\x01(\tR\rrepricingFreq\x12\x19\n\x08early_dt\x18\
    \x05\x20\x01(\x03R\x07earlyDt\x12\x1f\n\x0bmaturity_dt\x18\x06\x20\x01(\
    \x03R\nmaturityDt\x12\x1f\n\x0bdeal_number\x18\x07\x20\x01(\tR\ndealNumb\
    er\x12\x19\n\x08start_dt\x18\x08\x20\x01(\x03R\x07startDt\x122\n\x15intr\
    _computation_freq\x18\t\x20\x01(\tR\x13intrComputationFreq\x12$\n\x0eis_\
    floating_rt\x18\n\x20\x01(\tR\x0cisFloatingRt\x122\n\x15floating_rt_benc\
    hmark\x18\x0b\x20\x01(\tR\x13floatingRtBenchmark\x12\x17\n\x07biz_uid\
    \x18\x0c\x20\x01(\tR\x06bizUid\x12\x17\n\x07cust_id\x18\r\x20\x01(\tR\
    \x06custId\x12\x1b\n\tcust_name\x18\x0e\x20\x01(\tR\x08custName\x12\x16\
    \n\x06spread\x18\x0f\x20\x01(\x01R\x06spread\x12\x1b\n\tschm_code\x18\
    \x10\x20\x01(\tR\x08schmCode\x12\x1e\n\x0bmin_intr_rt\x18\x11\x20\x01(\
    \x01R\tminIntrRt\x12\x1e\n\x0bmax_intr_rt\x18\x12\x20\x01(\x01R\tmaxIntr\
    Rt\x12\x1f\n\x0bdeposit_amt\x18\x13\x20\x01(\x01R\ndepositAmt\x12!\n\x0c\
    maturity_amt\x18\x14\x20\x01(\x01R\x0bmaturityAmt\x128\n\x18currency_con\
    version_rate\x18\x15\x20\x01(\x01R\x16currencyConversionRate\x12$\n\x0ec\
    ust_ctry_code\x18\x16\x20\x01(\tR\x0ccustCtryCode\x12$\n\x0ecust_crdt_rt\
    ng\x18\x17\x20\x01(\tR\x0ccustCrdtRtng\x12$\n\x0ecust_sect_code\x18\x18\
    \x20\x01(\tR\x0ccustSectCode\x12$\n\x0ecust_indt_code\x18\x19\x20\x01(\t\
    R\x0ccustIndtCode\x12\x18\n\x07custom1\x18\x1a\x20\x01(\tR\x07custom1\
    \x12\x18\n\x07custom2\x18\x1b\x20\x01(\tR\x07custom2\x12'\n\x10gl_sub_he\
    ad_code\x18\x1c\x20\x01(\tR\rglSubHeadCode\x12$\n\x0ecust_hlth_code\x18\
    \x1d\x20\x01(\tR\x0ccustHlthCode\x12\x1b\n\tschm_type\x18\x1e\x20\x01(\t\
    R\x08schmType\x12'\n\tcashflows\x18\x1f\x20\x03(\x0b2\t.CashflowR\tcashf\
    lowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
