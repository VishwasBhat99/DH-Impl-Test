// This file is generated by rust-protobuf 2.0.6. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double prin_amt = 2;

    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_int_amt();
        self.clear_prin_amt();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub sl_no: i64,
    pub deposit_number: ::std::string::String,
    pub financial_year: ::std::string::String,
    pub demand_no: ::std::string::String,
    pub deposit_date: i64,
    pub administering_inst: ::std::string::String,
    pub gl_code: ::std::string::String,
    pub nature_of_dep: ::std::string::String,
    pub dep_type: ::std::string::String,
    pub int_rate: f64,
    pub tenor: f64,
    pub tenor_unit: ::std::string::String,
    pub investment_amt: f64,
    pub remarks: ::std::string::String,
    pub mat_date: i64,
    pub closure_date: i64,
    pub mat_amt: f64,
    pub currency: ::std::string::String,
    pub net_val: f64,
    pub gl_desc: ::std::string::String,
    pub w4b_cd: ::std::string::String,
    pub w4b_desc: ::std::string::String,
    pub balm_llg: ::std::string::String,
    pub care_llg: ::std::string::String,
    pub ba_llg: ::std::string::String,
    pub tot_int_amt: f64,
    pub tot_prin_amt: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // int64 sl_no = 1;

    pub fn clear_sl_no(&mut self) {
        self.sl_no = 0;
    }

    // Param is passed by value, moved
    pub fn set_sl_no(&mut self, v: i64) {
        self.sl_no = v;
    }

    pub fn get_sl_no(&self) -> i64 {
        self.sl_no
    }

    // string deposit_number = 2;

    pub fn clear_deposit_number(&mut self) {
        self.deposit_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_deposit_number(&mut self, v: ::std::string::String) {
        self.deposit_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deposit_number(&mut self) -> &mut ::std::string::String {
        &mut self.deposit_number
    }

    // Take field
    pub fn take_deposit_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deposit_number, ::std::string::String::new())
    }

    pub fn get_deposit_number(&self) -> &str {
        &self.deposit_number
    }

    // string financial_year = 3;

    pub fn clear_financial_year(&mut self) {
        self.financial_year.clear();
    }

    // Param is passed by value, moved
    pub fn set_financial_year(&mut self, v: ::std::string::String) {
        self.financial_year = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_financial_year(&mut self) -> &mut ::std::string::String {
        &mut self.financial_year
    }

    // Take field
    pub fn take_financial_year(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.financial_year, ::std::string::String::new())
    }

    pub fn get_financial_year(&self) -> &str {
        &self.financial_year
    }

    // string demand_no = 4;

    pub fn clear_demand_no(&mut self) {
        self.demand_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_demand_no(&mut self, v: ::std::string::String) {
        self.demand_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_demand_no(&mut self) -> &mut ::std::string::String {
        &mut self.demand_no
    }

    // Take field
    pub fn take_demand_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.demand_no, ::std::string::String::new())
    }

    pub fn get_demand_no(&self) -> &str {
        &self.demand_no
    }

    // int64 deposit_date = 5;

    pub fn clear_deposit_date(&mut self) {
        self.deposit_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_deposit_date(&mut self, v: i64) {
        self.deposit_date = v;
    }

    pub fn get_deposit_date(&self) -> i64 {
        self.deposit_date
    }

    // string administering_inst = 6;

    pub fn clear_administering_inst(&mut self) {
        self.administering_inst.clear();
    }

    // Param is passed by value, moved
    pub fn set_administering_inst(&mut self, v: ::std::string::String) {
        self.administering_inst = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_administering_inst(&mut self) -> &mut ::std::string::String {
        &mut self.administering_inst
    }

    // Take field
    pub fn take_administering_inst(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.administering_inst, ::std::string::String::new())
    }

    pub fn get_administering_inst(&self) -> &str {
        &self.administering_inst
    }

    // string gl_code = 7;

    pub fn clear_gl_code(&mut self) {
        self.gl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_code(&mut self, v: ::std::string::String) {
        self.gl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_code
    }

    // Take field
    pub fn take_gl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_code, ::std::string::String::new())
    }

    pub fn get_gl_code(&self) -> &str {
        &self.gl_code
    }

    // string nature_of_dep = 8;

    pub fn clear_nature_of_dep(&mut self) {
        self.nature_of_dep.clear();
    }

    // Param is passed by value, moved
    pub fn set_nature_of_dep(&mut self, v: ::std::string::String) {
        self.nature_of_dep = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nature_of_dep(&mut self) -> &mut ::std::string::String {
        &mut self.nature_of_dep
    }

    // Take field
    pub fn take_nature_of_dep(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nature_of_dep, ::std::string::String::new())
    }

    pub fn get_nature_of_dep(&self) -> &str {
        &self.nature_of_dep
    }

    // string dep_type = 9;

    pub fn clear_dep_type(&mut self) {
        self.dep_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_dep_type(&mut self, v: ::std::string::String) {
        self.dep_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dep_type(&mut self) -> &mut ::std::string::String {
        &mut self.dep_type
    }

    // Take field
    pub fn take_dep_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dep_type, ::std::string::String::new())
    }

    pub fn get_dep_type(&self) -> &str {
        &self.dep_type
    }

    // double int_rate = 10;

    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }

    // double tenor = 11;

    pub fn clear_tenor(&mut self) {
        self.tenor = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tenor(&mut self, v: f64) {
        self.tenor = v;
    }

    pub fn get_tenor(&self) -> f64 {
        self.tenor
    }

    // string tenor_unit = 12;

    pub fn clear_tenor_unit(&mut self) {
        self.tenor_unit.clear();
    }

    // Param is passed by value, moved
    pub fn set_tenor_unit(&mut self, v: ::std::string::String) {
        self.tenor_unit = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tenor_unit(&mut self) -> &mut ::std::string::String {
        &mut self.tenor_unit
    }

    // Take field
    pub fn take_tenor_unit(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tenor_unit, ::std::string::String::new())
    }

    pub fn get_tenor_unit(&self) -> &str {
        &self.tenor_unit
    }

    // double investment_amt = 13;

    pub fn clear_investment_amt(&mut self) {
        self.investment_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_investment_amt(&mut self, v: f64) {
        self.investment_amt = v;
    }

    pub fn get_investment_amt(&self) -> f64 {
        self.investment_amt
    }

    // string remarks = 14;

    pub fn clear_remarks(&mut self) {
        self.remarks.clear();
    }

    // Param is passed by value, moved
    pub fn set_remarks(&mut self, v: ::std::string::String) {
        self.remarks = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_remarks(&mut self) -> &mut ::std::string::String {
        &mut self.remarks
    }

    // Take field
    pub fn take_remarks(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.remarks, ::std::string::String::new())
    }

    pub fn get_remarks(&self) -> &str {
        &self.remarks
    }

    // int64 mat_date = 15;

    pub fn clear_mat_date(&mut self) {
        self.mat_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_date(&mut self, v: i64) {
        self.mat_date = v;
    }

    pub fn get_mat_date(&self) -> i64 {
        self.mat_date
    }

    // int64 closure_date = 16;

    pub fn clear_closure_date(&mut self) {
        self.closure_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_closure_date(&mut self, v: i64) {
        self.closure_date = v;
    }

    pub fn get_closure_date(&self) -> i64 {
        self.closure_date
    }

    // double mat_amt = 17;

    pub fn clear_mat_amt(&mut self) {
        self.mat_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mat_amt(&mut self, v: f64) {
        self.mat_amt = v;
    }

    pub fn get_mat_amt(&self) -> f64 {
        self.mat_amt
    }

    // string currency = 18;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // double net_val = 19;

    pub fn clear_net_val(&mut self) {
        self.net_val = 0.;
    }

    // Param is passed by value, moved
    pub fn set_net_val(&mut self, v: f64) {
        self.net_val = v;
    }

    pub fn get_net_val(&self) -> f64 {
        self.net_val
    }

    // string gl_desc = 20;

    pub fn clear_gl_desc(&mut self) {
        self.gl_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_desc(&mut self, v: ::std::string::String) {
        self.gl_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_desc(&mut self) -> &mut ::std::string::String {
        &mut self.gl_desc
    }

    // Take field
    pub fn take_gl_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_desc, ::std::string::String::new())
    }

    pub fn get_gl_desc(&self) -> &str {
        &self.gl_desc
    }

    // string w4b_cd = 21;

    pub fn clear_w4b_cd(&mut self) {
        self.w4b_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_w4b_cd(&mut self, v: ::std::string::String) {
        self.w4b_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_w4b_cd(&mut self) -> &mut ::std::string::String {
        &mut self.w4b_cd
    }

    // Take field
    pub fn take_w4b_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.w4b_cd, ::std::string::String::new())
    }

    pub fn get_w4b_cd(&self) -> &str {
        &self.w4b_cd
    }

    // string w4b_desc = 22;

    pub fn clear_w4b_desc(&mut self) {
        self.w4b_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_w4b_desc(&mut self, v: ::std::string::String) {
        self.w4b_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_w4b_desc(&mut self) -> &mut ::std::string::String {
        &mut self.w4b_desc
    }

    // Take field
    pub fn take_w4b_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.w4b_desc, ::std::string::String::new())
    }

    pub fn get_w4b_desc(&self) -> &str {
        &self.w4b_desc
    }

    // string balm_llg = 23;

    pub fn clear_balm_llg(&mut self) {
        self.balm_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_balm_llg(&mut self, v: ::std::string::String) {
        self.balm_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balm_llg(&mut self) -> &mut ::std::string::String {
        &mut self.balm_llg
    }

    // Take field
    pub fn take_balm_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balm_llg, ::std::string::String::new())
    }

    pub fn get_balm_llg(&self) -> &str {
        &self.balm_llg
    }

    // string care_llg = 24;

    pub fn clear_care_llg(&mut self) {
        self.care_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_care_llg(&mut self, v: ::std::string::String) {
        self.care_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_care_llg(&mut self) -> &mut ::std::string::String {
        &mut self.care_llg
    }

    // Take field
    pub fn take_care_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.care_llg, ::std::string::String::new())
    }

    pub fn get_care_llg(&self) -> &str {
        &self.care_llg
    }

    // string ba_llg = 25;

    pub fn clear_ba_llg(&mut self) {
        self.ba_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_ba_llg(&mut self, v: ::std::string::String) {
        self.ba_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ba_llg(&mut self) -> &mut ::std::string::String {
        &mut self.ba_llg
    }

    // Take field
    pub fn take_ba_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ba_llg, ::std::string::String::new())
    }

    pub fn get_ba_llg(&self) -> &str {
        &self.ba_llg
    }

    // double tot_int_amt = 26;

    pub fn clear_tot_int_amt(&mut self) {
        self.tot_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_int_amt(&mut self, v: f64) {
        self.tot_int_amt = v;
    }

    pub fn get_tot_int_amt(&self) -> f64 {
        self.tot_int_amt
    }

    // double tot_prin_amt = 27;

    pub fn clear_tot_prin_amt(&mut self) {
        self.tot_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_prin_amt(&mut self, v: f64) {
        self.tot_prin_amt = v;
    }

    pub fn get_tot_prin_amt(&self) -> f64 {
        self.tot_prin_amt
    }

    // repeated .Cashflow cashflows = 28;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.sl_no = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deposit_number)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.financial_year)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.demand_no)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deposit_date = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.administering_inst)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_code)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nature_of_dep)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dep_type)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tenor = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tenor_unit)?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.investment_amt = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.remarks)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_date = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.closure_date = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.mat_amt = tmp;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.net_val = tmp;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_desc)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.w4b_cd)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.w4b_desc)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.balm_llg)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.care_llg)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ba_llg)?;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_int_amt = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_prin_amt = tmp;
                },
                28 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sl_no != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sl_no, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.deposit_number.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.deposit_number);
        }
        if !self.financial_year.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.financial_year);
        }
        if !self.demand_no.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.demand_no);
        }
        if self.deposit_date != 0 {
            my_size += ::protobuf::rt::value_size(5, self.deposit_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.administering_inst.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.administering_inst);
        }
        if !self.gl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.gl_code);
        }
        if !self.nature_of_dep.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.nature_of_dep);
        }
        if !self.dep_type.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.dep_type);
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if self.tenor != 0. {
            my_size += 9;
        }
        if !self.tenor_unit.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.tenor_unit);
        }
        if self.investment_amt != 0. {
            my_size += 9;
        }
        if !self.remarks.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.remarks);
        }
        if self.mat_date != 0 {
            my_size += ::protobuf::rt::value_size(15, self.mat_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.closure_date != 0 {
            my_size += ::protobuf::rt::value_size(16, self.closure_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mat_amt != 0. {
            my_size += 10;
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.currency);
        }
        if self.net_val != 0. {
            my_size += 10;
        }
        if !self.gl_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.gl_desc);
        }
        if !self.w4b_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.w4b_cd);
        }
        if !self.w4b_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.w4b_desc);
        }
        if !self.balm_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.balm_llg);
        }
        if !self.care_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.care_llg);
        }
        if !self.ba_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.ba_llg);
        }
        if self.tot_int_amt != 0. {
            my_size += 10;
        }
        if self.tot_prin_amt != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.sl_no != 0 {
            os.write_int64(1, self.sl_no)?;
        }
        if !self.deposit_number.is_empty() {
            os.write_string(2, &self.deposit_number)?;
        }
        if !self.financial_year.is_empty() {
            os.write_string(3, &self.financial_year)?;
        }
        if !self.demand_no.is_empty() {
            os.write_string(4, &self.demand_no)?;
        }
        if self.deposit_date != 0 {
            os.write_int64(5, self.deposit_date)?;
        }
        if !self.administering_inst.is_empty() {
            os.write_string(6, &self.administering_inst)?;
        }
        if !self.gl_code.is_empty() {
            os.write_string(7, &self.gl_code)?;
        }
        if !self.nature_of_dep.is_empty() {
            os.write_string(8, &self.nature_of_dep)?;
        }
        if !self.dep_type.is_empty() {
            os.write_string(9, &self.dep_type)?;
        }
        if self.int_rate != 0. {
            os.write_double(10, self.int_rate)?;
        }
        if self.tenor != 0. {
            os.write_double(11, self.tenor)?;
        }
        if !self.tenor_unit.is_empty() {
            os.write_string(12, &self.tenor_unit)?;
        }
        if self.investment_amt != 0. {
            os.write_double(13, self.investment_amt)?;
        }
        if !self.remarks.is_empty() {
            os.write_string(14, &self.remarks)?;
        }
        if self.mat_date != 0 {
            os.write_int64(15, self.mat_date)?;
        }
        if self.closure_date != 0 {
            os.write_int64(16, self.closure_date)?;
        }
        if self.mat_amt != 0. {
            os.write_double(17, self.mat_amt)?;
        }
        if !self.currency.is_empty() {
            os.write_string(18, &self.currency)?;
        }
        if self.net_val != 0. {
            os.write_double(19, self.net_val)?;
        }
        if !self.gl_desc.is_empty() {
            os.write_string(20, &self.gl_desc)?;
        }
        if !self.w4b_cd.is_empty() {
            os.write_string(21, &self.w4b_cd)?;
        }
        if !self.w4b_desc.is_empty() {
            os.write_string(22, &self.w4b_desc)?;
        }
        if !self.balm_llg.is_empty() {
            os.write_string(23, &self.balm_llg)?;
        }
        if !self.care_llg.is_empty() {
            os.write_string(24, &self.care_llg)?;
        }
        if !self.ba_llg.is_empty() {
            os.write_string(25, &self.ba_llg)?;
        }
        if self.tot_int_amt != 0. {
            os.write_double(26, self.tot_int_amt)?;
        }
        if self.tot_prin_amt != 0. {
            os.write_double(27, self.tot_prin_amt)?;
        }
        for v in &self.cashflows {
            os.write_tag(28, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "sl_no",
                    |m: &AccountWithCashflows| { &m.sl_no },
                    |m: &mut AccountWithCashflows| { &mut m.sl_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deposit_number",
                    |m: &AccountWithCashflows| { &m.deposit_number },
                    |m: &mut AccountWithCashflows| { &mut m.deposit_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "financial_year",
                    |m: &AccountWithCashflows| { &m.financial_year },
                    |m: &mut AccountWithCashflows| { &mut m.financial_year },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "demand_no",
                    |m: &AccountWithCashflows| { &m.demand_no },
                    |m: &mut AccountWithCashflows| { &mut m.demand_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "deposit_date",
                    |m: &AccountWithCashflows| { &m.deposit_date },
                    |m: &mut AccountWithCashflows| { &mut m.deposit_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "administering_inst",
                    |m: &AccountWithCashflows| { &m.administering_inst },
                    |m: &mut AccountWithCashflows| { &mut m.administering_inst },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gl_code",
                    |m: &AccountWithCashflows| { &m.gl_code },
                    |m: &mut AccountWithCashflows| { &mut m.gl_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "nature_of_dep",
                    |m: &AccountWithCashflows| { &m.nature_of_dep },
                    |m: &mut AccountWithCashflows| { &mut m.nature_of_dep },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dep_type",
                    |m: &AccountWithCashflows| { &m.dep_type },
                    |m: &mut AccountWithCashflows| { &mut m.dep_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rate",
                    |m: &AccountWithCashflows| { &m.int_rate },
                    |m: &mut AccountWithCashflows| { &mut m.int_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tenor",
                    |m: &AccountWithCashflows| { &m.tenor },
                    |m: &mut AccountWithCashflows| { &mut m.tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "tenor_unit",
                    |m: &AccountWithCashflows| { &m.tenor_unit },
                    |m: &mut AccountWithCashflows| { &mut m.tenor_unit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "investment_amt",
                    |m: &AccountWithCashflows| { &m.investment_amt },
                    |m: &mut AccountWithCashflows| { &mut m.investment_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "remarks",
                    |m: &AccountWithCashflows| { &m.remarks },
                    |m: &mut AccountWithCashflows| { &mut m.remarks },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "mat_date",
                    |m: &AccountWithCashflows| { &m.mat_date },
                    |m: &mut AccountWithCashflows| { &mut m.mat_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "closure_date",
                    |m: &AccountWithCashflows| { &m.closure_date },
                    |m: &mut AccountWithCashflows| { &mut m.closure_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "mat_amt",
                    |m: &AccountWithCashflows| { &m.mat_amt },
                    |m: &mut AccountWithCashflows| { &mut m.mat_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &AccountWithCashflows| { &m.currency },
                    |m: &mut AccountWithCashflows| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "net_val",
                    |m: &AccountWithCashflows| { &m.net_val },
                    |m: &mut AccountWithCashflows| { &mut m.net_val },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gl_desc",
                    |m: &AccountWithCashflows| { &m.gl_desc },
                    |m: &mut AccountWithCashflows| { &mut m.gl_desc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "w4b_cd",
                    |m: &AccountWithCashflows| { &m.w4b_cd },
                    |m: &mut AccountWithCashflows| { &mut m.w4b_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "w4b_desc",
                    |m: &AccountWithCashflows| { &m.w4b_desc },
                    |m: &mut AccountWithCashflows| { &mut m.w4b_desc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "balm_llg",
                    |m: &AccountWithCashflows| { &m.balm_llg },
                    |m: &mut AccountWithCashflows| { &mut m.balm_llg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "care_llg",
                    |m: &AccountWithCashflows| { &m.care_llg },
                    |m: &mut AccountWithCashflows| { &mut m.care_llg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ba_llg",
                    |m: &AccountWithCashflows| { &m.ba_llg },
                    |m: &mut AccountWithCashflows| { &mut m.ba_llg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_int_amt",
                    |m: &AccountWithCashflows| { &m.tot_int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.tot_int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_prin_amt",
                    |m: &AccountWithCashflows| { &m.tot_prin_amt },
                    |m: &mut AccountWithCashflows| { &mut m.tot_prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_sl_no();
        self.clear_deposit_number();
        self.clear_financial_year();
        self.clear_demand_no();
        self.clear_deposit_date();
        self.clear_administering_inst();
        self.clear_gl_code();
        self.clear_nature_of_dep();
        self.clear_dep_type();
        self.clear_int_rate();
        self.clear_tenor();
        self.clear_tenor_unit();
        self.clear_investment_amt();
        self.clear_remarks();
        self.clear_mat_date();
        self.clear_closure_date();
        self.clear_mat_amt();
        self.clear_currency();
        self.clear_net_val();
        self.clear_gl_desc();
        self.clear_w4b_cd();
        self.clear_w4b_desc();
        self.clear_balm_llg();
        self.clear_care_llg();
        self.clear_ba_llg();
        self.clear_tot_int_amt();
        self.clear_tot_prin_amt();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\
    \x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prin\
    Amt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xe0\x06\n\x14Accou\
    ntWithCashflows\x12\x13\n\x05sl_no\x18\x01\x20\x01(\x03R\x04slNo\x12%\n\
    \x0edeposit_number\x18\x02\x20\x01(\tR\rdepositNumber\x12%\n\x0efinancia\
    l_year\x18\x03\x20\x01(\tR\rfinancialYear\x12\x1b\n\tdemand_no\x18\x04\
    \x20\x01(\tR\x08demandNo\x12!\n\x0cdeposit_date\x18\x05\x20\x01(\x03R\
    \x0bdepositDate\x12-\n\x12administering_inst\x18\x06\x20\x01(\tR\x11admi\
    nisteringInst\x12\x17\n\x07gl_code\x18\x07\x20\x01(\tR\x06glCode\x12\"\n\
    \rnature_of_dep\x18\x08\x20\x01(\tR\x0bnatureOfDep\x12\x19\n\x08dep_type\
    \x18\t\x20\x01(\tR\x07depType\x12\x19\n\x08int_rate\x18\n\x20\x01(\x01R\
    \x07intRate\x12\x14\n\x05tenor\x18\x0b\x20\x01(\x01R\x05tenor\x12\x1d\n\
    \ntenor_unit\x18\x0c\x20\x01(\tR\ttenorUnit\x12%\n\x0einvestment_amt\x18\
    \r\x20\x01(\x01R\rinvestmentAmt\x12\x18\n\x07remarks\x18\x0e\x20\x01(\tR\
    \x07remarks\x12\x19\n\x08mat_date\x18\x0f\x20\x01(\x03R\x07matDate\x12!\
    \n\x0cclosure_date\x18\x10\x20\x01(\x03R\x0bclosureDate\x12\x17\n\x07mat\
    _amt\x18\x11\x20\x01(\x01R\x06matAmt\x12\x1a\n\x08currency\x18\x12\x20\
    \x01(\tR\x08currency\x12\x17\n\x07net_val\x18\x13\x20\x01(\x01R\x06netVa\
    l\x12\x17\n\x07gl_desc\x18\x14\x20\x01(\tR\x06glDesc\x12\x15\n\x06w4b_cd\
    \x18\x15\x20\x01(\tR\x05w4bCd\x12\x19\n\x08w4b_desc\x18\x16\x20\x01(\tR\
    \x07w4bDesc\x12\x19\n\x08balm_llg\x18\x17\x20\x01(\tR\x07balmLlg\x12\x19\
    \n\x08care_llg\x18\x18\x20\x01(\tR\x07careLlg\x12\x15\n\x06ba_llg\x18\
    \x19\x20\x01(\tR\x05baLlg\x12\x1e\n\x0btot_int_amt\x18\x1a\x20\x01(\x01R\
    \ttotIntAmt\x12\x20\n\x0ctot_prin_amt\x18\x1b\x20\x01(\x01R\ntotPrinAmt\
    \x12'\n\tcashflows\x18\x1c\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06prot\
    o3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
