// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // double principal_amount = 2;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_amount",
                    |m: &Cashflow| { &m.interest_amount },
                    |m: &mut Cashflow| { &mut m.interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal_amount",
                    |m: &Cashflow| { &m.principal_amount },
                    |m: &mut Cashflow| { &mut m.principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_interest_amount();
        self.clear_principal_amount();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub flow_id: ::std::string::String,
    pub group_id: i64,
    pub sub_group_id: i64,
    pub amount: f64,
    pub currency: ::std::string::String,
    pub int_rate: f64,
    pub repr_freq: ::std::string::String,
    pub early_date: i64,
    pub maturity_date: i64,
    pub account_id: ::std::string::String,
    pub start_date: i64,
    pub int_freq: ::std::string::String,
    pub is_floating_rate: ::std::string::String,
    pub floating_bnchmrk: ::std::string::String,
    pub business_unit_id: ::std::string::String,
    pub cust_id: ::std::string::String,
    pub cust_name: ::std::string::String,
    pub spread: ::std::string::String,
    pub scheme_code: ::std::string::String,
    pub min_ir: f64,
    pub max_ir: f64,
    pub principal_amount: f64,
    pub maturity_value: f64,
    pub ccy_conv_rate: f64,
    pub cust_cnrty_code: ::std::string::String,
    pub cust_crd_rating: ::std::string::String,
    pub cust_sec_code: ::std::string::String,
    pub cust_indt_code: ::std::string::String,
    pub custom1: ::std::string::String,
    pub custom2: ::std::string::String,
    pub waiver: ::std::string::String,
    pub maturity_modify: ::std::string::String,
    pub as_on_date: i64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string flow_id = 1;

    pub fn clear_flow_id(&mut self) {
        self.flow_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_flow_id(&mut self, v: ::std::string::String) {
        self.flow_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flow_id(&mut self) -> &mut ::std::string::String {
        &mut self.flow_id
    }

    // Take field
    pub fn take_flow_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flow_id, ::std::string::String::new())
    }

    pub fn get_flow_id(&self) -> &str {
        &self.flow_id
    }

    // int64 group_id = 2;

    pub fn clear_group_id(&mut self) {
        self.group_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_group_id(&mut self, v: i64) {
        self.group_id = v;
    }

    pub fn get_group_id(&self) -> i64 {
        self.group_id
    }

    // int64 sub_group_id = 3;

    pub fn clear_sub_group_id(&mut self) {
        self.sub_group_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_sub_group_id(&mut self, v: i64) {
        self.sub_group_id = v;
    }

    pub fn get_sub_group_id(&self) -> i64 {
        self.sub_group_id
    }

    // double amount = 4;

    pub fn clear_amount(&mut self) {
        self.amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: f64) {
        self.amount = v;
    }

    pub fn get_amount(&self) -> f64 {
        self.amount
    }

    // string currency = 5;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // double int_rate = 6;

    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }

    // string repr_freq = 7;

    pub fn clear_repr_freq(&mut self) {
        self.repr_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_repr_freq(&mut self, v: ::std::string::String) {
        self.repr_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repr_freq(&mut self) -> &mut ::std::string::String {
        &mut self.repr_freq
    }

    // Take field
    pub fn take_repr_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.repr_freq, ::std::string::String::new())
    }

    pub fn get_repr_freq(&self) -> &str {
        &self.repr_freq
    }

    // int64 early_date = 8;

    pub fn clear_early_date(&mut self) {
        self.early_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_early_date(&mut self, v: i64) {
        self.early_date = v;
    }

    pub fn get_early_date(&self) -> i64 {
        self.early_date
    }

    // int64 maturity_date = 9;

    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }

    // string account_id = 10;

    pub fn clear_account_id(&mut self) {
        self.account_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: ::std::string::String) {
        self.account_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_id(&mut self) -> &mut ::std::string::String {
        &mut self.account_id
    }

    // Take field
    pub fn take_account_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_id, ::std::string::String::new())
    }

    pub fn get_account_id(&self) -> &str {
        &self.account_id
    }

    // int64 start_date = 11;

    pub fn clear_start_date(&mut self) {
        self.start_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_date(&mut self, v: i64) {
        self.start_date = v;
    }

    pub fn get_start_date(&self) -> i64 {
        self.start_date
    }

    // string int_freq = 12;

    pub fn clear_int_freq(&mut self) {
        self.int_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_freq(&mut self, v: ::std::string::String) {
        self.int_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_freq(&mut self) -> &mut ::std::string::String {
        &mut self.int_freq
    }

    // Take field
    pub fn take_int_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_freq, ::std::string::String::new())
    }

    pub fn get_int_freq(&self) -> &str {
        &self.int_freq
    }

    // string is_floating_rate = 13;

    pub fn clear_is_floating_rate(&mut self) {
        self.is_floating_rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_floating_rate(&mut self, v: ::std::string::String) {
        self.is_floating_rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_floating_rate(&mut self) -> &mut ::std::string::String {
        &mut self.is_floating_rate
    }

    // Take field
    pub fn take_is_floating_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_floating_rate, ::std::string::String::new())
    }

    pub fn get_is_floating_rate(&self) -> &str {
        &self.is_floating_rate
    }

    // string floating_bnchmrk = 14;

    pub fn clear_floating_bnchmrk(&mut self) {
        self.floating_bnchmrk.clear();
    }

    // Param is passed by value, moved
    pub fn set_floating_bnchmrk(&mut self, v: ::std::string::String) {
        self.floating_bnchmrk = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_floating_bnchmrk(&mut self) -> &mut ::std::string::String {
        &mut self.floating_bnchmrk
    }

    // Take field
    pub fn take_floating_bnchmrk(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.floating_bnchmrk, ::std::string::String::new())
    }

    pub fn get_floating_bnchmrk(&self) -> &str {
        &self.floating_bnchmrk
    }

    // string business_unit_id = 15;

    pub fn clear_business_unit_id(&mut self) {
        self.business_unit_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_business_unit_id(&mut self, v: ::std::string::String) {
        self.business_unit_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_business_unit_id(&mut self) -> &mut ::std::string::String {
        &mut self.business_unit_id
    }

    // Take field
    pub fn take_business_unit_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.business_unit_id, ::std::string::String::new())
    }

    pub fn get_business_unit_id(&self) -> &str {
        &self.business_unit_id
    }

    // string cust_id = 16;

    pub fn clear_cust_id(&mut self) {
        self.cust_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: ::std::string::String) {
        self.cust_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_id
    }

    // Take field
    pub fn take_cust_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_id, ::std::string::String::new())
    }

    pub fn get_cust_id(&self) -> &str {
        &self.cust_id
    }

    // string cust_name = 17;

    pub fn clear_cust_name(&mut self) {
        self.cust_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_name(&mut self, v: ::std::string::String) {
        self.cust_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_name
    }

    // Take field
    pub fn take_cust_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_name, ::std::string::String::new())
    }

    pub fn get_cust_name(&self) -> &str {
        &self.cust_name
    }

    // string spread = 18;

    pub fn clear_spread(&mut self) {
        self.spread.clear();
    }

    // Param is passed by value, moved
    pub fn set_spread(&mut self, v: ::std::string::String) {
        self.spread = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spread(&mut self) -> &mut ::std::string::String {
        &mut self.spread
    }

    // Take field
    pub fn take_spread(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.spread, ::std::string::String::new())
    }

    pub fn get_spread(&self) -> &str {
        &self.spread
    }

    // string scheme_code = 19;

    pub fn clear_scheme_code(&mut self) {
        self.scheme_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_scheme_code(&mut self, v: ::std::string::String) {
        self.scheme_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scheme_code(&mut self) -> &mut ::std::string::String {
        &mut self.scheme_code
    }

    // Take field
    pub fn take_scheme_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.scheme_code, ::std::string::String::new())
    }

    pub fn get_scheme_code(&self) -> &str {
        &self.scheme_code
    }

    // double min_ir = 20;

    pub fn clear_min_ir(&mut self) {
        self.min_ir = 0.;
    }

    // Param is passed by value, moved
    pub fn set_min_ir(&mut self, v: f64) {
        self.min_ir = v;
    }

    pub fn get_min_ir(&self) -> f64 {
        self.min_ir
    }

    // double max_ir = 21;

    pub fn clear_max_ir(&mut self) {
        self.max_ir = 0.;
    }

    // Param is passed by value, moved
    pub fn set_max_ir(&mut self, v: f64) {
        self.max_ir = v;
    }

    pub fn get_max_ir(&self) -> f64 {
        self.max_ir
    }

    // double principal_amount = 22;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // double maturity_value = 23;

    pub fn clear_maturity_value(&mut self) {
        self.maturity_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_maturity_value(&mut self, v: f64) {
        self.maturity_value = v;
    }

    pub fn get_maturity_value(&self) -> f64 {
        self.maturity_value
    }

    // double ccy_conv_rate = 24;

    pub fn clear_ccy_conv_rate(&mut self) {
        self.ccy_conv_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ccy_conv_rate(&mut self, v: f64) {
        self.ccy_conv_rate = v;
    }

    pub fn get_ccy_conv_rate(&self) -> f64 {
        self.ccy_conv_rate
    }

    // string cust_cnrty_code = 25;

    pub fn clear_cust_cnrty_code(&mut self) {
        self.cust_cnrty_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_cnrty_code(&mut self, v: ::std::string::String) {
        self.cust_cnrty_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_cnrty_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_cnrty_code
    }

    // Take field
    pub fn take_cust_cnrty_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_cnrty_code, ::std::string::String::new())
    }

    pub fn get_cust_cnrty_code(&self) -> &str {
        &self.cust_cnrty_code
    }

    // string cust_crd_rating = 26;

    pub fn clear_cust_crd_rating(&mut self) {
        self.cust_crd_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_crd_rating(&mut self, v: ::std::string::String) {
        self.cust_crd_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_crd_rating(&mut self) -> &mut ::std::string::String {
        &mut self.cust_crd_rating
    }

    // Take field
    pub fn take_cust_crd_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_crd_rating, ::std::string::String::new())
    }

    pub fn get_cust_crd_rating(&self) -> &str {
        &self.cust_crd_rating
    }

    // string cust_sec_code = 27;

    pub fn clear_cust_sec_code(&mut self) {
        self.cust_sec_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_sec_code(&mut self, v: ::std::string::String) {
        self.cust_sec_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_sec_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_sec_code
    }

    // Take field
    pub fn take_cust_sec_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_sec_code, ::std::string::String::new())
    }

    pub fn get_cust_sec_code(&self) -> &str {
        &self.cust_sec_code
    }

    // string cust_indt_code = 28;

    pub fn clear_cust_indt_code(&mut self) {
        self.cust_indt_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_indt_code(&mut self, v: ::std::string::String) {
        self.cust_indt_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_indt_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_indt_code
    }

    // Take field
    pub fn take_cust_indt_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_indt_code, ::std::string::String::new())
    }

    pub fn get_cust_indt_code(&self) -> &str {
        &self.cust_indt_code
    }

    // string custom1 = 29;

    pub fn clear_custom1(&mut self) {
        self.custom1.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom1(&mut self, v: ::std::string::String) {
        self.custom1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom1(&mut self) -> &mut ::std::string::String {
        &mut self.custom1
    }

    // Take field
    pub fn take_custom1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom1, ::std::string::String::new())
    }

    pub fn get_custom1(&self) -> &str {
        &self.custom1
    }

    // string custom2 = 30;

    pub fn clear_custom2(&mut self) {
        self.custom2.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom2(&mut self, v: ::std::string::String) {
        self.custom2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom2(&mut self) -> &mut ::std::string::String {
        &mut self.custom2
    }

    // Take field
    pub fn take_custom2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom2, ::std::string::String::new())
    }

    pub fn get_custom2(&self) -> &str {
        &self.custom2
    }

    // string waiver = 31;

    pub fn clear_waiver(&mut self) {
        self.waiver.clear();
    }

    // Param is passed by value, moved
    pub fn set_waiver(&mut self, v: ::std::string::String) {
        self.waiver = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_waiver(&mut self) -> &mut ::std::string::String {
        &mut self.waiver
    }

    // Take field
    pub fn take_waiver(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.waiver, ::std::string::String::new())
    }

    pub fn get_waiver(&self) -> &str {
        &self.waiver
    }

    // string maturity_modify = 32;

    pub fn clear_maturity_modify(&mut self) {
        self.maturity_modify.clear();
    }

    // Param is passed by value, moved
    pub fn set_maturity_modify(&mut self, v: ::std::string::String) {
        self.maturity_modify = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_maturity_modify(&mut self) -> &mut ::std::string::String {
        &mut self.maturity_modify
    }

    // Take field
    pub fn take_maturity_modify(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.maturity_modify, ::std::string::String::new())
    }

    pub fn get_maturity_modify(&self) -> &str {
        &self.maturity_modify
    }

    // int64 as_on_date = 33;

    pub fn clear_as_on_date(&mut self) {
        self.as_on_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on_date(&mut self, v: i64) {
        self.as_on_date = v;
    }

    pub fn get_as_on_date(&self) -> i64 {
        self.as_on_date
    }

    // repeated .Cashflow cashflows = 34;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flow_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.group_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.sub_group_id = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amount = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.repr_freq)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.early_date = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_id)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.start_date = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_freq)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_floating_rate)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.floating_bnchmrk)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.business_unit_id)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_id)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_name)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.spread)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.scheme_code)?;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.min_ir = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.max_ir = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.maturity_value = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ccy_conv_rate = tmp;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_cnrty_code)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_crd_rating)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_sec_code)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_indt_code)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom1)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom2)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.waiver)?;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.maturity_modify)?;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on_date = tmp;
                },
                34 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.flow_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.flow_id);
        }
        if self.group_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.group_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sub_group_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.sub_group_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.amount != 0. {
            my_size += 9;
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.currency);
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if !self.repr_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.repr_freq);
        }
        if self.early_date != 0 {
            my_size += ::protobuf::rt::value_size(8, self.early_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(9, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.account_id.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.account_id);
        }
        if self.start_date != 0 {
            my_size += ::protobuf::rt::value_size(11, self.start_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.int_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.int_freq);
        }
        if !self.is_floating_rate.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.is_floating_rate);
        }
        if !self.floating_bnchmrk.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.floating_bnchmrk);
        }
        if !self.business_unit_id.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.business_unit_id);
        }
        if !self.cust_id.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.cust_id);
        }
        if !self.cust_name.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.cust_name);
        }
        if !self.spread.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.spread);
        }
        if !self.scheme_code.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.scheme_code);
        }
        if self.min_ir != 0. {
            my_size += 10;
        }
        if self.max_ir != 0. {
            my_size += 10;
        }
        if self.principal_amount != 0. {
            my_size += 10;
        }
        if self.maturity_value != 0. {
            my_size += 10;
        }
        if self.ccy_conv_rate != 0. {
            my_size += 10;
        }
        if !self.cust_cnrty_code.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.cust_cnrty_code);
        }
        if !self.cust_crd_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.cust_crd_rating);
        }
        if !self.cust_sec_code.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.cust_sec_code);
        }
        if !self.cust_indt_code.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.cust_indt_code);
        }
        if !self.custom1.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.custom1);
        }
        if !self.custom2.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.custom2);
        }
        if !self.waiver.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.waiver);
        }
        if !self.maturity_modify.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.maturity_modify);
        }
        if self.as_on_date != 0 {
            my_size += ::protobuf::rt::value_size(33, self.as_on_date, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.flow_id.is_empty() {
            os.write_string(1, &self.flow_id)?;
        }
        if self.group_id != 0 {
            os.write_int64(2, self.group_id)?;
        }
        if self.sub_group_id != 0 {
            os.write_int64(3, self.sub_group_id)?;
        }
        if self.amount != 0. {
            os.write_double(4, self.amount)?;
        }
        if !self.currency.is_empty() {
            os.write_string(5, &self.currency)?;
        }
        if self.int_rate != 0. {
            os.write_double(6, self.int_rate)?;
        }
        if !self.repr_freq.is_empty() {
            os.write_string(7, &self.repr_freq)?;
        }
        if self.early_date != 0 {
            os.write_int64(8, self.early_date)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(9, self.maturity_date)?;
        }
        if !self.account_id.is_empty() {
            os.write_string(10, &self.account_id)?;
        }
        if self.start_date != 0 {
            os.write_int64(11, self.start_date)?;
        }
        if !self.int_freq.is_empty() {
            os.write_string(12, &self.int_freq)?;
        }
        if !self.is_floating_rate.is_empty() {
            os.write_string(13, &self.is_floating_rate)?;
        }
        if !self.floating_bnchmrk.is_empty() {
            os.write_string(14, &self.floating_bnchmrk)?;
        }
        if !self.business_unit_id.is_empty() {
            os.write_string(15, &self.business_unit_id)?;
        }
        if !self.cust_id.is_empty() {
            os.write_string(16, &self.cust_id)?;
        }
        if !self.cust_name.is_empty() {
            os.write_string(17, &self.cust_name)?;
        }
        if !self.spread.is_empty() {
            os.write_string(18, &self.spread)?;
        }
        if !self.scheme_code.is_empty() {
            os.write_string(19, &self.scheme_code)?;
        }
        if self.min_ir != 0. {
            os.write_double(20, self.min_ir)?;
        }
        if self.max_ir != 0. {
            os.write_double(21, self.max_ir)?;
        }
        if self.principal_amount != 0. {
            os.write_double(22, self.principal_amount)?;
        }
        if self.maturity_value != 0. {
            os.write_double(23, self.maturity_value)?;
        }
        if self.ccy_conv_rate != 0. {
            os.write_double(24, self.ccy_conv_rate)?;
        }
        if !self.cust_cnrty_code.is_empty() {
            os.write_string(25, &self.cust_cnrty_code)?;
        }
        if !self.cust_crd_rating.is_empty() {
            os.write_string(26, &self.cust_crd_rating)?;
        }
        if !self.cust_sec_code.is_empty() {
            os.write_string(27, &self.cust_sec_code)?;
        }
        if !self.cust_indt_code.is_empty() {
            os.write_string(28, &self.cust_indt_code)?;
        }
        if !self.custom1.is_empty() {
            os.write_string(29, &self.custom1)?;
        }
        if !self.custom2.is_empty() {
            os.write_string(30, &self.custom2)?;
        }
        if !self.waiver.is_empty() {
            os.write_string(31, &self.waiver)?;
        }
        if !self.maturity_modify.is_empty() {
            os.write_string(32, &self.maturity_modify)?;
        }
        if self.as_on_date != 0 {
            os.write_int64(33, self.as_on_date)?;
        }
        for v in &self.cashflows {
            os.write_tag(34, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "flow_id",
                    |m: &AccountWithCashflows| { &m.flow_id },
                    |m: &mut AccountWithCashflows| { &mut m.flow_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "group_id",
                    |m: &AccountWithCashflows| { &m.group_id },
                    |m: &mut AccountWithCashflows| { &mut m.group_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "sub_group_id",
                    |m: &AccountWithCashflows| { &m.sub_group_id },
                    |m: &mut AccountWithCashflows| { &mut m.sub_group_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "amount",
                    |m: &AccountWithCashflows| { &m.amount },
                    |m: &mut AccountWithCashflows| { &mut m.amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &AccountWithCashflows| { &m.currency },
                    |m: &mut AccountWithCashflows| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rate",
                    |m: &AccountWithCashflows| { &m.int_rate },
                    |m: &mut AccountWithCashflows| { &mut m.int_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "repr_freq",
                    |m: &AccountWithCashflows| { &m.repr_freq },
                    |m: &mut AccountWithCashflows| { &mut m.repr_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "early_date",
                    |m: &AccountWithCashflows| { &m.early_date },
                    |m: &mut AccountWithCashflows| { &mut m.early_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "maturity_date",
                    |m: &AccountWithCashflows| { &m.maturity_date },
                    |m: &mut AccountWithCashflows| { &mut m.maturity_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "account_id",
                    |m: &AccountWithCashflows| { &m.account_id },
                    |m: &mut AccountWithCashflows| { &mut m.account_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "start_date",
                    |m: &AccountWithCashflows| { &m.start_date },
                    |m: &mut AccountWithCashflows| { &mut m.start_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "int_freq",
                    |m: &AccountWithCashflows| { &m.int_freq },
                    |m: &mut AccountWithCashflows| { &mut m.int_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "is_floating_rate",
                    |m: &AccountWithCashflows| { &m.is_floating_rate },
                    |m: &mut AccountWithCashflows| { &mut m.is_floating_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "floating_bnchmrk",
                    |m: &AccountWithCashflows| { &m.floating_bnchmrk },
                    |m: &mut AccountWithCashflows| { &mut m.floating_bnchmrk },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "business_unit_id",
                    |m: &AccountWithCashflows| { &m.business_unit_id },
                    |m: &mut AccountWithCashflows| { &mut m.business_unit_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_id",
                    |m: &AccountWithCashflows| { &m.cust_id },
                    |m: &mut AccountWithCashflows| { &mut m.cust_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_name",
                    |m: &AccountWithCashflows| { &m.cust_name },
                    |m: &mut AccountWithCashflows| { &mut m.cust_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "spread",
                    |m: &AccountWithCashflows| { &m.spread },
                    |m: &mut AccountWithCashflows| { &mut m.spread },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "scheme_code",
                    |m: &AccountWithCashflows| { &m.scheme_code },
                    |m: &mut AccountWithCashflows| { &mut m.scheme_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "min_ir",
                    |m: &AccountWithCashflows| { &m.min_ir },
                    |m: &mut AccountWithCashflows| { &mut m.min_ir },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "max_ir",
                    |m: &AccountWithCashflows| { &m.max_ir },
                    |m: &mut AccountWithCashflows| { &mut m.max_ir },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal_amount",
                    |m: &AccountWithCashflows| { &m.principal_amount },
                    |m: &mut AccountWithCashflows| { &mut m.principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "maturity_value",
                    |m: &AccountWithCashflows| { &m.maturity_value },
                    |m: &mut AccountWithCashflows| { &mut m.maturity_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ccy_conv_rate",
                    |m: &AccountWithCashflows| { &m.ccy_conv_rate },
                    |m: &mut AccountWithCashflows| { &mut m.ccy_conv_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_cnrty_code",
                    |m: &AccountWithCashflows| { &m.cust_cnrty_code },
                    |m: &mut AccountWithCashflows| { &mut m.cust_cnrty_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_crd_rating",
                    |m: &AccountWithCashflows| { &m.cust_crd_rating },
                    |m: &mut AccountWithCashflows| { &mut m.cust_crd_rating },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_sec_code",
                    |m: &AccountWithCashflows| { &m.cust_sec_code },
                    |m: &mut AccountWithCashflows| { &mut m.cust_sec_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_indt_code",
                    |m: &AccountWithCashflows| { &m.cust_indt_code },
                    |m: &mut AccountWithCashflows| { &mut m.cust_indt_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "custom1",
                    |m: &AccountWithCashflows| { &m.custom1 },
                    |m: &mut AccountWithCashflows| { &mut m.custom1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "custom2",
                    |m: &AccountWithCashflows| { &m.custom2 },
                    |m: &mut AccountWithCashflows| { &mut m.custom2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "waiver",
                    |m: &AccountWithCashflows| { &m.waiver },
                    |m: &mut AccountWithCashflows| { &mut m.waiver },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "maturity_modify",
                    |m: &AccountWithCashflows| { &m.maturity_modify },
                    |m: &mut AccountWithCashflows| { &mut m.maturity_modify },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "as_on_date",
                    |m: &AccountWithCashflows| { &m.as_on_date },
                    |m: &mut AccountWithCashflows| { &mut m.as_on_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_flow_id();
        self.clear_group_id();
        self.clear_sub_group_id();
        self.clear_amount();
        self.clear_currency();
        self.clear_int_rate();
        self.clear_repr_freq();
        self.clear_early_date();
        self.clear_maturity_date();
        self.clear_account_id();
        self.clear_start_date();
        self.clear_int_freq();
        self.clear_is_floating_rate();
        self.clear_floating_bnchmrk();
        self.clear_business_unit_id();
        self.clear_cust_id();
        self.clear_cust_name();
        self.clear_spread();
        self.clear_scheme_code();
        self.clear_min_ir();
        self.clear_max_ir();
        self.clear_principal_amount();
        self.clear_maturity_value();
        self.clear_ccy_conv_rate();
        self.clear_cust_cnrty_code();
        self.clear_cust_crd_rating();
        self.clear_cust_sec_code();
        self.clear_cust_indt_code();
        self.clear_custom1();
        self.clear_custom2();
        self.clear_waiver();
        self.clear_maturity_modify();
        self.clear_as_on_date();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"proto/axis_td_penalty_waiver.proto\"r\n\x08Cashflow\x12'\n\x0fintere\
    st_amount\x18\x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_am\
    ount\x18\x02\x20\x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\
    \x20\x01(\x03R\x04date\"\xdd\x08\n\x14AccountWithCashflows\x12\x17\n\x07\
    flow_id\x18\x01\x20\x01(\tR\x06flowId\x12\x19\n\x08group_id\x18\x02\x20\
    \x01(\x03R\x07groupId\x12\x20\n\x0csub_group_id\x18\x03\x20\x01(\x03R\ns\
    ubGroupId\x12\x16\n\x06amount\x18\x04\x20\x01(\x01R\x06amount\x12\x1a\n\
    \x08currency\x18\x05\x20\x01(\tR\x08currency\x12\x19\n\x08int_rate\x18\
    \x06\x20\x01(\x01R\x07intRate\x12\x1b\n\trepr_freq\x18\x07\x20\x01(\tR\
    \x08reprFreq\x12\x1d\n\nearly_date\x18\x08\x20\x01(\x03R\tearlyDate\x12#\
    \n\rmaturity_date\x18\t\x20\x01(\x03R\x0cmaturityDate\x12\x1d\n\naccount\
    _id\x18\n\x20\x01(\tR\taccountId\x12\x1d\n\nstart_date\x18\x0b\x20\x01(\
    \x03R\tstartDate\x12\x19\n\x08int_freq\x18\x0c\x20\x01(\tR\x07intFreq\
    \x12(\n\x10is_floating_rate\x18\r\x20\x01(\tR\x0eisFloatingRate\x12)\n\
    \x10floating_bnchmrk\x18\x0e\x20\x01(\tR\x0ffloatingBnchmrk\x12(\n\x10bu\
    siness_unit_id\x18\x0f\x20\x01(\tR\x0ebusinessUnitId\x12\x17\n\x07cust_i\
    d\x18\x10\x20\x01(\tR\x06custId\x12\x1b\n\tcust_name\x18\x11\x20\x01(\tR\
    \x08custName\x12\x16\n\x06spread\x18\x12\x20\x01(\tR\x06spread\x12\x1f\n\
    \x0bscheme_code\x18\x13\x20\x01(\tR\nschemeCode\x12\x15\n\x06min_ir\x18\
    \x14\x20\x01(\x01R\x05minIr\x12\x15\n\x06max_ir\x18\x15\x20\x01(\x01R\
    \x05maxIr\x12)\n\x10principal_amount\x18\x16\x20\x01(\x01R\x0fprincipalA\
    mount\x12%\n\x0ematurity_value\x18\x17\x20\x01(\x01R\rmaturityValue\x12\
    \"\n\rccy_conv_rate\x18\x18\x20\x01(\x01R\x0bccyConvRate\x12&\n\x0fcust_\
    cnrty_code\x18\x19\x20\x01(\tR\rcustCnrtyCode\x12&\n\x0fcust_crd_rating\
    \x18\x1a\x20\x01(\tR\rcustCrdRating\x12\"\n\rcust_sec_code\x18\x1b\x20\
    \x01(\tR\x0bcustSecCode\x12$\n\x0ecust_indt_code\x18\x1c\x20\x01(\tR\x0c\
    custIndtCode\x12\x18\n\x07custom1\x18\x1d\x20\x01(\tR\x07custom1\x12\x18\
    \n\x07custom2\x18\x1e\x20\x01(\tR\x07custom2\x12\x16\n\x06waiver\x18\x1f\
    \x20\x01(\tR\x06waiver\x12'\n\x0fmaturity_modify\x18\x20\x20\x01(\tR\x0e\
    maturityModify\x12\x1c\n\nas_on_date\x18!\x20\x01(\x03R\x08asOnDate\x12'\
    \n\tcashflows\x18\"\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
