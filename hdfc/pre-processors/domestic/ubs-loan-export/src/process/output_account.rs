use rbdate::NaiveDate;

#[derive(Debug, Clone, Default)]
pub struct OutputField {
    pub counter_party_1: String,
    pub contract_ref_no: String,
    pub cust_name1: String,
    pub branch: String,
    pub int_rate: f64,
    pub accural_freq: String,
    pub booking_date: String,
    pub value_dt: String,
    pub mat_date: String,
    pub schedule_due_date: String,
    pub asst_class: String,
    pub product_code: String,
    pub gl: String,
    pub contract_ccy: String,
    pub lcy_outstand_bal: f64,
    pub component: String,
    pub amount_due: f64,
    pub amount_settled: f64,
    pub balance: f64,
    pub rate_spread: f64,
    pub comp_mis_1: i64,
    pub comp_mis_2: i64,
    pub comp_mis_3: i64,
    pub rate_code: String,
    pub rate_type: String,
    pub benchmark_rate: String,
    pub new_next_reset_date: String,
    pub new_last_reset_date: String,
    pub weaker_section: String,
    pub msme: String,
    pub call: String,
    pub call_option_date: String,
    pub put: String,
    pub put_option_date: String,
    pub last_reset_date: String,
    pub next_reset_date: String,
    pub counter_party: String,
    pub lcy_amt: f64,
    pub frequency: String,
    pub desc: String,
    pub prod_desc: String,
}

pub fn format_output(output_record: OutputField) -> String {
    format!(
        "{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}",
        output_record.counter_party_1,
        output_record.contract_ref_no,
        output_record.cust_name1,
        output_record.branch,
        output_record.int_rate,
        output_record.accural_freq,
        output_record.booking_date,
        output_record.value_dt,
        output_record.mat_date,
        output_record.schedule_due_date,
        output_record.asst_class,
        output_record.product_code,
        output_record.gl,
        output_record.contract_ccy,
        output_record.lcy_outstand_bal,
        output_record.component,
        output_record.amount_due,
        output_record.amount_settled,
        output_record.balance,
        output_record.rate_spread,
        output_record.comp_mis_1,
        output_record.comp_mis_2,
        output_record.comp_mis_3,
        output_record.rate_code,
        output_record.rate_type,
        output_record.benchmark_rate,
        output_record.new_next_reset_date,
        output_record.new_last_reset_date,
        output_record.weaker_section,
        output_record.msme,
        output_record.call,
        output_record.call_option_date,
        output_record.put,
        output_record.put_option_date,
        output_record.last_reset_date,
        output_record.next_reset_date,
        output_record.counter_party,
        output_record.lcy_amt,
        output_record.frequency,
        output_record.desc,
        output_record.prod_desc

    )
}
pub fn get_writer(file_path: &str) -> std::io::BufWriter<std::fs::File> {
    match sdb_io::buf_file_wrtr(file_path, None) {
        Ok(file) => file,
        Err(error) => panic!("Unable to create file `{}` due to: {}", file_path, error),
    }
}
