// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Account {
    // message fields
    pub deal_id: ::std::string::String,
    pub ost_prin_amt: f64,
    pub int_amt_aip: f64,
    pub int_rate: f64,
    pub mat_dt: i64,
    pub next_reset_dt: i64,
    pub mat_tenor: i64,
    pub int_tenor: i64,
    pub prin_amt: f64,
    pub int_amt: f64,
    pub int_amt_30_days: f64,
    pub tot_int_amt: f64,
    pub ccy: ::std::string::String,
    pub cust_type: ::std::string::String,
    pub pt_str_1: ::std::string::String,
    pub pt_str_2: ::std::string::String,
    pub pt_str_3: ::std::string::String,
    pub pt_str_4: ::std::string::String,
    pub pt_str_5: ::std::string::String,
    pub pt_int_1: i64,
    pub pt_int_2: i64,
    pub pt_int_3: i64,
    pub pt_int_4: i64,
    pub pt_int_5: i64,
    pub pt_f64_1: f64,
    pub pt_f64_2: f64,
    pub pt_f64_3: f64,
    pub pt_f64_4: f64,
    pub pt_f64_5: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    // string deal_id = 1;

    pub fn clear_deal_id(&mut self) {
        self.deal_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_id(&mut self, v: ::std::string::String) {
        self.deal_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_id(&mut self) -> &mut ::std::string::String {
        &mut self.deal_id
    }

    // Take field
    pub fn take_deal_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_id, ::std::string::String::new())
    }

    pub fn get_deal_id(&self) -> &str {
        &self.deal_id
    }

    // double ost_prin_amt = 2;

    pub fn clear_ost_prin_amt(&mut self) {
        self.ost_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ost_prin_amt(&mut self, v: f64) {
        self.ost_prin_amt = v;
    }

    pub fn get_ost_prin_amt(&self) -> f64 {
        self.ost_prin_amt
    }

    // double int_amt_aip = 3;

    pub fn clear_int_amt_aip(&mut self) {
        self.int_amt_aip = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_aip(&mut self, v: f64) {
        self.int_amt_aip = v;
    }

    pub fn get_int_amt_aip(&self) -> f64 {
        self.int_amt_aip
    }

    // double int_rate = 4;

    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }

    // int64 mat_dt = 5;

    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }

    // int64 next_reset_dt = 6;

    pub fn clear_next_reset_dt(&mut self) {
        self.next_reset_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_reset_dt(&mut self, v: i64) {
        self.next_reset_dt = v;
    }

    pub fn get_next_reset_dt(&self) -> i64 {
        self.next_reset_dt
    }

    // int64 mat_tenor = 7;

    pub fn clear_mat_tenor(&mut self) {
        self.mat_tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_tenor(&mut self, v: i64) {
        self.mat_tenor = v;
    }

    pub fn get_mat_tenor(&self) -> i64 {
        self.mat_tenor
    }

    // int64 int_tenor = 8;

    pub fn clear_int_tenor(&mut self) {
        self.int_tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_tenor(&mut self, v: i64) {
        self.int_tenor = v;
    }

    pub fn get_int_tenor(&self) -> i64 {
        self.int_tenor
    }

    // double prin_amt = 9;

    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }

    // double int_amt = 10;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double int_amt_30_days = 11;

    pub fn clear_int_amt_30_days(&mut self) {
        self.int_amt_30_days = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_30_days(&mut self, v: f64) {
        self.int_amt_30_days = v;
    }

    pub fn get_int_amt_30_days(&self) -> f64 {
        self.int_amt_30_days
    }

    // double tot_int_amt = 12;

    pub fn clear_tot_int_amt(&mut self) {
        self.tot_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_int_amt(&mut self, v: f64) {
        self.tot_int_amt = v;
    }

    pub fn get_tot_int_amt(&self) -> f64 {
        self.tot_int_amt
    }

    // string ccy = 13;

    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }

    // string cust_type = 14;

    pub fn clear_cust_type(&mut self) {
        self.cust_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_type(&mut self, v: ::std::string::String) {
        self.cust_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_type(&mut self) -> &mut ::std::string::String {
        &mut self.cust_type
    }

    // Take field
    pub fn take_cust_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_type, ::std::string::String::new())
    }

    pub fn get_cust_type(&self) -> &str {
        &self.cust_type
    }

    // string pt_str_1 = 15;

    pub fn clear_pt_str_1(&mut self) {
        self.pt_str_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_1(&mut self, v: ::std::string::String) {
        self.pt_str_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_1(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_1
    }

    // Take field
    pub fn take_pt_str_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_1, ::std::string::String::new())
    }

    pub fn get_pt_str_1(&self) -> &str {
        &self.pt_str_1
    }

    // string pt_str_2 = 16;

    pub fn clear_pt_str_2(&mut self) {
        self.pt_str_2.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_2(&mut self, v: ::std::string::String) {
        self.pt_str_2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_2(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_2
    }

    // Take field
    pub fn take_pt_str_2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_2, ::std::string::String::new())
    }

    pub fn get_pt_str_2(&self) -> &str {
        &self.pt_str_2
    }

    // string pt_str_3 = 17;

    pub fn clear_pt_str_3(&mut self) {
        self.pt_str_3.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_3(&mut self, v: ::std::string::String) {
        self.pt_str_3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_3(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_3
    }

    // Take field
    pub fn take_pt_str_3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_3, ::std::string::String::new())
    }

    pub fn get_pt_str_3(&self) -> &str {
        &self.pt_str_3
    }

    // string pt_str_4 = 18;

    pub fn clear_pt_str_4(&mut self) {
        self.pt_str_4.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_4(&mut self, v: ::std::string::String) {
        self.pt_str_4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_4(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_4
    }

    // Take field
    pub fn take_pt_str_4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_4, ::std::string::String::new())
    }

    pub fn get_pt_str_4(&self) -> &str {
        &self.pt_str_4
    }

    // string pt_str_5 = 19;

    pub fn clear_pt_str_5(&mut self) {
        self.pt_str_5.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_5(&mut self, v: ::std::string::String) {
        self.pt_str_5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_5(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_5
    }

    // Take field
    pub fn take_pt_str_5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_5, ::std::string::String::new())
    }

    pub fn get_pt_str_5(&self) -> &str {
        &self.pt_str_5
    }

    // int64 pt_int_1 = 20;

    pub fn clear_pt_int_1(&mut self) {
        self.pt_int_1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_int_1(&mut self, v: i64) {
        self.pt_int_1 = v;
    }

    pub fn get_pt_int_1(&self) -> i64 {
        self.pt_int_1
    }

    // int64 pt_int_2 = 21;

    pub fn clear_pt_int_2(&mut self) {
        self.pt_int_2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_int_2(&mut self, v: i64) {
        self.pt_int_2 = v;
    }

    pub fn get_pt_int_2(&self) -> i64 {
        self.pt_int_2
    }

    // int64 pt_int_3 = 22;

    pub fn clear_pt_int_3(&mut self) {
        self.pt_int_3 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_int_3(&mut self, v: i64) {
        self.pt_int_3 = v;
    }

    pub fn get_pt_int_3(&self) -> i64 {
        self.pt_int_3
    }

    // int64 pt_int_4 = 23;

    pub fn clear_pt_int_4(&mut self) {
        self.pt_int_4 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_int_4(&mut self, v: i64) {
        self.pt_int_4 = v;
    }

    pub fn get_pt_int_4(&self) -> i64 {
        self.pt_int_4
    }

    // int64 pt_int_5 = 24;

    pub fn clear_pt_int_5(&mut self) {
        self.pt_int_5 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_int_5(&mut self, v: i64) {
        self.pt_int_5 = v;
    }

    pub fn get_pt_int_5(&self) -> i64 {
        self.pt_int_5
    }

    // double pt_f64_1 = 25;

    pub fn clear_pt_f64_1(&mut self) {
        self.pt_f64_1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_1(&mut self, v: f64) {
        self.pt_f64_1 = v;
    }

    pub fn get_pt_f64_1(&self) -> f64 {
        self.pt_f64_1
    }

    // double pt_f64_2 = 26;

    pub fn clear_pt_f64_2(&mut self) {
        self.pt_f64_2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_2(&mut self, v: f64) {
        self.pt_f64_2 = v;
    }

    pub fn get_pt_f64_2(&self) -> f64 {
        self.pt_f64_2
    }

    // double pt_f64_3 = 27;

    pub fn clear_pt_f64_3(&mut self) {
        self.pt_f64_3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_3(&mut self, v: f64) {
        self.pt_f64_3 = v;
    }

    pub fn get_pt_f64_3(&self) -> f64 {
        self.pt_f64_3
    }

    // double pt_f64_4 = 28;

    pub fn clear_pt_f64_4(&mut self) {
        self.pt_f64_4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_4(&mut self, v: f64) {
        self.pt_f64_4 = v;
    }

    pub fn get_pt_f64_4(&self) -> f64 {
        self.pt_f64_4
    }

    // double pt_f64_5 = 29;

    pub fn clear_pt_f64_5(&mut self) {
        self.pt_f64_5 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_5(&mut self, v: f64) {
        self.pt_f64_5 = v;
    }

    pub fn get_pt_f64_5(&self) -> f64 {
        self.pt_f64_5
    }
}

impl ::protobuf::Message for Account {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ost_prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_aip = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_reset_dt = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_tenor = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int_tenor = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_30_days = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_int_amt = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_type)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_1)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_2)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_3)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_4)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_5)?;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_int_1 = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_int_2 = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_int_3 = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_int_4 = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_int_5 = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_1 = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_2 = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_3 = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_4 = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_5 = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.deal_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.deal_id);
        }
        if self.ost_prin_amt != 0. {
            my_size += 9;
        }
        if self.int_amt_aip != 0. {
            my_size += 9;
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if self.mat_dt != 0 {
            my_size += ::protobuf::rt::value_size(5, self.mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_reset_dt != 0 {
            my_size += ::protobuf::rt::value_size(6, self.next_reset_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mat_tenor != 0 {
            my_size += ::protobuf::rt::value_size(7, self.mat_tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_tenor != 0 {
            my_size += ::protobuf::rt::value_size(8, self.int_tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.int_amt_30_days != 0. {
            my_size += 9;
        }
        if self.tot_int_amt != 0. {
            my_size += 9;
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.ccy);
        }
        if !self.cust_type.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.cust_type);
        }
        if !self.pt_str_1.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.pt_str_1);
        }
        if !self.pt_str_2.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.pt_str_2);
        }
        if !self.pt_str_3.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.pt_str_3);
        }
        if !self.pt_str_4.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.pt_str_4);
        }
        if !self.pt_str_5.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.pt_str_5);
        }
        if self.pt_int_1 != 0 {
            my_size += ::protobuf::rt::value_size(20, self.pt_int_1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_int_2 != 0 {
            my_size += ::protobuf::rt::value_size(21, self.pt_int_2, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_int_3 != 0 {
            my_size += ::protobuf::rt::value_size(22, self.pt_int_3, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_int_4 != 0 {
            my_size += ::protobuf::rt::value_size(23, self.pt_int_4, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_int_5 != 0 {
            my_size += ::protobuf::rt::value_size(24, self.pt_int_5, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_f64_1 != 0. {
            my_size += 10;
        }
        if self.pt_f64_2 != 0. {
            my_size += 10;
        }
        if self.pt_f64_3 != 0. {
            my_size += 10;
        }
        if self.pt_f64_4 != 0. {
            my_size += 10;
        }
        if self.pt_f64_5 != 0. {
            my_size += 10;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.deal_id.is_empty() {
            os.write_string(1, &self.deal_id)?;
        }
        if self.ost_prin_amt != 0. {
            os.write_double(2, self.ost_prin_amt)?;
        }
        if self.int_amt_aip != 0. {
            os.write_double(3, self.int_amt_aip)?;
        }
        if self.int_rate != 0. {
            os.write_double(4, self.int_rate)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(5, self.mat_dt)?;
        }
        if self.next_reset_dt != 0 {
            os.write_int64(6, self.next_reset_dt)?;
        }
        if self.mat_tenor != 0 {
            os.write_int64(7, self.mat_tenor)?;
        }
        if self.int_tenor != 0 {
            os.write_int64(8, self.int_tenor)?;
        }
        if self.prin_amt != 0. {
            os.write_double(9, self.prin_amt)?;
        }
        if self.int_amt != 0. {
            os.write_double(10, self.int_amt)?;
        }
        if self.int_amt_30_days != 0. {
            os.write_double(11, self.int_amt_30_days)?;
        }
        if self.tot_int_amt != 0. {
            os.write_double(12, self.tot_int_amt)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(13, &self.ccy)?;
        }
        if !self.cust_type.is_empty() {
            os.write_string(14, &self.cust_type)?;
        }
        if !self.pt_str_1.is_empty() {
            os.write_string(15, &self.pt_str_1)?;
        }
        if !self.pt_str_2.is_empty() {
            os.write_string(16, &self.pt_str_2)?;
        }
        if !self.pt_str_3.is_empty() {
            os.write_string(17, &self.pt_str_3)?;
        }
        if !self.pt_str_4.is_empty() {
            os.write_string(18, &self.pt_str_4)?;
        }
        if !self.pt_str_5.is_empty() {
            os.write_string(19, &self.pt_str_5)?;
        }
        if self.pt_int_1 != 0 {
            os.write_int64(20, self.pt_int_1)?;
        }
        if self.pt_int_2 != 0 {
            os.write_int64(21, self.pt_int_2)?;
        }
        if self.pt_int_3 != 0 {
            os.write_int64(22, self.pt_int_3)?;
        }
        if self.pt_int_4 != 0 {
            os.write_int64(23, self.pt_int_4)?;
        }
        if self.pt_int_5 != 0 {
            os.write_int64(24, self.pt_int_5)?;
        }
        if self.pt_f64_1 != 0. {
            os.write_double(25, self.pt_f64_1)?;
        }
        if self.pt_f64_2 != 0. {
            os.write_double(26, self.pt_f64_2)?;
        }
        if self.pt_f64_3 != 0. {
            os.write_double(27, self.pt_f64_3)?;
        }
        if self.pt_f64_4 != 0. {
            os.write_double(28, self.pt_f64_4)?;
        }
        if self.pt_f64_5 != 0. {
            os.write_double(29, self.pt_f64_5)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Account {
        Account::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_id",
                    |m: &Account| { &m.deal_id },
                    |m: &mut Account| { &mut m.deal_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ost_prin_amt",
                    |m: &Account| { &m.ost_prin_amt },
                    |m: &mut Account| { &mut m.ost_prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_aip",
                    |m: &Account| { &m.int_amt_aip },
                    |m: &mut Account| { &mut m.int_amt_aip },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rate",
                    |m: &Account| { &m.int_rate },
                    |m: &mut Account| { &mut m.int_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "mat_dt",
                    |m: &Account| { &m.mat_dt },
                    |m: &mut Account| { &mut m.mat_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "next_reset_dt",
                    |m: &Account| { &m.next_reset_dt },
                    |m: &mut Account| { &mut m.next_reset_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "mat_tenor",
                    |m: &Account| { &m.mat_tenor },
                    |m: &mut Account| { &mut m.mat_tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "int_tenor",
                    |m: &Account| { &m.int_tenor },
                    |m: &mut Account| { &mut m.int_tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Account| { &m.prin_amt },
                    |m: &mut Account| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Account| { &m.int_amt },
                    |m: &mut Account| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_30_days",
                    |m: &Account| { &m.int_amt_30_days },
                    |m: &mut Account| { &mut m.int_amt_30_days },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_int_amt",
                    |m: &Account| { &m.tot_int_amt },
                    |m: &mut Account| { &mut m.tot_int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy",
                    |m: &Account| { &m.ccy },
                    |m: &mut Account| { &mut m.ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_type",
                    |m: &Account| { &m.cust_type },
                    |m: &mut Account| { &mut m.cust_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pt_str_1",
                    |m: &Account| { &m.pt_str_1 },
                    |m: &mut Account| { &mut m.pt_str_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pt_str_2",
                    |m: &Account| { &m.pt_str_2 },
                    |m: &mut Account| { &mut m.pt_str_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pt_str_3",
                    |m: &Account| { &m.pt_str_3 },
                    |m: &mut Account| { &mut m.pt_str_3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pt_str_4",
                    |m: &Account| { &m.pt_str_4 },
                    |m: &mut Account| { &mut m.pt_str_4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pt_str_5",
                    |m: &Account| { &m.pt_str_5 },
                    |m: &mut Account| { &mut m.pt_str_5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "pt_int_1",
                    |m: &Account| { &m.pt_int_1 },
                    |m: &mut Account| { &mut m.pt_int_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "pt_int_2",
                    |m: &Account| { &m.pt_int_2 },
                    |m: &mut Account| { &mut m.pt_int_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "pt_int_3",
                    |m: &Account| { &m.pt_int_3 },
                    |m: &mut Account| { &mut m.pt_int_3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "pt_int_4",
                    |m: &Account| { &m.pt_int_4 },
                    |m: &mut Account| { &mut m.pt_int_4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "pt_int_5",
                    |m: &Account| { &m.pt_int_5 },
                    |m: &mut Account| { &mut m.pt_int_5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "pt_f64_1",
                    |m: &Account| { &m.pt_f64_1 },
                    |m: &mut Account| { &mut m.pt_f64_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "pt_f64_2",
                    |m: &Account| { &m.pt_f64_2 },
                    |m: &mut Account| { &mut m.pt_f64_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "pt_f64_3",
                    |m: &Account| { &m.pt_f64_3 },
                    |m: &mut Account| { &mut m.pt_f64_3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "pt_f64_4",
                    |m: &Account| { &m.pt_f64_4 },
                    |m: &mut Account| { &mut m.pt_f64_4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "pt_f64_5",
                    |m: &Account| { &m.pt_f64_5 },
                    |m: &mut Account| { &mut m.pt_f64_5 },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Account>(
                    "Account",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Account {
        static mut instance: ::protobuf::lazy::Lazy<Account> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Account,
        };
        unsafe {
            instance.get(Account::new)
        }
    }
}

impl ::protobuf::Clear for Account {
    fn clear(&mut self) {
        self.clear_deal_id();
        self.clear_ost_prin_amt();
        self.clear_int_amt_aip();
        self.clear_int_rate();
        self.clear_mat_dt();
        self.clear_next_reset_dt();
        self.clear_mat_tenor();
        self.clear_int_tenor();
        self.clear_prin_amt();
        self.clear_int_amt();
        self.clear_int_amt_30_days();
        self.clear_tot_int_amt();
        self.clear_ccy();
        self.clear_cust_type();
        self.clear_pt_str_1();
        self.clear_pt_str_2();
        self.clear_pt_str_3();
        self.clear_pt_str_4();
        self.clear_pt_str_5();
        self.clear_pt_int_1();
        self.clear_pt_int_2();
        self.clear_pt_int_3();
        self.clear_pt_int_4();
        self.clear_pt_int_5();
        self.clear_pt_f64_1();
        self.clear_pt_f64_2();
        self.clear_pt_f64_3();
        self.clear_pt_f64_4();
        self.clear_pt_f64_5();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bhklmr.proto\"\xa4\x06\n\x07Account\x12\x17\n\x07deal_id\x18\x01\
    \x20\x01(\tR\x06dealId\x12\x20\n\x0cost_prin_amt\x18\x02\x20\x01(\x01R\n\
    ostPrinAmt\x12\x1e\n\x0bint_amt_aip\x18\x03\x20\x01(\x01R\tintAmtAip\x12\
    \x19\n\x08int_rate\x18\x04\x20\x01(\x01R\x07intRate\x12\x15\n\x06mat_dt\
    \x18\x05\x20\x01(\x03R\x05matDt\x12\"\n\rnext_reset_dt\x18\x06\x20\x01(\
    \x03R\x0bnextResetDt\x12\x1b\n\tmat_tenor\x18\x07\x20\x01(\x03R\x08matTe\
    nor\x12\x1b\n\tint_tenor\x18\x08\x20\x01(\x03R\x08intTenor\x12\x19\n\x08\
    prin_amt\x18\t\x20\x01(\x01R\x07prinAmt\x12\x17\n\x07int_amt\x18\n\x20\
    \x01(\x01R\x06intAmt\x12%\n\x0fint_amt_30_days\x18\x0b\x20\x01(\x01R\x0c\
    intAmt30Days\x12\x1e\n\x0btot_int_amt\x18\x0c\x20\x01(\x01R\ttotIntAmt\
    \x12\x10\n\x03ccy\x18\r\x20\x01(\tR\x03ccy\x12\x1b\n\tcust_type\x18\x0e\
    \x20\x01(\tR\x08custType\x12\x18\n\x08pt_str_1\x18\x0f\x20\x01(\tR\x06pt\
    Str1\x12\x18\n\x08pt_str_2\x18\x10\x20\x01(\tR\x06ptStr2\x12\x18\n\x08pt\
    _str_3\x18\x11\x20\x01(\tR\x06ptStr3\x12\x18\n\x08pt_str_4\x18\x12\x20\
    \x01(\tR\x06ptStr4\x12\x18\n\x08pt_str_5\x18\x13\x20\x01(\tR\x06ptStr5\
    \x12\x18\n\x08pt_int_1\x18\x14\x20\x01(\x03R\x06ptInt1\x12\x18\n\x08pt_i\
    nt_2\x18\x15\x20\x01(\x03R\x06ptInt2\x12\x18\n\x08pt_int_3\x18\x16\x20\
    \x01(\x03R\x06ptInt3\x12\x18\n\x08pt_int_4\x18\x17\x20\x01(\x03R\x06ptIn\
    t4\x12\x18\n\x08pt_int_5\x18\x18\x20\x01(\x03R\x06ptInt5\x12\x18\n\x08pt\
    _f64_1\x18\x19\x20\x01(\x01R\x06ptF641\x12\x18\n\x08pt_f64_2\x18\x1a\x20\
    \x01(\x01R\x06ptF642\x12\x18\n\x08pt_f64_3\x18\x1b\x20\x01(\x01R\x06ptF6\
    43\x12\x18\n\x08pt_f64_4\x18\x1c\x20\x01(\x01R\x06ptF644\x12\x18\n\x08pt\
    _f64_5\x18\x1d\x20\x01(\x01R\x06ptF645b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
