// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub cfdate: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // double principal_amount = 2;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // int64 cfdate = 3;

    pub fn clear_cfdate(&mut self) {
        self.cfdate = 0;
    }

    // Param is passed by value, moved
    pub fn set_cfdate(&mut self, v: i64) {
        self.cfdate = v;
    }

    pub fn get_cfdate(&self) -> i64 {
        self.cfdate
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cfdate = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.cfdate != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cfdate, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.cfdate != 0 {
            os.write_int64(3, self.cfdate)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_amount",
                    |m: &Cashflow| { &m.interest_amount },
                    |m: &mut Cashflow| { &mut m.interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal_amount",
                    |m: &Cashflow| { &m.principal_amount },
                    |m: &mut Cashflow| { &mut m.principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cfdate",
                    |m: &Cashflow| { &m.cfdate },
                    |m: &mut Cashflow| { &mut m.cfdate },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_interest_amount();
        self.clear_principal_amount();
        self.clear_cfdate();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub loan_acc_no: ::std::string::String,
    pub cust_id: i64,
    pub cust_name: ::std::string::String,
    pub prod_name: ::std::string::String,
    pub no_of_installments: i64,
    pub sanc_amt: f64,
    pub disbursed_amt: f64,
    pub prin_os: f64,
    pub od_prin: f64,
    pub od_int: f64,
    pub int_rate: f64,
    pub int_type: ::std::string::String,
    pub currency: ::std::string::String,
    pub branch_cd: ::std::string::String,
    pub value_dt: i64,
    pub maturity_dt: i64,
    pub gl_code: i64,
    pub date: ::std::string::String,
    pub interest: f64,
    pub principal: f64,
    pub principal_os: f64,
    pub spread: f64,
    pub securitization_percentage: f64,
    pub last_payment_dt: i64,
    pub next_reset_date: i64,
    pub last_reset_dt: i64,
    pub division: ::std::string::String,
    pub alm_line: ::std::string::String,
    pub ia_llg: ::std::string::String,
    pub balm_llg: ::std::string::String,
    pub tenure: i64,
    pub remaining_tenure: i64,
    pub as_on_date: i64,
    pub cust_type: ::std::string::String,
    pub npa_type: ::std::string::String,
    pub total_principal_amount: f64,
    pub total_interest_amount: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string loan_acc_no = 1;

    pub fn clear_loan_acc_no(&mut self) {
        self.loan_acc_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_loan_acc_no(&mut self, v: ::std::string::String) {
        self.loan_acc_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_loan_acc_no(&mut self) -> &mut ::std::string::String {
        &mut self.loan_acc_no
    }

    // Take field
    pub fn take_loan_acc_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.loan_acc_no, ::std::string::String::new())
    }

    pub fn get_loan_acc_no(&self) -> &str {
        &self.loan_acc_no
    }

    // int64 cust_id = 2;

    pub fn clear_cust_id(&mut self) {
        self.cust_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: i64) {
        self.cust_id = v;
    }

    pub fn get_cust_id(&self) -> i64 {
        self.cust_id
    }

    // string cust_name = 3;

    pub fn clear_cust_name(&mut self) {
        self.cust_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_name(&mut self, v: ::std::string::String) {
        self.cust_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_name
    }

    // Take field
    pub fn take_cust_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_name, ::std::string::String::new())
    }

    pub fn get_cust_name(&self) -> &str {
        &self.cust_name
    }

    // string prod_name = 4;

    pub fn clear_prod_name(&mut self) {
        self.prod_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_name(&mut self, v: ::std::string::String) {
        self.prod_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_name(&mut self) -> &mut ::std::string::String {
        &mut self.prod_name
    }

    // Take field
    pub fn take_prod_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_name, ::std::string::String::new())
    }

    pub fn get_prod_name(&self) -> &str {
        &self.prod_name
    }

    // int64 no_of_installments = 5;

    pub fn clear_no_of_installments(&mut self) {
        self.no_of_installments = 0;
    }

    // Param is passed by value, moved
    pub fn set_no_of_installments(&mut self, v: i64) {
        self.no_of_installments = v;
    }

    pub fn get_no_of_installments(&self) -> i64 {
        self.no_of_installments
    }

    // double sanc_amt = 6;

    pub fn clear_sanc_amt(&mut self) {
        self.sanc_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sanc_amt(&mut self, v: f64) {
        self.sanc_amt = v;
    }

    pub fn get_sanc_amt(&self) -> f64 {
        self.sanc_amt
    }

    // double disbursed_amt = 7;

    pub fn clear_disbursed_amt(&mut self) {
        self.disbursed_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_disbursed_amt(&mut self, v: f64) {
        self.disbursed_amt = v;
    }

    pub fn get_disbursed_amt(&self) -> f64 {
        self.disbursed_amt
    }

    // double prin_os = 8;

    pub fn clear_prin_os(&mut self) {
        self.prin_os = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_os(&mut self, v: f64) {
        self.prin_os = v;
    }

    pub fn get_prin_os(&self) -> f64 {
        self.prin_os
    }

    // double od_prin = 9;

    pub fn clear_od_prin(&mut self) {
        self.od_prin = 0.;
    }

    // Param is passed by value, moved
    pub fn set_od_prin(&mut self, v: f64) {
        self.od_prin = v;
    }

    pub fn get_od_prin(&self) -> f64 {
        self.od_prin
    }

    // double od_int = 10;

    pub fn clear_od_int(&mut self) {
        self.od_int = 0.;
    }

    // Param is passed by value, moved
    pub fn set_od_int(&mut self, v: f64) {
        self.od_int = v;
    }

    pub fn get_od_int(&self) -> f64 {
        self.od_int
    }

    // double int_rate = 11;

    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }

    // string int_type = 12;

    pub fn clear_int_type(&mut self) {
        self.int_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_type(&mut self, v: ::std::string::String) {
        self.int_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_type(&mut self) -> &mut ::std::string::String {
        &mut self.int_type
    }

    // Take field
    pub fn take_int_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_type, ::std::string::String::new())
    }

    pub fn get_int_type(&self) -> &str {
        &self.int_type
    }

    // string currency = 13;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // string branch_cd = 14;

    pub fn clear_branch_cd(&mut self) {
        self.branch_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch_cd(&mut self, v: ::std::string::String) {
        self.branch_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch_cd(&mut self) -> &mut ::std::string::String {
        &mut self.branch_cd
    }

    // Take field
    pub fn take_branch_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch_cd, ::std::string::String::new())
    }

    pub fn get_branch_cd(&self) -> &str {
        &self.branch_cd
    }

    // int64 value_dt = 15;

    pub fn clear_value_dt(&mut self) {
        self.value_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_dt(&mut self, v: i64) {
        self.value_dt = v;
    }

    pub fn get_value_dt(&self) -> i64 {
        self.value_dt
    }

    // int64 maturity_dt = 16;

    pub fn clear_maturity_dt(&mut self) {
        self.maturity_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_dt(&mut self, v: i64) {
        self.maturity_dt = v;
    }

    pub fn get_maturity_dt(&self) -> i64 {
        self.maturity_dt
    }

    // int64 gl_code = 17;

    pub fn clear_gl_code(&mut self) {
        self.gl_code = 0;
    }

    // Param is passed by value, moved
    pub fn set_gl_code(&mut self, v: i64) {
        self.gl_code = v;
    }

    pub fn get_gl_code(&self) -> i64 {
        self.gl_code
    }

    // string date = 18;

    pub fn clear_date(&mut self) {
        self.date.clear();
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: ::std::string::String) {
        self.date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_date(&mut self) -> &mut ::std::string::String {
        &mut self.date
    }

    // Take field
    pub fn take_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.date, ::std::string::String::new())
    }

    pub fn get_date(&self) -> &str {
        &self.date
    }

    // double interest = 19;

    pub fn clear_interest(&mut self) {
        self.interest = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest(&mut self, v: f64) {
        self.interest = v;
    }

    pub fn get_interest(&self) -> f64 {
        self.interest
    }

    // double principal = 20;

    pub fn clear_principal(&mut self) {
        self.principal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal(&mut self, v: f64) {
        self.principal = v;
    }

    pub fn get_principal(&self) -> f64 {
        self.principal
    }

    // double principal_os = 21;

    pub fn clear_principal_os(&mut self) {
        self.principal_os = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_os(&mut self, v: f64) {
        self.principal_os = v;
    }

    pub fn get_principal_os(&self) -> f64 {
        self.principal_os
    }

    // double spread = 22;

    pub fn clear_spread(&mut self) {
        self.spread = 0.;
    }

    // Param is passed by value, moved
    pub fn set_spread(&mut self, v: f64) {
        self.spread = v;
    }

    pub fn get_spread(&self) -> f64 {
        self.spread
    }

    // double securitization_percentage = 23;

    pub fn clear_securitization_percentage(&mut self) {
        self.securitization_percentage = 0.;
    }

    // Param is passed by value, moved
    pub fn set_securitization_percentage(&mut self, v: f64) {
        self.securitization_percentage = v;
    }

    pub fn get_securitization_percentage(&self) -> f64 {
        self.securitization_percentage
    }

    // int64 last_payment_dt = 24;

    pub fn clear_last_payment_dt(&mut self) {
        self.last_payment_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_payment_dt(&mut self, v: i64) {
        self.last_payment_dt = v;
    }

    pub fn get_last_payment_dt(&self) -> i64 {
        self.last_payment_dt
    }

    // int64 next_reset_date = 25;

    pub fn clear_next_reset_date(&mut self) {
        self.next_reset_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_reset_date(&mut self, v: i64) {
        self.next_reset_date = v;
    }

    pub fn get_next_reset_date(&self) -> i64 {
        self.next_reset_date
    }

    // int64 last_reset_dt = 26;

    pub fn clear_last_reset_dt(&mut self) {
        self.last_reset_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_reset_dt(&mut self, v: i64) {
        self.last_reset_dt = v;
    }

    pub fn get_last_reset_dt(&self) -> i64 {
        self.last_reset_dt
    }

    // string division = 27;

    pub fn clear_division(&mut self) {
        self.division.clear();
    }

    // Param is passed by value, moved
    pub fn set_division(&mut self, v: ::std::string::String) {
        self.division = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_division(&mut self) -> &mut ::std::string::String {
        &mut self.division
    }

    // Take field
    pub fn take_division(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.division, ::std::string::String::new())
    }

    pub fn get_division(&self) -> &str {
        &self.division
    }

    // string alm_line = 28;

    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }

    // string ia_llg = 29;

    pub fn clear_ia_llg(&mut self) {
        self.ia_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_ia_llg(&mut self, v: ::std::string::String) {
        self.ia_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ia_llg(&mut self) -> &mut ::std::string::String {
        &mut self.ia_llg
    }

    // Take field
    pub fn take_ia_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ia_llg, ::std::string::String::new())
    }

    pub fn get_ia_llg(&self) -> &str {
        &self.ia_llg
    }

    // string balm_llg = 30;

    pub fn clear_balm_llg(&mut self) {
        self.balm_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_balm_llg(&mut self, v: ::std::string::String) {
        self.balm_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balm_llg(&mut self) -> &mut ::std::string::String {
        &mut self.balm_llg
    }

    // Take field
    pub fn take_balm_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balm_llg, ::std::string::String::new())
    }

    pub fn get_balm_llg(&self) -> &str {
        &self.balm_llg
    }

    // int64 tenure = 31;

    pub fn clear_tenure(&mut self) {
        self.tenure = 0;
    }

    // Param is passed by value, moved
    pub fn set_tenure(&mut self, v: i64) {
        self.tenure = v;
    }

    pub fn get_tenure(&self) -> i64 {
        self.tenure
    }

    // int64 remaining_tenure = 32;

    pub fn clear_remaining_tenure(&mut self) {
        self.remaining_tenure = 0;
    }

    // Param is passed by value, moved
    pub fn set_remaining_tenure(&mut self, v: i64) {
        self.remaining_tenure = v;
    }

    pub fn get_remaining_tenure(&self) -> i64 {
        self.remaining_tenure
    }

    // int64 as_on_date = 33;

    pub fn clear_as_on_date(&mut self) {
        self.as_on_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on_date(&mut self, v: i64) {
        self.as_on_date = v;
    }

    pub fn get_as_on_date(&self) -> i64 {
        self.as_on_date
    }

    // string cust_type = 34;

    pub fn clear_cust_type(&mut self) {
        self.cust_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_type(&mut self, v: ::std::string::String) {
        self.cust_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_type(&mut self) -> &mut ::std::string::String {
        &mut self.cust_type
    }

    // Take field
    pub fn take_cust_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_type, ::std::string::String::new())
    }

    pub fn get_cust_type(&self) -> &str {
        &self.cust_type
    }

    // string npa_type = 35;

    pub fn clear_npa_type(&mut self) {
        self.npa_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_type(&mut self, v: ::std::string::String) {
        self.npa_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_type(&mut self) -> &mut ::std::string::String {
        &mut self.npa_type
    }

    // Take field
    pub fn take_npa_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_type, ::std::string::String::new())
    }

    pub fn get_npa_type(&self) -> &str {
        &self.npa_type
    }

    // double total_principal_amount = 36;

    pub fn clear_total_principal_amount(&mut self) {
        self.total_principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_principal_amount(&mut self, v: f64) {
        self.total_principal_amount = v;
    }

    pub fn get_total_principal_amount(&self) -> f64 {
        self.total_principal_amount
    }

    // double total_interest_amount = 37;

    pub fn clear_total_interest_amount(&mut self) {
        self.total_interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_amount(&mut self, v: f64) {
        self.total_interest_amount = v;
    }

    pub fn get_total_interest_amount(&self) -> f64 {
        self.total_interest_amount
    }

    // repeated .Cashflow cashflows = 38;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.loan_acc_no)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cust_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_name)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.no_of_installments = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.sanc_amt = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.disbursed_amt = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_os = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.od_prin = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.od_int = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_type)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch_cd)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.value_dt = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_dt = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.gl_code = tmp;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.date)?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_os = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.spread = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.securitization_percentage = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_payment_dt = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_reset_date = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_reset_dt = tmp;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.division)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alm_line)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ia_llg)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.balm_llg)?;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tenure = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.remaining_tenure = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on_date = tmp;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_type)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa_type)?;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_principal_amount = tmp;
                },
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_amount = tmp;
                },
                38 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.loan_acc_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.loan_acc_no);
        }
        if self.cust_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.cust_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.cust_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.cust_name);
        }
        if !self.prod_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.prod_name);
        }
        if self.no_of_installments != 0 {
            my_size += ::protobuf::rt::value_size(5, self.no_of_installments, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sanc_amt != 0. {
            my_size += 9;
        }
        if self.disbursed_amt != 0. {
            my_size += 9;
        }
        if self.prin_os != 0. {
            my_size += 9;
        }
        if self.od_prin != 0. {
            my_size += 9;
        }
        if self.od_int != 0. {
            my_size += 9;
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if !self.int_type.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.int_type);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.currency);
        }
        if !self.branch_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.branch_cd);
        }
        if self.value_dt != 0 {
            my_size += ::protobuf::rt::value_size(15, self.value_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_dt != 0 {
            my_size += ::protobuf::rt::value_size(16, self.maturity_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gl_code != 0 {
            my_size += ::protobuf::rt::value_size(17, self.gl_code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.date.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.date);
        }
        if self.interest != 0. {
            my_size += 10;
        }
        if self.principal != 0. {
            my_size += 10;
        }
        if self.principal_os != 0. {
            my_size += 10;
        }
        if self.spread != 0. {
            my_size += 10;
        }
        if self.securitization_percentage != 0. {
            my_size += 10;
        }
        if self.last_payment_dt != 0 {
            my_size += ::protobuf::rt::value_size(24, self.last_payment_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_reset_date != 0 {
            my_size += ::protobuf::rt::value_size(25, self.next_reset_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_reset_dt != 0 {
            my_size += ::protobuf::rt::value_size(26, self.last_reset_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.division.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.division);
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.alm_line);
        }
        if !self.ia_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.ia_llg);
        }
        if !self.balm_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.balm_llg);
        }
        if self.tenure != 0 {
            my_size += ::protobuf::rt::value_size(31, self.tenure, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.remaining_tenure != 0 {
            my_size += ::protobuf::rt::value_size(32, self.remaining_tenure, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.as_on_date != 0 {
            my_size += ::protobuf::rt::value_size(33, self.as_on_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.cust_type.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.cust_type);
        }
        if !self.npa_type.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.npa_type);
        }
        if self.total_principal_amount != 0. {
            my_size += 10;
        }
        if self.total_interest_amount != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.loan_acc_no.is_empty() {
            os.write_string(1, &self.loan_acc_no)?;
        }
        if self.cust_id != 0 {
            os.write_int64(2, self.cust_id)?;
        }
        if !self.cust_name.is_empty() {
            os.write_string(3, &self.cust_name)?;
        }
        if !self.prod_name.is_empty() {
            os.write_string(4, &self.prod_name)?;
        }
        if self.no_of_installments != 0 {
            os.write_int64(5, self.no_of_installments)?;
        }
        if self.sanc_amt != 0. {
            os.write_double(6, self.sanc_amt)?;
        }
        if self.disbursed_amt != 0. {
            os.write_double(7, self.disbursed_amt)?;
        }
        if self.prin_os != 0. {
            os.write_double(8, self.prin_os)?;
        }
        if self.od_prin != 0. {
            os.write_double(9, self.od_prin)?;
        }
        if self.od_int != 0. {
            os.write_double(10, self.od_int)?;
        }
        if self.int_rate != 0. {
            os.write_double(11, self.int_rate)?;
        }
        if !self.int_type.is_empty() {
            os.write_string(12, &self.int_type)?;
        }
        if !self.currency.is_empty() {
            os.write_string(13, &self.currency)?;
        }
        if !self.branch_cd.is_empty() {
            os.write_string(14, &self.branch_cd)?;
        }
        if self.value_dt != 0 {
            os.write_int64(15, self.value_dt)?;
        }
        if self.maturity_dt != 0 {
            os.write_int64(16, self.maturity_dt)?;
        }
        if self.gl_code != 0 {
            os.write_int64(17, self.gl_code)?;
        }
        if !self.date.is_empty() {
            os.write_string(18, &self.date)?;
        }
        if self.interest != 0. {
            os.write_double(19, self.interest)?;
        }
        if self.principal != 0. {
            os.write_double(20, self.principal)?;
        }
        if self.principal_os != 0. {
            os.write_double(21, self.principal_os)?;
        }
        if self.spread != 0. {
            os.write_double(22, self.spread)?;
        }
        if self.securitization_percentage != 0. {
            os.write_double(23, self.securitization_percentage)?;
        }
        if self.last_payment_dt != 0 {
            os.write_int64(24, self.last_payment_dt)?;
        }
        if self.next_reset_date != 0 {
            os.write_int64(25, self.next_reset_date)?;
        }
        if self.last_reset_dt != 0 {
            os.write_int64(26, self.last_reset_dt)?;
        }
        if !self.division.is_empty() {
            os.write_string(27, &self.division)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(28, &self.alm_line)?;
        }
        if !self.ia_llg.is_empty() {
            os.write_string(29, &self.ia_llg)?;
        }
        if !self.balm_llg.is_empty() {
            os.write_string(30, &self.balm_llg)?;
        }
        if self.tenure != 0 {
            os.write_int64(31, self.tenure)?;
        }
        if self.remaining_tenure != 0 {
            os.write_int64(32, self.remaining_tenure)?;
        }
        if self.as_on_date != 0 {
            os.write_int64(33, self.as_on_date)?;
        }
        if !self.cust_type.is_empty() {
            os.write_string(34, &self.cust_type)?;
        }
        if !self.npa_type.is_empty() {
            os.write_string(35, &self.npa_type)?;
        }
        if self.total_principal_amount != 0. {
            os.write_double(36, self.total_principal_amount)?;
        }
        if self.total_interest_amount != 0. {
            os.write_double(37, self.total_interest_amount)?;
        }
        for v in &self.cashflows {
            os.write_tag(38, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "loan_acc_no",
                    |m: &AccountWithCashflows| { &m.loan_acc_no },
                    |m: &mut AccountWithCashflows| { &mut m.loan_acc_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cust_id",
                    |m: &AccountWithCashflows| { &m.cust_id },
                    |m: &mut AccountWithCashflows| { &mut m.cust_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_name",
                    |m: &AccountWithCashflows| { &m.cust_name },
                    |m: &mut AccountWithCashflows| { &mut m.cust_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "prod_name",
                    |m: &AccountWithCashflows| { &m.prod_name },
                    |m: &mut AccountWithCashflows| { &mut m.prod_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "no_of_installments",
                    |m: &AccountWithCashflows| { &m.no_of_installments },
                    |m: &mut AccountWithCashflows| { &mut m.no_of_installments },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "sanc_amt",
                    |m: &AccountWithCashflows| { &m.sanc_amt },
                    |m: &mut AccountWithCashflows| { &mut m.sanc_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "disbursed_amt",
                    |m: &AccountWithCashflows| { &m.disbursed_amt },
                    |m: &mut AccountWithCashflows| { &mut m.disbursed_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_os",
                    |m: &AccountWithCashflows| { &m.prin_os },
                    |m: &mut AccountWithCashflows| { &mut m.prin_os },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "od_prin",
                    |m: &AccountWithCashflows| { &m.od_prin },
                    |m: &mut AccountWithCashflows| { &mut m.od_prin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "od_int",
                    |m: &AccountWithCashflows| { &m.od_int },
                    |m: &mut AccountWithCashflows| { &mut m.od_int },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rate",
                    |m: &AccountWithCashflows| { &m.int_rate },
                    |m: &mut AccountWithCashflows| { &mut m.int_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "int_type",
                    |m: &AccountWithCashflows| { &m.int_type },
                    |m: &mut AccountWithCashflows| { &mut m.int_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &AccountWithCashflows| { &m.currency },
                    |m: &mut AccountWithCashflows| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "branch_cd",
                    |m: &AccountWithCashflows| { &m.branch_cd },
                    |m: &mut AccountWithCashflows| { &mut m.branch_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "value_dt",
                    |m: &AccountWithCashflows| { &m.value_dt },
                    |m: &mut AccountWithCashflows| { &mut m.value_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "maturity_dt",
                    |m: &AccountWithCashflows| { &m.maturity_dt },
                    |m: &mut AccountWithCashflows| { &mut m.maturity_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "gl_code",
                    |m: &AccountWithCashflows| { &m.gl_code },
                    |m: &mut AccountWithCashflows| { &mut m.gl_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "date",
                    |m: &AccountWithCashflows| { &m.date },
                    |m: &mut AccountWithCashflows| { &mut m.date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest",
                    |m: &AccountWithCashflows| { &m.interest },
                    |m: &mut AccountWithCashflows| { &mut m.interest },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal",
                    |m: &AccountWithCashflows| { &m.principal },
                    |m: &mut AccountWithCashflows| { &mut m.principal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal_os",
                    |m: &AccountWithCashflows| { &m.principal_os },
                    |m: &mut AccountWithCashflows| { &mut m.principal_os },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "spread",
                    |m: &AccountWithCashflows| { &m.spread },
                    |m: &mut AccountWithCashflows| { &mut m.spread },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "securitization_percentage",
                    |m: &AccountWithCashflows| { &m.securitization_percentage },
                    |m: &mut AccountWithCashflows| { &mut m.securitization_percentage },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "last_payment_dt",
                    |m: &AccountWithCashflows| { &m.last_payment_dt },
                    |m: &mut AccountWithCashflows| { &mut m.last_payment_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "next_reset_date",
                    |m: &AccountWithCashflows| { &m.next_reset_date },
                    |m: &mut AccountWithCashflows| { &mut m.next_reset_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "last_reset_dt",
                    |m: &AccountWithCashflows| { &m.last_reset_dt },
                    |m: &mut AccountWithCashflows| { &mut m.last_reset_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "division",
                    |m: &AccountWithCashflows| { &m.division },
                    |m: &mut AccountWithCashflows| { &mut m.division },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "alm_line",
                    |m: &AccountWithCashflows| { &m.alm_line },
                    |m: &mut AccountWithCashflows| { &mut m.alm_line },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ia_llg",
                    |m: &AccountWithCashflows| { &m.ia_llg },
                    |m: &mut AccountWithCashflows| { &mut m.ia_llg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "balm_llg",
                    |m: &AccountWithCashflows| { &m.balm_llg },
                    |m: &mut AccountWithCashflows| { &mut m.balm_llg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tenure",
                    |m: &AccountWithCashflows| { &m.tenure },
                    |m: &mut AccountWithCashflows| { &mut m.tenure },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "remaining_tenure",
                    |m: &AccountWithCashflows| { &m.remaining_tenure },
                    |m: &mut AccountWithCashflows| { &mut m.remaining_tenure },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "as_on_date",
                    |m: &AccountWithCashflows| { &m.as_on_date },
                    |m: &mut AccountWithCashflows| { &mut m.as_on_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_type",
                    |m: &AccountWithCashflows| { &m.cust_type },
                    |m: &mut AccountWithCashflows| { &mut m.cust_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "npa_type",
                    |m: &AccountWithCashflows| { &m.npa_type },
                    |m: &mut AccountWithCashflows| { &mut m.npa_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_principal_amount",
                    |m: &AccountWithCashflows| { &m.total_principal_amount },
                    |m: &mut AccountWithCashflows| { &mut m.total_principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_interest_amount",
                    |m: &AccountWithCashflows| { &m.total_interest_amount },
                    |m: &mut AccountWithCashflows| { &mut m.total_interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_loan_acc_no();
        self.clear_cust_id();
        self.clear_cust_name();
        self.clear_prod_name();
        self.clear_no_of_installments();
        self.clear_sanc_amt();
        self.clear_disbursed_amt();
        self.clear_prin_os();
        self.clear_od_prin();
        self.clear_od_int();
        self.clear_int_rate();
        self.clear_int_type();
        self.clear_currency();
        self.clear_branch_cd();
        self.clear_value_dt();
        self.clear_maturity_dt();
        self.clear_gl_code();
        self.clear_date();
        self.clear_interest();
        self.clear_principal();
        self.clear_principal_os();
        self.clear_spread();
        self.clear_securitization_percentage();
        self.clear_last_payment_dt();
        self.clear_next_reset_date();
        self.clear_last_reset_dt();
        self.clear_division();
        self.clear_alm_line();
        self.clear_ia_llg();
        self.clear_balm_llg();
        self.clear_tenure();
        self.clear_remaining_tenure();
        self.clear_as_on_date();
        self.clear_cust_type();
        self.clear_npa_type();
        self.clear_total_principal_amount();
        self.clear_total_interest_amount();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17proto/jayam_loans.proto\"v\n\x08Cashflow\x12'\n\x0finterest_amount\
    \x18\x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\
    \x02\x20\x01(\x01R\x0fprincipalAmount\x12\x16\n\x06cfdate\x18\x03\x20\
    \x01(\x03R\x06cfdate\"\xd3\t\n\x14AccountWithCashflows\x12\x1e\n\x0bloan\
    _acc_no\x18\x01\x20\x01(\tR\tloanAccNo\x12\x17\n\x07cust_id\x18\x02\x20\
    \x01(\x03R\x06custId\x12\x1b\n\tcust_name\x18\x03\x20\x01(\tR\x08custNam\
    e\x12\x1b\n\tprod_name\x18\x04\x20\x01(\tR\x08prodName\x12,\n\x12no_of_i\
    nstallments\x18\x05\x20\x01(\x03R\x10noOfInstallments\x12\x19\n\x08sanc_\
    amt\x18\x06\x20\x01(\x01R\x07sancAmt\x12#\n\rdisbursed_amt\x18\x07\x20\
    \x01(\x01R\x0cdisbursedAmt\x12\x17\n\x07prin_os\x18\x08\x20\x01(\x01R\
    \x06prinOs\x12\x17\n\x07od_prin\x18\t\x20\x01(\x01R\x06odPrin\x12\x15\n\
    \x06od_int\x18\n\x20\x01(\x01R\x05odInt\x12\x19\n\x08int_rate\x18\x0b\
    \x20\x01(\x01R\x07intRate\x12\x19\n\x08int_type\x18\x0c\x20\x01(\tR\x07i\
    ntType\x12\x1a\n\x08currency\x18\r\x20\x01(\tR\x08currency\x12\x1b\n\tbr\
    anch_cd\x18\x0e\x20\x01(\tR\x08branchCd\x12\x19\n\x08value_dt\x18\x0f\
    \x20\x01(\x03R\x07valueDt\x12\x1f\n\x0bmaturity_dt\x18\x10\x20\x01(\x03R\
    \nmaturityDt\x12\x17\n\x07gl_code\x18\x11\x20\x01(\x03R\x06glCode\x12\
    \x12\n\x04date\x18\x12\x20\x01(\tR\x04date\x12\x1a\n\x08interest\x18\x13\
    \x20\x01(\x01R\x08interest\x12\x1c\n\tprincipal\x18\x14\x20\x01(\x01R\tp\
    rincipal\x12!\n\x0cprincipal_os\x18\x15\x20\x01(\x01R\x0bprincipalOs\x12\
    \x16\n\x06spread\x18\x16\x20\x01(\x01R\x06spread\x12;\n\x19securitizatio\
    n_percentage\x18\x17\x20\x01(\x01R\x18securitizationPercentage\x12&\n\
    \x0flast_payment_dt\x18\x18\x20\x01(\x03R\rlastPaymentDt\x12&\n\x0fnext_\
    reset_date\x18\x19\x20\x01(\x03R\rnextResetDate\x12\"\n\rlast_reset_dt\
    \x18\x1a\x20\x01(\x03R\x0blastResetDt\x12\x1a\n\x08division\x18\x1b\x20\
    \x01(\tR\x08division\x12\x19\n\x08alm_line\x18\x1c\x20\x01(\tR\x07almLin\
    e\x12\x15\n\x06ia_llg\x18\x1d\x20\x01(\tR\x05iaLlg\x12\x19\n\x08balm_llg\
    \x18\x1e\x20\x01(\tR\x07balmLlg\x12\x16\n\x06tenure\x18\x1f\x20\x01(\x03\
    R\x06tenure\x12)\n\x10remaining_tenure\x18\x20\x20\x01(\x03R\x0fremainin\
    gTenure\x12\x1c\n\nas_on_date\x18!\x20\x01(\x03R\x08asOnDate\x12\x1b\n\t\
    cust_type\x18\"\x20\x01(\tR\x08custType\x12\x19\n\x08npa_type\x18#\x20\
    \x01(\tR\x07npaType\x124\n\x16total_principal_amount\x18$\x20\x01(\x01R\
    \x14totalPrincipalAmount\x122\n\x15total_interest_amount\x18%\x20\x01(\
    \x01R\x13totalInterestAmount\x12'\n\tcashflows\x18&\x20\x03(\x0b2\t.Cash\
    flowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
