// This file is generated by rust-protobuf 2.15.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]
#![allow(unused_attributes)]
#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `casaod.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_15_0;

#[derive(PartialEq, Clone, Default)]
pub struct OutputAccount {
    // message fields
    pub casa_acc_no: ::std::string::String,
    pub casa_prod_cd: ::std::string::String,
    pub acc_br_cd: i64,
    pub branch_cd: i64,
    pub book_bal: f64,
    pub flex_cube_cust_id: i64,
    pub tot_od_limit: f64,
    pub acc_open_dt: i64,
    pub cust_shrt_name: ::std::string::String,
    pub cust_id: i64,
    pub cbr_num_1: i64,
    pub cbr_num_2: i64,
    pub cbr_num_3: i64,
    pub cr_rt: f64,
    pub dr_rt: f64,
    pub prod_name: ::std::string::String,
    pub component: ::std::string::String,
    pub rt_flg: ::std::string::String,
    pub inst: ::std::string::String,
    pub crnt_book_bal: f64,
    pub div: ::std::string::String,
    pub alm_line: ::std::string::String,
    pub ia_llg: ::std::string::String,
    pub balm_llg: ::std::string::String,
    pub int_index_name: ::std::string::String,
    pub npa_flg: ::std::string::String,
    pub int_rt: f64,
    pub country: ::std::string::String,
    pub cust_cat: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutputAccount {
    fn default() -> &'a OutputAccount {
        <OutputAccount as ::protobuf::Message>::default_instance()
    }
}

impl OutputAccount {
    pub fn new() -> OutputAccount {
        ::std::default::Default::default()
    }

    // string casa_acc_no = 1;

    pub fn get_casa_acc_no(&self) -> &str {
        &self.casa_acc_no
    }
    pub fn clear_casa_acc_no(&mut self) {
        self.casa_acc_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_casa_acc_no(&mut self, v: ::std::string::String) {
        self.casa_acc_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_casa_acc_no(&mut self) -> &mut ::std::string::String {
        &mut self.casa_acc_no
    }

    // Take field
    pub fn take_casa_acc_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.casa_acc_no, ::std::string::String::new())
    }

    // string casa_prod_cd = 2;

    pub fn get_casa_prod_cd(&self) -> &str {
        &self.casa_prod_cd
    }
    pub fn clear_casa_prod_cd(&mut self) {
        self.casa_prod_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_casa_prod_cd(&mut self, v: ::std::string::String) {
        self.casa_prod_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_casa_prod_cd(&mut self) -> &mut ::std::string::String {
        &mut self.casa_prod_cd
    }

    // Take field
    pub fn take_casa_prod_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.casa_prod_cd, ::std::string::String::new())
    }

    // int64 acc_br_cd = 3;

    pub fn get_acc_br_cd(&self) -> i64 {
        self.acc_br_cd
    }
    pub fn clear_acc_br_cd(&mut self) {
        self.acc_br_cd = 0;
    }

    // Param is passed by value, moved
    pub fn set_acc_br_cd(&mut self, v: i64) {
        self.acc_br_cd = v;
    }

    // int64 branch_cd = 4;

    pub fn get_branch_cd(&self) -> i64 {
        self.branch_cd
    }
    pub fn clear_branch_cd(&mut self) {
        self.branch_cd = 0;
    }

    // Param is passed by value, moved
    pub fn set_branch_cd(&mut self, v: i64) {
        self.branch_cd = v;
    }

    // double book_bal = 5;

    pub fn get_book_bal(&self) -> f64 {
        self.book_bal
    }
    pub fn clear_book_bal(&mut self) {
        self.book_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_book_bal(&mut self, v: f64) {
        self.book_bal = v;
    }

    // int64 flex_cube_cust_id = 6;

    pub fn get_flex_cube_cust_id(&self) -> i64 {
        self.flex_cube_cust_id
    }
    pub fn clear_flex_cube_cust_id(&mut self) {
        self.flex_cube_cust_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_flex_cube_cust_id(&mut self, v: i64) {
        self.flex_cube_cust_id = v;
    }

    // double tot_od_limit = 7;

    pub fn get_tot_od_limit(&self) -> f64 {
        self.tot_od_limit
    }
    pub fn clear_tot_od_limit(&mut self) {
        self.tot_od_limit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_od_limit(&mut self, v: f64) {
        self.tot_od_limit = v;
    }

    // int64 acc_open_dt = 8;

    pub fn get_acc_open_dt(&self) -> i64 {
        self.acc_open_dt
    }
    pub fn clear_acc_open_dt(&mut self) {
        self.acc_open_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_acc_open_dt(&mut self, v: i64) {
        self.acc_open_dt = v;
    }

    // string cust_shrt_name = 9;

    pub fn get_cust_shrt_name(&self) -> &str {
        &self.cust_shrt_name
    }
    pub fn clear_cust_shrt_name(&mut self) {
        self.cust_shrt_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_shrt_name(&mut self, v: ::std::string::String) {
        self.cust_shrt_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_shrt_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_shrt_name
    }

    // Take field
    pub fn take_cust_shrt_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_shrt_name, ::std::string::String::new())
    }

    // int64 cust_id = 10;

    pub fn get_cust_id(&self) -> i64 {
        self.cust_id
    }
    pub fn clear_cust_id(&mut self) {
        self.cust_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: i64) {
        self.cust_id = v;
    }

    // int64 cbr_num_1 = 11;

    pub fn get_cbr_num_1(&self) -> i64 {
        self.cbr_num_1
    }
    pub fn clear_cbr_num_1(&mut self) {
        self.cbr_num_1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_cbr_num_1(&mut self, v: i64) {
        self.cbr_num_1 = v;
    }

    // int64 cbr_num_2 = 12;

    pub fn get_cbr_num_2(&self) -> i64 {
        self.cbr_num_2
    }
    pub fn clear_cbr_num_2(&mut self) {
        self.cbr_num_2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_cbr_num_2(&mut self, v: i64) {
        self.cbr_num_2 = v;
    }

    // int64 cbr_num_3 = 13;

    pub fn get_cbr_num_3(&self) -> i64 {
        self.cbr_num_3
    }
    pub fn clear_cbr_num_3(&mut self) {
        self.cbr_num_3 = 0;
    }

    // Param is passed by value, moved
    pub fn set_cbr_num_3(&mut self, v: i64) {
        self.cbr_num_3 = v;
    }

    // double cr_rt = 14;

    pub fn get_cr_rt(&self) -> f64 {
        self.cr_rt
    }
    pub fn clear_cr_rt(&mut self) {
        self.cr_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cr_rt(&mut self, v: f64) {
        self.cr_rt = v;
    }

    // double dr_rt = 15;

    pub fn get_dr_rt(&self) -> f64 {
        self.dr_rt
    }
    pub fn clear_dr_rt(&mut self) {
        self.dr_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dr_rt(&mut self, v: f64) {
        self.dr_rt = v;
    }

    // string prod_name = 16;

    pub fn get_prod_name(&self) -> &str {
        &self.prod_name
    }
    pub fn clear_prod_name(&mut self) {
        self.prod_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_name(&mut self, v: ::std::string::String) {
        self.prod_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_name(&mut self) -> &mut ::std::string::String {
        &mut self.prod_name
    }

    // Take field
    pub fn take_prod_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_name, ::std::string::String::new())
    }

    // string component = 17;

    pub fn get_component(&self) -> &str {
        &self.component
    }
    pub fn clear_component(&mut self) {
        self.component.clear();
    }

    // Param is passed by value, moved
    pub fn set_component(&mut self, v: ::std::string::String) {
        self.component = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_component(&mut self) -> &mut ::std::string::String {
        &mut self.component
    }

    // Take field
    pub fn take_component(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.component, ::std::string::String::new())
    }

    // string rt_flg = 18;

    pub fn get_rt_flg(&self) -> &str {
        &self.rt_flg
    }
    pub fn clear_rt_flg(&mut self) {
        self.rt_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_rt_flg(&mut self, v: ::std::string::String) {
        self.rt_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rt_flg(&mut self) -> &mut ::std::string::String {
        &mut self.rt_flg
    }

    // Take field
    pub fn take_rt_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rt_flg, ::std::string::String::new())
    }

    // string inst = 19;

    pub fn get_inst(&self) -> &str {
        &self.inst
    }
    pub fn clear_inst(&mut self) {
        self.inst.clear();
    }

    // Param is passed by value, moved
    pub fn set_inst(&mut self, v: ::std::string::String) {
        self.inst = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inst(&mut self) -> &mut ::std::string::String {
        &mut self.inst
    }

    // Take field
    pub fn take_inst(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.inst, ::std::string::String::new())
    }

    // double crnt_book_bal = 20;

    pub fn get_crnt_book_bal(&self) -> f64 {
        self.crnt_book_bal
    }
    pub fn clear_crnt_book_bal(&mut self) {
        self.crnt_book_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_crnt_book_bal(&mut self, v: f64) {
        self.crnt_book_bal = v;
    }

    // string div = 21;

    pub fn get_div(&self) -> &str {
        &self.div
    }
    pub fn clear_div(&mut self) {
        self.div.clear();
    }

    // Param is passed by value, moved
    pub fn set_div(&mut self, v: ::std::string::String) {
        self.div = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_div(&mut self) -> &mut ::std::string::String {
        &mut self.div
    }

    // Take field
    pub fn take_div(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.div, ::std::string::String::new())
    }

    // string alm_line = 22;

    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }
    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    // string ia_llg = 23;

    pub fn get_ia_llg(&self) -> &str {
        &self.ia_llg
    }
    pub fn clear_ia_llg(&mut self) {
        self.ia_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_ia_llg(&mut self, v: ::std::string::String) {
        self.ia_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ia_llg(&mut self) -> &mut ::std::string::String {
        &mut self.ia_llg
    }

    // Take field
    pub fn take_ia_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ia_llg, ::std::string::String::new())
    }

    // string balm_llg = 24;

    pub fn get_balm_llg(&self) -> &str {
        &self.balm_llg
    }
    pub fn clear_balm_llg(&mut self) {
        self.balm_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_balm_llg(&mut self, v: ::std::string::String) {
        self.balm_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balm_llg(&mut self) -> &mut ::std::string::String {
        &mut self.balm_llg
    }

    // Take field
    pub fn take_balm_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balm_llg, ::std::string::String::new())
    }

    // string int_index_name = 25;

    pub fn get_int_index_name(&self) -> &str {
        &self.int_index_name
    }
    pub fn clear_int_index_name(&mut self) {
        self.int_index_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_index_name(&mut self, v: ::std::string::String) {
        self.int_index_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_index_name(&mut self) -> &mut ::std::string::String {
        &mut self.int_index_name
    }

    // Take field
    pub fn take_int_index_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_index_name, ::std::string::String::new())
    }

    // string npa_flg = 26;

    pub fn get_npa_flg(&self) -> &str {
        &self.npa_flg
    }
    pub fn clear_npa_flg(&mut self) {
        self.npa_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_flg(&mut self, v: ::std::string::String) {
        self.npa_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_flg(&mut self) -> &mut ::std::string::String {
        &mut self.npa_flg
    }

    // Take field
    pub fn take_npa_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_flg, ::std::string::String::new())
    }

    // double int_rt = 27;

    pub fn get_int_rt(&self) -> f64 {
        self.int_rt
    }
    pub fn clear_int_rt(&mut self) {
        self.int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rt(&mut self, v: f64) {
        self.int_rt = v;
    }

    // string country = 28;

    pub fn get_country(&self) -> &str {
        &self.country
    }
    pub fn clear_country(&mut self) {
        self.country.clear();
    }

    // Param is passed by value, moved
    pub fn set_country(&mut self, v: ::std::string::String) {
        self.country = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country(&mut self) -> &mut ::std::string::String {
        &mut self.country
    }

    // Take field
    pub fn take_country(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.country, ::std::string::String::new())
    }

    // string cust_cat = 29;

    pub fn get_cust_cat(&self) -> &str {
        &self.cust_cat
    }
    pub fn clear_cust_cat(&mut self) {
        self.cust_cat.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_cat(&mut self, v: ::std::string::String) {
        self.cust_cat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_cat(&mut self) -> &mut ::std::string::String {
        &mut self.cust_cat
    }

    // Take field
    pub fn take_cust_cat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_cat, ::std::string::String::new())
    }
}

impl ::protobuf::Message for OutputAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.casa_acc_no,
                    )?;
                }
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.casa_prod_cd,
                    )?;
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.acc_br_cd = tmp;
                }
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.branch_cd = tmp;
                }
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.book_bal = tmp;
                }
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.flex_cube_cust_id = tmp;
                }
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.tot_od_limit = tmp;
                }
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.acc_open_dt = tmp;
                }
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.cust_shrt_name,
                    )?;
                }
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.cust_id = tmp;
                }
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.cbr_num_1 = tmp;
                }
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.cbr_num_2 = tmp;
                }
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.cbr_num_3 = tmp;
                }
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.cr_rt = tmp;
                }
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.dr_rt = tmp;
                }
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.prod_name,
                    )?;
                }
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.component,
                    )?;
                }
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.rt_flg,
                    )?;
                }
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.inst,
                    )?;
                }
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.crnt_book_bal = tmp;
                }
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.div)?;
                }
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.alm_line,
                    )?;
                }
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.ia_llg,
                    )?;
                }
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.balm_llg,
                    )?;
                }
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.int_index_name,
                    )?;
                }
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.npa_flg,
                    )?;
                }
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.int_rt = tmp;
                }
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.country,
                    )?;
                }
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.cust_cat,
                    )?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.casa_acc_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.casa_acc_no);
        }
        if !self.casa_prod_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.casa_prod_cd);
        }
        if self.acc_br_cd != 0 {
            my_size += ::protobuf::rt::value_size(
                3,
                self.acc_br_cd,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.branch_cd != 0 {
            my_size += ::protobuf::rt::value_size(
                4,
                self.branch_cd,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.book_bal != 0. {
            my_size += 9;
        }
        if self.flex_cube_cust_id != 0 {
            my_size += ::protobuf::rt::value_size(
                6,
                self.flex_cube_cust_id,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.tot_od_limit != 0. {
            my_size += 9;
        }
        if self.acc_open_dt != 0 {
            my_size += ::protobuf::rt::value_size(
                8,
                self.acc_open_dt,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.cust_shrt_name.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.cust_shrt_name);
        }
        if self.cust_id != 0 {
            my_size += ::protobuf::rt::value_size(
                10,
                self.cust_id,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.cbr_num_1 != 0 {
            my_size += ::protobuf::rt::value_size(
                11,
                self.cbr_num_1,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.cbr_num_2 != 0 {
            my_size += ::protobuf::rt::value_size(
                12,
                self.cbr_num_2,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.cbr_num_3 != 0 {
            my_size += ::protobuf::rt::value_size(
                13,
                self.cbr_num_3,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.cr_rt != 0. {
            my_size += 9;
        }
        if self.dr_rt != 0. {
            my_size += 9;
        }
        if !self.prod_name.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.prod_name);
        }
        if !self.component.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.component);
        }
        if !self.rt_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.rt_flg);
        }
        if !self.inst.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.inst);
        }
        if self.crnt_book_bal != 0. {
            my_size += 10;
        }
        if !self.div.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.div);
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.alm_line);
        }
        if !self.ia_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.ia_llg);
        }
        if !self.balm_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.balm_llg);
        }
        if !self.int_index_name.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.int_index_name);
        }
        if !self.npa_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.npa_flg);
        }
        if self.int_rt != 0. {
            my_size += 10;
        }
        if !self.country.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.country);
        }
        if !self.cust_cat.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.cust_cat);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.casa_acc_no.is_empty() {
            os.write_string(1, &self.casa_acc_no)?;
        }
        if !self.casa_prod_cd.is_empty() {
            os.write_string(2, &self.casa_prod_cd)?;
        }
        if self.acc_br_cd != 0 {
            os.write_int64(3, self.acc_br_cd)?;
        }
        if self.branch_cd != 0 {
            os.write_int64(4, self.branch_cd)?;
        }
        if self.book_bal != 0. {
            os.write_double(5, self.book_bal)?;
        }
        if self.flex_cube_cust_id != 0 {
            os.write_int64(6, self.flex_cube_cust_id)?;
        }
        if self.tot_od_limit != 0. {
            os.write_double(7, self.tot_od_limit)?;
        }
        if self.acc_open_dt != 0 {
            os.write_int64(8, self.acc_open_dt)?;
        }
        if !self.cust_shrt_name.is_empty() {
            os.write_string(9, &self.cust_shrt_name)?;
        }
        if self.cust_id != 0 {
            os.write_int64(10, self.cust_id)?;
        }
        if self.cbr_num_1 != 0 {
            os.write_int64(11, self.cbr_num_1)?;
        }
        if self.cbr_num_2 != 0 {
            os.write_int64(12, self.cbr_num_2)?;
        }
        if self.cbr_num_3 != 0 {
            os.write_int64(13, self.cbr_num_3)?;
        }
        if self.cr_rt != 0. {
            os.write_double(14, self.cr_rt)?;
        }
        if self.dr_rt != 0. {
            os.write_double(15, self.dr_rt)?;
        }
        if !self.prod_name.is_empty() {
            os.write_string(16, &self.prod_name)?;
        }
        if !self.component.is_empty() {
            os.write_string(17, &self.component)?;
        }
        if !self.rt_flg.is_empty() {
            os.write_string(18, &self.rt_flg)?;
        }
        if !self.inst.is_empty() {
            os.write_string(19, &self.inst)?;
        }
        if self.crnt_book_bal != 0. {
            os.write_double(20, self.crnt_book_bal)?;
        }
        if !self.div.is_empty() {
            os.write_string(21, &self.div)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(22, &self.alm_line)?;
        }
        if !self.ia_llg.is_empty() {
            os.write_string(23, &self.ia_llg)?;
        }
        if !self.balm_llg.is_empty() {
            os.write_string(24, &self.balm_llg)?;
        }
        if !self.int_index_name.is_empty() {
            os.write_string(25, &self.int_index_name)?;
        }
        if !self.npa_flg.is_empty() {
            os.write_string(26, &self.npa_flg)?;
        }
        if self.int_rt != 0. {
            os.write_double(27, self.int_rt)?;
        }
        if !self.country.is_empty() {
            os.write_string(28, &self.country)?;
        }
        if !self.cust_cat.is_empty() {
            os.write_string(29, &self.cust_cat)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputAccount {
        OutputAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "casa_acc_no",
                    |m: &OutputAccount| &m.casa_acc_no,
                    |m: &mut OutputAccount| &mut m.casa_acc_no,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "casa_prod_cd",
                    |m: &OutputAccount| &m.casa_prod_cd,
                    |m: &mut OutputAccount| &mut m.casa_prod_cd,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "acc_br_cd",
                    |m: &OutputAccount| &m.acc_br_cd,
                    |m: &mut OutputAccount| &mut m.acc_br_cd,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "branch_cd",
                    |m: &OutputAccount| &m.branch_cd,
                    |m: &mut OutputAccount| &mut m.branch_cd,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "book_bal",
                    |m: &OutputAccount| &m.book_bal,
                    |m: &mut OutputAccount| &mut m.book_bal,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "flex_cube_cust_id",
                    |m: &OutputAccount| &m.flex_cube_cust_id,
                    |m: &mut OutputAccount| &mut m.flex_cube_cust_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "tot_od_limit",
                    |m: &OutputAccount| &m.tot_od_limit,
                    |m: &mut OutputAccount| &mut m.tot_od_limit,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "acc_open_dt",
                    |m: &OutputAccount| &m.acc_open_dt,
                    |m: &mut OutputAccount| &mut m.acc_open_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "cust_shrt_name",
                    |m: &OutputAccount| &m.cust_shrt_name,
                    |m: &mut OutputAccount| &mut m.cust_shrt_name,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "cust_id",
                    |m: &OutputAccount| &m.cust_id,
                    |m: &mut OutputAccount| &mut m.cust_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "cbr_num_1",
                    |m: &OutputAccount| &m.cbr_num_1,
                    |m: &mut OutputAccount| &mut m.cbr_num_1,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "cbr_num_2",
                    |m: &OutputAccount| &m.cbr_num_2,
                    |m: &mut OutputAccount| &mut m.cbr_num_2,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "cbr_num_3",
                    |m: &OutputAccount| &m.cbr_num_3,
                    |m: &mut OutputAccount| &mut m.cbr_num_3,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "cr_rt",
                    |m: &OutputAccount| &m.cr_rt,
                    |m: &mut OutputAccount| &mut m.cr_rt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "dr_rt",
                    |m: &OutputAccount| &m.dr_rt,
                    |m: &mut OutputAccount| &mut m.dr_rt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "prod_name",
                    |m: &OutputAccount| &m.prod_name,
                    |m: &mut OutputAccount| &mut m.prod_name,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "component",
                    |m: &OutputAccount| &m.component,
                    |m: &mut OutputAccount| &mut m.component,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "rt_flg",
                    |m: &OutputAccount| &m.rt_flg,
                    |m: &mut OutputAccount| &mut m.rt_flg,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "inst",
                    |m: &OutputAccount| &m.inst,
                    |m: &mut OutputAccount| &mut m.inst,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "crnt_book_bal",
                    |m: &OutputAccount| &m.crnt_book_bal,
                    |m: &mut OutputAccount| &mut m.crnt_book_bal,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "div",
                    |m: &OutputAccount| &m.div,
                    |m: &mut OutputAccount| &mut m.div,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "alm_line",
                    |m: &OutputAccount| &m.alm_line,
                    |m: &mut OutputAccount| &mut m.alm_line,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "ia_llg",
                    |m: &OutputAccount| &m.ia_llg,
                    |m: &mut OutputAccount| &mut m.ia_llg,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "balm_llg",
                    |m: &OutputAccount| &m.balm_llg,
                    |m: &mut OutputAccount| &mut m.balm_llg,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "int_index_name",
                    |m: &OutputAccount| &m.int_index_name,
                    |m: &mut OutputAccount| &mut m.int_index_name,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "npa_flg",
                    |m: &OutputAccount| &m.npa_flg,
                    |m: &mut OutputAccount| &mut m.npa_flg,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "int_rt",
                    |m: &OutputAccount| &m.int_rt,
                    |m: &mut OutputAccount| &mut m.int_rt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "country",
                    |m: &OutputAccount| &m.country,
                    |m: &mut OutputAccount| &mut m.country,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "cust_cat",
                    |m: &OutputAccount| &m.cust_cat,
                    |m: &mut OutputAccount| &mut m.cust_cat,
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<OutputAccount>(
                    "OutputAccount",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static OutputAccount {
        static mut instance: ::protobuf::lazy::Lazy<OutputAccount> = ::protobuf::lazy::Lazy::INIT;
        unsafe { instance.get(OutputAccount::new) }
    }
}

impl ::protobuf::Clear for OutputAccount {
    fn clear(&mut self) {
        self.casa_acc_no.clear();
        self.casa_prod_cd.clear();
        self.acc_br_cd = 0;
        self.branch_cd = 0;
        self.book_bal = 0.;
        self.flex_cube_cust_id = 0;
        self.tot_od_limit = 0.;
        self.acc_open_dt = 0;
        self.cust_shrt_name.clear();
        self.cust_id = 0;
        self.cbr_num_1 = 0;
        self.cbr_num_2 = 0;
        self.cbr_num_3 = 0;
        self.cr_rt = 0.;
        self.dr_rt = 0.;
        self.prod_name.clear();
        self.component.clear();
        self.rt_flg.clear();
        self.inst.clear();
        self.crnt_book_bal = 0.;
        self.div.clear();
        self.alm_line.clear();
        self.ia_llg.clear();
        self.balm_llg.clear();
        self.int_index_name.clear();
        self.npa_flg.clear();
        self.int_rt = 0.;
        self.country.clear();
        self.cust_cat.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ccasaod.proto\"\xc3\x06\n\rOutputAccount\x12\x1e\n\x0bcasa_acc_no\
    \x18\x01\x20\x01(\tR\tcasaAccNo\x12\x20\n\x0ccasa_prod_cd\x18\x02\x20\
    \x01(\tR\ncasaProdCd\x12\x1a\n\tacc_br_cd\x18\x03\x20\x01(\x03R\x07accBr\
    Cd\x12\x1b\n\tbranch_cd\x18\x04\x20\x01(\x03R\x08branchCd\x12\x19\n\x08b\
    ook_bal\x18\x05\x20\x01(\x01R\x07bookBal\x12)\n\x11flex_cube_cust_id\x18\
    \x06\x20\x01(\x03R\x0eflexCubeCustId\x12\x20\n\x0ctot_od_limit\x18\x07\
    \x20\x01(\x01R\ntotOdLimit\x12\x1e\n\x0bacc_open_dt\x18\x08\x20\x01(\x03\
    R\taccOpenDt\x12$\n\x0ecust_shrt_name\x18\t\x20\x01(\tR\x0ccustShrtName\
    \x12\x17\n\x07cust_id\x18\n\x20\x01(\x03R\x06custId\x12\x1a\n\tcbr_num_1\
    \x18\x0b\x20\x01(\x03R\x07cbrNum1\x12\x1a\n\tcbr_num_2\x18\x0c\x20\x01(\
    \x03R\x07cbrNum2\x12\x1a\n\tcbr_num_3\x18\r\x20\x01(\x03R\x07cbrNum3\x12\
    \x13\n\x05cr_rt\x18\x0e\x20\x01(\x01R\x04crRt\x12\x13\n\x05dr_rt\x18\x0f\
    \x20\x01(\x01R\x04drRt\x12\x1b\n\tprod_name\x18\x10\x20\x01(\tR\x08prodN\
    ame\x12\x1c\n\tcomponent\x18\x11\x20\x01(\tR\tcomponent\x12\x15\n\x06rt_\
    flg\x18\x12\x20\x01(\tR\x05rtFlg\x12\x12\n\x04inst\x18\x13\x20\x01(\tR\
    \x04inst\x12\"\n\rcrnt_book_bal\x18\x14\x20\x01(\x01R\x0bcrntBookBal\x12\
    \x10\n\x03div\x18\x15\x20\x01(\tR\x03div\x12\x19\n\x08alm_line\x18\x16\
    \x20\x01(\tR\x07almLine\x12\x15\n\x06ia_llg\x18\x17\x20\x01(\tR\x05iaLlg\
    \x12\x19\n\x08balm_llg\x18\x18\x20\x01(\tR\x07balmLlg\x12$\n\x0eint_inde\
    x_name\x18\x19\x20\x01(\tR\x0cintIndexName\x12\x17\n\x07npa_flg\x18\x1a\
    \x20\x01(\tR\x06npaFlg\x12\x15\n\x06int_rt\x18\x1b\x20\x01(\x01R\x05intR\
    t\x12\x18\n\x07country\x18\x1c\x20\x01(\tR\x07country\x12\x19\n\x08cust_\
    cat\x18\x1d\x20\x01(\tR\x07custCatb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<
    ::protobuf::descriptor::FileDescriptorProto,
> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe { file_descriptor_proto_lazy.get(|| parse_descriptor_proto()) }
}
