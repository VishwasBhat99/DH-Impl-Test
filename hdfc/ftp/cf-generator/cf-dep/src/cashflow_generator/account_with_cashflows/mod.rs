// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // double principal_amount = 2;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_amount",
                    |m: &Cashflow| { &m.interest_amount },
                    |m: &mut Cashflow| { &mut m.interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal_amount",
                    |m: &Cashflow| { &m.principal_amount },
                    |m: &mut Cashflow| { &mut m.principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_interest_amount();
        self.clear_principal_amount();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub account_number: ::std::string::String,
    pub accrued_interest: f64,
    pub deposit_type: ::std::string::String,
    pub maturity_date: i64,
    pub rat_acct_int: f64,
    pub rat_acct_int_var: f64,
    pub next_compound_date: i64,
    pub next_payment_date: i64,
    pub account_start_date: i64,
    pub currency_code: i64,
    pub customer_id: i64,
    pub original_balance: f64,
    pub origination_date: i64,
    pub previous_roll_over_date: i64,
    pub description: ::std::string::String,
    pub client_name: ::std::string::String,
    pub tname: ::std::string::String,
    pub as_on_date: ::std::string::String,
    pub bank_num: ::std::string::String,
    pub branch: ::std::string::String,
    pub rate_flag: ::std::string::String,
    pub cost_centre_ftp: ::std::string::String,
    pub int_pay_freq: i64,
    pub institution: ::std::string::String,
    pub new_gl: ::std::string::String,
    pub int_rate: f64,
    pub concat: ::std::string::String,
    pub ia_llg: ::std::string::String,
    pub balm_llg: ::std::string::String,
    pub current_book_balance: f64,
    pub cost_center: ::std::string::String,
    pub comp_freq: i64,
    pub fin_cost_ftp: ::std::string::String,
    pub date_last_withdraw: i64,
    pub prepayment_less_than_7_days: ::std::string::String,
    pub two_point_concat: ::std::string::String,
    pub four_point_concat: ::std::string::String,
    pub total_principal_amount: f64,
    pub total_interest_amount: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string account_number = 1;

    pub fn clear_account_number(&mut self) {
        self.account_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_number(&mut self, v: ::std::string::String) {
        self.account_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_number(&mut self) -> &mut ::std::string::String {
        &mut self.account_number
    }

    // Take field
    pub fn take_account_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_number, ::std::string::String::new())
    }

    pub fn get_account_number(&self) -> &str {
        &self.account_number
    }

    // double accrued_interest = 2;

    pub fn clear_accrued_interest(&mut self) {
        self.accrued_interest = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accrued_interest(&mut self, v: f64) {
        self.accrued_interest = v;
    }

    pub fn get_accrued_interest(&self) -> f64 {
        self.accrued_interest
    }

    // string deposit_type = 3;

    pub fn clear_deposit_type(&mut self) {
        self.deposit_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_deposit_type(&mut self, v: ::std::string::String) {
        self.deposit_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deposit_type(&mut self) -> &mut ::std::string::String {
        &mut self.deposit_type
    }

    // Take field
    pub fn take_deposit_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deposit_type, ::std::string::String::new())
    }

    pub fn get_deposit_type(&self) -> &str {
        &self.deposit_type
    }

    // int64 maturity_date = 4;

    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }

    // double rat_acct_int = 5;

    pub fn clear_rat_acct_int(&mut self) {
        self.rat_acct_int = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rat_acct_int(&mut self, v: f64) {
        self.rat_acct_int = v;
    }

    pub fn get_rat_acct_int(&self) -> f64 {
        self.rat_acct_int
    }

    // double rat_acct_int_var = 6;

    pub fn clear_rat_acct_int_var(&mut self) {
        self.rat_acct_int_var = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rat_acct_int_var(&mut self, v: f64) {
        self.rat_acct_int_var = v;
    }

    pub fn get_rat_acct_int_var(&self) -> f64 {
        self.rat_acct_int_var
    }

    // int64 next_compound_date = 7;

    pub fn clear_next_compound_date(&mut self) {
        self.next_compound_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_compound_date(&mut self, v: i64) {
        self.next_compound_date = v;
    }

    pub fn get_next_compound_date(&self) -> i64 {
        self.next_compound_date
    }

    // int64 next_payment_date = 8;

    pub fn clear_next_payment_date(&mut self) {
        self.next_payment_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_payment_date(&mut self, v: i64) {
        self.next_payment_date = v;
    }

    pub fn get_next_payment_date(&self) -> i64 {
        self.next_payment_date
    }

    // int64 account_start_date = 9;

    pub fn clear_account_start_date(&mut self) {
        self.account_start_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_account_start_date(&mut self, v: i64) {
        self.account_start_date = v;
    }

    pub fn get_account_start_date(&self) -> i64 {
        self.account_start_date
    }

    // int64 currency_code = 10;

    pub fn clear_currency_code(&mut self) {
        self.currency_code = 0;
    }

    // Param is passed by value, moved
    pub fn set_currency_code(&mut self, v: i64) {
        self.currency_code = v;
    }

    pub fn get_currency_code(&self) -> i64 {
        self.currency_code
    }

    // int64 customer_id = 11;

    pub fn clear_customer_id(&mut self) {
        self.customer_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_customer_id(&mut self, v: i64) {
        self.customer_id = v;
    }

    pub fn get_customer_id(&self) -> i64 {
        self.customer_id
    }

    // double original_balance = 12;

    pub fn clear_original_balance(&mut self) {
        self.original_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_original_balance(&mut self, v: f64) {
        self.original_balance = v;
    }

    pub fn get_original_balance(&self) -> f64 {
        self.original_balance
    }

    // int64 origination_date = 13;

    pub fn clear_origination_date(&mut self) {
        self.origination_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_origination_date(&mut self, v: i64) {
        self.origination_date = v;
    }

    pub fn get_origination_date(&self) -> i64 {
        self.origination_date
    }

    // int64 previous_roll_over_date = 14;

    pub fn clear_previous_roll_over_date(&mut self) {
        self.previous_roll_over_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_previous_roll_over_date(&mut self, v: i64) {
        self.previous_roll_over_date = v;
    }

    pub fn get_previous_roll_over_date(&self) -> i64 {
        self.previous_roll_over_date
    }

    // string description = 15;

    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    pub fn get_description(&self) -> &str {
        &self.description
    }

    // string client_name = 16;

    pub fn clear_client_name(&mut self) {
        self.client_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_name(&mut self, v: ::std::string::String) {
        self.client_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_name(&mut self) -> &mut ::std::string::String {
        &mut self.client_name
    }

    // Take field
    pub fn take_client_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_name, ::std::string::String::new())
    }

    pub fn get_client_name(&self) -> &str {
        &self.client_name
    }

    // string tname = 17;

    pub fn clear_tname(&mut self) {
        self.tname.clear();
    }

    // Param is passed by value, moved
    pub fn set_tname(&mut self, v: ::std::string::String) {
        self.tname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tname(&mut self) -> &mut ::std::string::String {
        &mut self.tname
    }

    // Take field
    pub fn take_tname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tname, ::std::string::String::new())
    }

    pub fn get_tname(&self) -> &str {
        &self.tname
    }

    // string as_on_date = 18;

    pub fn clear_as_on_date(&mut self) {
        self.as_on_date.clear();
    }

    // Param is passed by value, moved
    pub fn set_as_on_date(&mut self, v: ::std::string::String) {
        self.as_on_date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_as_on_date(&mut self) -> &mut ::std::string::String {
        &mut self.as_on_date
    }

    // Take field
    pub fn take_as_on_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.as_on_date, ::std::string::String::new())
    }

    pub fn get_as_on_date(&self) -> &str {
        &self.as_on_date
    }

    // string bank_num = 19;

    pub fn clear_bank_num(&mut self) {
        self.bank_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_bank_num(&mut self, v: ::std::string::String) {
        self.bank_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bank_num(&mut self) -> &mut ::std::string::String {
        &mut self.bank_num
    }

    // Take field
    pub fn take_bank_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bank_num, ::std::string::String::new())
    }

    pub fn get_bank_num(&self) -> &str {
        &self.bank_num
    }

    // string branch = 20;

    pub fn clear_branch(&mut self) {
        self.branch.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch(&mut self, v: ::std::string::String) {
        self.branch = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch(&mut self) -> &mut ::std::string::String {
        &mut self.branch
    }

    // Take field
    pub fn take_branch(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch, ::std::string::String::new())
    }

    pub fn get_branch(&self) -> &str {
        &self.branch
    }

    // string rate_flag = 21;

    pub fn clear_rate_flag(&mut self) {
        self.rate_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_flag(&mut self, v: ::std::string::String) {
        self.rate_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_flag(&mut self) -> &mut ::std::string::String {
        &mut self.rate_flag
    }

    // Take field
    pub fn take_rate_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_flag, ::std::string::String::new())
    }

    pub fn get_rate_flag(&self) -> &str {
        &self.rate_flag
    }

    // string cost_centre_ftp = 22;

    pub fn clear_cost_centre_ftp(&mut self) {
        self.cost_centre_ftp.clear();
    }

    // Param is passed by value, moved
    pub fn set_cost_centre_ftp(&mut self, v: ::std::string::String) {
        self.cost_centre_ftp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cost_centre_ftp(&mut self) -> &mut ::std::string::String {
        &mut self.cost_centre_ftp
    }

    // Take field
    pub fn take_cost_centre_ftp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cost_centre_ftp, ::std::string::String::new())
    }

    pub fn get_cost_centre_ftp(&self) -> &str {
        &self.cost_centre_ftp
    }

    // int64 int_pay_freq = 23;

    pub fn clear_int_pay_freq(&mut self) {
        self.int_pay_freq = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_pay_freq(&mut self, v: i64) {
        self.int_pay_freq = v;
    }

    pub fn get_int_pay_freq(&self) -> i64 {
        self.int_pay_freq
    }

    // string institution = 24;

    pub fn clear_institution(&mut self) {
        self.institution.clear();
    }

    // Param is passed by value, moved
    pub fn set_institution(&mut self, v: ::std::string::String) {
        self.institution = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_institution(&mut self) -> &mut ::std::string::String {
        &mut self.institution
    }

    // Take field
    pub fn take_institution(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.institution, ::std::string::String::new())
    }

    pub fn get_institution(&self) -> &str {
        &self.institution
    }

    // string new_gl = 25;

    pub fn clear_new_gl(&mut self) {
        self.new_gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_new_gl(&mut self, v: ::std::string::String) {
        self.new_gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_gl(&mut self) -> &mut ::std::string::String {
        &mut self.new_gl
    }

    // Take field
    pub fn take_new_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.new_gl, ::std::string::String::new())
    }

    pub fn get_new_gl(&self) -> &str {
        &self.new_gl
    }

    // double int_rate = 26;

    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }

    // string concat = 27;

    pub fn clear_concat(&mut self) {
        self.concat.clear();
    }

    // Param is passed by value, moved
    pub fn set_concat(&mut self, v: ::std::string::String) {
        self.concat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_concat(&mut self) -> &mut ::std::string::String {
        &mut self.concat
    }

    // Take field
    pub fn take_concat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.concat, ::std::string::String::new())
    }

    pub fn get_concat(&self) -> &str {
        &self.concat
    }

    // string ia_llg = 28;

    pub fn clear_ia_llg(&mut self) {
        self.ia_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_ia_llg(&mut self, v: ::std::string::String) {
        self.ia_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ia_llg(&mut self) -> &mut ::std::string::String {
        &mut self.ia_llg
    }

    // Take field
    pub fn take_ia_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ia_llg, ::std::string::String::new())
    }

    pub fn get_ia_llg(&self) -> &str {
        &self.ia_llg
    }

    // string balm_llg = 29;

    pub fn clear_balm_llg(&mut self) {
        self.balm_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_balm_llg(&mut self, v: ::std::string::String) {
        self.balm_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balm_llg(&mut self) -> &mut ::std::string::String {
        &mut self.balm_llg
    }

    // Take field
    pub fn take_balm_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balm_llg, ::std::string::String::new())
    }

    pub fn get_balm_llg(&self) -> &str {
        &self.balm_llg
    }

    // double current_book_balance = 30;

    pub fn clear_current_book_balance(&mut self) {
        self.current_book_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_current_book_balance(&mut self, v: f64) {
        self.current_book_balance = v;
    }

    pub fn get_current_book_balance(&self) -> f64 {
        self.current_book_balance
    }

    // string cost_center = 31;

    pub fn clear_cost_center(&mut self) {
        self.cost_center.clear();
    }

    // Param is passed by value, moved
    pub fn set_cost_center(&mut self, v: ::std::string::String) {
        self.cost_center = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cost_center(&mut self) -> &mut ::std::string::String {
        &mut self.cost_center
    }

    // Take field
    pub fn take_cost_center(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cost_center, ::std::string::String::new())
    }

    pub fn get_cost_center(&self) -> &str {
        &self.cost_center
    }

    // int64 comp_freq = 32;

    pub fn clear_comp_freq(&mut self) {
        self.comp_freq = 0;
    }

    // Param is passed by value, moved
    pub fn set_comp_freq(&mut self, v: i64) {
        self.comp_freq = v;
    }

    pub fn get_comp_freq(&self) -> i64 {
        self.comp_freq
    }

    // string fin_cost_ftp = 33;

    pub fn clear_fin_cost_ftp(&mut self) {
        self.fin_cost_ftp.clear();
    }

    // Param is passed by value, moved
    pub fn set_fin_cost_ftp(&mut self, v: ::std::string::String) {
        self.fin_cost_ftp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fin_cost_ftp(&mut self) -> &mut ::std::string::String {
        &mut self.fin_cost_ftp
    }

    // Take field
    pub fn take_fin_cost_ftp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fin_cost_ftp, ::std::string::String::new())
    }

    pub fn get_fin_cost_ftp(&self) -> &str {
        &self.fin_cost_ftp
    }

    // int64 date_last_withdraw = 34;

    pub fn clear_date_last_withdraw(&mut self) {
        self.date_last_withdraw = 0;
    }

    // Param is passed by value, moved
    pub fn set_date_last_withdraw(&mut self, v: i64) {
        self.date_last_withdraw = v;
    }

    pub fn get_date_last_withdraw(&self) -> i64 {
        self.date_last_withdraw
    }

    // string prepayment_less_than_7_days = 35;

    pub fn clear_prepayment_less_than_7_days(&mut self) {
        self.prepayment_less_than_7_days.clear();
    }

    // Param is passed by value, moved
    pub fn set_prepayment_less_than_7_days(&mut self, v: ::std::string::String) {
        self.prepayment_less_than_7_days = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prepayment_less_than_7_days(&mut self) -> &mut ::std::string::String {
        &mut self.prepayment_less_than_7_days
    }

    // Take field
    pub fn take_prepayment_less_than_7_days(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prepayment_less_than_7_days, ::std::string::String::new())
    }

    pub fn get_prepayment_less_than_7_days(&self) -> &str {
        &self.prepayment_less_than_7_days
    }

    // string two_point_concat = 36;

    pub fn clear_two_point_concat(&mut self) {
        self.two_point_concat.clear();
    }

    // Param is passed by value, moved
    pub fn set_two_point_concat(&mut self, v: ::std::string::String) {
        self.two_point_concat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_two_point_concat(&mut self) -> &mut ::std::string::String {
        &mut self.two_point_concat
    }

    // Take field
    pub fn take_two_point_concat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.two_point_concat, ::std::string::String::new())
    }

    pub fn get_two_point_concat(&self) -> &str {
        &self.two_point_concat
    }

    // string four_point_concat = 37;

    pub fn clear_four_point_concat(&mut self) {
        self.four_point_concat.clear();
    }

    // Param is passed by value, moved
    pub fn set_four_point_concat(&mut self, v: ::std::string::String) {
        self.four_point_concat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_four_point_concat(&mut self) -> &mut ::std::string::String {
        &mut self.four_point_concat
    }

    // Take field
    pub fn take_four_point_concat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.four_point_concat, ::std::string::String::new())
    }

    pub fn get_four_point_concat(&self) -> &str {
        &self.four_point_concat
    }

    // double total_principal_amount = 38;

    pub fn clear_total_principal_amount(&mut self) {
        self.total_principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_principal_amount(&mut self, v: f64) {
        self.total_principal_amount = v;
    }

    pub fn get_total_principal_amount(&self) -> f64 {
        self.total_principal_amount
    }

    // double total_interest_amount = 39;

    pub fn clear_total_interest_amount(&mut self) {
        self.total_interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_amount(&mut self, v: f64) {
        self.total_interest_amount = v;
    }

    pub fn get_total_interest_amount(&self) -> f64 {
        self.total_interest_amount
    }

    // repeated .Cashflow cashflows = 40;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_number)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.accrued_interest = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deposit_type)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rat_acct_int = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rat_acct_int_var = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_compound_date = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_payment_date = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.account_start_date = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.currency_code = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.customer_id = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.original_balance = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.origination_date = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.previous_roll_over_date = tmp;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_name)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tname)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.as_on_date)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bank_num)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_flag)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cost_centre_ftp)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int_pay_freq = tmp;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.institution)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.new_gl)?;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.concat)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ia_llg)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.balm_llg)?;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.current_book_balance = tmp;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cost_center)?;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.comp_freq = tmp;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fin_cost_ftp)?;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date_last_withdraw = tmp;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prepayment_less_than_7_days)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.two_point_concat)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.four_point_concat)?;
                },
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_principal_amount = tmp;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_amount = tmp;
                },
                40 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.account_number);
        }
        if self.accrued_interest != 0. {
            my_size += 9;
        }
        if !self.deposit_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.deposit_type);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(4, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rat_acct_int != 0. {
            my_size += 9;
        }
        if self.rat_acct_int_var != 0. {
            my_size += 9;
        }
        if self.next_compound_date != 0 {
            my_size += ::protobuf::rt::value_size(7, self.next_compound_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_payment_date != 0 {
            my_size += ::protobuf::rt::value_size(8, self.next_payment_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.account_start_date != 0 {
            my_size += ::protobuf::rt::value_size(9, self.account_start_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.currency_code != 0 {
            my_size += ::protobuf::rt::value_size(10, self.currency_code, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.customer_id != 0 {
            my_size += ::protobuf::rt::value_size(11, self.customer_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.original_balance != 0. {
            my_size += 9;
        }
        if self.origination_date != 0 {
            my_size += ::protobuf::rt::value_size(13, self.origination_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.previous_roll_over_date != 0 {
            my_size += ::protobuf::rt::value_size(14, self.previous_roll_over_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.description);
        }
        if !self.client_name.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.client_name);
        }
        if !self.tname.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.tname);
        }
        if !self.as_on_date.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.as_on_date);
        }
        if !self.bank_num.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.bank_num);
        }
        if !self.branch.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.branch);
        }
        if !self.rate_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.rate_flag);
        }
        if !self.cost_centre_ftp.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.cost_centre_ftp);
        }
        if self.int_pay_freq != 0 {
            my_size += ::protobuf::rt::value_size(23, self.int_pay_freq, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.institution.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.institution);
        }
        if !self.new_gl.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.new_gl);
        }
        if self.int_rate != 0. {
            my_size += 10;
        }
        if !self.concat.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.concat);
        }
        if !self.ia_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.ia_llg);
        }
        if !self.balm_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.balm_llg);
        }
        if self.current_book_balance != 0. {
            my_size += 10;
        }
        if !self.cost_center.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.cost_center);
        }
        if self.comp_freq != 0 {
            my_size += ::protobuf::rt::value_size(32, self.comp_freq, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.fin_cost_ftp.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.fin_cost_ftp);
        }
        if self.date_last_withdraw != 0 {
            my_size += ::protobuf::rt::value_size(34, self.date_last_withdraw, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.prepayment_less_than_7_days.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.prepayment_less_than_7_days);
        }
        if !self.two_point_concat.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.two_point_concat);
        }
        if !self.four_point_concat.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.four_point_concat);
        }
        if self.total_principal_amount != 0. {
            my_size += 10;
        }
        if self.total_interest_amount != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.account_number.is_empty() {
            os.write_string(1, &self.account_number)?;
        }
        if self.accrued_interest != 0. {
            os.write_double(2, self.accrued_interest)?;
        }
        if !self.deposit_type.is_empty() {
            os.write_string(3, &self.deposit_type)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(4, self.maturity_date)?;
        }
        if self.rat_acct_int != 0. {
            os.write_double(5, self.rat_acct_int)?;
        }
        if self.rat_acct_int_var != 0. {
            os.write_double(6, self.rat_acct_int_var)?;
        }
        if self.next_compound_date != 0 {
            os.write_int64(7, self.next_compound_date)?;
        }
        if self.next_payment_date != 0 {
            os.write_int64(8, self.next_payment_date)?;
        }
        if self.account_start_date != 0 {
            os.write_int64(9, self.account_start_date)?;
        }
        if self.currency_code != 0 {
            os.write_int64(10, self.currency_code)?;
        }
        if self.customer_id != 0 {
            os.write_int64(11, self.customer_id)?;
        }
        if self.original_balance != 0. {
            os.write_double(12, self.original_balance)?;
        }
        if self.origination_date != 0 {
            os.write_int64(13, self.origination_date)?;
        }
        if self.previous_roll_over_date != 0 {
            os.write_int64(14, self.previous_roll_over_date)?;
        }
        if !self.description.is_empty() {
            os.write_string(15, &self.description)?;
        }
        if !self.client_name.is_empty() {
            os.write_string(16, &self.client_name)?;
        }
        if !self.tname.is_empty() {
            os.write_string(17, &self.tname)?;
        }
        if !self.as_on_date.is_empty() {
            os.write_string(18, &self.as_on_date)?;
        }
        if !self.bank_num.is_empty() {
            os.write_string(19, &self.bank_num)?;
        }
        if !self.branch.is_empty() {
            os.write_string(20, &self.branch)?;
        }
        if !self.rate_flag.is_empty() {
            os.write_string(21, &self.rate_flag)?;
        }
        if !self.cost_centre_ftp.is_empty() {
            os.write_string(22, &self.cost_centre_ftp)?;
        }
        if self.int_pay_freq != 0 {
            os.write_int64(23, self.int_pay_freq)?;
        }
        if !self.institution.is_empty() {
            os.write_string(24, &self.institution)?;
        }
        if !self.new_gl.is_empty() {
            os.write_string(25, &self.new_gl)?;
        }
        if self.int_rate != 0. {
            os.write_double(26, self.int_rate)?;
        }
        if !self.concat.is_empty() {
            os.write_string(27, &self.concat)?;
        }
        if !self.ia_llg.is_empty() {
            os.write_string(28, &self.ia_llg)?;
        }
        if !self.balm_llg.is_empty() {
            os.write_string(29, &self.balm_llg)?;
        }
        if self.current_book_balance != 0. {
            os.write_double(30, self.current_book_balance)?;
        }
        if !self.cost_center.is_empty() {
            os.write_string(31, &self.cost_center)?;
        }
        if self.comp_freq != 0 {
            os.write_int64(32, self.comp_freq)?;
        }
        if !self.fin_cost_ftp.is_empty() {
            os.write_string(33, &self.fin_cost_ftp)?;
        }
        if self.date_last_withdraw != 0 {
            os.write_int64(34, self.date_last_withdraw)?;
        }
        if !self.prepayment_less_than_7_days.is_empty() {
            os.write_string(35, &self.prepayment_less_than_7_days)?;
        }
        if !self.two_point_concat.is_empty() {
            os.write_string(36, &self.two_point_concat)?;
        }
        if !self.four_point_concat.is_empty() {
            os.write_string(37, &self.four_point_concat)?;
        }
        if self.total_principal_amount != 0. {
            os.write_double(38, self.total_principal_amount)?;
        }
        if self.total_interest_amount != 0. {
            os.write_double(39, self.total_interest_amount)?;
        }
        for v in &self.cashflows {
            os.write_tag(40, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "account_number",
                    |m: &AccountWithCashflows| { &m.account_number },
                    |m: &mut AccountWithCashflows| { &mut m.account_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "accrued_interest",
                    |m: &AccountWithCashflows| { &m.accrued_interest },
                    |m: &mut AccountWithCashflows| { &mut m.accrued_interest },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deposit_type",
                    |m: &AccountWithCashflows| { &m.deposit_type },
                    |m: &mut AccountWithCashflows| { &mut m.deposit_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "maturity_date",
                    |m: &AccountWithCashflows| { &m.maturity_date },
                    |m: &mut AccountWithCashflows| { &mut m.maturity_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rat_acct_int",
                    |m: &AccountWithCashflows| { &m.rat_acct_int },
                    |m: &mut AccountWithCashflows| { &mut m.rat_acct_int },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rat_acct_int_var",
                    |m: &AccountWithCashflows| { &m.rat_acct_int_var },
                    |m: &mut AccountWithCashflows| { &mut m.rat_acct_int_var },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "next_compound_date",
                    |m: &AccountWithCashflows| { &m.next_compound_date },
                    |m: &mut AccountWithCashflows| { &mut m.next_compound_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "next_payment_date",
                    |m: &AccountWithCashflows| { &m.next_payment_date },
                    |m: &mut AccountWithCashflows| { &mut m.next_payment_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "account_start_date",
                    |m: &AccountWithCashflows| { &m.account_start_date },
                    |m: &mut AccountWithCashflows| { &mut m.account_start_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "currency_code",
                    |m: &AccountWithCashflows| { &m.currency_code },
                    |m: &mut AccountWithCashflows| { &mut m.currency_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "customer_id",
                    |m: &AccountWithCashflows| { &m.customer_id },
                    |m: &mut AccountWithCashflows| { &mut m.customer_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "original_balance",
                    |m: &AccountWithCashflows| { &m.original_balance },
                    |m: &mut AccountWithCashflows| { &mut m.original_balance },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "origination_date",
                    |m: &AccountWithCashflows| { &m.origination_date },
                    |m: &mut AccountWithCashflows| { &mut m.origination_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "previous_roll_over_date",
                    |m: &AccountWithCashflows| { &m.previous_roll_over_date },
                    |m: &mut AccountWithCashflows| { &mut m.previous_roll_over_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &AccountWithCashflows| { &m.description },
                    |m: &mut AccountWithCashflows| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "client_name",
                    |m: &AccountWithCashflows| { &m.client_name },
                    |m: &mut AccountWithCashflows| { &mut m.client_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "tname",
                    |m: &AccountWithCashflows| { &m.tname },
                    |m: &mut AccountWithCashflows| { &mut m.tname },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "as_on_date",
                    |m: &AccountWithCashflows| { &m.as_on_date },
                    |m: &mut AccountWithCashflows| { &mut m.as_on_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bank_num",
                    |m: &AccountWithCashflows| { &m.bank_num },
                    |m: &mut AccountWithCashflows| { &mut m.bank_num },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "branch",
                    |m: &AccountWithCashflows| { &m.branch },
                    |m: &mut AccountWithCashflows| { &mut m.branch },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rate_flag",
                    |m: &AccountWithCashflows| { &m.rate_flag },
                    |m: &mut AccountWithCashflows| { &mut m.rate_flag },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cost_centre_ftp",
                    |m: &AccountWithCashflows| { &m.cost_centre_ftp },
                    |m: &mut AccountWithCashflows| { &mut m.cost_centre_ftp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "int_pay_freq",
                    |m: &AccountWithCashflows| { &m.int_pay_freq },
                    |m: &mut AccountWithCashflows| { &mut m.int_pay_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "institution",
                    |m: &AccountWithCashflows| { &m.institution },
                    |m: &mut AccountWithCashflows| { &mut m.institution },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "new_gl",
                    |m: &AccountWithCashflows| { &m.new_gl },
                    |m: &mut AccountWithCashflows| { &mut m.new_gl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rate",
                    |m: &AccountWithCashflows| { &m.int_rate },
                    |m: &mut AccountWithCashflows| { &mut m.int_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "concat",
                    |m: &AccountWithCashflows| { &m.concat },
                    |m: &mut AccountWithCashflows| { &mut m.concat },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ia_llg",
                    |m: &AccountWithCashflows| { &m.ia_llg },
                    |m: &mut AccountWithCashflows| { &mut m.ia_llg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "balm_llg",
                    |m: &AccountWithCashflows| { &m.balm_llg },
                    |m: &mut AccountWithCashflows| { &mut m.balm_llg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "current_book_balance",
                    |m: &AccountWithCashflows| { &m.current_book_balance },
                    |m: &mut AccountWithCashflows| { &mut m.current_book_balance },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cost_center",
                    |m: &AccountWithCashflows| { &m.cost_center },
                    |m: &mut AccountWithCashflows| { &mut m.cost_center },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "comp_freq",
                    |m: &AccountWithCashflows| { &m.comp_freq },
                    |m: &mut AccountWithCashflows| { &mut m.comp_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "fin_cost_ftp",
                    |m: &AccountWithCashflows| { &m.fin_cost_ftp },
                    |m: &mut AccountWithCashflows| { &mut m.fin_cost_ftp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date_last_withdraw",
                    |m: &AccountWithCashflows| { &m.date_last_withdraw },
                    |m: &mut AccountWithCashflows| { &mut m.date_last_withdraw },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "prepayment_less_than_7_days",
                    |m: &AccountWithCashflows| { &m.prepayment_less_than_7_days },
                    |m: &mut AccountWithCashflows| { &mut m.prepayment_less_than_7_days },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "two_point_concat",
                    |m: &AccountWithCashflows| { &m.two_point_concat },
                    |m: &mut AccountWithCashflows| { &mut m.two_point_concat },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "four_point_concat",
                    |m: &AccountWithCashflows| { &m.four_point_concat },
                    |m: &mut AccountWithCashflows| { &mut m.four_point_concat },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_principal_amount",
                    |m: &AccountWithCashflows| { &m.total_principal_amount },
                    |m: &mut AccountWithCashflows| { &mut m.total_principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_interest_amount",
                    |m: &AccountWithCashflows| { &m.total_interest_amount },
                    |m: &mut AccountWithCashflows| { &mut m.total_interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_account_number();
        self.clear_accrued_interest();
        self.clear_deposit_type();
        self.clear_maturity_date();
        self.clear_rat_acct_int();
        self.clear_rat_acct_int_var();
        self.clear_next_compound_date();
        self.clear_next_payment_date();
        self.clear_account_start_date();
        self.clear_currency_code();
        self.clear_customer_id();
        self.clear_original_balance();
        self.clear_origination_date();
        self.clear_previous_roll_over_date();
        self.clear_description();
        self.clear_client_name();
        self.clear_tname();
        self.clear_as_on_date();
        self.clear_bank_num();
        self.clear_branch();
        self.clear_rate_flag();
        self.clear_cost_centre_ftp();
        self.clear_int_pay_freq();
        self.clear_institution();
        self.clear_new_gl();
        self.clear_int_rate();
        self.clear_concat();
        self.clear_ia_llg();
        self.clear_balm_llg();
        self.clear_current_book_balance();
        self.clear_cost_center();
        self.clear_comp_freq();
        self.clear_fin_cost_ftp();
        self.clear_date_last_withdraw();
        self.clear_prepayment_less_than_7_days();
        self.clear_two_point_concat();
        self.clear_four_point_concat();
        self.clear_total_principal_amount();
        self.clear_total_interest_amount();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16proto/cf_dep_ftp.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\
    \x18\x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\
    \x02\x20\x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\
    \x03R\x04date\"\xec\x0b\n\x14AccountWithCashflows\x12%\n\x0eaccount_numb\
    er\x18\x01\x20\x01(\tR\raccountNumber\x12)\n\x10accrued_interest\x18\x02\
    \x20\x01(\x01R\x0faccruedInterest\x12!\n\x0cdeposit_type\x18\x03\x20\x01\
    (\tR\x0bdepositType\x12#\n\rmaturity_date\x18\x04\x20\x01(\x03R\x0cmatur\
    ityDate\x12\x20\n\x0crat_acct_int\x18\x05\x20\x01(\x01R\nratAcctInt\x12'\
    \n\x10rat_acct_int_var\x18\x06\x20\x01(\x01R\rratAcctIntVar\x12,\n\x12ne\
    xt_compound_date\x18\x07\x20\x01(\x03R\x10nextCompoundDate\x12*\n\x11nex\
    t_payment_date\x18\x08\x20\x01(\x03R\x0fnextPaymentDate\x12,\n\x12accoun\
    t_start_date\x18\t\x20\x01(\x03R\x10accountStartDate\x12#\n\rcurrency_co\
    de\x18\n\x20\x01(\x03R\x0ccurrencyCode\x12\x1f\n\x0bcustomer_id\x18\x0b\
    \x20\x01(\x03R\ncustomerId\x12)\n\x10original_balance\x18\x0c\x20\x01(\
    \x01R\x0foriginalBalance\x12)\n\x10origination_date\x18\r\x20\x01(\x03R\
    \x0foriginationDate\x125\n\x17previous_roll_over_date\x18\x0e\x20\x01(\
    \x03R\x14previousRollOverDate\x12\x20\n\x0bdescription\x18\x0f\x20\x01(\
    \tR\x0bdescription\x12\x1f\n\x0bclient_name\x18\x10\x20\x01(\tR\nclientN\
    ame\x12\x14\n\x05tname\x18\x11\x20\x01(\tR\x05tname\x12\x1c\n\nas_on_dat\
    e\x18\x12\x20\x01(\tR\x08asOnDate\x12\x19\n\x08bank_num\x18\x13\x20\x01(\
    \tR\x07bankNum\x12\x16\n\x06branch\x18\x14\x20\x01(\tR\x06branch\x12\x1b\
    \n\trate_flag\x18\x15\x20\x01(\tR\x08rateFlag\x12&\n\x0fcost_centre_ftp\
    \x18\x16\x20\x01(\tR\rcostCentreFtp\x12\x20\n\x0cint_pay_freq\x18\x17\
    \x20\x01(\x03R\nintPayFreq\x12\x20\n\x0binstitution\x18\x18\x20\x01(\tR\
    \x0binstitution\x12\x15\n\x06new_gl\x18\x19\x20\x01(\tR\x05newGl\x12\x19\
    \n\x08int_rate\x18\x1a\x20\x01(\x01R\x07intRate\x12\x16\n\x06concat\x18\
    \x1b\x20\x01(\tR\x06concat\x12\x15\n\x06ia_llg\x18\x1c\x20\x01(\tR\x05ia\
    Llg\x12\x19\n\x08balm_llg\x18\x1d\x20\x01(\tR\x07balmLlg\x120\n\x14curre\
    nt_book_balance\x18\x1e\x20\x01(\x01R\x12currentBookBalance\x12\x1f\n\
    \x0bcost_center\x18\x1f\x20\x01(\tR\ncostCenter\x12\x1b\n\tcomp_freq\x18\
    \x20\x20\x01(\x03R\x08compFreq\x12\x20\n\x0cfin_cost_ftp\x18!\x20\x01(\t\
    R\nfinCostFtp\x12,\n\x12date_last_withdraw\x18\"\x20\x01(\x03R\x10dateLa\
    stWithdraw\x12<\n\x1bprepayment_less_than_7_days\x18#\x20\x01(\tR\x17pre\
    paymentLessThan7Days\x12(\n\x10two_point_concat\x18$\x20\x01(\tR\x0etwoP\
    ointConcat\x12*\n\x11four_point_concat\x18%\x20\x01(\tR\x0ffourPointConc\
    at\x124\n\x16total_principal_amount\x18&\x20\x01(\x01R\x14totalPrincipal\
    Amount\x122\n\x15total_interest_amount\x18'\x20\x01(\x01R\x13totalIntere\
    stAmount\x12'\n\tcashflows\x18(\x20\x03(\x0b2\t.CashflowR\tcashflowsb\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
