// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub branchcode: ::std::string::String,
    pub currency: ::std::string::String,
    pub currencyconvertionrate: f64,
    pub acct_num: ::std::string::String,
    pub product_id: ::std::string::String,
    pub customer_id: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub start_date: ::std::string::String,
    pub sanctioned_amt: f64,
    pub distributed_amt: f64,
    pub int_rate: f64,
    pub inst_prin_amt: f64,
    pub inst_int_amt: f64,
    pub acc_end_date: i64,
    pub int_cal_freq: ::std::string::String,
    pub is_floating_rate: ::std::string::String,
    pub benchmark_ass: ::std::string::String,
    pub spread: ::std::string::String,
    pub min_int_rate: f64,
    pub max_int_rate: f64,
    pub early_date: i64,
    pub rep_freq: ::std::string::String,
    pub cust_ctry_code: ::std::string::String,
    pub cust_crtd_rt: ::std::string::String,
    pub cust_sect_code: ::std::string::String,
    pub cust_indt_code: ::std::string::String,
    pub custom1: ::std::string::String,
    pub custom2: ::std::string::String,
    pub npa_classification: ::std::string::String,
    pub overdue_days: ::std::string::String,
    pub wcdl_bucket_days: ::std::string::String,
    pub gl_sub_head_code: ::std::string::String,
    pub schm_code: ::std::string::String,
    pub seg_code: ::std::string::String,
    pub final_seg_code: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string branchcode = 1;


    pub fn get_branchcode(&self) -> &str {
        &self.branchcode
    }
    pub fn clear_branchcode(&mut self) {
        self.branchcode.clear();
    }

    // Param is passed by value, moved
    pub fn set_branchcode(&mut self, v: ::std::string::String) {
        self.branchcode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branchcode(&mut self) -> &mut ::std::string::String {
        &mut self.branchcode
    }

    // Take field
    pub fn take_branchcode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branchcode, ::std::string::String::new())
    }

    // string currency = 2;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // double currencyconvertionrate = 3;


    pub fn get_currencyconvertionrate(&self) -> f64 {
        self.currencyconvertionrate
    }
    pub fn clear_currencyconvertionrate(&mut self) {
        self.currencyconvertionrate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_currencyconvertionrate(&mut self, v: f64) {
        self.currencyconvertionrate = v;
    }

    // string acct_num = 4;


    pub fn get_acct_num(&self) -> &str {
        &self.acct_num
    }
    pub fn clear_acct_num(&mut self) {
        self.acct_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_acct_num(&mut self, v: ::std::string::String) {
        self.acct_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acct_num(&mut self) -> &mut ::std::string::String {
        &mut self.acct_num
    }

    // Take field
    pub fn take_acct_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acct_num, ::std::string::String::new())
    }

    // string product_id = 5;


    pub fn get_product_id(&self) -> &str {
        &self.product_id
    }
    pub fn clear_product_id(&mut self) {
        self.product_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_id(&mut self, v: ::std::string::String) {
        self.product_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_id(&mut self) -> &mut ::std::string::String {
        &mut self.product_id
    }

    // Take field
    pub fn take_product_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_id, ::std::string::String::new())
    }

    // string customer_id = 6;


    pub fn get_customer_id(&self) -> &str {
        &self.customer_id
    }
    pub fn clear_customer_id(&mut self) {
        self.customer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_id(&mut self, v: ::std::string::String) {
        self.customer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_id(&mut self) -> &mut ::std::string::String {
        &mut self.customer_id
    }

    // Take field
    pub fn take_customer_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_id, ::std::string::String::new())
    }

    // string customer_name = 7;


    pub fn get_customer_name(&self) -> &str {
        &self.customer_name
    }
    pub fn clear_customer_name(&mut self) {
        self.customer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_name(&mut self, v: ::std::string::String) {
        self.customer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_name(&mut self) -> &mut ::std::string::String {
        &mut self.customer_name
    }

    // Take field
    pub fn take_customer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_name, ::std::string::String::new())
    }

    // string start_date = 8;


    pub fn get_start_date(&self) -> &str {
        &self.start_date
    }
    pub fn clear_start_date(&mut self) {
        self.start_date.clear();
    }

    // Param is passed by value, moved
    pub fn set_start_date(&mut self, v: ::std::string::String) {
        self.start_date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_date(&mut self) -> &mut ::std::string::String {
        &mut self.start_date
    }

    // Take field
    pub fn take_start_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.start_date, ::std::string::String::new())
    }

    // double sanctioned_amt = 9;


    pub fn get_sanctioned_amt(&self) -> f64 {
        self.sanctioned_amt
    }
    pub fn clear_sanctioned_amt(&mut self) {
        self.sanctioned_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sanctioned_amt(&mut self, v: f64) {
        self.sanctioned_amt = v;
    }

    // double distributed_amt = 10;


    pub fn get_distributed_amt(&self) -> f64 {
        self.distributed_amt
    }
    pub fn clear_distributed_amt(&mut self) {
        self.distributed_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_distributed_amt(&mut self, v: f64) {
        self.distributed_amt = v;
    }

    // double int_rate = 11;


    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }
    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    // double inst_prin_amt = 12;


    pub fn get_inst_prin_amt(&self) -> f64 {
        self.inst_prin_amt
    }
    pub fn clear_inst_prin_amt(&mut self) {
        self.inst_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_inst_prin_amt(&mut self, v: f64) {
        self.inst_prin_amt = v;
    }

    // double inst_int_amt = 13;


    pub fn get_inst_int_amt(&self) -> f64 {
        self.inst_int_amt
    }
    pub fn clear_inst_int_amt(&mut self) {
        self.inst_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_inst_int_amt(&mut self, v: f64) {
        self.inst_int_amt = v;
    }

    // int64 acc_end_date = 14;


    pub fn get_acc_end_date(&self) -> i64 {
        self.acc_end_date
    }
    pub fn clear_acc_end_date(&mut self) {
        self.acc_end_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_acc_end_date(&mut self, v: i64) {
        self.acc_end_date = v;
    }

    // string int_cal_freq = 15;


    pub fn get_int_cal_freq(&self) -> &str {
        &self.int_cal_freq
    }
    pub fn clear_int_cal_freq(&mut self) {
        self.int_cal_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_cal_freq(&mut self, v: ::std::string::String) {
        self.int_cal_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_cal_freq(&mut self) -> &mut ::std::string::String {
        &mut self.int_cal_freq
    }

    // Take field
    pub fn take_int_cal_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_cal_freq, ::std::string::String::new())
    }

    // string is_floating_rate = 16;


    pub fn get_is_floating_rate(&self) -> &str {
        &self.is_floating_rate
    }
    pub fn clear_is_floating_rate(&mut self) {
        self.is_floating_rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_floating_rate(&mut self, v: ::std::string::String) {
        self.is_floating_rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_floating_rate(&mut self) -> &mut ::std::string::String {
        &mut self.is_floating_rate
    }

    // Take field
    pub fn take_is_floating_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_floating_rate, ::std::string::String::new())
    }

    // string benchmark_ass = 17;


    pub fn get_benchmark_ass(&self) -> &str {
        &self.benchmark_ass
    }
    pub fn clear_benchmark_ass(&mut self) {
        self.benchmark_ass.clear();
    }

    // Param is passed by value, moved
    pub fn set_benchmark_ass(&mut self, v: ::std::string::String) {
        self.benchmark_ass = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_benchmark_ass(&mut self) -> &mut ::std::string::String {
        &mut self.benchmark_ass
    }

    // Take field
    pub fn take_benchmark_ass(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.benchmark_ass, ::std::string::String::new())
    }

    // string spread = 18;


    pub fn get_spread(&self) -> &str {
        &self.spread
    }
    pub fn clear_spread(&mut self) {
        self.spread.clear();
    }

    // Param is passed by value, moved
    pub fn set_spread(&mut self, v: ::std::string::String) {
        self.spread = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spread(&mut self) -> &mut ::std::string::String {
        &mut self.spread
    }

    // Take field
    pub fn take_spread(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.spread, ::std::string::String::new())
    }

    // double min_int_rate = 19;


    pub fn get_min_int_rate(&self) -> f64 {
        self.min_int_rate
    }
    pub fn clear_min_int_rate(&mut self) {
        self.min_int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_min_int_rate(&mut self, v: f64) {
        self.min_int_rate = v;
    }

    // double max_int_rate = 20;


    pub fn get_max_int_rate(&self) -> f64 {
        self.max_int_rate
    }
    pub fn clear_max_int_rate(&mut self) {
        self.max_int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_max_int_rate(&mut self, v: f64) {
        self.max_int_rate = v;
    }

    // int64 early_date = 21;


    pub fn get_early_date(&self) -> i64 {
        self.early_date
    }
    pub fn clear_early_date(&mut self) {
        self.early_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_early_date(&mut self, v: i64) {
        self.early_date = v;
    }

    // string rep_freq = 22;


    pub fn get_rep_freq(&self) -> &str {
        &self.rep_freq
    }
    pub fn clear_rep_freq(&mut self) {
        self.rep_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_rep_freq(&mut self, v: ::std::string::String) {
        self.rep_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rep_freq(&mut self) -> &mut ::std::string::String {
        &mut self.rep_freq
    }

    // Take field
    pub fn take_rep_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rep_freq, ::std::string::String::new())
    }

    // string cust_ctry_code = 23;


    pub fn get_cust_ctry_code(&self) -> &str {
        &self.cust_ctry_code
    }
    pub fn clear_cust_ctry_code(&mut self) {
        self.cust_ctry_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_ctry_code(&mut self, v: ::std::string::String) {
        self.cust_ctry_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_ctry_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_ctry_code
    }

    // Take field
    pub fn take_cust_ctry_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_ctry_code, ::std::string::String::new())
    }

    // string cust_crtd_rt = 24;


    pub fn get_cust_crtd_rt(&self) -> &str {
        &self.cust_crtd_rt
    }
    pub fn clear_cust_crtd_rt(&mut self) {
        self.cust_crtd_rt.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_crtd_rt(&mut self, v: ::std::string::String) {
        self.cust_crtd_rt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_crtd_rt(&mut self) -> &mut ::std::string::String {
        &mut self.cust_crtd_rt
    }

    // Take field
    pub fn take_cust_crtd_rt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_crtd_rt, ::std::string::String::new())
    }

    // string cust_sect_code = 25;


    pub fn get_cust_sect_code(&self) -> &str {
        &self.cust_sect_code
    }
    pub fn clear_cust_sect_code(&mut self) {
        self.cust_sect_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_sect_code(&mut self, v: ::std::string::String) {
        self.cust_sect_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_sect_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_sect_code
    }

    // Take field
    pub fn take_cust_sect_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_sect_code, ::std::string::String::new())
    }

    // string cust_indt_code = 26;


    pub fn get_cust_indt_code(&self) -> &str {
        &self.cust_indt_code
    }
    pub fn clear_cust_indt_code(&mut self) {
        self.cust_indt_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_indt_code(&mut self, v: ::std::string::String) {
        self.cust_indt_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_indt_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_indt_code
    }

    // Take field
    pub fn take_cust_indt_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_indt_code, ::std::string::String::new())
    }

    // string custom1 = 27;


    pub fn get_custom1(&self) -> &str {
        &self.custom1
    }
    pub fn clear_custom1(&mut self) {
        self.custom1.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom1(&mut self, v: ::std::string::String) {
        self.custom1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom1(&mut self) -> &mut ::std::string::String {
        &mut self.custom1
    }

    // Take field
    pub fn take_custom1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom1, ::std::string::String::new())
    }

    // string custom2 = 28;


    pub fn get_custom2(&self) -> &str {
        &self.custom2
    }
    pub fn clear_custom2(&mut self) {
        self.custom2.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom2(&mut self, v: ::std::string::String) {
        self.custom2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom2(&mut self) -> &mut ::std::string::String {
        &mut self.custom2
    }

    // Take field
    pub fn take_custom2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom2, ::std::string::String::new())
    }

    // string npa_classification = 29;


    pub fn get_npa_classification(&self) -> &str {
        &self.npa_classification
    }
    pub fn clear_npa_classification(&mut self) {
        self.npa_classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_classification(&mut self, v: ::std::string::String) {
        self.npa_classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_classification(&mut self) -> &mut ::std::string::String {
        &mut self.npa_classification
    }

    // Take field
    pub fn take_npa_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_classification, ::std::string::String::new())
    }

    // string overdue_days = 30;


    pub fn get_overdue_days(&self) -> &str {
        &self.overdue_days
    }
    pub fn clear_overdue_days(&mut self) {
        self.overdue_days.clear();
    }

    // Param is passed by value, moved
    pub fn set_overdue_days(&mut self, v: ::std::string::String) {
        self.overdue_days = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_overdue_days(&mut self) -> &mut ::std::string::String {
        &mut self.overdue_days
    }

    // Take field
    pub fn take_overdue_days(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.overdue_days, ::std::string::String::new())
    }

    // string wcdl_bucket_days = 31;


    pub fn get_wcdl_bucket_days(&self) -> &str {
        &self.wcdl_bucket_days
    }
    pub fn clear_wcdl_bucket_days(&mut self) {
        self.wcdl_bucket_days.clear();
    }

    // Param is passed by value, moved
    pub fn set_wcdl_bucket_days(&mut self, v: ::std::string::String) {
        self.wcdl_bucket_days = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_wcdl_bucket_days(&mut self) -> &mut ::std::string::String {
        &mut self.wcdl_bucket_days
    }

    // Take field
    pub fn take_wcdl_bucket_days(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.wcdl_bucket_days, ::std::string::String::new())
    }

    // string gl_sub_head_code = 32;


    pub fn get_gl_sub_head_code(&self) -> &str {
        &self.gl_sub_head_code
    }
    pub fn clear_gl_sub_head_code(&mut self) {
        self.gl_sub_head_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_sub_head_code(&mut self, v: ::std::string::String) {
        self.gl_sub_head_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_sub_head_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_sub_head_code
    }

    // Take field
    pub fn take_gl_sub_head_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_sub_head_code, ::std::string::String::new())
    }

    // string schm_code = 33;


    pub fn get_schm_code(&self) -> &str {
        &self.schm_code
    }
    pub fn clear_schm_code(&mut self) {
        self.schm_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_schm_code(&mut self, v: ::std::string::String) {
        self.schm_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schm_code(&mut self) -> &mut ::std::string::String {
        &mut self.schm_code
    }

    // Take field
    pub fn take_schm_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schm_code, ::std::string::String::new())
    }

    // string seg_code = 34;


    pub fn get_seg_code(&self) -> &str {
        &self.seg_code
    }
    pub fn clear_seg_code(&mut self) {
        self.seg_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_seg_code(&mut self, v: ::std::string::String) {
        self.seg_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seg_code(&mut self) -> &mut ::std::string::String {
        &mut self.seg_code
    }

    // Take field
    pub fn take_seg_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seg_code, ::std::string::String::new())
    }

    // string final_seg_code = 35;


    pub fn get_final_seg_code(&self) -> &str {
        &self.final_seg_code
    }
    pub fn clear_final_seg_code(&mut self) {
        self.final_seg_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_final_seg_code(&mut self, v: ::std::string::String) {
        self.final_seg_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_final_seg_code(&mut self) -> &mut ::std::string::String {
        &mut self.final_seg_code
    }

    // Take field
    pub fn take_final_seg_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.final_seg_code, ::std::string::String::new())
    }

    // repeated .Cashflow cashflows = 36;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branchcode)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.currencyconvertionrate = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acct_num)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product_id)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_id)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_name)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.start_date)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.sanctioned_amt = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.distributed_amt = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.inst_prin_amt = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.inst_int_amt = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acc_end_date = tmp;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_cal_freq)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_floating_rate)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.benchmark_ass)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.spread)?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.min_int_rate = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.max_int_rate = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.early_date = tmp;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rep_freq)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_ctry_code)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_crtd_rt)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_sect_code)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_indt_code)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom1)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom2)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa_classification)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.overdue_days)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.wcdl_bucket_days)?;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_sub_head_code)?;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schm_code)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seg_code)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.final_seg_code)?;
                },
                36 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.branchcode.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.branchcode);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.currency);
        }
        if self.currencyconvertionrate != 0. {
            my_size += 9;
        }
        if !self.acct_num.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.acct_num);
        }
        if !self.product_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.product_id);
        }
        if !self.customer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.customer_id);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.customer_name);
        }
        if !self.start_date.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.start_date);
        }
        if self.sanctioned_amt != 0. {
            my_size += 9;
        }
        if self.distributed_amt != 0. {
            my_size += 9;
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if self.inst_prin_amt != 0. {
            my_size += 9;
        }
        if self.inst_int_amt != 0. {
            my_size += 9;
        }
        if self.acc_end_date != 0 {
            my_size += ::protobuf::rt::value_size(14, self.acc_end_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.int_cal_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.int_cal_freq);
        }
        if !self.is_floating_rate.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.is_floating_rate);
        }
        if !self.benchmark_ass.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.benchmark_ass);
        }
        if !self.spread.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.spread);
        }
        if self.min_int_rate != 0. {
            my_size += 10;
        }
        if self.max_int_rate != 0. {
            my_size += 10;
        }
        if self.early_date != 0 {
            my_size += ::protobuf::rt::value_size(21, self.early_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.rep_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.rep_freq);
        }
        if !self.cust_ctry_code.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.cust_ctry_code);
        }
        if !self.cust_crtd_rt.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.cust_crtd_rt);
        }
        if !self.cust_sect_code.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.cust_sect_code);
        }
        if !self.cust_indt_code.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.cust_indt_code);
        }
        if !self.custom1.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.custom1);
        }
        if !self.custom2.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.custom2);
        }
        if !self.npa_classification.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.npa_classification);
        }
        if !self.overdue_days.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.overdue_days);
        }
        if !self.wcdl_bucket_days.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.wcdl_bucket_days);
        }
        if !self.gl_sub_head_code.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.gl_sub_head_code);
        }
        if !self.schm_code.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.schm_code);
        }
        if !self.seg_code.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.seg_code);
        }
        if !self.final_seg_code.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.final_seg_code);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.branchcode.is_empty() {
            os.write_string(1, &self.branchcode)?;
        }
        if !self.currency.is_empty() {
            os.write_string(2, &self.currency)?;
        }
        if self.currencyconvertionrate != 0. {
            os.write_double(3, self.currencyconvertionrate)?;
        }
        if !self.acct_num.is_empty() {
            os.write_string(4, &self.acct_num)?;
        }
        if !self.product_id.is_empty() {
            os.write_string(5, &self.product_id)?;
        }
        if !self.customer_id.is_empty() {
            os.write_string(6, &self.customer_id)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(7, &self.customer_name)?;
        }
        if !self.start_date.is_empty() {
            os.write_string(8, &self.start_date)?;
        }
        if self.sanctioned_amt != 0. {
            os.write_double(9, self.sanctioned_amt)?;
        }
        if self.distributed_amt != 0. {
            os.write_double(10, self.distributed_amt)?;
        }
        if self.int_rate != 0. {
            os.write_double(11, self.int_rate)?;
        }
        if self.inst_prin_amt != 0. {
            os.write_double(12, self.inst_prin_amt)?;
        }
        if self.inst_int_amt != 0. {
            os.write_double(13, self.inst_int_amt)?;
        }
        if self.acc_end_date != 0 {
            os.write_int64(14, self.acc_end_date)?;
        }
        if !self.int_cal_freq.is_empty() {
            os.write_string(15, &self.int_cal_freq)?;
        }
        if !self.is_floating_rate.is_empty() {
            os.write_string(16, &self.is_floating_rate)?;
        }
        if !self.benchmark_ass.is_empty() {
            os.write_string(17, &self.benchmark_ass)?;
        }
        if !self.spread.is_empty() {
            os.write_string(18, &self.spread)?;
        }
        if self.min_int_rate != 0. {
            os.write_double(19, self.min_int_rate)?;
        }
        if self.max_int_rate != 0. {
            os.write_double(20, self.max_int_rate)?;
        }
        if self.early_date != 0 {
            os.write_int64(21, self.early_date)?;
        }
        if !self.rep_freq.is_empty() {
            os.write_string(22, &self.rep_freq)?;
        }
        if !self.cust_ctry_code.is_empty() {
            os.write_string(23, &self.cust_ctry_code)?;
        }
        if !self.cust_crtd_rt.is_empty() {
            os.write_string(24, &self.cust_crtd_rt)?;
        }
        if !self.cust_sect_code.is_empty() {
            os.write_string(25, &self.cust_sect_code)?;
        }
        if !self.cust_indt_code.is_empty() {
            os.write_string(26, &self.cust_indt_code)?;
        }
        if !self.custom1.is_empty() {
            os.write_string(27, &self.custom1)?;
        }
        if !self.custom2.is_empty() {
            os.write_string(28, &self.custom2)?;
        }
        if !self.npa_classification.is_empty() {
            os.write_string(29, &self.npa_classification)?;
        }
        if !self.overdue_days.is_empty() {
            os.write_string(30, &self.overdue_days)?;
        }
        if !self.wcdl_bucket_days.is_empty() {
            os.write_string(31, &self.wcdl_bucket_days)?;
        }
        if !self.gl_sub_head_code.is_empty() {
            os.write_string(32, &self.gl_sub_head_code)?;
        }
        if !self.schm_code.is_empty() {
            os.write_string(33, &self.schm_code)?;
        }
        if !self.seg_code.is_empty() {
            os.write_string(34, &self.seg_code)?;
        }
        if !self.final_seg_code.is_empty() {
            os.write_string(35, &self.final_seg_code)?;
        }
        for v in &self.cashflows {
            os.write_tag(36, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "branchcode",
                |m: &AccountWithCashflows| { &m.branchcode },
                |m: &mut AccountWithCashflows| { &mut m.branchcode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &AccountWithCashflows| { &m.currency },
                |m: &mut AccountWithCashflows| { &mut m.currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "currencyconvertionrate",
                |m: &AccountWithCashflows| { &m.currencyconvertionrate },
                |m: &mut AccountWithCashflows| { &mut m.currencyconvertionrate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acct_num",
                |m: &AccountWithCashflows| { &m.acct_num },
                |m: &mut AccountWithCashflows| { &mut m.acct_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "product_id",
                |m: &AccountWithCashflows| { &m.product_id },
                |m: &mut AccountWithCashflows| { &mut m.product_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_id",
                |m: &AccountWithCashflows| { &m.customer_id },
                |m: &mut AccountWithCashflows| { &mut m.customer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_name",
                |m: &AccountWithCashflows| { &m.customer_name },
                |m: &mut AccountWithCashflows| { &mut m.customer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "start_date",
                |m: &AccountWithCashflows| { &m.start_date },
                |m: &mut AccountWithCashflows| { &mut m.start_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "sanctioned_amt",
                |m: &AccountWithCashflows| { &m.sanctioned_amt },
                |m: &mut AccountWithCashflows| { &mut m.sanctioned_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "distributed_amt",
                |m: &AccountWithCashflows| { &m.distributed_amt },
                |m: &mut AccountWithCashflows| { &mut m.distributed_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_rate",
                |m: &AccountWithCashflows| { &m.int_rate },
                |m: &mut AccountWithCashflows| { &mut m.int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "inst_prin_amt",
                |m: &AccountWithCashflows| { &m.inst_prin_amt },
                |m: &mut AccountWithCashflows| { &mut m.inst_prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "inst_int_amt",
                |m: &AccountWithCashflows| { &m.inst_int_amt },
                |m: &mut AccountWithCashflows| { &mut m.inst_int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "acc_end_date",
                |m: &AccountWithCashflows| { &m.acc_end_date },
                |m: &mut AccountWithCashflows| { &mut m.acc_end_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_cal_freq",
                |m: &AccountWithCashflows| { &m.int_cal_freq },
                |m: &mut AccountWithCashflows| { &mut m.int_cal_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "is_floating_rate",
                |m: &AccountWithCashflows| { &m.is_floating_rate },
                |m: &mut AccountWithCashflows| { &mut m.is_floating_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "benchmark_ass",
                |m: &AccountWithCashflows| { &m.benchmark_ass },
                |m: &mut AccountWithCashflows| { &mut m.benchmark_ass },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "spread",
                |m: &AccountWithCashflows| { &m.spread },
                |m: &mut AccountWithCashflows| { &mut m.spread },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "min_int_rate",
                |m: &AccountWithCashflows| { &m.min_int_rate },
                |m: &mut AccountWithCashflows| { &mut m.min_int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "max_int_rate",
                |m: &AccountWithCashflows| { &m.max_int_rate },
                |m: &mut AccountWithCashflows| { &mut m.max_int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "early_date",
                |m: &AccountWithCashflows| { &m.early_date },
                |m: &mut AccountWithCashflows| { &mut m.early_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rep_freq",
                |m: &AccountWithCashflows| { &m.rep_freq },
                |m: &mut AccountWithCashflows| { &mut m.rep_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_ctry_code",
                |m: &AccountWithCashflows| { &m.cust_ctry_code },
                |m: &mut AccountWithCashflows| { &mut m.cust_ctry_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_crtd_rt",
                |m: &AccountWithCashflows| { &m.cust_crtd_rt },
                |m: &mut AccountWithCashflows| { &mut m.cust_crtd_rt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_sect_code",
                |m: &AccountWithCashflows| { &m.cust_sect_code },
                |m: &mut AccountWithCashflows| { &mut m.cust_sect_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_indt_code",
                |m: &AccountWithCashflows| { &m.cust_indt_code },
                |m: &mut AccountWithCashflows| { &mut m.cust_indt_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "custom1",
                |m: &AccountWithCashflows| { &m.custom1 },
                |m: &mut AccountWithCashflows| { &mut m.custom1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "custom2",
                |m: &AccountWithCashflows| { &m.custom2 },
                |m: &mut AccountWithCashflows| { &mut m.custom2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "npa_classification",
                |m: &AccountWithCashflows| { &m.npa_classification },
                |m: &mut AccountWithCashflows| { &mut m.npa_classification },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "overdue_days",
                |m: &AccountWithCashflows| { &m.overdue_days },
                |m: &mut AccountWithCashflows| { &mut m.overdue_days },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "wcdl_bucket_days",
                |m: &AccountWithCashflows| { &m.wcdl_bucket_days },
                |m: &mut AccountWithCashflows| { &mut m.wcdl_bucket_days },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_sub_head_code",
                |m: &AccountWithCashflows| { &m.gl_sub_head_code },
                |m: &mut AccountWithCashflows| { &mut m.gl_sub_head_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "schm_code",
                |m: &AccountWithCashflows| { &m.schm_code },
                |m: &mut AccountWithCashflows| { &mut m.schm_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seg_code",
                |m: &AccountWithCashflows| { &m.seg_code },
                |m: &mut AccountWithCashflows| { &mut m.seg_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "final_seg_code",
                |m: &AccountWithCashflows| { &m.final_seg_code },
                |m: &mut AccountWithCashflows| { &mut m.final_seg_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.branchcode.clear();
        self.currency.clear();
        self.currencyconvertionrate = 0.;
        self.acct_num.clear();
        self.product_id.clear();
        self.customer_id.clear();
        self.customer_name.clear();
        self.start_date.clear();
        self.sanctioned_amt = 0.;
        self.distributed_amt = 0.;
        self.int_rate = 0.;
        self.inst_prin_amt = 0.;
        self.inst_int_amt = 0.;
        self.acc_end_date = 0;
        self.int_cal_freq.clear();
        self.is_floating_rate.clear();
        self.benchmark_ass.clear();
        self.spread.clear();
        self.min_int_rate = 0.;
        self.max_int_rate = 0.;
        self.early_date = 0;
        self.rep_freq.clear();
        self.cust_ctry_code.clear();
        self.cust_crtd_rt.clear();
        self.cust_sect_code.clear();
        self.cust_indt_code.clear();
        self.custom1.clear();
        self.custom2.clear();
        self.npa_classification.clear();
        self.overdue_days.clear();
        self.wcdl_bucket_days.clear();
        self.gl_sub_head_code.clear();
        self.schm_code.clear();
        self.seg_code.clear();
        self.final_seg_code.clear();
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\
    \x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\
    \x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\
    \x04date\"\xf7\t\n\x14AccountWithCashflows\x12\x1e\n\nbranchcode\x18\x01\
    \x20\x01(\tR\nbranchcode\x12\x1a\n\x08currency\x18\x02\x20\x01(\tR\x08cu\
    rrency\x126\n\x16currencyconvertionrate\x18\x03\x20\x01(\x01R\x16currenc\
    yconvertionrate\x12\x19\n\x08acct_num\x18\x04\x20\x01(\tR\x07acctNum\x12\
    \x1d\n\nproduct_id\x18\x05\x20\x01(\tR\tproductId\x12\x1f\n\x0bcustomer_\
    id\x18\x06\x20\x01(\tR\ncustomerId\x12#\n\rcustomer_name\x18\x07\x20\x01\
    (\tR\x0ccustomerName\x12\x1d\n\nstart_date\x18\x08\x20\x01(\tR\tstartDat\
    e\x12%\n\x0esanctioned_amt\x18\t\x20\x01(\x01R\rsanctionedAmt\x12'\n\x0f\
    distributed_amt\x18\n\x20\x01(\x01R\x0edistributedAmt\x12\x19\n\x08int_r\
    ate\x18\x0b\x20\x01(\x01R\x07intRate\x12\"\n\rinst_prin_amt\x18\x0c\x20\
    \x01(\x01R\x0binstPrinAmt\x12\x20\n\x0cinst_int_amt\x18\r\x20\x01(\x01R\
    \ninstIntAmt\x12\x20\n\x0cacc_end_date\x18\x0e\x20\x01(\x03R\naccEndDate\
    \x12\x20\n\x0cint_cal_freq\x18\x0f\x20\x01(\tR\nintCalFreq\x12(\n\x10is_\
    floating_rate\x18\x10\x20\x01(\tR\x0eisFloatingRate\x12#\n\rbenchmark_as\
    s\x18\x11\x20\x01(\tR\x0cbenchmarkAss\x12\x16\n\x06spread\x18\x12\x20\
    \x01(\tR\x06spread\x12\x20\n\x0cmin_int_rate\x18\x13\x20\x01(\x01R\nminI\
    ntRate\x12\x20\n\x0cmax_int_rate\x18\x14\x20\x01(\x01R\nmaxIntRate\x12\
    \x1d\n\nearly_date\x18\x15\x20\x01(\x03R\tearlyDate\x12\x19\n\x08rep_fre\
    q\x18\x16\x20\x01(\tR\x07repFreq\x12$\n\x0ecust_ctry_code\x18\x17\x20\
    \x01(\tR\x0ccustCtryCode\x12\x20\n\x0ccust_crtd_rt\x18\x18\x20\x01(\tR\n\
    custCrtdRt\x12$\n\x0ecust_sect_code\x18\x19\x20\x01(\tR\x0ccustSectCode\
    \x12$\n\x0ecust_indt_code\x18\x1a\x20\x01(\tR\x0ccustIndtCode\x12\x18\n\
    \x07custom1\x18\x1b\x20\x01(\tR\x07custom1\x12\x18\n\x07custom2\x18\x1c\
    \x20\x01(\tR\x07custom2\x12-\n\x12npa_classification\x18\x1d\x20\x01(\tR\
    \x11npaClassification\x12!\n\x0coverdue_days\x18\x1e\x20\x01(\tR\x0bover\
    dueDays\x12(\n\x10wcdl_bucket_days\x18\x1f\x20\x01(\tR\x0ewcdlBucketDays\
    \x12'\n\x10gl_sub_head_code\x18\x20\x20\x01(\tR\rglSubHeadCode\x12\x1b\n\
    \tschm_code\x18!\x20\x01(\tR\x08schmCode\x12\x19\n\x08seg_code\x18\"\x20\
    \x01(\tR\x07segCode\x12$\n\x0efinal_seg_code\x18#\x20\x01(\tR\x0cfinalSe\
    gCode\x12'\n\tcashflows\x18$\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06pr\
    oto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
