// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double prin_amt = 2;

    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_int_amt();
        self.clear_prin_amt();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub account_id: ::std::string::String,
    pub outstanding_bal: f64,
    pub currency: ::std::string::String,
    pub start_date: i64,
    pub maturity_date: i64,
    pub int_rate: f64,
    pub int_rate_classification: ::std::string::String,
    pub benchmark: ::std::string::String,
    pub repricing_frequency: ::std::string::String,
    pub last_repr_date: ::std::string::String,
    pub next_repr_date: ::std::string::String,
    pub coupon_payment_start_date: ::std::string::String,
    pub coupon_payment_frequency: ::std::string::String,
    pub cust_constitution_code: i64,
    pub instrument: ::std::string::String,
    pub counter_party_id: ::std::string::String,
    pub counter_party_name: ::std::string::String,
    pub counter_party_type: ::std::string::String,
    pub customer_id: i64,
    pub customer_name: ::std::string::String,
    pub product_code: ::std::string::String,
    pub account_type: ::std::string::String,
    pub gl: ::std::string::String,
    pub rate_flag: ::std::string::String,
    pub branch: ::std::string::String,
    pub rm: ::std::string::String,
    pub group_code: ::std::string::String,
    pub monthly_avg_bal: f64,
    pub aorl: ::std::string::String,
    pub rl1: i64,
    pub rl2: i64,
    pub rl3: i64,
    pub tenor: i64,
    pub total_interest_amount: f64,
    pub total_principal_amount: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string account_id = 1;

    pub fn clear_account_id(&mut self) {
        self.account_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: ::std::string::String) {
        self.account_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_id(&mut self) -> &mut ::std::string::String {
        &mut self.account_id
    }

    // Take field
    pub fn take_account_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_id, ::std::string::String::new())
    }

    pub fn get_account_id(&self) -> &str {
        &self.account_id
    }

    // double outstanding_bal = 2;

    pub fn clear_outstanding_bal(&mut self) {
        self.outstanding_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_outstanding_bal(&mut self, v: f64) {
        self.outstanding_bal = v;
    }

    pub fn get_outstanding_bal(&self) -> f64 {
        self.outstanding_bal
    }

    // string currency = 3;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // int64 start_date = 4;

    pub fn clear_start_date(&mut self) {
        self.start_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_date(&mut self, v: i64) {
        self.start_date = v;
    }

    pub fn get_start_date(&self) -> i64 {
        self.start_date
    }

    // int64 maturity_date = 5;

    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }

    // double int_rate = 6;

    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }

    // string int_rate_classification = 7;

    pub fn clear_int_rate_classification(&mut self) {
        self.int_rate_classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_rate_classification(&mut self, v: ::std::string::String) {
        self.int_rate_classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_rate_classification(&mut self) -> &mut ::std::string::String {
        &mut self.int_rate_classification
    }

    // Take field
    pub fn take_int_rate_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_rate_classification, ::std::string::String::new())
    }

    pub fn get_int_rate_classification(&self) -> &str {
        &self.int_rate_classification
    }

    // string benchmark = 8;

    pub fn clear_benchmark(&mut self) {
        self.benchmark.clear();
    }

    // Param is passed by value, moved
    pub fn set_benchmark(&mut self, v: ::std::string::String) {
        self.benchmark = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_benchmark(&mut self) -> &mut ::std::string::String {
        &mut self.benchmark
    }

    // Take field
    pub fn take_benchmark(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.benchmark, ::std::string::String::new())
    }

    pub fn get_benchmark(&self) -> &str {
        &self.benchmark
    }

    // string repricing_frequency = 9;

    pub fn clear_repricing_frequency(&mut self) {
        self.repricing_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_repricing_frequency(&mut self, v: ::std::string::String) {
        self.repricing_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repricing_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.repricing_frequency
    }

    // Take field
    pub fn take_repricing_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.repricing_frequency, ::std::string::String::new())
    }

    pub fn get_repricing_frequency(&self) -> &str {
        &self.repricing_frequency
    }

    // string last_repr_date = 10;

    pub fn clear_last_repr_date(&mut self) {
        self.last_repr_date.clear();
    }

    // Param is passed by value, moved
    pub fn set_last_repr_date(&mut self, v: ::std::string::String) {
        self.last_repr_date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_repr_date(&mut self) -> &mut ::std::string::String {
        &mut self.last_repr_date
    }

    // Take field
    pub fn take_last_repr_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.last_repr_date, ::std::string::String::new())
    }

    pub fn get_last_repr_date(&self) -> &str {
        &self.last_repr_date
    }

    // string next_repr_date = 11;

    pub fn clear_next_repr_date(&mut self) {
        self.next_repr_date.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_repr_date(&mut self, v: ::std::string::String) {
        self.next_repr_date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_repr_date(&mut self) -> &mut ::std::string::String {
        &mut self.next_repr_date
    }

    // Take field
    pub fn take_next_repr_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_repr_date, ::std::string::String::new())
    }

    pub fn get_next_repr_date(&self) -> &str {
        &self.next_repr_date
    }

    // string coupon_payment_start_date = 12;

    pub fn clear_coupon_payment_start_date(&mut self) {
        self.coupon_payment_start_date.clear();
    }

    // Param is passed by value, moved
    pub fn set_coupon_payment_start_date(&mut self, v: ::std::string::String) {
        self.coupon_payment_start_date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coupon_payment_start_date(&mut self) -> &mut ::std::string::String {
        &mut self.coupon_payment_start_date
    }

    // Take field
    pub fn take_coupon_payment_start_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coupon_payment_start_date, ::std::string::String::new())
    }

    pub fn get_coupon_payment_start_date(&self) -> &str {
        &self.coupon_payment_start_date
    }

    // string coupon_payment_frequency = 13;

    pub fn clear_coupon_payment_frequency(&mut self) {
        self.coupon_payment_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_coupon_payment_frequency(&mut self, v: ::std::string::String) {
        self.coupon_payment_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coupon_payment_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.coupon_payment_frequency
    }

    // Take field
    pub fn take_coupon_payment_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coupon_payment_frequency, ::std::string::String::new())
    }

    pub fn get_coupon_payment_frequency(&self) -> &str {
        &self.coupon_payment_frequency
    }

    // int64 cust_constitution_code = 14;

    pub fn clear_cust_constitution_code(&mut self) {
        self.cust_constitution_code = 0;
    }

    // Param is passed by value, moved
    pub fn set_cust_constitution_code(&mut self, v: i64) {
        self.cust_constitution_code = v;
    }

    pub fn get_cust_constitution_code(&self) -> i64 {
        self.cust_constitution_code
    }

    // string instrument = 15;

    pub fn clear_instrument(&mut self) {
        self.instrument.clear();
    }

    // Param is passed by value, moved
    pub fn set_instrument(&mut self, v: ::std::string::String) {
        self.instrument = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instrument(&mut self) -> &mut ::std::string::String {
        &mut self.instrument
    }

    // Take field
    pub fn take_instrument(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instrument, ::std::string::String::new())
    }

    pub fn get_instrument(&self) -> &str {
        &self.instrument
    }

    // string counter_party_id = 16;

    pub fn clear_counter_party_id(&mut self) {
        self.counter_party_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_counter_party_id(&mut self, v: ::std::string::String) {
        self.counter_party_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counter_party_id(&mut self) -> &mut ::std::string::String {
        &mut self.counter_party_id
    }

    // Take field
    pub fn take_counter_party_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counter_party_id, ::std::string::String::new())
    }

    pub fn get_counter_party_id(&self) -> &str {
        &self.counter_party_id
    }

    // string counter_party_name = 17;

    pub fn clear_counter_party_name(&mut self) {
        self.counter_party_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_counter_party_name(&mut self, v: ::std::string::String) {
        self.counter_party_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counter_party_name(&mut self) -> &mut ::std::string::String {
        &mut self.counter_party_name
    }

    // Take field
    pub fn take_counter_party_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counter_party_name, ::std::string::String::new())
    }

    pub fn get_counter_party_name(&self) -> &str {
        &self.counter_party_name
    }

    // string counter_party_type = 18;

    pub fn clear_counter_party_type(&mut self) {
        self.counter_party_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_counter_party_type(&mut self, v: ::std::string::String) {
        self.counter_party_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counter_party_type(&mut self) -> &mut ::std::string::String {
        &mut self.counter_party_type
    }

    // Take field
    pub fn take_counter_party_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counter_party_type, ::std::string::String::new())
    }

    pub fn get_counter_party_type(&self) -> &str {
        &self.counter_party_type
    }

    // int64 customer_id = 19;

    pub fn clear_customer_id(&mut self) {
        self.customer_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_customer_id(&mut self, v: i64) {
        self.customer_id = v;
    }

    pub fn get_customer_id(&self) -> i64 {
        self.customer_id
    }

    // string customer_name = 20;

    pub fn clear_customer_name(&mut self) {
        self.customer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_name(&mut self, v: ::std::string::String) {
        self.customer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_name(&mut self) -> &mut ::std::string::String {
        &mut self.customer_name
    }

    // Take field
    pub fn take_customer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_name, ::std::string::String::new())
    }

    pub fn get_customer_name(&self) -> &str {
        &self.customer_name
    }

    // string product_code = 21;

    pub fn clear_product_code(&mut self) {
        self.product_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_code(&mut self, v: ::std::string::String) {
        self.product_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_code(&mut self) -> &mut ::std::string::String {
        &mut self.product_code
    }

    // Take field
    pub fn take_product_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_code, ::std::string::String::new())
    }

    pub fn get_product_code(&self) -> &str {
        &self.product_code
    }

    // string account_type = 22;

    pub fn clear_account_type(&mut self) {
        self.account_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_type(&mut self, v: ::std::string::String) {
        self.account_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_type(&mut self) -> &mut ::std::string::String {
        &mut self.account_type
    }

    // Take field
    pub fn take_account_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_type, ::std::string::String::new())
    }

    pub fn get_account_type(&self) -> &str {
        &self.account_type
    }

    // string gl = 23;

    pub fn clear_gl(&mut self) {
        self.gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl(&mut self, v: ::std::string::String) {
        self.gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl(&mut self) -> &mut ::std::string::String {
        &mut self.gl
    }

    // Take field
    pub fn take_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl, ::std::string::String::new())
    }

    pub fn get_gl(&self) -> &str {
        &self.gl
    }

    // string rate_flag = 24;

    pub fn clear_rate_flag(&mut self) {
        self.rate_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_flag(&mut self, v: ::std::string::String) {
        self.rate_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_flag(&mut self) -> &mut ::std::string::String {
        &mut self.rate_flag
    }

    // Take field
    pub fn take_rate_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_flag, ::std::string::String::new())
    }

    pub fn get_rate_flag(&self) -> &str {
        &self.rate_flag
    }

    // string branch = 25;

    pub fn clear_branch(&mut self) {
        self.branch.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch(&mut self, v: ::std::string::String) {
        self.branch = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch(&mut self) -> &mut ::std::string::String {
        &mut self.branch
    }

    // Take field
    pub fn take_branch(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch, ::std::string::String::new())
    }

    pub fn get_branch(&self) -> &str {
        &self.branch
    }

    // string rm = 26;

    pub fn clear_rm(&mut self) {
        self.rm.clear();
    }

    // Param is passed by value, moved
    pub fn set_rm(&mut self, v: ::std::string::String) {
        self.rm = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rm(&mut self) -> &mut ::std::string::String {
        &mut self.rm
    }

    // Take field
    pub fn take_rm(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rm, ::std::string::String::new())
    }

    pub fn get_rm(&self) -> &str {
        &self.rm
    }

    // string group_code = 27;

    pub fn clear_group_code(&mut self) {
        self.group_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_group_code(&mut self, v: ::std::string::String) {
        self.group_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group_code(&mut self) -> &mut ::std::string::String {
        &mut self.group_code
    }

    // Take field
    pub fn take_group_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group_code, ::std::string::String::new())
    }

    pub fn get_group_code(&self) -> &str {
        &self.group_code
    }

    // double monthly_avg_bal = 28;

    pub fn clear_monthly_avg_bal(&mut self) {
        self.monthly_avg_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_monthly_avg_bal(&mut self, v: f64) {
        self.monthly_avg_bal = v;
    }

    pub fn get_monthly_avg_bal(&self) -> f64 {
        self.monthly_avg_bal
    }

    // string aorl = 29;

    pub fn clear_aorl(&mut self) {
        self.aorl.clear();
    }

    // Param is passed by value, moved
    pub fn set_aorl(&mut self, v: ::std::string::String) {
        self.aorl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_aorl(&mut self) -> &mut ::std::string::String {
        &mut self.aorl
    }

    // Take field
    pub fn take_aorl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.aorl, ::std::string::String::new())
    }

    pub fn get_aorl(&self) -> &str {
        &self.aorl
    }

    // int64 rl1 = 30;

    pub fn clear_rl1(&mut self) {
        self.rl1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_rl1(&mut self, v: i64) {
        self.rl1 = v;
    }

    pub fn get_rl1(&self) -> i64 {
        self.rl1
    }

    // int64 rl2 = 31;

    pub fn clear_rl2(&mut self) {
        self.rl2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_rl2(&mut self, v: i64) {
        self.rl2 = v;
    }

    pub fn get_rl2(&self) -> i64 {
        self.rl2
    }

    // int64 rl3 = 32;

    pub fn clear_rl3(&mut self) {
        self.rl3 = 0;
    }

    // Param is passed by value, moved
    pub fn set_rl3(&mut self, v: i64) {
        self.rl3 = v;
    }

    pub fn get_rl3(&self) -> i64 {
        self.rl3
    }

    // int64 tenor = 33;

    pub fn clear_tenor(&mut self) {
        self.tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_tenor(&mut self, v: i64) {
        self.tenor = v;
    }

    pub fn get_tenor(&self) -> i64 {
        self.tenor
    }

    // double total_interest_amount = 34;

    pub fn clear_total_interest_amount(&mut self) {
        self.total_interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_amount(&mut self, v: f64) {
        self.total_interest_amount = v;
    }

    pub fn get_total_interest_amount(&self) -> f64 {
        self.total_interest_amount
    }

    // double total_principal_amount = 35;

    pub fn clear_total_principal_amount(&mut self) {
        self.total_principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_principal_amount(&mut self, v: f64) {
        self.total_principal_amount = v;
    }

    pub fn get_total_principal_amount(&self) -> f64 {
        self.total_principal_amount
    }

    // repeated .Cashflow cashflows = 36;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.outstanding_bal = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.start_date = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_rate_classification)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.benchmark)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.repricing_frequency)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.last_repr_date)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_repr_date)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coupon_payment_start_date)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coupon_payment_frequency)?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cust_constitution_code = tmp;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instrument)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counter_party_id)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counter_party_name)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counter_party_type)?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.customer_id = tmp;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_name)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product_code)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_type)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_flag)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rm)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group_code)?;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.monthly_avg_bal = tmp;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.aorl)?;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rl1 = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rl2 = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rl3 = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tenor = tmp;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_amount = tmp;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_principal_amount = tmp;
                },
                36 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.account_id);
        }
        if self.outstanding_bal != 0. {
            my_size += 9;
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.currency);
        }
        if self.start_date != 0 {
            my_size += ::protobuf::rt::value_size(4, self.start_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(5, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if !self.int_rate_classification.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.int_rate_classification);
        }
        if !self.benchmark.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.benchmark);
        }
        if !self.repricing_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.repricing_frequency);
        }
        if !self.last_repr_date.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.last_repr_date);
        }
        if !self.next_repr_date.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.next_repr_date);
        }
        if !self.coupon_payment_start_date.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.coupon_payment_start_date);
        }
        if !self.coupon_payment_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.coupon_payment_frequency);
        }
        if self.cust_constitution_code != 0 {
            my_size += ::protobuf::rt::value_size(14, self.cust_constitution_code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.instrument.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.instrument);
        }
        if !self.counter_party_id.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.counter_party_id);
        }
        if !self.counter_party_name.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.counter_party_name);
        }
        if !self.counter_party_type.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.counter_party_type);
        }
        if self.customer_id != 0 {
            my_size += ::protobuf::rt::value_size(19, self.customer_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.customer_name);
        }
        if !self.product_code.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.product_code);
        }
        if !self.account_type.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.account_type);
        }
        if !self.gl.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.gl);
        }
        if !self.rate_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.rate_flag);
        }
        if !self.branch.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.branch);
        }
        if !self.rm.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.rm);
        }
        if !self.group_code.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.group_code);
        }
        if self.monthly_avg_bal != 0. {
            my_size += 10;
        }
        if !self.aorl.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.aorl);
        }
        if self.rl1 != 0 {
            my_size += ::protobuf::rt::value_size(30, self.rl1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rl2 != 0 {
            my_size += ::protobuf::rt::value_size(31, self.rl2, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rl3 != 0 {
            my_size += ::protobuf::rt::value_size(32, self.rl3, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tenor != 0 {
            my_size += ::protobuf::rt::value_size(33, self.tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_interest_amount != 0. {
            my_size += 10;
        }
        if self.total_principal_amount != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.account_id.is_empty() {
            os.write_string(1, &self.account_id)?;
        }
        if self.outstanding_bal != 0. {
            os.write_double(2, self.outstanding_bal)?;
        }
        if !self.currency.is_empty() {
            os.write_string(3, &self.currency)?;
        }
        if self.start_date != 0 {
            os.write_int64(4, self.start_date)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(5, self.maturity_date)?;
        }
        if self.int_rate != 0. {
            os.write_double(6, self.int_rate)?;
        }
        if !self.int_rate_classification.is_empty() {
            os.write_string(7, &self.int_rate_classification)?;
        }
        if !self.benchmark.is_empty() {
            os.write_string(8, &self.benchmark)?;
        }
        if !self.repricing_frequency.is_empty() {
            os.write_string(9, &self.repricing_frequency)?;
        }
        if !self.last_repr_date.is_empty() {
            os.write_string(10, &self.last_repr_date)?;
        }
        if !self.next_repr_date.is_empty() {
            os.write_string(11, &self.next_repr_date)?;
        }
        if !self.coupon_payment_start_date.is_empty() {
            os.write_string(12, &self.coupon_payment_start_date)?;
        }
        if !self.coupon_payment_frequency.is_empty() {
            os.write_string(13, &self.coupon_payment_frequency)?;
        }
        if self.cust_constitution_code != 0 {
            os.write_int64(14, self.cust_constitution_code)?;
        }
        if !self.instrument.is_empty() {
            os.write_string(15, &self.instrument)?;
        }
        if !self.counter_party_id.is_empty() {
            os.write_string(16, &self.counter_party_id)?;
        }
        if !self.counter_party_name.is_empty() {
            os.write_string(17, &self.counter_party_name)?;
        }
        if !self.counter_party_type.is_empty() {
            os.write_string(18, &self.counter_party_type)?;
        }
        if self.customer_id != 0 {
            os.write_int64(19, self.customer_id)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(20, &self.customer_name)?;
        }
        if !self.product_code.is_empty() {
            os.write_string(21, &self.product_code)?;
        }
        if !self.account_type.is_empty() {
            os.write_string(22, &self.account_type)?;
        }
        if !self.gl.is_empty() {
            os.write_string(23, &self.gl)?;
        }
        if !self.rate_flag.is_empty() {
            os.write_string(24, &self.rate_flag)?;
        }
        if !self.branch.is_empty() {
            os.write_string(25, &self.branch)?;
        }
        if !self.rm.is_empty() {
            os.write_string(26, &self.rm)?;
        }
        if !self.group_code.is_empty() {
            os.write_string(27, &self.group_code)?;
        }
        if self.monthly_avg_bal != 0. {
            os.write_double(28, self.monthly_avg_bal)?;
        }
        if !self.aorl.is_empty() {
            os.write_string(29, &self.aorl)?;
        }
        if self.rl1 != 0 {
            os.write_int64(30, self.rl1)?;
        }
        if self.rl2 != 0 {
            os.write_int64(31, self.rl2)?;
        }
        if self.rl3 != 0 {
            os.write_int64(32, self.rl3)?;
        }
        if self.tenor != 0 {
            os.write_int64(33, self.tenor)?;
        }
        if self.total_interest_amount != 0. {
            os.write_double(34, self.total_interest_amount)?;
        }
        if self.total_principal_amount != 0. {
            os.write_double(35, self.total_principal_amount)?;
        }
        for v in &self.cashflows {
            os.write_tag(36, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "account_id",
                    |m: &AccountWithCashflows| { &m.account_id },
                    |m: &mut AccountWithCashflows| { &mut m.account_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "outstanding_bal",
                    |m: &AccountWithCashflows| { &m.outstanding_bal },
                    |m: &mut AccountWithCashflows| { &mut m.outstanding_bal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &AccountWithCashflows| { &m.currency },
                    |m: &mut AccountWithCashflows| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "start_date",
                    |m: &AccountWithCashflows| { &m.start_date },
                    |m: &mut AccountWithCashflows| { &mut m.start_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "maturity_date",
                    |m: &AccountWithCashflows| { &m.maturity_date },
                    |m: &mut AccountWithCashflows| { &mut m.maturity_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rate",
                    |m: &AccountWithCashflows| { &m.int_rate },
                    |m: &mut AccountWithCashflows| { &mut m.int_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "int_rate_classification",
                    |m: &AccountWithCashflows| { &m.int_rate_classification },
                    |m: &mut AccountWithCashflows| { &mut m.int_rate_classification },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "benchmark",
                    |m: &AccountWithCashflows| { &m.benchmark },
                    |m: &mut AccountWithCashflows| { &mut m.benchmark },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "repricing_frequency",
                    |m: &AccountWithCashflows| { &m.repricing_frequency },
                    |m: &mut AccountWithCashflows| { &mut m.repricing_frequency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "last_repr_date",
                    |m: &AccountWithCashflows| { &m.last_repr_date },
                    |m: &mut AccountWithCashflows| { &mut m.last_repr_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "next_repr_date",
                    |m: &AccountWithCashflows| { &m.next_repr_date },
                    |m: &mut AccountWithCashflows| { &mut m.next_repr_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "coupon_payment_start_date",
                    |m: &AccountWithCashflows| { &m.coupon_payment_start_date },
                    |m: &mut AccountWithCashflows| { &mut m.coupon_payment_start_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "coupon_payment_frequency",
                    |m: &AccountWithCashflows| { &m.coupon_payment_frequency },
                    |m: &mut AccountWithCashflows| { &mut m.coupon_payment_frequency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cust_constitution_code",
                    |m: &AccountWithCashflows| { &m.cust_constitution_code },
                    |m: &mut AccountWithCashflows| { &mut m.cust_constitution_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "instrument",
                    |m: &AccountWithCashflows| { &m.instrument },
                    |m: &mut AccountWithCashflows| { &mut m.instrument },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counter_party_id",
                    |m: &AccountWithCashflows| { &m.counter_party_id },
                    |m: &mut AccountWithCashflows| { &mut m.counter_party_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counter_party_name",
                    |m: &AccountWithCashflows| { &m.counter_party_name },
                    |m: &mut AccountWithCashflows| { &mut m.counter_party_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counter_party_type",
                    |m: &AccountWithCashflows| { &m.counter_party_type },
                    |m: &mut AccountWithCashflows| { &mut m.counter_party_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "customer_id",
                    |m: &AccountWithCashflows| { &m.customer_id },
                    |m: &mut AccountWithCashflows| { &mut m.customer_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "customer_name",
                    |m: &AccountWithCashflows| { &m.customer_name },
                    |m: &mut AccountWithCashflows| { &mut m.customer_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "product_code",
                    |m: &AccountWithCashflows| { &m.product_code },
                    |m: &mut AccountWithCashflows| { &mut m.product_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "account_type",
                    |m: &AccountWithCashflows| { &m.account_type },
                    |m: &mut AccountWithCashflows| { &mut m.account_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gl",
                    |m: &AccountWithCashflows| { &m.gl },
                    |m: &mut AccountWithCashflows| { &mut m.gl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rate_flag",
                    |m: &AccountWithCashflows| { &m.rate_flag },
                    |m: &mut AccountWithCashflows| { &mut m.rate_flag },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "branch",
                    |m: &AccountWithCashflows| { &m.branch },
                    |m: &mut AccountWithCashflows| { &mut m.branch },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rm",
                    |m: &AccountWithCashflows| { &m.rm },
                    |m: &mut AccountWithCashflows| { &mut m.rm },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "group_code",
                    |m: &AccountWithCashflows| { &m.group_code },
                    |m: &mut AccountWithCashflows| { &mut m.group_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "monthly_avg_bal",
                    |m: &AccountWithCashflows| { &m.monthly_avg_bal },
                    |m: &mut AccountWithCashflows| { &mut m.monthly_avg_bal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "aorl",
                    |m: &AccountWithCashflows| { &m.aorl },
                    |m: &mut AccountWithCashflows| { &mut m.aorl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "rl1",
                    |m: &AccountWithCashflows| { &m.rl1 },
                    |m: &mut AccountWithCashflows| { &mut m.rl1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "rl2",
                    |m: &AccountWithCashflows| { &m.rl2 },
                    |m: &mut AccountWithCashflows| { &mut m.rl2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "rl3",
                    |m: &AccountWithCashflows| { &m.rl3 },
                    |m: &mut AccountWithCashflows| { &mut m.rl3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tenor",
                    |m: &AccountWithCashflows| { &m.tenor },
                    |m: &mut AccountWithCashflows| { &mut m.tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_interest_amount",
                    |m: &AccountWithCashflows| { &m.total_interest_amount },
                    |m: &mut AccountWithCashflows| { &mut m.total_interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_principal_amount",
                    |m: &AccountWithCashflows| { &m.total_principal_amount },
                    |m: &mut AccountWithCashflows| { &mut m.total_principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_account_id();
        self.clear_outstanding_bal();
        self.clear_currency();
        self.clear_start_date();
        self.clear_maturity_date();
        self.clear_int_rate();
        self.clear_int_rate_classification();
        self.clear_benchmark();
        self.clear_repricing_frequency();
        self.clear_last_repr_date();
        self.clear_next_repr_date();
        self.clear_coupon_payment_start_date();
        self.clear_coupon_payment_frequency();
        self.clear_cust_constitution_code();
        self.clear_instrument();
        self.clear_counter_party_id();
        self.clear_counter_party_name();
        self.clear_counter_party_type();
        self.clear_customer_id();
        self.clear_customer_name();
        self.clear_product_code();
        self.clear_account_type();
        self.clear_gl();
        self.clear_rate_flag();
        self.clear_branch();
        self.clear_rm();
        self.clear_group_code();
        self.clear_monthly_avg_bal();
        self.clear_aorl();
        self.clear_rl1();
        self.clear_rl2();
        self.clear_rl3();
        self.clear_tenor();
        self.clear_total_interest_amount();
        self.clear_total_principal_amount();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19borr_place_stamp_cf.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\
    \x18\x01\x20\x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\
    \x01R\x07prinAmt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\x98\n\
    \n\x14AccountWithCashflows\x12\x1d\n\naccount_id\x18\x01\x20\x01(\tR\tac\
    countId\x12'\n\x0foutstanding_bal\x18\x02\x20\x01(\x01R\x0eoutstandingBa\
    l\x12\x1a\n\x08currency\x18\x03\x20\x01(\tR\x08currency\x12\x1d\n\nstart\
    _date\x18\x04\x20\x01(\x03R\tstartDate\x12#\n\rmaturity_date\x18\x05\x20\
    \x01(\x03R\x0cmaturityDate\x12\x19\n\x08int_rate\x18\x06\x20\x01(\x01R\
    \x07intRate\x126\n\x17int_rate_classification\x18\x07\x20\x01(\tR\x15int\
    RateClassification\x12\x1c\n\tbenchmark\x18\x08\x20\x01(\tR\tbenchmark\
    \x12/\n\x13repricing_frequency\x18\t\x20\x01(\tR\x12repricingFrequency\
    \x12$\n\x0elast_repr_date\x18\n\x20\x01(\tR\x0clastReprDate\x12$\n\x0ene\
    xt_repr_date\x18\x0b\x20\x01(\tR\x0cnextReprDate\x129\n\x19coupon_paymen\
    t_start_date\x18\x0c\x20\x01(\tR\x16couponPaymentStartDate\x128\n\x18cou\
    pon_payment_frequency\x18\r\x20\x01(\tR\x16couponPaymentFrequency\x124\n\
    \x16cust_constitution_code\x18\x0e\x20\x01(\x03R\x14custConstitutionCode\
    \x12\x1e\n\ninstrument\x18\x0f\x20\x01(\tR\ninstrument\x12(\n\x10counter\
    _party_id\x18\x10\x20\x01(\tR\x0ecounterPartyId\x12,\n\x12counter_party_\
    name\x18\x11\x20\x01(\tR\x10counterPartyName\x12,\n\x12counter_party_typ\
    e\x18\x12\x20\x01(\tR\x10counterPartyType\x12\x1f\n\x0bcustomer_id\x18\
    \x13\x20\x01(\x03R\ncustomerId\x12#\n\rcustomer_name\x18\x14\x20\x01(\tR\
    \x0ccustomerName\x12!\n\x0cproduct_code\x18\x15\x20\x01(\tR\x0bproductCo\
    de\x12!\n\x0caccount_type\x18\x16\x20\x01(\tR\x0baccountType\x12\x0e\n\
    \x02gl\x18\x17\x20\x01(\tR\x02gl\x12\x1b\n\trate_flag\x18\x18\x20\x01(\t\
    R\x08rateFlag\x12\x16\n\x06branch\x18\x19\x20\x01(\tR\x06branch\x12\x0e\
    \n\x02rm\x18\x1a\x20\x01(\tR\x02rm\x12\x1d\n\ngroup_code\x18\x1b\x20\x01\
    (\tR\tgroupCode\x12&\n\x0fmonthly_avg_bal\x18\x1c\x20\x01(\x01R\rmonthly\
    AvgBal\x12\x12\n\x04aorl\x18\x1d\x20\x01(\tR\x04aorl\x12\x10\n\x03rl1\
    \x18\x1e\x20\x01(\x03R\x03rl1\x12\x10\n\x03rl2\x18\x1f\x20\x01(\x03R\x03\
    rl2\x12\x10\n\x03rl3\x18\x20\x20\x01(\x03R\x03rl3\x12\x14\n\x05tenor\x18\
    !\x20\x01(\x03R\x05tenor\x122\n\x15total_interest_amount\x18\"\x20\x01(\
    \x01R\x13totalInterestAmount\x124\n\x16total_principal_amount\x18#\x20\
    \x01(\x01R\x14totalPrincipalAmount\x12'\n\tcashflows\x18$\x20\x03(\x0b2\
    \t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
