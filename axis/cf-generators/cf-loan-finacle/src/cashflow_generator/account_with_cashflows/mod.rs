// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub cashflow_type: ::std::string::String,
    pub type_id: ::std::string::String,
    pub subtype_id: ::std::string::String,
    pub amount: f64,
    pub acct_crncy_code: ::std::string::String,
    pub int_rate: f64,
    pub repricing_freq: ::std::string::String,
    pub early_date: i64,
    pub maturity_date: i64,
    pub foracid: ::std::string::String,
    pub start_date: i64,
    pub ir_freq: ::std::string::String,
    pub is_floating: ::std::string::String,
    pub float_rate_benchmark: ::std::string::String,
    pub sol_id: ::std::string::String,
    pub cust_id: ::std::string::String,
    pub cust_name: ::std::string::String,
    pub region_id: ::std::string::String,
    pub schm_type: ::std::string::String,
    pub gl_subhead_code: ::std::string::String,
    pub npa: ::std::string::String,
    pub floor_rate: f64,
    pub cap_rate: f64,
    pub cust_country_cd: ::std::string::String,
    pub cust_credit_rating: ::std::string::String,
    pub cust_sector_cd: ::std::string::String,
    pub cust_industry_cd: ::std::string::String,
    pub exchange_rt: f64,
    pub custom1: ::std::string::String,
    pub custom2: ::std::string::String,
    pub npa_classification: ::std::string::String,
    pub floating_type: ::std::string::String,
    pub out_bal_amount: f64,
    pub acid: ::std::string::String,
    pub final_npa_class: ::std::string::String,
    pub der_pegged_flg: ::std::string::String,
    pub int_tbl_code: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string cashflow_type = 1;


    pub fn get_cashflow_type(&self) -> &str {
        &self.cashflow_type
    }
    pub fn clear_cashflow_type(&mut self) {
        self.cashflow_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflow_type(&mut self, v: ::std::string::String) {
        self.cashflow_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cashflow_type(&mut self) -> &mut ::std::string::String {
        &mut self.cashflow_type
    }

    // Take field
    pub fn take_cashflow_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cashflow_type, ::std::string::String::new())
    }

    // string type_id = 2;


    pub fn get_type_id(&self) -> &str {
        &self.type_id
    }
    pub fn clear_type_id(&mut self) {
        self.type_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_type_id(&mut self, v: ::std::string::String) {
        self.type_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type_id(&mut self) -> &mut ::std::string::String {
        &mut self.type_id
    }

    // Take field
    pub fn take_type_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.type_id, ::std::string::String::new())
    }

    // string subtype_id = 3;


    pub fn get_subtype_id(&self) -> &str {
        &self.subtype_id
    }
    pub fn clear_subtype_id(&mut self) {
        self.subtype_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_subtype_id(&mut self, v: ::std::string::String) {
        self.subtype_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subtype_id(&mut self) -> &mut ::std::string::String {
        &mut self.subtype_id
    }

    // Take field
    pub fn take_subtype_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subtype_id, ::std::string::String::new())
    }

    // double amount = 4;


    pub fn get_amount(&self) -> f64 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: f64) {
        self.amount = v;
    }

    // string acct_crncy_code = 5;


    pub fn get_acct_crncy_code(&self) -> &str {
        &self.acct_crncy_code
    }
    pub fn clear_acct_crncy_code(&mut self) {
        self.acct_crncy_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_acct_crncy_code(&mut self, v: ::std::string::String) {
        self.acct_crncy_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acct_crncy_code(&mut self) -> &mut ::std::string::String {
        &mut self.acct_crncy_code
    }

    // Take field
    pub fn take_acct_crncy_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acct_crncy_code, ::std::string::String::new())
    }

    // double int_rate = 6;


    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }
    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    // string repricing_freq = 7;


    pub fn get_repricing_freq(&self) -> &str {
        &self.repricing_freq
    }
    pub fn clear_repricing_freq(&mut self) {
        self.repricing_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_repricing_freq(&mut self, v: ::std::string::String) {
        self.repricing_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repricing_freq(&mut self) -> &mut ::std::string::String {
        &mut self.repricing_freq
    }

    // Take field
    pub fn take_repricing_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.repricing_freq, ::std::string::String::new())
    }

    // int64 early_date = 8;


    pub fn get_early_date(&self) -> i64 {
        self.early_date
    }
    pub fn clear_early_date(&mut self) {
        self.early_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_early_date(&mut self, v: i64) {
        self.early_date = v;
    }

    // int64 maturity_date = 9;


    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }
    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    // string foracid = 10;


    pub fn get_foracid(&self) -> &str {
        &self.foracid
    }
    pub fn clear_foracid(&mut self) {
        self.foracid.clear();
    }

    // Param is passed by value, moved
    pub fn set_foracid(&mut self, v: ::std::string::String) {
        self.foracid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_foracid(&mut self) -> &mut ::std::string::String {
        &mut self.foracid
    }

    // Take field
    pub fn take_foracid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.foracid, ::std::string::String::new())
    }

    // int64 start_date = 11;


    pub fn get_start_date(&self) -> i64 {
        self.start_date
    }
    pub fn clear_start_date(&mut self) {
        self.start_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_date(&mut self, v: i64) {
        self.start_date = v;
    }

    // string ir_freq = 12;


    pub fn get_ir_freq(&self) -> &str {
        &self.ir_freq
    }
    pub fn clear_ir_freq(&mut self) {
        self.ir_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_ir_freq(&mut self, v: ::std::string::String) {
        self.ir_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ir_freq(&mut self) -> &mut ::std::string::String {
        &mut self.ir_freq
    }

    // Take field
    pub fn take_ir_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ir_freq, ::std::string::String::new())
    }

    // string is_floating = 13;


    pub fn get_is_floating(&self) -> &str {
        &self.is_floating
    }
    pub fn clear_is_floating(&mut self) {
        self.is_floating.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_floating(&mut self, v: ::std::string::String) {
        self.is_floating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_floating(&mut self) -> &mut ::std::string::String {
        &mut self.is_floating
    }

    // Take field
    pub fn take_is_floating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_floating, ::std::string::String::new())
    }

    // string float_rate_benchmark = 14;


    pub fn get_float_rate_benchmark(&self) -> &str {
        &self.float_rate_benchmark
    }
    pub fn clear_float_rate_benchmark(&mut self) {
        self.float_rate_benchmark.clear();
    }

    // Param is passed by value, moved
    pub fn set_float_rate_benchmark(&mut self, v: ::std::string::String) {
        self.float_rate_benchmark = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_float_rate_benchmark(&mut self) -> &mut ::std::string::String {
        &mut self.float_rate_benchmark
    }

    // Take field
    pub fn take_float_rate_benchmark(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.float_rate_benchmark, ::std::string::String::new())
    }

    // string sol_id = 15;


    pub fn get_sol_id(&self) -> &str {
        &self.sol_id
    }
    pub fn clear_sol_id(&mut self) {
        self.sol_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_sol_id(&mut self, v: ::std::string::String) {
        self.sol_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sol_id(&mut self) -> &mut ::std::string::String {
        &mut self.sol_id
    }

    // Take field
    pub fn take_sol_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sol_id, ::std::string::String::new())
    }

    // string cust_id = 16;


    pub fn get_cust_id(&self) -> &str {
        &self.cust_id
    }
    pub fn clear_cust_id(&mut self) {
        self.cust_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: ::std::string::String) {
        self.cust_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_id
    }

    // Take field
    pub fn take_cust_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_id, ::std::string::String::new())
    }

    // string cust_name = 17;


    pub fn get_cust_name(&self) -> &str {
        &self.cust_name
    }
    pub fn clear_cust_name(&mut self) {
        self.cust_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_name(&mut self, v: ::std::string::String) {
        self.cust_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_name
    }

    // Take field
    pub fn take_cust_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_name, ::std::string::String::new())
    }

    // string region_id = 18;


    pub fn get_region_id(&self) -> &str {
        &self.region_id
    }
    pub fn clear_region_id(&mut self) {
        self.region_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_region_id(&mut self, v: ::std::string::String) {
        self.region_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_region_id(&mut self) -> &mut ::std::string::String {
        &mut self.region_id
    }

    // Take field
    pub fn take_region_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.region_id, ::std::string::String::new())
    }

    // string schm_type = 19;


    pub fn get_schm_type(&self) -> &str {
        &self.schm_type
    }
    pub fn clear_schm_type(&mut self) {
        self.schm_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_schm_type(&mut self, v: ::std::string::String) {
        self.schm_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schm_type(&mut self) -> &mut ::std::string::String {
        &mut self.schm_type
    }

    // Take field
    pub fn take_schm_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schm_type, ::std::string::String::new())
    }

    // string gl_subhead_code = 20;


    pub fn get_gl_subhead_code(&self) -> &str {
        &self.gl_subhead_code
    }
    pub fn clear_gl_subhead_code(&mut self) {
        self.gl_subhead_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_subhead_code(&mut self, v: ::std::string::String) {
        self.gl_subhead_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_subhead_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_subhead_code
    }

    // Take field
    pub fn take_gl_subhead_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_subhead_code, ::std::string::String::new())
    }

    // string npa = 21;


    pub fn get_npa(&self) -> &str {
        &self.npa
    }
    pub fn clear_npa(&mut self) {
        self.npa.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa(&mut self, v: ::std::string::String) {
        self.npa = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa(&mut self) -> &mut ::std::string::String {
        &mut self.npa
    }

    // Take field
    pub fn take_npa(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa, ::std::string::String::new())
    }

    // double floor_rate = 22;


    pub fn get_floor_rate(&self) -> f64 {
        self.floor_rate
    }
    pub fn clear_floor_rate(&mut self) {
        self.floor_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_floor_rate(&mut self, v: f64) {
        self.floor_rate = v;
    }

    // double cap_rate = 23;


    pub fn get_cap_rate(&self) -> f64 {
        self.cap_rate
    }
    pub fn clear_cap_rate(&mut self) {
        self.cap_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cap_rate(&mut self, v: f64) {
        self.cap_rate = v;
    }

    // string cust_country_cd = 24;


    pub fn get_cust_country_cd(&self) -> &str {
        &self.cust_country_cd
    }
    pub fn clear_cust_country_cd(&mut self) {
        self.cust_country_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_country_cd(&mut self, v: ::std::string::String) {
        self.cust_country_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_country_cd(&mut self) -> &mut ::std::string::String {
        &mut self.cust_country_cd
    }

    // Take field
    pub fn take_cust_country_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_country_cd, ::std::string::String::new())
    }

    // string cust_credit_rating = 25;


    pub fn get_cust_credit_rating(&self) -> &str {
        &self.cust_credit_rating
    }
    pub fn clear_cust_credit_rating(&mut self) {
        self.cust_credit_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_credit_rating(&mut self, v: ::std::string::String) {
        self.cust_credit_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_credit_rating(&mut self) -> &mut ::std::string::String {
        &mut self.cust_credit_rating
    }

    // Take field
    pub fn take_cust_credit_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_credit_rating, ::std::string::String::new())
    }

    // string cust_sector_cd = 26;


    pub fn get_cust_sector_cd(&self) -> &str {
        &self.cust_sector_cd
    }
    pub fn clear_cust_sector_cd(&mut self) {
        self.cust_sector_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_sector_cd(&mut self, v: ::std::string::String) {
        self.cust_sector_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_sector_cd(&mut self) -> &mut ::std::string::String {
        &mut self.cust_sector_cd
    }

    // Take field
    pub fn take_cust_sector_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_sector_cd, ::std::string::String::new())
    }

    // string cust_industry_cd = 27;


    pub fn get_cust_industry_cd(&self) -> &str {
        &self.cust_industry_cd
    }
    pub fn clear_cust_industry_cd(&mut self) {
        self.cust_industry_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_industry_cd(&mut self, v: ::std::string::String) {
        self.cust_industry_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_industry_cd(&mut self) -> &mut ::std::string::String {
        &mut self.cust_industry_cd
    }

    // Take field
    pub fn take_cust_industry_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_industry_cd, ::std::string::String::new())
    }

    // double exchange_rt = 28;


    pub fn get_exchange_rt(&self) -> f64 {
        self.exchange_rt
    }
    pub fn clear_exchange_rt(&mut self) {
        self.exchange_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_exchange_rt(&mut self, v: f64) {
        self.exchange_rt = v;
    }

    // string custom1 = 29;


    pub fn get_custom1(&self) -> &str {
        &self.custom1
    }
    pub fn clear_custom1(&mut self) {
        self.custom1.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom1(&mut self, v: ::std::string::String) {
        self.custom1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom1(&mut self) -> &mut ::std::string::String {
        &mut self.custom1
    }

    // Take field
    pub fn take_custom1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom1, ::std::string::String::new())
    }

    // string custom2 = 30;


    pub fn get_custom2(&self) -> &str {
        &self.custom2
    }
    pub fn clear_custom2(&mut self) {
        self.custom2.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom2(&mut self, v: ::std::string::String) {
        self.custom2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom2(&mut self) -> &mut ::std::string::String {
        &mut self.custom2
    }

    // Take field
    pub fn take_custom2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom2, ::std::string::String::new())
    }

    // string npa_classification = 31;


    pub fn get_npa_classification(&self) -> &str {
        &self.npa_classification
    }
    pub fn clear_npa_classification(&mut self) {
        self.npa_classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_classification(&mut self, v: ::std::string::String) {
        self.npa_classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_classification(&mut self) -> &mut ::std::string::String {
        &mut self.npa_classification
    }

    // Take field
    pub fn take_npa_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_classification, ::std::string::String::new())
    }

    // string floating_type = 32;


    pub fn get_floating_type(&self) -> &str {
        &self.floating_type
    }
    pub fn clear_floating_type(&mut self) {
        self.floating_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_floating_type(&mut self, v: ::std::string::String) {
        self.floating_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_floating_type(&mut self) -> &mut ::std::string::String {
        &mut self.floating_type
    }

    // Take field
    pub fn take_floating_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.floating_type, ::std::string::String::new())
    }

    // double out_bal_amount = 33;


    pub fn get_out_bal_amount(&self) -> f64 {
        self.out_bal_amount
    }
    pub fn clear_out_bal_amount(&mut self) {
        self.out_bal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_out_bal_amount(&mut self, v: f64) {
        self.out_bal_amount = v;
    }

    // string acid = 34;


    pub fn get_acid(&self) -> &str {
        &self.acid
    }
    pub fn clear_acid(&mut self) {
        self.acid.clear();
    }

    // Param is passed by value, moved
    pub fn set_acid(&mut self, v: ::std::string::String) {
        self.acid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acid(&mut self) -> &mut ::std::string::String {
        &mut self.acid
    }

    // Take field
    pub fn take_acid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acid, ::std::string::String::new())
    }

    // string final_npa_class = 35;


    pub fn get_final_npa_class(&self) -> &str {
        &self.final_npa_class
    }
    pub fn clear_final_npa_class(&mut self) {
        self.final_npa_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_final_npa_class(&mut self, v: ::std::string::String) {
        self.final_npa_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_final_npa_class(&mut self) -> &mut ::std::string::String {
        &mut self.final_npa_class
    }

    // Take field
    pub fn take_final_npa_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.final_npa_class, ::std::string::String::new())
    }

    // string der_pegged_flg = 36;


    pub fn get_der_pegged_flg(&self) -> &str {
        &self.der_pegged_flg
    }
    pub fn clear_der_pegged_flg(&mut self) {
        self.der_pegged_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_der_pegged_flg(&mut self, v: ::std::string::String) {
        self.der_pegged_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_der_pegged_flg(&mut self) -> &mut ::std::string::String {
        &mut self.der_pegged_flg
    }

    // Take field
    pub fn take_der_pegged_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.der_pegged_flg, ::std::string::String::new())
    }

    // string int_tbl_code = 37;


    pub fn get_int_tbl_code(&self) -> &str {
        &self.int_tbl_code
    }
    pub fn clear_int_tbl_code(&mut self) {
        self.int_tbl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_tbl_code(&mut self, v: ::std::string::String) {
        self.int_tbl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_tbl_code(&mut self) -> &mut ::std::string::String {
        &mut self.int_tbl_code
    }

    // Take field
    pub fn take_int_tbl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_tbl_code, ::std::string::String::new())
    }

    // repeated .Cashflow cashflows = 38;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cashflow_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.type_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subtype_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amount = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acct_crncy_code)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.repricing_freq)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.early_date = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.foracid)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.start_date = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ir_freq)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_floating)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.float_rate_benchmark)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sol_id)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_id)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_name)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.region_id)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schm_type)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_subhead_code)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa)?;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.floor_rate = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.cap_rate = tmp;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_country_cd)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_credit_rating)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_sector_cd)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_industry_cd)?;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.exchange_rt = tmp;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom1)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom2)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa_classification)?;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.floating_type)?;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.out_bal_amount = tmp;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acid)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.final_npa_class)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.der_pegged_flg)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_tbl_code)?;
                },
                38 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cashflow_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cashflow_type);
        }
        if !self.type_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.type_id);
        }
        if !self.subtype_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.subtype_id);
        }
        if self.amount != 0. {
            my_size += 9;
        }
        if !self.acct_crncy_code.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.acct_crncy_code);
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if !self.repricing_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.repricing_freq);
        }
        if self.early_date != 0 {
            my_size += ::protobuf::rt::value_size(8, self.early_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(9, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.foracid.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.foracid);
        }
        if self.start_date != 0 {
            my_size += ::protobuf::rt::value_size(11, self.start_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ir_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.ir_freq);
        }
        if !self.is_floating.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.is_floating);
        }
        if !self.float_rate_benchmark.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.float_rate_benchmark);
        }
        if !self.sol_id.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.sol_id);
        }
        if !self.cust_id.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.cust_id);
        }
        if !self.cust_name.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.cust_name);
        }
        if !self.region_id.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.region_id);
        }
        if !self.schm_type.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.schm_type);
        }
        if !self.gl_subhead_code.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.gl_subhead_code);
        }
        if !self.npa.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.npa);
        }
        if self.floor_rate != 0. {
            my_size += 10;
        }
        if self.cap_rate != 0. {
            my_size += 10;
        }
        if !self.cust_country_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.cust_country_cd);
        }
        if !self.cust_credit_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.cust_credit_rating);
        }
        if !self.cust_sector_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.cust_sector_cd);
        }
        if !self.cust_industry_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.cust_industry_cd);
        }
        if self.exchange_rt != 0. {
            my_size += 10;
        }
        if !self.custom1.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.custom1);
        }
        if !self.custom2.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.custom2);
        }
        if !self.npa_classification.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.npa_classification);
        }
        if !self.floating_type.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.floating_type);
        }
        if self.out_bal_amount != 0. {
            my_size += 10;
        }
        if !self.acid.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.acid);
        }
        if !self.final_npa_class.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.final_npa_class);
        }
        if !self.der_pegged_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.der_pegged_flg);
        }
        if !self.int_tbl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.int_tbl_code);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.cashflow_type.is_empty() {
            os.write_string(1, &self.cashflow_type)?;
        }
        if !self.type_id.is_empty() {
            os.write_string(2, &self.type_id)?;
        }
        if !self.subtype_id.is_empty() {
            os.write_string(3, &self.subtype_id)?;
        }
        if self.amount != 0. {
            os.write_double(4, self.amount)?;
        }
        if !self.acct_crncy_code.is_empty() {
            os.write_string(5, &self.acct_crncy_code)?;
        }
        if self.int_rate != 0. {
            os.write_double(6, self.int_rate)?;
        }
        if !self.repricing_freq.is_empty() {
            os.write_string(7, &self.repricing_freq)?;
        }
        if self.early_date != 0 {
            os.write_int64(8, self.early_date)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(9, self.maturity_date)?;
        }
        if !self.foracid.is_empty() {
            os.write_string(10, &self.foracid)?;
        }
        if self.start_date != 0 {
            os.write_int64(11, self.start_date)?;
        }
        if !self.ir_freq.is_empty() {
            os.write_string(12, &self.ir_freq)?;
        }
        if !self.is_floating.is_empty() {
            os.write_string(13, &self.is_floating)?;
        }
        if !self.float_rate_benchmark.is_empty() {
            os.write_string(14, &self.float_rate_benchmark)?;
        }
        if !self.sol_id.is_empty() {
            os.write_string(15, &self.sol_id)?;
        }
        if !self.cust_id.is_empty() {
            os.write_string(16, &self.cust_id)?;
        }
        if !self.cust_name.is_empty() {
            os.write_string(17, &self.cust_name)?;
        }
        if !self.region_id.is_empty() {
            os.write_string(18, &self.region_id)?;
        }
        if !self.schm_type.is_empty() {
            os.write_string(19, &self.schm_type)?;
        }
        if !self.gl_subhead_code.is_empty() {
            os.write_string(20, &self.gl_subhead_code)?;
        }
        if !self.npa.is_empty() {
            os.write_string(21, &self.npa)?;
        }
        if self.floor_rate != 0. {
            os.write_double(22, self.floor_rate)?;
        }
        if self.cap_rate != 0. {
            os.write_double(23, self.cap_rate)?;
        }
        if !self.cust_country_cd.is_empty() {
            os.write_string(24, &self.cust_country_cd)?;
        }
        if !self.cust_credit_rating.is_empty() {
            os.write_string(25, &self.cust_credit_rating)?;
        }
        if !self.cust_sector_cd.is_empty() {
            os.write_string(26, &self.cust_sector_cd)?;
        }
        if !self.cust_industry_cd.is_empty() {
            os.write_string(27, &self.cust_industry_cd)?;
        }
        if self.exchange_rt != 0. {
            os.write_double(28, self.exchange_rt)?;
        }
        if !self.custom1.is_empty() {
            os.write_string(29, &self.custom1)?;
        }
        if !self.custom2.is_empty() {
            os.write_string(30, &self.custom2)?;
        }
        if !self.npa_classification.is_empty() {
            os.write_string(31, &self.npa_classification)?;
        }
        if !self.floating_type.is_empty() {
            os.write_string(32, &self.floating_type)?;
        }
        if self.out_bal_amount != 0. {
            os.write_double(33, self.out_bal_amount)?;
        }
        if !self.acid.is_empty() {
            os.write_string(34, &self.acid)?;
        }
        if !self.final_npa_class.is_empty() {
            os.write_string(35, &self.final_npa_class)?;
        }
        if !self.der_pegged_flg.is_empty() {
            os.write_string(36, &self.der_pegged_flg)?;
        }
        if !self.int_tbl_code.is_empty() {
            os.write_string(37, &self.int_tbl_code)?;
        }
        for v in &self.cashflows {
            os.write_tag(38, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cashflow_type",
                |m: &AccountWithCashflows| { &m.cashflow_type },
                |m: &mut AccountWithCashflows| { &mut m.cashflow_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type_id",
                |m: &AccountWithCashflows| { &m.type_id },
                |m: &mut AccountWithCashflows| { &mut m.type_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "subtype_id",
                |m: &AccountWithCashflows| { &m.subtype_id },
                |m: &mut AccountWithCashflows| { &mut m.subtype_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "amount",
                |m: &AccountWithCashflows| { &m.amount },
                |m: &mut AccountWithCashflows| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acct_crncy_code",
                |m: &AccountWithCashflows| { &m.acct_crncy_code },
                |m: &mut AccountWithCashflows| { &mut m.acct_crncy_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_rate",
                |m: &AccountWithCashflows| { &m.int_rate },
                |m: &mut AccountWithCashflows| { &mut m.int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "repricing_freq",
                |m: &AccountWithCashflows| { &m.repricing_freq },
                |m: &mut AccountWithCashflows| { &mut m.repricing_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "early_date",
                |m: &AccountWithCashflows| { &m.early_date },
                |m: &mut AccountWithCashflows| { &mut m.early_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "maturity_date",
                |m: &AccountWithCashflows| { &m.maturity_date },
                |m: &mut AccountWithCashflows| { &mut m.maturity_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "foracid",
                |m: &AccountWithCashflows| { &m.foracid },
                |m: &mut AccountWithCashflows| { &mut m.foracid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "start_date",
                |m: &AccountWithCashflows| { &m.start_date },
                |m: &mut AccountWithCashflows| { &mut m.start_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ir_freq",
                |m: &AccountWithCashflows| { &m.ir_freq },
                |m: &mut AccountWithCashflows| { &mut m.ir_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "is_floating",
                |m: &AccountWithCashflows| { &m.is_floating },
                |m: &mut AccountWithCashflows| { &mut m.is_floating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "float_rate_benchmark",
                |m: &AccountWithCashflows| { &m.float_rate_benchmark },
                |m: &mut AccountWithCashflows| { &mut m.float_rate_benchmark },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sol_id",
                |m: &AccountWithCashflows| { &m.sol_id },
                |m: &mut AccountWithCashflows| { &mut m.sol_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_id",
                |m: &AccountWithCashflows| { &m.cust_id },
                |m: &mut AccountWithCashflows| { &mut m.cust_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_name",
                |m: &AccountWithCashflows| { &m.cust_name },
                |m: &mut AccountWithCashflows| { &mut m.cust_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "region_id",
                |m: &AccountWithCashflows| { &m.region_id },
                |m: &mut AccountWithCashflows| { &mut m.region_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "schm_type",
                |m: &AccountWithCashflows| { &m.schm_type },
                |m: &mut AccountWithCashflows| { &mut m.schm_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_subhead_code",
                |m: &AccountWithCashflows| { &m.gl_subhead_code },
                |m: &mut AccountWithCashflows| { &mut m.gl_subhead_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "npa",
                |m: &AccountWithCashflows| { &m.npa },
                |m: &mut AccountWithCashflows| { &mut m.npa },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "floor_rate",
                |m: &AccountWithCashflows| { &m.floor_rate },
                |m: &mut AccountWithCashflows| { &mut m.floor_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "cap_rate",
                |m: &AccountWithCashflows| { &m.cap_rate },
                |m: &mut AccountWithCashflows| { &mut m.cap_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_country_cd",
                |m: &AccountWithCashflows| { &m.cust_country_cd },
                |m: &mut AccountWithCashflows| { &mut m.cust_country_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_credit_rating",
                |m: &AccountWithCashflows| { &m.cust_credit_rating },
                |m: &mut AccountWithCashflows| { &mut m.cust_credit_rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_sector_cd",
                |m: &AccountWithCashflows| { &m.cust_sector_cd },
                |m: &mut AccountWithCashflows| { &mut m.cust_sector_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_industry_cd",
                |m: &AccountWithCashflows| { &m.cust_industry_cd },
                |m: &mut AccountWithCashflows| { &mut m.cust_industry_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "exchange_rt",
                |m: &AccountWithCashflows| { &m.exchange_rt },
                |m: &mut AccountWithCashflows| { &mut m.exchange_rt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "custom1",
                |m: &AccountWithCashflows| { &m.custom1 },
                |m: &mut AccountWithCashflows| { &mut m.custom1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "custom2",
                |m: &AccountWithCashflows| { &m.custom2 },
                |m: &mut AccountWithCashflows| { &mut m.custom2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "npa_classification",
                |m: &AccountWithCashflows| { &m.npa_classification },
                |m: &mut AccountWithCashflows| { &mut m.npa_classification },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "floating_type",
                |m: &AccountWithCashflows| { &m.floating_type },
                |m: &mut AccountWithCashflows| { &mut m.floating_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "out_bal_amount",
                |m: &AccountWithCashflows| { &m.out_bal_amount },
                |m: &mut AccountWithCashflows| { &mut m.out_bal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acid",
                |m: &AccountWithCashflows| { &m.acid },
                |m: &mut AccountWithCashflows| { &mut m.acid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "final_npa_class",
                |m: &AccountWithCashflows| { &m.final_npa_class },
                |m: &mut AccountWithCashflows| { &mut m.final_npa_class },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "der_pegged_flg",
                |m: &AccountWithCashflows| { &m.der_pegged_flg },
                |m: &mut AccountWithCashflows| { &mut m.der_pegged_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_tbl_code",
                |m: &AccountWithCashflows| { &m.int_tbl_code },
                |m: &mut AccountWithCashflows| { &mut m.int_tbl_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.cashflow_type.clear();
        self.type_id.clear();
        self.subtype_id.clear();
        self.amount = 0.;
        self.acct_crncy_code.clear();
        self.int_rate = 0.;
        self.repricing_freq.clear();
        self.early_date = 0;
        self.maturity_date = 0;
        self.foracid.clear();
        self.start_date = 0;
        self.ir_freq.clear();
        self.is_floating.clear();
        self.float_rate_benchmark.clear();
        self.sol_id.clear();
        self.cust_id.clear();
        self.cust_name.clear();
        self.region_id.clear();
        self.schm_type.clear();
        self.gl_subhead_code.clear();
        self.npa.clear();
        self.floor_rate = 0.;
        self.cap_rate = 0.;
        self.cust_country_cd.clear();
        self.cust_credit_rating.clear();
        self.cust_sector_cd.clear();
        self.cust_industry_cd.clear();
        self.exchange_rt = 0.;
        self.custom1.clear();
        self.custom2.clear();
        self.npa_classification.clear();
        self.floating_type.clear();
        self.out_bal_amount = 0.;
        self.acid.clear();
        self.final_npa_class.clear();
        self.der_pegged_flg.clear();
        self.int_tbl_code.clear();
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\
    \x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\
    \x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\
    \x04date\"\xfb\t\n\x14AccountWithCashflows\x12#\n\rcashflow_type\x18\x01\
    \x20\x01(\tR\x0ccashflowType\x12\x17\n\x07type_id\x18\x02\x20\x01(\tR\
    \x06typeId\x12\x1d\n\nsubtype_id\x18\x03\x20\x01(\tR\tsubtypeId\x12\x16\
    \n\x06amount\x18\x04\x20\x01(\x01R\x06amount\x12&\n\x0facct_crncy_code\
    \x18\x05\x20\x01(\tR\racctCrncyCode\x12\x19\n\x08int_rate\x18\x06\x20\
    \x01(\x01R\x07intRate\x12%\n\x0erepricing_freq\x18\x07\x20\x01(\tR\rrepr\
    icingFreq\x12\x1d\n\nearly_date\x18\x08\x20\x01(\x03R\tearlyDate\x12#\n\
    \rmaturity_date\x18\t\x20\x01(\x03R\x0cmaturityDate\x12\x18\n\x07foracid\
    \x18\n\x20\x01(\tR\x07foracid\x12\x1d\n\nstart_date\x18\x0b\x20\x01(\x03\
    R\tstartDate\x12\x17\n\x07ir_freq\x18\x0c\x20\x01(\tR\x06irFreq\x12\x1f\
    \n\x0bis_floating\x18\r\x20\x01(\tR\nisFloating\x120\n\x14float_rate_ben\
    chmark\x18\x0e\x20\x01(\tR\x12floatRateBenchmark\x12\x15\n\x06sol_id\x18\
    \x0f\x20\x01(\tR\x05solId\x12\x17\n\x07cust_id\x18\x10\x20\x01(\tR\x06cu\
    stId\x12\x1b\n\tcust_name\x18\x11\x20\x01(\tR\x08custName\x12\x1b\n\treg\
    ion_id\x18\x12\x20\x01(\tR\x08regionId\x12\x1b\n\tschm_type\x18\x13\x20\
    \x01(\tR\x08schmType\x12&\n\x0fgl_subhead_code\x18\x14\x20\x01(\tR\rglSu\
    bheadCode\x12\x10\n\x03npa\x18\x15\x20\x01(\tR\x03npa\x12\x1d\n\nfloor_r\
    ate\x18\x16\x20\x01(\x01R\tfloorRate\x12\x19\n\x08cap_rate\x18\x17\x20\
    \x01(\x01R\x07capRate\x12&\n\x0fcust_country_cd\x18\x18\x20\x01(\tR\rcus\
    tCountryCd\x12,\n\x12cust_credit_rating\x18\x19\x20\x01(\tR\x10custCredi\
    tRating\x12$\n\x0ecust_sector_cd\x18\x1a\x20\x01(\tR\x0ccustSectorCd\x12\
    (\n\x10cust_industry_cd\x18\x1b\x20\x01(\tR\x0ecustIndustryCd\x12\x1f\n\
    \x0bexchange_rt\x18\x1c\x20\x01(\x01R\nexchangeRt\x12\x18\n\x07custom1\
    \x18\x1d\x20\x01(\tR\x07custom1\x12\x18\n\x07custom2\x18\x1e\x20\x01(\tR\
    \x07custom2\x12-\n\x12npa_classification\x18\x1f\x20\x01(\tR\x11npaClass\
    ification\x12#\n\rfloating_type\x18\x20\x20\x01(\tR\x0cfloatingType\x12$\
    \n\x0eout_bal_amount\x18!\x20\x01(\x01R\x0coutBalAmount\x12\x12\n\x04aci\
    d\x18\"\x20\x01(\tR\x04acid\x12&\n\x0ffinal_npa_class\x18#\x20\x01(\tR\r\
    finalNpaClass\x12$\n\x0eder_pegged_flg\x18$\x20\x01(\tR\x0cderPeggedFlg\
    \x12\x20\n\x0cint_tbl_code\x18%\x20\x01(\tR\nintTblCode\x12'\n\tcashflow\
    s\x18&\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}