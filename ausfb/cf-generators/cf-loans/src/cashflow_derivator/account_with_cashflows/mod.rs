// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cf-loans-au.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub customer_id: ::std::string::String,
    pub cod_acct_no: ::std::string::String,
    pub prod_code: ::std::string::String,
    pub ccy_code: ::std::string::String,
    pub customer_type: ::std::string::String,
    pub gl_account_principal: f64,
    pub gl_account_interest: f64,
    pub gl_account_accrued: f64,
    pub acct_open_date: i64,
    pub first_disb_date: i64,
    pub maturity_date: i64,
    pub due_date: i64,
    pub eop_balance: f64,
    pub as_on_date: i64,
    pub index_rate: f64,
    pub net_rate: f64,
    pub benchmark_name: ::std::string::String,
    pub rate_type_1: ::std::string::String,
    pub npa_status: ::std::string::String,
    pub npa_final_status: ::std::string::String,
    pub ptc_flag: ::std::string::String,
    pub last_repricing_date: i64,
    pub index_code: ::std::string::String,
    pub rate_type_2: ::std::string::String,
    pub next_reset_date: i64,
    pub reset_frequency: ::std::string::String,
    pub derived_reset_date: i64,
    pub derived_arrear_date: i64,
    pub arrear_prin: f64,
    pub add_string_1: ::std::string::String,
    pub add_string_2: ::std::string::String,
    pub add_int_1: i64,
    pub add_int_2: i64,
    pub add_float_1: f64,
    pub add_float_2: f64,
    pub add_date_1: i64,
    pub add_date_2: i64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string customer_id = 1;


    pub fn get_customer_id(&self) -> &str {
        &self.customer_id
    }
    pub fn clear_customer_id(&mut self) {
        self.customer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_id(&mut self, v: ::std::string::String) {
        self.customer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_id(&mut self) -> &mut ::std::string::String {
        &mut self.customer_id
    }

    // Take field
    pub fn take_customer_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_id, ::std::string::String::new())
    }

    // string cod_acct_no = 2;


    pub fn get_cod_acct_no(&self) -> &str {
        &self.cod_acct_no
    }
    pub fn clear_cod_acct_no(&mut self) {
        self.cod_acct_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_cod_acct_no(&mut self, v: ::std::string::String) {
        self.cod_acct_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cod_acct_no(&mut self) -> &mut ::std::string::String {
        &mut self.cod_acct_no
    }

    // Take field
    pub fn take_cod_acct_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cod_acct_no, ::std::string::String::new())
    }

    // string prod_code = 3;


    pub fn get_prod_code(&self) -> &str {
        &self.prod_code
    }
    pub fn clear_prod_code(&mut self) {
        self.prod_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_code(&mut self, v: ::std::string::String) {
        self.prod_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_code(&mut self) -> &mut ::std::string::String {
        &mut self.prod_code
    }

    // Take field
    pub fn take_prod_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_code, ::std::string::String::new())
    }

    // string ccy_code = 4;


    pub fn get_ccy_code(&self) -> &str {
        &self.ccy_code
    }
    pub fn clear_ccy_code(&mut self) {
        self.ccy_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy_code(&mut self, v: ::std::string::String) {
        self.ccy_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy_code(&mut self) -> &mut ::std::string::String {
        &mut self.ccy_code
    }

    // Take field
    pub fn take_ccy_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy_code, ::std::string::String::new())
    }

    // string customer_type = 5;


    pub fn get_customer_type(&self) -> &str {
        &self.customer_type
    }
    pub fn clear_customer_type(&mut self) {
        self.customer_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_type(&mut self, v: ::std::string::String) {
        self.customer_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_type(&mut self) -> &mut ::std::string::String {
        &mut self.customer_type
    }

    // Take field
    pub fn take_customer_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_type, ::std::string::String::new())
    }

    // double gl_account_principal = 6;


    pub fn get_gl_account_principal(&self) -> f64 {
        self.gl_account_principal
    }
    pub fn clear_gl_account_principal(&mut self) {
        self.gl_account_principal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gl_account_principal(&mut self, v: f64) {
        self.gl_account_principal = v;
    }

    // double gl_account_interest = 7;


    pub fn get_gl_account_interest(&self) -> f64 {
        self.gl_account_interest
    }
    pub fn clear_gl_account_interest(&mut self) {
        self.gl_account_interest = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gl_account_interest(&mut self, v: f64) {
        self.gl_account_interest = v;
    }

    // double gl_account_accrued = 8;


    pub fn get_gl_account_accrued(&self) -> f64 {
        self.gl_account_accrued
    }
    pub fn clear_gl_account_accrued(&mut self) {
        self.gl_account_accrued = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gl_account_accrued(&mut self, v: f64) {
        self.gl_account_accrued = v;
    }

    // int64 acct_open_date = 9;


    pub fn get_acct_open_date(&self) -> i64 {
        self.acct_open_date
    }
    pub fn clear_acct_open_date(&mut self) {
        self.acct_open_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_acct_open_date(&mut self, v: i64) {
        self.acct_open_date = v;
    }

    // int64 first_disb_date = 10;


    pub fn get_first_disb_date(&self) -> i64 {
        self.first_disb_date
    }
    pub fn clear_first_disb_date(&mut self) {
        self.first_disb_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_first_disb_date(&mut self, v: i64) {
        self.first_disb_date = v;
    }

    // int64 maturity_date = 11;


    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }
    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    // int64 due_date = 12;


    pub fn get_due_date(&self) -> i64 {
        self.due_date
    }
    pub fn clear_due_date(&mut self) {
        self.due_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_due_date(&mut self, v: i64) {
        self.due_date = v;
    }

    // double eop_balance = 13;


    pub fn get_eop_balance(&self) -> f64 {
        self.eop_balance
    }
    pub fn clear_eop_balance(&mut self) {
        self.eop_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_eop_balance(&mut self, v: f64) {
        self.eop_balance = v;
    }

    // int64 as_on_date = 14;


    pub fn get_as_on_date(&self) -> i64 {
        self.as_on_date
    }
    pub fn clear_as_on_date(&mut self) {
        self.as_on_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on_date(&mut self, v: i64) {
        self.as_on_date = v;
    }

    // double index_rate = 15;


    pub fn get_index_rate(&self) -> f64 {
        self.index_rate
    }
    pub fn clear_index_rate(&mut self) {
        self.index_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_index_rate(&mut self, v: f64) {
        self.index_rate = v;
    }

    // double net_rate = 16;


    pub fn get_net_rate(&self) -> f64 {
        self.net_rate
    }
    pub fn clear_net_rate(&mut self) {
        self.net_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_net_rate(&mut self, v: f64) {
        self.net_rate = v;
    }

    // string benchmark_name = 17;


    pub fn get_benchmark_name(&self) -> &str {
        &self.benchmark_name
    }
    pub fn clear_benchmark_name(&mut self) {
        self.benchmark_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_benchmark_name(&mut self, v: ::std::string::String) {
        self.benchmark_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_benchmark_name(&mut self) -> &mut ::std::string::String {
        &mut self.benchmark_name
    }

    // Take field
    pub fn take_benchmark_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.benchmark_name, ::std::string::String::new())
    }

    // string rate_type_1 = 18;


    pub fn get_rate_type_1(&self) -> &str {
        &self.rate_type_1
    }
    pub fn clear_rate_type_1(&mut self) {
        self.rate_type_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_type_1(&mut self, v: ::std::string::String) {
        self.rate_type_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_type_1(&mut self) -> &mut ::std::string::String {
        &mut self.rate_type_1
    }

    // Take field
    pub fn take_rate_type_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_type_1, ::std::string::String::new())
    }

    // string npa_status = 19;


    pub fn get_npa_status(&self) -> &str {
        &self.npa_status
    }
    pub fn clear_npa_status(&mut self) {
        self.npa_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_status(&mut self, v: ::std::string::String) {
        self.npa_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_status(&mut self) -> &mut ::std::string::String {
        &mut self.npa_status
    }

    // Take field
    pub fn take_npa_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_status, ::std::string::String::new())
    }

    // string npa_final_status = 20;


    pub fn get_npa_final_status(&self) -> &str {
        &self.npa_final_status
    }
    pub fn clear_npa_final_status(&mut self) {
        self.npa_final_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_final_status(&mut self, v: ::std::string::String) {
        self.npa_final_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_final_status(&mut self) -> &mut ::std::string::String {
        &mut self.npa_final_status
    }

    // Take field
    pub fn take_npa_final_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_final_status, ::std::string::String::new())
    }

    // string ptc_flag = 21;


    pub fn get_ptc_flag(&self) -> &str {
        &self.ptc_flag
    }
    pub fn clear_ptc_flag(&mut self) {
        self.ptc_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_ptc_flag(&mut self, v: ::std::string::String) {
        self.ptc_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ptc_flag(&mut self) -> &mut ::std::string::String {
        &mut self.ptc_flag
    }

    // Take field
    pub fn take_ptc_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ptc_flag, ::std::string::String::new())
    }

    // int64 last_repricing_date = 22;


    pub fn get_last_repricing_date(&self) -> i64 {
        self.last_repricing_date
    }
    pub fn clear_last_repricing_date(&mut self) {
        self.last_repricing_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_repricing_date(&mut self, v: i64) {
        self.last_repricing_date = v;
    }

    // string index_code = 23;


    pub fn get_index_code(&self) -> &str {
        &self.index_code
    }
    pub fn clear_index_code(&mut self) {
        self.index_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_index_code(&mut self, v: ::std::string::String) {
        self.index_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_index_code(&mut self) -> &mut ::std::string::String {
        &mut self.index_code
    }

    // Take field
    pub fn take_index_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.index_code, ::std::string::String::new())
    }

    // string rate_type_2 = 24;


    pub fn get_rate_type_2(&self) -> &str {
        &self.rate_type_2
    }
    pub fn clear_rate_type_2(&mut self) {
        self.rate_type_2.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_type_2(&mut self, v: ::std::string::String) {
        self.rate_type_2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_type_2(&mut self) -> &mut ::std::string::String {
        &mut self.rate_type_2
    }

    // Take field
    pub fn take_rate_type_2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_type_2, ::std::string::String::new())
    }

    // int64 next_reset_date = 25;


    pub fn get_next_reset_date(&self) -> i64 {
        self.next_reset_date
    }
    pub fn clear_next_reset_date(&mut self) {
        self.next_reset_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_reset_date(&mut self, v: i64) {
        self.next_reset_date = v;
    }

    // string reset_frequency = 26;


    pub fn get_reset_frequency(&self) -> &str {
        &self.reset_frequency
    }
    pub fn clear_reset_frequency(&mut self) {
        self.reset_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_reset_frequency(&mut self, v: ::std::string::String) {
        self.reset_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reset_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.reset_frequency
    }

    // Take field
    pub fn take_reset_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reset_frequency, ::std::string::String::new())
    }

    // int64 derived_reset_date = 27;


    pub fn get_derived_reset_date(&self) -> i64 {
        self.derived_reset_date
    }
    pub fn clear_derived_reset_date(&mut self) {
        self.derived_reset_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_derived_reset_date(&mut self, v: i64) {
        self.derived_reset_date = v;
    }

    // int64 derived_arrear_date = 28;


    pub fn get_derived_arrear_date(&self) -> i64 {
        self.derived_arrear_date
    }
    pub fn clear_derived_arrear_date(&mut self) {
        self.derived_arrear_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_derived_arrear_date(&mut self, v: i64) {
        self.derived_arrear_date = v;
    }

    // double arrear_prin = 29;


    pub fn get_arrear_prin(&self) -> f64 {
        self.arrear_prin
    }
    pub fn clear_arrear_prin(&mut self) {
        self.arrear_prin = 0.;
    }

    // Param is passed by value, moved
    pub fn set_arrear_prin(&mut self, v: f64) {
        self.arrear_prin = v;
    }

    // string add_string_1 = 30;


    pub fn get_add_string_1(&self) -> &str {
        &self.add_string_1
    }
    pub fn clear_add_string_1(&mut self) {
        self.add_string_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_string_1(&mut self, v: ::std::string::String) {
        self.add_string_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_string_1(&mut self) -> &mut ::std::string::String {
        &mut self.add_string_1
    }

    // Take field
    pub fn take_add_string_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_string_1, ::std::string::String::new())
    }

    // string add_string_2 = 31;


    pub fn get_add_string_2(&self) -> &str {
        &self.add_string_2
    }
    pub fn clear_add_string_2(&mut self) {
        self.add_string_2.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_string_2(&mut self, v: ::std::string::String) {
        self.add_string_2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_string_2(&mut self) -> &mut ::std::string::String {
        &mut self.add_string_2
    }

    // Take field
    pub fn take_add_string_2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_string_2, ::std::string::String::new())
    }

    // int64 add_int_1 = 32;


    pub fn get_add_int_1(&self) -> i64 {
        self.add_int_1
    }
    pub fn clear_add_int_1(&mut self) {
        self.add_int_1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_add_int_1(&mut self, v: i64) {
        self.add_int_1 = v;
    }

    // int64 add_int_2 = 33;


    pub fn get_add_int_2(&self) -> i64 {
        self.add_int_2
    }
    pub fn clear_add_int_2(&mut self) {
        self.add_int_2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_add_int_2(&mut self, v: i64) {
        self.add_int_2 = v;
    }

    // double add_float_1 = 34;


    pub fn get_add_float_1(&self) -> f64 {
        self.add_float_1
    }
    pub fn clear_add_float_1(&mut self) {
        self.add_float_1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_add_float_1(&mut self, v: f64) {
        self.add_float_1 = v;
    }

    // double add_float_2 = 35;


    pub fn get_add_float_2(&self) -> f64 {
        self.add_float_2
    }
    pub fn clear_add_float_2(&mut self) {
        self.add_float_2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_add_float_2(&mut self, v: f64) {
        self.add_float_2 = v;
    }

    // int64 add_date_1 = 36;


    pub fn get_add_date_1(&self) -> i64 {
        self.add_date_1
    }
    pub fn clear_add_date_1(&mut self) {
        self.add_date_1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_add_date_1(&mut self, v: i64) {
        self.add_date_1 = v;
    }

    // int64 add_date_2 = 37;


    pub fn get_add_date_2(&self) -> i64 {
        self.add_date_2
    }
    pub fn clear_add_date_2(&mut self) {
        self.add_date_2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_add_date_2(&mut self, v: i64) {
        self.add_date_2 = v;
    }

    // repeated .Cashflow cashflows = 38;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cod_acct_no)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_code)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy_code)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_type)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.gl_account_principal = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.gl_account_interest = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.gl_account_accrued = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acct_open_date = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.first_disb_date = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.due_date = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.eop_balance = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on_date = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.index_rate = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.net_rate = tmp;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.benchmark_name)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_type_1)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa_status)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa_final_status)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ptc_flag)?;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_repricing_date = tmp;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.index_code)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_type_2)?;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_reset_date = tmp;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reset_frequency)?;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.derived_reset_date = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.derived_arrear_date = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.arrear_prin = tmp;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_string_1)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_string_2)?;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.add_int_1 = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.add_int_2 = tmp;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.add_float_1 = tmp;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.add_float_2 = tmp;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.add_date_1 = tmp;
                },
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.add_date_2 = tmp;
                },
                38 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.customer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.customer_id);
        }
        if !self.cod_acct_no.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.cod_acct_no);
        }
        if !self.prod_code.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.prod_code);
        }
        if !self.ccy_code.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.ccy_code);
        }
        if !self.customer_type.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.customer_type);
        }
        if self.gl_account_principal != 0. {
            my_size += 9;
        }
        if self.gl_account_interest != 0. {
            my_size += 9;
        }
        if self.gl_account_accrued != 0. {
            my_size += 9;
        }
        if self.acct_open_date != 0 {
            my_size += ::protobuf::rt::value_size(9, self.acct_open_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.first_disb_date != 0 {
            my_size += ::protobuf::rt::value_size(10, self.first_disb_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(11, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.due_date != 0 {
            my_size += ::protobuf::rt::value_size(12, self.due_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.eop_balance != 0. {
            my_size += 9;
        }
        if self.as_on_date != 0 {
            my_size += ::protobuf::rt::value_size(14, self.as_on_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.index_rate != 0. {
            my_size += 9;
        }
        if self.net_rate != 0. {
            my_size += 10;
        }
        if !self.benchmark_name.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.benchmark_name);
        }
        if !self.rate_type_1.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.rate_type_1);
        }
        if !self.npa_status.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.npa_status);
        }
        if !self.npa_final_status.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.npa_final_status);
        }
        if !self.ptc_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.ptc_flag);
        }
        if self.last_repricing_date != 0 {
            my_size += ::protobuf::rt::value_size(22, self.last_repricing_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.index_code.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.index_code);
        }
        if !self.rate_type_2.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.rate_type_2);
        }
        if self.next_reset_date != 0 {
            my_size += ::protobuf::rt::value_size(25, self.next_reset_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.reset_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.reset_frequency);
        }
        if self.derived_reset_date != 0 {
            my_size += ::protobuf::rt::value_size(27, self.derived_reset_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.derived_arrear_date != 0 {
            my_size += ::protobuf::rt::value_size(28, self.derived_arrear_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.arrear_prin != 0. {
            my_size += 10;
        }
        if !self.add_string_1.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.add_string_1);
        }
        if !self.add_string_2.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.add_string_2);
        }
        if self.add_int_1 != 0 {
            my_size += ::protobuf::rt::value_size(32, self.add_int_1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.add_int_2 != 0 {
            my_size += ::protobuf::rt::value_size(33, self.add_int_2, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.add_float_1 != 0. {
            my_size += 10;
        }
        if self.add_float_2 != 0. {
            my_size += 10;
        }
        if self.add_date_1 != 0 {
            my_size += ::protobuf::rt::value_size(36, self.add_date_1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.add_date_2 != 0 {
            my_size += ::protobuf::rt::value_size(37, self.add_date_2, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.customer_id.is_empty() {
            os.write_string(1, &self.customer_id)?;
        }
        if !self.cod_acct_no.is_empty() {
            os.write_string(2, &self.cod_acct_no)?;
        }
        if !self.prod_code.is_empty() {
            os.write_string(3, &self.prod_code)?;
        }
        if !self.ccy_code.is_empty() {
            os.write_string(4, &self.ccy_code)?;
        }
        if !self.customer_type.is_empty() {
            os.write_string(5, &self.customer_type)?;
        }
        if self.gl_account_principal != 0. {
            os.write_double(6, self.gl_account_principal)?;
        }
        if self.gl_account_interest != 0. {
            os.write_double(7, self.gl_account_interest)?;
        }
        if self.gl_account_accrued != 0. {
            os.write_double(8, self.gl_account_accrued)?;
        }
        if self.acct_open_date != 0 {
            os.write_int64(9, self.acct_open_date)?;
        }
        if self.first_disb_date != 0 {
            os.write_int64(10, self.first_disb_date)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(11, self.maturity_date)?;
        }
        if self.due_date != 0 {
            os.write_int64(12, self.due_date)?;
        }
        if self.eop_balance != 0. {
            os.write_double(13, self.eop_balance)?;
        }
        if self.as_on_date != 0 {
            os.write_int64(14, self.as_on_date)?;
        }
        if self.index_rate != 0. {
            os.write_double(15, self.index_rate)?;
        }
        if self.net_rate != 0. {
            os.write_double(16, self.net_rate)?;
        }
        if !self.benchmark_name.is_empty() {
            os.write_string(17, &self.benchmark_name)?;
        }
        if !self.rate_type_1.is_empty() {
            os.write_string(18, &self.rate_type_1)?;
        }
        if !self.npa_status.is_empty() {
            os.write_string(19, &self.npa_status)?;
        }
        if !self.npa_final_status.is_empty() {
            os.write_string(20, &self.npa_final_status)?;
        }
        if !self.ptc_flag.is_empty() {
            os.write_string(21, &self.ptc_flag)?;
        }
        if self.last_repricing_date != 0 {
            os.write_int64(22, self.last_repricing_date)?;
        }
        if !self.index_code.is_empty() {
            os.write_string(23, &self.index_code)?;
        }
        if !self.rate_type_2.is_empty() {
            os.write_string(24, &self.rate_type_2)?;
        }
        if self.next_reset_date != 0 {
            os.write_int64(25, self.next_reset_date)?;
        }
        if !self.reset_frequency.is_empty() {
            os.write_string(26, &self.reset_frequency)?;
        }
        if self.derived_reset_date != 0 {
            os.write_int64(27, self.derived_reset_date)?;
        }
        if self.derived_arrear_date != 0 {
            os.write_int64(28, self.derived_arrear_date)?;
        }
        if self.arrear_prin != 0. {
            os.write_double(29, self.arrear_prin)?;
        }
        if !self.add_string_1.is_empty() {
            os.write_string(30, &self.add_string_1)?;
        }
        if !self.add_string_2.is_empty() {
            os.write_string(31, &self.add_string_2)?;
        }
        if self.add_int_1 != 0 {
            os.write_int64(32, self.add_int_1)?;
        }
        if self.add_int_2 != 0 {
            os.write_int64(33, self.add_int_2)?;
        }
        if self.add_float_1 != 0. {
            os.write_double(34, self.add_float_1)?;
        }
        if self.add_float_2 != 0. {
            os.write_double(35, self.add_float_2)?;
        }
        if self.add_date_1 != 0 {
            os.write_int64(36, self.add_date_1)?;
        }
        if self.add_date_2 != 0 {
            os.write_int64(37, self.add_date_2)?;
        }
        for v in &self.cashflows {
            os.write_tag(38, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_id",
                |m: &AccountWithCashflows| { &m.customer_id },
                |m: &mut AccountWithCashflows| { &mut m.customer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cod_acct_no",
                |m: &AccountWithCashflows| { &m.cod_acct_no },
                |m: &mut AccountWithCashflows| { &mut m.cod_acct_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prod_code",
                |m: &AccountWithCashflows| { &m.prod_code },
                |m: &mut AccountWithCashflows| { &mut m.prod_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ccy_code",
                |m: &AccountWithCashflows| { &m.ccy_code },
                |m: &mut AccountWithCashflows| { &mut m.ccy_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_type",
                |m: &AccountWithCashflows| { &m.customer_type },
                |m: &mut AccountWithCashflows| { &mut m.customer_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "gl_account_principal",
                |m: &AccountWithCashflows| { &m.gl_account_principal },
                |m: &mut AccountWithCashflows| { &mut m.gl_account_principal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "gl_account_interest",
                |m: &AccountWithCashflows| { &m.gl_account_interest },
                |m: &mut AccountWithCashflows| { &mut m.gl_account_interest },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "gl_account_accrued",
                |m: &AccountWithCashflows| { &m.gl_account_accrued },
                |m: &mut AccountWithCashflows| { &mut m.gl_account_accrued },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "acct_open_date",
                |m: &AccountWithCashflows| { &m.acct_open_date },
                |m: &mut AccountWithCashflows| { &mut m.acct_open_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "first_disb_date",
                |m: &AccountWithCashflows| { &m.first_disb_date },
                |m: &mut AccountWithCashflows| { &mut m.first_disb_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "maturity_date",
                |m: &AccountWithCashflows| { &m.maturity_date },
                |m: &mut AccountWithCashflows| { &mut m.maturity_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "due_date",
                |m: &AccountWithCashflows| { &m.due_date },
                |m: &mut AccountWithCashflows| { &mut m.due_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "eop_balance",
                |m: &AccountWithCashflows| { &m.eop_balance },
                |m: &mut AccountWithCashflows| { &mut m.eop_balance },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "as_on_date",
                |m: &AccountWithCashflows| { &m.as_on_date },
                |m: &mut AccountWithCashflows| { &mut m.as_on_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "index_rate",
                |m: &AccountWithCashflows| { &m.index_rate },
                |m: &mut AccountWithCashflows| { &mut m.index_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "net_rate",
                |m: &AccountWithCashflows| { &m.net_rate },
                |m: &mut AccountWithCashflows| { &mut m.net_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "benchmark_name",
                |m: &AccountWithCashflows| { &m.benchmark_name },
                |m: &mut AccountWithCashflows| { &mut m.benchmark_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rate_type_1",
                |m: &AccountWithCashflows| { &m.rate_type_1 },
                |m: &mut AccountWithCashflows| { &mut m.rate_type_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "npa_status",
                |m: &AccountWithCashflows| { &m.npa_status },
                |m: &mut AccountWithCashflows| { &mut m.npa_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "npa_final_status",
                |m: &AccountWithCashflows| { &m.npa_final_status },
                |m: &mut AccountWithCashflows| { &mut m.npa_final_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ptc_flag",
                |m: &AccountWithCashflows| { &m.ptc_flag },
                |m: &mut AccountWithCashflows| { &mut m.ptc_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_repricing_date",
                |m: &AccountWithCashflows| { &m.last_repricing_date },
                |m: &mut AccountWithCashflows| { &mut m.last_repricing_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "index_code",
                |m: &AccountWithCashflows| { &m.index_code },
                |m: &mut AccountWithCashflows| { &mut m.index_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rate_type_2",
                |m: &AccountWithCashflows| { &m.rate_type_2 },
                |m: &mut AccountWithCashflows| { &mut m.rate_type_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_reset_date",
                |m: &AccountWithCashflows| { &m.next_reset_date },
                |m: &mut AccountWithCashflows| { &mut m.next_reset_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reset_frequency",
                |m: &AccountWithCashflows| { &m.reset_frequency },
                |m: &mut AccountWithCashflows| { &mut m.reset_frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "derived_reset_date",
                |m: &AccountWithCashflows| { &m.derived_reset_date },
                |m: &mut AccountWithCashflows| { &mut m.derived_reset_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "derived_arrear_date",
                |m: &AccountWithCashflows| { &m.derived_arrear_date },
                |m: &mut AccountWithCashflows| { &mut m.derived_arrear_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "arrear_prin",
                |m: &AccountWithCashflows| { &m.arrear_prin },
                |m: &mut AccountWithCashflows| { &mut m.arrear_prin },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "add_string_1",
                |m: &AccountWithCashflows| { &m.add_string_1 },
                |m: &mut AccountWithCashflows| { &mut m.add_string_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "add_string_2",
                |m: &AccountWithCashflows| { &m.add_string_2 },
                |m: &mut AccountWithCashflows| { &mut m.add_string_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "add_int_1",
                |m: &AccountWithCashflows| { &m.add_int_1 },
                |m: &mut AccountWithCashflows| { &mut m.add_int_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "add_int_2",
                |m: &AccountWithCashflows| { &m.add_int_2 },
                |m: &mut AccountWithCashflows| { &mut m.add_int_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "add_float_1",
                |m: &AccountWithCashflows| { &m.add_float_1 },
                |m: &mut AccountWithCashflows| { &mut m.add_float_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "add_float_2",
                |m: &AccountWithCashflows| { &m.add_float_2 },
                |m: &mut AccountWithCashflows| { &mut m.add_float_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "add_date_1",
                |m: &AccountWithCashflows| { &m.add_date_1 },
                |m: &mut AccountWithCashflows| { &mut m.add_date_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "add_date_2",
                |m: &AccountWithCashflows| { &m.add_date_2 },
                |m: &mut AccountWithCashflows| { &mut m.add_date_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.customer_id.clear();
        self.cod_acct_no.clear();
        self.prod_code.clear();
        self.ccy_code.clear();
        self.customer_type.clear();
        self.gl_account_principal = 0.;
        self.gl_account_interest = 0.;
        self.gl_account_accrued = 0.;
        self.acct_open_date = 0;
        self.first_disb_date = 0;
        self.maturity_date = 0;
        self.due_date = 0;
        self.eop_balance = 0.;
        self.as_on_date = 0;
        self.index_rate = 0.;
        self.net_rate = 0.;
        self.benchmark_name.clear();
        self.rate_type_1.clear();
        self.npa_status.clear();
        self.npa_final_status.clear();
        self.ptc_flag.clear();
        self.last_repricing_date = 0;
        self.index_code.clear();
        self.rate_type_2.clear();
        self.next_reset_date = 0;
        self.reset_frequency.clear();
        self.derived_reset_date = 0;
        self.derived_arrear_date = 0;
        self.arrear_prin = 0.;
        self.add_string_1.clear();
        self.add_string_2.clear();
        self.add_int_1 = 0;
        self.add_int_2 = 0;
        self.add_float_1 = 0.;
        self.add_float_2 = 0.;
        self.add_date_1 = 0;
        self.add_date_2 = 0;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11cf-loans-au.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\
    \x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\
    \x20\x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03\
    R\x04date\"\xd6\n\n\x14AccountWithCashflows\x12\x1f\n\x0bcustomer_id\x18\
    \x01\x20\x01(\tR\ncustomerId\x12\x1e\n\x0bcod_acct_no\x18\x02\x20\x01(\t\
    R\tcodAcctNo\x12\x1b\n\tprod_code\x18\x03\x20\x01(\tR\x08prodCode\x12\
    \x19\n\x08ccy_code\x18\x04\x20\x01(\tR\x07ccyCode\x12#\n\rcustomer_type\
    \x18\x05\x20\x01(\tR\x0ccustomerType\x120\n\x14gl_account_principal\x18\
    \x06\x20\x01(\x01R\x12glAccountPrincipal\x12.\n\x13gl_account_interest\
    \x18\x07\x20\x01(\x01R\x11glAccountInterest\x12,\n\x12gl_account_accrued\
    \x18\x08\x20\x01(\x01R\x10glAccountAccrued\x12$\n\x0eacct_open_date\x18\
    \t\x20\x01(\x03R\x0cacctOpenDate\x12&\n\x0ffirst_disb_date\x18\n\x20\x01\
    (\x03R\rfirstDisbDate\x12#\n\rmaturity_date\x18\x0b\x20\x01(\x03R\x0cmat\
    urityDate\x12\x19\n\x08due_date\x18\x0c\x20\x01(\x03R\x07dueDate\x12\x1f\
    \n\x0beop_balance\x18\r\x20\x01(\x01R\neopBalance\x12\x1c\n\nas_on_date\
    \x18\x0e\x20\x01(\x03R\x08asOnDate\x12\x1d\n\nindex_rate\x18\x0f\x20\x01\
    (\x01R\tindexRate\x12\x19\n\x08net_rate\x18\x10\x20\x01(\x01R\x07netRate\
    \x12%\n\x0ebenchmark_name\x18\x11\x20\x01(\tR\rbenchmarkName\x12\x1e\n\
    \x0brate_type_1\x18\x12\x20\x01(\tR\trateType1\x12\x1d\n\nnpa_status\x18\
    \x13\x20\x01(\tR\tnpaStatus\x12(\n\x10npa_final_status\x18\x14\x20\x01(\
    \tR\x0enpaFinalStatus\x12\x19\n\x08ptc_flag\x18\x15\x20\x01(\tR\x07ptcFl\
    ag\x12.\n\x13last_repricing_date\x18\x16\x20\x01(\x03R\x11lastRepricingD\
    ate\x12\x1d\n\nindex_code\x18\x17\x20\x01(\tR\tindexCode\x12\x1e\n\x0bra\
    te_type_2\x18\x18\x20\x01(\tR\trateType2\x12&\n\x0fnext_reset_date\x18\
    \x19\x20\x01(\x03R\rnextResetDate\x12'\n\x0freset_frequency\x18\x1a\x20\
    \x01(\tR\x0eresetFrequency\x12,\n\x12derived_reset_date\x18\x1b\x20\x01(\
    \x03R\x10derivedResetDate\x12.\n\x13derived_arrear_date\x18\x1c\x20\x01(\
    \x03R\x11derivedArrearDate\x12\x1f\n\x0barrear_prin\x18\x1d\x20\x01(\x01\
    R\narrearPrin\x12\x20\n\x0cadd_string_1\x18\x1e\x20\x01(\tR\naddString1\
    \x12\x20\n\x0cadd_string_2\x18\x1f\x20\x01(\tR\naddString2\x12\x1a\n\tad\
    d_int_1\x18\x20\x20\x01(\x03R\x07addInt1\x12\x1a\n\tadd_int_2\x18!\x20\
    \x01(\x03R\x07addInt2\x12\x1e\n\x0badd_float_1\x18\"\x20\x01(\x01R\taddF\
    loat1\x12\x1e\n\x0badd_float_2\x18#\x20\x01(\x01R\taddFloat2\x12\x1c\n\n\
    add_date_1\x18$\x20\x01(\x03R\x08addDate1\x12\x1c\n\nadd_date_2\x18%\x20\
    \x01(\x03R\x08addDate2\x12'\n\tcashflows\x18&\x20\x03(\x0b2\t.CashflowR\
    \tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
