// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    pub base_rate: f64,
    pub base_rate_amount: f64,
    pub adj1_rate: f64,
    pub adj1_rate_amount: f64,
    pub adj2_rate: f64,
    pub adj2_rate_amount: f64,
    pub adj3_rate: f64,
    pub adj3_rate_amount: f64,
    pub adj4_rate: f64,
    pub adj4_rate_amount: f64,
    pub adj5_rate: f64,
    pub adj5_rate_amount: f64,
    pub adj6_rate: f64,
    pub adj6_rate_amount: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // double principal_amount = 2;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }

    // double base_rate = 4;

    pub fn clear_base_rate(&mut self) {
        self.base_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_rate(&mut self, v: f64) {
        self.base_rate = v;
    }

    pub fn get_base_rate(&self) -> f64 {
        self.base_rate
    }

    // double base_rate_amount = 5;

    pub fn clear_base_rate_amount(&mut self) {
        self.base_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_rate_amount(&mut self, v: f64) {
        self.base_rate_amount = v;
    }

    pub fn get_base_rate_amount(&self) -> f64 {
        self.base_rate_amount
    }

    // double adj1_rate = 6;

    pub fn clear_adj1_rate(&mut self) {
        self.adj1_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj1_rate(&mut self, v: f64) {
        self.adj1_rate = v;
    }

    pub fn get_adj1_rate(&self) -> f64 {
        self.adj1_rate
    }

    // double adj1_rate_amount = 7;

    pub fn clear_adj1_rate_amount(&mut self) {
        self.adj1_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj1_rate_amount(&mut self, v: f64) {
        self.adj1_rate_amount = v;
    }

    pub fn get_adj1_rate_amount(&self) -> f64 {
        self.adj1_rate_amount
    }

    // double adj2_rate = 8;

    pub fn clear_adj2_rate(&mut self) {
        self.adj2_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj2_rate(&mut self, v: f64) {
        self.adj2_rate = v;
    }

    pub fn get_adj2_rate(&self) -> f64 {
        self.adj2_rate
    }

    // double adj2_rate_amount = 9;

    pub fn clear_adj2_rate_amount(&mut self) {
        self.adj2_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj2_rate_amount(&mut self, v: f64) {
        self.adj2_rate_amount = v;
    }

    pub fn get_adj2_rate_amount(&self) -> f64 {
        self.adj2_rate_amount
    }

    // double adj3_rate = 10;

    pub fn clear_adj3_rate(&mut self) {
        self.adj3_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj3_rate(&mut self, v: f64) {
        self.adj3_rate = v;
    }

    pub fn get_adj3_rate(&self) -> f64 {
        self.adj3_rate
    }

    // double adj3_rate_amount = 11;

    pub fn clear_adj3_rate_amount(&mut self) {
        self.adj3_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj3_rate_amount(&mut self, v: f64) {
        self.adj3_rate_amount = v;
    }

    pub fn get_adj3_rate_amount(&self) -> f64 {
        self.adj3_rate_amount
    }

    // double adj4_rate = 12;

    pub fn clear_adj4_rate(&mut self) {
        self.adj4_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj4_rate(&mut self, v: f64) {
        self.adj4_rate = v;
    }

    pub fn get_adj4_rate(&self) -> f64 {
        self.adj4_rate
    }

    // double adj4_rate_amount = 13;

    pub fn clear_adj4_rate_amount(&mut self) {
        self.adj4_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj4_rate_amount(&mut self, v: f64) {
        self.adj4_rate_amount = v;
    }

    pub fn get_adj4_rate_amount(&self) -> f64 {
        self.adj4_rate_amount
    }

    // double adj5_rate = 14;

    pub fn clear_adj5_rate(&mut self) {
        self.adj5_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj5_rate(&mut self, v: f64) {
        self.adj5_rate = v;
    }

    pub fn get_adj5_rate(&self) -> f64 {
        self.adj5_rate
    }

    // double adj5_rate_amount = 15;

    pub fn clear_adj5_rate_amount(&mut self) {
        self.adj5_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj5_rate_amount(&mut self, v: f64) {
        self.adj5_rate_amount = v;
    }

    pub fn get_adj5_rate_amount(&self) -> f64 {
        self.adj5_rate_amount
    }

    // double adj6_rate = 16;

    pub fn clear_adj6_rate(&mut self) {
        self.adj6_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj6_rate(&mut self, v: f64) {
        self.adj6_rate = v;
    }

    pub fn get_adj6_rate(&self) -> f64 {
        self.adj6_rate
    }

    // double adj6_rate_amount = 17;

    pub fn clear_adj6_rate_amount(&mut self) {
        self.adj6_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj6_rate_amount(&mut self, v: f64) {
        self.adj6_rate_amount = v;
    }

    pub fn get_adj6_rate_amount(&self) -> f64 {
        self.adj6_rate_amount
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.base_rate = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.base_rate_amount = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj1_rate = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj1_rate_amount = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj2_rate = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj2_rate_amount = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj3_rate = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj3_rate_amount = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj4_rate = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj4_rate_amount = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj5_rate = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj5_rate_amount = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj6_rate = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj6_rate_amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.base_rate != 0. {
            my_size += 9;
        }
        if self.base_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj1_rate != 0. {
            my_size += 9;
        }
        if self.adj1_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj2_rate != 0. {
            my_size += 9;
        }
        if self.adj2_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj3_rate != 0. {
            my_size += 9;
        }
        if self.adj3_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj4_rate != 0. {
            my_size += 9;
        }
        if self.adj4_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj5_rate != 0. {
            my_size += 9;
        }
        if self.adj5_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj6_rate != 0. {
            my_size += 10;
        }
        if self.adj6_rate_amount != 0. {
            my_size += 10;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        if self.base_rate != 0. {
            os.write_double(4, self.base_rate)?;
        }
        if self.base_rate_amount != 0. {
            os.write_double(5, self.base_rate_amount)?;
        }
        if self.adj1_rate != 0. {
            os.write_double(6, self.adj1_rate)?;
        }
        if self.adj1_rate_amount != 0. {
            os.write_double(7, self.adj1_rate_amount)?;
        }
        if self.adj2_rate != 0. {
            os.write_double(8, self.adj2_rate)?;
        }
        if self.adj2_rate_amount != 0. {
            os.write_double(9, self.adj2_rate_amount)?;
        }
        if self.adj3_rate != 0. {
            os.write_double(10, self.adj3_rate)?;
        }
        if self.adj3_rate_amount != 0. {
            os.write_double(11, self.adj3_rate_amount)?;
        }
        if self.adj4_rate != 0. {
            os.write_double(12, self.adj4_rate)?;
        }
        if self.adj4_rate_amount != 0. {
            os.write_double(13, self.adj4_rate_amount)?;
        }
        if self.adj5_rate != 0. {
            os.write_double(14, self.adj5_rate)?;
        }
        if self.adj5_rate_amount != 0. {
            os.write_double(15, self.adj5_rate_amount)?;
        }
        if self.adj6_rate != 0. {
            os.write_double(16, self.adj6_rate)?;
        }
        if self.adj6_rate_amount != 0. {
            os.write_double(17, self.adj6_rate_amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_amount",
                    |m: &Cashflow| { &m.interest_amount },
                    |m: &mut Cashflow| { &mut m.interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal_amount",
                    |m: &Cashflow| { &m.principal_amount },
                    |m: &mut Cashflow| { &mut m.principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "base_rate",
                    |m: &Cashflow| { &m.base_rate },
                    |m: &mut Cashflow| { &mut m.base_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "base_rate_amount",
                    |m: &Cashflow| { &m.base_rate_amount },
                    |m: &mut Cashflow| { &mut m.base_rate_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj1_rate",
                    |m: &Cashflow| { &m.adj1_rate },
                    |m: &mut Cashflow| { &mut m.adj1_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj1_rate_amount",
                    |m: &Cashflow| { &m.adj1_rate_amount },
                    |m: &mut Cashflow| { &mut m.adj1_rate_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj2_rate",
                    |m: &Cashflow| { &m.adj2_rate },
                    |m: &mut Cashflow| { &mut m.adj2_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj2_rate_amount",
                    |m: &Cashflow| { &m.adj2_rate_amount },
                    |m: &mut Cashflow| { &mut m.adj2_rate_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj3_rate",
                    |m: &Cashflow| { &m.adj3_rate },
                    |m: &mut Cashflow| { &mut m.adj3_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj3_rate_amount",
                    |m: &Cashflow| { &m.adj3_rate_amount },
                    |m: &mut Cashflow| { &mut m.adj3_rate_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj4_rate",
                    |m: &Cashflow| { &m.adj4_rate },
                    |m: &mut Cashflow| { &mut m.adj4_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj4_rate_amount",
                    |m: &Cashflow| { &m.adj4_rate_amount },
                    |m: &mut Cashflow| { &mut m.adj4_rate_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj5_rate",
                    |m: &Cashflow| { &m.adj5_rate },
                    |m: &mut Cashflow| { &mut m.adj5_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj5_rate_amount",
                    |m: &Cashflow| { &m.adj5_rate_amount },
                    |m: &mut Cashflow| { &mut m.adj5_rate_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj6_rate",
                    |m: &Cashflow| { &m.adj6_rate },
                    |m: &mut Cashflow| { &mut m.adj6_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj6_rate_amount",
                    |m: &Cashflow| { &m.adj6_rate_amount },
                    |m: &mut Cashflow| { &mut m.adj6_rate_amount },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_interest_amount();
        self.clear_principal_amount();
        self.clear_date();
        self.clear_base_rate();
        self.clear_base_rate_amount();
        self.clear_adj1_rate();
        self.clear_adj1_rate_amount();
        self.clear_adj2_rate();
        self.clear_adj2_rate_amount();
        self.clear_adj3_rate();
        self.clear_adj3_rate_amount();
        self.clear_adj4_rate();
        self.clear_adj4_rate_amount();
        self.clear_adj5_rate();
        self.clear_adj5_rate_amount();
        self.clear_adj6_rate();
        self.clear_adj6_rate_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub as_on_month: i64,
    pub account_id: ::std::string::String,
    pub currency: ::std::string::String,
    pub balance_ccy: f64,
    pub balance_hcy: f64,
    pub int_rate: f64,
    pub int_amt_ccy: f64,
    pub int_amt_hcy: f64,
    pub ftp_method: ::std::string::String,
    pub base_rate_curve_id: ::std::string::String,
    pub rate_flag: ::std::string::String,
    pub adj_code_1: ::std::string::String,
    pub adj_code_2: ::std::string::String,
    pub adj_code_3: ::std::string::String,
    pub adj_code_4: ::std::string::String,
    pub adj_code_5: ::std::string::String,
    pub adj_code_6: ::std::string::String,
    pub val_dt: i64,
    pub open_dt: i64,
    pub mat_dt: i64,
    pub lst_repricing_dt: i64,
    pub rep_freq: ::std::string::String,
    pub cust_agg_bal: f64,
    pub day_count_basis: ::std::string::String,
    pub base_rate: f64,
    pub adj_rate_1: f64,
    pub adj_rate_2: f64,
    pub adj_rate_3: f64,
    pub adj_rate_4: f64,
    pub adj_rate_5: f64,
    pub adj_rate_6: f64,
    pub ftp_rate: f64,
    pub lock_spread: f64,
    pub ftp_amt_ccy: f64,
    pub ftp_amt_hcy: f64,
    pub a_or_l: ::std::string::String,
    pub dim1: ::std::string::String,
    pub dim2: ::std::string::String,
    pub dim3: ::std::string::String,
    pub dim4: ::std::string::String,
    pub customer_id: ::std::string::String,
    pub rl1: i32,
    pub rl2: i32,
    pub rl3: i32,
    pub bc_as_on_rule: i64,
    pub tenor_start_date_rule: i64,
    pub tenor_end_date_rule: i64,
    pub bc_as_on_applied: i64,
    pub tenor_start_date_applied: i64,
    pub tenor_end_date_applied: i64,
    pub gl_code: ::std::string::String,
    pub prod_code: ::std::string::String,
    pub div_code: ::std::string::String,
    pub mis_code_1: ::std::string::String,
    pub mis_code_2: ::std::string::String,
    pub mis_code_3: ::std::string::String,
    pub eop_balance_ccy: f64,
    pub eop_balance_hcy: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // int64 as_on_month = 1;

    pub fn clear_as_on_month(&mut self) {
        self.as_on_month = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on_month(&mut self, v: i64) {
        self.as_on_month = v;
    }

    pub fn get_as_on_month(&self) -> i64 {
        self.as_on_month
    }

    // string account_id = 2;

    pub fn clear_account_id(&mut self) {
        self.account_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: ::std::string::String) {
        self.account_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_id(&mut self) -> &mut ::std::string::String {
        &mut self.account_id
    }

    // Take field
    pub fn take_account_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_id, ::std::string::String::new())
    }

    pub fn get_account_id(&self) -> &str {
        &self.account_id
    }

    // string currency = 3;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // double balance_ccy = 4;

    pub fn clear_balance_ccy(&mut self) {
        self.balance_ccy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_balance_ccy(&mut self, v: f64) {
        self.balance_ccy = v;
    }

    pub fn get_balance_ccy(&self) -> f64 {
        self.balance_ccy
    }

    // double balance_hcy = 5;

    pub fn clear_balance_hcy(&mut self) {
        self.balance_hcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_balance_hcy(&mut self, v: f64) {
        self.balance_hcy = v;
    }

    pub fn get_balance_hcy(&self) -> f64 {
        self.balance_hcy
    }

    // double int_rate = 6;

    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }

    // double int_amt_ccy = 7;

    pub fn clear_int_amt_ccy(&mut self) {
        self.int_amt_ccy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_ccy(&mut self, v: f64) {
        self.int_amt_ccy = v;
    }

    pub fn get_int_amt_ccy(&self) -> f64 {
        self.int_amt_ccy
    }

    // double int_amt_hcy = 8;

    pub fn clear_int_amt_hcy(&mut self) {
        self.int_amt_hcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_hcy(&mut self, v: f64) {
        self.int_amt_hcy = v;
    }

    pub fn get_int_amt_hcy(&self) -> f64 {
        self.int_amt_hcy
    }

    // string ftp_method = 9;

    pub fn clear_ftp_method(&mut self) {
        self.ftp_method.clear();
    }

    // Param is passed by value, moved
    pub fn set_ftp_method(&mut self, v: ::std::string::String) {
        self.ftp_method = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ftp_method(&mut self) -> &mut ::std::string::String {
        &mut self.ftp_method
    }

    // Take field
    pub fn take_ftp_method(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ftp_method, ::std::string::String::new())
    }

    pub fn get_ftp_method(&self) -> &str {
        &self.ftp_method
    }

    // string base_rate_curve_id = 10;

    pub fn clear_base_rate_curve_id(&mut self) {
        self.base_rate_curve_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_rate_curve_id(&mut self, v: ::std::string::String) {
        self.base_rate_curve_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_rate_curve_id(&mut self) -> &mut ::std::string::String {
        &mut self.base_rate_curve_id
    }

    // Take field
    pub fn take_base_rate_curve_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base_rate_curve_id, ::std::string::String::new())
    }

    pub fn get_base_rate_curve_id(&self) -> &str {
        &self.base_rate_curve_id
    }

    // string rate_flag = 11;

    pub fn clear_rate_flag(&mut self) {
        self.rate_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_flag(&mut self, v: ::std::string::String) {
        self.rate_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_flag(&mut self) -> &mut ::std::string::String {
        &mut self.rate_flag
    }

    // Take field
    pub fn take_rate_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_flag, ::std::string::String::new())
    }

    pub fn get_rate_flag(&self) -> &str {
        &self.rate_flag
    }

    // string adj_code_1 = 12;

    pub fn clear_adj_code_1(&mut self) {
        self.adj_code_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_adj_code_1(&mut self, v: ::std::string::String) {
        self.adj_code_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_adj_code_1(&mut self) -> &mut ::std::string::String {
        &mut self.adj_code_1
    }

    // Take field
    pub fn take_adj_code_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.adj_code_1, ::std::string::String::new())
    }

    pub fn get_adj_code_1(&self) -> &str {
        &self.adj_code_1
    }

    // string adj_code_2 = 13;

    pub fn clear_adj_code_2(&mut self) {
        self.adj_code_2.clear();
    }

    // Param is passed by value, moved
    pub fn set_adj_code_2(&mut self, v: ::std::string::String) {
        self.adj_code_2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_adj_code_2(&mut self) -> &mut ::std::string::String {
        &mut self.adj_code_2
    }

    // Take field
    pub fn take_adj_code_2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.adj_code_2, ::std::string::String::new())
    }

    pub fn get_adj_code_2(&self) -> &str {
        &self.adj_code_2
    }

    // string adj_code_3 = 14;

    pub fn clear_adj_code_3(&mut self) {
        self.adj_code_3.clear();
    }

    // Param is passed by value, moved
    pub fn set_adj_code_3(&mut self, v: ::std::string::String) {
        self.adj_code_3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_adj_code_3(&mut self) -> &mut ::std::string::String {
        &mut self.adj_code_3
    }

    // Take field
    pub fn take_adj_code_3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.adj_code_3, ::std::string::String::new())
    }

    pub fn get_adj_code_3(&self) -> &str {
        &self.adj_code_3
    }

    // string adj_code_4 = 15;

    pub fn clear_adj_code_4(&mut self) {
        self.adj_code_4.clear();
    }

    // Param is passed by value, moved
    pub fn set_adj_code_4(&mut self, v: ::std::string::String) {
        self.adj_code_4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_adj_code_4(&mut self) -> &mut ::std::string::String {
        &mut self.adj_code_4
    }

    // Take field
    pub fn take_adj_code_4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.adj_code_4, ::std::string::String::new())
    }

    pub fn get_adj_code_4(&self) -> &str {
        &self.adj_code_4
    }

    // string adj_code_5 = 16;

    pub fn clear_adj_code_5(&mut self) {
        self.adj_code_5.clear();
    }

    // Param is passed by value, moved
    pub fn set_adj_code_5(&mut self, v: ::std::string::String) {
        self.adj_code_5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_adj_code_5(&mut self) -> &mut ::std::string::String {
        &mut self.adj_code_5
    }

    // Take field
    pub fn take_adj_code_5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.adj_code_5, ::std::string::String::new())
    }

    pub fn get_adj_code_5(&self) -> &str {
        &self.adj_code_5
    }

    // string adj_code_6 = 17;

    pub fn clear_adj_code_6(&mut self) {
        self.adj_code_6.clear();
    }

    // Param is passed by value, moved
    pub fn set_adj_code_6(&mut self, v: ::std::string::String) {
        self.adj_code_6 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_adj_code_6(&mut self) -> &mut ::std::string::String {
        &mut self.adj_code_6
    }

    // Take field
    pub fn take_adj_code_6(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.adj_code_6, ::std::string::String::new())
    }

    pub fn get_adj_code_6(&self) -> &str {
        &self.adj_code_6
    }

    // int64 val_dt = 18;

    pub fn clear_val_dt(&mut self) {
        self.val_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_val_dt(&mut self, v: i64) {
        self.val_dt = v;
    }

    pub fn get_val_dt(&self) -> i64 {
        self.val_dt
    }

    // int64 open_dt = 19;

    pub fn clear_open_dt(&mut self) {
        self.open_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_open_dt(&mut self, v: i64) {
        self.open_dt = v;
    }

    pub fn get_open_dt(&self) -> i64 {
        self.open_dt
    }

    // int64 mat_dt = 20;

    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }

    // int64 lst_repricing_dt = 21;

    pub fn clear_lst_repricing_dt(&mut self) {
        self.lst_repricing_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_lst_repricing_dt(&mut self, v: i64) {
        self.lst_repricing_dt = v;
    }

    pub fn get_lst_repricing_dt(&self) -> i64 {
        self.lst_repricing_dt
    }

    // string rep_freq = 22;

    pub fn clear_rep_freq(&mut self) {
        self.rep_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_rep_freq(&mut self, v: ::std::string::String) {
        self.rep_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rep_freq(&mut self) -> &mut ::std::string::String {
        &mut self.rep_freq
    }

    // Take field
    pub fn take_rep_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rep_freq, ::std::string::String::new())
    }

    pub fn get_rep_freq(&self) -> &str {
        &self.rep_freq
    }

    // double cust_agg_bal = 23;

    pub fn clear_cust_agg_bal(&mut self) {
        self.cust_agg_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cust_agg_bal(&mut self, v: f64) {
        self.cust_agg_bal = v;
    }

    pub fn get_cust_agg_bal(&self) -> f64 {
        self.cust_agg_bal
    }

    // string day_count_basis = 24;

    pub fn clear_day_count_basis(&mut self) {
        self.day_count_basis.clear();
    }

    // Param is passed by value, moved
    pub fn set_day_count_basis(&mut self, v: ::std::string::String) {
        self.day_count_basis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_day_count_basis(&mut self) -> &mut ::std::string::String {
        &mut self.day_count_basis
    }

    // Take field
    pub fn take_day_count_basis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.day_count_basis, ::std::string::String::new())
    }

    pub fn get_day_count_basis(&self) -> &str {
        &self.day_count_basis
    }

    // double base_rate = 25;

    pub fn clear_base_rate(&mut self) {
        self.base_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_rate(&mut self, v: f64) {
        self.base_rate = v;
    }

    pub fn get_base_rate(&self) -> f64 {
        self.base_rate
    }

    // double adj_rate_1 = 26;

    pub fn clear_adj_rate_1(&mut self) {
        self.adj_rate_1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj_rate_1(&mut self, v: f64) {
        self.adj_rate_1 = v;
    }

    pub fn get_adj_rate_1(&self) -> f64 {
        self.adj_rate_1
    }

    // double adj_rate_2 = 27;

    pub fn clear_adj_rate_2(&mut self) {
        self.adj_rate_2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj_rate_2(&mut self, v: f64) {
        self.adj_rate_2 = v;
    }

    pub fn get_adj_rate_2(&self) -> f64 {
        self.adj_rate_2
    }

    // double adj_rate_3 = 28;

    pub fn clear_adj_rate_3(&mut self) {
        self.adj_rate_3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj_rate_3(&mut self, v: f64) {
        self.adj_rate_3 = v;
    }

    pub fn get_adj_rate_3(&self) -> f64 {
        self.adj_rate_3
    }

    // double adj_rate_4 = 29;

    pub fn clear_adj_rate_4(&mut self) {
        self.adj_rate_4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj_rate_4(&mut self, v: f64) {
        self.adj_rate_4 = v;
    }

    pub fn get_adj_rate_4(&self) -> f64 {
        self.adj_rate_4
    }

    // double adj_rate_5 = 30;

    pub fn clear_adj_rate_5(&mut self) {
        self.adj_rate_5 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj_rate_5(&mut self, v: f64) {
        self.adj_rate_5 = v;
    }

    pub fn get_adj_rate_5(&self) -> f64 {
        self.adj_rate_5
    }

    // double adj_rate_6 = 31;

    pub fn clear_adj_rate_6(&mut self) {
        self.adj_rate_6 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj_rate_6(&mut self, v: f64) {
        self.adj_rate_6 = v;
    }

    pub fn get_adj_rate_6(&self) -> f64 {
        self.adj_rate_6
    }

    // double ftp_rate = 32;

    pub fn clear_ftp_rate(&mut self) {
        self.ftp_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ftp_rate(&mut self, v: f64) {
        self.ftp_rate = v;
    }

    pub fn get_ftp_rate(&self) -> f64 {
        self.ftp_rate
    }

    // double lock_spread = 33;

    pub fn clear_lock_spread(&mut self) {
        self.lock_spread = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lock_spread(&mut self, v: f64) {
        self.lock_spread = v;
    }

    pub fn get_lock_spread(&self) -> f64 {
        self.lock_spread
    }

    // double ftp_amt_ccy = 34;

    pub fn clear_ftp_amt_ccy(&mut self) {
        self.ftp_amt_ccy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ftp_amt_ccy(&mut self, v: f64) {
        self.ftp_amt_ccy = v;
    }

    pub fn get_ftp_amt_ccy(&self) -> f64 {
        self.ftp_amt_ccy
    }

    // double ftp_amt_hcy = 35;

    pub fn clear_ftp_amt_hcy(&mut self) {
        self.ftp_amt_hcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ftp_amt_hcy(&mut self, v: f64) {
        self.ftp_amt_hcy = v;
    }

    pub fn get_ftp_amt_hcy(&self) -> f64 {
        self.ftp_amt_hcy
    }

    // string a_or_l = 36;

    pub fn clear_a_or_l(&mut self) {
        self.a_or_l.clear();
    }

    // Param is passed by value, moved
    pub fn set_a_or_l(&mut self, v: ::std::string::String) {
        self.a_or_l = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a_or_l(&mut self) -> &mut ::std::string::String {
        &mut self.a_or_l
    }

    // Take field
    pub fn take_a_or_l(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a_or_l, ::std::string::String::new())
    }

    pub fn get_a_or_l(&self) -> &str {
        &self.a_or_l
    }

    // string dim1 = 37;

    pub fn clear_dim1(&mut self) {
        self.dim1.clear();
    }

    // Param is passed by value, moved
    pub fn set_dim1(&mut self, v: ::std::string::String) {
        self.dim1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dim1(&mut self) -> &mut ::std::string::String {
        &mut self.dim1
    }

    // Take field
    pub fn take_dim1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dim1, ::std::string::String::new())
    }

    pub fn get_dim1(&self) -> &str {
        &self.dim1
    }

    // string dim2 = 38;

    pub fn clear_dim2(&mut self) {
        self.dim2.clear();
    }

    // Param is passed by value, moved
    pub fn set_dim2(&mut self, v: ::std::string::String) {
        self.dim2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dim2(&mut self) -> &mut ::std::string::String {
        &mut self.dim2
    }

    // Take field
    pub fn take_dim2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dim2, ::std::string::String::new())
    }

    pub fn get_dim2(&self) -> &str {
        &self.dim2
    }

    // string dim3 = 39;

    pub fn clear_dim3(&mut self) {
        self.dim3.clear();
    }

    // Param is passed by value, moved
    pub fn set_dim3(&mut self, v: ::std::string::String) {
        self.dim3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dim3(&mut self) -> &mut ::std::string::String {
        &mut self.dim3
    }

    // Take field
    pub fn take_dim3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dim3, ::std::string::String::new())
    }

    pub fn get_dim3(&self) -> &str {
        &self.dim3
    }

    // string dim4 = 40;

    pub fn clear_dim4(&mut self) {
        self.dim4.clear();
    }

    // Param is passed by value, moved
    pub fn set_dim4(&mut self, v: ::std::string::String) {
        self.dim4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dim4(&mut self) -> &mut ::std::string::String {
        &mut self.dim4
    }

    // Take field
    pub fn take_dim4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dim4, ::std::string::String::new())
    }

    pub fn get_dim4(&self) -> &str {
        &self.dim4
    }

    // string customer_id = 41;

    pub fn clear_customer_id(&mut self) {
        self.customer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_id(&mut self, v: ::std::string::String) {
        self.customer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_id(&mut self) -> &mut ::std::string::String {
        &mut self.customer_id
    }

    // Take field
    pub fn take_customer_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_id, ::std::string::String::new())
    }

    pub fn get_customer_id(&self) -> &str {
        &self.customer_id
    }

    // int32 rl1 = 42;

    pub fn clear_rl1(&mut self) {
        self.rl1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_rl1(&mut self, v: i32) {
        self.rl1 = v;
    }

    pub fn get_rl1(&self) -> i32 {
        self.rl1
    }

    // int32 rl2 = 43;

    pub fn clear_rl2(&mut self) {
        self.rl2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_rl2(&mut self, v: i32) {
        self.rl2 = v;
    }

    pub fn get_rl2(&self) -> i32 {
        self.rl2
    }

    // int32 rl3 = 44;

    pub fn clear_rl3(&mut self) {
        self.rl3 = 0;
    }

    // Param is passed by value, moved
    pub fn set_rl3(&mut self, v: i32) {
        self.rl3 = v;
    }

    pub fn get_rl3(&self) -> i32 {
        self.rl3
    }

    // int64 bc_as_on_rule = 45;

    pub fn clear_bc_as_on_rule(&mut self) {
        self.bc_as_on_rule = 0;
    }

    // Param is passed by value, moved
    pub fn set_bc_as_on_rule(&mut self, v: i64) {
        self.bc_as_on_rule = v;
    }

    pub fn get_bc_as_on_rule(&self) -> i64 {
        self.bc_as_on_rule
    }

    // int64 tenor_start_date_rule = 46;

    pub fn clear_tenor_start_date_rule(&mut self) {
        self.tenor_start_date_rule = 0;
    }

    // Param is passed by value, moved
    pub fn set_tenor_start_date_rule(&mut self, v: i64) {
        self.tenor_start_date_rule = v;
    }

    pub fn get_tenor_start_date_rule(&self) -> i64 {
        self.tenor_start_date_rule
    }

    // int64 tenor_end_date_rule = 47;

    pub fn clear_tenor_end_date_rule(&mut self) {
        self.tenor_end_date_rule = 0;
    }

    // Param is passed by value, moved
    pub fn set_tenor_end_date_rule(&mut self, v: i64) {
        self.tenor_end_date_rule = v;
    }

    pub fn get_tenor_end_date_rule(&self) -> i64 {
        self.tenor_end_date_rule
    }

    // int64 bc_as_on_applied = 48;

    pub fn clear_bc_as_on_applied(&mut self) {
        self.bc_as_on_applied = 0;
    }

    // Param is passed by value, moved
    pub fn set_bc_as_on_applied(&mut self, v: i64) {
        self.bc_as_on_applied = v;
    }

    pub fn get_bc_as_on_applied(&self) -> i64 {
        self.bc_as_on_applied
    }

    // int64 tenor_start_date_applied = 49;

    pub fn clear_tenor_start_date_applied(&mut self) {
        self.tenor_start_date_applied = 0;
    }

    // Param is passed by value, moved
    pub fn set_tenor_start_date_applied(&mut self, v: i64) {
        self.tenor_start_date_applied = v;
    }

    pub fn get_tenor_start_date_applied(&self) -> i64 {
        self.tenor_start_date_applied
    }

    // int64 tenor_end_date_applied = 50;

    pub fn clear_tenor_end_date_applied(&mut self) {
        self.tenor_end_date_applied = 0;
    }

    // Param is passed by value, moved
    pub fn set_tenor_end_date_applied(&mut self, v: i64) {
        self.tenor_end_date_applied = v;
    }

    pub fn get_tenor_end_date_applied(&self) -> i64 {
        self.tenor_end_date_applied
    }

    // string gl_code = 51;

    pub fn clear_gl_code(&mut self) {
        self.gl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_code(&mut self, v: ::std::string::String) {
        self.gl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_code
    }

    // Take field
    pub fn take_gl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_code, ::std::string::String::new())
    }

    pub fn get_gl_code(&self) -> &str {
        &self.gl_code
    }

    // string prod_code = 52;

    pub fn clear_prod_code(&mut self) {
        self.prod_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_code(&mut self, v: ::std::string::String) {
        self.prod_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_code(&mut self) -> &mut ::std::string::String {
        &mut self.prod_code
    }

    // Take field
    pub fn take_prod_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_code, ::std::string::String::new())
    }

    pub fn get_prod_code(&self) -> &str {
        &self.prod_code
    }

    // string div_code = 53;

    pub fn clear_div_code(&mut self) {
        self.div_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_div_code(&mut self, v: ::std::string::String) {
        self.div_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_div_code(&mut self) -> &mut ::std::string::String {
        &mut self.div_code
    }

    // Take field
    pub fn take_div_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.div_code, ::std::string::String::new())
    }

    pub fn get_div_code(&self) -> &str {
        &self.div_code
    }

    // string mis_code_1 = 54;

    pub fn clear_mis_code_1(&mut self) {
        self.mis_code_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_mis_code_1(&mut self, v: ::std::string::String) {
        self.mis_code_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mis_code_1(&mut self) -> &mut ::std::string::String {
        &mut self.mis_code_1
    }

    // Take field
    pub fn take_mis_code_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mis_code_1, ::std::string::String::new())
    }

    pub fn get_mis_code_1(&self) -> &str {
        &self.mis_code_1
    }

    // string mis_code_2 = 55;

    pub fn clear_mis_code_2(&mut self) {
        self.mis_code_2.clear();
    }

    // Param is passed by value, moved
    pub fn set_mis_code_2(&mut self, v: ::std::string::String) {
        self.mis_code_2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mis_code_2(&mut self) -> &mut ::std::string::String {
        &mut self.mis_code_2
    }

    // Take field
    pub fn take_mis_code_2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mis_code_2, ::std::string::String::new())
    }

    pub fn get_mis_code_2(&self) -> &str {
        &self.mis_code_2
    }

    // string mis_code_3 = 56;

    pub fn clear_mis_code_3(&mut self) {
        self.mis_code_3.clear();
    }

    // Param is passed by value, moved
    pub fn set_mis_code_3(&mut self, v: ::std::string::String) {
        self.mis_code_3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mis_code_3(&mut self) -> &mut ::std::string::String {
        &mut self.mis_code_3
    }

    // Take field
    pub fn take_mis_code_3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mis_code_3, ::std::string::String::new())
    }

    pub fn get_mis_code_3(&self) -> &str {
        &self.mis_code_3
    }

    // double eop_balance_ccy = 57;

    pub fn clear_eop_balance_ccy(&mut self) {
        self.eop_balance_ccy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_eop_balance_ccy(&mut self, v: f64) {
        self.eop_balance_ccy = v;
    }

    pub fn get_eop_balance_ccy(&self) -> f64 {
        self.eop_balance_ccy
    }

    // double eop_balance_hcy = 58;

    pub fn clear_eop_balance_hcy(&mut self) {
        self.eop_balance_hcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_eop_balance_hcy(&mut self, v: f64) {
        self.eop_balance_hcy = v;
    }

    pub fn get_eop_balance_hcy(&self) -> f64 {
        self.eop_balance_hcy
    }

    // repeated .Cashflow cashflows = 59;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on_month = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.balance_ccy = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.balance_hcy = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_ccy = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_hcy = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ftp_method)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base_rate_curve_id)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_flag)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.adj_code_1)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.adj_code_2)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.adj_code_3)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.adj_code_4)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.adj_code_5)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.adj_code_6)?;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.val_dt = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.open_dt = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lst_repricing_dt = tmp;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rep_freq)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.cust_agg_bal = tmp;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.day_count_basis)?;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.base_rate = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj_rate_1 = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj_rate_2 = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj_rate_3 = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj_rate_4 = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj_rate_5 = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj_rate_6 = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ftp_rate = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.lock_spread = tmp;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ftp_amt_ccy = tmp;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ftp_amt_hcy = tmp;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a_or_l)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dim1)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dim2)?;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dim3)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dim4)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_id)?;
                },
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rl1 = tmp;
                },
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rl2 = tmp;
                },
                44 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rl3 = tmp;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.bc_as_on_rule = tmp;
                },
                46 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tenor_start_date_rule = tmp;
                },
                47 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tenor_end_date_rule = tmp;
                },
                48 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.bc_as_on_applied = tmp;
                },
                49 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tenor_start_date_applied = tmp;
                },
                50 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tenor_end_date_applied = tmp;
                },
                51 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_code)?;
                },
                52 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_code)?;
                },
                53 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.div_code)?;
                },
                54 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mis_code_1)?;
                },
                55 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mis_code_2)?;
                },
                56 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mis_code_3)?;
                },
                57 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.eop_balance_ccy = tmp;
                },
                58 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.eop_balance_hcy = tmp;
                },
                59 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.as_on_month != 0 {
            my_size += ::protobuf::rt::value_size(1, self.as_on_month, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.account_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.account_id);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.currency);
        }
        if self.balance_ccy != 0. {
            my_size += 9;
        }
        if self.balance_hcy != 0. {
            my_size += 9;
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if self.int_amt_ccy != 0. {
            my_size += 9;
        }
        if self.int_amt_hcy != 0. {
            my_size += 9;
        }
        if !self.ftp_method.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.ftp_method);
        }
        if !self.base_rate_curve_id.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.base_rate_curve_id);
        }
        if !self.rate_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.rate_flag);
        }
        if !self.adj_code_1.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.adj_code_1);
        }
        if !self.adj_code_2.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.adj_code_2);
        }
        if !self.adj_code_3.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.adj_code_3);
        }
        if !self.adj_code_4.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.adj_code_4);
        }
        if !self.adj_code_5.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.adj_code_5);
        }
        if !self.adj_code_6.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.adj_code_6);
        }
        if self.val_dt != 0 {
            my_size += ::protobuf::rt::value_size(18, self.val_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.open_dt != 0 {
            my_size += ::protobuf::rt::value_size(19, self.open_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mat_dt != 0 {
            my_size += ::protobuf::rt::value_size(20, self.mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lst_repricing_dt != 0 {
            my_size += ::protobuf::rt::value_size(21, self.lst_repricing_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.rep_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.rep_freq);
        }
        if self.cust_agg_bal != 0. {
            my_size += 10;
        }
        if !self.day_count_basis.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.day_count_basis);
        }
        if self.base_rate != 0. {
            my_size += 10;
        }
        if self.adj_rate_1 != 0. {
            my_size += 10;
        }
        if self.adj_rate_2 != 0. {
            my_size += 10;
        }
        if self.adj_rate_3 != 0. {
            my_size += 10;
        }
        if self.adj_rate_4 != 0. {
            my_size += 10;
        }
        if self.adj_rate_5 != 0. {
            my_size += 10;
        }
        if self.adj_rate_6 != 0. {
            my_size += 10;
        }
        if self.ftp_rate != 0. {
            my_size += 10;
        }
        if self.lock_spread != 0. {
            my_size += 10;
        }
        if self.ftp_amt_ccy != 0. {
            my_size += 10;
        }
        if self.ftp_amt_hcy != 0. {
            my_size += 10;
        }
        if !self.a_or_l.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.a_or_l);
        }
        if !self.dim1.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.dim1);
        }
        if !self.dim2.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.dim2);
        }
        if !self.dim3.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.dim3);
        }
        if !self.dim4.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.dim4);
        }
        if !self.customer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.customer_id);
        }
        if self.rl1 != 0 {
            my_size += ::protobuf::rt::value_size(42, self.rl1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rl2 != 0 {
            my_size += ::protobuf::rt::value_size(43, self.rl2, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rl3 != 0 {
            my_size += ::protobuf::rt::value_size(44, self.rl3, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bc_as_on_rule != 0 {
            my_size += ::protobuf::rt::value_size(45, self.bc_as_on_rule, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tenor_start_date_rule != 0 {
            my_size += ::protobuf::rt::value_size(46, self.tenor_start_date_rule, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tenor_end_date_rule != 0 {
            my_size += ::protobuf::rt::value_size(47, self.tenor_end_date_rule, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bc_as_on_applied != 0 {
            my_size += ::protobuf::rt::value_size(48, self.bc_as_on_applied, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tenor_start_date_applied != 0 {
            my_size += ::protobuf::rt::value_size(49, self.tenor_start_date_applied, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tenor_end_date_applied != 0 {
            my_size += ::protobuf::rt::value_size(50, self.tenor_end_date_applied, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.gl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(51, &self.gl_code);
        }
        if !self.prod_code.is_empty() {
            my_size += ::protobuf::rt::string_size(52, &self.prod_code);
        }
        if !self.div_code.is_empty() {
            my_size += ::protobuf::rt::string_size(53, &self.div_code);
        }
        if !self.mis_code_1.is_empty() {
            my_size += ::protobuf::rt::string_size(54, &self.mis_code_1);
        }
        if !self.mis_code_2.is_empty() {
            my_size += ::protobuf::rt::string_size(55, &self.mis_code_2);
        }
        if !self.mis_code_3.is_empty() {
            my_size += ::protobuf::rt::string_size(56, &self.mis_code_3);
        }
        if self.eop_balance_ccy != 0. {
            my_size += 10;
        }
        if self.eop_balance_hcy != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.as_on_month != 0 {
            os.write_int64(1, self.as_on_month)?;
        }
        if !self.account_id.is_empty() {
            os.write_string(2, &self.account_id)?;
        }
        if !self.currency.is_empty() {
            os.write_string(3, &self.currency)?;
        }
        if self.balance_ccy != 0. {
            os.write_double(4, self.balance_ccy)?;
        }
        if self.balance_hcy != 0. {
            os.write_double(5, self.balance_hcy)?;
        }
        if self.int_rate != 0. {
            os.write_double(6, self.int_rate)?;
        }
        if self.int_amt_ccy != 0. {
            os.write_double(7, self.int_amt_ccy)?;
        }
        if self.int_amt_hcy != 0. {
            os.write_double(8, self.int_amt_hcy)?;
        }
        if !self.ftp_method.is_empty() {
            os.write_string(9, &self.ftp_method)?;
        }
        if !self.base_rate_curve_id.is_empty() {
            os.write_string(10, &self.base_rate_curve_id)?;
        }
        if !self.rate_flag.is_empty() {
            os.write_string(11, &self.rate_flag)?;
        }
        if !self.adj_code_1.is_empty() {
            os.write_string(12, &self.adj_code_1)?;
        }
        if !self.adj_code_2.is_empty() {
            os.write_string(13, &self.adj_code_2)?;
        }
        if !self.adj_code_3.is_empty() {
            os.write_string(14, &self.adj_code_3)?;
        }
        if !self.adj_code_4.is_empty() {
            os.write_string(15, &self.adj_code_4)?;
        }
        if !self.adj_code_5.is_empty() {
            os.write_string(16, &self.adj_code_5)?;
        }
        if !self.adj_code_6.is_empty() {
            os.write_string(17, &self.adj_code_6)?;
        }
        if self.val_dt != 0 {
            os.write_int64(18, self.val_dt)?;
        }
        if self.open_dt != 0 {
            os.write_int64(19, self.open_dt)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(20, self.mat_dt)?;
        }
        if self.lst_repricing_dt != 0 {
            os.write_int64(21, self.lst_repricing_dt)?;
        }
        if !self.rep_freq.is_empty() {
            os.write_string(22, &self.rep_freq)?;
        }
        if self.cust_agg_bal != 0. {
            os.write_double(23, self.cust_agg_bal)?;
        }
        if !self.day_count_basis.is_empty() {
            os.write_string(24, &self.day_count_basis)?;
        }
        if self.base_rate != 0. {
            os.write_double(25, self.base_rate)?;
        }
        if self.adj_rate_1 != 0. {
            os.write_double(26, self.adj_rate_1)?;
        }
        if self.adj_rate_2 != 0. {
            os.write_double(27, self.adj_rate_2)?;
        }
        if self.adj_rate_3 != 0. {
            os.write_double(28, self.adj_rate_3)?;
        }
        if self.adj_rate_4 != 0. {
            os.write_double(29, self.adj_rate_4)?;
        }
        if self.adj_rate_5 != 0. {
            os.write_double(30, self.adj_rate_5)?;
        }
        if self.adj_rate_6 != 0. {
            os.write_double(31, self.adj_rate_6)?;
        }
        if self.ftp_rate != 0. {
            os.write_double(32, self.ftp_rate)?;
        }
        if self.lock_spread != 0. {
            os.write_double(33, self.lock_spread)?;
        }
        if self.ftp_amt_ccy != 0. {
            os.write_double(34, self.ftp_amt_ccy)?;
        }
        if self.ftp_amt_hcy != 0. {
            os.write_double(35, self.ftp_amt_hcy)?;
        }
        if !self.a_or_l.is_empty() {
            os.write_string(36, &self.a_or_l)?;
        }
        if !self.dim1.is_empty() {
            os.write_string(37, &self.dim1)?;
        }
        if !self.dim2.is_empty() {
            os.write_string(38, &self.dim2)?;
        }
        if !self.dim3.is_empty() {
            os.write_string(39, &self.dim3)?;
        }
        if !self.dim4.is_empty() {
            os.write_string(40, &self.dim4)?;
        }
        if !self.customer_id.is_empty() {
            os.write_string(41, &self.customer_id)?;
        }
        if self.rl1 != 0 {
            os.write_int32(42, self.rl1)?;
        }
        if self.rl2 != 0 {
            os.write_int32(43, self.rl2)?;
        }
        if self.rl3 != 0 {
            os.write_int32(44, self.rl3)?;
        }
        if self.bc_as_on_rule != 0 {
            os.write_int64(45, self.bc_as_on_rule)?;
        }
        if self.tenor_start_date_rule != 0 {
            os.write_int64(46, self.tenor_start_date_rule)?;
        }
        if self.tenor_end_date_rule != 0 {
            os.write_int64(47, self.tenor_end_date_rule)?;
        }
        if self.bc_as_on_applied != 0 {
            os.write_int64(48, self.bc_as_on_applied)?;
        }
        if self.tenor_start_date_applied != 0 {
            os.write_int64(49, self.tenor_start_date_applied)?;
        }
        if self.tenor_end_date_applied != 0 {
            os.write_int64(50, self.tenor_end_date_applied)?;
        }
        if !self.gl_code.is_empty() {
            os.write_string(51, &self.gl_code)?;
        }
        if !self.prod_code.is_empty() {
            os.write_string(52, &self.prod_code)?;
        }
        if !self.div_code.is_empty() {
            os.write_string(53, &self.div_code)?;
        }
        if !self.mis_code_1.is_empty() {
            os.write_string(54, &self.mis_code_1)?;
        }
        if !self.mis_code_2.is_empty() {
            os.write_string(55, &self.mis_code_2)?;
        }
        if !self.mis_code_3.is_empty() {
            os.write_string(56, &self.mis_code_3)?;
        }
        if self.eop_balance_ccy != 0. {
            os.write_double(57, self.eop_balance_ccy)?;
        }
        if self.eop_balance_hcy != 0. {
            os.write_double(58, self.eop_balance_hcy)?;
        }
        for v in &self.cashflows {
            os.write_tag(59, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "as_on_month",
                    |m: &AccountWithCashflows| { &m.as_on_month },
                    |m: &mut AccountWithCashflows| { &mut m.as_on_month },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "account_id",
                    |m: &AccountWithCashflows| { &m.account_id },
                    |m: &mut AccountWithCashflows| { &mut m.account_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &AccountWithCashflows| { &m.currency },
                    |m: &mut AccountWithCashflows| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "balance_ccy",
                    |m: &AccountWithCashflows| { &m.balance_ccy },
                    |m: &mut AccountWithCashflows| { &mut m.balance_ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "balance_hcy",
                    |m: &AccountWithCashflows| { &m.balance_hcy },
                    |m: &mut AccountWithCashflows| { &mut m.balance_hcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rate",
                    |m: &AccountWithCashflows| { &m.int_rate },
                    |m: &mut AccountWithCashflows| { &mut m.int_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_ccy",
                    |m: &AccountWithCashflows| { &m.int_amt_ccy },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt_hcy",
                    |m: &AccountWithCashflows| { &m.int_amt_hcy },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt_hcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ftp_method",
                    |m: &AccountWithCashflows| { &m.ftp_method },
                    |m: &mut AccountWithCashflows| { &mut m.ftp_method },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "base_rate_curve_id",
                    |m: &AccountWithCashflows| { &m.base_rate_curve_id },
                    |m: &mut AccountWithCashflows| { &mut m.base_rate_curve_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rate_flag",
                    |m: &AccountWithCashflows| { &m.rate_flag },
                    |m: &mut AccountWithCashflows| { &mut m.rate_flag },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "adj_code_1",
                    |m: &AccountWithCashflows| { &m.adj_code_1 },
                    |m: &mut AccountWithCashflows| { &mut m.adj_code_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "adj_code_2",
                    |m: &AccountWithCashflows| { &m.adj_code_2 },
                    |m: &mut AccountWithCashflows| { &mut m.adj_code_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "adj_code_3",
                    |m: &AccountWithCashflows| { &m.adj_code_3 },
                    |m: &mut AccountWithCashflows| { &mut m.adj_code_3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "adj_code_4",
                    |m: &AccountWithCashflows| { &m.adj_code_4 },
                    |m: &mut AccountWithCashflows| { &mut m.adj_code_4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "adj_code_5",
                    |m: &AccountWithCashflows| { &m.adj_code_5 },
                    |m: &mut AccountWithCashflows| { &mut m.adj_code_5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "adj_code_6",
                    |m: &AccountWithCashflows| { &m.adj_code_6 },
                    |m: &mut AccountWithCashflows| { &mut m.adj_code_6 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "val_dt",
                    |m: &AccountWithCashflows| { &m.val_dt },
                    |m: &mut AccountWithCashflows| { &mut m.val_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "open_dt",
                    |m: &AccountWithCashflows| { &m.open_dt },
                    |m: &mut AccountWithCashflows| { &mut m.open_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "mat_dt",
                    |m: &AccountWithCashflows| { &m.mat_dt },
                    |m: &mut AccountWithCashflows| { &mut m.mat_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "lst_repricing_dt",
                    |m: &AccountWithCashflows| { &m.lst_repricing_dt },
                    |m: &mut AccountWithCashflows| { &mut m.lst_repricing_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rep_freq",
                    |m: &AccountWithCashflows| { &m.rep_freq },
                    |m: &mut AccountWithCashflows| { &mut m.rep_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "cust_agg_bal",
                    |m: &AccountWithCashflows| { &m.cust_agg_bal },
                    |m: &mut AccountWithCashflows| { &mut m.cust_agg_bal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "day_count_basis",
                    |m: &AccountWithCashflows| { &m.day_count_basis },
                    |m: &mut AccountWithCashflows| { &mut m.day_count_basis },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "base_rate",
                    |m: &AccountWithCashflows| { &m.base_rate },
                    |m: &mut AccountWithCashflows| { &mut m.base_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj_rate_1",
                    |m: &AccountWithCashflows| { &m.adj_rate_1 },
                    |m: &mut AccountWithCashflows| { &mut m.adj_rate_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj_rate_2",
                    |m: &AccountWithCashflows| { &m.adj_rate_2 },
                    |m: &mut AccountWithCashflows| { &mut m.adj_rate_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj_rate_3",
                    |m: &AccountWithCashflows| { &m.adj_rate_3 },
                    |m: &mut AccountWithCashflows| { &mut m.adj_rate_3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj_rate_4",
                    |m: &AccountWithCashflows| { &m.adj_rate_4 },
                    |m: &mut AccountWithCashflows| { &mut m.adj_rate_4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj_rate_5",
                    |m: &AccountWithCashflows| { &m.adj_rate_5 },
                    |m: &mut AccountWithCashflows| { &mut m.adj_rate_5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj_rate_6",
                    |m: &AccountWithCashflows| { &m.adj_rate_6 },
                    |m: &mut AccountWithCashflows| { &mut m.adj_rate_6 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ftp_rate",
                    |m: &AccountWithCashflows| { &m.ftp_rate },
                    |m: &mut AccountWithCashflows| { &mut m.ftp_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "lock_spread",
                    |m: &AccountWithCashflows| { &m.lock_spread },
                    |m: &mut AccountWithCashflows| { &mut m.lock_spread },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ftp_amt_ccy",
                    |m: &AccountWithCashflows| { &m.ftp_amt_ccy },
                    |m: &mut AccountWithCashflows| { &mut m.ftp_amt_ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ftp_amt_hcy",
                    |m: &AccountWithCashflows| { &m.ftp_amt_hcy },
                    |m: &mut AccountWithCashflows| { &mut m.ftp_amt_hcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "a_or_l",
                    |m: &AccountWithCashflows| { &m.a_or_l },
                    |m: &mut AccountWithCashflows| { &mut m.a_or_l },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dim1",
                    |m: &AccountWithCashflows| { &m.dim1 },
                    |m: &mut AccountWithCashflows| { &mut m.dim1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dim2",
                    |m: &AccountWithCashflows| { &m.dim2 },
                    |m: &mut AccountWithCashflows| { &mut m.dim2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dim3",
                    |m: &AccountWithCashflows| { &m.dim3 },
                    |m: &mut AccountWithCashflows| { &mut m.dim3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dim4",
                    |m: &AccountWithCashflows| { &m.dim4 },
                    |m: &mut AccountWithCashflows| { &mut m.dim4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "customer_id",
                    |m: &AccountWithCashflows| { &m.customer_id },
                    |m: &mut AccountWithCashflows| { &mut m.customer_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "rl1",
                    |m: &AccountWithCashflows| { &m.rl1 },
                    |m: &mut AccountWithCashflows| { &mut m.rl1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "rl2",
                    |m: &AccountWithCashflows| { &m.rl2 },
                    |m: &mut AccountWithCashflows| { &mut m.rl2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "rl3",
                    |m: &AccountWithCashflows| { &m.rl3 },
                    |m: &mut AccountWithCashflows| { &mut m.rl3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "bc_as_on_rule",
                    |m: &AccountWithCashflows| { &m.bc_as_on_rule },
                    |m: &mut AccountWithCashflows| { &mut m.bc_as_on_rule },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tenor_start_date_rule",
                    |m: &AccountWithCashflows| { &m.tenor_start_date_rule },
                    |m: &mut AccountWithCashflows| { &mut m.tenor_start_date_rule },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tenor_end_date_rule",
                    |m: &AccountWithCashflows| { &m.tenor_end_date_rule },
                    |m: &mut AccountWithCashflows| { &mut m.tenor_end_date_rule },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "bc_as_on_applied",
                    |m: &AccountWithCashflows| { &m.bc_as_on_applied },
                    |m: &mut AccountWithCashflows| { &mut m.bc_as_on_applied },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tenor_start_date_applied",
                    |m: &AccountWithCashflows| { &m.tenor_start_date_applied },
                    |m: &mut AccountWithCashflows| { &mut m.tenor_start_date_applied },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tenor_end_date_applied",
                    |m: &AccountWithCashflows| { &m.tenor_end_date_applied },
                    |m: &mut AccountWithCashflows| { &mut m.tenor_end_date_applied },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gl_code",
                    |m: &AccountWithCashflows| { &m.gl_code },
                    |m: &mut AccountWithCashflows| { &mut m.gl_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "prod_code",
                    |m: &AccountWithCashflows| { &m.prod_code },
                    |m: &mut AccountWithCashflows| { &mut m.prod_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "div_code",
                    |m: &AccountWithCashflows| { &m.div_code },
                    |m: &mut AccountWithCashflows| { &mut m.div_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "mis_code_1",
                    |m: &AccountWithCashflows| { &m.mis_code_1 },
                    |m: &mut AccountWithCashflows| { &mut m.mis_code_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "mis_code_2",
                    |m: &AccountWithCashflows| { &m.mis_code_2 },
                    |m: &mut AccountWithCashflows| { &mut m.mis_code_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "mis_code_3",
                    |m: &AccountWithCashflows| { &m.mis_code_3 },
                    |m: &mut AccountWithCashflows| { &mut m.mis_code_3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "eop_balance_ccy",
                    |m: &AccountWithCashflows| { &m.eop_balance_ccy },
                    |m: &mut AccountWithCashflows| { &mut m.eop_balance_ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "eop_balance_hcy",
                    |m: &AccountWithCashflows| { &m.eop_balance_hcy },
                    |m: &mut AccountWithCashflows| { &mut m.eop_balance_hcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_as_on_month();
        self.clear_account_id();
        self.clear_currency();
        self.clear_balance_ccy();
        self.clear_balance_hcy();
        self.clear_int_rate();
        self.clear_int_amt_ccy();
        self.clear_int_amt_hcy();
        self.clear_ftp_method();
        self.clear_base_rate_curve_id();
        self.clear_rate_flag();
        self.clear_adj_code_1();
        self.clear_adj_code_2();
        self.clear_adj_code_3();
        self.clear_adj_code_4();
        self.clear_adj_code_5();
        self.clear_adj_code_6();
        self.clear_val_dt();
        self.clear_open_dt();
        self.clear_mat_dt();
        self.clear_lst_repricing_dt();
        self.clear_rep_freq();
        self.clear_cust_agg_bal();
        self.clear_day_count_basis();
        self.clear_base_rate();
        self.clear_adj_rate_1();
        self.clear_adj_rate_2();
        self.clear_adj_rate_3();
        self.clear_adj_rate_4();
        self.clear_adj_rate_5();
        self.clear_adj_rate_6();
        self.clear_ftp_rate();
        self.clear_lock_spread();
        self.clear_ftp_amt_ccy();
        self.clear_ftp_amt_hcy();
        self.clear_a_or_l();
        self.clear_dim1();
        self.clear_dim2();
        self.clear_dim3();
        self.clear_dim4();
        self.clear_customer_id();
        self.clear_rl1();
        self.clear_rl2();
        self.clear_rl3();
        self.clear_bc_as_on_rule();
        self.clear_tenor_start_date_rule();
        self.clear_tenor_end_date_rule();
        self.clear_bc_as_on_applied();
        self.clear_tenor_start_date_applied();
        self.clear_tenor_end_date_applied();
        self.clear_gl_code();
        self.clear_prod_code();
        self.clear_div_code();
        self.clear_mis_code_1();
        self.clear_mis_code_2();
        self.clear_mis_code_3();
        self.clear_eop_balance_ccy();
        self.clear_eop_balance_hcy();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17proto/oab_stamper.proto\"\xe3\x04\n\x08Cashflow\x12'\n\x0finterest\
    _amount\x18\x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amou\
    nt\x18\x02\x20\x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\
    \x20\x01(\x03R\x04date\x12\x1b\n\tbase_rate\x18\x04\x20\x01(\x01R\x08bas\
    eRate\x12(\n\x10base_rate_amount\x18\x05\x20\x01(\x01R\x0ebaseRateAmount\
    \x12\x1b\n\tadj1_rate\x18\x06\x20\x01(\x01R\x08adj1Rate\x12(\n\x10adj1_r\
    ate_amount\x18\x07\x20\x01(\x01R\x0eadj1RateAmount\x12\x1b\n\tadj2_rate\
    \x18\x08\x20\x01(\x01R\x08adj2Rate\x12(\n\x10adj2_rate_amount\x18\t\x20\
    \x01(\x01R\x0eadj2RateAmount\x12\x1b\n\tadj3_rate\x18\n\x20\x01(\x01R\
    \x08adj3Rate\x12(\n\x10adj3_rate_amount\x18\x0b\x20\x01(\x01R\x0eadj3Rat\
    eAmount\x12\x1b\n\tadj4_rate\x18\x0c\x20\x01(\x01R\x08adj4Rate\x12(\n\
    \x10adj4_rate_amount\x18\r\x20\x01(\x01R\x0eadj4RateAmount\x12\x1b\n\tad\
    j5_rate\x18\x0e\x20\x01(\x01R\x08adj5Rate\x12(\n\x10adj5_rate_amount\x18\
    \x0f\x20\x01(\x01R\x0eadj5RateAmount\x12\x1b\n\tadj6_rate\x18\x10\x20\
    \x01(\x01R\x08adj6Rate\x12(\n\x10adj6_rate_amount\x18\x11\x20\x01(\x01R\
    \x0eadj6RateAmount\"\xcb\x0e\n\x14AccountWithCashflows\x12\x1e\n\x0bas_o\
    n_month\x18\x01\x20\x01(\x03R\tasOnMonth\x12\x1d\n\naccount_id\x18\x02\
    \x20\x01(\tR\taccountId\x12\x1a\n\x08currency\x18\x03\x20\x01(\tR\x08cur\
    rency\x12\x1f\n\x0bbalance_ccy\x18\x04\x20\x01(\x01R\nbalanceCcy\x12\x1f\
    \n\x0bbalance_hcy\x18\x05\x20\x01(\x01R\nbalanceHcy\x12\x19\n\x08int_rat\
    e\x18\x06\x20\x01(\x01R\x07intRate\x12\x1e\n\x0bint_amt_ccy\x18\x07\x20\
    \x01(\x01R\tintAmtCcy\x12\x1e\n\x0bint_amt_hcy\x18\x08\x20\x01(\x01R\tin\
    tAmtHcy\x12\x1d\n\nftp_method\x18\t\x20\x01(\tR\tftpMethod\x12+\n\x12bas\
    e_rate_curve_id\x18\n\x20\x01(\tR\x0fbaseRateCurveId\x12\x1b\n\trate_fla\
    g\x18\x0b\x20\x01(\tR\x08rateFlag\x12\x1c\n\nadj_code_1\x18\x0c\x20\x01(\
    \tR\x08adjCode1\x12\x1c\n\nadj_code_2\x18\r\x20\x01(\tR\x08adjCode2\x12\
    \x1c\n\nadj_code_3\x18\x0e\x20\x01(\tR\x08adjCode3\x12\x1c\n\nadj_code_4\
    \x18\x0f\x20\x01(\tR\x08adjCode4\x12\x1c\n\nadj_code_5\x18\x10\x20\x01(\
    \tR\x08adjCode5\x12\x1c\n\nadj_code_6\x18\x11\x20\x01(\tR\x08adjCode6\
    \x12\x15\n\x06val_dt\x18\x12\x20\x01(\x03R\x05valDt\x12\x17\n\x07open_dt\
    \x18\x13\x20\x01(\x03R\x06openDt\x12\x15\n\x06mat_dt\x18\x14\x20\x01(\
    \x03R\x05matDt\x12(\n\x10lst_repricing_dt\x18\x15\x20\x01(\x03R\x0elstRe\
    pricingDt\x12\x19\n\x08rep_freq\x18\x16\x20\x01(\tR\x07repFreq\x12\x20\n\
    \x0ccust_agg_bal\x18\x17\x20\x01(\x01R\ncustAggBal\x12&\n\x0fday_count_b\
    asis\x18\x18\x20\x01(\tR\rdayCountBasis\x12\x1b\n\tbase_rate\x18\x19\x20\
    \x01(\x01R\x08baseRate\x12\x1c\n\nadj_rate_1\x18\x1a\x20\x01(\x01R\x08ad\
    jRate1\x12\x1c\n\nadj_rate_2\x18\x1b\x20\x01(\x01R\x08adjRate2\x12\x1c\n\
    \nadj_rate_3\x18\x1c\x20\x01(\x01R\x08adjRate3\x12\x1c\n\nadj_rate_4\x18\
    \x1d\x20\x01(\x01R\x08adjRate4\x12\x1c\n\nadj_rate_5\x18\x1e\x20\x01(\
    \x01R\x08adjRate5\x12\x1c\n\nadj_rate_6\x18\x1f\x20\x01(\x01R\x08adjRate\
    6\x12\x19\n\x08ftp_rate\x18\x20\x20\x01(\x01R\x07ftpRate\x12\x1f\n\x0blo\
    ck_spread\x18!\x20\x01(\x01R\nlockSpread\x12\x1e\n\x0bftp_amt_ccy\x18\"\
    \x20\x01(\x01R\tftpAmtCcy\x12\x1e\n\x0bftp_amt_hcy\x18#\x20\x01(\x01R\tf\
    tpAmtHcy\x12\x14\n\x06a_or_l\x18$\x20\x01(\tR\x04aOrL\x12\x12\n\x04dim1\
    \x18%\x20\x01(\tR\x04dim1\x12\x12\n\x04dim2\x18&\x20\x01(\tR\x04dim2\x12\
    \x12\n\x04dim3\x18'\x20\x01(\tR\x04dim3\x12\x12\n\x04dim4\x18(\x20\x01(\
    \tR\x04dim4\x12\x1f\n\x0bcustomer_id\x18)\x20\x01(\tR\ncustomerId\x12\
    \x10\n\x03rl1\x18*\x20\x01(\x05R\x03rl1\x12\x10\n\x03rl2\x18+\x20\x01(\
    \x05R\x03rl2\x12\x10\n\x03rl3\x18,\x20\x01(\x05R\x03rl3\x12!\n\rbc_as_on\
    _rule\x18-\x20\x01(\x03R\nbcAsOnRule\x121\n\x15tenor_start_date_rule\x18\
    .\x20\x01(\x03R\x12tenorStartDateRule\x12-\n\x13tenor_end_date_rule\x18/\
    \x20\x01(\x03R\x10tenorEndDateRule\x12'\n\x10bc_as_on_applied\x180\x20\
    \x01(\x03R\rbcAsOnApplied\x127\n\x18tenor_start_date_applied\x181\x20\
    \x01(\x03R\x15tenorStartDateApplied\x123\n\x16tenor_end_date_applied\x18\
    2\x20\x01(\x03R\x13tenorEndDateApplied\x12\x17\n\x07gl_code\x183\x20\x01\
    (\tR\x06glCode\x12\x1b\n\tprod_code\x184\x20\x01(\tR\x08prodCode\x12\x19\
    \n\x08div_code\x185\x20\x01(\tR\x07divCode\x12\x1c\n\nmis_code_1\x186\
    \x20\x01(\tR\x08misCode1\x12\x1c\n\nmis_code_2\x187\x20\x01(\tR\x08misCo\
    de2\x12\x1c\n\nmis_code_3\x188\x20\x01(\tR\x08misCode3\x12&\n\x0feop_bal\
    ance_ccy\x189\x20\x01(\x01R\reopBalanceCcy\x12&\n\x0feop_balance_hcy\x18\
    :\x20\x01(\x01R\reopBalanceHcy\x12'\n\tcashflows\x18;\x20\x03(\x0b2\t.Ca\
    shflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
