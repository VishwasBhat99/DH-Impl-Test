// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double prin_amt = 2;

    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_int_amt();
        self.clear_prin_amt();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub entity: ::std::string::String,
    pub trade_id: ::std::string::String,
    pub contract_id: i64,
    pub struct_id_link_id: i64,
    pub comp_typology: ::std::string::String,
    pub pkg_typology: ::std::string::String,
    pub cntrct_typology: ::std::string::String,
    pub desk: ::std::string::String,
    pub book: ::std::string::String,
    pub folder: ::std::string::String,
    pub trading_banking: ::std::string::String,
    pub cntr_prty_grp_cd: ::std::string::String,
    pub cntr_prty_chld_cd: ::std::string::String,
    pub cntr_prty_name: ::std::string::String,
    pub intrnl_extrnl: ::std::string::String,
    pub trade_dt: i64,
    pub st_dt: i64,
    pub ed_dt: i64,
    pub ccy_pair: ::std::string::String,
    pub rec_leg_ccy: ::std::string::String,
    pub org_notional_rec_leg: f64,
    pub org_notional_rec_leg_inr: f64,
    pub ost_notional_rec_leg: f64,
    pub ost_notional_rec_leg_inr: f64,
    pub pay_leg_ccy: ::std::string::String,
    pub org_notional_pay_leg: f64,
    pub org_notional_pay_leg_inr: f64,
    pub ost_notional_pay_leg: f64,
    pub ost_notional_pay_leg_inr: f64,
    pub deal_side: ::std::string::String,
    pub pay_leg_idx: ::std::string::String,
    pub pay_int_rt: f64,
    pub spread_pay_leg: f64,
    pub rec_leg_idx: ::std::string::String,
    pub rec_int_rt: f64,
    pub spread_rec_leg: f64,
    pub rec_side_acrl_inr: f64,
    pub rec_side_mtm_inr: f64,
    pub future_cash_proceeds_ccy: ::std::string::String,
    pub future_cash_proceeds_inr: f64,
    pub mrkt_val_financed: f64,
    pub net_mtm_usd: f64,
    pub net_mtm_inr: f64,
    pub pay_side_pv01_inr: f64,
    pub rec_side_pv01_inr: f64,
    pub net_pv01_inr: f64,
    pub pay_side_modified_duration: f64,
    pub receive_side_modified_duration: f64,
    pub modified_duration_deal: f64,
    pub pay_leg_exchange_rt: f64,
    pub rec_leg_exchange_rt: f64,
    pub pay_reset_dt: i64,
    pub rec_reset_dt: i64,
    pub pay_payment_dt: i64,
    pub rec_payment_dt: i64,
    pub index_rec_leg: ::std::string::String,
    pub index_pay_leg: ::std::string::String,
    pub day_count_cnvntn_rec_leg: ::std::string::String,
    pub day_count_cnvntn_pay_leg: ::std::string::String,
    pub pay_reset_freq: ::std::string::String,
    pub rec_reset_freq: ::std::string::String,
    pub pay_payment_freq: ::std::string::String,
    pub rec_payment_freq: ::std::string::String,
    pub deal_status: ::std::string::String,
    pub flowtype: ::std::string::String,
    pub flowtype1: ::std::string::String,
    pub flowtype2: ::std::string::String,
    pub flowtype3: ::std::string::String,
    pub flowtype4: ::std::string::String,
    pub flowamount: f64,
    pub cf_dt: i64,
    pub flow_ccy: ::std::string::String,
    pub hkd_rt: f64,
    pub hkd_amt: f64,
    pub m_h_rep_dt2: i64,
    pub inr_amt: f64,
    pub inr_rt: f64,
    pub int_rt: f64,
    pub tot_int_amt: f64,
    pub tot_prin_amt: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string entity = 1;

    pub fn clear_entity(&mut self) {
        self.entity.clear();
    }

    // Param is passed by value, moved
    pub fn set_entity(&mut self, v: ::std::string::String) {
        self.entity = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entity(&mut self) -> &mut ::std::string::String {
        &mut self.entity
    }

    // Take field
    pub fn take_entity(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.entity, ::std::string::String::new())
    }

    pub fn get_entity(&self) -> &str {
        &self.entity
    }

    // string trade_id = 2;

    pub fn clear_trade_id(&mut self) {
        self.trade_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_trade_id(&mut self, v: ::std::string::String) {
        self.trade_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trade_id(&mut self) -> &mut ::std::string::String {
        &mut self.trade_id
    }

    // Take field
    pub fn take_trade_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trade_id, ::std::string::String::new())
    }

    pub fn get_trade_id(&self) -> &str {
        &self.trade_id
    }

    // int64 contract_id = 3;

    pub fn clear_contract_id(&mut self) {
        self.contract_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_contract_id(&mut self, v: i64) {
        self.contract_id = v;
    }

    pub fn get_contract_id(&self) -> i64 {
        self.contract_id
    }

    // int64 struct_id_link_id = 4;

    pub fn clear_struct_id_link_id(&mut self) {
        self.struct_id_link_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_struct_id_link_id(&mut self, v: i64) {
        self.struct_id_link_id = v;
    }

    pub fn get_struct_id_link_id(&self) -> i64 {
        self.struct_id_link_id
    }

    // string comp_typology = 5;

    pub fn clear_comp_typology(&mut self) {
        self.comp_typology.clear();
    }

    // Param is passed by value, moved
    pub fn set_comp_typology(&mut self, v: ::std::string::String) {
        self.comp_typology = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_comp_typology(&mut self) -> &mut ::std::string::String {
        &mut self.comp_typology
    }

    // Take field
    pub fn take_comp_typology(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.comp_typology, ::std::string::String::new())
    }

    pub fn get_comp_typology(&self) -> &str {
        &self.comp_typology
    }

    // string pkg_typology = 6;

    pub fn clear_pkg_typology(&mut self) {
        self.pkg_typology.clear();
    }

    // Param is passed by value, moved
    pub fn set_pkg_typology(&mut self, v: ::std::string::String) {
        self.pkg_typology = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pkg_typology(&mut self) -> &mut ::std::string::String {
        &mut self.pkg_typology
    }

    // Take field
    pub fn take_pkg_typology(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pkg_typology, ::std::string::String::new())
    }

    pub fn get_pkg_typology(&self) -> &str {
        &self.pkg_typology
    }

    // string cntrct_typology = 7;

    pub fn clear_cntrct_typology(&mut self) {
        self.cntrct_typology.clear();
    }

    // Param is passed by value, moved
    pub fn set_cntrct_typology(&mut self, v: ::std::string::String) {
        self.cntrct_typology = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cntrct_typology(&mut self) -> &mut ::std::string::String {
        &mut self.cntrct_typology
    }

    // Take field
    pub fn take_cntrct_typology(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cntrct_typology, ::std::string::String::new())
    }

    pub fn get_cntrct_typology(&self) -> &str {
        &self.cntrct_typology
    }

    // string desk = 8;

    pub fn clear_desk(&mut self) {
        self.desk.clear();
    }

    // Param is passed by value, moved
    pub fn set_desk(&mut self, v: ::std::string::String) {
        self.desk = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_desk(&mut self) -> &mut ::std::string::String {
        &mut self.desk
    }

    // Take field
    pub fn take_desk(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.desk, ::std::string::String::new())
    }

    pub fn get_desk(&self) -> &str {
        &self.desk
    }

    // string book = 9;

    pub fn clear_book(&mut self) {
        self.book.clear();
    }

    // Param is passed by value, moved
    pub fn set_book(&mut self, v: ::std::string::String) {
        self.book = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_book(&mut self) -> &mut ::std::string::String {
        &mut self.book
    }

    // Take field
    pub fn take_book(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.book, ::std::string::String::new())
    }

    pub fn get_book(&self) -> &str {
        &self.book
    }

    // string folder = 10;

    pub fn clear_folder(&mut self) {
        self.folder.clear();
    }

    // Param is passed by value, moved
    pub fn set_folder(&mut self, v: ::std::string::String) {
        self.folder = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_folder(&mut self) -> &mut ::std::string::String {
        &mut self.folder
    }

    // Take field
    pub fn take_folder(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.folder, ::std::string::String::new())
    }

    pub fn get_folder(&self) -> &str {
        &self.folder
    }

    // string trading_banking = 11;

    pub fn clear_trading_banking(&mut self) {
        self.trading_banking.clear();
    }

    // Param is passed by value, moved
    pub fn set_trading_banking(&mut self, v: ::std::string::String) {
        self.trading_banking = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trading_banking(&mut self) -> &mut ::std::string::String {
        &mut self.trading_banking
    }

    // Take field
    pub fn take_trading_banking(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trading_banking, ::std::string::String::new())
    }

    pub fn get_trading_banking(&self) -> &str {
        &self.trading_banking
    }

    // string cntr_prty_grp_cd = 12;

    pub fn clear_cntr_prty_grp_cd(&mut self) {
        self.cntr_prty_grp_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_cntr_prty_grp_cd(&mut self, v: ::std::string::String) {
        self.cntr_prty_grp_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cntr_prty_grp_cd(&mut self) -> &mut ::std::string::String {
        &mut self.cntr_prty_grp_cd
    }

    // Take field
    pub fn take_cntr_prty_grp_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cntr_prty_grp_cd, ::std::string::String::new())
    }

    pub fn get_cntr_prty_grp_cd(&self) -> &str {
        &self.cntr_prty_grp_cd
    }

    // string cntr_prty_chld_cd = 13;

    pub fn clear_cntr_prty_chld_cd(&mut self) {
        self.cntr_prty_chld_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_cntr_prty_chld_cd(&mut self, v: ::std::string::String) {
        self.cntr_prty_chld_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cntr_prty_chld_cd(&mut self) -> &mut ::std::string::String {
        &mut self.cntr_prty_chld_cd
    }

    // Take field
    pub fn take_cntr_prty_chld_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cntr_prty_chld_cd, ::std::string::String::new())
    }

    pub fn get_cntr_prty_chld_cd(&self) -> &str {
        &self.cntr_prty_chld_cd
    }

    // string cntr_prty_name = 14;

    pub fn clear_cntr_prty_name(&mut self) {
        self.cntr_prty_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cntr_prty_name(&mut self, v: ::std::string::String) {
        self.cntr_prty_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cntr_prty_name(&mut self) -> &mut ::std::string::String {
        &mut self.cntr_prty_name
    }

    // Take field
    pub fn take_cntr_prty_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cntr_prty_name, ::std::string::String::new())
    }

    pub fn get_cntr_prty_name(&self) -> &str {
        &self.cntr_prty_name
    }

    // string intrnl_extrnl = 15;

    pub fn clear_intrnl_extrnl(&mut self) {
        self.intrnl_extrnl.clear();
    }

    // Param is passed by value, moved
    pub fn set_intrnl_extrnl(&mut self, v: ::std::string::String) {
        self.intrnl_extrnl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_intrnl_extrnl(&mut self) -> &mut ::std::string::String {
        &mut self.intrnl_extrnl
    }

    // Take field
    pub fn take_intrnl_extrnl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.intrnl_extrnl, ::std::string::String::new())
    }

    pub fn get_intrnl_extrnl(&self) -> &str {
        &self.intrnl_extrnl
    }

    // int64 trade_dt = 16;

    pub fn clear_trade_dt(&mut self) {
        self.trade_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_trade_dt(&mut self, v: i64) {
        self.trade_dt = v;
    }

    pub fn get_trade_dt(&self) -> i64 {
        self.trade_dt
    }

    // int64 st_dt = 17;

    pub fn clear_st_dt(&mut self) {
        self.st_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_st_dt(&mut self, v: i64) {
        self.st_dt = v;
    }

    pub fn get_st_dt(&self) -> i64 {
        self.st_dt
    }

    // int64 ed_dt = 18;

    pub fn clear_ed_dt(&mut self) {
        self.ed_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_ed_dt(&mut self, v: i64) {
        self.ed_dt = v;
    }

    pub fn get_ed_dt(&self) -> i64 {
        self.ed_dt
    }

    // string ccy_pair = 19;

    pub fn clear_ccy_pair(&mut self) {
        self.ccy_pair.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy_pair(&mut self, v: ::std::string::String) {
        self.ccy_pair = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy_pair(&mut self) -> &mut ::std::string::String {
        &mut self.ccy_pair
    }

    // Take field
    pub fn take_ccy_pair(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy_pair, ::std::string::String::new())
    }

    pub fn get_ccy_pair(&self) -> &str {
        &self.ccy_pair
    }

    // string rec_leg_ccy = 20;

    pub fn clear_rec_leg_ccy(&mut self) {
        self.rec_leg_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_rec_leg_ccy(&mut self, v: ::std::string::String) {
        self.rec_leg_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rec_leg_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.rec_leg_ccy
    }

    // Take field
    pub fn take_rec_leg_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rec_leg_ccy, ::std::string::String::new())
    }

    pub fn get_rec_leg_ccy(&self) -> &str {
        &self.rec_leg_ccy
    }

    // double org_notional_rec_leg = 21;

    pub fn clear_org_notional_rec_leg(&mut self) {
        self.org_notional_rec_leg = 0.;
    }

    // Param is passed by value, moved
    pub fn set_org_notional_rec_leg(&mut self, v: f64) {
        self.org_notional_rec_leg = v;
    }

    pub fn get_org_notional_rec_leg(&self) -> f64 {
        self.org_notional_rec_leg
    }

    // double org_notional_rec_leg_inr = 22;

    pub fn clear_org_notional_rec_leg_inr(&mut self) {
        self.org_notional_rec_leg_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_org_notional_rec_leg_inr(&mut self, v: f64) {
        self.org_notional_rec_leg_inr = v;
    }

    pub fn get_org_notional_rec_leg_inr(&self) -> f64 {
        self.org_notional_rec_leg_inr
    }

    // double ost_notional_rec_leg = 23;

    pub fn clear_ost_notional_rec_leg(&mut self) {
        self.ost_notional_rec_leg = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ost_notional_rec_leg(&mut self, v: f64) {
        self.ost_notional_rec_leg = v;
    }

    pub fn get_ost_notional_rec_leg(&self) -> f64 {
        self.ost_notional_rec_leg
    }

    // double ost_notional_rec_leg_inr = 24;

    pub fn clear_ost_notional_rec_leg_inr(&mut self) {
        self.ost_notional_rec_leg_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ost_notional_rec_leg_inr(&mut self, v: f64) {
        self.ost_notional_rec_leg_inr = v;
    }

    pub fn get_ost_notional_rec_leg_inr(&self) -> f64 {
        self.ost_notional_rec_leg_inr
    }

    // string pay_leg_ccy = 25;

    pub fn clear_pay_leg_ccy(&mut self) {
        self.pay_leg_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_pay_leg_ccy(&mut self, v: ::std::string::String) {
        self.pay_leg_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pay_leg_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.pay_leg_ccy
    }

    // Take field
    pub fn take_pay_leg_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pay_leg_ccy, ::std::string::String::new())
    }

    pub fn get_pay_leg_ccy(&self) -> &str {
        &self.pay_leg_ccy
    }

    // double org_notional_pay_leg = 26;

    pub fn clear_org_notional_pay_leg(&mut self) {
        self.org_notional_pay_leg = 0.;
    }

    // Param is passed by value, moved
    pub fn set_org_notional_pay_leg(&mut self, v: f64) {
        self.org_notional_pay_leg = v;
    }

    pub fn get_org_notional_pay_leg(&self) -> f64 {
        self.org_notional_pay_leg
    }

    // double org_notional_pay_leg_inr = 27;

    pub fn clear_org_notional_pay_leg_inr(&mut self) {
        self.org_notional_pay_leg_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_org_notional_pay_leg_inr(&mut self, v: f64) {
        self.org_notional_pay_leg_inr = v;
    }

    pub fn get_org_notional_pay_leg_inr(&self) -> f64 {
        self.org_notional_pay_leg_inr
    }

    // double ost_notional_pay_leg = 28;

    pub fn clear_ost_notional_pay_leg(&mut self) {
        self.ost_notional_pay_leg = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ost_notional_pay_leg(&mut self, v: f64) {
        self.ost_notional_pay_leg = v;
    }

    pub fn get_ost_notional_pay_leg(&self) -> f64 {
        self.ost_notional_pay_leg
    }

    // double ost_notional_pay_leg_inr = 29;

    pub fn clear_ost_notional_pay_leg_inr(&mut self) {
        self.ost_notional_pay_leg_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ost_notional_pay_leg_inr(&mut self, v: f64) {
        self.ost_notional_pay_leg_inr = v;
    }

    pub fn get_ost_notional_pay_leg_inr(&self) -> f64 {
        self.ost_notional_pay_leg_inr
    }

    // string deal_side = 30;

    pub fn clear_deal_side(&mut self) {
        self.deal_side.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_side(&mut self, v: ::std::string::String) {
        self.deal_side = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_side(&mut self) -> &mut ::std::string::String {
        &mut self.deal_side
    }

    // Take field
    pub fn take_deal_side(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_side, ::std::string::String::new())
    }

    pub fn get_deal_side(&self) -> &str {
        &self.deal_side
    }

    // string pay_leg_idx = 31;

    pub fn clear_pay_leg_idx(&mut self) {
        self.pay_leg_idx.clear();
    }

    // Param is passed by value, moved
    pub fn set_pay_leg_idx(&mut self, v: ::std::string::String) {
        self.pay_leg_idx = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pay_leg_idx(&mut self) -> &mut ::std::string::String {
        &mut self.pay_leg_idx
    }

    // Take field
    pub fn take_pay_leg_idx(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pay_leg_idx, ::std::string::String::new())
    }

    pub fn get_pay_leg_idx(&self) -> &str {
        &self.pay_leg_idx
    }

    // double pay_int_rt = 32;

    pub fn clear_pay_int_rt(&mut self) {
        self.pay_int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pay_int_rt(&mut self, v: f64) {
        self.pay_int_rt = v;
    }

    pub fn get_pay_int_rt(&self) -> f64 {
        self.pay_int_rt
    }

    // double spread_pay_leg = 33;

    pub fn clear_spread_pay_leg(&mut self) {
        self.spread_pay_leg = 0.;
    }

    // Param is passed by value, moved
    pub fn set_spread_pay_leg(&mut self, v: f64) {
        self.spread_pay_leg = v;
    }

    pub fn get_spread_pay_leg(&self) -> f64 {
        self.spread_pay_leg
    }

    // string rec_leg_idx = 34;

    pub fn clear_rec_leg_idx(&mut self) {
        self.rec_leg_idx.clear();
    }

    // Param is passed by value, moved
    pub fn set_rec_leg_idx(&mut self, v: ::std::string::String) {
        self.rec_leg_idx = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rec_leg_idx(&mut self) -> &mut ::std::string::String {
        &mut self.rec_leg_idx
    }

    // Take field
    pub fn take_rec_leg_idx(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rec_leg_idx, ::std::string::String::new())
    }

    pub fn get_rec_leg_idx(&self) -> &str {
        &self.rec_leg_idx
    }

    // double rec_int_rt = 35;

    pub fn clear_rec_int_rt(&mut self) {
        self.rec_int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rec_int_rt(&mut self, v: f64) {
        self.rec_int_rt = v;
    }

    pub fn get_rec_int_rt(&self) -> f64 {
        self.rec_int_rt
    }

    // double spread_rec_leg = 36;

    pub fn clear_spread_rec_leg(&mut self) {
        self.spread_rec_leg = 0.;
    }

    // Param is passed by value, moved
    pub fn set_spread_rec_leg(&mut self, v: f64) {
        self.spread_rec_leg = v;
    }

    pub fn get_spread_rec_leg(&self) -> f64 {
        self.spread_rec_leg
    }

    // double rec_side_acrl_inr = 37;

    pub fn clear_rec_side_acrl_inr(&mut self) {
        self.rec_side_acrl_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rec_side_acrl_inr(&mut self, v: f64) {
        self.rec_side_acrl_inr = v;
    }

    pub fn get_rec_side_acrl_inr(&self) -> f64 {
        self.rec_side_acrl_inr
    }

    // double rec_side_mtm_inr = 38;

    pub fn clear_rec_side_mtm_inr(&mut self) {
        self.rec_side_mtm_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rec_side_mtm_inr(&mut self, v: f64) {
        self.rec_side_mtm_inr = v;
    }

    pub fn get_rec_side_mtm_inr(&self) -> f64 {
        self.rec_side_mtm_inr
    }

    // string future_cash_proceeds_ccy = 39;

    pub fn clear_future_cash_proceeds_ccy(&mut self) {
        self.future_cash_proceeds_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_future_cash_proceeds_ccy(&mut self, v: ::std::string::String) {
        self.future_cash_proceeds_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_future_cash_proceeds_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.future_cash_proceeds_ccy
    }

    // Take field
    pub fn take_future_cash_proceeds_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.future_cash_proceeds_ccy, ::std::string::String::new())
    }

    pub fn get_future_cash_proceeds_ccy(&self) -> &str {
        &self.future_cash_proceeds_ccy
    }

    // double future_cash_proceeds_inr = 40;

    pub fn clear_future_cash_proceeds_inr(&mut self) {
        self.future_cash_proceeds_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_future_cash_proceeds_inr(&mut self, v: f64) {
        self.future_cash_proceeds_inr = v;
    }

    pub fn get_future_cash_proceeds_inr(&self) -> f64 {
        self.future_cash_proceeds_inr
    }

    // double mrkt_val_financed = 41;

    pub fn clear_mrkt_val_financed(&mut self) {
        self.mrkt_val_financed = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mrkt_val_financed(&mut self, v: f64) {
        self.mrkt_val_financed = v;
    }

    pub fn get_mrkt_val_financed(&self) -> f64 {
        self.mrkt_val_financed
    }

    // double net_mtm_usd = 42;

    pub fn clear_net_mtm_usd(&mut self) {
        self.net_mtm_usd = 0.;
    }

    // Param is passed by value, moved
    pub fn set_net_mtm_usd(&mut self, v: f64) {
        self.net_mtm_usd = v;
    }

    pub fn get_net_mtm_usd(&self) -> f64 {
        self.net_mtm_usd
    }

    // double net_mtm_inr = 43;

    pub fn clear_net_mtm_inr(&mut self) {
        self.net_mtm_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_net_mtm_inr(&mut self, v: f64) {
        self.net_mtm_inr = v;
    }

    pub fn get_net_mtm_inr(&self) -> f64 {
        self.net_mtm_inr
    }

    // double pay_side_pv01_inr = 44;

    pub fn clear_pay_side_pv01_inr(&mut self) {
        self.pay_side_pv01_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pay_side_pv01_inr(&mut self, v: f64) {
        self.pay_side_pv01_inr = v;
    }

    pub fn get_pay_side_pv01_inr(&self) -> f64 {
        self.pay_side_pv01_inr
    }

    // double rec_side_pv01_inr = 45;

    pub fn clear_rec_side_pv01_inr(&mut self) {
        self.rec_side_pv01_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rec_side_pv01_inr(&mut self, v: f64) {
        self.rec_side_pv01_inr = v;
    }

    pub fn get_rec_side_pv01_inr(&self) -> f64 {
        self.rec_side_pv01_inr
    }

    // double net_pv01_inr = 46;

    pub fn clear_net_pv01_inr(&mut self) {
        self.net_pv01_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_net_pv01_inr(&mut self, v: f64) {
        self.net_pv01_inr = v;
    }

    pub fn get_net_pv01_inr(&self) -> f64 {
        self.net_pv01_inr
    }

    // double pay_side_modified_duration = 47;

    pub fn clear_pay_side_modified_duration(&mut self) {
        self.pay_side_modified_duration = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pay_side_modified_duration(&mut self, v: f64) {
        self.pay_side_modified_duration = v;
    }

    pub fn get_pay_side_modified_duration(&self) -> f64 {
        self.pay_side_modified_duration
    }

    // double receive_side_modified_duration = 48;

    pub fn clear_receive_side_modified_duration(&mut self) {
        self.receive_side_modified_duration = 0.;
    }

    // Param is passed by value, moved
    pub fn set_receive_side_modified_duration(&mut self, v: f64) {
        self.receive_side_modified_duration = v;
    }

    pub fn get_receive_side_modified_duration(&self) -> f64 {
        self.receive_side_modified_duration
    }

    // double modified_duration_deal = 49;

    pub fn clear_modified_duration_deal(&mut self) {
        self.modified_duration_deal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_modified_duration_deal(&mut self, v: f64) {
        self.modified_duration_deal = v;
    }

    pub fn get_modified_duration_deal(&self) -> f64 {
        self.modified_duration_deal
    }

    // double pay_leg_exchange_rt = 50;

    pub fn clear_pay_leg_exchange_rt(&mut self) {
        self.pay_leg_exchange_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pay_leg_exchange_rt(&mut self, v: f64) {
        self.pay_leg_exchange_rt = v;
    }

    pub fn get_pay_leg_exchange_rt(&self) -> f64 {
        self.pay_leg_exchange_rt
    }

    // double rec_leg_exchange_rt = 51;

    pub fn clear_rec_leg_exchange_rt(&mut self) {
        self.rec_leg_exchange_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rec_leg_exchange_rt(&mut self, v: f64) {
        self.rec_leg_exchange_rt = v;
    }

    pub fn get_rec_leg_exchange_rt(&self) -> f64 {
        self.rec_leg_exchange_rt
    }

    // int64 pay_reset_dt = 52;

    pub fn clear_pay_reset_dt(&mut self) {
        self.pay_reset_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_pay_reset_dt(&mut self, v: i64) {
        self.pay_reset_dt = v;
    }

    pub fn get_pay_reset_dt(&self) -> i64 {
        self.pay_reset_dt
    }

    // int64 rec_reset_dt = 53;

    pub fn clear_rec_reset_dt(&mut self) {
        self.rec_reset_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_rec_reset_dt(&mut self, v: i64) {
        self.rec_reset_dt = v;
    }

    pub fn get_rec_reset_dt(&self) -> i64 {
        self.rec_reset_dt
    }

    // int64 pay_payment_dt = 54;

    pub fn clear_pay_payment_dt(&mut self) {
        self.pay_payment_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_pay_payment_dt(&mut self, v: i64) {
        self.pay_payment_dt = v;
    }

    pub fn get_pay_payment_dt(&self) -> i64 {
        self.pay_payment_dt
    }

    // int64 rec_payment_dt = 55;

    pub fn clear_rec_payment_dt(&mut self) {
        self.rec_payment_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_rec_payment_dt(&mut self, v: i64) {
        self.rec_payment_dt = v;
    }

    pub fn get_rec_payment_dt(&self) -> i64 {
        self.rec_payment_dt
    }

    // string index_rec_leg = 56;

    pub fn clear_index_rec_leg(&mut self) {
        self.index_rec_leg.clear();
    }

    // Param is passed by value, moved
    pub fn set_index_rec_leg(&mut self, v: ::std::string::String) {
        self.index_rec_leg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_index_rec_leg(&mut self) -> &mut ::std::string::String {
        &mut self.index_rec_leg
    }

    // Take field
    pub fn take_index_rec_leg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.index_rec_leg, ::std::string::String::new())
    }

    pub fn get_index_rec_leg(&self) -> &str {
        &self.index_rec_leg
    }

    // string index_pay_leg = 57;

    pub fn clear_index_pay_leg(&mut self) {
        self.index_pay_leg.clear();
    }

    // Param is passed by value, moved
    pub fn set_index_pay_leg(&mut self, v: ::std::string::String) {
        self.index_pay_leg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_index_pay_leg(&mut self) -> &mut ::std::string::String {
        &mut self.index_pay_leg
    }

    // Take field
    pub fn take_index_pay_leg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.index_pay_leg, ::std::string::String::new())
    }

    pub fn get_index_pay_leg(&self) -> &str {
        &self.index_pay_leg
    }

    // string day_count_cnvntn_rec_leg = 58;

    pub fn clear_day_count_cnvntn_rec_leg(&mut self) {
        self.day_count_cnvntn_rec_leg.clear();
    }

    // Param is passed by value, moved
    pub fn set_day_count_cnvntn_rec_leg(&mut self, v: ::std::string::String) {
        self.day_count_cnvntn_rec_leg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_day_count_cnvntn_rec_leg(&mut self) -> &mut ::std::string::String {
        &mut self.day_count_cnvntn_rec_leg
    }

    // Take field
    pub fn take_day_count_cnvntn_rec_leg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.day_count_cnvntn_rec_leg, ::std::string::String::new())
    }

    pub fn get_day_count_cnvntn_rec_leg(&self) -> &str {
        &self.day_count_cnvntn_rec_leg
    }

    // string day_count_cnvntn_pay_leg = 59;

    pub fn clear_day_count_cnvntn_pay_leg(&mut self) {
        self.day_count_cnvntn_pay_leg.clear();
    }

    // Param is passed by value, moved
    pub fn set_day_count_cnvntn_pay_leg(&mut self, v: ::std::string::String) {
        self.day_count_cnvntn_pay_leg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_day_count_cnvntn_pay_leg(&mut self) -> &mut ::std::string::String {
        &mut self.day_count_cnvntn_pay_leg
    }

    // Take field
    pub fn take_day_count_cnvntn_pay_leg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.day_count_cnvntn_pay_leg, ::std::string::String::new())
    }

    pub fn get_day_count_cnvntn_pay_leg(&self) -> &str {
        &self.day_count_cnvntn_pay_leg
    }

    // string pay_reset_freq = 60;

    pub fn clear_pay_reset_freq(&mut self) {
        self.pay_reset_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_pay_reset_freq(&mut self, v: ::std::string::String) {
        self.pay_reset_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pay_reset_freq(&mut self) -> &mut ::std::string::String {
        &mut self.pay_reset_freq
    }

    // Take field
    pub fn take_pay_reset_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pay_reset_freq, ::std::string::String::new())
    }

    pub fn get_pay_reset_freq(&self) -> &str {
        &self.pay_reset_freq
    }

    // string rec_reset_freq = 61;

    pub fn clear_rec_reset_freq(&mut self) {
        self.rec_reset_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_rec_reset_freq(&mut self, v: ::std::string::String) {
        self.rec_reset_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rec_reset_freq(&mut self) -> &mut ::std::string::String {
        &mut self.rec_reset_freq
    }

    // Take field
    pub fn take_rec_reset_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rec_reset_freq, ::std::string::String::new())
    }

    pub fn get_rec_reset_freq(&self) -> &str {
        &self.rec_reset_freq
    }

    // string pay_payment_freq = 62;

    pub fn clear_pay_payment_freq(&mut self) {
        self.pay_payment_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_pay_payment_freq(&mut self, v: ::std::string::String) {
        self.pay_payment_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pay_payment_freq(&mut self) -> &mut ::std::string::String {
        &mut self.pay_payment_freq
    }

    // Take field
    pub fn take_pay_payment_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pay_payment_freq, ::std::string::String::new())
    }

    pub fn get_pay_payment_freq(&self) -> &str {
        &self.pay_payment_freq
    }

    // string rec_payment_freq = 63;

    pub fn clear_rec_payment_freq(&mut self) {
        self.rec_payment_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_rec_payment_freq(&mut self, v: ::std::string::String) {
        self.rec_payment_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rec_payment_freq(&mut self) -> &mut ::std::string::String {
        &mut self.rec_payment_freq
    }

    // Take field
    pub fn take_rec_payment_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rec_payment_freq, ::std::string::String::new())
    }

    pub fn get_rec_payment_freq(&self) -> &str {
        &self.rec_payment_freq
    }

    // string deal_status = 64;

    pub fn clear_deal_status(&mut self) {
        self.deal_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_status(&mut self, v: ::std::string::String) {
        self.deal_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_status(&mut self) -> &mut ::std::string::String {
        &mut self.deal_status
    }

    // Take field
    pub fn take_deal_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_status, ::std::string::String::new())
    }

    pub fn get_deal_status(&self) -> &str {
        &self.deal_status
    }

    // string flowtype = 65;

    pub fn clear_flowtype(&mut self) {
        self.flowtype.clear();
    }

    // Param is passed by value, moved
    pub fn set_flowtype(&mut self, v: ::std::string::String) {
        self.flowtype = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flowtype(&mut self) -> &mut ::std::string::String {
        &mut self.flowtype
    }

    // Take field
    pub fn take_flowtype(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flowtype, ::std::string::String::new())
    }

    pub fn get_flowtype(&self) -> &str {
        &self.flowtype
    }

    // string flowtype1 = 66;

    pub fn clear_flowtype1(&mut self) {
        self.flowtype1.clear();
    }

    // Param is passed by value, moved
    pub fn set_flowtype1(&mut self, v: ::std::string::String) {
        self.flowtype1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flowtype1(&mut self) -> &mut ::std::string::String {
        &mut self.flowtype1
    }

    // Take field
    pub fn take_flowtype1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flowtype1, ::std::string::String::new())
    }

    pub fn get_flowtype1(&self) -> &str {
        &self.flowtype1
    }

    // string flowtype2 = 67;

    pub fn clear_flowtype2(&mut self) {
        self.flowtype2.clear();
    }

    // Param is passed by value, moved
    pub fn set_flowtype2(&mut self, v: ::std::string::String) {
        self.flowtype2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flowtype2(&mut self) -> &mut ::std::string::String {
        &mut self.flowtype2
    }

    // Take field
    pub fn take_flowtype2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flowtype2, ::std::string::String::new())
    }

    pub fn get_flowtype2(&self) -> &str {
        &self.flowtype2
    }

    // string flowtype3 = 68;

    pub fn clear_flowtype3(&mut self) {
        self.flowtype3.clear();
    }

    // Param is passed by value, moved
    pub fn set_flowtype3(&mut self, v: ::std::string::String) {
        self.flowtype3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flowtype3(&mut self) -> &mut ::std::string::String {
        &mut self.flowtype3
    }

    // Take field
    pub fn take_flowtype3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flowtype3, ::std::string::String::new())
    }

    pub fn get_flowtype3(&self) -> &str {
        &self.flowtype3
    }

    // string flowtype4 = 69;

    pub fn clear_flowtype4(&mut self) {
        self.flowtype4.clear();
    }

    // Param is passed by value, moved
    pub fn set_flowtype4(&mut self, v: ::std::string::String) {
        self.flowtype4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flowtype4(&mut self) -> &mut ::std::string::String {
        &mut self.flowtype4
    }

    // Take field
    pub fn take_flowtype4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flowtype4, ::std::string::String::new())
    }

    pub fn get_flowtype4(&self) -> &str {
        &self.flowtype4
    }

    // double flowamount = 70;

    pub fn clear_flowamount(&mut self) {
        self.flowamount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_flowamount(&mut self, v: f64) {
        self.flowamount = v;
    }

    pub fn get_flowamount(&self) -> f64 {
        self.flowamount
    }

    // int64 cf_dt = 71;

    pub fn clear_cf_dt(&mut self) {
        self.cf_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_cf_dt(&mut self, v: i64) {
        self.cf_dt = v;
    }

    pub fn get_cf_dt(&self) -> i64 {
        self.cf_dt
    }

    // string flow_ccy = 72;

    pub fn clear_flow_ccy(&mut self) {
        self.flow_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_flow_ccy(&mut self, v: ::std::string::String) {
        self.flow_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flow_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.flow_ccy
    }

    // Take field
    pub fn take_flow_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flow_ccy, ::std::string::String::new())
    }

    pub fn get_flow_ccy(&self) -> &str {
        &self.flow_ccy
    }

    // double hkd_rt = 73;

    pub fn clear_hkd_rt(&mut self) {
        self.hkd_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_hkd_rt(&mut self, v: f64) {
        self.hkd_rt = v;
    }

    pub fn get_hkd_rt(&self) -> f64 {
        self.hkd_rt
    }

    // double hkd_amt = 74;

    pub fn clear_hkd_amt(&mut self) {
        self.hkd_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_hkd_amt(&mut self, v: f64) {
        self.hkd_amt = v;
    }

    pub fn get_hkd_amt(&self) -> f64 {
        self.hkd_amt
    }

    // int64 m_h_rep_dt2 = 75;

    pub fn clear_m_h_rep_dt2(&mut self) {
        self.m_h_rep_dt2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_m_h_rep_dt2(&mut self, v: i64) {
        self.m_h_rep_dt2 = v;
    }

    pub fn get_m_h_rep_dt2(&self) -> i64 {
        self.m_h_rep_dt2
    }

    // double inr_amt = 76;

    pub fn clear_inr_amt(&mut self) {
        self.inr_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_inr_amt(&mut self, v: f64) {
        self.inr_amt = v;
    }

    pub fn get_inr_amt(&self) -> f64 {
        self.inr_amt
    }

    // double inr_rt = 77;

    pub fn clear_inr_rt(&mut self) {
        self.inr_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_inr_rt(&mut self, v: f64) {
        self.inr_rt = v;
    }

    pub fn get_inr_rt(&self) -> f64 {
        self.inr_rt
    }

    // double int_rt = 78;

    pub fn clear_int_rt(&mut self) {
        self.int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rt(&mut self, v: f64) {
        self.int_rt = v;
    }

    pub fn get_int_rt(&self) -> f64 {
        self.int_rt
    }

    // double tot_int_amt = 79;

    pub fn clear_tot_int_amt(&mut self) {
        self.tot_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_int_amt(&mut self, v: f64) {
        self.tot_int_amt = v;
    }

    pub fn get_tot_int_amt(&self) -> f64 {
        self.tot_int_amt
    }

    // double tot_prin_amt = 80;

    pub fn clear_tot_prin_amt(&mut self) {
        self.tot_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_prin_amt(&mut self, v: f64) {
        self.tot_prin_amt = v;
    }

    pub fn get_tot_prin_amt(&self) -> f64 {
        self.tot_prin_amt
    }

    // repeated .Cashflow cashflows = 81;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.entity)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trade_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.contract_id = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.struct_id_link_id = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.comp_typology)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pkg_typology)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cntrct_typology)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.desk)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.book)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.folder)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trading_banking)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cntr_prty_grp_cd)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cntr_prty_chld_cd)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cntr_prty_name)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.intrnl_extrnl)?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.trade_dt = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.st_dt = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ed_dt = tmp;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy_pair)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rec_leg_ccy)?;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.org_notional_rec_leg = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.org_notional_rec_leg_inr = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ost_notional_rec_leg = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ost_notional_rec_leg_inr = tmp;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pay_leg_ccy)?;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.org_notional_pay_leg = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.org_notional_pay_leg_inr = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ost_notional_pay_leg = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ost_notional_pay_leg_inr = tmp;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_side)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pay_leg_idx)?;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pay_int_rt = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.spread_pay_leg = tmp;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rec_leg_idx)?;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rec_int_rt = tmp;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.spread_rec_leg = tmp;
                },
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rec_side_acrl_inr = tmp;
                },
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rec_side_mtm_inr = tmp;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.future_cash_proceeds_ccy)?;
                },
                40 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.future_cash_proceeds_inr = tmp;
                },
                41 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.mrkt_val_financed = tmp;
                },
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.net_mtm_usd = tmp;
                },
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.net_mtm_inr = tmp;
                },
                44 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pay_side_pv01_inr = tmp;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rec_side_pv01_inr = tmp;
                },
                46 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.net_pv01_inr = tmp;
                },
                47 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pay_side_modified_duration = tmp;
                },
                48 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.receive_side_modified_duration = tmp;
                },
                49 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.modified_duration_deal = tmp;
                },
                50 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pay_leg_exchange_rt = tmp;
                },
                51 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rec_leg_exchange_rt = tmp;
                },
                52 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pay_reset_dt = tmp;
                },
                53 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rec_reset_dt = tmp;
                },
                54 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pay_payment_dt = tmp;
                },
                55 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rec_payment_dt = tmp;
                },
                56 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.index_rec_leg)?;
                },
                57 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.index_pay_leg)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.day_count_cnvntn_rec_leg)?;
                },
                59 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.day_count_cnvntn_pay_leg)?;
                },
                60 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pay_reset_freq)?;
                },
                61 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rec_reset_freq)?;
                },
                62 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pay_payment_freq)?;
                },
                63 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rec_payment_freq)?;
                },
                64 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_status)?;
                },
                65 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flowtype)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flowtype1)?;
                },
                67 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flowtype2)?;
                },
                68 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flowtype3)?;
                },
                69 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flowtype4)?;
                },
                70 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.flowamount = tmp;
                },
                71 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cf_dt = tmp;
                },
                72 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flow_ccy)?;
                },
                73 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.hkd_rt = tmp;
                },
                74 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.hkd_amt = tmp;
                },
                75 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.m_h_rep_dt2 = tmp;
                },
                76 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.inr_amt = tmp;
                },
                77 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.inr_rt = tmp;
                },
                78 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rt = tmp;
                },
                79 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_int_amt = tmp;
                },
                80 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_prin_amt = tmp;
                },
                81 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.entity.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.entity);
        }
        if !self.trade_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.trade_id);
        }
        if self.contract_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.contract_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.struct_id_link_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.struct_id_link_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.comp_typology.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.comp_typology);
        }
        if !self.pkg_typology.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.pkg_typology);
        }
        if !self.cntrct_typology.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.cntrct_typology);
        }
        if !self.desk.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.desk);
        }
        if !self.book.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.book);
        }
        if !self.folder.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.folder);
        }
        if !self.trading_banking.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.trading_banking);
        }
        if !self.cntr_prty_grp_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.cntr_prty_grp_cd);
        }
        if !self.cntr_prty_chld_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.cntr_prty_chld_cd);
        }
        if !self.cntr_prty_name.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.cntr_prty_name);
        }
        if !self.intrnl_extrnl.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.intrnl_extrnl);
        }
        if self.trade_dt != 0 {
            my_size += ::protobuf::rt::value_size(16, self.trade_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.st_dt != 0 {
            my_size += ::protobuf::rt::value_size(17, self.st_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ed_dt != 0 {
            my_size += ::protobuf::rt::value_size(18, self.ed_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ccy_pair.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.ccy_pair);
        }
        if !self.rec_leg_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.rec_leg_ccy);
        }
        if self.org_notional_rec_leg != 0. {
            my_size += 10;
        }
        if self.org_notional_rec_leg_inr != 0. {
            my_size += 10;
        }
        if self.ost_notional_rec_leg != 0. {
            my_size += 10;
        }
        if self.ost_notional_rec_leg_inr != 0. {
            my_size += 10;
        }
        if !self.pay_leg_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.pay_leg_ccy);
        }
        if self.org_notional_pay_leg != 0. {
            my_size += 10;
        }
        if self.org_notional_pay_leg_inr != 0. {
            my_size += 10;
        }
        if self.ost_notional_pay_leg != 0. {
            my_size += 10;
        }
        if self.ost_notional_pay_leg_inr != 0. {
            my_size += 10;
        }
        if !self.deal_side.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.deal_side);
        }
        if !self.pay_leg_idx.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.pay_leg_idx);
        }
        if self.pay_int_rt != 0. {
            my_size += 10;
        }
        if self.spread_pay_leg != 0. {
            my_size += 10;
        }
        if !self.rec_leg_idx.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.rec_leg_idx);
        }
        if self.rec_int_rt != 0. {
            my_size += 10;
        }
        if self.spread_rec_leg != 0. {
            my_size += 10;
        }
        if self.rec_side_acrl_inr != 0. {
            my_size += 10;
        }
        if self.rec_side_mtm_inr != 0. {
            my_size += 10;
        }
        if !self.future_cash_proceeds_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.future_cash_proceeds_ccy);
        }
        if self.future_cash_proceeds_inr != 0. {
            my_size += 10;
        }
        if self.mrkt_val_financed != 0. {
            my_size += 10;
        }
        if self.net_mtm_usd != 0. {
            my_size += 10;
        }
        if self.net_mtm_inr != 0. {
            my_size += 10;
        }
        if self.pay_side_pv01_inr != 0. {
            my_size += 10;
        }
        if self.rec_side_pv01_inr != 0. {
            my_size += 10;
        }
        if self.net_pv01_inr != 0. {
            my_size += 10;
        }
        if self.pay_side_modified_duration != 0. {
            my_size += 10;
        }
        if self.receive_side_modified_duration != 0. {
            my_size += 10;
        }
        if self.modified_duration_deal != 0. {
            my_size += 10;
        }
        if self.pay_leg_exchange_rt != 0. {
            my_size += 10;
        }
        if self.rec_leg_exchange_rt != 0. {
            my_size += 10;
        }
        if self.pay_reset_dt != 0 {
            my_size += ::protobuf::rt::value_size(52, self.pay_reset_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rec_reset_dt != 0 {
            my_size += ::protobuf::rt::value_size(53, self.rec_reset_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pay_payment_dt != 0 {
            my_size += ::protobuf::rt::value_size(54, self.pay_payment_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rec_payment_dt != 0 {
            my_size += ::protobuf::rt::value_size(55, self.rec_payment_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.index_rec_leg.is_empty() {
            my_size += ::protobuf::rt::string_size(56, &self.index_rec_leg);
        }
        if !self.index_pay_leg.is_empty() {
            my_size += ::protobuf::rt::string_size(57, &self.index_pay_leg);
        }
        if !self.day_count_cnvntn_rec_leg.is_empty() {
            my_size += ::protobuf::rt::string_size(58, &self.day_count_cnvntn_rec_leg);
        }
        if !self.day_count_cnvntn_pay_leg.is_empty() {
            my_size += ::protobuf::rt::string_size(59, &self.day_count_cnvntn_pay_leg);
        }
        if !self.pay_reset_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(60, &self.pay_reset_freq);
        }
        if !self.rec_reset_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(61, &self.rec_reset_freq);
        }
        if !self.pay_payment_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(62, &self.pay_payment_freq);
        }
        if !self.rec_payment_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(63, &self.rec_payment_freq);
        }
        if !self.deal_status.is_empty() {
            my_size += ::protobuf::rt::string_size(64, &self.deal_status);
        }
        if !self.flowtype.is_empty() {
            my_size += ::protobuf::rt::string_size(65, &self.flowtype);
        }
        if !self.flowtype1.is_empty() {
            my_size += ::protobuf::rt::string_size(66, &self.flowtype1);
        }
        if !self.flowtype2.is_empty() {
            my_size += ::protobuf::rt::string_size(67, &self.flowtype2);
        }
        if !self.flowtype3.is_empty() {
            my_size += ::protobuf::rt::string_size(68, &self.flowtype3);
        }
        if !self.flowtype4.is_empty() {
            my_size += ::protobuf::rt::string_size(69, &self.flowtype4);
        }
        if self.flowamount != 0. {
            my_size += 10;
        }
        if self.cf_dt != 0 {
            my_size += ::protobuf::rt::value_size(71, self.cf_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.flow_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(72, &self.flow_ccy);
        }
        if self.hkd_rt != 0. {
            my_size += 10;
        }
        if self.hkd_amt != 0. {
            my_size += 10;
        }
        if self.m_h_rep_dt2 != 0 {
            my_size += ::protobuf::rt::value_size(75, self.m_h_rep_dt2, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.inr_amt != 0. {
            my_size += 10;
        }
        if self.inr_rt != 0. {
            my_size += 10;
        }
        if self.int_rt != 0. {
            my_size += 10;
        }
        if self.tot_int_amt != 0. {
            my_size += 10;
        }
        if self.tot_prin_amt != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.entity.is_empty() {
            os.write_string(1, &self.entity)?;
        }
        if !self.trade_id.is_empty() {
            os.write_string(2, &self.trade_id)?;
        }
        if self.contract_id != 0 {
            os.write_int64(3, self.contract_id)?;
        }
        if self.struct_id_link_id != 0 {
            os.write_int64(4, self.struct_id_link_id)?;
        }
        if !self.comp_typology.is_empty() {
            os.write_string(5, &self.comp_typology)?;
        }
        if !self.pkg_typology.is_empty() {
            os.write_string(6, &self.pkg_typology)?;
        }
        if !self.cntrct_typology.is_empty() {
            os.write_string(7, &self.cntrct_typology)?;
        }
        if !self.desk.is_empty() {
            os.write_string(8, &self.desk)?;
        }
        if !self.book.is_empty() {
            os.write_string(9, &self.book)?;
        }
        if !self.folder.is_empty() {
            os.write_string(10, &self.folder)?;
        }
        if !self.trading_banking.is_empty() {
            os.write_string(11, &self.trading_banking)?;
        }
        if !self.cntr_prty_grp_cd.is_empty() {
            os.write_string(12, &self.cntr_prty_grp_cd)?;
        }
        if !self.cntr_prty_chld_cd.is_empty() {
            os.write_string(13, &self.cntr_prty_chld_cd)?;
        }
        if !self.cntr_prty_name.is_empty() {
            os.write_string(14, &self.cntr_prty_name)?;
        }
        if !self.intrnl_extrnl.is_empty() {
            os.write_string(15, &self.intrnl_extrnl)?;
        }
        if self.trade_dt != 0 {
            os.write_int64(16, self.trade_dt)?;
        }
        if self.st_dt != 0 {
            os.write_int64(17, self.st_dt)?;
        }
        if self.ed_dt != 0 {
            os.write_int64(18, self.ed_dt)?;
        }
        if !self.ccy_pair.is_empty() {
            os.write_string(19, &self.ccy_pair)?;
        }
        if !self.rec_leg_ccy.is_empty() {
            os.write_string(20, &self.rec_leg_ccy)?;
        }
        if self.org_notional_rec_leg != 0. {
            os.write_double(21, self.org_notional_rec_leg)?;
        }
        if self.org_notional_rec_leg_inr != 0. {
            os.write_double(22, self.org_notional_rec_leg_inr)?;
        }
        if self.ost_notional_rec_leg != 0. {
            os.write_double(23, self.ost_notional_rec_leg)?;
        }
        if self.ost_notional_rec_leg_inr != 0. {
            os.write_double(24, self.ost_notional_rec_leg_inr)?;
        }
        if !self.pay_leg_ccy.is_empty() {
            os.write_string(25, &self.pay_leg_ccy)?;
        }
        if self.org_notional_pay_leg != 0. {
            os.write_double(26, self.org_notional_pay_leg)?;
        }
        if self.org_notional_pay_leg_inr != 0. {
            os.write_double(27, self.org_notional_pay_leg_inr)?;
        }
        if self.ost_notional_pay_leg != 0. {
            os.write_double(28, self.ost_notional_pay_leg)?;
        }
        if self.ost_notional_pay_leg_inr != 0. {
            os.write_double(29, self.ost_notional_pay_leg_inr)?;
        }
        if !self.deal_side.is_empty() {
            os.write_string(30, &self.deal_side)?;
        }
        if !self.pay_leg_idx.is_empty() {
            os.write_string(31, &self.pay_leg_idx)?;
        }
        if self.pay_int_rt != 0. {
            os.write_double(32, self.pay_int_rt)?;
        }
        if self.spread_pay_leg != 0. {
            os.write_double(33, self.spread_pay_leg)?;
        }
        if !self.rec_leg_idx.is_empty() {
            os.write_string(34, &self.rec_leg_idx)?;
        }
        if self.rec_int_rt != 0. {
            os.write_double(35, self.rec_int_rt)?;
        }
        if self.spread_rec_leg != 0. {
            os.write_double(36, self.spread_rec_leg)?;
        }
        if self.rec_side_acrl_inr != 0. {
            os.write_double(37, self.rec_side_acrl_inr)?;
        }
        if self.rec_side_mtm_inr != 0. {
            os.write_double(38, self.rec_side_mtm_inr)?;
        }
        if !self.future_cash_proceeds_ccy.is_empty() {
            os.write_string(39, &self.future_cash_proceeds_ccy)?;
        }
        if self.future_cash_proceeds_inr != 0. {
            os.write_double(40, self.future_cash_proceeds_inr)?;
        }
        if self.mrkt_val_financed != 0. {
            os.write_double(41, self.mrkt_val_financed)?;
        }
        if self.net_mtm_usd != 0. {
            os.write_double(42, self.net_mtm_usd)?;
        }
        if self.net_mtm_inr != 0. {
            os.write_double(43, self.net_mtm_inr)?;
        }
        if self.pay_side_pv01_inr != 0. {
            os.write_double(44, self.pay_side_pv01_inr)?;
        }
        if self.rec_side_pv01_inr != 0. {
            os.write_double(45, self.rec_side_pv01_inr)?;
        }
        if self.net_pv01_inr != 0. {
            os.write_double(46, self.net_pv01_inr)?;
        }
        if self.pay_side_modified_duration != 0. {
            os.write_double(47, self.pay_side_modified_duration)?;
        }
        if self.receive_side_modified_duration != 0. {
            os.write_double(48, self.receive_side_modified_duration)?;
        }
        if self.modified_duration_deal != 0. {
            os.write_double(49, self.modified_duration_deal)?;
        }
        if self.pay_leg_exchange_rt != 0. {
            os.write_double(50, self.pay_leg_exchange_rt)?;
        }
        if self.rec_leg_exchange_rt != 0. {
            os.write_double(51, self.rec_leg_exchange_rt)?;
        }
        if self.pay_reset_dt != 0 {
            os.write_int64(52, self.pay_reset_dt)?;
        }
        if self.rec_reset_dt != 0 {
            os.write_int64(53, self.rec_reset_dt)?;
        }
        if self.pay_payment_dt != 0 {
            os.write_int64(54, self.pay_payment_dt)?;
        }
        if self.rec_payment_dt != 0 {
            os.write_int64(55, self.rec_payment_dt)?;
        }
        if !self.index_rec_leg.is_empty() {
            os.write_string(56, &self.index_rec_leg)?;
        }
        if !self.index_pay_leg.is_empty() {
            os.write_string(57, &self.index_pay_leg)?;
        }
        if !self.day_count_cnvntn_rec_leg.is_empty() {
            os.write_string(58, &self.day_count_cnvntn_rec_leg)?;
        }
        if !self.day_count_cnvntn_pay_leg.is_empty() {
            os.write_string(59, &self.day_count_cnvntn_pay_leg)?;
        }
        if !self.pay_reset_freq.is_empty() {
            os.write_string(60, &self.pay_reset_freq)?;
        }
        if !self.rec_reset_freq.is_empty() {
            os.write_string(61, &self.rec_reset_freq)?;
        }
        if !self.pay_payment_freq.is_empty() {
            os.write_string(62, &self.pay_payment_freq)?;
        }
        if !self.rec_payment_freq.is_empty() {
            os.write_string(63, &self.rec_payment_freq)?;
        }
        if !self.deal_status.is_empty() {
            os.write_string(64, &self.deal_status)?;
        }
        if !self.flowtype.is_empty() {
            os.write_string(65, &self.flowtype)?;
        }
        if !self.flowtype1.is_empty() {
            os.write_string(66, &self.flowtype1)?;
        }
        if !self.flowtype2.is_empty() {
            os.write_string(67, &self.flowtype2)?;
        }
        if !self.flowtype3.is_empty() {
            os.write_string(68, &self.flowtype3)?;
        }
        if !self.flowtype4.is_empty() {
            os.write_string(69, &self.flowtype4)?;
        }
        if self.flowamount != 0. {
            os.write_double(70, self.flowamount)?;
        }
        if self.cf_dt != 0 {
            os.write_int64(71, self.cf_dt)?;
        }
        if !self.flow_ccy.is_empty() {
            os.write_string(72, &self.flow_ccy)?;
        }
        if self.hkd_rt != 0. {
            os.write_double(73, self.hkd_rt)?;
        }
        if self.hkd_amt != 0. {
            os.write_double(74, self.hkd_amt)?;
        }
        if self.m_h_rep_dt2 != 0 {
            os.write_int64(75, self.m_h_rep_dt2)?;
        }
        if self.inr_amt != 0. {
            os.write_double(76, self.inr_amt)?;
        }
        if self.inr_rt != 0. {
            os.write_double(77, self.inr_rt)?;
        }
        if self.int_rt != 0. {
            os.write_double(78, self.int_rt)?;
        }
        if self.tot_int_amt != 0. {
            os.write_double(79, self.tot_int_amt)?;
        }
        if self.tot_prin_amt != 0. {
            os.write_double(80, self.tot_prin_amt)?;
        }
        for v in &self.cashflows {
            os.write_tag(81, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "entity",
                    |m: &AccountWithCashflows| { &m.entity },
                    |m: &mut AccountWithCashflows| { &mut m.entity },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "trade_id",
                    |m: &AccountWithCashflows| { &m.trade_id },
                    |m: &mut AccountWithCashflows| { &mut m.trade_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "contract_id",
                    |m: &AccountWithCashflows| { &m.contract_id },
                    |m: &mut AccountWithCashflows| { &mut m.contract_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "struct_id_link_id",
                    |m: &AccountWithCashflows| { &m.struct_id_link_id },
                    |m: &mut AccountWithCashflows| { &mut m.struct_id_link_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "comp_typology",
                    |m: &AccountWithCashflows| { &m.comp_typology },
                    |m: &mut AccountWithCashflows| { &mut m.comp_typology },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pkg_typology",
                    |m: &AccountWithCashflows| { &m.pkg_typology },
                    |m: &mut AccountWithCashflows| { &mut m.pkg_typology },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cntrct_typology",
                    |m: &AccountWithCashflows| { &m.cntrct_typology },
                    |m: &mut AccountWithCashflows| { &mut m.cntrct_typology },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "desk",
                    |m: &AccountWithCashflows| { &m.desk },
                    |m: &mut AccountWithCashflows| { &mut m.desk },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "book",
                    |m: &AccountWithCashflows| { &m.book },
                    |m: &mut AccountWithCashflows| { &mut m.book },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "folder",
                    |m: &AccountWithCashflows| { &m.folder },
                    |m: &mut AccountWithCashflows| { &mut m.folder },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "trading_banking",
                    |m: &AccountWithCashflows| { &m.trading_banking },
                    |m: &mut AccountWithCashflows| { &mut m.trading_banking },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cntr_prty_grp_cd",
                    |m: &AccountWithCashflows| { &m.cntr_prty_grp_cd },
                    |m: &mut AccountWithCashflows| { &mut m.cntr_prty_grp_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cntr_prty_chld_cd",
                    |m: &AccountWithCashflows| { &m.cntr_prty_chld_cd },
                    |m: &mut AccountWithCashflows| { &mut m.cntr_prty_chld_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cntr_prty_name",
                    |m: &AccountWithCashflows| { &m.cntr_prty_name },
                    |m: &mut AccountWithCashflows| { &mut m.cntr_prty_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "intrnl_extrnl",
                    |m: &AccountWithCashflows| { &m.intrnl_extrnl },
                    |m: &mut AccountWithCashflows| { &mut m.intrnl_extrnl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "trade_dt",
                    |m: &AccountWithCashflows| { &m.trade_dt },
                    |m: &mut AccountWithCashflows| { &mut m.trade_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "st_dt",
                    |m: &AccountWithCashflows| { &m.st_dt },
                    |m: &mut AccountWithCashflows| { &mut m.st_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "ed_dt",
                    |m: &AccountWithCashflows| { &m.ed_dt },
                    |m: &mut AccountWithCashflows| { &mut m.ed_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy_pair",
                    |m: &AccountWithCashflows| { &m.ccy_pair },
                    |m: &mut AccountWithCashflows| { &mut m.ccy_pair },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rec_leg_ccy",
                    |m: &AccountWithCashflows| { &m.rec_leg_ccy },
                    |m: &mut AccountWithCashflows| { &mut m.rec_leg_ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "org_notional_rec_leg",
                    |m: &AccountWithCashflows| { &m.org_notional_rec_leg },
                    |m: &mut AccountWithCashflows| { &mut m.org_notional_rec_leg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "org_notional_rec_leg_inr",
                    |m: &AccountWithCashflows| { &m.org_notional_rec_leg_inr },
                    |m: &mut AccountWithCashflows| { &mut m.org_notional_rec_leg_inr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ost_notional_rec_leg",
                    |m: &AccountWithCashflows| { &m.ost_notional_rec_leg },
                    |m: &mut AccountWithCashflows| { &mut m.ost_notional_rec_leg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ost_notional_rec_leg_inr",
                    |m: &AccountWithCashflows| { &m.ost_notional_rec_leg_inr },
                    |m: &mut AccountWithCashflows| { &mut m.ost_notional_rec_leg_inr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pay_leg_ccy",
                    |m: &AccountWithCashflows| { &m.pay_leg_ccy },
                    |m: &mut AccountWithCashflows| { &mut m.pay_leg_ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "org_notional_pay_leg",
                    |m: &AccountWithCashflows| { &m.org_notional_pay_leg },
                    |m: &mut AccountWithCashflows| { &mut m.org_notional_pay_leg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "org_notional_pay_leg_inr",
                    |m: &AccountWithCashflows| { &m.org_notional_pay_leg_inr },
                    |m: &mut AccountWithCashflows| { &mut m.org_notional_pay_leg_inr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ost_notional_pay_leg",
                    |m: &AccountWithCashflows| { &m.ost_notional_pay_leg },
                    |m: &mut AccountWithCashflows| { &mut m.ost_notional_pay_leg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ost_notional_pay_leg_inr",
                    |m: &AccountWithCashflows| { &m.ost_notional_pay_leg_inr },
                    |m: &mut AccountWithCashflows| { &mut m.ost_notional_pay_leg_inr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_side",
                    |m: &AccountWithCashflows| { &m.deal_side },
                    |m: &mut AccountWithCashflows| { &mut m.deal_side },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pay_leg_idx",
                    |m: &AccountWithCashflows| { &m.pay_leg_idx },
                    |m: &mut AccountWithCashflows| { &mut m.pay_leg_idx },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "pay_int_rt",
                    |m: &AccountWithCashflows| { &m.pay_int_rt },
                    |m: &mut AccountWithCashflows| { &mut m.pay_int_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "spread_pay_leg",
                    |m: &AccountWithCashflows| { &m.spread_pay_leg },
                    |m: &mut AccountWithCashflows| { &mut m.spread_pay_leg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rec_leg_idx",
                    |m: &AccountWithCashflows| { &m.rec_leg_idx },
                    |m: &mut AccountWithCashflows| { &mut m.rec_leg_idx },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rec_int_rt",
                    |m: &AccountWithCashflows| { &m.rec_int_rt },
                    |m: &mut AccountWithCashflows| { &mut m.rec_int_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "spread_rec_leg",
                    |m: &AccountWithCashflows| { &m.spread_rec_leg },
                    |m: &mut AccountWithCashflows| { &mut m.spread_rec_leg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rec_side_acrl_inr",
                    |m: &AccountWithCashflows| { &m.rec_side_acrl_inr },
                    |m: &mut AccountWithCashflows| { &mut m.rec_side_acrl_inr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rec_side_mtm_inr",
                    |m: &AccountWithCashflows| { &m.rec_side_mtm_inr },
                    |m: &mut AccountWithCashflows| { &mut m.rec_side_mtm_inr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "future_cash_proceeds_ccy",
                    |m: &AccountWithCashflows| { &m.future_cash_proceeds_ccy },
                    |m: &mut AccountWithCashflows| { &mut m.future_cash_proceeds_ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "future_cash_proceeds_inr",
                    |m: &AccountWithCashflows| { &m.future_cash_proceeds_inr },
                    |m: &mut AccountWithCashflows| { &mut m.future_cash_proceeds_inr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "mrkt_val_financed",
                    |m: &AccountWithCashflows| { &m.mrkt_val_financed },
                    |m: &mut AccountWithCashflows| { &mut m.mrkt_val_financed },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "net_mtm_usd",
                    |m: &AccountWithCashflows| { &m.net_mtm_usd },
                    |m: &mut AccountWithCashflows| { &mut m.net_mtm_usd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "net_mtm_inr",
                    |m: &AccountWithCashflows| { &m.net_mtm_inr },
                    |m: &mut AccountWithCashflows| { &mut m.net_mtm_inr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "pay_side_pv01_inr",
                    |m: &AccountWithCashflows| { &m.pay_side_pv01_inr },
                    |m: &mut AccountWithCashflows| { &mut m.pay_side_pv01_inr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rec_side_pv01_inr",
                    |m: &AccountWithCashflows| { &m.rec_side_pv01_inr },
                    |m: &mut AccountWithCashflows| { &mut m.rec_side_pv01_inr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "net_pv01_inr",
                    |m: &AccountWithCashflows| { &m.net_pv01_inr },
                    |m: &mut AccountWithCashflows| { &mut m.net_pv01_inr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "pay_side_modified_duration",
                    |m: &AccountWithCashflows| { &m.pay_side_modified_duration },
                    |m: &mut AccountWithCashflows| { &mut m.pay_side_modified_duration },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "receive_side_modified_duration",
                    |m: &AccountWithCashflows| { &m.receive_side_modified_duration },
                    |m: &mut AccountWithCashflows| { &mut m.receive_side_modified_duration },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "modified_duration_deal",
                    |m: &AccountWithCashflows| { &m.modified_duration_deal },
                    |m: &mut AccountWithCashflows| { &mut m.modified_duration_deal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "pay_leg_exchange_rt",
                    |m: &AccountWithCashflows| { &m.pay_leg_exchange_rt },
                    |m: &mut AccountWithCashflows| { &mut m.pay_leg_exchange_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rec_leg_exchange_rt",
                    |m: &AccountWithCashflows| { &m.rec_leg_exchange_rt },
                    |m: &mut AccountWithCashflows| { &mut m.rec_leg_exchange_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "pay_reset_dt",
                    |m: &AccountWithCashflows| { &m.pay_reset_dt },
                    |m: &mut AccountWithCashflows| { &mut m.pay_reset_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "rec_reset_dt",
                    |m: &AccountWithCashflows| { &m.rec_reset_dt },
                    |m: &mut AccountWithCashflows| { &mut m.rec_reset_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "pay_payment_dt",
                    |m: &AccountWithCashflows| { &m.pay_payment_dt },
                    |m: &mut AccountWithCashflows| { &mut m.pay_payment_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "rec_payment_dt",
                    |m: &AccountWithCashflows| { &m.rec_payment_dt },
                    |m: &mut AccountWithCashflows| { &mut m.rec_payment_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "index_rec_leg",
                    |m: &AccountWithCashflows| { &m.index_rec_leg },
                    |m: &mut AccountWithCashflows| { &mut m.index_rec_leg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "index_pay_leg",
                    |m: &AccountWithCashflows| { &m.index_pay_leg },
                    |m: &mut AccountWithCashflows| { &mut m.index_pay_leg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "day_count_cnvntn_rec_leg",
                    |m: &AccountWithCashflows| { &m.day_count_cnvntn_rec_leg },
                    |m: &mut AccountWithCashflows| { &mut m.day_count_cnvntn_rec_leg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "day_count_cnvntn_pay_leg",
                    |m: &AccountWithCashflows| { &m.day_count_cnvntn_pay_leg },
                    |m: &mut AccountWithCashflows| { &mut m.day_count_cnvntn_pay_leg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pay_reset_freq",
                    |m: &AccountWithCashflows| { &m.pay_reset_freq },
                    |m: &mut AccountWithCashflows| { &mut m.pay_reset_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rec_reset_freq",
                    |m: &AccountWithCashflows| { &m.rec_reset_freq },
                    |m: &mut AccountWithCashflows| { &mut m.rec_reset_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pay_payment_freq",
                    |m: &AccountWithCashflows| { &m.pay_payment_freq },
                    |m: &mut AccountWithCashflows| { &mut m.pay_payment_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rec_payment_freq",
                    |m: &AccountWithCashflows| { &m.rec_payment_freq },
                    |m: &mut AccountWithCashflows| { &mut m.rec_payment_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_status",
                    |m: &AccountWithCashflows| { &m.deal_status },
                    |m: &mut AccountWithCashflows| { &mut m.deal_status },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "flowtype",
                    |m: &AccountWithCashflows| { &m.flowtype },
                    |m: &mut AccountWithCashflows| { &mut m.flowtype },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "flowtype1",
                    |m: &AccountWithCashflows| { &m.flowtype1 },
                    |m: &mut AccountWithCashflows| { &mut m.flowtype1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "flowtype2",
                    |m: &AccountWithCashflows| { &m.flowtype2 },
                    |m: &mut AccountWithCashflows| { &mut m.flowtype2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "flowtype3",
                    |m: &AccountWithCashflows| { &m.flowtype3 },
                    |m: &mut AccountWithCashflows| { &mut m.flowtype3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "flowtype4",
                    |m: &AccountWithCashflows| { &m.flowtype4 },
                    |m: &mut AccountWithCashflows| { &mut m.flowtype4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "flowamount",
                    |m: &AccountWithCashflows| { &m.flowamount },
                    |m: &mut AccountWithCashflows| { &mut m.flowamount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cf_dt",
                    |m: &AccountWithCashflows| { &m.cf_dt },
                    |m: &mut AccountWithCashflows| { &mut m.cf_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "flow_ccy",
                    |m: &AccountWithCashflows| { &m.flow_ccy },
                    |m: &mut AccountWithCashflows| { &mut m.flow_ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "hkd_rt",
                    |m: &AccountWithCashflows| { &m.hkd_rt },
                    |m: &mut AccountWithCashflows| { &mut m.hkd_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "hkd_amt",
                    |m: &AccountWithCashflows| { &m.hkd_amt },
                    |m: &mut AccountWithCashflows| { &mut m.hkd_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "m_h_rep_dt2",
                    |m: &AccountWithCashflows| { &m.m_h_rep_dt2 },
                    |m: &mut AccountWithCashflows| { &mut m.m_h_rep_dt2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "inr_amt",
                    |m: &AccountWithCashflows| { &m.inr_amt },
                    |m: &mut AccountWithCashflows| { &mut m.inr_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "inr_rt",
                    |m: &AccountWithCashflows| { &m.inr_rt },
                    |m: &mut AccountWithCashflows| { &mut m.inr_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rt",
                    |m: &AccountWithCashflows| { &m.int_rt },
                    |m: &mut AccountWithCashflows| { &mut m.int_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_int_amt",
                    |m: &AccountWithCashflows| { &m.tot_int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.tot_int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_prin_amt",
                    |m: &AccountWithCashflows| { &m.tot_prin_amt },
                    |m: &mut AccountWithCashflows| { &mut m.tot_prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_entity();
        self.clear_trade_id();
        self.clear_contract_id();
        self.clear_struct_id_link_id();
        self.clear_comp_typology();
        self.clear_pkg_typology();
        self.clear_cntrct_typology();
        self.clear_desk();
        self.clear_book();
        self.clear_folder();
        self.clear_trading_banking();
        self.clear_cntr_prty_grp_cd();
        self.clear_cntr_prty_chld_cd();
        self.clear_cntr_prty_name();
        self.clear_intrnl_extrnl();
        self.clear_trade_dt();
        self.clear_st_dt();
        self.clear_ed_dt();
        self.clear_ccy_pair();
        self.clear_rec_leg_ccy();
        self.clear_org_notional_rec_leg();
        self.clear_org_notional_rec_leg_inr();
        self.clear_ost_notional_rec_leg();
        self.clear_ost_notional_rec_leg_inr();
        self.clear_pay_leg_ccy();
        self.clear_org_notional_pay_leg();
        self.clear_org_notional_pay_leg_inr();
        self.clear_ost_notional_pay_leg();
        self.clear_ost_notional_pay_leg_inr();
        self.clear_deal_side();
        self.clear_pay_leg_idx();
        self.clear_pay_int_rt();
        self.clear_spread_pay_leg();
        self.clear_rec_leg_idx();
        self.clear_rec_int_rt();
        self.clear_spread_rec_leg();
        self.clear_rec_side_acrl_inr();
        self.clear_rec_side_mtm_inr();
        self.clear_future_cash_proceeds_ccy();
        self.clear_future_cash_proceeds_inr();
        self.clear_mrkt_val_financed();
        self.clear_net_mtm_usd();
        self.clear_net_mtm_inr();
        self.clear_pay_side_pv01_inr();
        self.clear_rec_side_pv01_inr();
        self.clear_net_pv01_inr();
        self.clear_pay_side_modified_duration();
        self.clear_receive_side_modified_duration();
        self.clear_modified_duration_deal();
        self.clear_pay_leg_exchange_rt();
        self.clear_rec_leg_exchange_rt();
        self.clear_pay_reset_dt();
        self.clear_rec_reset_dt();
        self.clear_pay_payment_dt();
        self.clear_rec_payment_dt();
        self.clear_index_rec_leg();
        self.clear_index_pay_leg();
        self.clear_day_count_cnvntn_rec_leg();
        self.clear_day_count_cnvntn_pay_leg();
        self.clear_pay_reset_freq();
        self.clear_rec_reset_freq();
        self.clear_pay_payment_freq();
        self.clear_rec_payment_freq();
        self.clear_deal_status();
        self.clear_flowtype();
        self.clear_flowtype1();
        self.clear_flowtype2();
        self.clear_flowtype3();
        self.clear_flowtype4();
        self.clear_flowamount();
        self.clear_cf_dt();
        self.clear_flow_ccy();
        self.clear_hkd_rt();
        self.clear_hkd_amt();
        self.clear_m_h_rep_dt2();
        self.clear_inr_amt();
        self.clear_inr_rt();
        self.clear_int_rt();
        self.clear_tot_int_amt();
        self.clear_tot_prin_amt();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rccy-irs.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\x01(\
    \x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prinAmt\
    \x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xe5\x17\n\x14AccountW\
    ithCashflows\x12\x16\n\x06entity\x18\x01\x20\x01(\tR\x06entity\x12\x19\n\
    \x08trade_id\x18\x02\x20\x01(\tR\x07tradeId\x12\x1f\n\x0bcontract_id\x18\
    \x03\x20\x01(\x03R\ncontractId\x12)\n\x11struct_id_link_id\x18\x04\x20\
    \x01(\x03R\x0estructIdLinkId\x12#\n\rcomp_typology\x18\x05\x20\x01(\tR\
    \x0ccompTypology\x12!\n\x0cpkg_typology\x18\x06\x20\x01(\tR\x0bpkgTypolo\
    gy\x12'\n\x0fcntrct_typology\x18\x07\x20\x01(\tR\x0ecntrctTypology\x12\
    \x12\n\x04desk\x18\x08\x20\x01(\tR\x04desk\x12\x12\n\x04book\x18\t\x20\
    \x01(\tR\x04book\x12\x16\n\x06folder\x18\n\x20\x01(\tR\x06folder\x12'\n\
    \x0ftrading_banking\x18\x0b\x20\x01(\tR\x0etradingBanking\x12'\n\x10cntr\
    _prty_grp_cd\x18\x0c\x20\x01(\tR\rcntrPrtyGrpCd\x12)\n\x11cntr_prty_chld\
    _cd\x18\r\x20\x01(\tR\x0ecntrPrtyChldCd\x12$\n\x0ecntr_prty_name\x18\x0e\
    \x20\x01(\tR\x0ccntrPrtyName\x12#\n\rintrnl_extrnl\x18\x0f\x20\x01(\tR\
    \x0cintrnlExtrnl\x12\x19\n\x08trade_dt\x18\x10\x20\x01(\x03R\x07tradeDt\
    \x12\x13\n\x05st_dt\x18\x11\x20\x01(\x03R\x04stDt\x12\x13\n\x05ed_dt\x18\
    \x12\x20\x01(\x03R\x04edDt\x12\x19\n\x08ccy_pair\x18\x13\x20\x01(\tR\x07\
    ccyPair\x12\x1e\n\x0brec_leg_ccy\x18\x14\x20\x01(\tR\trecLegCcy\x12/\n\
    \x14org_notional_rec_leg\x18\x15\x20\x01(\x01R\x11orgNotionalRecLeg\x126\
    \n\x18org_notional_rec_leg_inr\x18\x16\x20\x01(\x01R\x14orgNotionalRecLe\
    gInr\x12/\n\x14ost_notional_rec_leg\x18\x17\x20\x01(\x01R\x11ostNotional\
    RecLeg\x126\n\x18ost_notional_rec_leg_inr\x18\x18\x20\x01(\x01R\x14ostNo\
    tionalRecLegInr\x12\x1e\n\x0bpay_leg_ccy\x18\x19\x20\x01(\tR\tpayLegCcy\
    \x12/\n\x14org_notional_pay_leg\x18\x1a\x20\x01(\x01R\x11orgNotionalPayL\
    eg\x126\n\x18org_notional_pay_leg_inr\x18\x1b\x20\x01(\x01R\x14orgNotion\
    alPayLegInr\x12/\n\x14ost_notional_pay_leg\x18\x1c\x20\x01(\x01R\x11ostN\
    otionalPayLeg\x126\n\x18ost_notional_pay_leg_inr\x18\x1d\x20\x01(\x01R\
    \x14ostNotionalPayLegInr\x12\x1b\n\tdeal_side\x18\x1e\x20\x01(\tR\x08dea\
    lSide\x12\x1e\n\x0bpay_leg_idx\x18\x1f\x20\x01(\tR\tpayLegIdx\x12\x1c\n\
    \npay_int_rt\x18\x20\x20\x01(\x01R\x08payIntRt\x12$\n\x0espread_pay_leg\
    \x18!\x20\x01(\x01R\x0cspreadPayLeg\x12\x1e\n\x0brec_leg_idx\x18\"\x20\
    \x01(\tR\trecLegIdx\x12\x1c\n\nrec_int_rt\x18#\x20\x01(\x01R\x08recIntRt\
    \x12$\n\x0espread_rec_leg\x18$\x20\x01(\x01R\x0cspreadRecLeg\x12)\n\x11r\
    ec_side_acrl_inr\x18%\x20\x01(\x01R\x0erecSideAcrlInr\x12'\n\x10rec_side\
    _mtm_inr\x18&\x20\x01(\x01R\rrecSideMtmInr\x127\n\x18future_cash_proceed\
    s_ccy\x18'\x20\x01(\tR\x15futureCashProceedsCcy\x127\n\x18future_cash_pr\
    oceeds_inr\x18(\x20\x01(\x01R\x15futureCashProceedsInr\x12*\n\x11mrkt_va\
    l_financed\x18)\x20\x01(\x01R\x0fmrktValFinanced\x12\x1e\n\x0bnet_mtm_us\
    d\x18*\x20\x01(\x01R\tnetMtmUsd\x12\x1e\n\x0bnet_mtm_inr\x18+\x20\x01(\
    \x01R\tnetMtmInr\x12)\n\x11pay_side_pv01_inr\x18,\x20\x01(\x01R\x0epaySi\
    dePv01Inr\x12)\n\x11rec_side_pv01_inr\x18-\x20\x01(\x01R\x0erecSidePv01I\
    nr\x12\x20\n\x0cnet_pv01_inr\x18.\x20\x01(\x01R\nnetPv01Inr\x12;\n\x1apa\
    y_side_modified_duration\x18/\x20\x01(\x01R\x17paySideModifiedDuration\
    \x12C\n\x1ereceive_side_modified_duration\x180\x20\x01(\x01R\x1breceiveS\
    ideModifiedDuration\x124\n\x16modified_duration_deal\x181\x20\x01(\x01R\
    \x14modifiedDurationDeal\x12-\n\x13pay_leg_exchange_rt\x182\x20\x01(\x01\
    R\x10payLegExchangeRt\x12-\n\x13rec_leg_exchange_rt\x183\x20\x01(\x01R\
    \x10recLegExchangeRt\x12\x20\n\x0cpay_reset_dt\x184\x20\x01(\x03R\npayRe\
    setDt\x12\x20\n\x0crec_reset_dt\x185\x20\x01(\x03R\nrecResetDt\x12$\n\
    \x0epay_payment_dt\x186\x20\x01(\x03R\x0cpayPaymentDt\x12$\n\x0erec_paym\
    ent_dt\x187\x20\x01(\x03R\x0crecPaymentDt\x12\"\n\rindex_rec_leg\x188\
    \x20\x01(\tR\x0bindexRecLeg\x12\"\n\rindex_pay_leg\x189\x20\x01(\tR\x0bi\
    ndexPayLeg\x126\n\x18day_count_cnvntn_rec_leg\x18:\x20\x01(\tR\x14dayCou\
    ntCnvntnRecLeg\x126\n\x18day_count_cnvntn_pay_leg\x18;\x20\x01(\tR\x14da\
    yCountCnvntnPayLeg\x12$\n\x0epay_reset_freq\x18<\x20\x01(\tR\x0cpayReset\
    Freq\x12$\n\x0erec_reset_freq\x18=\x20\x01(\tR\x0crecResetFreq\x12(\n\
    \x10pay_payment_freq\x18>\x20\x01(\tR\x0epayPaymentFreq\x12(\n\x10rec_pa\
    yment_freq\x18?\x20\x01(\tR\x0erecPaymentFreq\x12\x1f\n\x0bdeal_status\
    \x18@\x20\x01(\tR\ndealStatus\x12\x1a\n\x08flowtype\x18A\x20\x01(\tR\x08\
    flowtype\x12\x1c\n\tflowtype1\x18B\x20\x01(\tR\tflowtype1\x12\x1c\n\tflo\
    wtype2\x18C\x20\x01(\tR\tflowtype2\x12\x1c\n\tflowtype3\x18D\x20\x01(\tR\
    \tflowtype3\x12\x1c\n\tflowtype4\x18E\x20\x01(\tR\tflowtype4\x12\x1e\n\n\
    flowamount\x18F\x20\x01(\x01R\nflowamount\x12\x13\n\x05cf_dt\x18G\x20\
    \x01(\x03R\x04cfDt\x12\x19\n\x08flow_ccy\x18H\x20\x01(\tR\x07flowCcy\x12\
    \x15\n\x06hkd_rt\x18I\x20\x01(\x01R\x05hkdRt\x12\x17\n\x07hkd_amt\x18J\
    \x20\x01(\x01R\x06hkdAmt\x12\x1d\n\x0bm_h_rep_dt2\x18K\x20\x01(\x03R\x08\
    mHRepDt2\x12\x17\n\x07inr_amt\x18L\x20\x01(\x01R\x06inrAmt\x12\x15\n\x06\
    inr_rt\x18M\x20\x01(\x01R\x05inrRt\x12\x15\n\x06int_rt\x18N\x20\x01(\x01\
    R\x05intRt\x12\x1e\n\x0btot_int_amt\x18O\x20\x01(\x01R\ttotIntAmt\x12\
    \x20\n\x0ctot_prin_amt\x18P\x20\x01(\x01R\ntotPrinAmt\x12'\n\tcashflows\
    \x18Q\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
