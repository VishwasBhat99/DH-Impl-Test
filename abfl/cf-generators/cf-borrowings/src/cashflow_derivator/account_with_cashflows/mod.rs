// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_amt",
                |m: &Cashflow| { &m.int_amt },
                |m: &mut Cashflow| { &mut m.int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "prin_amt",
                |m: &Cashflow| { &m.prin_amt },
                |m: &mut Cashflow| { &mut m.prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub cust_no: ::std::string::String,
    pub reference: ::std::string::String,
    pub cust_name: ::std::string::String,
    pub branch_cd: ::std::string::String,
    pub norm_int_rt: f64,
    pub acurl_freq: ::std::string::String,
    pub book_dt: i64,
    pub val_dt: i64,
    pub mat_dt: i64,
    pub due_dt: i64,
    pub user_def_stats: ::std::string::String,
    pub prod_cd: ::std::string::String,
    pub gl: i32,
    pub curr: ::std::string::String,
    pub prin_ost_bal: f64,
    pub component: ::std::string::String,
    pub amt_due: f64,
    pub amt_setld: f64,
    pub cf_amt: f64,
    pub spread: f64,
    pub bucket_category: ::std::string::String,
    pub is_secured: ::std::string::String,
    pub product_type: ::std::string::String,
    pub comp_perc: f64,
    pub old_rt_typ: ::std::string::String,
    pub old_benchmark: ::std::string::String,
    pub nxt_call_dt: i64,
    pub nxt_put_dt: i64,
    pub rt_flag_new: ::std::string::String,
    pub rt_cd_new: ::std::string::String,
    pub ucid: ::std::string::String,
    pub alm_line: ::std::string::String,
    pub ia_llg: ::std::string::String,
    pub balm_llg: ::std::string::String,
    pub coupon_freq: ::std::string::String,
    pub nxt_repricing_dt: i64,
    pub lst_repricing_dt: i64,
    pub as_on_dt: i64,
    pub int_basis: ::std::string::String,
    pub int_calc_typ: ::std::string::String,
    pub cust_typ: ::std::string::String,
    pub npa_typ: ::std::string::String,
    pub bmid: ::std::string::String,
    pub division: ::std::string::String,
    pub total_interest_amount: f64,
    pub total_principal_amount: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string cust_no = 1;


    pub fn get_cust_no(&self) -> &str {
        &self.cust_no
    }
    pub fn clear_cust_no(&mut self) {
        self.cust_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_no(&mut self, v: ::std::string::String) {
        self.cust_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_no(&mut self) -> &mut ::std::string::String {
        &mut self.cust_no
    }

    // Take field
    pub fn take_cust_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_no, ::std::string::String::new())
    }

    // string reference = 2;


    pub fn get_reference(&self) -> &str {
        &self.reference
    }
    pub fn clear_reference(&mut self) {
        self.reference.clear();
    }

    // Param is passed by value, moved
    pub fn set_reference(&mut self, v: ::std::string::String) {
        self.reference = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reference(&mut self) -> &mut ::std::string::String {
        &mut self.reference
    }

    // Take field
    pub fn take_reference(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reference, ::std::string::String::new())
    }

    // string cust_name = 3;


    pub fn get_cust_name(&self) -> &str {
        &self.cust_name
    }
    pub fn clear_cust_name(&mut self) {
        self.cust_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_name(&mut self, v: ::std::string::String) {
        self.cust_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_name
    }

    // Take field
    pub fn take_cust_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_name, ::std::string::String::new())
    }

    // string branch_cd = 4;


    pub fn get_branch_cd(&self) -> &str {
        &self.branch_cd
    }
    pub fn clear_branch_cd(&mut self) {
        self.branch_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch_cd(&mut self, v: ::std::string::String) {
        self.branch_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch_cd(&mut self) -> &mut ::std::string::String {
        &mut self.branch_cd
    }

    // Take field
    pub fn take_branch_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch_cd, ::std::string::String::new())
    }

    // double norm_int_rt = 5;


    pub fn get_norm_int_rt(&self) -> f64 {
        self.norm_int_rt
    }
    pub fn clear_norm_int_rt(&mut self) {
        self.norm_int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_norm_int_rt(&mut self, v: f64) {
        self.norm_int_rt = v;
    }

    // string acurl_freq = 6;


    pub fn get_acurl_freq(&self) -> &str {
        &self.acurl_freq
    }
    pub fn clear_acurl_freq(&mut self) {
        self.acurl_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_acurl_freq(&mut self, v: ::std::string::String) {
        self.acurl_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acurl_freq(&mut self) -> &mut ::std::string::String {
        &mut self.acurl_freq
    }

    // Take field
    pub fn take_acurl_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acurl_freq, ::std::string::String::new())
    }

    // int64 book_dt = 7;


    pub fn get_book_dt(&self) -> i64 {
        self.book_dt
    }
    pub fn clear_book_dt(&mut self) {
        self.book_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_book_dt(&mut self, v: i64) {
        self.book_dt = v;
    }

    // int64 val_dt = 8;


    pub fn get_val_dt(&self) -> i64 {
        self.val_dt
    }
    pub fn clear_val_dt(&mut self) {
        self.val_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_val_dt(&mut self, v: i64) {
        self.val_dt = v;
    }

    // int64 mat_dt = 9;


    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }
    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    // int64 due_dt = 10;


    pub fn get_due_dt(&self) -> i64 {
        self.due_dt
    }
    pub fn clear_due_dt(&mut self) {
        self.due_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_due_dt(&mut self, v: i64) {
        self.due_dt = v;
    }

    // string user_def_stats = 11;


    pub fn get_user_def_stats(&self) -> &str {
        &self.user_def_stats
    }
    pub fn clear_user_def_stats(&mut self) {
        self.user_def_stats.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_def_stats(&mut self, v: ::std::string::String) {
        self.user_def_stats = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_def_stats(&mut self) -> &mut ::std::string::String {
        &mut self.user_def_stats
    }

    // Take field
    pub fn take_user_def_stats(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.user_def_stats, ::std::string::String::new())
    }

    // string prod_cd = 12;


    pub fn get_prod_cd(&self) -> &str {
        &self.prod_cd
    }
    pub fn clear_prod_cd(&mut self) {
        self.prod_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_cd(&mut self, v: ::std::string::String) {
        self.prod_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_cd(&mut self) -> &mut ::std::string::String {
        &mut self.prod_cd
    }

    // Take field
    pub fn take_prod_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_cd, ::std::string::String::new())
    }

    // int32 gl = 13;


    pub fn get_gl(&self) -> i32 {
        self.gl
    }
    pub fn clear_gl(&mut self) {
        self.gl = 0;
    }

    // Param is passed by value, moved
    pub fn set_gl(&mut self, v: i32) {
        self.gl = v;
    }

    // string curr = 14;


    pub fn get_curr(&self) -> &str {
        &self.curr
    }
    pub fn clear_curr(&mut self) {
        self.curr.clear();
    }

    // Param is passed by value, moved
    pub fn set_curr(&mut self, v: ::std::string::String) {
        self.curr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_curr(&mut self) -> &mut ::std::string::String {
        &mut self.curr
    }

    // Take field
    pub fn take_curr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.curr, ::std::string::String::new())
    }

    // double prin_ost_bal = 15;


    pub fn get_prin_ost_bal(&self) -> f64 {
        self.prin_ost_bal
    }
    pub fn clear_prin_ost_bal(&mut self) {
        self.prin_ost_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_ost_bal(&mut self, v: f64) {
        self.prin_ost_bal = v;
    }

    // string component = 16;


    pub fn get_component(&self) -> &str {
        &self.component
    }
    pub fn clear_component(&mut self) {
        self.component.clear();
    }

    // Param is passed by value, moved
    pub fn set_component(&mut self, v: ::std::string::String) {
        self.component = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_component(&mut self) -> &mut ::std::string::String {
        &mut self.component
    }

    // Take field
    pub fn take_component(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.component, ::std::string::String::new())
    }

    // double amt_due = 17;


    pub fn get_amt_due(&self) -> f64 {
        self.amt_due
    }
    pub fn clear_amt_due(&mut self) {
        self.amt_due = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amt_due(&mut self, v: f64) {
        self.amt_due = v;
    }

    // double amt_setld = 18;


    pub fn get_amt_setld(&self) -> f64 {
        self.amt_setld
    }
    pub fn clear_amt_setld(&mut self) {
        self.amt_setld = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amt_setld(&mut self, v: f64) {
        self.amt_setld = v;
    }

    // double cf_amt = 19;


    pub fn get_cf_amt(&self) -> f64 {
        self.cf_amt
    }
    pub fn clear_cf_amt(&mut self) {
        self.cf_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cf_amt(&mut self, v: f64) {
        self.cf_amt = v;
    }

    // double spread = 20;


    pub fn get_spread(&self) -> f64 {
        self.spread
    }
    pub fn clear_spread(&mut self) {
        self.spread = 0.;
    }

    // Param is passed by value, moved
    pub fn set_spread(&mut self, v: f64) {
        self.spread = v;
    }

    // string bucket_category = 21;


    pub fn get_bucket_category(&self) -> &str {
        &self.bucket_category
    }
    pub fn clear_bucket_category(&mut self) {
        self.bucket_category.clear();
    }

    // Param is passed by value, moved
    pub fn set_bucket_category(&mut self, v: ::std::string::String) {
        self.bucket_category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bucket_category(&mut self) -> &mut ::std::string::String {
        &mut self.bucket_category
    }

    // Take field
    pub fn take_bucket_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bucket_category, ::std::string::String::new())
    }

    // string is_secured = 22;


    pub fn get_is_secured(&self) -> &str {
        &self.is_secured
    }
    pub fn clear_is_secured(&mut self) {
        self.is_secured.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_secured(&mut self, v: ::std::string::String) {
        self.is_secured = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_secured(&mut self) -> &mut ::std::string::String {
        &mut self.is_secured
    }

    // Take field
    pub fn take_is_secured(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_secured, ::std::string::String::new())
    }

    // string product_type = 23;


    pub fn get_product_type(&self) -> &str {
        &self.product_type
    }
    pub fn clear_product_type(&mut self) {
        self.product_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_type(&mut self, v: ::std::string::String) {
        self.product_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_type(&mut self) -> &mut ::std::string::String {
        &mut self.product_type
    }

    // Take field
    pub fn take_product_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_type, ::std::string::String::new())
    }

    // double comp_perc = 24;


    pub fn get_comp_perc(&self) -> f64 {
        self.comp_perc
    }
    pub fn clear_comp_perc(&mut self) {
        self.comp_perc = 0.;
    }

    // Param is passed by value, moved
    pub fn set_comp_perc(&mut self, v: f64) {
        self.comp_perc = v;
    }

    // string old_rt_typ = 25;


    pub fn get_old_rt_typ(&self) -> &str {
        &self.old_rt_typ
    }
    pub fn clear_old_rt_typ(&mut self) {
        self.old_rt_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_old_rt_typ(&mut self, v: ::std::string::String) {
        self.old_rt_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_old_rt_typ(&mut self) -> &mut ::std::string::String {
        &mut self.old_rt_typ
    }

    // Take field
    pub fn take_old_rt_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.old_rt_typ, ::std::string::String::new())
    }

    // string old_benchmark = 26;


    pub fn get_old_benchmark(&self) -> &str {
        &self.old_benchmark
    }
    pub fn clear_old_benchmark(&mut self) {
        self.old_benchmark.clear();
    }

    // Param is passed by value, moved
    pub fn set_old_benchmark(&mut self, v: ::std::string::String) {
        self.old_benchmark = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_old_benchmark(&mut self) -> &mut ::std::string::String {
        &mut self.old_benchmark
    }

    // Take field
    pub fn take_old_benchmark(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.old_benchmark, ::std::string::String::new())
    }

    // int64 nxt_call_dt = 27;


    pub fn get_nxt_call_dt(&self) -> i64 {
        self.nxt_call_dt
    }
    pub fn clear_nxt_call_dt(&mut self) {
        self.nxt_call_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_call_dt(&mut self, v: i64) {
        self.nxt_call_dt = v;
    }

    // int64 nxt_put_dt = 28;


    pub fn get_nxt_put_dt(&self) -> i64 {
        self.nxt_put_dt
    }
    pub fn clear_nxt_put_dt(&mut self) {
        self.nxt_put_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_put_dt(&mut self, v: i64) {
        self.nxt_put_dt = v;
    }

    // string rt_flag_new = 29;


    pub fn get_rt_flag_new(&self) -> &str {
        &self.rt_flag_new
    }
    pub fn clear_rt_flag_new(&mut self) {
        self.rt_flag_new.clear();
    }

    // Param is passed by value, moved
    pub fn set_rt_flag_new(&mut self, v: ::std::string::String) {
        self.rt_flag_new = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rt_flag_new(&mut self) -> &mut ::std::string::String {
        &mut self.rt_flag_new
    }

    // Take field
    pub fn take_rt_flag_new(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rt_flag_new, ::std::string::String::new())
    }

    // string rt_cd_new = 30;


    pub fn get_rt_cd_new(&self) -> &str {
        &self.rt_cd_new
    }
    pub fn clear_rt_cd_new(&mut self) {
        self.rt_cd_new.clear();
    }

    // Param is passed by value, moved
    pub fn set_rt_cd_new(&mut self, v: ::std::string::String) {
        self.rt_cd_new = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rt_cd_new(&mut self) -> &mut ::std::string::String {
        &mut self.rt_cd_new
    }

    // Take field
    pub fn take_rt_cd_new(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rt_cd_new, ::std::string::String::new())
    }

    // string ucid = 31;


    pub fn get_ucid(&self) -> &str {
        &self.ucid
    }
    pub fn clear_ucid(&mut self) {
        self.ucid.clear();
    }

    // Param is passed by value, moved
    pub fn set_ucid(&mut self, v: ::std::string::String) {
        self.ucid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ucid(&mut self) -> &mut ::std::string::String {
        &mut self.ucid
    }

    // Take field
    pub fn take_ucid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ucid, ::std::string::String::new())
    }

    // string alm_line = 32;


    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }
    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    // string ia_llg = 33;


    pub fn get_ia_llg(&self) -> &str {
        &self.ia_llg
    }
    pub fn clear_ia_llg(&mut self) {
        self.ia_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_ia_llg(&mut self, v: ::std::string::String) {
        self.ia_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ia_llg(&mut self) -> &mut ::std::string::String {
        &mut self.ia_llg
    }

    // Take field
    pub fn take_ia_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ia_llg, ::std::string::String::new())
    }

    // string balm_llg = 34;


    pub fn get_balm_llg(&self) -> &str {
        &self.balm_llg
    }
    pub fn clear_balm_llg(&mut self) {
        self.balm_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_balm_llg(&mut self, v: ::std::string::String) {
        self.balm_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balm_llg(&mut self) -> &mut ::std::string::String {
        &mut self.balm_llg
    }

    // Take field
    pub fn take_balm_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balm_llg, ::std::string::String::new())
    }

    // string coupon_freq = 35;


    pub fn get_coupon_freq(&self) -> &str {
        &self.coupon_freq
    }
    pub fn clear_coupon_freq(&mut self) {
        self.coupon_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_coupon_freq(&mut self, v: ::std::string::String) {
        self.coupon_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coupon_freq(&mut self) -> &mut ::std::string::String {
        &mut self.coupon_freq
    }

    // Take field
    pub fn take_coupon_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coupon_freq, ::std::string::String::new())
    }

    // int64 nxt_repricing_dt = 36;


    pub fn get_nxt_repricing_dt(&self) -> i64 {
        self.nxt_repricing_dt
    }
    pub fn clear_nxt_repricing_dt(&mut self) {
        self.nxt_repricing_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_repricing_dt(&mut self, v: i64) {
        self.nxt_repricing_dt = v;
    }

    // int64 lst_repricing_dt = 37;


    pub fn get_lst_repricing_dt(&self) -> i64 {
        self.lst_repricing_dt
    }
    pub fn clear_lst_repricing_dt(&mut self) {
        self.lst_repricing_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_lst_repricing_dt(&mut self, v: i64) {
        self.lst_repricing_dt = v;
    }

    // int64 as_on_dt = 38;


    pub fn get_as_on_dt(&self) -> i64 {
        self.as_on_dt
    }
    pub fn clear_as_on_dt(&mut self) {
        self.as_on_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on_dt(&mut self, v: i64) {
        self.as_on_dt = v;
    }

    // string int_basis = 39;


    pub fn get_int_basis(&self) -> &str {
        &self.int_basis
    }
    pub fn clear_int_basis(&mut self) {
        self.int_basis.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_basis(&mut self, v: ::std::string::String) {
        self.int_basis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_basis(&mut self) -> &mut ::std::string::String {
        &mut self.int_basis
    }

    // Take field
    pub fn take_int_basis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_basis, ::std::string::String::new())
    }

    // string int_calc_typ = 40;


    pub fn get_int_calc_typ(&self) -> &str {
        &self.int_calc_typ
    }
    pub fn clear_int_calc_typ(&mut self) {
        self.int_calc_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_calc_typ(&mut self, v: ::std::string::String) {
        self.int_calc_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_calc_typ(&mut self) -> &mut ::std::string::String {
        &mut self.int_calc_typ
    }

    // Take field
    pub fn take_int_calc_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_calc_typ, ::std::string::String::new())
    }

    // string cust_typ = 41;


    pub fn get_cust_typ(&self) -> &str {
        &self.cust_typ
    }
    pub fn clear_cust_typ(&mut self) {
        self.cust_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_typ(&mut self, v: ::std::string::String) {
        self.cust_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_typ(&mut self) -> &mut ::std::string::String {
        &mut self.cust_typ
    }

    // Take field
    pub fn take_cust_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_typ, ::std::string::String::new())
    }

    // string npa_typ = 42;


    pub fn get_npa_typ(&self) -> &str {
        &self.npa_typ
    }
    pub fn clear_npa_typ(&mut self) {
        self.npa_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_typ(&mut self, v: ::std::string::String) {
        self.npa_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_typ(&mut self) -> &mut ::std::string::String {
        &mut self.npa_typ
    }

    // Take field
    pub fn take_npa_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_typ, ::std::string::String::new())
    }

    // string bmid = 43;


    pub fn get_bmid(&self) -> &str {
        &self.bmid
    }
    pub fn clear_bmid(&mut self) {
        self.bmid.clear();
    }

    // Param is passed by value, moved
    pub fn set_bmid(&mut self, v: ::std::string::String) {
        self.bmid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bmid(&mut self) -> &mut ::std::string::String {
        &mut self.bmid
    }

    // Take field
    pub fn take_bmid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bmid, ::std::string::String::new())
    }

    // string division = 44;


    pub fn get_division(&self) -> &str {
        &self.division
    }
    pub fn clear_division(&mut self) {
        self.division.clear();
    }

    // Param is passed by value, moved
    pub fn set_division(&mut self, v: ::std::string::String) {
        self.division = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_division(&mut self) -> &mut ::std::string::String {
        &mut self.division
    }

    // Take field
    pub fn take_division(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.division, ::std::string::String::new())
    }

    // double total_interest_amount = 45;


    pub fn get_total_interest_amount(&self) -> f64 {
        self.total_interest_amount
    }
    pub fn clear_total_interest_amount(&mut self) {
        self.total_interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_amount(&mut self, v: f64) {
        self.total_interest_amount = v;
    }

    // double total_principal_amount = 46;


    pub fn get_total_principal_amount(&self) -> f64 {
        self.total_principal_amount
    }
    pub fn clear_total_principal_amount(&mut self) {
        self.total_principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_principal_amount(&mut self, v: f64) {
        self.total_principal_amount = v;
    }

    // repeated .Cashflow cashflows = 47;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_no)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reference)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch_cd)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.norm_int_rt = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acurl_freq)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.book_dt = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.val_dt = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.due_dt = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.user_def_stats)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_cd)?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.gl = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.curr)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_ost_bal = tmp;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.component)?;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amt_due = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amt_setld = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.cf_amt = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.spread = tmp;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bucket_category)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_secured)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product_type)?;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.comp_perc = tmp;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.old_rt_typ)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.old_benchmark)?;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_call_dt = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_put_dt = tmp;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rt_flag_new)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rt_cd_new)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ucid)?;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alm_line)?;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ia_llg)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.balm_llg)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coupon_freq)?;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_repricing_dt = tmp;
                },
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lst_repricing_dt = tmp;
                },
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on_dt = tmp;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_basis)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_calc_typ)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_typ)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa_typ)?;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bmid)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.division)?;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_amount = tmp;
                },
                46 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_principal_amount = tmp;
                },
                47 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cust_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cust_no);
        }
        if !self.reference.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.reference);
        }
        if !self.cust_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.cust_name);
        }
        if !self.branch_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.branch_cd);
        }
        if self.norm_int_rt != 0. {
            my_size += 9;
        }
        if !self.acurl_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.acurl_freq);
        }
        if self.book_dt != 0 {
            my_size += ::protobuf::rt::value_size(7, self.book_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.val_dt != 0 {
            my_size += ::protobuf::rt::value_size(8, self.val_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mat_dt != 0 {
            my_size += ::protobuf::rt::value_size(9, self.mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.due_dt != 0 {
            my_size += ::protobuf::rt::value_size(10, self.due_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.user_def_stats.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.user_def_stats);
        }
        if !self.prod_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.prod_cd);
        }
        if self.gl != 0 {
            my_size += ::protobuf::rt::value_size(13, self.gl, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.curr.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.curr);
        }
        if self.prin_ost_bal != 0. {
            my_size += 9;
        }
        if !self.component.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.component);
        }
        if self.amt_due != 0. {
            my_size += 10;
        }
        if self.amt_setld != 0. {
            my_size += 10;
        }
        if self.cf_amt != 0. {
            my_size += 10;
        }
        if self.spread != 0. {
            my_size += 10;
        }
        if !self.bucket_category.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.bucket_category);
        }
        if !self.is_secured.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.is_secured);
        }
        if !self.product_type.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.product_type);
        }
        if self.comp_perc != 0. {
            my_size += 10;
        }
        if !self.old_rt_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.old_rt_typ);
        }
        if !self.old_benchmark.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.old_benchmark);
        }
        if self.nxt_call_dt != 0 {
            my_size += ::protobuf::rt::value_size(27, self.nxt_call_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.nxt_put_dt != 0 {
            my_size += ::protobuf::rt::value_size(28, self.nxt_put_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.rt_flag_new.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.rt_flag_new);
        }
        if !self.rt_cd_new.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.rt_cd_new);
        }
        if !self.ucid.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.ucid);
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.alm_line);
        }
        if !self.ia_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.ia_llg);
        }
        if !self.balm_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.balm_llg);
        }
        if !self.coupon_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.coupon_freq);
        }
        if self.nxt_repricing_dt != 0 {
            my_size += ::protobuf::rt::value_size(36, self.nxt_repricing_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lst_repricing_dt != 0 {
            my_size += ::protobuf::rt::value_size(37, self.lst_repricing_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.as_on_dt != 0 {
            my_size += ::protobuf::rt::value_size(38, self.as_on_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.int_basis.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.int_basis);
        }
        if !self.int_calc_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.int_calc_typ);
        }
        if !self.cust_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.cust_typ);
        }
        if !self.npa_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.npa_typ);
        }
        if !self.bmid.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.bmid);
        }
        if !self.division.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.division);
        }
        if self.total_interest_amount != 0. {
            my_size += 10;
        }
        if self.total_principal_amount != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.cust_no.is_empty() {
            os.write_string(1, &self.cust_no)?;
        }
        if !self.reference.is_empty() {
            os.write_string(2, &self.reference)?;
        }
        if !self.cust_name.is_empty() {
            os.write_string(3, &self.cust_name)?;
        }
        if !self.branch_cd.is_empty() {
            os.write_string(4, &self.branch_cd)?;
        }
        if self.norm_int_rt != 0. {
            os.write_double(5, self.norm_int_rt)?;
        }
        if !self.acurl_freq.is_empty() {
            os.write_string(6, &self.acurl_freq)?;
        }
        if self.book_dt != 0 {
            os.write_int64(7, self.book_dt)?;
        }
        if self.val_dt != 0 {
            os.write_int64(8, self.val_dt)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(9, self.mat_dt)?;
        }
        if self.due_dt != 0 {
            os.write_int64(10, self.due_dt)?;
        }
        if !self.user_def_stats.is_empty() {
            os.write_string(11, &self.user_def_stats)?;
        }
        if !self.prod_cd.is_empty() {
            os.write_string(12, &self.prod_cd)?;
        }
        if self.gl != 0 {
            os.write_int32(13, self.gl)?;
        }
        if !self.curr.is_empty() {
            os.write_string(14, &self.curr)?;
        }
        if self.prin_ost_bal != 0. {
            os.write_double(15, self.prin_ost_bal)?;
        }
        if !self.component.is_empty() {
            os.write_string(16, &self.component)?;
        }
        if self.amt_due != 0. {
            os.write_double(17, self.amt_due)?;
        }
        if self.amt_setld != 0. {
            os.write_double(18, self.amt_setld)?;
        }
        if self.cf_amt != 0. {
            os.write_double(19, self.cf_amt)?;
        }
        if self.spread != 0. {
            os.write_double(20, self.spread)?;
        }
        if !self.bucket_category.is_empty() {
            os.write_string(21, &self.bucket_category)?;
        }
        if !self.is_secured.is_empty() {
            os.write_string(22, &self.is_secured)?;
        }
        if !self.product_type.is_empty() {
            os.write_string(23, &self.product_type)?;
        }
        if self.comp_perc != 0. {
            os.write_double(24, self.comp_perc)?;
        }
        if !self.old_rt_typ.is_empty() {
            os.write_string(25, &self.old_rt_typ)?;
        }
        if !self.old_benchmark.is_empty() {
            os.write_string(26, &self.old_benchmark)?;
        }
        if self.nxt_call_dt != 0 {
            os.write_int64(27, self.nxt_call_dt)?;
        }
        if self.nxt_put_dt != 0 {
            os.write_int64(28, self.nxt_put_dt)?;
        }
        if !self.rt_flag_new.is_empty() {
            os.write_string(29, &self.rt_flag_new)?;
        }
        if !self.rt_cd_new.is_empty() {
            os.write_string(30, &self.rt_cd_new)?;
        }
        if !self.ucid.is_empty() {
            os.write_string(31, &self.ucid)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(32, &self.alm_line)?;
        }
        if !self.ia_llg.is_empty() {
            os.write_string(33, &self.ia_llg)?;
        }
        if !self.balm_llg.is_empty() {
            os.write_string(34, &self.balm_llg)?;
        }
        if !self.coupon_freq.is_empty() {
            os.write_string(35, &self.coupon_freq)?;
        }
        if self.nxt_repricing_dt != 0 {
            os.write_int64(36, self.nxt_repricing_dt)?;
        }
        if self.lst_repricing_dt != 0 {
            os.write_int64(37, self.lst_repricing_dt)?;
        }
        if self.as_on_dt != 0 {
            os.write_int64(38, self.as_on_dt)?;
        }
        if !self.int_basis.is_empty() {
            os.write_string(39, &self.int_basis)?;
        }
        if !self.int_calc_typ.is_empty() {
            os.write_string(40, &self.int_calc_typ)?;
        }
        if !self.cust_typ.is_empty() {
            os.write_string(41, &self.cust_typ)?;
        }
        if !self.npa_typ.is_empty() {
            os.write_string(42, &self.npa_typ)?;
        }
        if !self.bmid.is_empty() {
            os.write_string(43, &self.bmid)?;
        }
        if !self.division.is_empty() {
            os.write_string(44, &self.division)?;
        }
        if self.total_interest_amount != 0. {
            os.write_double(45, self.total_interest_amount)?;
        }
        if self.total_principal_amount != 0. {
            os.write_double(46, self.total_principal_amount)?;
        }
        for v in &self.cashflows {
            os.write_tag(47, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_no",
                |m: &AccountWithCashflows| { &m.cust_no },
                |m: &mut AccountWithCashflows| { &mut m.cust_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reference",
                |m: &AccountWithCashflows| { &m.reference },
                |m: &mut AccountWithCashflows| { &mut m.reference },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_name",
                |m: &AccountWithCashflows| { &m.cust_name },
                |m: &mut AccountWithCashflows| { &mut m.cust_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "branch_cd",
                |m: &AccountWithCashflows| { &m.branch_cd },
                |m: &mut AccountWithCashflows| { &mut m.branch_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "norm_int_rt",
                |m: &AccountWithCashflows| { &m.norm_int_rt },
                |m: &mut AccountWithCashflows| { &mut m.norm_int_rt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acurl_freq",
                |m: &AccountWithCashflows| { &m.acurl_freq },
                |m: &mut AccountWithCashflows| { &mut m.acurl_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "book_dt",
                |m: &AccountWithCashflows| { &m.book_dt },
                |m: &mut AccountWithCashflows| { &mut m.book_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "val_dt",
                |m: &AccountWithCashflows| { &m.val_dt },
                |m: &mut AccountWithCashflows| { &mut m.val_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "mat_dt",
                |m: &AccountWithCashflows| { &m.mat_dt },
                |m: &mut AccountWithCashflows| { &mut m.mat_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "due_dt",
                |m: &AccountWithCashflows| { &m.due_dt },
                |m: &mut AccountWithCashflows| { &mut m.due_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "user_def_stats",
                |m: &AccountWithCashflows| { &m.user_def_stats },
                |m: &mut AccountWithCashflows| { &mut m.user_def_stats },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prod_cd",
                |m: &AccountWithCashflows| { &m.prod_cd },
                |m: &mut AccountWithCashflows| { &mut m.prod_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "gl",
                |m: &AccountWithCashflows| { &m.gl },
                |m: &mut AccountWithCashflows| { &mut m.gl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "curr",
                |m: &AccountWithCashflows| { &m.curr },
                |m: &mut AccountWithCashflows| { &mut m.curr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "prin_ost_bal",
                |m: &AccountWithCashflows| { &m.prin_ost_bal },
                |m: &mut AccountWithCashflows| { &mut m.prin_ost_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "component",
                |m: &AccountWithCashflows| { &m.component },
                |m: &mut AccountWithCashflows| { &mut m.component },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "amt_due",
                |m: &AccountWithCashflows| { &m.amt_due },
                |m: &mut AccountWithCashflows| { &mut m.amt_due },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "amt_setld",
                |m: &AccountWithCashflows| { &m.amt_setld },
                |m: &mut AccountWithCashflows| { &mut m.amt_setld },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "cf_amt",
                |m: &AccountWithCashflows| { &m.cf_amt },
                |m: &mut AccountWithCashflows| { &mut m.cf_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "spread",
                |m: &AccountWithCashflows| { &m.spread },
                |m: &mut AccountWithCashflows| { &mut m.spread },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bucket_category",
                |m: &AccountWithCashflows| { &m.bucket_category },
                |m: &mut AccountWithCashflows| { &mut m.bucket_category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "is_secured",
                |m: &AccountWithCashflows| { &m.is_secured },
                |m: &mut AccountWithCashflows| { &mut m.is_secured },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "product_type",
                |m: &AccountWithCashflows| { &m.product_type },
                |m: &mut AccountWithCashflows| { &mut m.product_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "comp_perc",
                |m: &AccountWithCashflows| { &m.comp_perc },
                |m: &mut AccountWithCashflows| { &mut m.comp_perc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "old_rt_typ",
                |m: &AccountWithCashflows| { &m.old_rt_typ },
                |m: &mut AccountWithCashflows| { &mut m.old_rt_typ },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "old_benchmark",
                |m: &AccountWithCashflows| { &m.old_benchmark },
                |m: &mut AccountWithCashflows| { &mut m.old_benchmark },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "nxt_call_dt",
                |m: &AccountWithCashflows| { &m.nxt_call_dt },
                |m: &mut AccountWithCashflows| { &mut m.nxt_call_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "nxt_put_dt",
                |m: &AccountWithCashflows| { &m.nxt_put_dt },
                |m: &mut AccountWithCashflows| { &mut m.nxt_put_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rt_flag_new",
                |m: &AccountWithCashflows| { &m.rt_flag_new },
                |m: &mut AccountWithCashflows| { &mut m.rt_flag_new },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rt_cd_new",
                |m: &AccountWithCashflows| { &m.rt_cd_new },
                |m: &mut AccountWithCashflows| { &mut m.rt_cd_new },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ucid",
                |m: &AccountWithCashflows| { &m.ucid },
                |m: &mut AccountWithCashflows| { &mut m.ucid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "alm_line",
                |m: &AccountWithCashflows| { &m.alm_line },
                |m: &mut AccountWithCashflows| { &mut m.alm_line },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ia_llg",
                |m: &AccountWithCashflows| { &m.ia_llg },
                |m: &mut AccountWithCashflows| { &mut m.ia_llg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "balm_llg",
                |m: &AccountWithCashflows| { &m.balm_llg },
                |m: &mut AccountWithCashflows| { &mut m.balm_llg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "coupon_freq",
                |m: &AccountWithCashflows| { &m.coupon_freq },
                |m: &mut AccountWithCashflows| { &mut m.coupon_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "nxt_repricing_dt",
                |m: &AccountWithCashflows| { &m.nxt_repricing_dt },
                |m: &mut AccountWithCashflows| { &mut m.nxt_repricing_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "lst_repricing_dt",
                |m: &AccountWithCashflows| { &m.lst_repricing_dt },
                |m: &mut AccountWithCashflows| { &mut m.lst_repricing_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "as_on_dt",
                |m: &AccountWithCashflows| { &m.as_on_dt },
                |m: &mut AccountWithCashflows| { &mut m.as_on_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_basis",
                |m: &AccountWithCashflows| { &m.int_basis },
                |m: &mut AccountWithCashflows| { &mut m.int_basis },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_calc_typ",
                |m: &AccountWithCashflows| { &m.int_calc_typ },
                |m: &mut AccountWithCashflows| { &mut m.int_calc_typ },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_typ",
                |m: &AccountWithCashflows| { &m.cust_typ },
                |m: &mut AccountWithCashflows| { &mut m.cust_typ },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "npa_typ",
                |m: &AccountWithCashflows| { &m.npa_typ },
                |m: &mut AccountWithCashflows| { &mut m.npa_typ },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bmid",
                |m: &AccountWithCashflows| { &m.bmid },
                |m: &mut AccountWithCashflows| { &mut m.bmid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "division",
                |m: &AccountWithCashflows| { &m.division },
                |m: &mut AccountWithCashflows| { &mut m.division },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "total_interest_amount",
                |m: &AccountWithCashflows| { &m.total_interest_amount },
                |m: &mut AccountWithCashflows| { &mut m.total_interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "total_principal_amount",
                |m: &AccountWithCashflows| { &m.total_principal_amount },
                |m: &mut AccountWithCashflows| { &mut m.total_principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.cust_no.clear();
        self.reference.clear();
        self.cust_name.clear();
        self.branch_cd.clear();
        self.norm_int_rt = 0.;
        self.acurl_freq.clear();
        self.book_dt = 0;
        self.val_dt = 0;
        self.mat_dt = 0;
        self.due_dt = 0;
        self.user_def_stats.clear();
        self.prod_cd.clear();
        self.gl = 0;
        self.curr.clear();
        self.prin_ost_bal = 0.;
        self.component.clear();
        self.amt_due = 0.;
        self.amt_setld = 0.;
        self.cf_amt = 0.;
        self.spread = 0.;
        self.bucket_category.clear();
        self.is_secured.clear();
        self.product_type.clear();
        self.comp_perc = 0.;
        self.old_rt_typ.clear();
        self.old_benchmark.clear();
        self.nxt_call_dt = 0;
        self.nxt_put_dt = 0;
        self.rt_flag_new.clear();
        self.rt_cd_new.clear();
        self.ucid.clear();
        self.alm_line.clear();
        self.ia_llg.clear();
        self.balm_llg.clear();
        self.coupon_freq.clear();
        self.nxt_repricing_dt = 0;
        self.lst_repricing_dt = 0;
        self.as_on_dt = 0;
        self.int_basis.clear();
        self.int_calc_typ.clear();
        self.cust_typ.clear();
        self.npa_typ.clear();
        self.bmid.clear();
        self.division.clear();
        self.total_interest_amount = 0.;
        self.total_principal_amount = 0.;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bdummy.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\x01(\
    \x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prinAmt\
    \x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\x97\x0b\n\x14AccountW\
    ithCashflows\x12\x17\n\x07cust_no\x18\x01\x20\x01(\tR\x06custNo\x12\x1c\
    \n\treference\x18\x02\x20\x01(\tR\treference\x12\x1b\n\tcust_name\x18\
    \x03\x20\x01(\tR\x08custName\x12\x1b\n\tbranch_cd\x18\x04\x20\x01(\tR\
    \x08branchCd\x12\x1e\n\x0bnorm_int_rt\x18\x05\x20\x01(\x01R\tnormIntRt\
    \x12\x1d\n\nacurl_freq\x18\x06\x20\x01(\tR\tacurlFreq\x12\x17\n\x07book_\
    dt\x18\x07\x20\x01(\x03R\x06bookDt\x12\x15\n\x06val_dt\x18\x08\x20\x01(\
    \x03R\x05valDt\x12\x15\n\x06mat_dt\x18\t\x20\x01(\x03R\x05matDt\x12\x15\
    \n\x06due_dt\x18\n\x20\x01(\x03R\x05dueDt\x12$\n\x0euser_def_stats\x18\
    \x0b\x20\x01(\tR\x0cuserDefStats\x12\x17\n\x07prod_cd\x18\x0c\x20\x01(\t\
    R\x06prodCd\x12\x0e\n\x02gl\x18\r\x20\x01(\x05R\x02gl\x12\x12\n\x04curr\
    \x18\x0e\x20\x01(\tR\x04curr\x12\x20\n\x0cprin_ost_bal\x18\x0f\x20\x01(\
    \x01R\nprinOstBal\x12\x1c\n\tcomponent\x18\x10\x20\x01(\tR\tcomponent\
    \x12\x17\n\x07amt_due\x18\x11\x20\x01(\x01R\x06amtDue\x12\x1b\n\tamt_set\
    ld\x18\x12\x20\x01(\x01R\x08amtSetld\x12\x15\n\x06cf_amt\x18\x13\x20\x01\
    (\x01R\x05cfAmt\x12\x16\n\x06spread\x18\x14\x20\x01(\x01R\x06spread\x12'\
    \n\x0fbucket_category\x18\x15\x20\x01(\tR\x0ebucketCategory\x12\x1d\n\ni\
    s_secured\x18\x16\x20\x01(\tR\tisSecured\x12!\n\x0cproduct_type\x18\x17\
    \x20\x01(\tR\x0bproductType\x12\x1b\n\tcomp_perc\x18\x18\x20\x01(\x01R\
    \x08compPerc\x12\x1c\n\nold_rt_typ\x18\x19\x20\x01(\tR\x08oldRtTyp\x12#\
    \n\rold_benchmark\x18\x1a\x20\x01(\tR\x0coldBenchmark\x12\x1e\n\x0bnxt_c\
    all_dt\x18\x1b\x20\x01(\x03R\tnxtCallDt\x12\x1c\n\nnxt_put_dt\x18\x1c\
    \x20\x01(\x03R\x08nxtPutDt\x12\x1e\n\x0brt_flag_new\x18\x1d\x20\x01(\tR\
    \trtFlagNew\x12\x1a\n\trt_cd_new\x18\x1e\x20\x01(\tR\x07rtCdNew\x12\x12\
    \n\x04ucid\x18\x1f\x20\x01(\tR\x04ucid\x12\x19\n\x08alm_line\x18\x20\x20\
    \x01(\tR\x07almLine\x12\x15\n\x06ia_llg\x18!\x20\x01(\tR\x05iaLlg\x12\
    \x19\n\x08balm_llg\x18\"\x20\x01(\tR\x07balmLlg\x12\x1f\n\x0bcoupon_freq\
    \x18#\x20\x01(\tR\ncouponFreq\x12(\n\x10nxt_repricing_dt\x18$\x20\x01(\
    \x03R\x0enxtRepricingDt\x12(\n\x10lst_repricing_dt\x18%\x20\x01(\x03R\
    \x0elstRepricingDt\x12\x18\n\x08as_on_dt\x18&\x20\x01(\x03R\x06asOnDt\
    \x12\x1b\n\tint_basis\x18'\x20\x01(\tR\x08intBasis\x12\x20\n\x0cint_calc\
    _typ\x18(\x20\x01(\tR\nintCalcTyp\x12\x19\n\x08cust_typ\x18)\x20\x01(\tR\
    \x07custTyp\x12\x17\n\x07npa_typ\x18*\x20\x01(\tR\x06npaTyp\x12\x12\n\
    \x04bmid\x18+\x20\x01(\tR\x04bmid\x12\x1a\n\x08division\x18,\x20\x01(\tR\
    \x08division\x122\n\x15total_interest_amount\x18-\x20\x01(\x01R\x13total\
    InterestAmount\x124\n\x16total_principal_amount\x18.\x20\x01(\x01R\x14to\
    talPrincipalAmount\x12'\n\tcashflows\x18/\x20\x03(\x0b2\t.CashflowR\tcas\
    hflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
