// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashFlows {
    // message fields
    pub acid: ::std::string::String,
    pub foracid: ::std::string::String,
    pub sol_id: ::std::string::String,
    pub acct_opn_date: i64,
    pub gl_sub_head_code: ::std::string::String,
    pub schm_code: ::std::string::String,
    pub schm_type: ::std::string::String,
    pub acct_crncy_code: ::std::string::String,
    pub rep_shdl_num: i64,
    pub rep_shdl_date: i64,
    pub dis_shdl_num: i64,
    pub dis_shdl_date: i64,
    pub dis_amt: f64,
    pub clr_bal_amt: f64,
    pub sanct_lim: f64,
    pub rephasement_principal: f64,
    pub ei_perd_end_date: i64,
    pub cust_id: ::std::string::String,
    pub cust_name: ::std::string::String,
    pub ei_schm_flg: ::std::string::String,
    pub int_basis: ::std::string::String,
    pub ei_formula_flg: ::std::string::String,
    pub ei_intcalc_freq: ::std::string::String,
    pub ei_method: ::std::string::String,
    pub int_rate: f64,
    pub int_type: ::std::string::String,
    pub next_repricing_date: i64,
    pub last_repricing_date: i64,
    pub repricing_freq: ::std::string::String,
    pub float_rate_benchmark: ::std::string::String,
    pub spread: f64,
    pub npa_flg: ::std::string::String,
    pub npa_classification: ::std::string::String,
    pub npa_amt: f64,
    pub cust_country_id: ::std::string::String,
    pub cust_credit_rating: ::std::string::String,
    pub cust_sector_cd: ::std::string::String,
    pub cust_industry_cd: ::std::string::String,
    pub exchangert: f64,
    pub contractual_maturity_days: i64,
    pub residual_maturity_days: i64,
    pub custom1: ::std::string::String,
    pub custom2: ::std::string::String,
    pub custom3: ::std::string::String,
    pub gnt_type: ::std::string::String,
    pub status_code: ::std::string::String,
    pub occupation_code: ::std::string::String,
    pub sector: ::std::string::String,
    pub sector_code: ::std::string::String,
    pub subsector_code: ::std::string::String,
    pub staffflag: ::std::string::String,
    pub cre_free_text_1: ::std::string::String,
    pub prov_perc: i64,
    pub ltv: f64,
    pub npa_prov: f64,
    pub dumm3: ::std::string::String,
    pub dumm4: ::std::string::String,
    pub dumm5: ::std::string::String,
    pub dumm6: ::std::string::String,
    pub dumm7: ::std::string::String,
    pub dumm8: f64,
    pub dumm9: f64,
    pub dumm10: f64,
    pub constcatgorycode: ::std::string::String,
    pub ratingagc: ::std::string::String,
    pub rating: ::std::string::String,
    pub supperannuation_flag: ::std::string::String,
    pub turn_amt1: f64,
    pub turn_amt2: f64,
    pub turn_amt3: f64,
    pub ftp_char1: ::std::string::String,
    pub ftp_char2: ::std::string::String,
    pub ftp_amt1: f64,
    pub ftp_amt2: f64,
    pub ftp_date1: i64,
    pub ftp_date2: i64,
    pub is_cf_overdue: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashFlows {
    fn default() -> &'a AccountWithCashFlows {
        <AccountWithCashFlows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashFlows {
    pub fn new() -> AccountWithCashFlows {
        ::std::default::Default::default()
    }

    // string acid = 1;


    pub fn get_acid(&self) -> &str {
        &self.acid
    }
    pub fn clear_acid(&mut self) {
        self.acid.clear();
    }

    // Param is passed by value, moved
    pub fn set_acid(&mut self, v: ::std::string::String) {
        self.acid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acid(&mut self) -> &mut ::std::string::String {
        &mut self.acid
    }

    // Take field
    pub fn take_acid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acid, ::std::string::String::new())
    }

    // string foracid = 2;


    pub fn get_foracid(&self) -> &str {
        &self.foracid
    }
    pub fn clear_foracid(&mut self) {
        self.foracid.clear();
    }

    // Param is passed by value, moved
    pub fn set_foracid(&mut self, v: ::std::string::String) {
        self.foracid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_foracid(&mut self) -> &mut ::std::string::String {
        &mut self.foracid
    }

    // Take field
    pub fn take_foracid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.foracid, ::std::string::String::new())
    }

    // string sol_id = 3;


    pub fn get_sol_id(&self) -> &str {
        &self.sol_id
    }
    pub fn clear_sol_id(&mut self) {
        self.sol_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_sol_id(&mut self, v: ::std::string::String) {
        self.sol_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sol_id(&mut self) -> &mut ::std::string::String {
        &mut self.sol_id
    }

    // Take field
    pub fn take_sol_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sol_id, ::std::string::String::new())
    }

    // int64 acct_opn_date = 4;


    pub fn get_acct_opn_date(&self) -> i64 {
        self.acct_opn_date
    }
    pub fn clear_acct_opn_date(&mut self) {
        self.acct_opn_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_acct_opn_date(&mut self, v: i64) {
        self.acct_opn_date = v;
    }

    // string gl_sub_head_code = 5;


    pub fn get_gl_sub_head_code(&self) -> &str {
        &self.gl_sub_head_code
    }
    pub fn clear_gl_sub_head_code(&mut self) {
        self.gl_sub_head_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_sub_head_code(&mut self, v: ::std::string::String) {
        self.gl_sub_head_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_sub_head_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_sub_head_code
    }

    // Take field
    pub fn take_gl_sub_head_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_sub_head_code, ::std::string::String::new())
    }

    // string schm_code = 6;


    pub fn get_schm_code(&self) -> &str {
        &self.schm_code
    }
    pub fn clear_schm_code(&mut self) {
        self.schm_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_schm_code(&mut self, v: ::std::string::String) {
        self.schm_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schm_code(&mut self) -> &mut ::std::string::String {
        &mut self.schm_code
    }

    // Take field
    pub fn take_schm_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schm_code, ::std::string::String::new())
    }

    // string schm_type = 7;


    pub fn get_schm_type(&self) -> &str {
        &self.schm_type
    }
    pub fn clear_schm_type(&mut self) {
        self.schm_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_schm_type(&mut self, v: ::std::string::String) {
        self.schm_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schm_type(&mut self) -> &mut ::std::string::String {
        &mut self.schm_type
    }

    // Take field
    pub fn take_schm_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schm_type, ::std::string::String::new())
    }

    // string acct_crncy_code = 8;


    pub fn get_acct_crncy_code(&self) -> &str {
        &self.acct_crncy_code
    }
    pub fn clear_acct_crncy_code(&mut self) {
        self.acct_crncy_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_acct_crncy_code(&mut self, v: ::std::string::String) {
        self.acct_crncy_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acct_crncy_code(&mut self) -> &mut ::std::string::String {
        &mut self.acct_crncy_code
    }

    // Take field
    pub fn take_acct_crncy_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acct_crncy_code, ::std::string::String::new())
    }

    // int64 rep_shdl_num = 9;


    pub fn get_rep_shdl_num(&self) -> i64 {
        self.rep_shdl_num
    }
    pub fn clear_rep_shdl_num(&mut self) {
        self.rep_shdl_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_rep_shdl_num(&mut self, v: i64) {
        self.rep_shdl_num = v;
    }

    // int64 rep_shdl_date = 10;


    pub fn get_rep_shdl_date(&self) -> i64 {
        self.rep_shdl_date
    }
    pub fn clear_rep_shdl_date(&mut self) {
        self.rep_shdl_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_rep_shdl_date(&mut self, v: i64) {
        self.rep_shdl_date = v;
    }

    // int64 dis_shdl_num = 11;


    pub fn get_dis_shdl_num(&self) -> i64 {
        self.dis_shdl_num
    }
    pub fn clear_dis_shdl_num(&mut self) {
        self.dis_shdl_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_dis_shdl_num(&mut self, v: i64) {
        self.dis_shdl_num = v;
    }

    // int64 dis_shdl_date = 12;


    pub fn get_dis_shdl_date(&self) -> i64 {
        self.dis_shdl_date
    }
    pub fn clear_dis_shdl_date(&mut self) {
        self.dis_shdl_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_dis_shdl_date(&mut self, v: i64) {
        self.dis_shdl_date = v;
    }

    // double dis_amt = 13;


    pub fn get_dis_amt(&self) -> f64 {
        self.dis_amt
    }
    pub fn clear_dis_amt(&mut self) {
        self.dis_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dis_amt(&mut self, v: f64) {
        self.dis_amt = v;
    }

    // double clr_bal_amt = 14;


    pub fn get_clr_bal_amt(&self) -> f64 {
        self.clr_bal_amt
    }
    pub fn clear_clr_bal_amt(&mut self) {
        self.clr_bal_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_clr_bal_amt(&mut self, v: f64) {
        self.clr_bal_amt = v;
    }

    // double sanct_lim = 15;


    pub fn get_sanct_lim(&self) -> f64 {
        self.sanct_lim
    }
    pub fn clear_sanct_lim(&mut self) {
        self.sanct_lim = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sanct_lim(&mut self, v: f64) {
        self.sanct_lim = v;
    }

    // double rephasement_principal = 16;


    pub fn get_rephasement_principal(&self) -> f64 {
        self.rephasement_principal
    }
    pub fn clear_rephasement_principal(&mut self) {
        self.rephasement_principal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rephasement_principal(&mut self, v: f64) {
        self.rephasement_principal = v;
    }

    // int64 ei_perd_end_date = 17;


    pub fn get_ei_perd_end_date(&self) -> i64 {
        self.ei_perd_end_date
    }
    pub fn clear_ei_perd_end_date(&mut self) {
        self.ei_perd_end_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_ei_perd_end_date(&mut self, v: i64) {
        self.ei_perd_end_date = v;
    }

    // string cust_id = 18;


    pub fn get_cust_id(&self) -> &str {
        &self.cust_id
    }
    pub fn clear_cust_id(&mut self) {
        self.cust_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: ::std::string::String) {
        self.cust_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_id
    }

    // Take field
    pub fn take_cust_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_id, ::std::string::String::new())
    }

    // string cust_name = 19;


    pub fn get_cust_name(&self) -> &str {
        &self.cust_name
    }
    pub fn clear_cust_name(&mut self) {
        self.cust_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_name(&mut self, v: ::std::string::String) {
        self.cust_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_name
    }

    // Take field
    pub fn take_cust_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_name, ::std::string::String::new())
    }

    // string ei_schm_flg = 20;


    pub fn get_ei_schm_flg(&self) -> &str {
        &self.ei_schm_flg
    }
    pub fn clear_ei_schm_flg(&mut self) {
        self.ei_schm_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_ei_schm_flg(&mut self, v: ::std::string::String) {
        self.ei_schm_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ei_schm_flg(&mut self) -> &mut ::std::string::String {
        &mut self.ei_schm_flg
    }

    // Take field
    pub fn take_ei_schm_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ei_schm_flg, ::std::string::String::new())
    }

    // string int_basis = 21;


    pub fn get_int_basis(&self) -> &str {
        &self.int_basis
    }
    pub fn clear_int_basis(&mut self) {
        self.int_basis.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_basis(&mut self, v: ::std::string::String) {
        self.int_basis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_basis(&mut self) -> &mut ::std::string::String {
        &mut self.int_basis
    }

    // Take field
    pub fn take_int_basis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_basis, ::std::string::String::new())
    }

    // string ei_formula_flg = 22;


    pub fn get_ei_formula_flg(&self) -> &str {
        &self.ei_formula_flg
    }
    pub fn clear_ei_formula_flg(&mut self) {
        self.ei_formula_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_ei_formula_flg(&mut self, v: ::std::string::String) {
        self.ei_formula_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ei_formula_flg(&mut self) -> &mut ::std::string::String {
        &mut self.ei_formula_flg
    }

    // Take field
    pub fn take_ei_formula_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ei_formula_flg, ::std::string::String::new())
    }

    // string ei_intcalc_freq = 23;


    pub fn get_ei_intcalc_freq(&self) -> &str {
        &self.ei_intcalc_freq
    }
    pub fn clear_ei_intcalc_freq(&mut self) {
        self.ei_intcalc_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_ei_intcalc_freq(&mut self, v: ::std::string::String) {
        self.ei_intcalc_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ei_intcalc_freq(&mut self) -> &mut ::std::string::String {
        &mut self.ei_intcalc_freq
    }

    // Take field
    pub fn take_ei_intcalc_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ei_intcalc_freq, ::std::string::String::new())
    }

    // string ei_method = 24;


    pub fn get_ei_method(&self) -> &str {
        &self.ei_method
    }
    pub fn clear_ei_method(&mut self) {
        self.ei_method.clear();
    }

    // Param is passed by value, moved
    pub fn set_ei_method(&mut self, v: ::std::string::String) {
        self.ei_method = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ei_method(&mut self) -> &mut ::std::string::String {
        &mut self.ei_method
    }

    // Take field
    pub fn take_ei_method(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ei_method, ::std::string::String::new())
    }

    // double int_rate = 25;


    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }
    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    // string int_type = 26;


    pub fn get_int_type(&self) -> &str {
        &self.int_type
    }
    pub fn clear_int_type(&mut self) {
        self.int_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_type(&mut self, v: ::std::string::String) {
        self.int_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_type(&mut self) -> &mut ::std::string::String {
        &mut self.int_type
    }

    // Take field
    pub fn take_int_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_type, ::std::string::String::new())
    }

    // int64 next_repricing_date = 27;


    pub fn get_next_repricing_date(&self) -> i64 {
        self.next_repricing_date
    }
    pub fn clear_next_repricing_date(&mut self) {
        self.next_repricing_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_repricing_date(&mut self, v: i64) {
        self.next_repricing_date = v;
    }

    // int64 last_repricing_date = 28;


    pub fn get_last_repricing_date(&self) -> i64 {
        self.last_repricing_date
    }
    pub fn clear_last_repricing_date(&mut self) {
        self.last_repricing_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_repricing_date(&mut self, v: i64) {
        self.last_repricing_date = v;
    }

    // string repricing_freq = 29;


    pub fn get_repricing_freq(&self) -> &str {
        &self.repricing_freq
    }
    pub fn clear_repricing_freq(&mut self) {
        self.repricing_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_repricing_freq(&mut self, v: ::std::string::String) {
        self.repricing_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repricing_freq(&mut self) -> &mut ::std::string::String {
        &mut self.repricing_freq
    }

    // Take field
    pub fn take_repricing_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.repricing_freq, ::std::string::String::new())
    }

    // string float_rate_benchmark = 30;


    pub fn get_float_rate_benchmark(&self) -> &str {
        &self.float_rate_benchmark
    }
    pub fn clear_float_rate_benchmark(&mut self) {
        self.float_rate_benchmark.clear();
    }

    // Param is passed by value, moved
    pub fn set_float_rate_benchmark(&mut self, v: ::std::string::String) {
        self.float_rate_benchmark = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_float_rate_benchmark(&mut self) -> &mut ::std::string::String {
        &mut self.float_rate_benchmark
    }

    // Take field
    pub fn take_float_rate_benchmark(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.float_rate_benchmark, ::std::string::String::new())
    }

    // double spread = 31;


    pub fn get_spread(&self) -> f64 {
        self.spread
    }
    pub fn clear_spread(&mut self) {
        self.spread = 0.;
    }

    // Param is passed by value, moved
    pub fn set_spread(&mut self, v: f64) {
        self.spread = v;
    }

    // string npa_flg = 32;


    pub fn get_npa_flg(&self) -> &str {
        &self.npa_flg
    }
    pub fn clear_npa_flg(&mut self) {
        self.npa_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_flg(&mut self, v: ::std::string::String) {
        self.npa_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_flg(&mut self) -> &mut ::std::string::String {
        &mut self.npa_flg
    }

    // Take field
    pub fn take_npa_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_flg, ::std::string::String::new())
    }

    // string npa_classification = 33;


    pub fn get_npa_classification(&self) -> &str {
        &self.npa_classification
    }
    pub fn clear_npa_classification(&mut self) {
        self.npa_classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_classification(&mut self, v: ::std::string::String) {
        self.npa_classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_classification(&mut self) -> &mut ::std::string::String {
        &mut self.npa_classification
    }

    // Take field
    pub fn take_npa_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_classification, ::std::string::String::new())
    }

    // double npa_amt = 34;


    pub fn get_npa_amt(&self) -> f64 {
        self.npa_amt
    }
    pub fn clear_npa_amt(&mut self) {
        self.npa_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_npa_amt(&mut self, v: f64) {
        self.npa_amt = v;
    }

    // string cust_country_id = 35;


    pub fn get_cust_country_id(&self) -> &str {
        &self.cust_country_id
    }
    pub fn clear_cust_country_id(&mut self) {
        self.cust_country_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_country_id(&mut self, v: ::std::string::String) {
        self.cust_country_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_country_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_country_id
    }

    // Take field
    pub fn take_cust_country_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_country_id, ::std::string::String::new())
    }

    // string cust_credit_rating = 36;


    pub fn get_cust_credit_rating(&self) -> &str {
        &self.cust_credit_rating
    }
    pub fn clear_cust_credit_rating(&mut self) {
        self.cust_credit_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_credit_rating(&mut self, v: ::std::string::String) {
        self.cust_credit_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_credit_rating(&mut self) -> &mut ::std::string::String {
        &mut self.cust_credit_rating
    }

    // Take field
    pub fn take_cust_credit_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_credit_rating, ::std::string::String::new())
    }

    // string cust_sector_cd = 37;


    pub fn get_cust_sector_cd(&self) -> &str {
        &self.cust_sector_cd
    }
    pub fn clear_cust_sector_cd(&mut self) {
        self.cust_sector_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_sector_cd(&mut self, v: ::std::string::String) {
        self.cust_sector_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_sector_cd(&mut self) -> &mut ::std::string::String {
        &mut self.cust_sector_cd
    }

    // Take field
    pub fn take_cust_sector_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_sector_cd, ::std::string::String::new())
    }

    // string cust_industry_cd = 38;


    pub fn get_cust_industry_cd(&self) -> &str {
        &self.cust_industry_cd
    }
    pub fn clear_cust_industry_cd(&mut self) {
        self.cust_industry_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_industry_cd(&mut self, v: ::std::string::String) {
        self.cust_industry_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_industry_cd(&mut self) -> &mut ::std::string::String {
        &mut self.cust_industry_cd
    }

    // Take field
    pub fn take_cust_industry_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_industry_cd, ::std::string::String::new())
    }

    // double exchangert = 39;


    pub fn get_exchangert(&self) -> f64 {
        self.exchangert
    }
    pub fn clear_exchangert(&mut self) {
        self.exchangert = 0.;
    }

    // Param is passed by value, moved
    pub fn set_exchangert(&mut self, v: f64) {
        self.exchangert = v;
    }

    // int64 contractual_maturity_days = 40;


    pub fn get_contractual_maturity_days(&self) -> i64 {
        self.contractual_maturity_days
    }
    pub fn clear_contractual_maturity_days(&mut self) {
        self.contractual_maturity_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_contractual_maturity_days(&mut self, v: i64) {
        self.contractual_maturity_days = v;
    }

    // int64 residual_maturity_days = 41;


    pub fn get_residual_maturity_days(&self) -> i64 {
        self.residual_maturity_days
    }
    pub fn clear_residual_maturity_days(&mut self) {
        self.residual_maturity_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_residual_maturity_days(&mut self, v: i64) {
        self.residual_maturity_days = v;
    }

    // string custom1 = 42;


    pub fn get_custom1(&self) -> &str {
        &self.custom1
    }
    pub fn clear_custom1(&mut self) {
        self.custom1.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom1(&mut self, v: ::std::string::String) {
        self.custom1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom1(&mut self) -> &mut ::std::string::String {
        &mut self.custom1
    }

    // Take field
    pub fn take_custom1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom1, ::std::string::String::new())
    }

    // string custom2 = 43;


    pub fn get_custom2(&self) -> &str {
        &self.custom2
    }
    pub fn clear_custom2(&mut self) {
        self.custom2.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom2(&mut self, v: ::std::string::String) {
        self.custom2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom2(&mut self) -> &mut ::std::string::String {
        &mut self.custom2
    }

    // Take field
    pub fn take_custom2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom2, ::std::string::String::new())
    }

    // string custom3 = 44;


    pub fn get_custom3(&self) -> &str {
        &self.custom3
    }
    pub fn clear_custom3(&mut self) {
        self.custom3.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom3(&mut self, v: ::std::string::String) {
        self.custom3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom3(&mut self) -> &mut ::std::string::String {
        &mut self.custom3
    }

    // Take field
    pub fn take_custom3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom3, ::std::string::String::new())
    }

    // string gnt_type = 45;


    pub fn get_gnt_type(&self) -> &str {
        &self.gnt_type
    }
    pub fn clear_gnt_type(&mut self) {
        self.gnt_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_gnt_type(&mut self, v: ::std::string::String) {
        self.gnt_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gnt_type(&mut self) -> &mut ::std::string::String {
        &mut self.gnt_type
    }

    // Take field
    pub fn take_gnt_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gnt_type, ::std::string::String::new())
    }

    // string status_code = 46;


    pub fn get_status_code(&self) -> &str {
        &self.status_code
    }
    pub fn clear_status_code(&mut self) {
        self.status_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_status_code(&mut self, v: ::std::string::String) {
        self.status_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status_code(&mut self) -> &mut ::std::string::String {
        &mut self.status_code
    }

    // Take field
    pub fn take_status_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status_code, ::std::string::String::new())
    }

    // string occupation_code = 47;


    pub fn get_occupation_code(&self) -> &str {
        &self.occupation_code
    }
    pub fn clear_occupation_code(&mut self) {
        self.occupation_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_occupation_code(&mut self, v: ::std::string::String) {
        self.occupation_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_occupation_code(&mut self) -> &mut ::std::string::String {
        &mut self.occupation_code
    }

    // Take field
    pub fn take_occupation_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.occupation_code, ::std::string::String::new())
    }

    // string sector = 48;


    pub fn get_sector(&self) -> &str {
        &self.sector
    }
    pub fn clear_sector(&mut self) {
        self.sector.clear();
    }

    // Param is passed by value, moved
    pub fn set_sector(&mut self, v: ::std::string::String) {
        self.sector = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sector(&mut self) -> &mut ::std::string::String {
        &mut self.sector
    }

    // Take field
    pub fn take_sector(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sector, ::std::string::String::new())
    }

    // string sector_code = 49;


    pub fn get_sector_code(&self) -> &str {
        &self.sector_code
    }
    pub fn clear_sector_code(&mut self) {
        self.sector_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_sector_code(&mut self, v: ::std::string::String) {
        self.sector_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sector_code(&mut self) -> &mut ::std::string::String {
        &mut self.sector_code
    }

    // Take field
    pub fn take_sector_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sector_code, ::std::string::String::new())
    }

    // string subsector_code = 50;


    pub fn get_subsector_code(&self) -> &str {
        &self.subsector_code
    }
    pub fn clear_subsector_code(&mut self) {
        self.subsector_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_subsector_code(&mut self, v: ::std::string::String) {
        self.subsector_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subsector_code(&mut self) -> &mut ::std::string::String {
        &mut self.subsector_code
    }

    // Take field
    pub fn take_subsector_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subsector_code, ::std::string::String::new())
    }

    // string staffflag = 51;


    pub fn get_staffflag(&self) -> &str {
        &self.staffflag
    }
    pub fn clear_staffflag(&mut self) {
        self.staffflag.clear();
    }

    // Param is passed by value, moved
    pub fn set_staffflag(&mut self, v: ::std::string::String) {
        self.staffflag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_staffflag(&mut self) -> &mut ::std::string::String {
        &mut self.staffflag
    }

    // Take field
    pub fn take_staffflag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.staffflag, ::std::string::String::new())
    }

    // string cre_free_text_1 = 52;


    pub fn get_cre_free_text_1(&self) -> &str {
        &self.cre_free_text_1
    }
    pub fn clear_cre_free_text_1(&mut self) {
        self.cre_free_text_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_cre_free_text_1(&mut self, v: ::std::string::String) {
        self.cre_free_text_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cre_free_text_1(&mut self) -> &mut ::std::string::String {
        &mut self.cre_free_text_1
    }

    // Take field
    pub fn take_cre_free_text_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cre_free_text_1, ::std::string::String::new())
    }

    // int64 prov_perc = 53;


    pub fn get_prov_perc(&self) -> i64 {
        self.prov_perc
    }
    pub fn clear_prov_perc(&mut self) {
        self.prov_perc = 0;
    }

    // Param is passed by value, moved
    pub fn set_prov_perc(&mut self, v: i64) {
        self.prov_perc = v;
    }

    // double ltv = 54;


    pub fn get_ltv(&self) -> f64 {
        self.ltv
    }
    pub fn clear_ltv(&mut self) {
        self.ltv = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ltv(&mut self, v: f64) {
        self.ltv = v;
    }

    // double npa_prov = 55;


    pub fn get_npa_prov(&self) -> f64 {
        self.npa_prov
    }
    pub fn clear_npa_prov(&mut self) {
        self.npa_prov = 0.;
    }

    // Param is passed by value, moved
    pub fn set_npa_prov(&mut self, v: f64) {
        self.npa_prov = v;
    }

    // string dumm3 = 56;


    pub fn get_dumm3(&self) -> &str {
        &self.dumm3
    }
    pub fn clear_dumm3(&mut self) {
        self.dumm3.clear();
    }

    // Param is passed by value, moved
    pub fn set_dumm3(&mut self, v: ::std::string::String) {
        self.dumm3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dumm3(&mut self) -> &mut ::std::string::String {
        &mut self.dumm3
    }

    // Take field
    pub fn take_dumm3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dumm3, ::std::string::String::new())
    }

    // string dumm4 = 57;


    pub fn get_dumm4(&self) -> &str {
        &self.dumm4
    }
    pub fn clear_dumm4(&mut self) {
        self.dumm4.clear();
    }

    // Param is passed by value, moved
    pub fn set_dumm4(&mut self, v: ::std::string::String) {
        self.dumm4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dumm4(&mut self) -> &mut ::std::string::String {
        &mut self.dumm4
    }

    // Take field
    pub fn take_dumm4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dumm4, ::std::string::String::new())
    }

    // string dumm5 = 58;


    pub fn get_dumm5(&self) -> &str {
        &self.dumm5
    }
    pub fn clear_dumm5(&mut self) {
        self.dumm5.clear();
    }

    // Param is passed by value, moved
    pub fn set_dumm5(&mut self, v: ::std::string::String) {
        self.dumm5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dumm5(&mut self) -> &mut ::std::string::String {
        &mut self.dumm5
    }

    // Take field
    pub fn take_dumm5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dumm5, ::std::string::String::new())
    }

    // string dumm6 = 59;


    pub fn get_dumm6(&self) -> &str {
        &self.dumm6
    }
    pub fn clear_dumm6(&mut self) {
        self.dumm6.clear();
    }

    // Param is passed by value, moved
    pub fn set_dumm6(&mut self, v: ::std::string::String) {
        self.dumm6 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dumm6(&mut self) -> &mut ::std::string::String {
        &mut self.dumm6
    }

    // Take field
    pub fn take_dumm6(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dumm6, ::std::string::String::new())
    }

    // string dumm7 = 60;


    pub fn get_dumm7(&self) -> &str {
        &self.dumm7
    }
    pub fn clear_dumm7(&mut self) {
        self.dumm7.clear();
    }

    // Param is passed by value, moved
    pub fn set_dumm7(&mut self, v: ::std::string::String) {
        self.dumm7 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dumm7(&mut self) -> &mut ::std::string::String {
        &mut self.dumm7
    }

    // Take field
    pub fn take_dumm7(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dumm7, ::std::string::String::new())
    }

    // double dumm8 = 61;


    pub fn get_dumm8(&self) -> f64 {
        self.dumm8
    }
    pub fn clear_dumm8(&mut self) {
        self.dumm8 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dumm8(&mut self, v: f64) {
        self.dumm8 = v;
    }

    // double dumm9 = 62;


    pub fn get_dumm9(&self) -> f64 {
        self.dumm9
    }
    pub fn clear_dumm9(&mut self) {
        self.dumm9 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dumm9(&mut self, v: f64) {
        self.dumm9 = v;
    }

    // double dumm10 = 63;


    pub fn get_dumm10(&self) -> f64 {
        self.dumm10
    }
    pub fn clear_dumm10(&mut self) {
        self.dumm10 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dumm10(&mut self, v: f64) {
        self.dumm10 = v;
    }

    // string constcatgorycode = 64;


    pub fn get_constcatgorycode(&self) -> &str {
        &self.constcatgorycode
    }
    pub fn clear_constcatgorycode(&mut self) {
        self.constcatgorycode.clear();
    }

    // Param is passed by value, moved
    pub fn set_constcatgorycode(&mut self, v: ::std::string::String) {
        self.constcatgorycode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_constcatgorycode(&mut self) -> &mut ::std::string::String {
        &mut self.constcatgorycode
    }

    // Take field
    pub fn take_constcatgorycode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.constcatgorycode, ::std::string::String::new())
    }

    // string ratingagc = 65;


    pub fn get_ratingagc(&self) -> &str {
        &self.ratingagc
    }
    pub fn clear_ratingagc(&mut self) {
        self.ratingagc.clear();
    }

    // Param is passed by value, moved
    pub fn set_ratingagc(&mut self, v: ::std::string::String) {
        self.ratingagc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ratingagc(&mut self) -> &mut ::std::string::String {
        &mut self.ratingagc
    }

    // Take field
    pub fn take_ratingagc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ratingagc, ::std::string::String::new())
    }

    // string rating = 66;


    pub fn get_rating(&self) -> &str {
        &self.rating
    }
    pub fn clear_rating(&mut self) {
        self.rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_rating(&mut self, v: ::std::string::String) {
        self.rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rating(&mut self) -> &mut ::std::string::String {
        &mut self.rating
    }

    // Take field
    pub fn take_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rating, ::std::string::String::new())
    }

    // string supperannuation_flag = 67;


    pub fn get_supperannuation_flag(&self) -> &str {
        &self.supperannuation_flag
    }
    pub fn clear_supperannuation_flag(&mut self) {
        self.supperannuation_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_supperannuation_flag(&mut self, v: ::std::string::String) {
        self.supperannuation_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_supperannuation_flag(&mut self) -> &mut ::std::string::String {
        &mut self.supperannuation_flag
    }

    // Take field
    pub fn take_supperannuation_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.supperannuation_flag, ::std::string::String::new())
    }

    // double turn_amt1 = 68;


    pub fn get_turn_amt1(&self) -> f64 {
        self.turn_amt1
    }
    pub fn clear_turn_amt1(&mut self) {
        self.turn_amt1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_turn_amt1(&mut self, v: f64) {
        self.turn_amt1 = v;
    }

    // double turn_amt2 = 69;


    pub fn get_turn_amt2(&self) -> f64 {
        self.turn_amt2
    }
    pub fn clear_turn_amt2(&mut self) {
        self.turn_amt2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_turn_amt2(&mut self, v: f64) {
        self.turn_amt2 = v;
    }

    // double turn_amt3 = 70;


    pub fn get_turn_amt3(&self) -> f64 {
        self.turn_amt3
    }
    pub fn clear_turn_amt3(&mut self) {
        self.turn_amt3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_turn_amt3(&mut self, v: f64) {
        self.turn_amt3 = v;
    }

    // string ftp_char1 = 71;


    pub fn get_ftp_char1(&self) -> &str {
        &self.ftp_char1
    }
    pub fn clear_ftp_char1(&mut self) {
        self.ftp_char1.clear();
    }

    // Param is passed by value, moved
    pub fn set_ftp_char1(&mut self, v: ::std::string::String) {
        self.ftp_char1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ftp_char1(&mut self) -> &mut ::std::string::String {
        &mut self.ftp_char1
    }

    // Take field
    pub fn take_ftp_char1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ftp_char1, ::std::string::String::new())
    }

    // string ftp_char2 = 72;


    pub fn get_ftp_char2(&self) -> &str {
        &self.ftp_char2
    }
    pub fn clear_ftp_char2(&mut self) {
        self.ftp_char2.clear();
    }

    // Param is passed by value, moved
    pub fn set_ftp_char2(&mut self, v: ::std::string::String) {
        self.ftp_char2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ftp_char2(&mut self) -> &mut ::std::string::String {
        &mut self.ftp_char2
    }

    // Take field
    pub fn take_ftp_char2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ftp_char2, ::std::string::String::new())
    }

    // double ftp_amt1 = 73;


    pub fn get_ftp_amt1(&self) -> f64 {
        self.ftp_amt1
    }
    pub fn clear_ftp_amt1(&mut self) {
        self.ftp_amt1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ftp_amt1(&mut self, v: f64) {
        self.ftp_amt1 = v;
    }

    // double ftp_amt2 = 74;


    pub fn get_ftp_amt2(&self) -> f64 {
        self.ftp_amt2
    }
    pub fn clear_ftp_amt2(&mut self) {
        self.ftp_amt2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ftp_amt2(&mut self, v: f64) {
        self.ftp_amt2 = v;
    }

    // int64 ftp_date1 = 75;


    pub fn get_ftp_date1(&self) -> i64 {
        self.ftp_date1
    }
    pub fn clear_ftp_date1(&mut self) {
        self.ftp_date1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_ftp_date1(&mut self, v: i64) {
        self.ftp_date1 = v;
    }

    // int64 ftp_date2 = 76;


    pub fn get_ftp_date2(&self) -> i64 {
        self.ftp_date2
    }
    pub fn clear_ftp_date2(&mut self) {
        self.ftp_date2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_ftp_date2(&mut self, v: i64) {
        self.ftp_date2 = v;
    }

    // string is_cf_overdue = 77;


    pub fn get_is_cf_overdue(&self) -> &str {
        &self.is_cf_overdue
    }
    pub fn clear_is_cf_overdue(&mut self) {
        self.is_cf_overdue.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_cf_overdue(&mut self, v: ::std::string::String) {
        self.is_cf_overdue = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_cf_overdue(&mut self) -> &mut ::std::string::String {
        &mut self.is_cf_overdue
    }

    // Take field
    pub fn take_is_cf_overdue(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_cf_overdue, ::std::string::String::new())
    }

    // repeated .Cashflow cashflows = 78;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashFlows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.foracid)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sol_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acct_opn_date = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_sub_head_code)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schm_code)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schm_type)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acct_crncy_code)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rep_shdl_num = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rep_shdl_date = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.dis_shdl_num = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.dis_shdl_date = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.dis_amt = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.clr_bal_amt = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.sanct_lim = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rephasement_principal = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ei_perd_end_date = tmp;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_id)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_name)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ei_schm_flg)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_basis)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ei_formula_flg)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ei_intcalc_freq)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ei_method)?;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_type)?;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_repricing_date = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_repricing_date = tmp;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.repricing_freq)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.float_rate_benchmark)?;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.spread = tmp;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa_flg)?;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa_classification)?;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.npa_amt = tmp;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_country_id)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_credit_rating)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_sector_cd)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_industry_cd)?;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.exchangert = tmp;
                },
                40 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.contractual_maturity_days = tmp;
                },
                41 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.residual_maturity_days = tmp;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom1)?;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom2)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom3)?;
                },
                45 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gnt_type)?;
                },
                46 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status_code)?;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.occupation_code)?;
                },
                48 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sector)?;
                },
                49 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sector_code)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subsector_code)?;
                },
                51 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.staffflag)?;
                },
                52 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cre_free_text_1)?;
                },
                53 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.prov_perc = tmp;
                },
                54 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ltv = tmp;
                },
                55 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.npa_prov = tmp;
                },
                56 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dumm3)?;
                },
                57 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dumm4)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dumm5)?;
                },
                59 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dumm6)?;
                },
                60 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dumm7)?;
                },
                61 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.dumm8 = tmp;
                },
                62 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.dumm9 = tmp;
                },
                63 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.dumm10 = tmp;
                },
                64 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.constcatgorycode)?;
                },
                65 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ratingagc)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rating)?;
                },
                67 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.supperannuation_flag)?;
                },
                68 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.turn_amt1 = tmp;
                },
                69 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.turn_amt2 = tmp;
                },
                70 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.turn_amt3 = tmp;
                },
                71 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ftp_char1)?;
                },
                72 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ftp_char2)?;
                },
                73 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ftp_amt1 = tmp;
                },
                74 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ftp_amt2 = tmp;
                },
                75 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ftp_date1 = tmp;
                },
                76 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ftp_date2 = tmp;
                },
                77 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_cf_overdue)?;
                },
                78 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.acid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.acid);
        }
        if !self.foracid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.foracid);
        }
        if !self.sol_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.sol_id);
        }
        if self.acct_opn_date != 0 {
            my_size += ::protobuf::rt::value_size(4, self.acct_opn_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.gl_sub_head_code.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.gl_sub_head_code);
        }
        if !self.schm_code.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.schm_code);
        }
        if !self.schm_type.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.schm_type);
        }
        if !self.acct_crncy_code.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.acct_crncy_code);
        }
        if self.rep_shdl_num != 0 {
            my_size += ::protobuf::rt::value_size(9, self.rep_shdl_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rep_shdl_date != 0 {
            my_size += ::protobuf::rt::value_size(10, self.rep_shdl_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dis_shdl_num != 0 {
            my_size += ::protobuf::rt::value_size(11, self.dis_shdl_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dis_shdl_date != 0 {
            my_size += ::protobuf::rt::value_size(12, self.dis_shdl_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dis_amt != 0. {
            my_size += 9;
        }
        if self.clr_bal_amt != 0. {
            my_size += 9;
        }
        if self.sanct_lim != 0. {
            my_size += 9;
        }
        if self.rephasement_principal != 0. {
            my_size += 10;
        }
        if self.ei_perd_end_date != 0 {
            my_size += ::protobuf::rt::value_size(17, self.ei_perd_end_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.cust_id.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.cust_id);
        }
        if !self.cust_name.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.cust_name);
        }
        if !self.ei_schm_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.ei_schm_flg);
        }
        if !self.int_basis.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.int_basis);
        }
        if !self.ei_formula_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.ei_formula_flg);
        }
        if !self.ei_intcalc_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.ei_intcalc_freq);
        }
        if !self.ei_method.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.ei_method);
        }
        if self.int_rate != 0. {
            my_size += 10;
        }
        if !self.int_type.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.int_type);
        }
        if self.next_repricing_date != 0 {
            my_size += ::protobuf::rt::value_size(27, self.next_repricing_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_repricing_date != 0 {
            my_size += ::protobuf::rt::value_size(28, self.last_repricing_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.repricing_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.repricing_freq);
        }
        if !self.float_rate_benchmark.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.float_rate_benchmark);
        }
        if self.spread != 0. {
            my_size += 10;
        }
        if !self.npa_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.npa_flg);
        }
        if !self.npa_classification.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.npa_classification);
        }
        if self.npa_amt != 0. {
            my_size += 10;
        }
        if !self.cust_country_id.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.cust_country_id);
        }
        if !self.cust_credit_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.cust_credit_rating);
        }
        if !self.cust_sector_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.cust_sector_cd);
        }
        if !self.cust_industry_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.cust_industry_cd);
        }
        if self.exchangert != 0. {
            my_size += 10;
        }
        if self.contractual_maturity_days != 0 {
            my_size += ::protobuf::rt::value_size(40, self.contractual_maturity_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.residual_maturity_days != 0 {
            my_size += ::protobuf::rt::value_size(41, self.residual_maturity_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.custom1.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.custom1);
        }
        if !self.custom2.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.custom2);
        }
        if !self.custom3.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.custom3);
        }
        if !self.gnt_type.is_empty() {
            my_size += ::protobuf::rt::string_size(45, &self.gnt_type);
        }
        if !self.status_code.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.status_code);
        }
        if !self.occupation_code.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.occupation_code);
        }
        if !self.sector.is_empty() {
            my_size += ::protobuf::rt::string_size(48, &self.sector);
        }
        if !self.sector_code.is_empty() {
            my_size += ::protobuf::rt::string_size(49, &self.sector_code);
        }
        if !self.subsector_code.is_empty() {
            my_size += ::protobuf::rt::string_size(50, &self.subsector_code);
        }
        if !self.staffflag.is_empty() {
            my_size += ::protobuf::rt::string_size(51, &self.staffflag);
        }
        if !self.cre_free_text_1.is_empty() {
            my_size += ::protobuf::rt::string_size(52, &self.cre_free_text_1);
        }
        if self.prov_perc != 0 {
            my_size += ::protobuf::rt::value_size(53, self.prov_perc, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ltv != 0. {
            my_size += 10;
        }
        if self.npa_prov != 0. {
            my_size += 10;
        }
        if !self.dumm3.is_empty() {
            my_size += ::protobuf::rt::string_size(56, &self.dumm3);
        }
        if !self.dumm4.is_empty() {
            my_size += ::protobuf::rt::string_size(57, &self.dumm4);
        }
        if !self.dumm5.is_empty() {
            my_size += ::protobuf::rt::string_size(58, &self.dumm5);
        }
        if !self.dumm6.is_empty() {
            my_size += ::protobuf::rt::string_size(59, &self.dumm6);
        }
        if !self.dumm7.is_empty() {
            my_size += ::protobuf::rt::string_size(60, &self.dumm7);
        }
        if self.dumm8 != 0. {
            my_size += 10;
        }
        if self.dumm9 != 0. {
            my_size += 10;
        }
        if self.dumm10 != 0. {
            my_size += 10;
        }
        if !self.constcatgorycode.is_empty() {
            my_size += ::protobuf::rt::string_size(64, &self.constcatgorycode);
        }
        if !self.ratingagc.is_empty() {
            my_size += ::protobuf::rt::string_size(65, &self.ratingagc);
        }
        if !self.rating.is_empty() {
            my_size += ::protobuf::rt::string_size(66, &self.rating);
        }
        if !self.supperannuation_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(67, &self.supperannuation_flag);
        }
        if self.turn_amt1 != 0. {
            my_size += 10;
        }
        if self.turn_amt2 != 0. {
            my_size += 10;
        }
        if self.turn_amt3 != 0. {
            my_size += 10;
        }
        if !self.ftp_char1.is_empty() {
            my_size += ::protobuf::rt::string_size(71, &self.ftp_char1);
        }
        if !self.ftp_char2.is_empty() {
            my_size += ::protobuf::rt::string_size(72, &self.ftp_char2);
        }
        if self.ftp_amt1 != 0. {
            my_size += 10;
        }
        if self.ftp_amt2 != 0. {
            my_size += 10;
        }
        if self.ftp_date1 != 0 {
            my_size += ::protobuf::rt::value_size(75, self.ftp_date1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ftp_date2 != 0 {
            my_size += ::protobuf::rt::value_size(76, self.ftp_date2, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.is_cf_overdue.is_empty() {
            my_size += ::protobuf::rt::string_size(77, &self.is_cf_overdue);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.acid.is_empty() {
            os.write_string(1, &self.acid)?;
        }
        if !self.foracid.is_empty() {
            os.write_string(2, &self.foracid)?;
        }
        if !self.sol_id.is_empty() {
            os.write_string(3, &self.sol_id)?;
        }
        if self.acct_opn_date != 0 {
            os.write_int64(4, self.acct_opn_date)?;
        }
        if !self.gl_sub_head_code.is_empty() {
            os.write_string(5, &self.gl_sub_head_code)?;
        }
        if !self.schm_code.is_empty() {
            os.write_string(6, &self.schm_code)?;
        }
        if !self.schm_type.is_empty() {
            os.write_string(7, &self.schm_type)?;
        }
        if !self.acct_crncy_code.is_empty() {
            os.write_string(8, &self.acct_crncy_code)?;
        }
        if self.rep_shdl_num != 0 {
            os.write_int64(9, self.rep_shdl_num)?;
        }
        if self.rep_shdl_date != 0 {
            os.write_int64(10, self.rep_shdl_date)?;
        }
        if self.dis_shdl_num != 0 {
            os.write_int64(11, self.dis_shdl_num)?;
        }
        if self.dis_shdl_date != 0 {
            os.write_int64(12, self.dis_shdl_date)?;
        }
        if self.dis_amt != 0. {
            os.write_double(13, self.dis_amt)?;
        }
        if self.clr_bal_amt != 0. {
            os.write_double(14, self.clr_bal_amt)?;
        }
        if self.sanct_lim != 0. {
            os.write_double(15, self.sanct_lim)?;
        }
        if self.rephasement_principal != 0. {
            os.write_double(16, self.rephasement_principal)?;
        }
        if self.ei_perd_end_date != 0 {
            os.write_int64(17, self.ei_perd_end_date)?;
        }
        if !self.cust_id.is_empty() {
            os.write_string(18, &self.cust_id)?;
        }
        if !self.cust_name.is_empty() {
            os.write_string(19, &self.cust_name)?;
        }
        if !self.ei_schm_flg.is_empty() {
            os.write_string(20, &self.ei_schm_flg)?;
        }
        if !self.int_basis.is_empty() {
            os.write_string(21, &self.int_basis)?;
        }
        if !self.ei_formula_flg.is_empty() {
            os.write_string(22, &self.ei_formula_flg)?;
        }
        if !self.ei_intcalc_freq.is_empty() {
            os.write_string(23, &self.ei_intcalc_freq)?;
        }
        if !self.ei_method.is_empty() {
            os.write_string(24, &self.ei_method)?;
        }
        if self.int_rate != 0. {
            os.write_double(25, self.int_rate)?;
        }
        if !self.int_type.is_empty() {
            os.write_string(26, &self.int_type)?;
        }
        if self.next_repricing_date != 0 {
            os.write_int64(27, self.next_repricing_date)?;
        }
        if self.last_repricing_date != 0 {
            os.write_int64(28, self.last_repricing_date)?;
        }
        if !self.repricing_freq.is_empty() {
            os.write_string(29, &self.repricing_freq)?;
        }
        if !self.float_rate_benchmark.is_empty() {
            os.write_string(30, &self.float_rate_benchmark)?;
        }
        if self.spread != 0. {
            os.write_double(31, self.spread)?;
        }
        if !self.npa_flg.is_empty() {
            os.write_string(32, &self.npa_flg)?;
        }
        if !self.npa_classification.is_empty() {
            os.write_string(33, &self.npa_classification)?;
        }
        if self.npa_amt != 0. {
            os.write_double(34, self.npa_amt)?;
        }
        if !self.cust_country_id.is_empty() {
            os.write_string(35, &self.cust_country_id)?;
        }
        if !self.cust_credit_rating.is_empty() {
            os.write_string(36, &self.cust_credit_rating)?;
        }
        if !self.cust_sector_cd.is_empty() {
            os.write_string(37, &self.cust_sector_cd)?;
        }
        if !self.cust_industry_cd.is_empty() {
            os.write_string(38, &self.cust_industry_cd)?;
        }
        if self.exchangert != 0. {
            os.write_double(39, self.exchangert)?;
        }
        if self.contractual_maturity_days != 0 {
            os.write_int64(40, self.contractual_maturity_days)?;
        }
        if self.residual_maturity_days != 0 {
            os.write_int64(41, self.residual_maturity_days)?;
        }
        if !self.custom1.is_empty() {
            os.write_string(42, &self.custom1)?;
        }
        if !self.custom2.is_empty() {
            os.write_string(43, &self.custom2)?;
        }
        if !self.custom3.is_empty() {
            os.write_string(44, &self.custom3)?;
        }
        if !self.gnt_type.is_empty() {
            os.write_string(45, &self.gnt_type)?;
        }
        if !self.status_code.is_empty() {
            os.write_string(46, &self.status_code)?;
        }
        if !self.occupation_code.is_empty() {
            os.write_string(47, &self.occupation_code)?;
        }
        if !self.sector.is_empty() {
            os.write_string(48, &self.sector)?;
        }
        if !self.sector_code.is_empty() {
            os.write_string(49, &self.sector_code)?;
        }
        if !self.subsector_code.is_empty() {
            os.write_string(50, &self.subsector_code)?;
        }
        if !self.staffflag.is_empty() {
            os.write_string(51, &self.staffflag)?;
        }
        if !self.cre_free_text_1.is_empty() {
            os.write_string(52, &self.cre_free_text_1)?;
        }
        if self.prov_perc != 0 {
            os.write_int64(53, self.prov_perc)?;
        }
        if self.ltv != 0. {
            os.write_double(54, self.ltv)?;
        }
        if self.npa_prov != 0. {
            os.write_double(55, self.npa_prov)?;
        }
        if !self.dumm3.is_empty() {
            os.write_string(56, &self.dumm3)?;
        }
        if !self.dumm4.is_empty() {
            os.write_string(57, &self.dumm4)?;
        }
        if !self.dumm5.is_empty() {
            os.write_string(58, &self.dumm5)?;
        }
        if !self.dumm6.is_empty() {
            os.write_string(59, &self.dumm6)?;
        }
        if !self.dumm7.is_empty() {
            os.write_string(60, &self.dumm7)?;
        }
        if self.dumm8 != 0. {
            os.write_double(61, self.dumm8)?;
        }
        if self.dumm9 != 0. {
            os.write_double(62, self.dumm9)?;
        }
        if self.dumm10 != 0. {
            os.write_double(63, self.dumm10)?;
        }
        if !self.constcatgorycode.is_empty() {
            os.write_string(64, &self.constcatgorycode)?;
        }
        if !self.ratingagc.is_empty() {
            os.write_string(65, &self.ratingagc)?;
        }
        if !self.rating.is_empty() {
            os.write_string(66, &self.rating)?;
        }
        if !self.supperannuation_flag.is_empty() {
            os.write_string(67, &self.supperannuation_flag)?;
        }
        if self.turn_amt1 != 0. {
            os.write_double(68, self.turn_amt1)?;
        }
        if self.turn_amt2 != 0. {
            os.write_double(69, self.turn_amt2)?;
        }
        if self.turn_amt3 != 0. {
            os.write_double(70, self.turn_amt3)?;
        }
        if !self.ftp_char1.is_empty() {
            os.write_string(71, &self.ftp_char1)?;
        }
        if !self.ftp_char2.is_empty() {
            os.write_string(72, &self.ftp_char2)?;
        }
        if self.ftp_amt1 != 0. {
            os.write_double(73, self.ftp_amt1)?;
        }
        if self.ftp_amt2 != 0. {
            os.write_double(74, self.ftp_amt2)?;
        }
        if self.ftp_date1 != 0 {
            os.write_int64(75, self.ftp_date1)?;
        }
        if self.ftp_date2 != 0 {
            os.write_int64(76, self.ftp_date2)?;
        }
        if !self.is_cf_overdue.is_empty() {
            os.write_string(77, &self.is_cf_overdue)?;
        }
        for v in &self.cashflows {
            os.write_tag(78, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashFlows {
        AccountWithCashFlows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acid",
                |m: &AccountWithCashFlows| { &m.acid },
                |m: &mut AccountWithCashFlows| { &mut m.acid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "foracid",
                |m: &AccountWithCashFlows| { &m.foracid },
                |m: &mut AccountWithCashFlows| { &mut m.foracid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sol_id",
                |m: &AccountWithCashFlows| { &m.sol_id },
                |m: &mut AccountWithCashFlows| { &mut m.sol_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "acct_opn_date",
                |m: &AccountWithCashFlows| { &m.acct_opn_date },
                |m: &mut AccountWithCashFlows| { &mut m.acct_opn_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_sub_head_code",
                |m: &AccountWithCashFlows| { &m.gl_sub_head_code },
                |m: &mut AccountWithCashFlows| { &mut m.gl_sub_head_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "schm_code",
                |m: &AccountWithCashFlows| { &m.schm_code },
                |m: &mut AccountWithCashFlows| { &mut m.schm_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "schm_type",
                |m: &AccountWithCashFlows| { &m.schm_type },
                |m: &mut AccountWithCashFlows| { &mut m.schm_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acct_crncy_code",
                |m: &AccountWithCashFlows| { &m.acct_crncy_code },
                |m: &mut AccountWithCashFlows| { &mut m.acct_crncy_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "rep_shdl_num",
                |m: &AccountWithCashFlows| { &m.rep_shdl_num },
                |m: &mut AccountWithCashFlows| { &mut m.rep_shdl_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "rep_shdl_date",
                |m: &AccountWithCashFlows| { &m.rep_shdl_date },
                |m: &mut AccountWithCashFlows| { &mut m.rep_shdl_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "dis_shdl_num",
                |m: &AccountWithCashFlows| { &m.dis_shdl_num },
                |m: &mut AccountWithCashFlows| { &mut m.dis_shdl_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "dis_shdl_date",
                |m: &AccountWithCashFlows| { &m.dis_shdl_date },
                |m: &mut AccountWithCashFlows| { &mut m.dis_shdl_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "dis_amt",
                |m: &AccountWithCashFlows| { &m.dis_amt },
                |m: &mut AccountWithCashFlows| { &mut m.dis_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "clr_bal_amt",
                |m: &AccountWithCashFlows| { &m.clr_bal_amt },
                |m: &mut AccountWithCashFlows| { &mut m.clr_bal_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "sanct_lim",
                |m: &AccountWithCashFlows| { &m.sanct_lim },
                |m: &mut AccountWithCashFlows| { &mut m.sanct_lim },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "rephasement_principal",
                |m: &AccountWithCashFlows| { &m.rephasement_principal },
                |m: &mut AccountWithCashFlows| { &mut m.rephasement_principal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ei_perd_end_date",
                |m: &AccountWithCashFlows| { &m.ei_perd_end_date },
                |m: &mut AccountWithCashFlows| { &mut m.ei_perd_end_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_id",
                |m: &AccountWithCashFlows| { &m.cust_id },
                |m: &mut AccountWithCashFlows| { &mut m.cust_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_name",
                |m: &AccountWithCashFlows| { &m.cust_name },
                |m: &mut AccountWithCashFlows| { &mut m.cust_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ei_schm_flg",
                |m: &AccountWithCashFlows| { &m.ei_schm_flg },
                |m: &mut AccountWithCashFlows| { &mut m.ei_schm_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_basis",
                |m: &AccountWithCashFlows| { &m.int_basis },
                |m: &mut AccountWithCashFlows| { &mut m.int_basis },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ei_formula_flg",
                |m: &AccountWithCashFlows| { &m.ei_formula_flg },
                |m: &mut AccountWithCashFlows| { &mut m.ei_formula_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ei_intcalc_freq",
                |m: &AccountWithCashFlows| { &m.ei_intcalc_freq },
                |m: &mut AccountWithCashFlows| { &mut m.ei_intcalc_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ei_method",
                |m: &AccountWithCashFlows| { &m.ei_method },
                |m: &mut AccountWithCashFlows| { &mut m.ei_method },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_rate",
                |m: &AccountWithCashFlows| { &m.int_rate },
                |m: &mut AccountWithCashFlows| { &mut m.int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_type",
                |m: &AccountWithCashFlows| { &m.int_type },
                |m: &mut AccountWithCashFlows| { &mut m.int_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_repricing_date",
                |m: &AccountWithCashFlows| { &m.next_repricing_date },
                |m: &mut AccountWithCashFlows| { &mut m.next_repricing_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_repricing_date",
                |m: &AccountWithCashFlows| { &m.last_repricing_date },
                |m: &mut AccountWithCashFlows| { &mut m.last_repricing_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "repricing_freq",
                |m: &AccountWithCashFlows| { &m.repricing_freq },
                |m: &mut AccountWithCashFlows| { &mut m.repricing_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "float_rate_benchmark",
                |m: &AccountWithCashFlows| { &m.float_rate_benchmark },
                |m: &mut AccountWithCashFlows| { &mut m.float_rate_benchmark },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "spread",
                |m: &AccountWithCashFlows| { &m.spread },
                |m: &mut AccountWithCashFlows| { &mut m.spread },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "npa_flg",
                |m: &AccountWithCashFlows| { &m.npa_flg },
                |m: &mut AccountWithCashFlows| { &mut m.npa_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "npa_classification",
                |m: &AccountWithCashFlows| { &m.npa_classification },
                |m: &mut AccountWithCashFlows| { &mut m.npa_classification },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "npa_amt",
                |m: &AccountWithCashFlows| { &m.npa_amt },
                |m: &mut AccountWithCashFlows| { &mut m.npa_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_country_id",
                |m: &AccountWithCashFlows| { &m.cust_country_id },
                |m: &mut AccountWithCashFlows| { &mut m.cust_country_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_credit_rating",
                |m: &AccountWithCashFlows| { &m.cust_credit_rating },
                |m: &mut AccountWithCashFlows| { &mut m.cust_credit_rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_sector_cd",
                |m: &AccountWithCashFlows| { &m.cust_sector_cd },
                |m: &mut AccountWithCashFlows| { &mut m.cust_sector_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_industry_cd",
                |m: &AccountWithCashFlows| { &m.cust_industry_cd },
                |m: &mut AccountWithCashFlows| { &mut m.cust_industry_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "exchangert",
                |m: &AccountWithCashFlows| { &m.exchangert },
                |m: &mut AccountWithCashFlows| { &mut m.exchangert },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "contractual_maturity_days",
                |m: &AccountWithCashFlows| { &m.contractual_maturity_days },
                |m: &mut AccountWithCashFlows| { &mut m.contractual_maturity_days },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "residual_maturity_days",
                |m: &AccountWithCashFlows| { &m.residual_maturity_days },
                |m: &mut AccountWithCashFlows| { &mut m.residual_maturity_days },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "custom1",
                |m: &AccountWithCashFlows| { &m.custom1 },
                |m: &mut AccountWithCashFlows| { &mut m.custom1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "custom2",
                |m: &AccountWithCashFlows| { &m.custom2 },
                |m: &mut AccountWithCashFlows| { &mut m.custom2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "custom3",
                |m: &AccountWithCashFlows| { &m.custom3 },
                |m: &mut AccountWithCashFlows| { &mut m.custom3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gnt_type",
                |m: &AccountWithCashFlows| { &m.gnt_type },
                |m: &mut AccountWithCashFlows| { &mut m.gnt_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "status_code",
                |m: &AccountWithCashFlows| { &m.status_code },
                |m: &mut AccountWithCashFlows| { &mut m.status_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "occupation_code",
                |m: &AccountWithCashFlows| { &m.occupation_code },
                |m: &mut AccountWithCashFlows| { &mut m.occupation_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sector",
                |m: &AccountWithCashFlows| { &m.sector },
                |m: &mut AccountWithCashFlows| { &mut m.sector },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sector_code",
                |m: &AccountWithCashFlows| { &m.sector_code },
                |m: &mut AccountWithCashFlows| { &mut m.sector_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "subsector_code",
                |m: &AccountWithCashFlows| { &m.subsector_code },
                |m: &mut AccountWithCashFlows| { &mut m.subsector_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "staffflag",
                |m: &AccountWithCashFlows| { &m.staffflag },
                |m: &mut AccountWithCashFlows| { &mut m.staffflag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cre_free_text_1",
                |m: &AccountWithCashFlows| { &m.cre_free_text_1 },
                |m: &mut AccountWithCashFlows| { &mut m.cre_free_text_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "prov_perc",
                |m: &AccountWithCashFlows| { &m.prov_perc },
                |m: &mut AccountWithCashFlows| { &mut m.prov_perc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ltv",
                |m: &AccountWithCashFlows| { &m.ltv },
                |m: &mut AccountWithCashFlows| { &mut m.ltv },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "npa_prov",
                |m: &AccountWithCashFlows| { &m.npa_prov },
                |m: &mut AccountWithCashFlows| { &mut m.npa_prov },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dumm3",
                |m: &AccountWithCashFlows| { &m.dumm3 },
                |m: &mut AccountWithCashFlows| { &mut m.dumm3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dumm4",
                |m: &AccountWithCashFlows| { &m.dumm4 },
                |m: &mut AccountWithCashFlows| { &mut m.dumm4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dumm5",
                |m: &AccountWithCashFlows| { &m.dumm5 },
                |m: &mut AccountWithCashFlows| { &mut m.dumm5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dumm6",
                |m: &AccountWithCashFlows| { &m.dumm6 },
                |m: &mut AccountWithCashFlows| { &mut m.dumm6 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dumm7",
                |m: &AccountWithCashFlows| { &m.dumm7 },
                |m: &mut AccountWithCashFlows| { &mut m.dumm7 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "dumm8",
                |m: &AccountWithCashFlows| { &m.dumm8 },
                |m: &mut AccountWithCashFlows| { &mut m.dumm8 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "dumm9",
                |m: &AccountWithCashFlows| { &m.dumm9 },
                |m: &mut AccountWithCashFlows| { &mut m.dumm9 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "dumm10",
                |m: &AccountWithCashFlows| { &m.dumm10 },
                |m: &mut AccountWithCashFlows| { &mut m.dumm10 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "constcatgorycode",
                |m: &AccountWithCashFlows| { &m.constcatgorycode },
                |m: &mut AccountWithCashFlows| { &mut m.constcatgorycode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ratingagc",
                |m: &AccountWithCashFlows| { &m.ratingagc },
                |m: &mut AccountWithCashFlows| { &mut m.ratingagc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rating",
                |m: &AccountWithCashFlows| { &m.rating },
                |m: &mut AccountWithCashFlows| { &mut m.rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "supperannuation_flag",
                |m: &AccountWithCashFlows| { &m.supperannuation_flag },
                |m: &mut AccountWithCashFlows| { &mut m.supperannuation_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "turn_amt1",
                |m: &AccountWithCashFlows| { &m.turn_amt1 },
                |m: &mut AccountWithCashFlows| { &mut m.turn_amt1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "turn_amt2",
                |m: &AccountWithCashFlows| { &m.turn_amt2 },
                |m: &mut AccountWithCashFlows| { &mut m.turn_amt2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "turn_amt3",
                |m: &AccountWithCashFlows| { &m.turn_amt3 },
                |m: &mut AccountWithCashFlows| { &mut m.turn_amt3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ftp_char1",
                |m: &AccountWithCashFlows| { &m.ftp_char1 },
                |m: &mut AccountWithCashFlows| { &mut m.ftp_char1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ftp_char2",
                |m: &AccountWithCashFlows| { &m.ftp_char2 },
                |m: &mut AccountWithCashFlows| { &mut m.ftp_char2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ftp_amt1",
                |m: &AccountWithCashFlows| { &m.ftp_amt1 },
                |m: &mut AccountWithCashFlows| { &mut m.ftp_amt1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ftp_amt2",
                |m: &AccountWithCashFlows| { &m.ftp_amt2 },
                |m: &mut AccountWithCashFlows| { &mut m.ftp_amt2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ftp_date1",
                |m: &AccountWithCashFlows| { &m.ftp_date1 },
                |m: &mut AccountWithCashFlows| { &mut m.ftp_date1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ftp_date2",
                |m: &AccountWithCashFlows| { &m.ftp_date2 },
                |m: &mut AccountWithCashFlows| { &mut m.ftp_date2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "is_cf_overdue",
                |m: &AccountWithCashFlows| { &m.is_cf_overdue },
                |m: &mut AccountWithCashFlows| { &mut m.is_cf_overdue },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashFlows| { &m.cashflows },
                |m: &mut AccountWithCashFlows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashFlows>(
                "AccountWithCashFlows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashFlows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashFlows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashFlows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashFlows {
    fn clear(&mut self) {
        self.acid.clear();
        self.foracid.clear();
        self.sol_id.clear();
        self.acct_opn_date = 0;
        self.gl_sub_head_code.clear();
        self.schm_code.clear();
        self.schm_type.clear();
        self.acct_crncy_code.clear();
        self.rep_shdl_num = 0;
        self.rep_shdl_date = 0;
        self.dis_shdl_num = 0;
        self.dis_shdl_date = 0;
        self.dis_amt = 0.;
        self.clr_bal_amt = 0.;
        self.sanct_lim = 0.;
        self.rephasement_principal = 0.;
        self.ei_perd_end_date = 0;
        self.cust_id.clear();
        self.cust_name.clear();
        self.ei_schm_flg.clear();
        self.int_basis.clear();
        self.ei_formula_flg.clear();
        self.ei_intcalc_freq.clear();
        self.ei_method.clear();
        self.int_rate = 0.;
        self.int_type.clear();
        self.next_repricing_date = 0;
        self.last_repricing_date = 0;
        self.repricing_freq.clear();
        self.float_rate_benchmark.clear();
        self.spread = 0.;
        self.npa_flg.clear();
        self.npa_classification.clear();
        self.npa_amt = 0.;
        self.cust_country_id.clear();
        self.cust_credit_rating.clear();
        self.cust_sector_cd.clear();
        self.cust_industry_cd.clear();
        self.exchangert = 0.;
        self.contractual_maturity_days = 0;
        self.residual_maturity_days = 0;
        self.custom1.clear();
        self.custom2.clear();
        self.custom3.clear();
        self.gnt_type.clear();
        self.status_code.clear();
        self.occupation_code.clear();
        self.sector.clear();
        self.sector_code.clear();
        self.subsector_code.clear();
        self.staffflag.clear();
        self.cre_free_text_1.clear();
        self.prov_perc = 0;
        self.ltv = 0.;
        self.npa_prov = 0.;
        self.dumm3.clear();
        self.dumm4.clear();
        self.dumm5.clear();
        self.dumm6.clear();
        self.dumm7.clear();
        self.dumm8 = 0.;
        self.dumm9 = 0.;
        self.dumm10 = 0.;
        self.constcatgorycode.clear();
        self.ratingagc.clear();
        self.rating.clear();
        self.supperannuation_flag.clear();
        self.turn_amt1 = 0.;
        self.turn_amt2 = 0.;
        self.turn_amt3 = 0.;
        self.ftp_char1.clear();
        self.ftp_char2.clear();
        self.ftp_amt1 = 0.;
        self.ftp_amt2 = 0.;
        self.ftp_date1 = 0;
        self.ftp_date2 = 0;
        self.is_cf_overdue.clear();
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashFlows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashFlows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\
    \x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\
    \x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\
    \x04date\"\xff\x13\n\x14AccountWithCashFlows\x12\x12\n\x04acid\x18\x01\
    \x20\x01(\tR\x04acid\x12\x18\n\x07foracid\x18\x02\x20\x01(\tR\x07foracid\
    \x12\x15\n\x06sol_id\x18\x03\x20\x01(\tR\x05solId\x12\"\n\racct_opn_date\
    \x18\x04\x20\x01(\x03R\x0bacctOpnDate\x12'\n\x10gl_sub_head_code\x18\x05\
    \x20\x01(\tR\rglSubHeadCode\x12\x1b\n\tschm_code\x18\x06\x20\x01(\tR\x08\
    schmCode\x12\x1b\n\tschm_type\x18\x07\x20\x01(\tR\x08schmType\x12&\n\x0f\
    acct_crncy_code\x18\x08\x20\x01(\tR\racctCrncyCode\x12\x20\n\x0crep_shdl\
    _num\x18\t\x20\x01(\x03R\nrepShdlNum\x12\"\n\rrep_shdl_date\x18\n\x20\
    \x01(\x03R\x0brepShdlDate\x12\x20\n\x0cdis_shdl_num\x18\x0b\x20\x01(\x03\
    R\ndisShdlNum\x12\"\n\rdis_shdl_date\x18\x0c\x20\x01(\x03R\x0bdisShdlDat\
    e\x12\x17\n\x07dis_amt\x18\r\x20\x01(\x01R\x06disAmt\x12\x1e\n\x0bclr_ba\
    l_amt\x18\x0e\x20\x01(\x01R\tclrBalAmt\x12\x1b\n\tsanct_lim\x18\x0f\x20\
    \x01(\x01R\x08sanctLim\x123\n\x15rephasement_principal\x18\x10\x20\x01(\
    \x01R\x14rephasementPrincipal\x12'\n\x10ei_perd_end_date\x18\x11\x20\x01\
    (\x03R\reiPerdEndDate\x12\x17\n\x07cust_id\x18\x12\x20\x01(\tR\x06custId\
    \x12\x1b\n\tcust_name\x18\x13\x20\x01(\tR\x08custName\x12\x1e\n\x0bei_sc\
    hm_flg\x18\x14\x20\x01(\tR\teiSchmFlg\x12\x1b\n\tint_basis\x18\x15\x20\
    \x01(\tR\x08intBasis\x12$\n\x0eei_formula_flg\x18\x16\x20\x01(\tR\x0ceiF\
    ormulaFlg\x12&\n\x0fei_intcalc_freq\x18\x17\x20\x01(\tR\reiIntcalcFreq\
    \x12\x1b\n\tei_method\x18\x18\x20\x01(\tR\x08eiMethod\x12\x19\n\x08int_r\
    ate\x18\x19\x20\x01(\x01R\x07intRate\x12\x19\n\x08int_type\x18\x1a\x20\
    \x01(\tR\x07intType\x12.\n\x13next_repricing_date\x18\x1b\x20\x01(\x03R\
    \x11nextRepricingDate\x12.\n\x13last_repricing_date\x18\x1c\x20\x01(\x03\
    R\x11lastRepricingDate\x12%\n\x0erepricing_freq\x18\x1d\x20\x01(\tR\rrep\
    ricingFreq\x120\n\x14float_rate_benchmark\x18\x1e\x20\x01(\tR\x12floatRa\
    teBenchmark\x12\x16\n\x06spread\x18\x1f\x20\x01(\x01R\x06spread\x12\x17\
    \n\x07npa_flg\x18\x20\x20\x01(\tR\x06npaFlg\x12-\n\x12npa_classification\
    \x18!\x20\x01(\tR\x11npaClassification\x12\x17\n\x07npa_amt\x18\"\x20\
    \x01(\x01R\x06npaAmt\x12&\n\x0fcust_country_id\x18#\x20\x01(\tR\rcustCou\
    ntryId\x12,\n\x12cust_credit_rating\x18$\x20\x01(\tR\x10custCreditRating\
    \x12$\n\x0ecust_sector_cd\x18%\x20\x01(\tR\x0ccustSectorCd\x12(\n\x10cus\
    t_industry_cd\x18&\x20\x01(\tR\x0ecustIndustryCd\x12\x1e\n\nexchangert\
    \x18'\x20\x01(\x01R\nexchangert\x12:\n\x19contractual_maturity_days\x18(\
    \x20\x01(\x03R\x17contractualMaturityDays\x124\n\x16residual_maturity_da\
    ys\x18)\x20\x01(\x03R\x14residualMaturityDays\x12\x18\n\x07custom1\x18*\
    \x20\x01(\tR\x07custom1\x12\x18\n\x07custom2\x18+\x20\x01(\tR\x07custom2\
    \x12\x18\n\x07custom3\x18,\x20\x01(\tR\x07custom3\x12\x19\n\x08gnt_type\
    \x18-\x20\x01(\tR\x07gntType\x12\x1f\n\x0bstatus_code\x18.\x20\x01(\tR\n\
    statusCode\x12'\n\x0foccupation_code\x18/\x20\x01(\tR\x0eoccupationCode\
    \x12\x16\n\x06sector\x180\x20\x01(\tR\x06sector\x12\x1f\n\x0bsector_code\
    \x181\x20\x01(\tR\nsectorCode\x12%\n\x0esubsector_code\x182\x20\x01(\tR\
    \rsubsectorCode\x12\x1c\n\tstaffflag\x183\x20\x01(\tR\tstaffflag\x12%\n\
    \x0fcre_free_text_1\x184\x20\x01(\tR\x0ccreFreeText1\x12\x1b\n\tprov_per\
    c\x185\x20\x01(\x03R\x08provPerc\x12\x10\n\x03ltv\x186\x20\x01(\x01R\x03\
    ltv\x12\x19\n\x08npa_prov\x187\x20\x01(\x01R\x07npaProv\x12\x14\n\x05dum\
    m3\x188\x20\x01(\tR\x05dumm3\x12\x14\n\x05dumm4\x189\x20\x01(\tR\x05dumm\
    4\x12\x14\n\x05dumm5\x18:\x20\x01(\tR\x05dumm5\x12\x14\n\x05dumm6\x18;\
    \x20\x01(\tR\x05dumm6\x12\x14\n\x05dumm7\x18<\x20\x01(\tR\x05dumm7\x12\
    \x14\n\x05dumm8\x18=\x20\x01(\x01R\x05dumm8\x12\x14\n\x05dumm9\x18>\x20\
    \x01(\x01R\x05dumm9\x12\x16\n\x06dumm10\x18?\x20\x01(\x01R\x06dumm10\x12\
    *\n\x10constcatgorycode\x18@\x20\x01(\tR\x10constcatgorycode\x12\x1c\n\t\
    ratingagc\x18A\x20\x01(\tR\tratingagc\x12\x16\n\x06rating\x18B\x20\x01(\
    \tR\x06rating\x121\n\x14supperannuation_flag\x18C\x20\x01(\tR\x13suppera\
    nnuationFlag\x12\x1b\n\tturn_amt1\x18D\x20\x01(\x01R\x08turnAmt1\x12\x1b\
    \n\tturn_amt2\x18E\x20\x01(\x01R\x08turnAmt2\x12\x1b\n\tturn_amt3\x18F\
    \x20\x01(\x01R\x08turnAmt3\x12\x1b\n\tftp_char1\x18G\x20\x01(\tR\x08ftpC\
    har1\x12\x1b\n\tftp_char2\x18H\x20\x01(\tR\x08ftpChar2\x12\x19\n\x08ftp_\
    amt1\x18I\x20\x01(\x01R\x07ftpAmt1\x12\x19\n\x08ftp_amt2\x18J\x20\x01(\
    \x01R\x07ftpAmt2\x12\x1b\n\tftp_date1\x18K\x20\x01(\x03R\x08ftpDate1\x12\
    \x1b\n\tftp_date2\x18L\x20\x01(\x03R\x08ftpDate2\x12\"\n\ris_cf_overdue\
    \x18M\x20\x01(\tR\x0bisCfOverdue\x12'\n\tcashflows\x18N\x20\x03(\x0b2\t.\
    CashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
