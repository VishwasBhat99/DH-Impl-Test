// This file is generated by rust-protobuf 2.11.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `advanves.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_11_0;

#[derive(PartialEq, Clone, Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;

    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size +=
                ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "interest_amount",
                    |m: &Cashflow| &m.interest_amount,
                    |m: &mut Cashflow| &mut m.interest_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "principal_amount",
                    |m: &Cashflow| &m.principal_amount,
                    |m: &mut Cashflow| &mut m.principal_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "date",
                    |m: &Cashflow| &m.date,
                    |m: &mut Cashflow| &mut m.date,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy::INIT;
        unsafe { instance.get(Cashflow::new) }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct Account {
    // message fields
    pub acc_id: ::std::string::String,
    pub cust_id: ::std::string::String,
    pub cust_type: ::std::string::String,
    pub prod_code: ::std::string::String,
    pub int_rate: f64,
    pub currency: ::std::string::String,
    pub class_id: ::std::string::String,
    pub rw: f64,
    pub pt_str_1: ::std::string::String,
    pub pt_str_2: ::std::string::String,
    pub pt_str_3: ::std::string::String,
    pub pt_str_4: ::std::string::String,
    pub pt_str_5: ::std::string::String,
    pub pt_int_1: i64,
    pub pt_int_2: i64,
    pub pt_int_3: i64,
    pub pt_int_4: i64,
    pub pt_int_5: i64,
    pub pt_f64_1: f64,
    pub pt_f64_2: f64,
    pub pt_f64_3: f64,
    pub pt_f64_4: f64,
    pub pt_f64_5: f64,
    pub b1: f64,
    pub b2: f64,
    pub b3: f64,
    pub b4: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Account {
    fn default() -> &'a Account {
        <Account as ::protobuf::Message>::default_instance()
    }
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    // string acc_id = 1;

    pub fn get_acc_id(&self) -> &str {
        &self.acc_id
    }
    pub fn clear_acc_id(&mut self) {
        self.acc_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_id(&mut self, v: ::std::string::String) {
        self.acc_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_id(&mut self) -> &mut ::std::string::String {
        &mut self.acc_id
    }

    // Take field
    pub fn take_acc_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_id, ::std::string::String::new())
    }

    // string cust_id = 2;

    pub fn get_cust_id(&self) -> &str {
        &self.cust_id
    }
    pub fn clear_cust_id(&mut self) {
        self.cust_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: ::std::string::String) {
        self.cust_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_id
    }

    // Take field
    pub fn take_cust_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_id, ::std::string::String::new())
    }

    // string cust_type = 3;

    pub fn get_cust_type(&self) -> &str {
        &self.cust_type
    }
    pub fn clear_cust_type(&mut self) {
        self.cust_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_type(&mut self, v: ::std::string::String) {
        self.cust_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_type(&mut self) -> &mut ::std::string::String {
        &mut self.cust_type
    }

    // Take field
    pub fn take_cust_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_type, ::std::string::String::new())
    }

    // string prod_code = 4;

    pub fn get_prod_code(&self) -> &str {
        &self.prod_code
    }
    pub fn clear_prod_code(&mut self) {
        self.prod_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_code(&mut self, v: ::std::string::String) {
        self.prod_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_code(&mut self) -> &mut ::std::string::String {
        &mut self.prod_code
    }

    // Take field
    pub fn take_prod_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_code, ::std::string::String::new())
    }

    // double int_rate = 5;

    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }
    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    // string currency = 6;

    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // string class_id = 7;

    pub fn get_class_id(&self) -> &str {
        &self.class_id
    }
    pub fn clear_class_id(&mut self) {
        self.class_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_class_id(&mut self, v: ::std::string::String) {
        self.class_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_class_id(&mut self) -> &mut ::std::string::String {
        &mut self.class_id
    }

    // Take field
    pub fn take_class_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.class_id, ::std::string::String::new())
    }

    // double rw = 8;

    pub fn get_rw(&self) -> f64 {
        self.rw
    }
    pub fn clear_rw(&mut self) {
        self.rw = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rw(&mut self, v: f64) {
        self.rw = v;
    }

    // string pt_str_1 = 9;

    pub fn get_pt_str_1(&self) -> &str {
        &self.pt_str_1
    }
    pub fn clear_pt_str_1(&mut self) {
        self.pt_str_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_1(&mut self, v: ::std::string::String) {
        self.pt_str_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_1(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_1
    }

    // Take field
    pub fn take_pt_str_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_1, ::std::string::String::new())
    }

    // string pt_str_2 = 10;

    pub fn get_pt_str_2(&self) -> &str {
        &self.pt_str_2
    }
    pub fn clear_pt_str_2(&mut self) {
        self.pt_str_2.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_2(&mut self, v: ::std::string::String) {
        self.pt_str_2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_2(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_2
    }

    // Take field
    pub fn take_pt_str_2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_2, ::std::string::String::new())
    }

    // string pt_str_3 = 11;

    pub fn get_pt_str_3(&self) -> &str {
        &self.pt_str_3
    }
    pub fn clear_pt_str_3(&mut self) {
        self.pt_str_3.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_3(&mut self, v: ::std::string::String) {
        self.pt_str_3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_3(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_3
    }

    // Take field
    pub fn take_pt_str_3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_3, ::std::string::String::new())
    }

    // string pt_str_4 = 12;

    pub fn get_pt_str_4(&self) -> &str {
        &self.pt_str_4
    }
    pub fn clear_pt_str_4(&mut self) {
        self.pt_str_4.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_4(&mut self, v: ::std::string::String) {
        self.pt_str_4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_4(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_4
    }

    // Take field
    pub fn take_pt_str_4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_4, ::std::string::String::new())
    }

    // string pt_str_5 = 13;

    pub fn get_pt_str_5(&self) -> &str {
        &self.pt_str_5
    }
    pub fn clear_pt_str_5(&mut self) {
        self.pt_str_5.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_5(&mut self, v: ::std::string::String) {
        self.pt_str_5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_5(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_5
    }

    // Take field
    pub fn take_pt_str_5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_5, ::std::string::String::new())
    }

    // int64 pt_int_1 = 14;

    pub fn get_pt_int_1(&self) -> i64 {
        self.pt_int_1
    }
    pub fn clear_pt_int_1(&mut self) {
        self.pt_int_1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_int_1(&mut self, v: i64) {
        self.pt_int_1 = v;
    }

    // int64 pt_int_2 = 15;

    pub fn get_pt_int_2(&self) -> i64 {
        self.pt_int_2
    }
    pub fn clear_pt_int_2(&mut self) {
        self.pt_int_2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_int_2(&mut self, v: i64) {
        self.pt_int_2 = v;
    }

    // int64 pt_int_3 = 16;

    pub fn get_pt_int_3(&self) -> i64 {
        self.pt_int_3
    }
    pub fn clear_pt_int_3(&mut self) {
        self.pt_int_3 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_int_3(&mut self, v: i64) {
        self.pt_int_3 = v;
    }

    // int64 pt_int_4 = 17;

    pub fn get_pt_int_4(&self) -> i64 {
        self.pt_int_4
    }
    pub fn clear_pt_int_4(&mut self) {
        self.pt_int_4 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_int_4(&mut self, v: i64) {
        self.pt_int_4 = v;
    }

    // int64 pt_int_5 = 18;

    pub fn get_pt_int_5(&self) -> i64 {
        self.pt_int_5
    }
    pub fn clear_pt_int_5(&mut self) {
        self.pt_int_5 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_int_5(&mut self, v: i64) {
        self.pt_int_5 = v;
    }

    // double pt_f64_1 = 19;

    pub fn get_pt_f64_1(&self) -> f64 {
        self.pt_f64_1
    }
    pub fn clear_pt_f64_1(&mut self) {
        self.pt_f64_1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_1(&mut self, v: f64) {
        self.pt_f64_1 = v;
    }

    // double pt_f64_2 = 20;

    pub fn get_pt_f64_2(&self) -> f64 {
        self.pt_f64_2
    }
    pub fn clear_pt_f64_2(&mut self) {
        self.pt_f64_2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_2(&mut self, v: f64) {
        self.pt_f64_2 = v;
    }

    // double pt_f64_3 = 21;

    pub fn get_pt_f64_3(&self) -> f64 {
        self.pt_f64_3
    }
    pub fn clear_pt_f64_3(&mut self) {
        self.pt_f64_3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_3(&mut self, v: f64) {
        self.pt_f64_3 = v;
    }

    // double pt_f64_4 = 22;

    pub fn get_pt_f64_4(&self) -> f64 {
        self.pt_f64_4
    }
    pub fn clear_pt_f64_4(&mut self) {
        self.pt_f64_4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_4(&mut self, v: f64) {
        self.pt_f64_4 = v;
    }

    // double pt_f64_5 = 23;

    pub fn get_pt_f64_5(&self) -> f64 {
        self.pt_f64_5
    }
    pub fn clear_pt_f64_5(&mut self) {
        self.pt_f64_5 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_5(&mut self, v: f64) {
        self.pt_f64_5 = v;
    }

    // double b1 = 24;

    pub fn get_b1(&self) -> f64 {
        self.b1
    }
    pub fn clear_b1(&mut self) {
        self.b1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_b1(&mut self, v: f64) {
        self.b1 = v;
    }

    // double b2 = 25;

    pub fn get_b2(&self) -> f64 {
        self.b2
    }
    pub fn clear_b2(&mut self) {
        self.b2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_b2(&mut self, v: f64) {
        self.b2 = v;
    }

    // double b3 = 26;

    pub fn get_b3(&self) -> f64 {
        self.b3
    }
    pub fn clear_b3(&mut self) {
        self.b3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_b3(&mut self, v: f64) {
        self.b3 = v;
    }

    // double b4 = 27;

    pub fn get_b4(&self) -> f64 {
        self.b4
    }
    pub fn clear_b4(&mut self) {
        self.b4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_b4(&mut self, v: f64) {
        self.b4 = v;
    }
}

impl ::protobuf::Message for Account {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.acc_id,
                    )?;
                }
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.cust_id,
                    )?;
                }
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.cust_type,
                    )?;
                }
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.prod_code,
                    )?;
                }
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                }
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.currency,
                    )?;
                }
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.class_id,
                    )?;
                }
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.rw = tmp;
                }
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.pt_str_1,
                    )?;
                }
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.pt_str_2,
                    )?;
                }
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.pt_str_3,
                    )?;
                }
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.pt_str_4,
                    )?;
                }
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.pt_str_5,
                    )?;
                }
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_int_1 = tmp;
                }
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_int_2 = tmp;
                }
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_int_3 = tmp;
                }
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_int_4 = tmp;
                }
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_int_5 = tmp;
                }
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_1 = tmp;
                }
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_2 = tmp;
                }
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_3 = tmp;
                }
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_4 = tmp;
                }
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_5 = tmp;
                }
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.b1 = tmp;
                }
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.b2 = tmp;
                }
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.b3 = tmp;
                }
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.b4 = tmp;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.acc_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.acc_id);
        }
        if !self.cust_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.cust_id);
        }
        if !self.cust_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.cust_type);
        }
        if !self.prod_code.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.prod_code);
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.currency);
        }
        if !self.class_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.class_id);
        }
        if self.rw != 0. {
            my_size += 9;
        }
        if !self.pt_str_1.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.pt_str_1);
        }
        if !self.pt_str_2.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.pt_str_2);
        }
        if !self.pt_str_3.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.pt_str_3);
        }
        if !self.pt_str_4.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.pt_str_4);
        }
        if !self.pt_str_5.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.pt_str_5);
        }
        if self.pt_int_1 != 0 {
            my_size += ::protobuf::rt::value_size(
                14,
                self.pt_int_1,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.pt_int_2 != 0 {
            my_size += ::protobuf::rt::value_size(
                15,
                self.pt_int_2,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.pt_int_3 != 0 {
            my_size += ::protobuf::rt::value_size(
                16,
                self.pt_int_3,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.pt_int_4 != 0 {
            my_size += ::protobuf::rt::value_size(
                17,
                self.pt_int_4,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.pt_int_5 != 0 {
            my_size += ::protobuf::rt::value_size(
                18,
                self.pt_int_5,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.pt_f64_1 != 0. {
            my_size += 10;
        }
        if self.pt_f64_2 != 0. {
            my_size += 10;
        }
        if self.pt_f64_3 != 0. {
            my_size += 10;
        }
        if self.pt_f64_4 != 0. {
            my_size += 10;
        }
        if self.pt_f64_5 != 0. {
            my_size += 10;
        }
        if self.b1 != 0. {
            my_size += 10;
        }
        if self.b2 != 0. {
            my_size += 10;
        }
        if self.b3 != 0. {
            my_size += 10;
        }
        if self.b4 != 0. {
            my_size += 10;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.acc_id.is_empty() {
            os.write_string(1, &self.acc_id)?;
        }
        if !self.cust_id.is_empty() {
            os.write_string(2, &self.cust_id)?;
        }
        if !self.cust_type.is_empty() {
            os.write_string(3, &self.cust_type)?;
        }
        if !self.prod_code.is_empty() {
            os.write_string(4, &self.prod_code)?;
        }
        if self.int_rate != 0. {
            os.write_double(5, self.int_rate)?;
        }
        if !self.currency.is_empty() {
            os.write_string(6, &self.currency)?;
        }
        if !self.class_id.is_empty() {
            os.write_string(7, &self.class_id)?;
        }
        if self.rw != 0. {
            os.write_double(8, self.rw)?;
        }
        if !self.pt_str_1.is_empty() {
            os.write_string(9, &self.pt_str_1)?;
        }
        if !self.pt_str_2.is_empty() {
            os.write_string(10, &self.pt_str_2)?;
        }
        if !self.pt_str_3.is_empty() {
            os.write_string(11, &self.pt_str_3)?;
        }
        if !self.pt_str_4.is_empty() {
            os.write_string(12, &self.pt_str_4)?;
        }
        if !self.pt_str_5.is_empty() {
            os.write_string(13, &self.pt_str_5)?;
        }
        if self.pt_int_1 != 0 {
            os.write_int64(14, self.pt_int_1)?;
        }
        if self.pt_int_2 != 0 {
            os.write_int64(15, self.pt_int_2)?;
        }
        if self.pt_int_3 != 0 {
            os.write_int64(16, self.pt_int_3)?;
        }
        if self.pt_int_4 != 0 {
            os.write_int64(17, self.pt_int_4)?;
        }
        if self.pt_int_5 != 0 {
            os.write_int64(18, self.pt_int_5)?;
        }
        if self.pt_f64_1 != 0. {
            os.write_double(19, self.pt_f64_1)?;
        }
        if self.pt_f64_2 != 0. {
            os.write_double(20, self.pt_f64_2)?;
        }
        if self.pt_f64_3 != 0. {
            os.write_double(21, self.pt_f64_3)?;
        }
        if self.pt_f64_4 != 0. {
            os.write_double(22, self.pt_f64_4)?;
        }
        if self.pt_f64_5 != 0. {
            os.write_double(23, self.pt_f64_5)?;
        }
        if self.b1 != 0. {
            os.write_double(24, self.b1)?;
        }
        if self.b2 != 0. {
            os.write_double(25, self.b2)?;
        }
        if self.b3 != 0. {
            os.write_double(26, self.b3)?;
        }
        if self.b4 != 0. {
            os.write_double(27, self.b4)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Account {
        Account::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "acc_id",
                    |m: &Account| &m.acc_id,
                    |m: &mut Account| &mut m.acc_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "cust_id",
                    |m: &Account| &m.cust_id,
                    |m: &mut Account| &mut m.cust_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "cust_type",
                    |m: &Account| &m.cust_type,
                    |m: &mut Account| &mut m.cust_type,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "prod_code",
                    |m: &Account| &m.prod_code,
                    |m: &mut Account| &mut m.prod_code,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "int_rate",
                    |m: &Account| &m.int_rate,
                    |m: &mut Account| &mut m.int_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "currency",
                    |m: &Account| &m.currency,
                    |m: &mut Account| &mut m.currency,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "class_id",
                    |m: &Account| &m.class_id,
                    |m: &mut Account| &mut m.class_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "rw", |m: &Account| &m.rw, |m: &mut Account| &mut m.rw
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "pt_str_1",
                    |m: &Account| &m.pt_str_1,
                    |m: &mut Account| &mut m.pt_str_1,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "pt_str_2",
                    |m: &Account| &m.pt_str_2,
                    |m: &mut Account| &mut m.pt_str_2,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "pt_str_3",
                    |m: &Account| &m.pt_str_3,
                    |m: &mut Account| &mut m.pt_str_3,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "pt_str_4",
                    |m: &Account| &m.pt_str_4,
                    |m: &mut Account| &mut m.pt_str_4,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "pt_str_5",
                    |m: &Account| &m.pt_str_5,
                    |m: &mut Account| &mut m.pt_str_5,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "pt_int_1",
                    |m: &Account| &m.pt_int_1,
                    |m: &mut Account| &mut m.pt_int_1,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "pt_int_2",
                    |m: &Account| &m.pt_int_2,
                    |m: &mut Account| &mut m.pt_int_2,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "pt_int_3",
                    |m: &Account| &m.pt_int_3,
                    |m: &mut Account| &mut m.pt_int_3,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "pt_int_4",
                    |m: &Account| &m.pt_int_4,
                    |m: &mut Account| &mut m.pt_int_4,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "pt_int_5",
                    |m: &Account| &m.pt_int_5,
                    |m: &mut Account| &mut m.pt_int_5,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "pt_f64_1",
                    |m: &Account| &m.pt_f64_1,
                    |m: &mut Account| &mut m.pt_f64_1,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "pt_f64_2",
                    |m: &Account| &m.pt_f64_2,
                    |m: &mut Account| &mut m.pt_f64_2,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "pt_f64_3",
                    |m: &Account| &m.pt_f64_3,
                    |m: &mut Account| &mut m.pt_f64_3,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "pt_f64_4",
                    |m: &Account| &m.pt_f64_4,
                    |m: &mut Account| &mut m.pt_f64_4,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "pt_f64_5",
                    |m: &Account| &m.pt_f64_5,
                    |m: &mut Account| &mut m.pt_f64_5,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "b1", |m: &Account| &m.b1, |m: &mut Account| &mut m.b1
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "b2", |m: &Account| &m.b2, |m: &mut Account| &mut m.b2
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "b3", |m: &Account| &m.b3, |m: &mut Account| &mut m.b3
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "b4", |m: &Account| &m.b4, |m: &mut Account| &mut m.b4
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Account>(
                    "Account",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Account {
        static mut instance: ::protobuf::lazy::Lazy<Account> = ::protobuf::lazy::Lazy::INIT;
        unsafe { instance.get(Account::new) }
    }
}

impl ::protobuf::Clear for Account {
    fn clear(&mut self) {
        self.acc_id.clear();
        self.cust_id.clear();
        self.cust_type.clear();
        self.prod_code.clear();
        self.int_rate = 0.;
        self.currency.clear();
        self.class_id.clear();
        self.rw = 0.;
        self.pt_str_1.clear();
        self.pt_str_2.clear();
        self.pt_str_3.clear();
        self.pt_str_4.clear();
        self.pt_str_5.clear();
        self.pt_int_1 = 0;
        self.pt_int_2 = 0;
        self.pt_int_3 = 0;
        self.pt_int_4 = 0;
        self.pt_int_5 = 0;
        self.pt_f64_1 = 0.;
        self.pt_f64_2 = 0.;
        self.pt_f64_3 = 0.;
        self.pt_f64_4 = 0.;
        self.pt_f64_5 = 0.;
        self.b1 = 0.;
        self.b2 = 0.;
        self.b3 = 0.;
        self.b4 = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eadvanves.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\
    \x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\
    \x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\
    \x04date\"\x9b\x05\n\x07Account\x12\x15\n\x06acc_id\x18\x01\x20\x01(\tR\
    \x05accId\x12\x17\n\x07cust_id\x18\x02\x20\x01(\tR\x06custId\x12\x1b\n\t\
    cust_type\x18\x03\x20\x01(\tR\x08custType\x12\x1b\n\tprod_code\x18\x04\
    \x20\x01(\tR\x08prodCode\x12\x19\n\x08int_rate\x18\x05\x20\x01(\x01R\x07\
    intRate\x12\x1a\n\x08currency\x18\x06\x20\x01(\tR\x08currency\x12\x19\n\
    \x08class_id\x18\x07\x20\x01(\tR\x07classId\x12\x0e\n\x02rw\x18\x08\x20\
    \x01(\x01R\x02rw\x12\x18\n\x08pt_str_1\x18\t\x20\x01(\tR\x06ptStr1\x12\
    \x18\n\x08pt_str_2\x18\n\x20\x01(\tR\x06ptStr2\x12\x18\n\x08pt_str_3\x18\
    \x0b\x20\x01(\tR\x06ptStr3\x12\x18\n\x08pt_str_4\x18\x0c\x20\x01(\tR\x06\
    ptStr4\x12\x18\n\x08pt_str_5\x18\r\x20\x01(\tR\x06ptStr5\x12\x18\n\x08pt\
    _int_1\x18\x0e\x20\x01(\x03R\x06ptInt1\x12\x18\n\x08pt_int_2\x18\x0f\x20\
    \x01(\x03R\x06ptInt2\x12\x18\n\x08pt_int_3\x18\x10\x20\x01(\x03R\x06ptIn\
    t3\x12\x18\n\x08pt_int_4\x18\x11\x20\x01(\x03R\x06ptInt4\x12\x18\n\x08pt\
    _int_5\x18\x12\x20\x01(\x03R\x06ptInt5\x12\x18\n\x08pt_f64_1\x18\x13\x20\
    \x01(\x01R\x06ptF641\x12\x18\n\x08pt_f64_2\x18\x14\x20\x01(\x01R\x06ptF6\
    42\x12\x18\n\x08pt_f64_3\x18\x15\x20\x01(\x01R\x06ptF643\x12\x18\n\x08pt\
    _f64_4\x18\x16\x20\x01(\x01R\x06ptF644\x12\x18\n\x08pt_f64_5\x18\x17\x20\
    \x01(\x01R\x06ptF645\x12\x0e\n\x02b1\x18\x18\x20\x01(\x01R\x02b1\x12\x0e\
    \n\x02b2\x18\x19\x20\x01(\x01R\x02b2\x12\x0e\n\x02b3\x18\x1a\x20\x01(\
    \x01R\x02b3\x12\x0e\n\x02b4\x18\x1b\x20\x01(\x01R\x02b4b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<
    ::protobuf::descriptor::FileDescriptorProto,
> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe { file_descriptor_proto_lazy.get(|| parse_descriptor_proto()) }
}
