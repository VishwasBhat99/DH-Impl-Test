// This file is generated by rust-protobuf 2.11.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `csb_col_non_sec.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_11_0;

#[derive(PartialEq, Clone, Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;

    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size +=
                ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "int_amt",
                    |m: &Cashflow| &m.int_amt,
                    |m: &mut Cashflow| &mut m.int_amt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "prin_amt",
                    |m: &Cashflow| &m.prin_amt,
                    |m: &mut Cashflow| &mut m.prin_amt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "date",
                    |m: &Cashflow| &m.date,
                    |m: &mut Cashflow| &mut m.date,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy::INIT;
        unsafe { instance.get(Cashflow::new) }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct AccountWithCashflows {
    // message fields
    pub col_id: i64,
    pub acc_id: ::std::string::String,
    pub acc_type: ::std::string::String,
    pub cust_id: i64,
    pub col_type_cd: ::std::string::String,
    pub col_type_desc: ::std::string::String,
    pub tot_val_of_col: f64,
    pub ccy: ::std::string::String,
    pub tot_mk_val_of_col: f64,
    pub mat_dt: i64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // int64 col_id = 1;

    pub fn get_col_id(&self) -> i64 {
        self.col_id
    }
    pub fn clear_col_id(&mut self) {
        self.col_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_col_id(&mut self, v: i64) {
        self.col_id = v;
    }

    // string acc_id = 2;

    pub fn get_acc_id(&self) -> &str {
        &self.acc_id
    }
    pub fn clear_acc_id(&mut self) {
        self.acc_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_id(&mut self, v: ::std::string::String) {
        self.acc_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_id(&mut self) -> &mut ::std::string::String {
        &mut self.acc_id
    }

    // Take field
    pub fn take_acc_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_id, ::std::string::String::new())
    }

    // string acc_type = 3;

    pub fn get_acc_type(&self) -> &str {
        &self.acc_type
    }
    pub fn clear_acc_type(&mut self) {
        self.acc_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_type(&mut self, v: ::std::string::String) {
        self.acc_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_type(&mut self) -> &mut ::std::string::String {
        &mut self.acc_type
    }

    // Take field
    pub fn take_acc_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_type, ::std::string::String::new())
    }

    // int64 cust_id = 4;

    pub fn get_cust_id(&self) -> i64 {
        self.cust_id
    }
    pub fn clear_cust_id(&mut self) {
        self.cust_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: i64) {
        self.cust_id = v;
    }

    // string col_type_cd = 5;

    pub fn get_col_type_cd(&self) -> &str {
        &self.col_type_cd
    }
    pub fn clear_col_type_cd(&mut self) {
        self.col_type_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_col_type_cd(&mut self, v: ::std::string::String) {
        self.col_type_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_col_type_cd(&mut self) -> &mut ::std::string::String {
        &mut self.col_type_cd
    }

    // Take field
    pub fn take_col_type_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.col_type_cd, ::std::string::String::new())
    }

    // string col_type_desc = 6;

    pub fn get_col_type_desc(&self) -> &str {
        &self.col_type_desc
    }
    pub fn clear_col_type_desc(&mut self) {
        self.col_type_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_col_type_desc(&mut self, v: ::std::string::String) {
        self.col_type_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_col_type_desc(&mut self) -> &mut ::std::string::String {
        &mut self.col_type_desc
    }

    // Take field
    pub fn take_col_type_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.col_type_desc, ::std::string::String::new())
    }

    // double tot_val_of_col = 7;

    pub fn get_tot_val_of_col(&self) -> f64 {
        self.tot_val_of_col
    }
    pub fn clear_tot_val_of_col(&mut self) {
        self.tot_val_of_col = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_val_of_col(&mut self, v: f64) {
        self.tot_val_of_col = v;
    }

    // string ccy = 8;

    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }
    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    // double tot_mk_val_of_col = 9;

    pub fn get_tot_mk_val_of_col(&self) -> f64 {
        self.tot_mk_val_of_col
    }
    pub fn clear_tot_mk_val_of_col(&mut self) {
        self.tot_mk_val_of_col = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_mk_val_of_col(&mut self, v: f64) {
        self.tot_mk_val_of_col = v;
    }

    // int64 mat_dt = 10;

    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }
    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    // repeated .Cashflow cashflows = 11;

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.col_id = tmp;
                }
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.acc_id,
                    )?;
                }
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.acc_type,
                    )?;
                }
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.cust_id = tmp;
                }
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.col_type_cd,
                    )?;
                }
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.col_type_desc,
                    )?;
                }
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.tot_val_of_col = tmp;
                }
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                }
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.tot_mk_val_of_col = tmp;
                }
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                }
                11 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.col_id != 0 {
            my_size +=
                ::protobuf::rt::value_size(1, self.col_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.acc_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.acc_id);
        }
        if !self.acc_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.acc_type);
        }
        if self.cust_id != 0 {
            my_size += ::protobuf::rt::value_size(
                4,
                self.cust_id,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.col_type_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.col_type_cd);
        }
        if !self.col_type_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.col_type_desc);
        }
        if self.tot_val_of_col != 0. {
            my_size += 9;
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.ccy);
        }
        if self.tot_mk_val_of_col != 0. {
            my_size += 9;
        }
        if self.mat_dt != 0 {
            my_size += ::protobuf::rt::value_size(
                10,
                self.mat_dt,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if self.col_id != 0 {
            os.write_int64(1, self.col_id)?;
        }
        if !self.acc_id.is_empty() {
            os.write_string(2, &self.acc_id)?;
        }
        if !self.acc_type.is_empty() {
            os.write_string(3, &self.acc_type)?;
        }
        if self.cust_id != 0 {
            os.write_int64(4, self.cust_id)?;
        }
        if !self.col_type_cd.is_empty() {
            os.write_string(5, &self.col_type_cd)?;
        }
        if !self.col_type_desc.is_empty() {
            os.write_string(6, &self.col_type_desc)?;
        }
        if self.tot_val_of_col != 0. {
            os.write_double(7, self.tot_val_of_col)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(8, &self.ccy)?;
        }
        if self.tot_mk_val_of_col != 0. {
            os.write_double(9, self.tot_mk_val_of_col)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(10, self.mat_dt)?;
        }
        for v in &self.cashflows {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "col_id",
                    |m: &AccountWithCashflows| &m.col_id,
                    |m: &mut AccountWithCashflows| &mut m.col_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "acc_id",
                    |m: &AccountWithCashflows| &m.acc_id,
                    |m: &mut AccountWithCashflows| &mut m.acc_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "acc_type",
                    |m: &AccountWithCashflows| &m.acc_type,
                    |m: &mut AccountWithCashflows| &mut m.acc_type,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "cust_id",
                    |m: &AccountWithCashflows| &m.cust_id,
                    |m: &mut AccountWithCashflows| &mut m.cust_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "col_type_cd",
                    |m: &AccountWithCashflows| &m.col_type_cd,
                    |m: &mut AccountWithCashflows| &mut m.col_type_cd,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "col_type_desc",
                    |m: &AccountWithCashflows| &m.col_type_desc,
                    |m: &mut AccountWithCashflows| &mut m.col_type_desc,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "tot_val_of_col",
                    |m: &AccountWithCashflows| &m.tot_val_of_col,
                    |m: &mut AccountWithCashflows| &mut m.tot_val_of_col,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "ccy",
                    |m: &AccountWithCashflows| &m.ccy,
                    |m: &mut AccountWithCashflows| &mut m.ccy,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "tot_mk_val_of_col",
                    |m: &AccountWithCashflows| &m.tot_mk_val_of_col,
                    |m: &mut AccountWithCashflows| &mut m.tot_mk_val_of_col,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "mat_dt",
                    |m: &AccountWithCashflows| &m.mat_dt,
                    |m: &mut AccountWithCashflows| &mut m.mat_dt,
                ));
                fields.push(
                    ::protobuf::reflect::accessor::make_repeated_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<Cashflow>,
                    >(
                        "cashflows",
                        |m: &AccountWithCashflows| &m.cashflows,
                        |m: &mut AccountWithCashflows| &mut m.cashflows,
                    ),
                );
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> =
            ::protobuf::lazy::Lazy::INIT;
        unsafe { instance.get(AccountWithCashflows::new) }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.col_id = 0;
        self.acc_id.clear();
        self.acc_type.clear();
        self.cust_id = 0;
        self.col_type_cd.clear();
        self.col_type_desc.clear();
        self.tot_val_of_col = 0.;
        self.ccy.clear();
        self.tot_mk_val_of_col = 0.;
        self.mat_dt = 0;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15csb_col_non_sec.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\
    \x01\x20\x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\
    \x07prinAmt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xdd\x02\n\
    \x14AccountWithCashflows\x12\x15\n\x06col_id\x18\x01\x20\x01(\x03R\x05co\
    lId\x12\x15\n\x06acc_id\x18\x02\x20\x01(\tR\x05accId\x12\x19\n\x08acc_ty\
    pe\x18\x03\x20\x01(\tR\x07accType\x12\x17\n\x07cust_id\x18\x04\x20\x01(\
    \x03R\x06custId\x12\x1e\n\x0bcol_type_cd\x18\x05\x20\x01(\tR\tcolTypeCd\
    \x12\"\n\rcol_type_desc\x18\x06\x20\x01(\tR\x0bcolTypeDesc\x12#\n\x0etot\
    _val_of_col\x18\x07\x20\x01(\x01R\x0btotValOfCol\x12\x10\n\x03ccy\x18\
    \x08\x20\x01(\tR\x03ccy\x12(\n\x11tot_mk_val_of_col\x18\t\x20\x01(\x01R\
    \rtotMkValOfCol\x12\x15\n\x06mat_dt\x18\n\x20\x01(\x03R\x05matDt\x12'\n\
    \tcashflows\x18\x0b\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<
    ::protobuf::descriptor::FileDescriptorProto,
> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe { file_descriptor_proto_lazy.get(|| parse_descriptor_proto()) }
}
