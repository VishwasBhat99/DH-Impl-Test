// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // double principal_amount = 2;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_amount",
                    |m: &Cashflow| { &m.interest_amount },
                    |m: &mut Cashflow| { &mut m.interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal_amount",
                    |m: &Cashflow| { &m.principal_amount },
                    |m: &mut Cashflow| { &mut m.principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_interest_amount();
        self.clear_principal_amount();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub deal_id: ::std::string::String,
    pub instrument_type: ::std::string::String,
    pub trading_banking: ::std::string::String,
    pub counter_party_id: ::std::string::String,
    pub counterparty_name: ::std::string::String,
    pub internal_external: ::std::string::String,
    pub trade_date: i64,
    pub start_date: i64,
    pub end_date: i64,
    pub currency: ::std::string::String,
    pub original_notional_rec_leg: ::std::string::String,
    pub original_notional_rec_leg_lcy: ::std::string::String,
    pub outstanding_notional_rec_leg: ::std::string::String,
    pub outstanding_notional_rec_leg_lcy: f64,
    pub app1: ::std::string::String,
    pub original_notional_pay_leg: ::std::string::String,
    pub original_notional_pay_leg_lcy: ::std::string::String,
    pub outstanding_notional_pay_leg: ::std::string::String,
    pub outstanding_notional_pay_leg_lcy: f64,
    pub contingent_notional: ::std::string::String,
    pub pay_leg_index: ::std::string::String,
    pub pay_int_rate: ::std::string::String,
    pub spread_pay_leg: ::std::string::String,
    pub rec_leg_index: ::std::string::String,
    pub rec_int_rate: ::std::string::String,
    pub spread_rec_leg: ::std::string::String,
    pub modified_duration_deal: ::std::string::String,
    pub exchange_rate: ::std::string::String,
    pub app5: ::std::string::String,
    pub pay_reset_date: i64,
    pub rec_reset_date: i64,
    pub pay_payment_date: i64,
    pub rec_payment_date: i64,
    pub day_count_convention_rec: ::std::string::String,
    pub day_count_convention_pay: ::std::string::String,
    pub pay_reset_frequency: ::std::string::String,
    pub rec_reset_frequency: ::std::string::String,
    pub pay_payment_frequency: ::std::string::String,
    pub rec_payment_frequency: ::std::string::String,
    pub leg_type: ::std::string::String,
    pub underlying_pp: ::std::string::String,
    pub net_pl_amount: ::std::string::String,
    pub counterpartycategory1: ::std::string::String,
    pub counterpartycategory2: ::std::string::String,
    pub counterpartycategory3: ::std::string::String,
    pub cashflow_type: ::std::string::String,
    pub treasury_gL_code: ::std::string::String,
    pub app2: ::std::string::String,
    pub app3: ::std::string::String,
    pub app4: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string deal_id = 1;

    pub fn clear_deal_id(&mut self) {
        self.deal_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_id(&mut self, v: ::std::string::String) {
        self.deal_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_id(&mut self) -> &mut ::std::string::String {
        &mut self.deal_id
    }

    // Take field
    pub fn take_deal_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_id, ::std::string::String::new())
    }

    pub fn get_deal_id(&self) -> &str {
        &self.deal_id
    }

    // string instrument_type = 2;

    pub fn clear_instrument_type(&mut self) {
        self.instrument_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_instrument_type(&mut self, v: ::std::string::String) {
        self.instrument_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instrument_type(&mut self) -> &mut ::std::string::String {
        &mut self.instrument_type
    }

    // Take field
    pub fn take_instrument_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instrument_type, ::std::string::String::new())
    }

    pub fn get_instrument_type(&self) -> &str {
        &self.instrument_type
    }

    // string trading_banking = 3;

    pub fn clear_trading_banking(&mut self) {
        self.trading_banking.clear();
    }

    // Param is passed by value, moved
    pub fn set_trading_banking(&mut self, v: ::std::string::String) {
        self.trading_banking = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trading_banking(&mut self) -> &mut ::std::string::String {
        &mut self.trading_banking
    }

    // Take field
    pub fn take_trading_banking(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trading_banking, ::std::string::String::new())
    }

    pub fn get_trading_banking(&self) -> &str {
        &self.trading_banking
    }

    // string counter_party_id = 4;

    pub fn clear_counter_party_id(&mut self) {
        self.counter_party_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_counter_party_id(&mut self, v: ::std::string::String) {
        self.counter_party_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counter_party_id(&mut self) -> &mut ::std::string::String {
        &mut self.counter_party_id
    }

    // Take field
    pub fn take_counter_party_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counter_party_id, ::std::string::String::new())
    }

    pub fn get_counter_party_id(&self) -> &str {
        &self.counter_party_id
    }

    // string counterparty_name = 5;

    pub fn clear_counterparty_name(&mut self) {
        self.counterparty_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterparty_name(&mut self, v: ::std::string::String) {
        self.counterparty_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty_name(&mut self) -> &mut ::std::string::String {
        &mut self.counterparty_name
    }

    // Take field
    pub fn take_counterparty_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterparty_name, ::std::string::String::new())
    }

    pub fn get_counterparty_name(&self) -> &str {
        &self.counterparty_name
    }

    // string internal_external = 6;

    pub fn clear_internal_external(&mut self) {
        self.internal_external.clear();
    }

    // Param is passed by value, moved
    pub fn set_internal_external(&mut self, v: ::std::string::String) {
        self.internal_external = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_internal_external(&mut self) -> &mut ::std::string::String {
        &mut self.internal_external
    }

    // Take field
    pub fn take_internal_external(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.internal_external, ::std::string::String::new())
    }

    pub fn get_internal_external(&self) -> &str {
        &self.internal_external
    }

    // int64 trade_date = 7;

    pub fn clear_trade_date(&mut self) {
        self.trade_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_trade_date(&mut self, v: i64) {
        self.trade_date = v;
    }

    pub fn get_trade_date(&self) -> i64 {
        self.trade_date
    }

    // int64 start_date = 8;

    pub fn clear_start_date(&mut self) {
        self.start_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_date(&mut self, v: i64) {
        self.start_date = v;
    }

    pub fn get_start_date(&self) -> i64 {
        self.start_date
    }

    // int64 end_date = 9;

    pub fn clear_end_date(&mut self) {
        self.end_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_end_date(&mut self, v: i64) {
        self.end_date = v;
    }

    pub fn get_end_date(&self) -> i64 {
        self.end_date
    }

    // string currency = 10;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // string original_notional_rec_leg = 11;

    pub fn clear_original_notional_rec_leg(&mut self) {
        self.original_notional_rec_leg.clear();
    }

    // Param is passed by value, moved
    pub fn set_original_notional_rec_leg(&mut self, v: ::std::string::String) {
        self.original_notional_rec_leg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_original_notional_rec_leg(&mut self) -> &mut ::std::string::String {
        &mut self.original_notional_rec_leg
    }

    // Take field
    pub fn take_original_notional_rec_leg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.original_notional_rec_leg, ::std::string::String::new())
    }

    pub fn get_original_notional_rec_leg(&self) -> &str {
        &self.original_notional_rec_leg
    }

    // string original_notional_rec_leg_lcy = 12;

    pub fn clear_original_notional_rec_leg_lcy(&mut self) {
        self.original_notional_rec_leg_lcy.clear();
    }

    // Param is passed by value, moved
    pub fn set_original_notional_rec_leg_lcy(&mut self, v: ::std::string::String) {
        self.original_notional_rec_leg_lcy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_original_notional_rec_leg_lcy(&mut self) -> &mut ::std::string::String {
        &mut self.original_notional_rec_leg_lcy
    }

    // Take field
    pub fn take_original_notional_rec_leg_lcy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.original_notional_rec_leg_lcy, ::std::string::String::new())
    }

    pub fn get_original_notional_rec_leg_lcy(&self) -> &str {
        &self.original_notional_rec_leg_lcy
    }

    // string outstanding_notional_rec_leg = 13;

    pub fn clear_outstanding_notional_rec_leg(&mut self) {
        self.outstanding_notional_rec_leg.clear();
    }

    // Param is passed by value, moved
    pub fn set_outstanding_notional_rec_leg(&mut self, v: ::std::string::String) {
        self.outstanding_notional_rec_leg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_outstanding_notional_rec_leg(&mut self) -> &mut ::std::string::String {
        &mut self.outstanding_notional_rec_leg
    }

    // Take field
    pub fn take_outstanding_notional_rec_leg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.outstanding_notional_rec_leg, ::std::string::String::new())
    }

    pub fn get_outstanding_notional_rec_leg(&self) -> &str {
        &self.outstanding_notional_rec_leg
    }

    // double outstanding_notional_rec_leg_lcy = 14;

    pub fn clear_outstanding_notional_rec_leg_lcy(&mut self) {
        self.outstanding_notional_rec_leg_lcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_outstanding_notional_rec_leg_lcy(&mut self, v: f64) {
        self.outstanding_notional_rec_leg_lcy = v;
    }

    pub fn get_outstanding_notional_rec_leg_lcy(&self) -> f64 {
        self.outstanding_notional_rec_leg_lcy
    }

    // string app1 = 15;

    pub fn clear_app1(&mut self) {
        self.app1.clear();
    }

    // Param is passed by value, moved
    pub fn set_app1(&mut self, v: ::std::string::String) {
        self.app1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app1(&mut self) -> &mut ::std::string::String {
        &mut self.app1
    }

    // Take field
    pub fn take_app1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app1, ::std::string::String::new())
    }

    pub fn get_app1(&self) -> &str {
        &self.app1
    }

    // string original_notional_pay_leg = 16;

    pub fn clear_original_notional_pay_leg(&mut self) {
        self.original_notional_pay_leg.clear();
    }

    // Param is passed by value, moved
    pub fn set_original_notional_pay_leg(&mut self, v: ::std::string::String) {
        self.original_notional_pay_leg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_original_notional_pay_leg(&mut self) -> &mut ::std::string::String {
        &mut self.original_notional_pay_leg
    }

    // Take field
    pub fn take_original_notional_pay_leg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.original_notional_pay_leg, ::std::string::String::new())
    }

    pub fn get_original_notional_pay_leg(&self) -> &str {
        &self.original_notional_pay_leg
    }

    // string original_notional_pay_leg_lcy = 17;

    pub fn clear_original_notional_pay_leg_lcy(&mut self) {
        self.original_notional_pay_leg_lcy.clear();
    }

    // Param is passed by value, moved
    pub fn set_original_notional_pay_leg_lcy(&mut self, v: ::std::string::String) {
        self.original_notional_pay_leg_lcy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_original_notional_pay_leg_lcy(&mut self) -> &mut ::std::string::String {
        &mut self.original_notional_pay_leg_lcy
    }

    // Take field
    pub fn take_original_notional_pay_leg_lcy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.original_notional_pay_leg_lcy, ::std::string::String::new())
    }

    pub fn get_original_notional_pay_leg_lcy(&self) -> &str {
        &self.original_notional_pay_leg_lcy
    }

    // string outstanding_notional_pay_leg = 18;

    pub fn clear_outstanding_notional_pay_leg(&mut self) {
        self.outstanding_notional_pay_leg.clear();
    }

    // Param is passed by value, moved
    pub fn set_outstanding_notional_pay_leg(&mut self, v: ::std::string::String) {
        self.outstanding_notional_pay_leg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_outstanding_notional_pay_leg(&mut self) -> &mut ::std::string::String {
        &mut self.outstanding_notional_pay_leg
    }

    // Take field
    pub fn take_outstanding_notional_pay_leg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.outstanding_notional_pay_leg, ::std::string::String::new())
    }

    pub fn get_outstanding_notional_pay_leg(&self) -> &str {
        &self.outstanding_notional_pay_leg
    }

    // double outstanding_notional_pay_leg_lcy = 19;

    pub fn clear_outstanding_notional_pay_leg_lcy(&mut self) {
        self.outstanding_notional_pay_leg_lcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_outstanding_notional_pay_leg_lcy(&mut self, v: f64) {
        self.outstanding_notional_pay_leg_lcy = v;
    }

    pub fn get_outstanding_notional_pay_leg_lcy(&self) -> f64 {
        self.outstanding_notional_pay_leg_lcy
    }

    // string contingent_notional = 20;

    pub fn clear_contingent_notional(&mut self) {
        self.contingent_notional.clear();
    }

    // Param is passed by value, moved
    pub fn set_contingent_notional(&mut self, v: ::std::string::String) {
        self.contingent_notional = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contingent_notional(&mut self) -> &mut ::std::string::String {
        &mut self.contingent_notional
    }

    // Take field
    pub fn take_contingent_notional(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contingent_notional, ::std::string::String::new())
    }

    pub fn get_contingent_notional(&self) -> &str {
        &self.contingent_notional
    }

    // string pay_leg_index = 21;

    pub fn clear_pay_leg_index(&mut self) {
        self.pay_leg_index.clear();
    }

    // Param is passed by value, moved
    pub fn set_pay_leg_index(&mut self, v: ::std::string::String) {
        self.pay_leg_index = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pay_leg_index(&mut self) -> &mut ::std::string::String {
        &mut self.pay_leg_index
    }

    // Take field
    pub fn take_pay_leg_index(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pay_leg_index, ::std::string::String::new())
    }

    pub fn get_pay_leg_index(&self) -> &str {
        &self.pay_leg_index
    }

    // string pay_int_rate = 22;

    pub fn clear_pay_int_rate(&mut self) {
        self.pay_int_rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_pay_int_rate(&mut self, v: ::std::string::String) {
        self.pay_int_rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pay_int_rate(&mut self) -> &mut ::std::string::String {
        &mut self.pay_int_rate
    }

    // Take field
    pub fn take_pay_int_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pay_int_rate, ::std::string::String::new())
    }

    pub fn get_pay_int_rate(&self) -> &str {
        &self.pay_int_rate
    }

    // string spread_pay_leg = 23;

    pub fn clear_spread_pay_leg(&mut self) {
        self.spread_pay_leg.clear();
    }

    // Param is passed by value, moved
    pub fn set_spread_pay_leg(&mut self, v: ::std::string::String) {
        self.spread_pay_leg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spread_pay_leg(&mut self) -> &mut ::std::string::String {
        &mut self.spread_pay_leg
    }

    // Take field
    pub fn take_spread_pay_leg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.spread_pay_leg, ::std::string::String::new())
    }

    pub fn get_spread_pay_leg(&self) -> &str {
        &self.spread_pay_leg
    }

    // string rec_leg_index = 24;

    pub fn clear_rec_leg_index(&mut self) {
        self.rec_leg_index.clear();
    }

    // Param is passed by value, moved
    pub fn set_rec_leg_index(&mut self, v: ::std::string::String) {
        self.rec_leg_index = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rec_leg_index(&mut self) -> &mut ::std::string::String {
        &mut self.rec_leg_index
    }

    // Take field
    pub fn take_rec_leg_index(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rec_leg_index, ::std::string::String::new())
    }

    pub fn get_rec_leg_index(&self) -> &str {
        &self.rec_leg_index
    }

    // string rec_int_rate = 25;

    pub fn clear_rec_int_rate(&mut self) {
        self.rec_int_rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_rec_int_rate(&mut self, v: ::std::string::String) {
        self.rec_int_rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rec_int_rate(&mut self) -> &mut ::std::string::String {
        &mut self.rec_int_rate
    }

    // Take field
    pub fn take_rec_int_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rec_int_rate, ::std::string::String::new())
    }

    pub fn get_rec_int_rate(&self) -> &str {
        &self.rec_int_rate
    }

    // string spread_rec_leg = 26;

    pub fn clear_spread_rec_leg(&mut self) {
        self.spread_rec_leg.clear();
    }

    // Param is passed by value, moved
    pub fn set_spread_rec_leg(&mut self, v: ::std::string::String) {
        self.spread_rec_leg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spread_rec_leg(&mut self) -> &mut ::std::string::String {
        &mut self.spread_rec_leg
    }

    // Take field
    pub fn take_spread_rec_leg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.spread_rec_leg, ::std::string::String::new())
    }

    pub fn get_spread_rec_leg(&self) -> &str {
        &self.spread_rec_leg
    }

    // string modified_duration_deal = 27;

    pub fn clear_modified_duration_deal(&mut self) {
        self.modified_duration_deal.clear();
    }

    // Param is passed by value, moved
    pub fn set_modified_duration_deal(&mut self, v: ::std::string::String) {
        self.modified_duration_deal = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_modified_duration_deal(&mut self) -> &mut ::std::string::String {
        &mut self.modified_duration_deal
    }

    // Take field
    pub fn take_modified_duration_deal(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.modified_duration_deal, ::std::string::String::new())
    }

    pub fn get_modified_duration_deal(&self) -> &str {
        &self.modified_duration_deal
    }

    // string exchange_rate = 28;

    pub fn clear_exchange_rate(&mut self) {
        self.exchange_rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_exchange_rate(&mut self, v: ::std::string::String) {
        self.exchange_rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exchange_rate(&mut self) -> &mut ::std::string::String {
        &mut self.exchange_rate
    }

    // Take field
    pub fn take_exchange_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.exchange_rate, ::std::string::String::new())
    }

    pub fn get_exchange_rate(&self) -> &str {
        &self.exchange_rate
    }

    // string app5 = 29;

    pub fn clear_app5(&mut self) {
        self.app5.clear();
    }

    // Param is passed by value, moved
    pub fn set_app5(&mut self, v: ::std::string::String) {
        self.app5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app5(&mut self) -> &mut ::std::string::String {
        &mut self.app5
    }

    // Take field
    pub fn take_app5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app5, ::std::string::String::new())
    }

    pub fn get_app5(&self) -> &str {
        &self.app5
    }

    // int64 pay_reset_date = 30;

    pub fn clear_pay_reset_date(&mut self) {
        self.pay_reset_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_pay_reset_date(&mut self, v: i64) {
        self.pay_reset_date = v;
    }

    pub fn get_pay_reset_date(&self) -> i64 {
        self.pay_reset_date
    }

    // int64 rec_reset_date = 31;

    pub fn clear_rec_reset_date(&mut self) {
        self.rec_reset_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_rec_reset_date(&mut self, v: i64) {
        self.rec_reset_date = v;
    }

    pub fn get_rec_reset_date(&self) -> i64 {
        self.rec_reset_date
    }

    // int64 pay_payment_date = 32;

    pub fn clear_pay_payment_date(&mut self) {
        self.pay_payment_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_pay_payment_date(&mut self, v: i64) {
        self.pay_payment_date = v;
    }

    pub fn get_pay_payment_date(&self) -> i64 {
        self.pay_payment_date
    }

    // int64 rec_payment_date = 33;

    pub fn clear_rec_payment_date(&mut self) {
        self.rec_payment_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_rec_payment_date(&mut self, v: i64) {
        self.rec_payment_date = v;
    }

    pub fn get_rec_payment_date(&self) -> i64 {
        self.rec_payment_date
    }

    // string day_count_convention_rec = 34;

    pub fn clear_day_count_convention_rec(&mut self) {
        self.day_count_convention_rec.clear();
    }

    // Param is passed by value, moved
    pub fn set_day_count_convention_rec(&mut self, v: ::std::string::String) {
        self.day_count_convention_rec = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_day_count_convention_rec(&mut self) -> &mut ::std::string::String {
        &mut self.day_count_convention_rec
    }

    // Take field
    pub fn take_day_count_convention_rec(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.day_count_convention_rec, ::std::string::String::new())
    }

    pub fn get_day_count_convention_rec(&self) -> &str {
        &self.day_count_convention_rec
    }

    // string day_count_convention_pay = 35;

    pub fn clear_day_count_convention_pay(&mut self) {
        self.day_count_convention_pay.clear();
    }

    // Param is passed by value, moved
    pub fn set_day_count_convention_pay(&mut self, v: ::std::string::String) {
        self.day_count_convention_pay = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_day_count_convention_pay(&mut self) -> &mut ::std::string::String {
        &mut self.day_count_convention_pay
    }

    // Take field
    pub fn take_day_count_convention_pay(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.day_count_convention_pay, ::std::string::String::new())
    }

    pub fn get_day_count_convention_pay(&self) -> &str {
        &self.day_count_convention_pay
    }

    // string pay_reset_frequency = 36;

    pub fn clear_pay_reset_frequency(&mut self) {
        self.pay_reset_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_pay_reset_frequency(&mut self, v: ::std::string::String) {
        self.pay_reset_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pay_reset_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.pay_reset_frequency
    }

    // Take field
    pub fn take_pay_reset_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pay_reset_frequency, ::std::string::String::new())
    }

    pub fn get_pay_reset_frequency(&self) -> &str {
        &self.pay_reset_frequency
    }

    // string rec_reset_frequency = 37;

    pub fn clear_rec_reset_frequency(&mut self) {
        self.rec_reset_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_rec_reset_frequency(&mut self, v: ::std::string::String) {
        self.rec_reset_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rec_reset_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.rec_reset_frequency
    }

    // Take field
    pub fn take_rec_reset_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rec_reset_frequency, ::std::string::String::new())
    }

    pub fn get_rec_reset_frequency(&self) -> &str {
        &self.rec_reset_frequency
    }

    // string pay_payment_frequency = 38;

    pub fn clear_pay_payment_frequency(&mut self) {
        self.pay_payment_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_pay_payment_frequency(&mut self, v: ::std::string::String) {
        self.pay_payment_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pay_payment_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.pay_payment_frequency
    }

    // Take field
    pub fn take_pay_payment_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pay_payment_frequency, ::std::string::String::new())
    }

    pub fn get_pay_payment_frequency(&self) -> &str {
        &self.pay_payment_frequency
    }

    // string rec_payment_frequency = 39;

    pub fn clear_rec_payment_frequency(&mut self) {
        self.rec_payment_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_rec_payment_frequency(&mut self, v: ::std::string::String) {
        self.rec_payment_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rec_payment_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.rec_payment_frequency
    }

    // Take field
    pub fn take_rec_payment_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rec_payment_frequency, ::std::string::String::new())
    }

    pub fn get_rec_payment_frequency(&self) -> &str {
        &self.rec_payment_frequency
    }

    // string leg_type = 40;

    pub fn clear_leg_type(&mut self) {
        self.leg_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_leg_type(&mut self, v: ::std::string::String) {
        self.leg_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leg_type(&mut self) -> &mut ::std::string::String {
        &mut self.leg_type
    }

    // Take field
    pub fn take_leg_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.leg_type, ::std::string::String::new())
    }

    pub fn get_leg_type(&self) -> &str {
        &self.leg_type
    }

    // string underlying_pp = 41;

    pub fn clear_underlying_pp(&mut self) {
        self.underlying_pp.clear();
    }

    // Param is passed by value, moved
    pub fn set_underlying_pp(&mut self, v: ::std::string::String) {
        self.underlying_pp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_underlying_pp(&mut self) -> &mut ::std::string::String {
        &mut self.underlying_pp
    }

    // Take field
    pub fn take_underlying_pp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.underlying_pp, ::std::string::String::new())
    }

    pub fn get_underlying_pp(&self) -> &str {
        &self.underlying_pp
    }

    // string net_pl_amount = 42;

    pub fn clear_net_pl_amount(&mut self) {
        self.net_pl_amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_net_pl_amount(&mut self, v: ::std::string::String) {
        self.net_pl_amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_net_pl_amount(&mut self) -> &mut ::std::string::String {
        &mut self.net_pl_amount
    }

    // Take field
    pub fn take_net_pl_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.net_pl_amount, ::std::string::String::new())
    }

    pub fn get_net_pl_amount(&self) -> &str {
        &self.net_pl_amount
    }

    // string counterpartycategory1 = 43;

    pub fn clear_counterpartycategory1(&mut self) {
        self.counterpartycategory1.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterpartycategory1(&mut self, v: ::std::string::String) {
        self.counterpartycategory1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterpartycategory1(&mut self) -> &mut ::std::string::String {
        &mut self.counterpartycategory1
    }

    // Take field
    pub fn take_counterpartycategory1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterpartycategory1, ::std::string::String::new())
    }

    pub fn get_counterpartycategory1(&self) -> &str {
        &self.counterpartycategory1
    }

    // string counterpartycategory2 = 44;

    pub fn clear_counterpartycategory2(&mut self) {
        self.counterpartycategory2.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterpartycategory2(&mut self, v: ::std::string::String) {
        self.counterpartycategory2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterpartycategory2(&mut self) -> &mut ::std::string::String {
        &mut self.counterpartycategory2
    }

    // Take field
    pub fn take_counterpartycategory2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterpartycategory2, ::std::string::String::new())
    }

    pub fn get_counterpartycategory2(&self) -> &str {
        &self.counterpartycategory2
    }

    // string counterpartycategory3 = 45;

    pub fn clear_counterpartycategory3(&mut self) {
        self.counterpartycategory3.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterpartycategory3(&mut self, v: ::std::string::String) {
        self.counterpartycategory3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterpartycategory3(&mut self) -> &mut ::std::string::String {
        &mut self.counterpartycategory3
    }

    // Take field
    pub fn take_counterpartycategory3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterpartycategory3, ::std::string::String::new())
    }

    pub fn get_counterpartycategory3(&self) -> &str {
        &self.counterpartycategory3
    }

    // string cashflow_type = 46;

    pub fn clear_cashflow_type(&mut self) {
        self.cashflow_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflow_type(&mut self, v: ::std::string::String) {
        self.cashflow_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cashflow_type(&mut self) -> &mut ::std::string::String {
        &mut self.cashflow_type
    }

    // Take field
    pub fn take_cashflow_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cashflow_type, ::std::string::String::new())
    }

    pub fn get_cashflow_type(&self) -> &str {
        &self.cashflow_type
    }

    // string treasury_gL_code = 47;

    pub fn clear_treasury_gL_code(&mut self) {
        self.treasury_gL_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_treasury_gL_code(&mut self, v: ::std::string::String) {
        self.treasury_gL_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_treasury_gL_code(&mut self) -> &mut ::std::string::String {
        &mut self.treasury_gL_code
    }

    // Take field
    pub fn take_treasury_gL_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.treasury_gL_code, ::std::string::String::new())
    }

    pub fn get_treasury_gL_code(&self) -> &str {
        &self.treasury_gL_code
    }

    // string app2 = 48;

    pub fn clear_app2(&mut self) {
        self.app2.clear();
    }

    // Param is passed by value, moved
    pub fn set_app2(&mut self, v: ::std::string::String) {
        self.app2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app2(&mut self) -> &mut ::std::string::String {
        &mut self.app2
    }

    // Take field
    pub fn take_app2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app2, ::std::string::String::new())
    }

    pub fn get_app2(&self) -> &str {
        &self.app2
    }

    // string app3 = 49;

    pub fn clear_app3(&mut self) {
        self.app3.clear();
    }

    // Param is passed by value, moved
    pub fn set_app3(&mut self, v: ::std::string::String) {
        self.app3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app3(&mut self) -> &mut ::std::string::String {
        &mut self.app3
    }

    // Take field
    pub fn take_app3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app3, ::std::string::String::new())
    }

    pub fn get_app3(&self) -> &str {
        &self.app3
    }

    // string app4 = 50;

    pub fn clear_app4(&mut self) {
        self.app4.clear();
    }

    // Param is passed by value, moved
    pub fn set_app4(&mut self, v: ::std::string::String) {
        self.app4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app4(&mut self) -> &mut ::std::string::String {
        &mut self.app4
    }

    // Take field
    pub fn take_app4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app4, ::std::string::String::new())
    }

    pub fn get_app4(&self) -> &str {
        &self.app4
    }

    // repeated .Cashflow cashflows = 51;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instrument_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trading_banking)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counter_party_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterparty_name)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.internal_external)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.trade_date = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.start_date = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.end_date = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.original_notional_rec_leg)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.original_notional_rec_leg_lcy)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.outstanding_notional_rec_leg)?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.outstanding_notional_rec_leg_lcy = tmp;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app1)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.original_notional_pay_leg)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.original_notional_pay_leg_lcy)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.outstanding_notional_pay_leg)?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.outstanding_notional_pay_leg_lcy = tmp;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contingent_notional)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pay_leg_index)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pay_int_rate)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.spread_pay_leg)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rec_leg_index)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rec_int_rate)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.spread_rec_leg)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.modified_duration_deal)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.exchange_rate)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app5)?;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pay_reset_date = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rec_reset_date = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pay_payment_date = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rec_payment_date = tmp;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.day_count_convention_rec)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.day_count_convention_pay)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pay_reset_frequency)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rec_reset_frequency)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pay_payment_frequency)?;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rec_payment_frequency)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.leg_type)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.underlying_pp)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.net_pl_amount)?;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterpartycategory1)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterpartycategory2)?;
                },
                45 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterpartycategory3)?;
                },
                46 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cashflow_type)?;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.treasury_gL_code)?;
                },
                48 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app2)?;
                },
                49 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app3)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app4)?;
                },
                51 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.deal_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.deal_id);
        }
        if !self.instrument_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.instrument_type);
        }
        if !self.trading_banking.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.trading_banking);
        }
        if !self.counter_party_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.counter_party_id);
        }
        if !self.counterparty_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.counterparty_name);
        }
        if !self.internal_external.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.internal_external);
        }
        if self.trade_date != 0 {
            my_size += ::protobuf::rt::value_size(7, self.trade_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.start_date != 0 {
            my_size += ::protobuf::rt::value_size(8, self.start_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.end_date != 0 {
            my_size += ::protobuf::rt::value_size(9, self.end_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.currency);
        }
        if !self.original_notional_rec_leg.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.original_notional_rec_leg);
        }
        if !self.original_notional_rec_leg_lcy.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.original_notional_rec_leg_lcy);
        }
        if !self.outstanding_notional_rec_leg.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.outstanding_notional_rec_leg);
        }
        if self.outstanding_notional_rec_leg_lcy != 0. {
            my_size += 9;
        }
        if !self.app1.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.app1);
        }
        if !self.original_notional_pay_leg.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.original_notional_pay_leg);
        }
        if !self.original_notional_pay_leg_lcy.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.original_notional_pay_leg_lcy);
        }
        if !self.outstanding_notional_pay_leg.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.outstanding_notional_pay_leg);
        }
        if self.outstanding_notional_pay_leg_lcy != 0. {
            my_size += 10;
        }
        if !self.contingent_notional.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.contingent_notional);
        }
        if !self.pay_leg_index.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.pay_leg_index);
        }
        if !self.pay_int_rate.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.pay_int_rate);
        }
        if !self.spread_pay_leg.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.spread_pay_leg);
        }
        if !self.rec_leg_index.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.rec_leg_index);
        }
        if !self.rec_int_rate.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.rec_int_rate);
        }
        if !self.spread_rec_leg.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.spread_rec_leg);
        }
        if !self.modified_duration_deal.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.modified_duration_deal);
        }
        if !self.exchange_rate.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.exchange_rate);
        }
        if !self.app5.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.app5);
        }
        if self.pay_reset_date != 0 {
            my_size += ::protobuf::rt::value_size(30, self.pay_reset_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rec_reset_date != 0 {
            my_size += ::protobuf::rt::value_size(31, self.rec_reset_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pay_payment_date != 0 {
            my_size += ::protobuf::rt::value_size(32, self.pay_payment_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rec_payment_date != 0 {
            my_size += ::protobuf::rt::value_size(33, self.rec_payment_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.day_count_convention_rec.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.day_count_convention_rec);
        }
        if !self.day_count_convention_pay.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.day_count_convention_pay);
        }
        if !self.pay_reset_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.pay_reset_frequency);
        }
        if !self.rec_reset_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.rec_reset_frequency);
        }
        if !self.pay_payment_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.pay_payment_frequency);
        }
        if !self.rec_payment_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.rec_payment_frequency);
        }
        if !self.leg_type.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.leg_type);
        }
        if !self.underlying_pp.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.underlying_pp);
        }
        if !self.net_pl_amount.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.net_pl_amount);
        }
        if !self.counterpartycategory1.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.counterpartycategory1);
        }
        if !self.counterpartycategory2.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.counterpartycategory2);
        }
        if !self.counterpartycategory3.is_empty() {
            my_size += ::protobuf::rt::string_size(45, &self.counterpartycategory3);
        }
        if !self.cashflow_type.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.cashflow_type);
        }
        if !self.treasury_gL_code.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.treasury_gL_code);
        }
        if !self.app2.is_empty() {
            my_size += ::protobuf::rt::string_size(48, &self.app2);
        }
        if !self.app3.is_empty() {
            my_size += ::protobuf::rt::string_size(49, &self.app3);
        }
        if !self.app4.is_empty() {
            my_size += ::protobuf::rt::string_size(50, &self.app4);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.deal_id.is_empty() {
            os.write_string(1, &self.deal_id)?;
        }
        if !self.instrument_type.is_empty() {
            os.write_string(2, &self.instrument_type)?;
        }
        if !self.trading_banking.is_empty() {
            os.write_string(3, &self.trading_banking)?;
        }
        if !self.counter_party_id.is_empty() {
            os.write_string(4, &self.counter_party_id)?;
        }
        if !self.counterparty_name.is_empty() {
            os.write_string(5, &self.counterparty_name)?;
        }
        if !self.internal_external.is_empty() {
            os.write_string(6, &self.internal_external)?;
        }
        if self.trade_date != 0 {
            os.write_int64(7, self.trade_date)?;
        }
        if self.start_date != 0 {
            os.write_int64(8, self.start_date)?;
        }
        if self.end_date != 0 {
            os.write_int64(9, self.end_date)?;
        }
        if !self.currency.is_empty() {
            os.write_string(10, &self.currency)?;
        }
        if !self.original_notional_rec_leg.is_empty() {
            os.write_string(11, &self.original_notional_rec_leg)?;
        }
        if !self.original_notional_rec_leg_lcy.is_empty() {
            os.write_string(12, &self.original_notional_rec_leg_lcy)?;
        }
        if !self.outstanding_notional_rec_leg.is_empty() {
            os.write_string(13, &self.outstanding_notional_rec_leg)?;
        }
        if self.outstanding_notional_rec_leg_lcy != 0. {
            os.write_double(14, self.outstanding_notional_rec_leg_lcy)?;
        }
        if !self.app1.is_empty() {
            os.write_string(15, &self.app1)?;
        }
        if !self.original_notional_pay_leg.is_empty() {
            os.write_string(16, &self.original_notional_pay_leg)?;
        }
        if !self.original_notional_pay_leg_lcy.is_empty() {
            os.write_string(17, &self.original_notional_pay_leg_lcy)?;
        }
        if !self.outstanding_notional_pay_leg.is_empty() {
            os.write_string(18, &self.outstanding_notional_pay_leg)?;
        }
        if self.outstanding_notional_pay_leg_lcy != 0. {
            os.write_double(19, self.outstanding_notional_pay_leg_lcy)?;
        }
        if !self.contingent_notional.is_empty() {
            os.write_string(20, &self.contingent_notional)?;
        }
        if !self.pay_leg_index.is_empty() {
            os.write_string(21, &self.pay_leg_index)?;
        }
        if !self.pay_int_rate.is_empty() {
            os.write_string(22, &self.pay_int_rate)?;
        }
        if !self.spread_pay_leg.is_empty() {
            os.write_string(23, &self.spread_pay_leg)?;
        }
        if !self.rec_leg_index.is_empty() {
            os.write_string(24, &self.rec_leg_index)?;
        }
        if !self.rec_int_rate.is_empty() {
            os.write_string(25, &self.rec_int_rate)?;
        }
        if !self.spread_rec_leg.is_empty() {
            os.write_string(26, &self.spread_rec_leg)?;
        }
        if !self.modified_duration_deal.is_empty() {
            os.write_string(27, &self.modified_duration_deal)?;
        }
        if !self.exchange_rate.is_empty() {
            os.write_string(28, &self.exchange_rate)?;
        }
        if !self.app5.is_empty() {
            os.write_string(29, &self.app5)?;
        }
        if self.pay_reset_date != 0 {
            os.write_int64(30, self.pay_reset_date)?;
        }
        if self.rec_reset_date != 0 {
            os.write_int64(31, self.rec_reset_date)?;
        }
        if self.pay_payment_date != 0 {
            os.write_int64(32, self.pay_payment_date)?;
        }
        if self.rec_payment_date != 0 {
            os.write_int64(33, self.rec_payment_date)?;
        }
        if !self.day_count_convention_rec.is_empty() {
            os.write_string(34, &self.day_count_convention_rec)?;
        }
        if !self.day_count_convention_pay.is_empty() {
            os.write_string(35, &self.day_count_convention_pay)?;
        }
        if !self.pay_reset_frequency.is_empty() {
            os.write_string(36, &self.pay_reset_frequency)?;
        }
        if !self.rec_reset_frequency.is_empty() {
            os.write_string(37, &self.rec_reset_frequency)?;
        }
        if !self.pay_payment_frequency.is_empty() {
            os.write_string(38, &self.pay_payment_frequency)?;
        }
        if !self.rec_payment_frequency.is_empty() {
            os.write_string(39, &self.rec_payment_frequency)?;
        }
        if !self.leg_type.is_empty() {
            os.write_string(40, &self.leg_type)?;
        }
        if !self.underlying_pp.is_empty() {
            os.write_string(41, &self.underlying_pp)?;
        }
        if !self.net_pl_amount.is_empty() {
            os.write_string(42, &self.net_pl_amount)?;
        }
        if !self.counterpartycategory1.is_empty() {
            os.write_string(43, &self.counterpartycategory1)?;
        }
        if !self.counterpartycategory2.is_empty() {
            os.write_string(44, &self.counterpartycategory2)?;
        }
        if !self.counterpartycategory3.is_empty() {
            os.write_string(45, &self.counterpartycategory3)?;
        }
        if !self.cashflow_type.is_empty() {
            os.write_string(46, &self.cashflow_type)?;
        }
        if !self.treasury_gL_code.is_empty() {
            os.write_string(47, &self.treasury_gL_code)?;
        }
        if !self.app2.is_empty() {
            os.write_string(48, &self.app2)?;
        }
        if !self.app3.is_empty() {
            os.write_string(49, &self.app3)?;
        }
        if !self.app4.is_empty() {
            os.write_string(50, &self.app4)?;
        }
        for v in &self.cashflows {
            os.write_tag(51, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_id",
                    |m: &AccountWithCashflows| { &m.deal_id },
                    |m: &mut AccountWithCashflows| { &mut m.deal_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "instrument_type",
                    |m: &AccountWithCashflows| { &m.instrument_type },
                    |m: &mut AccountWithCashflows| { &mut m.instrument_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "trading_banking",
                    |m: &AccountWithCashflows| { &m.trading_banking },
                    |m: &mut AccountWithCashflows| { &mut m.trading_banking },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counter_party_id",
                    |m: &AccountWithCashflows| { &m.counter_party_id },
                    |m: &mut AccountWithCashflows| { &mut m.counter_party_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counterparty_name",
                    |m: &AccountWithCashflows| { &m.counterparty_name },
                    |m: &mut AccountWithCashflows| { &mut m.counterparty_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "internal_external",
                    |m: &AccountWithCashflows| { &m.internal_external },
                    |m: &mut AccountWithCashflows| { &mut m.internal_external },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "trade_date",
                    |m: &AccountWithCashflows| { &m.trade_date },
                    |m: &mut AccountWithCashflows| { &mut m.trade_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "start_date",
                    |m: &AccountWithCashflows| { &m.start_date },
                    |m: &mut AccountWithCashflows| { &mut m.start_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "end_date",
                    |m: &AccountWithCashflows| { &m.end_date },
                    |m: &mut AccountWithCashflows| { &mut m.end_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &AccountWithCashflows| { &m.currency },
                    |m: &mut AccountWithCashflows| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "original_notional_rec_leg",
                    |m: &AccountWithCashflows| { &m.original_notional_rec_leg },
                    |m: &mut AccountWithCashflows| { &mut m.original_notional_rec_leg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "original_notional_rec_leg_lcy",
                    |m: &AccountWithCashflows| { &m.original_notional_rec_leg_lcy },
                    |m: &mut AccountWithCashflows| { &mut m.original_notional_rec_leg_lcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "outstanding_notional_rec_leg",
                    |m: &AccountWithCashflows| { &m.outstanding_notional_rec_leg },
                    |m: &mut AccountWithCashflows| { &mut m.outstanding_notional_rec_leg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "outstanding_notional_rec_leg_lcy",
                    |m: &AccountWithCashflows| { &m.outstanding_notional_rec_leg_lcy },
                    |m: &mut AccountWithCashflows| { &mut m.outstanding_notional_rec_leg_lcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app1",
                    |m: &AccountWithCashflows| { &m.app1 },
                    |m: &mut AccountWithCashflows| { &mut m.app1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "original_notional_pay_leg",
                    |m: &AccountWithCashflows| { &m.original_notional_pay_leg },
                    |m: &mut AccountWithCashflows| { &mut m.original_notional_pay_leg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "original_notional_pay_leg_lcy",
                    |m: &AccountWithCashflows| { &m.original_notional_pay_leg_lcy },
                    |m: &mut AccountWithCashflows| { &mut m.original_notional_pay_leg_lcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "outstanding_notional_pay_leg",
                    |m: &AccountWithCashflows| { &m.outstanding_notional_pay_leg },
                    |m: &mut AccountWithCashflows| { &mut m.outstanding_notional_pay_leg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "outstanding_notional_pay_leg_lcy",
                    |m: &AccountWithCashflows| { &m.outstanding_notional_pay_leg_lcy },
                    |m: &mut AccountWithCashflows| { &mut m.outstanding_notional_pay_leg_lcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "contingent_notional",
                    |m: &AccountWithCashflows| { &m.contingent_notional },
                    |m: &mut AccountWithCashflows| { &mut m.contingent_notional },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pay_leg_index",
                    |m: &AccountWithCashflows| { &m.pay_leg_index },
                    |m: &mut AccountWithCashflows| { &mut m.pay_leg_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pay_int_rate",
                    |m: &AccountWithCashflows| { &m.pay_int_rate },
                    |m: &mut AccountWithCashflows| { &mut m.pay_int_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "spread_pay_leg",
                    |m: &AccountWithCashflows| { &m.spread_pay_leg },
                    |m: &mut AccountWithCashflows| { &mut m.spread_pay_leg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rec_leg_index",
                    |m: &AccountWithCashflows| { &m.rec_leg_index },
                    |m: &mut AccountWithCashflows| { &mut m.rec_leg_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rec_int_rate",
                    |m: &AccountWithCashflows| { &m.rec_int_rate },
                    |m: &mut AccountWithCashflows| { &mut m.rec_int_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "spread_rec_leg",
                    |m: &AccountWithCashflows| { &m.spread_rec_leg },
                    |m: &mut AccountWithCashflows| { &mut m.spread_rec_leg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "modified_duration_deal",
                    |m: &AccountWithCashflows| { &m.modified_duration_deal },
                    |m: &mut AccountWithCashflows| { &mut m.modified_duration_deal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "exchange_rate",
                    |m: &AccountWithCashflows| { &m.exchange_rate },
                    |m: &mut AccountWithCashflows| { &mut m.exchange_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app5",
                    |m: &AccountWithCashflows| { &m.app5 },
                    |m: &mut AccountWithCashflows| { &mut m.app5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "pay_reset_date",
                    |m: &AccountWithCashflows| { &m.pay_reset_date },
                    |m: &mut AccountWithCashflows| { &mut m.pay_reset_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "rec_reset_date",
                    |m: &AccountWithCashflows| { &m.rec_reset_date },
                    |m: &mut AccountWithCashflows| { &mut m.rec_reset_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "pay_payment_date",
                    |m: &AccountWithCashflows| { &m.pay_payment_date },
                    |m: &mut AccountWithCashflows| { &mut m.pay_payment_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "rec_payment_date",
                    |m: &AccountWithCashflows| { &m.rec_payment_date },
                    |m: &mut AccountWithCashflows| { &mut m.rec_payment_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "day_count_convention_rec",
                    |m: &AccountWithCashflows| { &m.day_count_convention_rec },
                    |m: &mut AccountWithCashflows| { &mut m.day_count_convention_rec },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "day_count_convention_pay",
                    |m: &AccountWithCashflows| { &m.day_count_convention_pay },
                    |m: &mut AccountWithCashflows| { &mut m.day_count_convention_pay },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pay_reset_frequency",
                    |m: &AccountWithCashflows| { &m.pay_reset_frequency },
                    |m: &mut AccountWithCashflows| { &mut m.pay_reset_frequency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rec_reset_frequency",
                    |m: &AccountWithCashflows| { &m.rec_reset_frequency },
                    |m: &mut AccountWithCashflows| { &mut m.rec_reset_frequency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pay_payment_frequency",
                    |m: &AccountWithCashflows| { &m.pay_payment_frequency },
                    |m: &mut AccountWithCashflows| { &mut m.pay_payment_frequency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rec_payment_frequency",
                    |m: &AccountWithCashflows| { &m.rec_payment_frequency },
                    |m: &mut AccountWithCashflows| { &mut m.rec_payment_frequency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "leg_type",
                    |m: &AccountWithCashflows| { &m.leg_type },
                    |m: &mut AccountWithCashflows| { &mut m.leg_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "underlying_pp",
                    |m: &AccountWithCashflows| { &m.underlying_pp },
                    |m: &mut AccountWithCashflows| { &mut m.underlying_pp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "net_pl_amount",
                    |m: &AccountWithCashflows| { &m.net_pl_amount },
                    |m: &mut AccountWithCashflows| { &mut m.net_pl_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counterpartycategory1",
                    |m: &AccountWithCashflows| { &m.counterpartycategory1 },
                    |m: &mut AccountWithCashflows| { &mut m.counterpartycategory1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counterpartycategory2",
                    |m: &AccountWithCashflows| { &m.counterpartycategory2 },
                    |m: &mut AccountWithCashflows| { &mut m.counterpartycategory2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counterpartycategory3",
                    |m: &AccountWithCashflows| { &m.counterpartycategory3 },
                    |m: &mut AccountWithCashflows| { &mut m.counterpartycategory3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cashflow_type",
                    |m: &AccountWithCashflows| { &m.cashflow_type },
                    |m: &mut AccountWithCashflows| { &mut m.cashflow_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "treasury_gL_code",
                    |m: &AccountWithCashflows| { &m.treasury_gL_code },
                    |m: &mut AccountWithCashflows| { &mut m.treasury_gL_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app2",
                    |m: &AccountWithCashflows| { &m.app2 },
                    |m: &mut AccountWithCashflows| { &mut m.app2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app3",
                    |m: &AccountWithCashflows| { &m.app3 },
                    |m: &mut AccountWithCashflows| { &mut m.app3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app4",
                    |m: &AccountWithCashflows| { &m.app4 },
                    |m: &mut AccountWithCashflows| { &mut m.app4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_deal_id();
        self.clear_instrument_type();
        self.clear_trading_banking();
        self.clear_counter_party_id();
        self.clear_counterparty_name();
        self.clear_internal_external();
        self.clear_trade_date();
        self.clear_start_date();
        self.clear_end_date();
        self.clear_currency();
        self.clear_original_notional_rec_leg();
        self.clear_original_notional_rec_leg_lcy();
        self.clear_outstanding_notional_rec_leg();
        self.clear_outstanding_notional_rec_leg_lcy();
        self.clear_app1();
        self.clear_original_notional_pay_leg();
        self.clear_original_notional_pay_leg_lcy();
        self.clear_outstanding_notional_pay_leg();
        self.clear_outstanding_notional_pay_leg_lcy();
        self.clear_contingent_notional();
        self.clear_pay_leg_index();
        self.clear_pay_int_rate();
        self.clear_spread_pay_leg();
        self.clear_rec_leg_index();
        self.clear_rec_int_rate();
        self.clear_spread_rec_leg();
        self.clear_modified_duration_deal();
        self.clear_exchange_rate();
        self.clear_app5();
        self.clear_pay_reset_date();
        self.clear_rec_reset_date();
        self.clear_pay_payment_date();
        self.clear_rec_payment_date();
        self.clear_day_count_convention_rec();
        self.clear_day_count_convention_pay();
        self.clear_pay_reset_frequency();
        self.clear_rec_reset_frequency();
        self.clear_pay_payment_frequency();
        self.clear_rec_payment_frequency();
        self.clear_leg_type();
        self.clear_underlying_pp();
        self.clear_net_pl_amount();
        self.clear_counterpartycategory1();
        self.clear_counterpartycategory2();
        self.clear_counterpartycategory3();
        self.clear_cashflow_type();
        self.clear_treasury_gL_code();
        self.clear_app2();
        self.clear_app3();
        self.clear_app4();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16proto/deriv_swap.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\
    \x18\x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\
    \x02\x20\x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\
    \x03R\x04date\"\xa6\x11\n\x14AccountWithCashflows\x12\x17\n\x07deal_id\
    \x18\x01\x20\x01(\tR\x06dealId\x12'\n\x0finstrument_type\x18\x02\x20\x01\
    (\tR\x0einstrumentType\x12'\n\x0ftrading_banking\x18\x03\x20\x01(\tR\x0e\
    tradingBanking\x12(\n\x10counter_party_id\x18\x04\x20\x01(\tR\x0ecounter\
    PartyId\x12+\n\x11counterparty_name\x18\x05\x20\x01(\tR\x10counterpartyN\
    ame\x12+\n\x11internal_external\x18\x06\x20\x01(\tR\x10internalExternal\
    \x12\x1d\n\ntrade_date\x18\x07\x20\x01(\x03R\ttradeDate\x12\x1d\n\nstart\
    _date\x18\x08\x20\x01(\x03R\tstartDate\x12\x19\n\x08end_date\x18\t\x20\
    \x01(\x03R\x07endDate\x12\x1a\n\x08currency\x18\n\x20\x01(\tR\x08currenc\
    y\x129\n\x19original_notional_rec_leg\x18\x0b\x20\x01(\tR\x16originalNot\
    ionalRecLeg\x12@\n\x1doriginal_notional_rec_leg_lcy\x18\x0c\x20\x01(\tR\
    \x19originalNotionalRecLegLcy\x12?\n\x1coutstanding_notional_rec_leg\x18\
    \r\x20\x01(\tR\x19outstandingNotionalRecLeg\x12F\n\x20outstanding_notion\
    al_rec_leg_lcy\x18\x0e\x20\x01(\x01R\x1coutstandingNotionalRecLegLcy\x12\
    \x12\n\x04app1\x18\x0f\x20\x01(\tR\x04app1\x129\n\x19original_notional_p\
    ay_leg\x18\x10\x20\x01(\tR\x16originalNotionalPayLeg\x12@\n\x1doriginal_\
    notional_pay_leg_lcy\x18\x11\x20\x01(\tR\x19originalNotionalPayLegLcy\
    \x12?\n\x1coutstanding_notional_pay_leg\x18\x12\x20\x01(\tR\x19outstandi\
    ngNotionalPayLeg\x12F\n\x20outstanding_notional_pay_leg_lcy\x18\x13\x20\
    \x01(\x01R\x1coutstandingNotionalPayLegLcy\x12/\n\x13contingent_notional\
    \x18\x14\x20\x01(\tR\x12contingentNotional\x12\"\n\rpay_leg_index\x18\
    \x15\x20\x01(\tR\x0bpayLegIndex\x12\x20\n\x0cpay_int_rate\x18\x16\x20\
    \x01(\tR\npayIntRate\x12$\n\x0espread_pay_leg\x18\x17\x20\x01(\tR\x0cspr\
    eadPayLeg\x12\"\n\rrec_leg_index\x18\x18\x20\x01(\tR\x0brecLegIndex\x12\
    \x20\n\x0crec_int_rate\x18\x19\x20\x01(\tR\nrecIntRate\x12$\n\x0espread_\
    rec_leg\x18\x1a\x20\x01(\tR\x0cspreadRecLeg\x124\n\x16modified_duration_\
    deal\x18\x1b\x20\x01(\tR\x14modifiedDurationDeal\x12#\n\rexchange_rate\
    \x18\x1c\x20\x01(\tR\x0cexchangeRate\x12\x12\n\x04app5\x18\x1d\x20\x01(\
    \tR\x04app5\x12$\n\x0epay_reset_date\x18\x1e\x20\x01(\x03R\x0cpayResetDa\
    te\x12$\n\x0erec_reset_date\x18\x1f\x20\x01(\x03R\x0crecResetDate\x12(\n\
    \x10pay_payment_date\x18\x20\x20\x01(\x03R\x0epayPaymentDate\x12(\n\x10r\
    ec_payment_date\x18!\x20\x01(\x03R\x0erecPaymentDate\x127\n\x18day_count\
    _convention_rec\x18\"\x20\x01(\tR\x15dayCountConventionRec\x127\n\x18day\
    _count_convention_pay\x18#\x20\x01(\tR\x15dayCountConventionPay\x12.\n\
    \x13pay_reset_frequency\x18$\x20\x01(\tR\x11payResetFrequency\x12.\n\x13\
    rec_reset_frequency\x18%\x20\x01(\tR\x11recResetFrequency\x122\n\x15pay_\
    payment_frequency\x18&\x20\x01(\tR\x13payPaymentFrequency\x122\n\x15rec_\
    payment_frequency\x18'\x20\x01(\tR\x13recPaymentFrequency\x12\x19\n\x08l\
    eg_type\x18(\x20\x01(\tR\x07legType\x12#\n\runderlying_pp\x18)\x20\x01(\
    \tR\x0cunderlyingPp\x12\"\n\rnet_pl_amount\x18*\x20\x01(\tR\x0bnetPlAmou\
    nt\x124\n\x15counterpartycategory1\x18+\x20\x01(\tR\x15counterpartycateg\
    ory1\x124\n\x15counterpartycategory2\x18,\x20\x01(\tR\x15counterpartycat\
    egory2\x124\n\x15counterpartycategory3\x18-\x20\x01(\tR\x15counterpartyc\
    ategory3\x12#\n\rcashflow_type\x18.\x20\x01(\tR\x0ccashflowType\x12(\n\
    \x10treasury_gL_code\x18/\x20\x01(\tR\x0etreasuryGLCode\x12\x12\n\x04app\
    2\x180\x20\x01(\tR\x04app2\x12\x12\n\x04app3\x181\x20\x01(\tR\x04app3\
    \x12\x12\n\x04app4\x182\x20\x01(\tR\x04app4\x12'\n\tcashflows\x183\x20\
    \x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
