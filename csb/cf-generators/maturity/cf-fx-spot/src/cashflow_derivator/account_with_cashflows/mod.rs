// This file is generated by rust-protobuf 2.6.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub reval_dt: i64,
    pub deal_type: ::std::string::String,
    pub deal_ref: ::std::string::String,
    pub leg_id: ::std::string::String,
    pub portfolio: ::std::string::String,
    pub product: ::std::string::String,
    pub counter_party: ::std::string::String,
    pub buy_sell: ::std::string::String,
    pub deal_dt: i64,
    pub val_dt: i64,
    pub ccy_1: ::std::string::String,
    pub ccy_2: ::std::string::String,
    pub deal_rt: f64,
    pub ccy1_amt: f64,
    pub crnct2_amt: f64,
    pub reval_rt: f64,
    pub reval_eqv: f64,
    pub actual_pl: f64,
    pub pnl_conversion_rt: f64,
    pub int_rt: f64,
    pub discounted_factor: f64,
    pub present_val_pl: f64,
    pub ccy1_spot_rt: f64,
    pub ccy2_spot_rt: f64,
    pub inr_eq_ccy1_spot_rt: f64,
    pub inr_eq_ccy2_spot_rt: f64,
    pub branch_code: ::std::string::String,
    pub trsy_gl: ::std::string::String,
    pub cf_dt: i64,
    pub cf_ccy: ::std::string::String,
    pub cf_amt: f64,
    pub cf_typ: ::std::string::String,
    pub prin_amt: f64,
    pub int_amt: f64,
    pub flow_typ: ::std::string::String,
    pub abs_cf_amt: f64,
    pub cbs_gl_cd: ::std::string::String,
    pub w4b_cd: ::std::string::String,
    pub balm_llg: ::std::string::String,
    pub care_llg: ::std::string::String,
    pub ba_llg: ::std::string::String,
    pub tot_prin_amt: f64,
    pub tot_int_amt: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // int64 reval_dt = 1;


    pub fn get_reval_dt(&self) -> i64 {
        self.reval_dt
    }
    pub fn clear_reval_dt(&mut self) {
        self.reval_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_reval_dt(&mut self, v: i64) {
        self.reval_dt = v;
    }

    // string deal_type = 2;


    pub fn get_deal_type(&self) -> &str {
        &self.deal_type
    }
    pub fn clear_deal_type(&mut self) {
        self.deal_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_type(&mut self, v: ::std::string::String) {
        self.deal_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_type(&mut self) -> &mut ::std::string::String {
        &mut self.deal_type
    }

    // Take field
    pub fn take_deal_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_type, ::std::string::String::new())
    }

    // string deal_ref = 3;


    pub fn get_deal_ref(&self) -> &str {
        &self.deal_ref
    }
    pub fn clear_deal_ref(&mut self) {
        self.deal_ref.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_ref(&mut self, v: ::std::string::String) {
        self.deal_ref = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_ref(&mut self) -> &mut ::std::string::String {
        &mut self.deal_ref
    }

    // Take field
    pub fn take_deal_ref(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_ref, ::std::string::String::new())
    }

    // string leg_id = 4;


    pub fn get_leg_id(&self) -> &str {
        &self.leg_id
    }
    pub fn clear_leg_id(&mut self) {
        self.leg_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_leg_id(&mut self, v: ::std::string::String) {
        self.leg_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leg_id(&mut self) -> &mut ::std::string::String {
        &mut self.leg_id
    }

    // Take field
    pub fn take_leg_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.leg_id, ::std::string::String::new())
    }

    // string portfolio = 5;


    pub fn get_portfolio(&self) -> &str {
        &self.portfolio
    }
    pub fn clear_portfolio(&mut self) {
        self.portfolio.clear();
    }

    // Param is passed by value, moved
    pub fn set_portfolio(&mut self, v: ::std::string::String) {
        self.portfolio = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_portfolio(&mut self) -> &mut ::std::string::String {
        &mut self.portfolio
    }

    // Take field
    pub fn take_portfolio(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.portfolio, ::std::string::String::new())
    }

    // string product = 6;


    pub fn get_product(&self) -> &str {
        &self.product
    }
    pub fn clear_product(&mut self) {
        self.product.clear();
    }

    // Param is passed by value, moved
    pub fn set_product(&mut self, v: ::std::string::String) {
        self.product = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product(&mut self) -> &mut ::std::string::String {
        &mut self.product
    }

    // Take field
    pub fn take_product(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product, ::std::string::String::new())
    }

    // string counter_party = 7;


    pub fn get_counter_party(&self) -> &str {
        &self.counter_party
    }
    pub fn clear_counter_party(&mut self) {
        self.counter_party.clear();
    }

    // Param is passed by value, moved
    pub fn set_counter_party(&mut self, v: ::std::string::String) {
        self.counter_party = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counter_party(&mut self) -> &mut ::std::string::String {
        &mut self.counter_party
    }

    // Take field
    pub fn take_counter_party(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counter_party, ::std::string::String::new())
    }

    // string buy_sell = 8;


    pub fn get_buy_sell(&self) -> &str {
        &self.buy_sell
    }
    pub fn clear_buy_sell(&mut self) {
        self.buy_sell.clear();
    }

    // Param is passed by value, moved
    pub fn set_buy_sell(&mut self, v: ::std::string::String) {
        self.buy_sell = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buy_sell(&mut self) -> &mut ::std::string::String {
        &mut self.buy_sell
    }

    // Take field
    pub fn take_buy_sell(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buy_sell, ::std::string::String::new())
    }

    // int64 deal_dt = 9;


    pub fn get_deal_dt(&self) -> i64 {
        self.deal_dt
    }
    pub fn clear_deal_dt(&mut self) {
        self.deal_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_deal_dt(&mut self, v: i64) {
        self.deal_dt = v;
    }

    // int64 val_dt = 10;


    pub fn get_val_dt(&self) -> i64 {
        self.val_dt
    }
    pub fn clear_val_dt(&mut self) {
        self.val_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_val_dt(&mut self, v: i64) {
        self.val_dt = v;
    }

    // string ccy_1 = 11;


    pub fn get_ccy_1(&self) -> &str {
        &self.ccy_1
    }
    pub fn clear_ccy_1(&mut self) {
        self.ccy_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy_1(&mut self, v: ::std::string::String) {
        self.ccy_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy_1(&mut self) -> &mut ::std::string::String {
        &mut self.ccy_1
    }

    // Take field
    pub fn take_ccy_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy_1, ::std::string::String::new())
    }

    // string ccy_2 = 12;


    pub fn get_ccy_2(&self) -> &str {
        &self.ccy_2
    }
    pub fn clear_ccy_2(&mut self) {
        self.ccy_2.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy_2(&mut self, v: ::std::string::String) {
        self.ccy_2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy_2(&mut self) -> &mut ::std::string::String {
        &mut self.ccy_2
    }

    // Take field
    pub fn take_ccy_2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy_2, ::std::string::String::new())
    }

    // double deal_rt = 13;


    pub fn get_deal_rt(&self) -> f64 {
        self.deal_rt
    }
    pub fn clear_deal_rt(&mut self) {
        self.deal_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_deal_rt(&mut self, v: f64) {
        self.deal_rt = v;
    }

    // double ccy1_amt = 14;


    pub fn get_ccy1_amt(&self) -> f64 {
        self.ccy1_amt
    }
    pub fn clear_ccy1_amt(&mut self) {
        self.ccy1_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ccy1_amt(&mut self, v: f64) {
        self.ccy1_amt = v;
    }

    // double crnct2_amt = 15;


    pub fn get_crnct2_amt(&self) -> f64 {
        self.crnct2_amt
    }
    pub fn clear_crnct2_amt(&mut self) {
        self.crnct2_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_crnct2_amt(&mut self, v: f64) {
        self.crnct2_amt = v;
    }

    // double reval_rt = 16;


    pub fn get_reval_rt(&self) -> f64 {
        self.reval_rt
    }
    pub fn clear_reval_rt(&mut self) {
        self.reval_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_reval_rt(&mut self, v: f64) {
        self.reval_rt = v;
    }

    // double reval_eqv = 17;


    pub fn get_reval_eqv(&self) -> f64 {
        self.reval_eqv
    }
    pub fn clear_reval_eqv(&mut self) {
        self.reval_eqv = 0.;
    }

    // Param is passed by value, moved
    pub fn set_reval_eqv(&mut self, v: f64) {
        self.reval_eqv = v;
    }

    // double actual_pl = 18;


    pub fn get_actual_pl(&self) -> f64 {
        self.actual_pl
    }
    pub fn clear_actual_pl(&mut self) {
        self.actual_pl = 0.;
    }

    // Param is passed by value, moved
    pub fn set_actual_pl(&mut self, v: f64) {
        self.actual_pl = v;
    }

    // double pnl_conversion_rt = 19;


    pub fn get_pnl_conversion_rt(&self) -> f64 {
        self.pnl_conversion_rt
    }
    pub fn clear_pnl_conversion_rt(&mut self) {
        self.pnl_conversion_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pnl_conversion_rt(&mut self, v: f64) {
        self.pnl_conversion_rt = v;
    }

    // double int_rt = 20;


    pub fn get_int_rt(&self) -> f64 {
        self.int_rt
    }
    pub fn clear_int_rt(&mut self) {
        self.int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rt(&mut self, v: f64) {
        self.int_rt = v;
    }

    // double discounted_factor = 21;


    pub fn get_discounted_factor(&self) -> f64 {
        self.discounted_factor
    }
    pub fn clear_discounted_factor(&mut self) {
        self.discounted_factor = 0.;
    }

    // Param is passed by value, moved
    pub fn set_discounted_factor(&mut self, v: f64) {
        self.discounted_factor = v;
    }

    // double present_val_pl = 22;


    pub fn get_present_val_pl(&self) -> f64 {
        self.present_val_pl
    }
    pub fn clear_present_val_pl(&mut self) {
        self.present_val_pl = 0.;
    }

    // Param is passed by value, moved
    pub fn set_present_val_pl(&mut self, v: f64) {
        self.present_val_pl = v;
    }

    // double ccy1_spot_rt = 23;


    pub fn get_ccy1_spot_rt(&self) -> f64 {
        self.ccy1_spot_rt
    }
    pub fn clear_ccy1_spot_rt(&mut self) {
        self.ccy1_spot_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ccy1_spot_rt(&mut self, v: f64) {
        self.ccy1_spot_rt = v;
    }

    // double ccy2_spot_rt = 24;


    pub fn get_ccy2_spot_rt(&self) -> f64 {
        self.ccy2_spot_rt
    }
    pub fn clear_ccy2_spot_rt(&mut self) {
        self.ccy2_spot_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ccy2_spot_rt(&mut self, v: f64) {
        self.ccy2_spot_rt = v;
    }

    // double inr_eq_ccy1_spot_rt = 25;


    pub fn get_inr_eq_ccy1_spot_rt(&self) -> f64 {
        self.inr_eq_ccy1_spot_rt
    }
    pub fn clear_inr_eq_ccy1_spot_rt(&mut self) {
        self.inr_eq_ccy1_spot_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_inr_eq_ccy1_spot_rt(&mut self, v: f64) {
        self.inr_eq_ccy1_spot_rt = v;
    }

    // double inr_eq_ccy2_spot_rt = 26;


    pub fn get_inr_eq_ccy2_spot_rt(&self) -> f64 {
        self.inr_eq_ccy2_spot_rt
    }
    pub fn clear_inr_eq_ccy2_spot_rt(&mut self) {
        self.inr_eq_ccy2_spot_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_inr_eq_ccy2_spot_rt(&mut self, v: f64) {
        self.inr_eq_ccy2_spot_rt = v;
    }

    // string branch_code = 27;


    pub fn get_branch_code(&self) -> &str {
        &self.branch_code
    }
    pub fn clear_branch_code(&mut self) {
        self.branch_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch_code(&mut self, v: ::std::string::String) {
        self.branch_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch_code(&mut self) -> &mut ::std::string::String {
        &mut self.branch_code
    }

    // Take field
    pub fn take_branch_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch_code, ::std::string::String::new())
    }

    // string trsy_gl = 28;


    pub fn get_trsy_gl(&self) -> &str {
        &self.trsy_gl
    }
    pub fn clear_trsy_gl(&mut self) {
        self.trsy_gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_trsy_gl(&mut self, v: ::std::string::String) {
        self.trsy_gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trsy_gl(&mut self) -> &mut ::std::string::String {
        &mut self.trsy_gl
    }

    // Take field
    pub fn take_trsy_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trsy_gl, ::std::string::String::new())
    }

    // int64 cf_dt = 29;


    pub fn get_cf_dt(&self) -> i64 {
        self.cf_dt
    }
    pub fn clear_cf_dt(&mut self) {
        self.cf_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_cf_dt(&mut self, v: i64) {
        self.cf_dt = v;
    }

    // string cf_ccy = 30;


    pub fn get_cf_ccy(&self) -> &str {
        &self.cf_ccy
    }
    pub fn clear_cf_ccy(&mut self) {
        self.cf_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_cf_ccy(&mut self, v: ::std::string::String) {
        self.cf_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.cf_ccy
    }

    // Take field
    pub fn take_cf_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cf_ccy, ::std::string::String::new())
    }

    // double cf_amt = 31;


    pub fn get_cf_amt(&self) -> f64 {
        self.cf_amt
    }
    pub fn clear_cf_amt(&mut self) {
        self.cf_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cf_amt(&mut self, v: f64) {
        self.cf_amt = v;
    }

    // string cf_typ = 32;


    pub fn get_cf_typ(&self) -> &str {
        &self.cf_typ
    }
    pub fn clear_cf_typ(&mut self) {
        self.cf_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_cf_typ(&mut self, v: ::std::string::String) {
        self.cf_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf_typ(&mut self) -> &mut ::std::string::String {
        &mut self.cf_typ
    }

    // Take field
    pub fn take_cf_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cf_typ, ::std::string::String::new())
    }

    // double prin_amt = 33;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // double int_amt = 34;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // string flow_typ = 35;


    pub fn get_flow_typ(&self) -> &str {
        &self.flow_typ
    }
    pub fn clear_flow_typ(&mut self) {
        self.flow_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_flow_typ(&mut self, v: ::std::string::String) {
        self.flow_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flow_typ(&mut self) -> &mut ::std::string::String {
        &mut self.flow_typ
    }

    // Take field
    pub fn take_flow_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flow_typ, ::std::string::String::new())
    }

    // double abs_cf_amt = 36;


    pub fn get_abs_cf_amt(&self) -> f64 {
        self.abs_cf_amt
    }
    pub fn clear_abs_cf_amt(&mut self) {
        self.abs_cf_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_abs_cf_amt(&mut self, v: f64) {
        self.abs_cf_amt = v;
    }

    // string cbs_gl_cd = 37;


    pub fn get_cbs_gl_cd(&self) -> &str {
        &self.cbs_gl_cd
    }
    pub fn clear_cbs_gl_cd(&mut self) {
        self.cbs_gl_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_cbs_gl_cd(&mut self, v: ::std::string::String) {
        self.cbs_gl_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cbs_gl_cd(&mut self) -> &mut ::std::string::String {
        &mut self.cbs_gl_cd
    }

    // Take field
    pub fn take_cbs_gl_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cbs_gl_cd, ::std::string::String::new())
    }

    // string w4b_cd = 38;


    pub fn get_w4b_cd(&self) -> &str {
        &self.w4b_cd
    }
    pub fn clear_w4b_cd(&mut self) {
        self.w4b_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_w4b_cd(&mut self, v: ::std::string::String) {
        self.w4b_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_w4b_cd(&mut self) -> &mut ::std::string::String {
        &mut self.w4b_cd
    }

    // Take field
    pub fn take_w4b_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.w4b_cd, ::std::string::String::new())
    }

    // string balm_llg = 39;


    pub fn get_balm_llg(&self) -> &str {
        &self.balm_llg
    }
    pub fn clear_balm_llg(&mut self) {
        self.balm_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_balm_llg(&mut self, v: ::std::string::String) {
        self.balm_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balm_llg(&mut self) -> &mut ::std::string::String {
        &mut self.balm_llg
    }

    // Take field
    pub fn take_balm_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balm_llg, ::std::string::String::new())
    }

    // string care_llg = 40;


    pub fn get_care_llg(&self) -> &str {
        &self.care_llg
    }
    pub fn clear_care_llg(&mut self) {
        self.care_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_care_llg(&mut self, v: ::std::string::String) {
        self.care_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_care_llg(&mut self) -> &mut ::std::string::String {
        &mut self.care_llg
    }

    // Take field
    pub fn take_care_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.care_llg, ::std::string::String::new())
    }

    // string ba_llg = 41;


    pub fn get_ba_llg(&self) -> &str {
        &self.ba_llg
    }
    pub fn clear_ba_llg(&mut self) {
        self.ba_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_ba_llg(&mut self, v: ::std::string::String) {
        self.ba_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ba_llg(&mut self) -> &mut ::std::string::String {
        &mut self.ba_llg
    }

    // Take field
    pub fn take_ba_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ba_llg, ::std::string::String::new())
    }

    // double tot_prin_amt = 42;


    pub fn get_tot_prin_amt(&self) -> f64 {
        self.tot_prin_amt
    }
    pub fn clear_tot_prin_amt(&mut self) {
        self.tot_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_prin_amt(&mut self, v: f64) {
        self.tot_prin_amt = v;
    }

    // double tot_int_amt = 43;


    pub fn get_tot_int_amt(&self) -> f64 {
        self.tot_int_amt
    }
    pub fn clear_tot_int_amt(&mut self) {
        self.tot_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_int_amt(&mut self, v: f64) {
        self.tot_int_amt = v;
    }

    // repeated .Cashflow cashflows = 44;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.reval_dt = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_ref)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.leg_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.portfolio)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counter_party)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buy_sell)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deal_dt = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.val_dt = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy_1)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy_2)?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.deal_rt = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ccy1_amt = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.crnct2_amt = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.reval_rt = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.reval_eqv = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.actual_pl = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pnl_conversion_rt = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rt = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.discounted_factor = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.present_val_pl = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ccy1_spot_rt = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ccy2_spot_rt = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.inr_eq_ccy1_spot_rt = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.inr_eq_ccy2_spot_rt = tmp;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch_code)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trsy_gl)?;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cf_dt = tmp;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cf_ccy)?;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.cf_amt = tmp;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cf_typ)?;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flow_typ)?;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.abs_cf_amt = tmp;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cbs_gl_cd)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.w4b_cd)?;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.balm_llg)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.care_llg)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ba_llg)?;
                },
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_prin_amt = tmp;
                },
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_int_amt = tmp;
                },
                44 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.reval_dt != 0 {
            my_size += ::protobuf::rt::value_size(1, self.reval_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.deal_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.deal_type);
        }
        if !self.deal_ref.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.deal_ref);
        }
        if !self.leg_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.leg_id);
        }
        if !self.portfolio.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.portfolio);
        }
        if !self.product.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.product);
        }
        if !self.counter_party.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.counter_party);
        }
        if !self.buy_sell.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.buy_sell);
        }
        if self.deal_dt != 0 {
            my_size += ::protobuf::rt::value_size(9, self.deal_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.val_dt != 0 {
            my_size += ::protobuf::rt::value_size(10, self.val_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ccy_1.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.ccy_1);
        }
        if !self.ccy_2.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.ccy_2);
        }
        if self.deal_rt != 0. {
            my_size += 9;
        }
        if self.ccy1_amt != 0. {
            my_size += 9;
        }
        if self.crnct2_amt != 0. {
            my_size += 9;
        }
        if self.reval_rt != 0. {
            my_size += 10;
        }
        if self.reval_eqv != 0. {
            my_size += 10;
        }
        if self.actual_pl != 0. {
            my_size += 10;
        }
        if self.pnl_conversion_rt != 0. {
            my_size += 10;
        }
        if self.int_rt != 0. {
            my_size += 10;
        }
        if self.discounted_factor != 0. {
            my_size += 10;
        }
        if self.present_val_pl != 0. {
            my_size += 10;
        }
        if self.ccy1_spot_rt != 0. {
            my_size += 10;
        }
        if self.ccy2_spot_rt != 0. {
            my_size += 10;
        }
        if self.inr_eq_ccy1_spot_rt != 0. {
            my_size += 10;
        }
        if self.inr_eq_ccy2_spot_rt != 0. {
            my_size += 10;
        }
        if !self.branch_code.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.branch_code);
        }
        if !self.trsy_gl.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.trsy_gl);
        }
        if self.cf_dt != 0 {
            my_size += ::protobuf::rt::value_size(29, self.cf_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.cf_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.cf_ccy);
        }
        if self.cf_amt != 0. {
            my_size += 10;
        }
        if !self.cf_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.cf_typ);
        }
        if self.prin_amt != 0. {
            my_size += 10;
        }
        if self.int_amt != 0. {
            my_size += 10;
        }
        if !self.flow_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.flow_typ);
        }
        if self.abs_cf_amt != 0. {
            my_size += 10;
        }
        if !self.cbs_gl_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.cbs_gl_cd);
        }
        if !self.w4b_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.w4b_cd);
        }
        if !self.balm_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.balm_llg);
        }
        if !self.care_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.care_llg);
        }
        if !self.ba_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.ba_llg);
        }
        if self.tot_prin_amt != 0. {
            my_size += 10;
        }
        if self.tot_int_amt != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.reval_dt != 0 {
            os.write_int64(1, self.reval_dt)?;
        }
        if !self.deal_type.is_empty() {
            os.write_string(2, &self.deal_type)?;
        }
        if !self.deal_ref.is_empty() {
            os.write_string(3, &self.deal_ref)?;
        }
        if !self.leg_id.is_empty() {
            os.write_string(4, &self.leg_id)?;
        }
        if !self.portfolio.is_empty() {
            os.write_string(5, &self.portfolio)?;
        }
        if !self.product.is_empty() {
            os.write_string(6, &self.product)?;
        }
        if !self.counter_party.is_empty() {
            os.write_string(7, &self.counter_party)?;
        }
        if !self.buy_sell.is_empty() {
            os.write_string(8, &self.buy_sell)?;
        }
        if self.deal_dt != 0 {
            os.write_int64(9, self.deal_dt)?;
        }
        if self.val_dt != 0 {
            os.write_int64(10, self.val_dt)?;
        }
        if !self.ccy_1.is_empty() {
            os.write_string(11, &self.ccy_1)?;
        }
        if !self.ccy_2.is_empty() {
            os.write_string(12, &self.ccy_2)?;
        }
        if self.deal_rt != 0. {
            os.write_double(13, self.deal_rt)?;
        }
        if self.ccy1_amt != 0. {
            os.write_double(14, self.ccy1_amt)?;
        }
        if self.crnct2_amt != 0. {
            os.write_double(15, self.crnct2_amt)?;
        }
        if self.reval_rt != 0. {
            os.write_double(16, self.reval_rt)?;
        }
        if self.reval_eqv != 0. {
            os.write_double(17, self.reval_eqv)?;
        }
        if self.actual_pl != 0. {
            os.write_double(18, self.actual_pl)?;
        }
        if self.pnl_conversion_rt != 0. {
            os.write_double(19, self.pnl_conversion_rt)?;
        }
        if self.int_rt != 0. {
            os.write_double(20, self.int_rt)?;
        }
        if self.discounted_factor != 0. {
            os.write_double(21, self.discounted_factor)?;
        }
        if self.present_val_pl != 0. {
            os.write_double(22, self.present_val_pl)?;
        }
        if self.ccy1_spot_rt != 0. {
            os.write_double(23, self.ccy1_spot_rt)?;
        }
        if self.ccy2_spot_rt != 0. {
            os.write_double(24, self.ccy2_spot_rt)?;
        }
        if self.inr_eq_ccy1_spot_rt != 0. {
            os.write_double(25, self.inr_eq_ccy1_spot_rt)?;
        }
        if self.inr_eq_ccy2_spot_rt != 0. {
            os.write_double(26, self.inr_eq_ccy2_spot_rt)?;
        }
        if !self.branch_code.is_empty() {
            os.write_string(27, &self.branch_code)?;
        }
        if !self.trsy_gl.is_empty() {
            os.write_string(28, &self.trsy_gl)?;
        }
        if self.cf_dt != 0 {
            os.write_int64(29, self.cf_dt)?;
        }
        if !self.cf_ccy.is_empty() {
            os.write_string(30, &self.cf_ccy)?;
        }
        if self.cf_amt != 0. {
            os.write_double(31, self.cf_amt)?;
        }
        if !self.cf_typ.is_empty() {
            os.write_string(32, &self.cf_typ)?;
        }
        if self.prin_amt != 0. {
            os.write_double(33, self.prin_amt)?;
        }
        if self.int_amt != 0. {
            os.write_double(34, self.int_amt)?;
        }
        if !self.flow_typ.is_empty() {
            os.write_string(35, &self.flow_typ)?;
        }
        if self.abs_cf_amt != 0. {
            os.write_double(36, self.abs_cf_amt)?;
        }
        if !self.cbs_gl_cd.is_empty() {
            os.write_string(37, &self.cbs_gl_cd)?;
        }
        if !self.w4b_cd.is_empty() {
            os.write_string(38, &self.w4b_cd)?;
        }
        if !self.balm_llg.is_empty() {
            os.write_string(39, &self.balm_llg)?;
        }
        if !self.care_llg.is_empty() {
            os.write_string(40, &self.care_llg)?;
        }
        if !self.ba_llg.is_empty() {
            os.write_string(41, &self.ba_llg)?;
        }
        if self.tot_prin_amt != 0. {
            os.write_double(42, self.tot_prin_amt)?;
        }
        if self.tot_int_amt != 0. {
            os.write_double(43, self.tot_int_amt)?;
        }
        for v in &self.cashflows {
            os.write_tag(44, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "reval_dt",
                    |m: &AccountWithCashflows| { &m.reval_dt },
                    |m: &mut AccountWithCashflows| { &mut m.reval_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_type",
                    |m: &AccountWithCashflows| { &m.deal_type },
                    |m: &mut AccountWithCashflows| { &mut m.deal_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_ref",
                    |m: &AccountWithCashflows| { &m.deal_ref },
                    |m: &mut AccountWithCashflows| { &mut m.deal_ref },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "leg_id",
                    |m: &AccountWithCashflows| { &m.leg_id },
                    |m: &mut AccountWithCashflows| { &mut m.leg_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "portfolio",
                    |m: &AccountWithCashflows| { &m.portfolio },
                    |m: &mut AccountWithCashflows| { &mut m.portfolio },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "product",
                    |m: &AccountWithCashflows| { &m.product },
                    |m: &mut AccountWithCashflows| { &mut m.product },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counter_party",
                    |m: &AccountWithCashflows| { &m.counter_party },
                    |m: &mut AccountWithCashflows| { &mut m.counter_party },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "buy_sell",
                    |m: &AccountWithCashflows| { &m.buy_sell },
                    |m: &mut AccountWithCashflows| { &mut m.buy_sell },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "deal_dt",
                    |m: &AccountWithCashflows| { &m.deal_dt },
                    |m: &mut AccountWithCashflows| { &mut m.deal_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "val_dt",
                    |m: &AccountWithCashflows| { &m.val_dt },
                    |m: &mut AccountWithCashflows| { &mut m.val_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy_1",
                    |m: &AccountWithCashflows| { &m.ccy_1 },
                    |m: &mut AccountWithCashflows| { &mut m.ccy_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy_2",
                    |m: &AccountWithCashflows| { &m.ccy_2 },
                    |m: &mut AccountWithCashflows| { &mut m.ccy_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "deal_rt",
                    |m: &AccountWithCashflows| { &m.deal_rt },
                    |m: &mut AccountWithCashflows| { &mut m.deal_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ccy1_amt",
                    |m: &AccountWithCashflows| { &m.ccy1_amt },
                    |m: &mut AccountWithCashflows| { &mut m.ccy1_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "crnct2_amt",
                    |m: &AccountWithCashflows| { &m.crnct2_amt },
                    |m: &mut AccountWithCashflows| { &mut m.crnct2_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "reval_rt",
                    |m: &AccountWithCashflows| { &m.reval_rt },
                    |m: &mut AccountWithCashflows| { &mut m.reval_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "reval_eqv",
                    |m: &AccountWithCashflows| { &m.reval_eqv },
                    |m: &mut AccountWithCashflows| { &mut m.reval_eqv },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "actual_pl",
                    |m: &AccountWithCashflows| { &m.actual_pl },
                    |m: &mut AccountWithCashflows| { &mut m.actual_pl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "pnl_conversion_rt",
                    |m: &AccountWithCashflows| { &m.pnl_conversion_rt },
                    |m: &mut AccountWithCashflows| { &mut m.pnl_conversion_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rt",
                    |m: &AccountWithCashflows| { &m.int_rt },
                    |m: &mut AccountWithCashflows| { &mut m.int_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "discounted_factor",
                    |m: &AccountWithCashflows| { &m.discounted_factor },
                    |m: &mut AccountWithCashflows| { &mut m.discounted_factor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "present_val_pl",
                    |m: &AccountWithCashflows| { &m.present_val_pl },
                    |m: &mut AccountWithCashflows| { &mut m.present_val_pl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ccy1_spot_rt",
                    |m: &AccountWithCashflows| { &m.ccy1_spot_rt },
                    |m: &mut AccountWithCashflows| { &mut m.ccy1_spot_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ccy2_spot_rt",
                    |m: &AccountWithCashflows| { &m.ccy2_spot_rt },
                    |m: &mut AccountWithCashflows| { &mut m.ccy2_spot_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "inr_eq_ccy1_spot_rt",
                    |m: &AccountWithCashflows| { &m.inr_eq_ccy1_spot_rt },
                    |m: &mut AccountWithCashflows| { &mut m.inr_eq_ccy1_spot_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "inr_eq_ccy2_spot_rt",
                    |m: &AccountWithCashflows| { &m.inr_eq_ccy2_spot_rt },
                    |m: &mut AccountWithCashflows| { &mut m.inr_eq_ccy2_spot_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "branch_code",
                    |m: &AccountWithCashflows| { &m.branch_code },
                    |m: &mut AccountWithCashflows| { &mut m.branch_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "trsy_gl",
                    |m: &AccountWithCashflows| { &m.trsy_gl },
                    |m: &mut AccountWithCashflows| { &mut m.trsy_gl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cf_dt",
                    |m: &AccountWithCashflows| { &m.cf_dt },
                    |m: &mut AccountWithCashflows| { &mut m.cf_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cf_ccy",
                    |m: &AccountWithCashflows| { &m.cf_ccy },
                    |m: &mut AccountWithCashflows| { &mut m.cf_ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "cf_amt",
                    |m: &AccountWithCashflows| { &m.cf_amt },
                    |m: &mut AccountWithCashflows| { &mut m.cf_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cf_typ",
                    |m: &AccountWithCashflows| { &m.cf_typ },
                    |m: &mut AccountWithCashflows| { &mut m.cf_typ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &AccountWithCashflows| { &m.prin_amt },
                    |m: &mut AccountWithCashflows| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &AccountWithCashflows| { &m.int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "flow_typ",
                    |m: &AccountWithCashflows| { &m.flow_typ },
                    |m: &mut AccountWithCashflows| { &mut m.flow_typ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "abs_cf_amt",
                    |m: &AccountWithCashflows| { &m.abs_cf_amt },
                    |m: &mut AccountWithCashflows| { &mut m.abs_cf_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cbs_gl_cd",
                    |m: &AccountWithCashflows| { &m.cbs_gl_cd },
                    |m: &mut AccountWithCashflows| { &mut m.cbs_gl_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "w4b_cd",
                    |m: &AccountWithCashflows| { &m.w4b_cd },
                    |m: &mut AccountWithCashflows| { &mut m.w4b_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "balm_llg",
                    |m: &AccountWithCashflows| { &m.balm_llg },
                    |m: &mut AccountWithCashflows| { &mut m.balm_llg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "care_llg",
                    |m: &AccountWithCashflows| { &m.care_llg },
                    |m: &mut AccountWithCashflows| { &mut m.care_llg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ba_llg",
                    |m: &AccountWithCashflows| { &m.ba_llg },
                    |m: &mut AccountWithCashflows| { &mut m.ba_llg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_prin_amt",
                    |m: &AccountWithCashflows| { &m.tot_prin_amt },
                    |m: &mut AccountWithCashflows| { &mut m.tot_prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_int_amt",
                    |m: &AccountWithCashflows| { &m.tot_int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.tot_int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.reval_dt = 0;
        self.deal_type.clear();
        self.deal_ref.clear();
        self.leg_id.clear();
        self.portfolio.clear();
        self.product.clear();
        self.counter_party.clear();
        self.buy_sell.clear();
        self.deal_dt = 0;
        self.val_dt = 0;
        self.ccy_1.clear();
        self.ccy_2.clear();
        self.deal_rt = 0.;
        self.ccy1_amt = 0.;
        self.crnct2_amt = 0.;
        self.reval_rt = 0.;
        self.reval_eqv = 0.;
        self.actual_pl = 0.;
        self.pnl_conversion_rt = 0.;
        self.int_rt = 0.;
        self.discounted_factor = 0.;
        self.present_val_pl = 0.;
        self.ccy1_spot_rt = 0.;
        self.ccy2_spot_rt = 0.;
        self.inr_eq_ccy1_spot_rt = 0.;
        self.inr_eq_ccy2_spot_rt = 0.;
        self.branch_code.clear();
        self.trsy_gl.clear();
        self.cf_dt = 0;
        self.cf_ccy.clear();
        self.cf_amt = 0.;
        self.cf_typ.clear();
        self.prin_amt = 0.;
        self.int_amt = 0.;
        self.flow_typ.clear();
        self.abs_cf_amt = 0.;
        self.cbs_gl_cd.clear();
        self.w4b_cd.clear();
        self.balm_llg.clear();
        self.care_llg.clear();
        self.ba_llg.clear();
        self.tot_prin_amt = 0.;
        self.tot_int_amt = 0.;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11csb_fx_spot.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\
    \x20\x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07\
    prinAmt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\x9c\n\n\x14Acc\
    ountWithCashflows\x12\x19\n\x08reval_dt\x18\x01\x20\x01(\x03R\x07revalDt\
    \x12\x1b\n\tdeal_type\x18\x02\x20\x01(\tR\x08dealType\x12\x19\n\x08deal_\
    ref\x18\x03\x20\x01(\tR\x07dealRef\x12\x15\n\x06leg_id\x18\x04\x20\x01(\
    \tR\x05legId\x12\x1c\n\tportfolio\x18\x05\x20\x01(\tR\tportfolio\x12\x18\
    \n\x07product\x18\x06\x20\x01(\tR\x07product\x12#\n\rcounter_party\x18\
    \x07\x20\x01(\tR\x0ccounterParty\x12\x19\n\x08buy_sell\x18\x08\x20\x01(\
    \tR\x07buySell\x12\x17\n\x07deal_dt\x18\t\x20\x01(\x03R\x06dealDt\x12\
    \x15\n\x06val_dt\x18\n\x20\x01(\x03R\x05valDt\x12\x13\n\x05ccy_1\x18\x0b\
    \x20\x01(\tR\x04ccy1\x12\x13\n\x05ccy_2\x18\x0c\x20\x01(\tR\x04ccy2\x12\
    \x17\n\x07deal_rt\x18\r\x20\x01(\x01R\x06dealRt\x12\x19\n\x08ccy1_amt\
    \x18\x0e\x20\x01(\x01R\x07ccy1Amt\x12\x1d\n\ncrnct2_amt\x18\x0f\x20\x01(\
    \x01R\tcrnct2Amt\x12\x19\n\x08reval_rt\x18\x10\x20\x01(\x01R\x07revalRt\
    \x12\x1b\n\treval_eqv\x18\x11\x20\x01(\x01R\x08revalEqv\x12\x1b\n\tactua\
    l_pl\x18\x12\x20\x01(\x01R\x08actualPl\x12*\n\x11pnl_conversion_rt\x18\
    \x13\x20\x01(\x01R\x0fpnlConversionRt\x12\x15\n\x06int_rt\x18\x14\x20\
    \x01(\x01R\x05intRt\x12+\n\x11discounted_factor\x18\x15\x20\x01(\x01R\
    \x10discountedFactor\x12$\n\x0epresent_val_pl\x18\x16\x20\x01(\x01R\x0cp\
    resentValPl\x12\x20\n\x0cccy1_spot_rt\x18\x17\x20\x01(\x01R\nccy1SpotRt\
    \x12\x20\n\x0cccy2_spot_rt\x18\x18\x20\x01(\x01R\nccy2SpotRt\x12,\n\x13i\
    nr_eq_ccy1_spot_rt\x18\x19\x20\x01(\x01R\x0finrEqCcy1SpotRt\x12,\n\x13in\
    r_eq_ccy2_spot_rt\x18\x1a\x20\x01(\x01R\x0finrEqCcy2SpotRt\x12\x1f\n\x0b\
    branch_code\x18\x1b\x20\x01(\tR\nbranchCode\x12\x17\n\x07trsy_gl\x18\x1c\
    \x20\x01(\tR\x06trsyGl\x12\x13\n\x05cf_dt\x18\x1d\x20\x01(\x03R\x04cfDt\
    \x12\x15\n\x06cf_ccy\x18\x1e\x20\x01(\tR\x05cfCcy\x12\x15\n\x06cf_amt\
    \x18\x1f\x20\x01(\x01R\x05cfAmt\x12\x15\n\x06cf_typ\x18\x20\x20\x01(\tR\
    \x05cfTyp\x12\x19\n\x08prin_amt\x18!\x20\x01(\x01R\x07prinAmt\x12\x17\n\
    \x07int_amt\x18\"\x20\x01(\x01R\x06intAmt\x12\x19\n\x08flow_typ\x18#\x20\
    \x01(\tR\x07flowTyp\x12\x1c\n\nabs_cf_amt\x18$\x20\x01(\x01R\x08absCfAmt\
    \x12\x1a\n\tcbs_gl_cd\x18%\x20\x01(\tR\x07cbsGlCd\x12\x15\n\x06w4b_cd\
    \x18&\x20\x01(\tR\x05w4bCd\x12\x19\n\x08balm_llg\x18'\x20\x01(\tR\x07bal\
    mLlg\x12\x19\n\x08care_llg\x18(\x20\x01(\tR\x07careLlg\x12\x15\n\x06ba_l\
    lg\x18)\x20\x01(\tR\x05baLlg\x12\x20\n\x0ctot_prin_amt\x18*\x20\x01(\x01\
    R\ntotPrinAmt\x12\x1e\n\x0btot_int_amt\x18+\x20\x01(\x01R\ttotIntAmt\x12\
    '\n\tcashflows\x18,\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
