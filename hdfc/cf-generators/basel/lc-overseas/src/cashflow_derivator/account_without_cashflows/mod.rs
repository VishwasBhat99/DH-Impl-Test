// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct LCAccount {
    // message fields
    pub natural_acc: ::std::string::String,
    pub ref_no: ::std::string::String,
    pub acc_ccy: ::std::string::String,
    pub exp_dt: i64,
    pub amt: f64,
    pub interelemination_flg: ::std::string::String,
    pub tenor: i64,
    pub fin_field: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl LCAccount {
    pub fn new() -> LCAccount {
        ::std::default::Default::default()
    }

    // string natural_acc = 1;

    pub fn clear_natural_acc(&mut self) {
        self.natural_acc.clear();
    }

    // Param is passed by value, moved
    pub fn set_natural_acc(&mut self, v: ::std::string::String) {
        self.natural_acc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_natural_acc(&mut self) -> &mut ::std::string::String {
        &mut self.natural_acc
    }

    // Take field
    pub fn take_natural_acc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.natural_acc, ::std::string::String::new())
    }

    pub fn get_natural_acc(&self) -> &str {
        &self.natural_acc
    }

    // string ref_no = 2;

    pub fn clear_ref_no(&mut self) {
        self.ref_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_ref_no(&mut self, v: ::std::string::String) {
        self.ref_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ref_no(&mut self) -> &mut ::std::string::String {
        &mut self.ref_no
    }

    // Take field
    pub fn take_ref_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ref_no, ::std::string::String::new())
    }

    pub fn get_ref_no(&self) -> &str {
        &self.ref_no
    }

    // string acc_ccy = 3;

    pub fn clear_acc_ccy(&mut self) {
        self.acc_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_ccy(&mut self, v: ::std::string::String) {
        self.acc_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.acc_ccy
    }

    // Take field
    pub fn take_acc_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_ccy, ::std::string::String::new())
    }

    pub fn get_acc_ccy(&self) -> &str {
        &self.acc_ccy
    }

    // int64 exp_dt = 4;

    pub fn clear_exp_dt(&mut self) {
        self.exp_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_exp_dt(&mut self, v: i64) {
        self.exp_dt = v;
    }

    pub fn get_exp_dt(&self) -> i64 {
        self.exp_dt
    }

    // double amt = 5;

    pub fn clear_amt(&mut self) {
        self.amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amt(&mut self, v: f64) {
        self.amt = v;
    }

    pub fn get_amt(&self) -> f64 {
        self.amt
    }

    // string interelemination_flg = 6;

    pub fn clear_interelemination_flg(&mut self) {
        self.interelemination_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_interelemination_flg(&mut self, v: ::std::string::String) {
        self.interelemination_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interelemination_flg(&mut self) -> &mut ::std::string::String {
        &mut self.interelemination_flg
    }

    // Take field
    pub fn take_interelemination_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interelemination_flg, ::std::string::String::new())
    }

    pub fn get_interelemination_flg(&self) -> &str {
        &self.interelemination_flg
    }

    // int64 tenor = 7;

    pub fn clear_tenor(&mut self) {
        self.tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_tenor(&mut self, v: i64) {
        self.tenor = v;
    }

    pub fn get_tenor(&self) -> i64 {
        self.tenor
    }

    // string fin_field = 8;

    pub fn clear_fin_field(&mut self) {
        self.fin_field.clear();
    }

    // Param is passed by value, moved
    pub fn set_fin_field(&mut self, v: ::std::string::String) {
        self.fin_field = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fin_field(&mut self) -> &mut ::std::string::String {
        &mut self.fin_field
    }

    // Take field
    pub fn take_fin_field(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fin_field, ::std::string::String::new())
    }

    pub fn get_fin_field(&self) -> &str {
        &self.fin_field
    }
}

impl ::protobuf::Message for LCAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.natural_acc)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ref_no)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_ccy)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.exp_dt = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amt = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interelemination_flg)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tenor = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fin_field)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.natural_acc.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.natural_acc);
        }
        if !self.ref_no.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ref_no);
        }
        if !self.acc_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.acc_ccy);
        }
        if self.exp_dt != 0 {
            my_size += ::protobuf::rt::value_size(4, self.exp_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.amt != 0. {
            my_size += 9;
        }
        if !self.interelemination_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.interelemination_flg);
        }
        if self.tenor != 0 {
            my_size += ::protobuf::rt::value_size(7, self.tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.fin_field.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.fin_field);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.natural_acc.is_empty() {
            os.write_string(1, &self.natural_acc)?;
        }
        if !self.ref_no.is_empty() {
            os.write_string(2, &self.ref_no)?;
        }
        if !self.acc_ccy.is_empty() {
            os.write_string(3, &self.acc_ccy)?;
        }
        if self.exp_dt != 0 {
            os.write_int64(4, self.exp_dt)?;
        }
        if self.amt != 0. {
            os.write_double(5, self.amt)?;
        }
        if !self.interelemination_flg.is_empty() {
            os.write_string(6, &self.interelemination_flg)?;
        }
        if self.tenor != 0 {
            os.write_int64(7, self.tenor)?;
        }
        if !self.fin_field.is_empty() {
            os.write_string(8, &self.fin_field)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LCAccount {
        LCAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "natural_acc",
                    |m: &LCAccount| { &m.natural_acc },
                    |m: &mut LCAccount| { &mut m.natural_acc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ref_no",
                    |m: &LCAccount| { &m.ref_no },
                    |m: &mut LCAccount| { &mut m.ref_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acc_ccy",
                    |m: &LCAccount| { &m.acc_ccy },
                    |m: &mut LCAccount| { &mut m.acc_ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "exp_dt",
                    |m: &LCAccount| { &m.exp_dt },
                    |m: &mut LCAccount| { &mut m.exp_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "amt",
                    |m: &LCAccount| { &m.amt },
                    |m: &mut LCAccount| { &mut m.amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "interelemination_flg",
                    |m: &LCAccount| { &m.interelemination_flg },
                    |m: &mut LCAccount| { &mut m.interelemination_flg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tenor",
                    |m: &LCAccount| { &m.tenor },
                    |m: &mut LCAccount| { &mut m.tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "fin_field",
                    |m: &LCAccount| { &m.fin_field },
                    |m: &mut LCAccount| { &mut m.fin_field },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LCAccount>(
                    "LCAccount",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LCAccount {
        static mut instance: ::protobuf::lazy::Lazy<LCAccount> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LCAccount,
        };
        unsafe {
            instance.get(LCAccount::new)
        }
    }
}

impl ::protobuf::Clear for LCAccount {
    fn clear(&mut self) {
        self.clear_natural_acc();
        self.clear_ref_no();
        self.clear_acc_ccy();
        self.clear_exp_dt();
        self.clear_amt();
        self.clear_interelemination_flg();
        self.clear_tenor();
        self.clear_fin_field();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LCAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LCAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmessage.proto\"\xeb\x01\n\tLCAccount\x12\x1f\n\x0bnatural_acc\x18\
    \x01\x20\x01(\tR\nnaturalAcc\x12\x15\n\x06ref_no\x18\x02\x20\x01(\tR\x05\
    refNo\x12\x17\n\x07acc_ccy\x18\x03\x20\x01(\tR\x06accCcy\x12\x15\n\x06ex\
    p_dt\x18\x04\x20\x01(\x03R\x05expDt\x12\x10\n\x03amt\x18\x05\x20\x01(\
    \x01R\x03amt\x121\n\x14interelemination_flg\x18\x06\x20\x01(\tR\x13inter\
    eleminationFlg\x12\x14\n\x05tenor\x18\x07\x20\x01(\x03R\x05tenor\x12\x1b\
    \n\tfin_field\x18\x08\x20\x01(\tR\x08finFieldb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
