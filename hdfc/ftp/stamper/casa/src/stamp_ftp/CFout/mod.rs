// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq, Clone, Default)]
pub struct AccountWithCashflows {
    // message fields
    pub seg_1: ::std::string::String,
    pub account_no: ::std::string::String,
    pub seg_5: ::std::string::String,
    pub seg_6: ::std::string::String,
    pub seg_3: ::std::string::String,
    pub seg_8: ::std::string::String,
    pub seg_4: ::std::string::String,
    pub dr_bal: f64,
    pub cr_bal: f64,
    pub bal_total: f64,
    pub concat: ::std::string::String,
    pub alm_line: ::std::string::String,
    pub int_rate: f64,
    pub cf_type: ::std::string::String,
    pub gl_prefix: ::std::string::String,
    pub is_acct_gl: ::std::string::String,
    pub ia_line: ::std::string::String,
    pub Method: i32,
    pub BaseCurve: i32,
    pub ftp_runid: i64,
    pub from_date: i32,
    pub to_date: i32,
    pub total_balance: f64,
    pub total_interest_ftp: f64,
    pub total_ftp: f64,
    pub FTP_Rate: f64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string seg_1 = 1;

    pub fn clear_seg_1(&mut self) {
        self.seg_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_seg_1(&mut self, v: ::std::string::String) {
        self.seg_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seg_1(&mut self) -> &mut ::std::string::String {
        &mut self.seg_1
    }

    // Take field
    pub fn take_seg_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seg_1, ::std::string::String::new())
    }

    pub fn get_seg_1(&self) -> &str {
        &self.seg_1
    }

    // string account_no = 2;

    pub fn clear_account_no(&mut self) {
        self.account_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_no(&mut self, v: ::std::string::String) {
        self.account_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_no(&mut self) -> &mut ::std::string::String {
        &mut self.account_no
    }

    // Take field
    pub fn take_account_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_no, ::std::string::String::new())
    }

    pub fn get_account_no(&self) -> &str {
        &self.account_no
    }

    // string seg_5 = 3;

    pub fn clear_seg_5(&mut self) {
        self.seg_5.clear();
    }

    // Param is passed by value, moved
    pub fn set_seg_5(&mut self, v: ::std::string::String) {
        self.seg_5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seg_5(&mut self) -> &mut ::std::string::String {
        &mut self.seg_5
    }

    // Take field
    pub fn take_seg_5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seg_5, ::std::string::String::new())
    }

    pub fn get_seg_5(&self) -> &str {
        &self.seg_5
    }

    // string seg_6 = 4;

    pub fn clear_seg_6(&mut self) {
        self.seg_6.clear();
    }

    // Param is passed by value, moved
    pub fn set_seg_6(&mut self, v: ::std::string::String) {
        self.seg_6 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seg_6(&mut self) -> &mut ::std::string::String {
        &mut self.seg_6
    }

    // Take field
    pub fn take_seg_6(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seg_6, ::std::string::String::new())
    }

    pub fn get_seg_6(&self) -> &str {
        &self.seg_6
    }

    // string seg_3 = 5;

    pub fn clear_seg_3(&mut self) {
        self.seg_3.clear();
    }

    // Param is passed by value, moved
    pub fn set_seg_3(&mut self, v: ::std::string::String) {
        self.seg_3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seg_3(&mut self) -> &mut ::std::string::String {
        &mut self.seg_3
    }

    // Take field
    pub fn take_seg_3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seg_3, ::std::string::String::new())
    }

    pub fn get_seg_3(&self) -> &str {
        &self.seg_3
    }

    // string seg_8 = 6;

    pub fn clear_seg_8(&mut self) {
        self.seg_8.clear();
    }

    // Param is passed by value, moved
    pub fn set_seg_8(&mut self, v: ::std::string::String) {
        self.seg_8 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seg_8(&mut self) -> &mut ::std::string::String {
        &mut self.seg_8
    }

    // Take field
    pub fn take_seg_8(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seg_8, ::std::string::String::new())
    }

    pub fn get_seg_8(&self) -> &str {
        &self.seg_8
    }

    // string seg_4 = 7;

    pub fn clear_seg_4(&mut self) {
        self.seg_4.clear();
    }

    // Param is passed by value, moved
    pub fn set_seg_4(&mut self, v: ::std::string::String) {
        self.seg_4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seg_4(&mut self) -> &mut ::std::string::String {
        &mut self.seg_4
    }

    // Take field
    pub fn take_seg_4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seg_4, ::std::string::String::new())
    }

    pub fn get_seg_4(&self) -> &str {
        &self.seg_4
    }

    // double dr_bal = 8;

    pub fn clear_dr_bal(&mut self) {
        self.dr_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dr_bal(&mut self, v: f64) {
        self.dr_bal = v;
    }

    pub fn get_dr_bal(&self) -> f64 {
        self.dr_bal
    }

    // double cr_bal = 9;

    pub fn clear_cr_bal(&mut self) {
        self.cr_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cr_bal(&mut self, v: f64) {
        self.cr_bal = v;
    }

    pub fn get_cr_bal(&self) -> f64 {
        self.cr_bal
    }

    // double bal_total = 10;

    pub fn clear_bal_total(&mut self) {
        self.bal_total = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bal_total(&mut self, v: f64) {
        self.bal_total = v;
    }

    pub fn get_bal_total(&self) -> f64 {
        self.bal_total
    }

    // string concat = 11;

    pub fn clear_concat(&mut self) {
        self.concat.clear();
    }

    // Param is passed by value, moved
    pub fn set_concat(&mut self, v: ::std::string::String) {
        self.concat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_concat(&mut self) -> &mut ::std::string::String {
        &mut self.concat
    }

    // Take field
    pub fn take_concat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.concat, ::std::string::String::new())
    }

    pub fn get_concat(&self) -> &str {
        &self.concat
    }

    // string alm_line = 12;

    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }

    // double int_rate = 13;

    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }

    // string cf_type = 14;

    pub fn clear_cf_type(&mut self) {
        self.cf_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_cf_type(&mut self, v: ::std::string::String) {
        self.cf_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf_type(&mut self) -> &mut ::std::string::String {
        &mut self.cf_type
    }

    // Take field
    pub fn take_cf_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cf_type, ::std::string::String::new())
    }

    pub fn get_cf_type(&self) -> &str {
        &self.cf_type
    }

    // string gl_prefix = 15;

    pub fn clear_gl_prefix(&mut self) {
        self.gl_prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_prefix(&mut self, v: ::std::string::String) {
        self.gl_prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.gl_prefix
    }

    // Take field
    pub fn take_gl_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_prefix, ::std::string::String::new())
    }

    pub fn get_gl_prefix(&self) -> &str {
        &self.gl_prefix
    }

    // string is_acct_gl = 16;

    pub fn clear_is_acct_gl(&mut self) {
        self.is_acct_gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_acct_gl(&mut self, v: ::std::string::String) {
        self.is_acct_gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_acct_gl(&mut self) -> &mut ::std::string::String {
        &mut self.is_acct_gl
    }

    // Take field
    pub fn take_is_acct_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_acct_gl, ::std::string::String::new())
    }

    pub fn get_is_acct_gl(&self) -> &str {
        &self.is_acct_gl
    }

    // string ia_line = 17;

    pub fn clear_ia_line(&mut self) {
        self.ia_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_ia_line(&mut self, v: ::std::string::String) {
        self.ia_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ia_line(&mut self) -> &mut ::std::string::String {
        &mut self.ia_line
    }

    // Take field
    pub fn take_ia_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ia_line, ::std::string::String::new())
    }

    pub fn get_ia_line(&self) -> &str {
        &self.ia_line
    }

    // int32 Method = 18;

    pub fn clear_Method(&mut self) {
        self.Method = 0;
    }

    // Param is passed by value, moved
    pub fn set_Method(&mut self, v: i32) {
        self.Method = v;
    }

    pub fn get_Method(&self) -> i32 {
        self.Method
    }

    // int32 BaseCurve = 19;

    pub fn clear_BaseCurve(&mut self) {
        self.BaseCurve = 0;
    }

    // Param is passed by value, moved
    pub fn set_BaseCurve(&mut self, v: i32) {
        self.BaseCurve = v;
    }

    pub fn get_BaseCurve(&self) -> i32 {
        self.BaseCurve
    }

    // int64 ftp_runid = 20;

    pub fn clear_ftp_runid(&mut self) {
        self.ftp_runid = 0;
    }

    // Param is passed by value, moved
    pub fn set_ftp_runid(&mut self, v: i64) {
        self.ftp_runid = v;
    }

    pub fn get_ftp_runid(&self) -> i64 {
        self.ftp_runid
    }

    // int32 from_date = 21;

    pub fn clear_from_date(&mut self) {
        self.from_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_from_date(&mut self, v: i32) {
        self.from_date = v;
    }

    pub fn get_from_date(&self) -> i32 {
        self.from_date
    }

    // int32 to_date = 22;

    pub fn clear_to_date(&mut self) {
        self.to_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_to_date(&mut self, v: i32) {
        self.to_date = v;
    }

    pub fn get_to_date(&self) -> i32 {
        self.to_date
    }

    // double total_balance = 23;

    pub fn clear_total_balance(&mut self) {
        self.total_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_balance(&mut self, v: f64) {
        self.total_balance = v;
    }

    pub fn get_total_balance(&self) -> f64 {
        self.total_balance
    }

    // double total_interest_ftp = 24;

    pub fn clear_total_interest_ftp(&mut self) {
        self.total_interest_ftp = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_ftp(&mut self, v: f64) {
        self.total_interest_ftp = v;
    }

    pub fn get_total_interest_ftp(&self) -> f64 {
        self.total_interest_ftp
    }

    // double total_ftp = 25;

    pub fn clear_total_ftp(&mut self) {
        self.total_ftp = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_ftp(&mut self, v: f64) {
        self.total_ftp = v;
    }

    pub fn get_total_ftp(&self) -> f64 {
        self.total_ftp
    }

    // double FTP_Rate = 26;

    pub fn clear_FTP_Rate(&mut self) {
        self.FTP_Rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_FTP_Rate(&mut self, v: f64) {
        self.FTP_Rate = v;
    }

    pub fn get_FTP_Rate(&self) -> f64 {
        self.FTP_Rate
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.seg_1,
                    )?;
                }
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.account_no,
                    )?;
                }
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.seg_5,
                    )?;
                }
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.seg_6,
                    )?;
                }
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.seg_3,
                    )?;
                }
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.seg_8,
                    )?;
                }
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.seg_4,
                    )?;
                }
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.dr_bal = tmp;
                }
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.cr_bal = tmp;
                }
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.bal_total = tmp;
                }
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.concat,
                    )?;
                }
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.alm_line,
                    )?;
                }
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                }
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.cf_type,
                    )?;
                }
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.gl_prefix,
                    )?;
                }
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.is_acct_gl,
                    )?;
                }
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.ia_line,
                    )?;
                }
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.Method = tmp;
                }
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.BaseCurve = tmp;
                }
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.ftp_runid = tmp;
                }
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.from_date = tmp;
                }
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.to_date = tmp;
                }
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.total_balance = tmp;
                }
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_ftp = tmp;
                }
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.total_ftp = tmp;
                }
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.FTP_Rate = tmp;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seg_1.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.seg_1);
        }
        if !self.account_no.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.account_no);
        }
        if !self.seg_5.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.seg_5);
        }
        if !self.seg_6.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.seg_6);
        }
        if !self.seg_3.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.seg_3);
        }
        if !self.seg_8.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.seg_8);
        }
        if !self.seg_4.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.seg_4);
        }
        if self.dr_bal != 0. {
            my_size += 9;
        }
        if self.cr_bal != 0. {
            my_size += 9;
        }
        if self.bal_total != 0. {
            my_size += 9;
        }
        if !self.concat.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.concat);
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.alm_line);
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if !self.cf_type.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.cf_type);
        }
        if !self.gl_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.gl_prefix);
        }
        if !self.is_acct_gl.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.is_acct_gl);
        }
        if !self.ia_line.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.ia_line);
        }
        if self.Method != 0 {
            my_size += ::protobuf::rt::value_size(
                18,
                self.Method,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.BaseCurve != 0 {
            my_size += ::protobuf::rt::value_size(
                19,
                self.BaseCurve,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.ftp_runid != 0 {
            my_size += ::protobuf::rt::value_size(
                20,
                self.ftp_runid,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.from_date != 0 {
            my_size += ::protobuf::rt::value_size(
                21,
                self.from_date,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.to_date != 0 {
            my_size += ::protobuf::rt::value_size(
                22,
                self.to_date,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.total_balance != 0. {
            my_size += 10;
        }
        if self.total_interest_ftp != 0. {
            my_size += 10;
        }
        if self.total_ftp != 0. {
            my_size += 10;
        }
        if self.FTP_Rate != 0. {
            my_size += 10;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.seg_1.is_empty() {
            os.write_string(1, &self.seg_1)?;
        }
        if !self.account_no.is_empty() {
            os.write_string(2, &self.account_no)?;
        }
        if !self.seg_5.is_empty() {
            os.write_string(3, &self.seg_5)?;
        }
        if !self.seg_6.is_empty() {
            os.write_string(4, &self.seg_6)?;
        }
        if !self.seg_3.is_empty() {
            os.write_string(5, &self.seg_3)?;
        }
        if !self.seg_8.is_empty() {
            os.write_string(6, &self.seg_8)?;
        }
        if !self.seg_4.is_empty() {
            os.write_string(7, &self.seg_4)?;
        }
        if self.dr_bal != 0. {
            os.write_double(8, self.dr_bal)?;
        }
        if self.cr_bal != 0. {
            os.write_double(9, self.cr_bal)?;
        }
        if self.bal_total != 0. {
            os.write_double(10, self.bal_total)?;
        }
        if !self.concat.is_empty() {
            os.write_string(11, &self.concat)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(12, &self.alm_line)?;
        }
        if self.int_rate != 0. {
            os.write_double(13, self.int_rate)?;
        }
        if !self.cf_type.is_empty() {
            os.write_string(14, &self.cf_type)?;
        }
        if !self.gl_prefix.is_empty() {
            os.write_string(15, &self.gl_prefix)?;
        }
        if !self.is_acct_gl.is_empty() {
            os.write_string(16, &self.is_acct_gl)?;
        }
        if !self.ia_line.is_empty() {
            os.write_string(17, &self.ia_line)?;
        }
        if self.Method != 0 {
            os.write_int32(18, self.Method)?;
        }
        if self.BaseCurve != 0 {
            os.write_int32(19, self.BaseCurve)?;
        }
        if self.ftp_runid != 0 {
            os.write_int64(20, self.ftp_runid)?;
        }
        if self.from_date != 0 {
            os.write_int32(21, self.from_date)?;
        }
        if self.to_date != 0 {
            os.write_int32(22, self.to_date)?;
        }
        if self.total_balance != 0. {
            os.write_double(23, self.total_balance)?;
        }
        if self.total_interest_ftp != 0. {
            os.write_double(24, self.total_interest_ftp)?;
        }
        if self.total_ftp != 0. {
            os.write_double(25, self.total_ftp)?;
        }
        if self.FTP_Rate != 0. {
            os.write_double(26, self.FTP_Rate)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "seg_1",
                    |m: &AccountWithCashflows| &m.seg_1,
                    |m: &mut AccountWithCashflows| &mut m.seg_1,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "account_no",
                    |m: &AccountWithCashflows| &m.account_no,
                    |m: &mut AccountWithCashflows| &mut m.account_no,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "seg_5",
                    |m: &AccountWithCashflows| &m.seg_5,
                    |m: &mut AccountWithCashflows| &mut m.seg_5,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "seg_6",
                    |m: &AccountWithCashflows| &m.seg_6,
                    |m: &mut AccountWithCashflows| &mut m.seg_6,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "seg_3",
                    |m: &AccountWithCashflows| &m.seg_3,
                    |m: &mut AccountWithCashflows| &mut m.seg_3,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "seg_8",
                    |m: &AccountWithCashflows| &m.seg_8,
                    |m: &mut AccountWithCashflows| &mut m.seg_8,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "seg_4",
                    |m: &AccountWithCashflows| &m.seg_4,
                    |m: &mut AccountWithCashflows| &mut m.seg_4,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "dr_bal",
                    |m: &AccountWithCashflows| &m.dr_bal,
                    |m: &mut AccountWithCashflows| &mut m.dr_bal,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "cr_bal",
                    |m: &AccountWithCashflows| &m.cr_bal,
                    |m: &mut AccountWithCashflows| &mut m.cr_bal,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "bal_total",
                    |m: &AccountWithCashflows| &m.bal_total,
                    |m: &mut AccountWithCashflows| &mut m.bal_total,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "concat",
                    |m: &AccountWithCashflows| &m.concat,
                    |m: &mut AccountWithCashflows| &mut m.concat,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "alm_line",
                    |m: &AccountWithCashflows| &m.alm_line,
                    |m: &mut AccountWithCashflows| &mut m.alm_line,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "int_rate",
                    |m: &AccountWithCashflows| &m.int_rate,
                    |m: &mut AccountWithCashflows| &mut m.int_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "cf_type",
                    |m: &AccountWithCashflows| &m.cf_type,
                    |m: &mut AccountWithCashflows| &mut m.cf_type,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "gl_prefix",
                    |m: &AccountWithCashflows| &m.gl_prefix,
                    |m: &mut AccountWithCashflows| &mut m.gl_prefix,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "is_acct_gl",
                    |m: &AccountWithCashflows| &m.is_acct_gl,
                    |m: &mut AccountWithCashflows| &mut m.is_acct_gl,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "ia_line",
                    |m: &AccountWithCashflows| &m.ia_line,
                    |m: &mut AccountWithCashflows| &mut m.ia_line,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "Method",
                    |m: &AccountWithCashflows| &m.Method,
                    |m: &mut AccountWithCashflows| &mut m.Method,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "BaseCurve",
                    |m: &AccountWithCashflows| &m.BaseCurve,
                    |m: &mut AccountWithCashflows| &mut m.BaseCurve,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "ftp_runid",
                    |m: &AccountWithCashflows| &m.ftp_runid,
                    |m: &mut AccountWithCashflows| &mut m.ftp_runid,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "from_date",
                    |m: &AccountWithCashflows| &m.from_date,
                    |m: &mut AccountWithCashflows| &mut m.from_date,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "to_date",
                    |m: &AccountWithCashflows| &m.to_date,
                    |m: &mut AccountWithCashflows| &mut m.to_date,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "total_balance",
                    |m: &AccountWithCashflows| &m.total_balance,
                    |m: &mut AccountWithCashflows| &mut m.total_balance,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "total_interest_ftp",
                    |m: &AccountWithCashflows| &m.total_interest_ftp,
                    |m: &mut AccountWithCashflows| &mut m.total_interest_ftp,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "total_ftp",
                    |m: &AccountWithCashflows| &m.total_ftp,
                    |m: &mut AccountWithCashflows| &mut m.total_ftp,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "FTP_Rate",
                    |m: &AccountWithCashflows| &m.FTP_Rate,
                    |m: &mut AccountWithCashflows| &mut m.FTP_Rate,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const AccountWithCashflows,
            };
        unsafe { instance.get(AccountWithCashflows::new) }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_seg_1();
        self.clear_account_no();
        self.clear_seg_5();
        self.clear_seg_6();
        self.clear_seg_3();
        self.clear_seg_8();
        self.clear_seg_4();
        self.clear_dr_bal();
        self.clear_cr_bal();
        self.clear_bal_total();
        self.clear_concat();
        self.clear_alm_line();
        self.clear_int_rate();
        self.clear_cf_type();
        self.clear_gl_prefix();
        self.clear_is_acct_gl();
        self.clear_ia_line();
        self.clear_Method();
        self.clear_BaseCurve();
        self.clear_ftp_runid();
        self.clear_from_date();
        self.clear_to_date();
        self.clear_total_balance();
        self.clear_total_interest_ftp();
        self.clear_total_ftp();
        self.clear_FTP_Rate();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aAccountWithCashflows.proto\"\xcd\x05\n\x14AccountWithCashflows\x12\
    \x13\n\x05seg_1\x18\x01\x20\x01(\tR\x04seg1\x12\x1d\n\naccount_no\x18\
    \x02\x20\x01(\tR\taccountNo\x12\x13\n\x05seg_5\x18\x03\x20\x01(\tR\x04se\
    g5\x12\x13\n\x05seg_6\x18\x04\x20\x01(\tR\x04seg6\x12\x13\n\x05seg_3\x18\
    \x05\x20\x01(\tR\x04seg3\x12\x13\n\x05seg_8\x18\x06\x20\x01(\tR\x04seg8\
    \x12\x13\n\x05seg_4\x18\x07\x20\x01(\tR\x04seg4\x12\x15\n\x06dr_bal\x18\
    \x08\x20\x01(\x01R\x05drBal\x12\x15\n\x06cr_bal\x18\t\x20\x01(\x01R\x05c\
    rBal\x12\x1b\n\tbal_total\x18\n\x20\x01(\x01R\x08balTotal\x12\x16\n\x06c\
    oncat\x18\x0b\x20\x01(\tR\x06concat\x12\x19\n\x08alm_line\x18\x0c\x20\
    \x01(\tR\x07almLine\x12\x19\n\x08int_rate\x18\r\x20\x01(\x01R\x07intRate\
    \x12\x17\n\x07cf_type\x18\x0e\x20\x01(\tR\x06cfType\x12\x1b\n\tgl_prefix\
    \x18\x0f\x20\x01(\tR\x08glPrefix\x12\x1c\n\nis_acct_gl\x18\x10\x20\x01(\
    \tR\x08isAcctGl\x12\x17\n\x07ia_line\x18\x11\x20\x01(\tR\x06iaLine\x12\
    \x16\n\x06Method\x18\x12\x20\x01(\x05R\x06Method\x12\x1c\n\tBaseCurve\
    \x18\x13\x20\x01(\x05R\tBaseCurve\x12\x1b\n\tftp_runid\x18\x14\x20\x01(\
    \x03R\x08ftpRunid\x12\x1b\n\tfrom_date\x18\x15\x20\x01(\x05R\x08fromDate\
    \x12\x17\n\x07to_date\x18\x16\x20\x01(\x05R\x06toDate\x12#\n\rtotal_bala\
    nce\x18\x17\x20\x01(\x01R\x0ctotalBalance\x12,\n\x12total_interest_ftp\
    \x18\x18\x20\x01(\x01R\x10totalInterestFtp\x12\x1b\n\ttotal_ftp\x18\x19\
    \x20\x01(\x01R\x08totalFtp\x12\x19\n\x08FTP_Rate\x18\x1a\x20\x01(\x01R\
    \x07FTPRateb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<
    ::protobuf::descriptor::FileDescriptorProto,
> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe { file_descriptor_proto_lazy.get(|| parse_descriptor_proto()) }
}
