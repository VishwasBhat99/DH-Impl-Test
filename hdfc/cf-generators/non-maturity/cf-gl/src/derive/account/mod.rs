// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `non-maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Account {
    // message fields
    pub seg_1: ::std::string::String,
    pub account_no: ::std::string::String,
    pub seg_5: ::std::string::String,
    pub seg_6: ::std::string::String,
    pub seg_3: ::std::string::String,
    pub seg_8: ::std::string::String,
    pub seg_4: ::std::string::String,
    pub dr_bal: f64,
    pub cr_bal: f64,
    pub bal_total: f64,
    pub concat: ::std::string::String,
    pub alm_line: ::std::string::String,
    pub int_rate: f64,
    pub cf_type: ::std::string::String,
    pub gl_prefix: ::std::string::String,
    pub is_acct_gl: ::std::string::String,
    pub ia_line: ::std::string::String,
    pub nsfr: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Account {
    fn default() -> &'a Account {
        <Account as ::protobuf::Message>::default_instance()
    }
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    // string seg_1 = 1;


    pub fn get_seg_1(&self) -> &str {
        &self.seg_1
    }
    pub fn clear_seg_1(&mut self) {
        self.seg_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_seg_1(&mut self, v: ::std::string::String) {
        self.seg_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seg_1(&mut self) -> &mut ::std::string::String {
        &mut self.seg_1
    }

    // Take field
    pub fn take_seg_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seg_1, ::std::string::String::new())
    }

    // string account_no = 2;


    pub fn get_account_no(&self) -> &str {
        &self.account_no
    }
    pub fn clear_account_no(&mut self) {
        self.account_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_no(&mut self, v: ::std::string::String) {
        self.account_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_no(&mut self) -> &mut ::std::string::String {
        &mut self.account_no
    }

    // Take field
    pub fn take_account_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_no, ::std::string::String::new())
    }

    // string seg_5 = 3;


    pub fn get_seg_5(&self) -> &str {
        &self.seg_5
    }
    pub fn clear_seg_5(&mut self) {
        self.seg_5.clear();
    }

    // Param is passed by value, moved
    pub fn set_seg_5(&mut self, v: ::std::string::String) {
        self.seg_5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seg_5(&mut self) -> &mut ::std::string::String {
        &mut self.seg_5
    }

    // Take field
    pub fn take_seg_5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seg_5, ::std::string::String::new())
    }

    // string seg_6 = 4;


    pub fn get_seg_6(&self) -> &str {
        &self.seg_6
    }
    pub fn clear_seg_6(&mut self) {
        self.seg_6.clear();
    }

    // Param is passed by value, moved
    pub fn set_seg_6(&mut self, v: ::std::string::String) {
        self.seg_6 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seg_6(&mut self) -> &mut ::std::string::String {
        &mut self.seg_6
    }

    // Take field
    pub fn take_seg_6(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seg_6, ::std::string::String::new())
    }

    // string seg_3 = 5;


    pub fn get_seg_3(&self) -> &str {
        &self.seg_3
    }
    pub fn clear_seg_3(&mut self) {
        self.seg_3.clear();
    }

    // Param is passed by value, moved
    pub fn set_seg_3(&mut self, v: ::std::string::String) {
        self.seg_3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seg_3(&mut self) -> &mut ::std::string::String {
        &mut self.seg_3
    }

    // Take field
    pub fn take_seg_3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seg_3, ::std::string::String::new())
    }

    // string seg_8 = 6;


    pub fn get_seg_8(&self) -> &str {
        &self.seg_8
    }
    pub fn clear_seg_8(&mut self) {
        self.seg_8.clear();
    }

    // Param is passed by value, moved
    pub fn set_seg_8(&mut self, v: ::std::string::String) {
        self.seg_8 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seg_8(&mut self) -> &mut ::std::string::String {
        &mut self.seg_8
    }

    // Take field
    pub fn take_seg_8(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seg_8, ::std::string::String::new())
    }

    // string seg_4 = 7;


    pub fn get_seg_4(&self) -> &str {
        &self.seg_4
    }
    pub fn clear_seg_4(&mut self) {
        self.seg_4.clear();
    }

    // Param is passed by value, moved
    pub fn set_seg_4(&mut self, v: ::std::string::String) {
        self.seg_4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seg_4(&mut self) -> &mut ::std::string::String {
        &mut self.seg_4
    }

    // Take field
    pub fn take_seg_4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seg_4, ::std::string::String::new())
    }

    // double dr_bal = 8;


    pub fn get_dr_bal(&self) -> f64 {
        self.dr_bal
    }
    pub fn clear_dr_bal(&mut self) {
        self.dr_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dr_bal(&mut self, v: f64) {
        self.dr_bal = v;
    }

    // double cr_bal = 9;


    pub fn get_cr_bal(&self) -> f64 {
        self.cr_bal
    }
    pub fn clear_cr_bal(&mut self) {
        self.cr_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cr_bal(&mut self, v: f64) {
        self.cr_bal = v;
    }

    // double bal_total = 10;


    pub fn get_bal_total(&self) -> f64 {
        self.bal_total
    }
    pub fn clear_bal_total(&mut self) {
        self.bal_total = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bal_total(&mut self, v: f64) {
        self.bal_total = v;
    }

    // string concat = 11;


    pub fn get_concat(&self) -> &str {
        &self.concat
    }
    pub fn clear_concat(&mut self) {
        self.concat.clear();
    }

    // Param is passed by value, moved
    pub fn set_concat(&mut self, v: ::std::string::String) {
        self.concat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_concat(&mut self) -> &mut ::std::string::String {
        &mut self.concat
    }

    // Take field
    pub fn take_concat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.concat, ::std::string::String::new())
    }

    // string alm_line = 12;


    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }
    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    // double int_rate = 13;


    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }
    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    // string cf_type = 14;


    pub fn get_cf_type(&self) -> &str {
        &self.cf_type
    }
    pub fn clear_cf_type(&mut self) {
        self.cf_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_cf_type(&mut self, v: ::std::string::String) {
        self.cf_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf_type(&mut self) -> &mut ::std::string::String {
        &mut self.cf_type
    }

    // Take field
    pub fn take_cf_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cf_type, ::std::string::String::new())
    }

    // string gl_prefix = 15;


    pub fn get_gl_prefix(&self) -> &str {
        &self.gl_prefix
    }
    pub fn clear_gl_prefix(&mut self) {
        self.gl_prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_prefix(&mut self, v: ::std::string::String) {
        self.gl_prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.gl_prefix
    }

    // Take field
    pub fn take_gl_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_prefix, ::std::string::String::new())
    }

    // string is_acct_gl = 16;


    pub fn get_is_acct_gl(&self) -> &str {
        &self.is_acct_gl
    }
    pub fn clear_is_acct_gl(&mut self) {
        self.is_acct_gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_acct_gl(&mut self, v: ::std::string::String) {
        self.is_acct_gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_acct_gl(&mut self) -> &mut ::std::string::String {
        &mut self.is_acct_gl
    }

    // Take field
    pub fn take_is_acct_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_acct_gl, ::std::string::String::new())
    }

    // string ia_line = 17;


    pub fn get_ia_line(&self) -> &str {
        &self.ia_line
    }
    pub fn clear_ia_line(&mut self) {
        self.ia_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_ia_line(&mut self, v: ::std::string::String) {
        self.ia_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ia_line(&mut self) -> &mut ::std::string::String {
        &mut self.ia_line
    }

    // Take field
    pub fn take_ia_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ia_line, ::std::string::String::new())
    }

    // string nsfr = 18;


    pub fn get_nsfr(&self) -> &str {
        &self.nsfr
    }
    pub fn clear_nsfr(&mut self) {
        self.nsfr.clear();
    }

    // Param is passed by value, moved
    pub fn set_nsfr(&mut self, v: ::std::string::String) {
        self.nsfr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nsfr(&mut self) -> &mut ::std::string::String {
        &mut self.nsfr
    }

    // Take field
    pub fn take_nsfr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nsfr, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Account {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seg_1)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_no)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seg_5)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seg_6)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seg_3)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seg_8)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seg_4)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.dr_bal = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.cr_bal = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bal_total = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.concat)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alm_line)?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cf_type)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_prefix)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_acct_gl)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ia_line)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nsfr)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seg_1.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.seg_1);
        }
        if !self.account_no.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.account_no);
        }
        if !self.seg_5.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.seg_5);
        }
        if !self.seg_6.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.seg_6);
        }
        if !self.seg_3.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.seg_3);
        }
        if !self.seg_8.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.seg_8);
        }
        if !self.seg_4.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.seg_4);
        }
        if self.dr_bal != 0. {
            my_size += 9;
        }
        if self.cr_bal != 0. {
            my_size += 9;
        }
        if self.bal_total != 0. {
            my_size += 9;
        }
        if !self.concat.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.concat);
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.alm_line);
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if !self.cf_type.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.cf_type);
        }
        if !self.gl_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.gl_prefix);
        }
        if !self.is_acct_gl.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.is_acct_gl);
        }
        if !self.ia_line.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.ia_line);
        }
        if !self.nsfr.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.nsfr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.seg_1.is_empty() {
            os.write_string(1, &self.seg_1)?;
        }
        if !self.account_no.is_empty() {
            os.write_string(2, &self.account_no)?;
        }
        if !self.seg_5.is_empty() {
            os.write_string(3, &self.seg_5)?;
        }
        if !self.seg_6.is_empty() {
            os.write_string(4, &self.seg_6)?;
        }
        if !self.seg_3.is_empty() {
            os.write_string(5, &self.seg_3)?;
        }
        if !self.seg_8.is_empty() {
            os.write_string(6, &self.seg_8)?;
        }
        if !self.seg_4.is_empty() {
            os.write_string(7, &self.seg_4)?;
        }
        if self.dr_bal != 0. {
            os.write_double(8, self.dr_bal)?;
        }
        if self.cr_bal != 0. {
            os.write_double(9, self.cr_bal)?;
        }
        if self.bal_total != 0. {
            os.write_double(10, self.bal_total)?;
        }
        if !self.concat.is_empty() {
            os.write_string(11, &self.concat)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(12, &self.alm_line)?;
        }
        if self.int_rate != 0. {
            os.write_double(13, self.int_rate)?;
        }
        if !self.cf_type.is_empty() {
            os.write_string(14, &self.cf_type)?;
        }
        if !self.gl_prefix.is_empty() {
            os.write_string(15, &self.gl_prefix)?;
        }
        if !self.is_acct_gl.is_empty() {
            os.write_string(16, &self.is_acct_gl)?;
        }
        if !self.ia_line.is_empty() {
            os.write_string(17, &self.ia_line)?;
        }
        if !self.nsfr.is_empty() {
            os.write_string(18, &self.nsfr)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Account {
        Account::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seg_1",
                |m: &Account| { &m.seg_1 },
                |m: &mut Account| { &mut m.seg_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_no",
                |m: &Account| { &m.account_no },
                |m: &mut Account| { &mut m.account_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seg_5",
                |m: &Account| { &m.seg_5 },
                |m: &mut Account| { &mut m.seg_5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seg_6",
                |m: &Account| { &m.seg_6 },
                |m: &mut Account| { &mut m.seg_6 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seg_3",
                |m: &Account| { &m.seg_3 },
                |m: &mut Account| { &mut m.seg_3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seg_8",
                |m: &Account| { &m.seg_8 },
                |m: &mut Account| { &mut m.seg_8 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seg_4",
                |m: &Account| { &m.seg_4 },
                |m: &mut Account| { &mut m.seg_4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "dr_bal",
                |m: &Account| { &m.dr_bal },
                |m: &mut Account| { &mut m.dr_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "cr_bal",
                |m: &Account| { &m.cr_bal },
                |m: &mut Account| { &mut m.cr_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bal_total",
                |m: &Account| { &m.bal_total },
                |m: &mut Account| { &mut m.bal_total },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "concat",
                |m: &Account| { &m.concat },
                |m: &mut Account| { &mut m.concat },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "alm_line",
                |m: &Account| { &m.alm_line },
                |m: &mut Account| { &mut m.alm_line },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_rate",
                |m: &Account| { &m.int_rate },
                |m: &mut Account| { &mut m.int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cf_type",
                |m: &Account| { &m.cf_type },
                |m: &mut Account| { &mut m.cf_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_prefix",
                |m: &Account| { &m.gl_prefix },
                |m: &mut Account| { &mut m.gl_prefix },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "is_acct_gl",
                |m: &Account| { &m.is_acct_gl },
                |m: &mut Account| { &mut m.is_acct_gl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ia_line",
                |m: &Account| { &m.ia_line },
                |m: &mut Account| { &mut m.ia_line },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nsfr",
                |m: &Account| { &m.nsfr },
                |m: &mut Account| { &mut m.nsfr },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Account>(
                "Account",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Account {
        static instance: ::protobuf::rt::LazyV2<Account> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Account::new)
    }
}

impl ::protobuf::Clear for Account {
    fn clear(&mut self) {
        self.seg_1.clear();
        self.account_no.clear();
        self.seg_5.clear();
        self.seg_6.clear();
        self.seg_3.clear();
        self.seg_8.clear();
        self.seg_4.clear();
        self.dr_bal = 0.;
        self.cr_bal = 0.;
        self.bal_total = 0.;
        self.concat.clear();
        self.alm_line.clear();
        self.int_rate = 0.;
        self.cf_type.clear();
        self.gl_prefix.clear();
        self.is_acct_gl.clear();
        self.ia_line.clear();
        self.nsfr.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12non-maturity.proto\"\xc6\x03\n\rAccount\x12\x13\n\x05seg_1\
    \x18\x01\x20\x01(\tR\x04seg1\x12\x1d\n\naccount_no\x18\x02\x20\x01(\tR\t\
    accountNo\x12\x13\n\x05seg_5\x18\x03\x20\x01(\tR\x04seg5\x12\x13\n\x05se\
    g_6\x18\x04\x20\x01(\tR\x04seg6\x12\x13\n\x05seg_3\x18\x05\x20\x01(\tR\
    \x04seg3\x12\x13\n\x05seg_8\x18\x06\x20\x01(\tR\x04seg8\x12\x13\n\x05seg\
    _4\x18\x07\x20\x01(\tR\x04seg4\x12\x15\n\x06dr_bal\x18\x08\x20\x01(\x01R\
    \x05drBal\x12\x15\n\x06cr_bal\x18\t\x20\x01(\x01R\x05crBal\x12\x1b\n\tba\
    l_total\x18\n\x20\x01(\x01R\x08balTotal\x12\x16\n\x06concat\x18\x0b\x20\
    \x01(\tR\x06concat\x12\x19\n\x08alm_line\x18\x0c\x20\x01(\tR\x07almLine\
    \x12\x19\n\x08int_rate\x18\r\x20\x01(\x01R\x07intRate\x12\x17\n\x07cf_ty\
    pe\x18\x0e\x20\x01(\tR\x06cfType\x12\x1b\n\tgl_prefix\x18\x0f\x20\x01(\t\
    R\x08glPrefix\x12\x1c\n\nis_acct_gl\x18\x10\x20\x01(\tR\x08isAcctGl\x12\
    \x17\n\x07ia_line\x18\x11\x20\x01(\tR\x06iaLine\x12\x12\n\x04nsfr\x18\
    \x12\x20\x01(\tR\x04nsfrb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
