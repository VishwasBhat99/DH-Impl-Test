// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_amt",
                |m: &Cashflow| { &m.int_amt },
                |m: &mut Cashflow| { &mut m.int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "prin_amt",
                |m: &Cashflow| { &m.prin_amt },
                |m: &mut Cashflow| { &mut m.prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub deal_no: ::std::string::String,
    pub portfolio: ::std::string::String,
    pub instrument_id: ::std::string::String,
    pub instrument_type: ::std::string::String,
    pub isin_code: ::std::string::String,
    pub security_name: ::std::string::String,
    pub face_value: f64,
    pub book_value: f64,
    pub market_value: f64,
    pub currency: ::std::string::String,
    pub mtm: i64,
    pub yeild: f64,
    pub maturity_date: i64,
    pub coupon_classification_1: ::std::string::String,
    pub coupon_rate: f64,
    pub face_value_perunits: f64,
    pub quantity: f64,
    pub appreciation: ::std::string::String,
    pub depreciation: ::std::string::String,
    pub net_appreciation_depreciation: ::std::string::String,
    pub amortisation_asondate: ::std::string::String,
    pub accounted_amortisation: i64,
    pub unaccounted_amortisation: i64,
    pub accured_interest: f64,
    pub coupon_frequency: ::std::string::String,
    pub coupon_basis: ::std::string::String,
    pub category: ::std::string::String,
    pub sub_category: ::std::string::String,
    pub put_date: ::std::string::String,
    pub call_date: ::std::string::String,
    pub last_coupon: ::std::string::String,
    pub next_coupon: i64,
    pub issue_date: i64,
    pub last_repricing_date: ::std::string::String,
    pub next_repricing_date: ::std::string::String,
    pub place: ::std::string::String,
    pub country: ::std::string::String,
    pub slr_nonslr: ::std::string::String,
    pub listed: ::std::string::String,
    pub issuer_id: ::std::string::String,
    pub issuer_name: ::std::string::String,
    pub external_rating_agency: ::std::string::String,
    pub external_rating: ::std::string::String,
    pub market: ::std::string::String,
    pub asset_classification: ::std::string::String,
    pub guarantor: ::std::string::String,
    pub industry: ::std::string::String,
    pub sub_industry: ::std::string::String,
    pub npa_classification: ::std::string::String,
    pub deal_value_date: ::std::string::String,
    pub m_duration: ::std::string::String,
    pub treasury_gl_code: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string deal_no = 1;


    pub fn get_deal_no(&self) -> &str {
        &self.deal_no
    }
    pub fn clear_deal_no(&mut self) {
        self.deal_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_no(&mut self, v: ::std::string::String) {
        self.deal_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_no(&mut self) -> &mut ::std::string::String {
        &mut self.deal_no
    }

    // Take field
    pub fn take_deal_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_no, ::std::string::String::new())
    }

    // string portfolio = 2;


    pub fn get_portfolio(&self) -> &str {
        &self.portfolio
    }
    pub fn clear_portfolio(&mut self) {
        self.portfolio.clear();
    }

    // Param is passed by value, moved
    pub fn set_portfolio(&mut self, v: ::std::string::String) {
        self.portfolio = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_portfolio(&mut self) -> &mut ::std::string::String {
        &mut self.portfolio
    }

    // Take field
    pub fn take_portfolio(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.portfolio, ::std::string::String::new())
    }

    // string instrument_id = 3;


    pub fn get_instrument_id(&self) -> &str {
        &self.instrument_id
    }
    pub fn clear_instrument_id(&mut self) {
        self.instrument_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_instrument_id(&mut self, v: ::std::string::String) {
        self.instrument_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instrument_id(&mut self) -> &mut ::std::string::String {
        &mut self.instrument_id
    }

    // Take field
    pub fn take_instrument_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instrument_id, ::std::string::String::new())
    }

    // string instrument_type = 4;


    pub fn get_instrument_type(&self) -> &str {
        &self.instrument_type
    }
    pub fn clear_instrument_type(&mut self) {
        self.instrument_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_instrument_type(&mut self, v: ::std::string::String) {
        self.instrument_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instrument_type(&mut self) -> &mut ::std::string::String {
        &mut self.instrument_type
    }

    // Take field
    pub fn take_instrument_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instrument_type, ::std::string::String::new())
    }

    // string isin_code = 5;


    pub fn get_isin_code(&self) -> &str {
        &self.isin_code
    }
    pub fn clear_isin_code(&mut self) {
        self.isin_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_isin_code(&mut self, v: ::std::string::String) {
        self.isin_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_isin_code(&mut self) -> &mut ::std::string::String {
        &mut self.isin_code
    }

    // Take field
    pub fn take_isin_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.isin_code, ::std::string::String::new())
    }

    // string security_name = 6;


    pub fn get_security_name(&self) -> &str {
        &self.security_name
    }
    pub fn clear_security_name(&mut self) {
        self.security_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_security_name(&mut self, v: ::std::string::String) {
        self.security_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_security_name(&mut self) -> &mut ::std::string::String {
        &mut self.security_name
    }

    // Take field
    pub fn take_security_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.security_name, ::std::string::String::new())
    }

    // double face_value = 7;


    pub fn get_face_value(&self) -> f64 {
        self.face_value
    }
    pub fn clear_face_value(&mut self) {
        self.face_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_face_value(&mut self, v: f64) {
        self.face_value = v;
    }

    // double book_value = 8;


    pub fn get_book_value(&self) -> f64 {
        self.book_value
    }
    pub fn clear_book_value(&mut self) {
        self.book_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_book_value(&mut self, v: f64) {
        self.book_value = v;
    }

    // double market_value = 9;


    pub fn get_market_value(&self) -> f64 {
        self.market_value
    }
    pub fn clear_market_value(&mut self) {
        self.market_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_market_value(&mut self, v: f64) {
        self.market_value = v;
    }

    // string currency = 10;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // int64 mtm = 11;


    pub fn get_mtm(&self) -> i64 {
        self.mtm
    }
    pub fn clear_mtm(&mut self) {
        self.mtm = 0;
    }

    // Param is passed by value, moved
    pub fn set_mtm(&mut self, v: i64) {
        self.mtm = v;
    }

    // double yeild = 12;


    pub fn get_yeild(&self) -> f64 {
        self.yeild
    }
    pub fn clear_yeild(&mut self) {
        self.yeild = 0.;
    }

    // Param is passed by value, moved
    pub fn set_yeild(&mut self, v: f64) {
        self.yeild = v;
    }

    // int64 maturity_date = 13;


    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }
    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    // string coupon_classification_1 = 14;


    pub fn get_coupon_classification_1(&self) -> &str {
        &self.coupon_classification_1
    }
    pub fn clear_coupon_classification_1(&mut self) {
        self.coupon_classification_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_coupon_classification_1(&mut self, v: ::std::string::String) {
        self.coupon_classification_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coupon_classification_1(&mut self) -> &mut ::std::string::String {
        &mut self.coupon_classification_1
    }

    // Take field
    pub fn take_coupon_classification_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coupon_classification_1, ::std::string::String::new())
    }

    // double coupon_rate = 15;


    pub fn get_coupon_rate(&self) -> f64 {
        self.coupon_rate
    }
    pub fn clear_coupon_rate(&mut self) {
        self.coupon_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_coupon_rate(&mut self, v: f64) {
        self.coupon_rate = v;
    }

    // double face_value_perunits = 16;


    pub fn get_face_value_perunits(&self) -> f64 {
        self.face_value_perunits
    }
    pub fn clear_face_value_perunits(&mut self) {
        self.face_value_perunits = 0.;
    }

    // Param is passed by value, moved
    pub fn set_face_value_perunits(&mut self, v: f64) {
        self.face_value_perunits = v;
    }

    // double quantity = 17;


    pub fn get_quantity(&self) -> f64 {
        self.quantity
    }
    pub fn clear_quantity(&mut self) {
        self.quantity = 0.;
    }

    // Param is passed by value, moved
    pub fn set_quantity(&mut self, v: f64) {
        self.quantity = v;
    }

    // string appreciation = 18;


    pub fn get_appreciation(&self) -> &str {
        &self.appreciation
    }
    pub fn clear_appreciation(&mut self) {
        self.appreciation.clear();
    }

    // Param is passed by value, moved
    pub fn set_appreciation(&mut self, v: ::std::string::String) {
        self.appreciation = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_appreciation(&mut self) -> &mut ::std::string::String {
        &mut self.appreciation
    }

    // Take field
    pub fn take_appreciation(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.appreciation, ::std::string::String::new())
    }

    // string depreciation = 19;


    pub fn get_depreciation(&self) -> &str {
        &self.depreciation
    }
    pub fn clear_depreciation(&mut self) {
        self.depreciation.clear();
    }

    // Param is passed by value, moved
    pub fn set_depreciation(&mut self, v: ::std::string::String) {
        self.depreciation = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_depreciation(&mut self) -> &mut ::std::string::String {
        &mut self.depreciation
    }

    // Take field
    pub fn take_depreciation(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.depreciation, ::std::string::String::new())
    }

    // string net_appreciation_depreciation = 20;


    pub fn get_net_appreciation_depreciation(&self) -> &str {
        &self.net_appreciation_depreciation
    }
    pub fn clear_net_appreciation_depreciation(&mut self) {
        self.net_appreciation_depreciation.clear();
    }

    // Param is passed by value, moved
    pub fn set_net_appreciation_depreciation(&mut self, v: ::std::string::String) {
        self.net_appreciation_depreciation = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_net_appreciation_depreciation(&mut self) -> &mut ::std::string::String {
        &mut self.net_appreciation_depreciation
    }

    // Take field
    pub fn take_net_appreciation_depreciation(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.net_appreciation_depreciation, ::std::string::String::new())
    }

    // string amortisation_asondate = 21;


    pub fn get_amortisation_asondate(&self) -> &str {
        &self.amortisation_asondate
    }
    pub fn clear_amortisation_asondate(&mut self) {
        self.amortisation_asondate.clear();
    }

    // Param is passed by value, moved
    pub fn set_amortisation_asondate(&mut self, v: ::std::string::String) {
        self.amortisation_asondate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amortisation_asondate(&mut self) -> &mut ::std::string::String {
        &mut self.amortisation_asondate
    }

    // Take field
    pub fn take_amortisation_asondate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amortisation_asondate, ::std::string::String::new())
    }

    // int64 accounted_amortisation = 22;


    pub fn get_accounted_amortisation(&self) -> i64 {
        self.accounted_amortisation
    }
    pub fn clear_accounted_amortisation(&mut self) {
        self.accounted_amortisation = 0;
    }

    // Param is passed by value, moved
    pub fn set_accounted_amortisation(&mut self, v: i64) {
        self.accounted_amortisation = v;
    }

    // int64 unaccounted_amortisation = 23;


    pub fn get_unaccounted_amortisation(&self) -> i64 {
        self.unaccounted_amortisation
    }
    pub fn clear_unaccounted_amortisation(&mut self) {
        self.unaccounted_amortisation = 0;
    }

    // Param is passed by value, moved
    pub fn set_unaccounted_amortisation(&mut self, v: i64) {
        self.unaccounted_amortisation = v;
    }

    // double accured_interest = 24;


    pub fn get_accured_interest(&self) -> f64 {
        self.accured_interest
    }
    pub fn clear_accured_interest(&mut self) {
        self.accured_interest = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accured_interest(&mut self, v: f64) {
        self.accured_interest = v;
    }

    // string coupon_frequency = 25;


    pub fn get_coupon_frequency(&self) -> &str {
        &self.coupon_frequency
    }
    pub fn clear_coupon_frequency(&mut self) {
        self.coupon_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_coupon_frequency(&mut self, v: ::std::string::String) {
        self.coupon_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coupon_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.coupon_frequency
    }

    // Take field
    pub fn take_coupon_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coupon_frequency, ::std::string::String::new())
    }

    // string coupon_basis = 26;


    pub fn get_coupon_basis(&self) -> &str {
        &self.coupon_basis
    }
    pub fn clear_coupon_basis(&mut self) {
        self.coupon_basis.clear();
    }

    // Param is passed by value, moved
    pub fn set_coupon_basis(&mut self, v: ::std::string::String) {
        self.coupon_basis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coupon_basis(&mut self) -> &mut ::std::string::String {
        &mut self.coupon_basis
    }

    // Take field
    pub fn take_coupon_basis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coupon_basis, ::std::string::String::new())
    }

    // string category = 27;


    pub fn get_category(&self) -> &str {
        &self.category
    }
    pub fn clear_category(&mut self) {
        self.category.clear();
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        &mut self.category
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category, ::std::string::String::new())
    }

    // string sub_category = 28;


    pub fn get_sub_category(&self) -> &str {
        &self.sub_category
    }
    pub fn clear_sub_category(&mut self) {
        self.sub_category.clear();
    }

    // Param is passed by value, moved
    pub fn set_sub_category(&mut self, v: ::std::string::String) {
        self.sub_category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sub_category(&mut self) -> &mut ::std::string::String {
        &mut self.sub_category
    }

    // Take field
    pub fn take_sub_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sub_category, ::std::string::String::new())
    }

    // string put_date = 29;


    pub fn get_put_date(&self) -> &str {
        &self.put_date
    }
    pub fn clear_put_date(&mut self) {
        self.put_date.clear();
    }

    // Param is passed by value, moved
    pub fn set_put_date(&mut self, v: ::std::string::String) {
        self.put_date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_put_date(&mut self) -> &mut ::std::string::String {
        &mut self.put_date
    }

    // Take field
    pub fn take_put_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.put_date, ::std::string::String::new())
    }

    // string call_date = 30;


    pub fn get_call_date(&self) -> &str {
        &self.call_date
    }
    pub fn clear_call_date(&mut self) {
        self.call_date.clear();
    }

    // Param is passed by value, moved
    pub fn set_call_date(&mut self, v: ::std::string::String) {
        self.call_date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_call_date(&mut self) -> &mut ::std::string::String {
        &mut self.call_date
    }

    // Take field
    pub fn take_call_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.call_date, ::std::string::String::new())
    }

    // string last_coupon = 31;


    pub fn get_last_coupon(&self) -> &str {
        &self.last_coupon
    }
    pub fn clear_last_coupon(&mut self) {
        self.last_coupon.clear();
    }

    // Param is passed by value, moved
    pub fn set_last_coupon(&mut self, v: ::std::string::String) {
        self.last_coupon = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_coupon(&mut self) -> &mut ::std::string::String {
        &mut self.last_coupon
    }

    // Take field
    pub fn take_last_coupon(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.last_coupon, ::std::string::String::new())
    }

    // int64 next_coupon = 32;


    pub fn get_next_coupon(&self) -> i64 {
        self.next_coupon
    }
    pub fn clear_next_coupon(&mut self) {
        self.next_coupon = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_coupon(&mut self, v: i64) {
        self.next_coupon = v;
    }

    // int64 issue_date = 33;


    pub fn get_issue_date(&self) -> i64 {
        self.issue_date
    }
    pub fn clear_issue_date(&mut self) {
        self.issue_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_issue_date(&mut self, v: i64) {
        self.issue_date = v;
    }

    // string last_repricing_date = 34;


    pub fn get_last_repricing_date(&self) -> &str {
        &self.last_repricing_date
    }
    pub fn clear_last_repricing_date(&mut self) {
        self.last_repricing_date.clear();
    }

    // Param is passed by value, moved
    pub fn set_last_repricing_date(&mut self, v: ::std::string::String) {
        self.last_repricing_date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_repricing_date(&mut self) -> &mut ::std::string::String {
        &mut self.last_repricing_date
    }

    // Take field
    pub fn take_last_repricing_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.last_repricing_date, ::std::string::String::new())
    }

    // string next_repricing_date = 35;


    pub fn get_next_repricing_date(&self) -> &str {
        &self.next_repricing_date
    }
    pub fn clear_next_repricing_date(&mut self) {
        self.next_repricing_date.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_repricing_date(&mut self, v: ::std::string::String) {
        self.next_repricing_date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_repricing_date(&mut self) -> &mut ::std::string::String {
        &mut self.next_repricing_date
    }

    // Take field
    pub fn take_next_repricing_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_repricing_date, ::std::string::String::new())
    }

    // string place = 36;


    pub fn get_place(&self) -> &str {
        &self.place
    }
    pub fn clear_place(&mut self) {
        self.place.clear();
    }

    // Param is passed by value, moved
    pub fn set_place(&mut self, v: ::std::string::String) {
        self.place = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_place(&mut self) -> &mut ::std::string::String {
        &mut self.place
    }

    // Take field
    pub fn take_place(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.place, ::std::string::String::new())
    }

    // string country = 37;


    pub fn get_country(&self) -> &str {
        &self.country
    }
    pub fn clear_country(&mut self) {
        self.country.clear();
    }

    // Param is passed by value, moved
    pub fn set_country(&mut self, v: ::std::string::String) {
        self.country = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country(&mut self) -> &mut ::std::string::String {
        &mut self.country
    }

    // Take field
    pub fn take_country(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.country, ::std::string::String::new())
    }

    // string slr_nonslr = 38;


    pub fn get_slr_nonslr(&self) -> &str {
        &self.slr_nonslr
    }
    pub fn clear_slr_nonslr(&mut self) {
        self.slr_nonslr.clear();
    }

    // Param is passed by value, moved
    pub fn set_slr_nonslr(&mut self, v: ::std::string::String) {
        self.slr_nonslr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slr_nonslr(&mut self) -> &mut ::std::string::String {
        &mut self.slr_nonslr
    }

    // Take field
    pub fn take_slr_nonslr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.slr_nonslr, ::std::string::String::new())
    }

    // string listed = 39;


    pub fn get_listed(&self) -> &str {
        &self.listed
    }
    pub fn clear_listed(&mut self) {
        self.listed.clear();
    }

    // Param is passed by value, moved
    pub fn set_listed(&mut self, v: ::std::string::String) {
        self.listed = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_listed(&mut self) -> &mut ::std::string::String {
        &mut self.listed
    }

    // Take field
    pub fn take_listed(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.listed, ::std::string::String::new())
    }

    // string issuer_id = 40;


    pub fn get_issuer_id(&self) -> &str {
        &self.issuer_id
    }
    pub fn clear_issuer_id(&mut self) {
        self.issuer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer_id(&mut self, v: ::std::string::String) {
        self.issuer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer_id(&mut self) -> &mut ::std::string::String {
        &mut self.issuer_id
    }

    // Take field
    pub fn take_issuer_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer_id, ::std::string::String::new())
    }

    // string issuer_name = 41;


    pub fn get_issuer_name(&self) -> &str {
        &self.issuer_name
    }
    pub fn clear_issuer_name(&mut self) {
        self.issuer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer_name(&mut self, v: ::std::string::String) {
        self.issuer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer_name(&mut self) -> &mut ::std::string::String {
        &mut self.issuer_name
    }

    // Take field
    pub fn take_issuer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer_name, ::std::string::String::new())
    }

    // string external_rating_agency = 42;


    pub fn get_external_rating_agency(&self) -> &str {
        &self.external_rating_agency
    }
    pub fn clear_external_rating_agency(&mut self) {
        self.external_rating_agency.clear();
    }

    // Param is passed by value, moved
    pub fn set_external_rating_agency(&mut self, v: ::std::string::String) {
        self.external_rating_agency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_external_rating_agency(&mut self) -> &mut ::std::string::String {
        &mut self.external_rating_agency
    }

    // Take field
    pub fn take_external_rating_agency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.external_rating_agency, ::std::string::String::new())
    }

    // string external_rating = 43;


    pub fn get_external_rating(&self) -> &str {
        &self.external_rating
    }
    pub fn clear_external_rating(&mut self) {
        self.external_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_external_rating(&mut self, v: ::std::string::String) {
        self.external_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_external_rating(&mut self) -> &mut ::std::string::String {
        &mut self.external_rating
    }

    // Take field
    pub fn take_external_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.external_rating, ::std::string::String::new())
    }

    // string market = 44;


    pub fn get_market(&self) -> &str {
        &self.market
    }
    pub fn clear_market(&mut self) {
        self.market.clear();
    }

    // Param is passed by value, moved
    pub fn set_market(&mut self, v: ::std::string::String) {
        self.market = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_market(&mut self) -> &mut ::std::string::String {
        &mut self.market
    }

    // Take field
    pub fn take_market(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.market, ::std::string::String::new())
    }

    // string asset_classification = 45;


    pub fn get_asset_classification(&self) -> &str {
        &self.asset_classification
    }
    pub fn clear_asset_classification(&mut self) {
        self.asset_classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_classification(&mut self, v: ::std::string::String) {
        self.asset_classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_classification(&mut self) -> &mut ::std::string::String {
        &mut self.asset_classification
    }

    // Take field
    pub fn take_asset_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_classification, ::std::string::String::new())
    }

    // string guarantor = 46;


    pub fn get_guarantor(&self) -> &str {
        &self.guarantor
    }
    pub fn clear_guarantor(&mut self) {
        self.guarantor.clear();
    }

    // Param is passed by value, moved
    pub fn set_guarantor(&mut self, v: ::std::string::String) {
        self.guarantor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_guarantor(&mut self) -> &mut ::std::string::String {
        &mut self.guarantor
    }

    // Take field
    pub fn take_guarantor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.guarantor, ::std::string::String::new())
    }

    // string industry = 47;


    pub fn get_industry(&self) -> &str {
        &self.industry
    }
    pub fn clear_industry(&mut self) {
        self.industry.clear();
    }

    // Param is passed by value, moved
    pub fn set_industry(&mut self, v: ::std::string::String) {
        self.industry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_industry(&mut self) -> &mut ::std::string::String {
        &mut self.industry
    }

    // Take field
    pub fn take_industry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.industry, ::std::string::String::new())
    }

    // string sub_industry = 48;


    pub fn get_sub_industry(&self) -> &str {
        &self.sub_industry
    }
    pub fn clear_sub_industry(&mut self) {
        self.sub_industry.clear();
    }

    // Param is passed by value, moved
    pub fn set_sub_industry(&mut self, v: ::std::string::String) {
        self.sub_industry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sub_industry(&mut self) -> &mut ::std::string::String {
        &mut self.sub_industry
    }

    // Take field
    pub fn take_sub_industry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sub_industry, ::std::string::String::new())
    }

    // string npa_classification = 49;


    pub fn get_npa_classification(&self) -> &str {
        &self.npa_classification
    }
    pub fn clear_npa_classification(&mut self) {
        self.npa_classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_classification(&mut self, v: ::std::string::String) {
        self.npa_classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_classification(&mut self) -> &mut ::std::string::String {
        &mut self.npa_classification
    }

    // Take field
    pub fn take_npa_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_classification, ::std::string::String::new())
    }

    // string deal_value_date = 50;


    pub fn get_deal_value_date(&self) -> &str {
        &self.deal_value_date
    }
    pub fn clear_deal_value_date(&mut self) {
        self.deal_value_date.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_value_date(&mut self, v: ::std::string::String) {
        self.deal_value_date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_value_date(&mut self) -> &mut ::std::string::String {
        &mut self.deal_value_date
    }

    // Take field
    pub fn take_deal_value_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_value_date, ::std::string::String::new())
    }

    // string m_duration = 51;


    pub fn get_m_duration(&self) -> &str {
        &self.m_duration
    }
    pub fn clear_m_duration(&mut self) {
        self.m_duration.clear();
    }

    // Param is passed by value, moved
    pub fn set_m_duration(&mut self, v: ::std::string::String) {
        self.m_duration = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_m_duration(&mut self) -> &mut ::std::string::String {
        &mut self.m_duration
    }

    // Take field
    pub fn take_m_duration(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.m_duration, ::std::string::String::new())
    }

    // string treasury_gl_code = 52;


    pub fn get_treasury_gl_code(&self) -> &str {
        &self.treasury_gl_code
    }
    pub fn clear_treasury_gl_code(&mut self) {
        self.treasury_gl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_treasury_gl_code(&mut self, v: ::std::string::String) {
        self.treasury_gl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_treasury_gl_code(&mut self) -> &mut ::std::string::String {
        &mut self.treasury_gl_code
    }

    // Take field
    pub fn take_treasury_gl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.treasury_gl_code, ::std::string::String::new())
    }

    // repeated .Cashflow cashflows = 53;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_no)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.portfolio)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instrument_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instrument_type)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.isin_code)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.security_name)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.face_value = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.book_value = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.market_value = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mtm = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.yeild = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coupon_classification_1)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.coupon_rate = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.face_value_perunits = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.quantity = tmp;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.appreciation)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.depreciation)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.net_appreciation_depreciation)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amortisation_asondate)?;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.accounted_amortisation = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.unaccounted_amortisation = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.accured_interest = tmp;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coupon_frequency)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coupon_basis)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sub_category)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.put_date)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.call_date)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.last_coupon)?;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_coupon = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.issue_date = tmp;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.last_repricing_date)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_repricing_date)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.place)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.country)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.slr_nonslr)?;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.listed)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer_id)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer_name)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.external_rating_agency)?;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.external_rating)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.market)?;
                },
                45 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_classification)?;
                },
                46 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.guarantor)?;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.industry)?;
                },
                48 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sub_industry)?;
                },
                49 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa_classification)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_value_date)?;
                },
                51 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.m_duration)?;
                },
                52 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.treasury_gl_code)?;
                },
                53 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.deal_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.deal_no);
        }
        if !self.portfolio.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.portfolio);
        }
        if !self.instrument_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.instrument_id);
        }
        if !self.instrument_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.instrument_type);
        }
        if !self.isin_code.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.isin_code);
        }
        if !self.security_name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.security_name);
        }
        if self.face_value != 0. {
            my_size += 9;
        }
        if self.book_value != 0. {
            my_size += 9;
        }
        if self.market_value != 0. {
            my_size += 9;
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.currency);
        }
        if self.mtm != 0 {
            my_size += ::protobuf::rt::value_size(11, self.mtm, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.yeild != 0. {
            my_size += 9;
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(13, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.coupon_classification_1.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.coupon_classification_1);
        }
        if self.coupon_rate != 0. {
            my_size += 9;
        }
        if self.face_value_perunits != 0. {
            my_size += 10;
        }
        if self.quantity != 0. {
            my_size += 10;
        }
        if !self.appreciation.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.appreciation);
        }
        if !self.depreciation.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.depreciation);
        }
        if !self.net_appreciation_depreciation.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.net_appreciation_depreciation);
        }
        if !self.amortisation_asondate.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.amortisation_asondate);
        }
        if self.accounted_amortisation != 0 {
            my_size += ::protobuf::rt::value_size(22, self.accounted_amortisation, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.unaccounted_amortisation != 0 {
            my_size += ::protobuf::rt::value_size(23, self.unaccounted_amortisation, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.accured_interest != 0. {
            my_size += 10;
        }
        if !self.coupon_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.coupon_frequency);
        }
        if !self.coupon_basis.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.coupon_basis);
        }
        if !self.category.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.category);
        }
        if !self.sub_category.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.sub_category);
        }
        if !self.put_date.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.put_date);
        }
        if !self.call_date.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.call_date);
        }
        if !self.last_coupon.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.last_coupon);
        }
        if self.next_coupon != 0 {
            my_size += ::protobuf::rt::value_size(32, self.next_coupon, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.issue_date != 0 {
            my_size += ::protobuf::rt::value_size(33, self.issue_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.last_repricing_date.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.last_repricing_date);
        }
        if !self.next_repricing_date.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.next_repricing_date);
        }
        if !self.place.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.place);
        }
        if !self.country.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.country);
        }
        if !self.slr_nonslr.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.slr_nonslr);
        }
        if !self.listed.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.listed);
        }
        if !self.issuer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.issuer_id);
        }
        if !self.issuer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.issuer_name);
        }
        if !self.external_rating_agency.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.external_rating_agency);
        }
        if !self.external_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.external_rating);
        }
        if !self.market.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.market);
        }
        if !self.asset_classification.is_empty() {
            my_size += ::protobuf::rt::string_size(45, &self.asset_classification);
        }
        if !self.guarantor.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.guarantor);
        }
        if !self.industry.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.industry);
        }
        if !self.sub_industry.is_empty() {
            my_size += ::protobuf::rt::string_size(48, &self.sub_industry);
        }
        if !self.npa_classification.is_empty() {
            my_size += ::protobuf::rt::string_size(49, &self.npa_classification);
        }
        if !self.deal_value_date.is_empty() {
            my_size += ::protobuf::rt::string_size(50, &self.deal_value_date);
        }
        if !self.m_duration.is_empty() {
            my_size += ::protobuf::rt::string_size(51, &self.m_duration);
        }
        if !self.treasury_gl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(52, &self.treasury_gl_code);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.deal_no.is_empty() {
            os.write_string(1, &self.deal_no)?;
        }
        if !self.portfolio.is_empty() {
            os.write_string(2, &self.portfolio)?;
        }
        if !self.instrument_id.is_empty() {
            os.write_string(3, &self.instrument_id)?;
        }
        if !self.instrument_type.is_empty() {
            os.write_string(4, &self.instrument_type)?;
        }
        if !self.isin_code.is_empty() {
            os.write_string(5, &self.isin_code)?;
        }
        if !self.security_name.is_empty() {
            os.write_string(6, &self.security_name)?;
        }
        if self.face_value != 0. {
            os.write_double(7, self.face_value)?;
        }
        if self.book_value != 0. {
            os.write_double(8, self.book_value)?;
        }
        if self.market_value != 0. {
            os.write_double(9, self.market_value)?;
        }
        if !self.currency.is_empty() {
            os.write_string(10, &self.currency)?;
        }
        if self.mtm != 0 {
            os.write_int64(11, self.mtm)?;
        }
        if self.yeild != 0. {
            os.write_double(12, self.yeild)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(13, self.maturity_date)?;
        }
        if !self.coupon_classification_1.is_empty() {
            os.write_string(14, &self.coupon_classification_1)?;
        }
        if self.coupon_rate != 0. {
            os.write_double(15, self.coupon_rate)?;
        }
        if self.face_value_perunits != 0. {
            os.write_double(16, self.face_value_perunits)?;
        }
        if self.quantity != 0. {
            os.write_double(17, self.quantity)?;
        }
        if !self.appreciation.is_empty() {
            os.write_string(18, &self.appreciation)?;
        }
        if !self.depreciation.is_empty() {
            os.write_string(19, &self.depreciation)?;
        }
        if !self.net_appreciation_depreciation.is_empty() {
            os.write_string(20, &self.net_appreciation_depreciation)?;
        }
        if !self.amortisation_asondate.is_empty() {
            os.write_string(21, &self.amortisation_asondate)?;
        }
        if self.accounted_amortisation != 0 {
            os.write_int64(22, self.accounted_amortisation)?;
        }
        if self.unaccounted_amortisation != 0 {
            os.write_int64(23, self.unaccounted_amortisation)?;
        }
        if self.accured_interest != 0. {
            os.write_double(24, self.accured_interest)?;
        }
        if !self.coupon_frequency.is_empty() {
            os.write_string(25, &self.coupon_frequency)?;
        }
        if !self.coupon_basis.is_empty() {
            os.write_string(26, &self.coupon_basis)?;
        }
        if !self.category.is_empty() {
            os.write_string(27, &self.category)?;
        }
        if !self.sub_category.is_empty() {
            os.write_string(28, &self.sub_category)?;
        }
        if !self.put_date.is_empty() {
            os.write_string(29, &self.put_date)?;
        }
        if !self.call_date.is_empty() {
            os.write_string(30, &self.call_date)?;
        }
        if !self.last_coupon.is_empty() {
            os.write_string(31, &self.last_coupon)?;
        }
        if self.next_coupon != 0 {
            os.write_int64(32, self.next_coupon)?;
        }
        if self.issue_date != 0 {
            os.write_int64(33, self.issue_date)?;
        }
        if !self.last_repricing_date.is_empty() {
            os.write_string(34, &self.last_repricing_date)?;
        }
        if !self.next_repricing_date.is_empty() {
            os.write_string(35, &self.next_repricing_date)?;
        }
        if !self.place.is_empty() {
            os.write_string(36, &self.place)?;
        }
        if !self.country.is_empty() {
            os.write_string(37, &self.country)?;
        }
        if !self.slr_nonslr.is_empty() {
            os.write_string(38, &self.slr_nonslr)?;
        }
        if !self.listed.is_empty() {
            os.write_string(39, &self.listed)?;
        }
        if !self.issuer_id.is_empty() {
            os.write_string(40, &self.issuer_id)?;
        }
        if !self.issuer_name.is_empty() {
            os.write_string(41, &self.issuer_name)?;
        }
        if !self.external_rating_agency.is_empty() {
            os.write_string(42, &self.external_rating_agency)?;
        }
        if !self.external_rating.is_empty() {
            os.write_string(43, &self.external_rating)?;
        }
        if !self.market.is_empty() {
            os.write_string(44, &self.market)?;
        }
        if !self.asset_classification.is_empty() {
            os.write_string(45, &self.asset_classification)?;
        }
        if !self.guarantor.is_empty() {
            os.write_string(46, &self.guarantor)?;
        }
        if !self.industry.is_empty() {
            os.write_string(47, &self.industry)?;
        }
        if !self.sub_industry.is_empty() {
            os.write_string(48, &self.sub_industry)?;
        }
        if !self.npa_classification.is_empty() {
            os.write_string(49, &self.npa_classification)?;
        }
        if !self.deal_value_date.is_empty() {
            os.write_string(50, &self.deal_value_date)?;
        }
        if !self.m_duration.is_empty() {
            os.write_string(51, &self.m_duration)?;
        }
        if !self.treasury_gl_code.is_empty() {
            os.write_string(52, &self.treasury_gl_code)?;
        }
        for v in &self.cashflows {
            os.write_tag(53, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "deal_no",
                |m: &AccountWithCashflows| { &m.deal_no },
                |m: &mut AccountWithCashflows| { &mut m.deal_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "portfolio",
                |m: &AccountWithCashflows| { &m.portfolio },
                |m: &mut AccountWithCashflows| { &mut m.portfolio },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instrument_id",
                |m: &AccountWithCashflows| { &m.instrument_id },
                |m: &mut AccountWithCashflows| { &mut m.instrument_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instrument_type",
                |m: &AccountWithCashflows| { &m.instrument_type },
                |m: &mut AccountWithCashflows| { &mut m.instrument_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "isin_code",
                |m: &AccountWithCashflows| { &m.isin_code },
                |m: &mut AccountWithCashflows| { &mut m.isin_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "security_name",
                |m: &AccountWithCashflows| { &m.security_name },
                |m: &mut AccountWithCashflows| { &mut m.security_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "face_value",
                |m: &AccountWithCashflows| { &m.face_value },
                |m: &mut AccountWithCashflows| { &mut m.face_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "book_value",
                |m: &AccountWithCashflows| { &m.book_value },
                |m: &mut AccountWithCashflows| { &mut m.book_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "market_value",
                |m: &AccountWithCashflows| { &m.market_value },
                |m: &mut AccountWithCashflows| { &mut m.market_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &AccountWithCashflows| { &m.currency },
                |m: &mut AccountWithCashflows| { &mut m.currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "mtm",
                |m: &AccountWithCashflows| { &m.mtm },
                |m: &mut AccountWithCashflows| { &mut m.mtm },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "yeild",
                |m: &AccountWithCashflows| { &m.yeild },
                |m: &mut AccountWithCashflows| { &mut m.yeild },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "maturity_date",
                |m: &AccountWithCashflows| { &m.maturity_date },
                |m: &mut AccountWithCashflows| { &mut m.maturity_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "coupon_classification_1",
                |m: &AccountWithCashflows| { &m.coupon_classification_1 },
                |m: &mut AccountWithCashflows| { &mut m.coupon_classification_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "coupon_rate",
                |m: &AccountWithCashflows| { &m.coupon_rate },
                |m: &mut AccountWithCashflows| { &mut m.coupon_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "face_value_perunits",
                |m: &AccountWithCashflows| { &m.face_value_perunits },
                |m: &mut AccountWithCashflows| { &mut m.face_value_perunits },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "quantity",
                |m: &AccountWithCashflows| { &m.quantity },
                |m: &mut AccountWithCashflows| { &mut m.quantity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "appreciation",
                |m: &AccountWithCashflows| { &m.appreciation },
                |m: &mut AccountWithCashflows| { &mut m.appreciation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "depreciation",
                |m: &AccountWithCashflows| { &m.depreciation },
                |m: &mut AccountWithCashflows| { &mut m.depreciation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "net_appreciation_depreciation",
                |m: &AccountWithCashflows| { &m.net_appreciation_depreciation },
                |m: &mut AccountWithCashflows| { &mut m.net_appreciation_depreciation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "amortisation_asondate",
                |m: &AccountWithCashflows| { &m.amortisation_asondate },
                |m: &mut AccountWithCashflows| { &mut m.amortisation_asondate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "accounted_amortisation",
                |m: &AccountWithCashflows| { &m.accounted_amortisation },
                |m: &mut AccountWithCashflows| { &mut m.accounted_amortisation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "unaccounted_amortisation",
                |m: &AccountWithCashflows| { &m.unaccounted_amortisation },
                |m: &mut AccountWithCashflows| { &mut m.unaccounted_amortisation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "accured_interest",
                |m: &AccountWithCashflows| { &m.accured_interest },
                |m: &mut AccountWithCashflows| { &mut m.accured_interest },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "coupon_frequency",
                |m: &AccountWithCashflows| { &m.coupon_frequency },
                |m: &mut AccountWithCashflows| { &mut m.coupon_frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "coupon_basis",
                |m: &AccountWithCashflows| { &m.coupon_basis },
                |m: &mut AccountWithCashflows| { &mut m.coupon_basis },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "category",
                |m: &AccountWithCashflows| { &m.category },
                |m: &mut AccountWithCashflows| { &mut m.category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sub_category",
                |m: &AccountWithCashflows| { &m.sub_category },
                |m: &mut AccountWithCashflows| { &mut m.sub_category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "put_date",
                |m: &AccountWithCashflows| { &m.put_date },
                |m: &mut AccountWithCashflows| { &mut m.put_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "call_date",
                |m: &AccountWithCashflows| { &m.call_date },
                |m: &mut AccountWithCashflows| { &mut m.call_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "last_coupon",
                |m: &AccountWithCashflows| { &m.last_coupon },
                |m: &mut AccountWithCashflows| { &mut m.last_coupon },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_coupon",
                |m: &AccountWithCashflows| { &m.next_coupon },
                |m: &mut AccountWithCashflows| { &mut m.next_coupon },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "issue_date",
                |m: &AccountWithCashflows| { &m.issue_date },
                |m: &mut AccountWithCashflows| { &mut m.issue_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "last_repricing_date",
                |m: &AccountWithCashflows| { &m.last_repricing_date },
                |m: &mut AccountWithCashflows| { &mut m.last_repricing_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_repricing_date",
                |m: &AccountWithCashflows| { &m.next_repricing_date },
                |m: &mut AccountWithCashflows| { &mut m.next_repricing_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "place",
                |m: &AccountWithCashflows| { &m.place },
                |m: &mut AccountWithCashflows| { &mut m.place },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "country",
                |m: &AccountWithCashflows| { &m.country },
                |m: &mut AccountWithCashflows| { &mut m.country },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "slr_nonslr",
                |m: &AccountWithCashflows| { &m.slr_nonslr },
                |m: &mut AccountWithCashflows| { &mut m.slr_nonslr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "listed",
                |m: &AccountWithCashflows| { &m.listed },
                |m: &mut AccountWithCashflows| { &mut m.listed },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "issuer_id",
                |m: &AccountWithCashflows| { &m.issuer_id },
                |m: &mut AccountWithCashflows| { &mut m.issuer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "issuer_name",
                |m: &AccountWithCashflows| { &m.issuer_name },
                |m: &mut AccountWithCashflows| { &mut m.issuer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "external_rating_agency",
                |m: &AccountWithCashflows| { &m.external_rating_agency },
                |m: &mut AccountWithCashflows| { &mut m.external_rating_agency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "external_rating",
                |m: &AccountWithCashflows| { &m.external_rating },
                |m: &mut AccountWithCashflows| { &mut m.external_rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "market",
                |m: &AccountWithCashflows| { &m.market },
                |m: &mut AccountWithCashflows| { &mut m.market },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_classification",
                |m: &AccountWithCashflows| { &m.asset_classification },
                |m: &mut AccountWithCashflows| { &mut m.asset_classification },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "guarantor",
                |m: &AccountWithCashflows| { &m.guarantor },
                |m: &mut AccountWithCashflows| { &mut m.guarantor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "industry",
                |m: &AccountWithCashflows| { &m.industry },
                |m: &mut AccountWithCashflows| { &mut m.industry },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sub_industry",
                |m: &AccountWithCashflows| { &m.sub_industry },
                |m: &mut AccountWithCashflows| { &mut m.sub_industry },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "npa_classification",
                |m: &AccountWithCashflows| { &m.npa_classification },
                |m: &mut AccountWithCashflows| { &mut m.npa_classification },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "deal_value_date",
                |m: &AccountWithCashflows| { &m.deal_value_date },
                |m: &mut AccountWithCashflows| { &mut m.deal_value_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "m_duration",
                |m: &AccountWithCashflows| { &m.m_duration },
                |m: &mut AccountWithCashflows| { &mut m.m_duration },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "treasury_gl_code",
                |m: &AccountWithCashflows| { &m.treasury_gl_code },
                |m: &mut AccountWithCashflows| { &mut m.treasury_gl_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.deal_no.clear();
        self.portfolio.clear();
        self.instrument_id.clear();
        self.instrument_type.clear();
        self.isin_code.clear();
        self.security_name.clear();
        self.face_value = 0.;
        self.book_value = 0.;
        self.market_value = 0.;
        self.currency.clear();
        self.mtm = 0;
        self.yeild = 0.;
        self.maturity_date = 0;
        self.coupon_classification_1.clear();
        self.coupon_rate = 0.;
        self.face_value_perunits = 0.;
        self.quantity = 0.;
        self.appreciation.clear();
        self.depreciation.clear();
        self.net_appreciation_depreciation.clear();
        self.amortisation_asondate.clear();
        self.accounted_amortisation = 0;
        self.unaccounted_amortisation = 0;
        self.accured_interest = 0.;
        self.coupon_frequency.clear();
        self.coupon_basis.clear();
        self.category.clear();
        self.sub_category.clear();
        self.put_date.clear();
        self.call_date.clear();
        self.last_coupon.clear();
        self.next_coupon = 0;
        self.issue_date = 0;
        self.last_repricing_date.clear();
        self.next_repricing_date.clear();
        self.place.clear();
        self.country.clear();
        self.slr_nonslr.clear();
        self.listed.clear();
        self.issuer_id.clear();
        self.issuer_name.clear();
        self.external_rating_agency.clear();
        self.external_rating.clear();
        self.market.clear();
        self.asset_classification.clear();
        self.guarantor.clear();
        self.industry.clear();
        self.sub_industry.clear();
        self.npa_classification.clear();
        self.deal_value_date.clear();
        self.m_duration.clear();
        self.treasury_gl_code.clear();
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\
    \x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prin\
    Amt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xa5\x0f\n\x14Accou\
    ntWithCashflows\x12\x17\n\x07deal_no\x18\x01\x20\x01(\tR\x06dealNo\x12\
    \x1c\n\tportfolio\x18\x02\x20\x01(\tR\tportfolio\x12#\n\rinstrument_id\
    \x18\x03\x20\x01(\tR\x0cinstrumentId\x12'\n\x0finstrument_type\x18\x04\
    \x20\x01(\tR\x0einstrumentType\x12\x1b\n\tisin_code\x18\x05\x20\x01(\tR\
    \x08isinCode\x12#\n\rsecurity_name\x18\x06\x20\x01(\tR\x0csecurityName\
    \x12\x1d\n\nface_value\x18\x07\x20\x01(\x01R\tfaceValue\x12\x1d\n\nbook_\
    value\x18\x08\x20\x01(\x01R\tbookValue\x12!\n\x0cmarket_value\x18\t\x20\
    \x01(\x01R\x0bmarketValue\x12\x1a\n\x08currency\x18\n\x20\x01(\tR\x08cur\
    rency\x12\x10\n\x03mtm\x18\x0b\x20\x01(\x03R\x03mtm\x12\x14\n\x05yeild\
    \x18\x0c\x20\x01(\x01R\x05yeild\x12#\n\rmaturity_date\x18\r\x20\x01(\x03\
    R\x0cmaturityDate\x126\n\x17coupon_classification_1\x18\x0e\x20\x01(\tR\
    \x15couponClassification1\x12\x1f\n\x0bcoupon_rate\x18\x0f\x20\x01(\x01R\
    \ncouponRate\x12.\n\x13face_value_perunits\x18\x10\x20\x01(\x01R\x11face\
    ValuePerunits\x12\x1a\n\x08quantity\x18\x11\x20\x01(\x01R\x08quantity\
    \x12\"\n\x0cappreciation\x18\x12\x20\x01(\tR\x0cappreciation\x12\"\n\x0c\
    depreciation\x18\x13\x20\x01(\tR\x0cdepreciation\x12B\n\x1dnet_appreciat\
    ion_depreciation\x18\x14\x20\x01(\tR\x1bnetAppreciationDepreciation\x123\
    \n\x15amortisation_asondate\x18\x15\x20\x01(\tR\x14amortisationAsondate\
    \x125\n\x16accounted_amortisation\x18\x16\x20\x01(\x03R\x15accountedAmor\
    tisation\x129\n\x18unaccounted_amortisation\x18\x17\x20\x01(\x03R\x17una\
    ccountedAmortisation\x12)\n\x10accured_interest\x18\x18\x20\x01(\x01R\
    \x0faccuredInterest\x12)\n\x10coupon_frequency\x18\x19\x20\x01(\tR\x0fco\
    uponFrequency\x12!\n\x0ccoupon_basis\x18\x1a\x20\x01(\tR\x0bcouponBasis\
    \x12\x1a\n\x08category\x18\x1b\x20\x01(\tR\x08category\x12!\n\x0csub_cat\
    egory\x18\x1c\x20\x01(\tR\x0bsubCategory\x12\x19\n\x08put_date\x18\x1d\
    \x20\x01(\tR\x07putDate\x12\x1b\n\tcall_date\x18\x1e\x20\x01(\tR\x08call\
    Date\x12\x1f\n\x0blast_coupon\x18\x1f\x20\x01(\tR\nlastCoupon\x12\x1f\n\
    \x0bnext_coupon\x18\x20\x20\x01(\x03R\nnextCoupon\x12\x1d\n\nissue_date\
    \x18!\x20\x01(\x03R\tissueDate\x12.\n\x13last_repricing_date\x18\"\x20\
    \x01(\tR\x11lastRepricingDate\x12.\n\x13next_repricing_date\x18#\x20\x01\
    (\tR\x11nextRepricingDate\x12\x14\n\x05place\x18$\x20\x01(\tR\x05place\
    \x12\x18\n\x07country\x18%\x20\x01(\tR\x07country\x12\x1d\n\nslr_nonslr\
    \x18&\x20\x01(\tR\tslrNonslr\x12\x16\n\x06listed\x18'\x20\x01(\tR\x06lis\
    ted\x12\x1b\n\tissuer_id\x18(\x20\x01(\tR\x08issuerId\x12\x1f\n\x0bissue\
    r_name\x18)\x20\x01(\tR\nissuerName\x124\n\x16external_rating_agency\x18\
    *\x20\x01(\tR\x14externalRatingAgency\x12'\n\x0fexternal_rating\x18+\x20\
    \x01(\tR\x0eexternalRating\x12\x16\n\x06market\x18,\x20\x01(\tR\x06marke\
    t\x121\n\x14asset_classification\x18-\x20\x01(\tR\x13assetClassification\
    \x12\x1c\n\tguarantor\x18.\x20\x01(\tR\tguarantor\x12\x1a\n\x08industry\
    \x18/\x20\x01(\tR\x08industry\x12!\n\x0csub_industry\x180\x20\x01(\tR\
    \x0bsubIndustry\x12-\n\x12npa_classification\x181\x20\x01(\tR\x11npaClas\
    sification\x12&\n\x0fdeal_value_date\x182\x20\x01(\tR\rdealValueDate\x12\
    \x1d\n\nm_duration\x183\x20\x01(\tR\tmDuration\x12(\n\x10treasury_gl_cod\
    e\x184\x20\x01(\tR\x0etreasuryGlCode\x12'\n\tcashflows\x185\x20\x03(\x0b\
    2\t.CashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
