// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double prin_amt = 2;

    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_int_amt();
        self.clear_prin_amt();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Account {
    // message fields
    pub entity: ::std::string::String,
    pub source: ::std::string::String,
    pub in_out: ::std::string::String,
    pub sub_type: ::std::string::String,
    pub counter_party: ::std::string::String,
    pub currency: ::std::string::String,
    pub avaliabile_limit: f64,
    pub deal_amount_lcy: f64,
    pub cf_date: i64,
    pub cp_parent_id: ::std::string::String,
    pub cashflows: ::protobuf::SingularPtrField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    // string entity = 1;

    pub fn clear_entity(&mut self) {
        self.entity.clear();
    }

    // Param is passed by value, moved
    pub fn set_entity(&mut self, v: ::std::string::String) {
        self.entity = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entity(&mut self) -> &mut ::std::string::String {
        &mut self.entity
    }

    // Take field
    pub fn take_entity(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.entity, ::std::string::String::new())
    }

    pub fn get_entity(&self) -> &str {
        &self.entity
    }

    // string source = 2;

    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: ::std::string::String) {
        self.source = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut ::std::string::String {
        &mut self.source
    }

    // Take field
    pub fn take_source(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source, ::std::string::String::new())
    }

    pub fn get_source(&self) -> &str {
        &self.source
    }

    // string in_out = 3;

    pub fn clear_in_out(&mut self) {
        self.in_out.clear();
    }

    // Param is passed by value, moved
    pub fn set_in_out(&mut self, v: ::std::string::String) {
        self.in_out = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_in_out(&mut self) -> &mut ::std::string::String {
        &mut self.in_out
    }

    // Take field
    pub fn take_in_out(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.in_out, ::std::string::String::new())
    }

    pub fn get_in_out(&self) -> &str {
        &self.in_out
    }

    // string sub_type = 4;

    pub fn clear_sub_type(&mut self) {
        self.sub_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_sub_type(&mut self, v: ::std::string::String) {
        self.sub_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sub_type(&mut self) -> &mut ::std::string::String {
        &mut self.sub_type
    }

    // Take field
    pub fn take_sub_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sub_type, ::std::string::String::new())
    }

    pub fn get_sub_type(&self) -> &str {
        &self.sub_type
    }

    // string counter_party = 5;

    pub fn clear_counter_party(&mut self) {
        self.counter_party.clear();
    }

    // Param is passed by value, moved
    pub fn set_counter_party(&mut self, v: ::std::string::String) {
        self.counter_party = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counter_party(&mut self) -> &mut ::std::string::String {
        &mut self.counter_party
    }

    // Take field
    pub fn take_counter_party(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counter_party, ::std::string::String::new())
    }

    pub fn get_counter_party(&self) -> &str {
        &self.counter_party
    }

    // string currency = 6;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // double avaliabile_limit = 7;

    pub fn clear_avaliabile_limit(&mut self) {
        self.avaliabile_limit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_avaliabile_limit(&mut self, v: f64) {
        self.avaliabile_limit = v;
    }

    pub fn get_avaliabile_limit(&self) -> f64 {
        self.avaliabile_limit
    }

    // double deal_amount_lcy = 8;

    pub fn clear_deal_amount_lcy(&mut self) {
        self.deal_amount_lcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_deal_amount_lcy(&mut self, v: f64) {
        self.deal_amount_lcy = v;
    }

    pub fn get_deal_amount_lcy(&self) -> f64 {
        self.deal_amount_lcy
    }

    // int64 cf_date = 9;

    pub fn clear_cf_date(&mut self) {
        self.cf_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_cf_date(&mut self, v: i64) {
        self.cf_date = v;
    }

    pub fn get_cf_date(&self) -> i64 {
        self.cf_date
    }

    // string cp_parent_id = 10;

    pub fn clear_cp_parent_id(&mut self) {
        self.cp_parent_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cp_parent_id(&mut self, v: ::std::string::String) {
        self.cp_parent_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cp_parent_id(&mut self) -> &mut ::std::string::String {
        &mut self.cp_parent_id
    }

    // Take field
    pub fn take_cp_parent_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cp_parent_id, ::std::string::String::new())
    }

    pub fn get_cp_parent_id(&self) -> &str {
        &self.cp_parent_id
    }

    // .Cashflow cashflows = 11;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    pub fn has_cashflows(&self) -> bool {
        self.cashflows.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: Cashflow) {
        self.cashflows = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cashflows(&mut self) -> &mut Cashflow {
        if self.cashflows.is_none() {
            self.cashflows.set_default();
        }
        self.cashflows.as_mut().unwrap()
    }

    // Take field
    pub fn take_cashflows(&mut self) -> Cashflow {
        self.cashflows.take().unwrap_or_else(|| Cashflow::new())
    }

    pub fn get_cashflows(&self) -> &Cashflow {
        self.cashflows.as_ref().unwrap_or_else(|| Cashflow::default_instance())
    }
}

impl ::protobuf::Message for Account {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.entity)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.in_out)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sub_type)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counter_party)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.avaliabile_limit = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.deal_amount_lcy = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cf_date = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cp_parent_id)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.entity.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.entity);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.source);
        }
        if !self.in_out.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.in_out);
        }
        if !self.sub_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.sub_type);
        }
        if !self.counter_party.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.counter_party);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.currency);
        }
        if self.avaliabile_limit != 0. {
            my_size += 9;
        }
        if self.deal_amount_lcy != 0. {
            my_size += 9;
        }
        if self.cf_date != 0 {
            my_size += ::protobuf::rt::value_size(9, self.cf_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.cp_parent_id.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.cp_parent_id);
        }
        if let Some(ref v) = self.cashflows.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.entity.is_empty() {
            os.write_string(1, &self.entity)?;
        }
        if !self.source.is_empty() {
            os.write_string(2, &self.source)?;
        }
        if !self.in_out.is_empty() {
            os.write_string(3, &self.in_out)?;
        }
        if !self.sub_type.is_empty() {
            os.write_string(4, &self.sub_type)?;
        }
        if !self.counter_party.is_empty() {
            os.write_string(5, &self.counter_party)?;
        }
        if !self.currency.is_empty() {
            os.write_string(6, &self.currency)?;
        }
        if self.avaliabile_limit != 0. {
            os.write_double(7, self.avaliabile_limit)?;
        }
        if self.deal_amount_lcy != 0. {
            os.write_double(8, self.deal_amount_lcy)?;
        }
        if self.cf_date != 0 {
            os.write_int64(9, self.cf_date)?;
        }
        if !self.cp_parent_id.is_empty() {
            os.write_string(10, &self.cp_parent_id)?;
        }
        if let Some(ref v) = self.cashflows.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Account {
        Account::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "entity",
                    |m: &Account| { &m.entity },
                    |m: &mut Account| { &mut m.entity },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "source",
                    |m: &Account| { &m.source },
                    |m: &mut Account| { &mut m.source },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "in_out",
                    |m: &Account| { &m.in_out },
                    |m: &mut Account| { &mut m.in_out },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sub_type",
                    |m: &Account| { &m.sub_type },
                    |m: &mut Account| { &mut m.sub_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counter_party",
                    |m: &Account| { &m.counter_party },
                    |m: &mut Account| { &mut m.counter_party },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &Account| { &m.currency },
                    |m: &mut Account| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "avaliabile_limit",
                    |m: &Account| { &m.avaliabile_limit },
                    |m: &mut Account| { &mut m.avaliabile_limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "deal_amount_lcy",
                    |m: &Account| { &m.deal_amount_lcy },
                    |m: &mut Account| { &mut m.deal_amount_lcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cf_date",
                    |m: &Account| { &m.cf_date },
                    |m: &mut Account| { &mut m.cf_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cp_parent_id",
                    |m: &Account| { &m.cp_parent_id },
                    |m: &mut Account| { &mut m.cp_parent_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &Account| { &m.cashflows },
                    |m: &mut Account| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Account>(
                    "Account",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Account {
        static mut instance: ::protobuf::lazy::Lazy<Account> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Account,
        };
        unsafe {
            instance.get(Account::new)
        }
    }
}

impl ::protobuf::Clear for Account {
    fn clear(&mut self) {
        self.clear_entity();
        self.clear_source();
        self.clear_in_out();
        self.clear_sub_type();
        self.clear_counter_party();
        self.clear_currency();
        self.clear_avaliabile_limit();
        self.clear_deal_amount_lcy();
        self.clear_cf_date();
        self.clear_cp_parent_id();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17proto/person_info.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\
    \x01\x20\x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\
    \x07prinAmt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xe3\x02\n\
    \x07Account\x12\x16\n\x06entity\x18\x01\x20\x01(\tR\x06entity\x12\x16\n\
    \x06source\x18\x02\x20\x01(\tR\x06source\x12\x15\n\x06in_out\x18\x03\x20\
    \x01(\tR\x05inOut\x12\x19\n\x08sub_type\x18\x04\x20\x01(\tR\x07subType\
    \x12#\n\rcounter_party\x18\x05\x20\x01(\tR\x0ccounterParty\x12\x1a\n\x08\
    currency\x18\x06\x20\x01(\tR\x08currency\x12)\n\x10avaliabile_limit\x18\
    \x07\x20\x01(\x01R\x0favaliabileLimit\x12&\n\x0fdeal_amount_lcy\x18\x08\
    \x20\x01(\x01R\rdealAmountLcy\x12\x17\n\x07cf_date\x18\t\x20\x01(\x03R\
    \x06cfDate\x12\x20\n\x0ccp_parent_id\x18\n\x20\x01(\tR\ncpParentId\x12'\
    \n\tcashflows\x18\x0b\x20\x01(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
