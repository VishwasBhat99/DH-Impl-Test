use rbdate::NaiveDate;

use crate::configuration_parameters::ConfigurationParameters;

use super::input_account::InputData;

use rbdate::DateParser;

#[derive(Debug, Clone)]
pub struct OutputAccount {
    pub cust_no: String,
    pub reference: String,
    pub cust_name: String,
    pub branch_cd: String,
    pub norm_int_rt: f64,
    pub acurl_freq: String,
    pub book_dt: String,
    pub val_dt: String,
    pub mat_dt: String,
    pub due_dt: String,
    pub user_def_stats: String,
    pub prod_cd: String,
    pub gl: String,
    pub curr: String,
    pub prin_ost_bal: f64,
    pub component: String,
    pub amt_due: f64,
    pub amt_setld: String,
    pub cf_amt: f64,
    pub spread: String,
    pub compmis1: String,
    pub compmis2: String,
    pub compmis3: String,
    pub old_rt_cd: String,
    pub old_rt_typ: String,
    pub old_benchmark: String,
    pub nxt_reset_dt: String,
    pub last_reset_dt: String,
    pub rt_flag_new: String,
    pub rt_cd_new: String,
    pub division: String,
    pub alm_line: String,
    pub ia_llg: String,
    pub balm_llg: String,
    pub repricing_freq: String,
    pub nxt_repricing_dt: String,
    pub lst_repricing_dt: String,
    pub as_on_dt: String,
    pub int_basis: String,
    pub int_calc_typ: String,
    pub cust_typ: String,
    pub npa_typ: String,
    pub bmid: String,
    pub pre_emi_ovd_amt: String,
    pub exc_pre_emi_amt: String,
    pub emi_ovd_amt: String,
    pub exc_emi_amt: String,
    pub pre_emi_ovd_gl_cd: String,
    pub exc_pre_emi_gl_cd: String,
    pub emi_ovd_gl_cd: String,
    pub exc_emi_gl_cd: String,
}

pub fn format_output(
    input_data: InputData,
    division: String,
    loan_id: String,
    due_dt: NaiveDate,
    component: String,
    principal_amt: f64,
    final_npa_typ: String,
    pre_emi_overd_amt: f64,
    config_params: &ConfigurationParameters,
) -> String {
    format!(
        "{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}",
        loan_id.clone(),
        loan_id.clone(),
        input_data.cust_name.clone(),
        "".to_owned(),
        input_data.interestrate,
        input_data.loanrepayment_frequency.clone(),
        input_data.firstemidate.format("%d-%m-%Y").to_string(),
        input_data.lastemidate.format("%d-%m-%Y").to_string(),
        input_data.maturity_date.format("%d-%m-%Y").to_string(),
        due_dt.format("%d-%m-%Y").to_string(),
        "".to_string(),
        input_data.productcode.clone(),
        input_data.glclasscode.clone(),
        input_data.currency.clone(),
        input_data.principalcomponent,
        component.to_string(),
        input_data.principalcomponent,
        "".to_string(),
        principal_amt,
        "".to_string(),
        input_data.productname.clone(),
        "".to_string(),
        "".to_string(),
        "".to_string(),
        "".to_string(),
        "".to_string(),
        "".to_string(),
        "".to_string(),
        "".to_string(),
        "".to_string(),
        division,
        "".to_string(),
        "".to_string(),
        "".to_string(),
        "".to_string(),
        "".to_string(),
        config_params.as_on_date().format("%d-%m-%Y").to_string(),
        config_params.as_on_date().format("%d-%m-%Y").to_string(),
        "".to_string(),
        "".to_string(),
        "".to_string(),
        final_npa_typ,
        "".to_string(),
        pre_emi_overd_amt,
        "".to_string(),
        "".to_string(),
        input_data.totalinterestaccrued.to_string(),
        "".to_string(),
        "".to_string(),
        "".to_string(),
        "".to_string(),

    )
}
pub fn get_writer(file_path: &str) -> std::io::BufWriter<std::fs::File> {
    match sdb_io::buf_file_wrtr(file_path, None) {
        Ok(file) => file,
        Err(error) => panic!("Unable to create file `{}` due to: {}", file_path, error),
    }
}
