// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct One_acc_view {
    // message fields
    pub entity: ::std::string::String,
    pub deal_no: ::std::string::String,
    pub contract_no: ::std::string::String,
    pub isin: ::std::string::String,
    pub instr_id: ::std::string::String,
    pub parent_code: ::std::string::String,
    pub short_name: ::std::string::String,
    pub issuer_name: ::std::string::String,
    pub intr_typ: ::std::string::String,
    pub sec_issuance_date: i64,
    pub coupon: ::std::string::String,
    pub last_intr_dt: i64,
    pub next_intr_dt: i64,
    pub nxt_repricing_dt: i64,
    pub rating: ::std::string::String,
    pub mat_dt: i64,
    pub call_dt: i64,
    pub put_dt: i64,
    pub tax_status: ::std::string::String,
    pub product: ::std::string::String,
    pub prod_desc: ::std::string::String,
    pub slr_nslr: ::std::string::String,
    pub deal_dt: i64,
    pub portfolio: ::std::string::String,
    pub desk: ::std::string::String,
    pub acc_sec_igaap: ::std::string::String,
    pub port_typ: ::std::string::String,
    pub deal_ytm: f64,
    pub deal_rt: f64,
    pub currency: ::std::string::String,
    pub os_face_val: i64,
    pub accr_int: f64,
    pub os_cv_before_amort: f64,
    pub amort_till_dt: f64,
    pub os_cv_after_amort: f64,
    pub intr_app_freq: ::std::string::String,
    pub comp_freq: ::std::string::String,
    pub intr_prac: ::std::string::String,
    pub rate_spread: ::std::string::String,
    pub asset_class: ::std::string::String,
    pub average_balance: f64,
    pub yld_to_call: f64,
    pub int_rate: f64,
    pub base_rate: f64,
    pub final_ftp_rate: f64,
    pub value_date: i64,
    pub nxt_rep_dt: i64,
    pub lst_rep_dt: i64,
    pub mis1: ::std::string::String,
    pub mis2: ::std::string::String,
    pub psl_code: ::std::string::String,
    pub prod_type: ::std::string::String,
    pub rate_flag: ::std::string::String,
    pub branch: ::std::string::String,
    pub source_file_name: ::std::string::String,
    pub gl: ::std::string::String,
    pub cust_id: ::std::string::String,
    pub final_ftp_amt: f64,
    pub alm_line: ::std::string::String,
    pub trade_dt: ::std::string::String,
    pub orig_bal: f64,
    pub outstanding_bal: f64,
    pub adj1: f64,
    pub adj2: f64,
    pub adj3: f64,
    pub adj4: f64,
    pub adj5: f64,
    pub adj6: f64,
    pub liquidity_premia: ::std::string::String,
    pub psl_charge: ::std::string::String,
    pub input_benchmark: ::std::string::String,
    pub pdo: ::std::string::String,
    pub npl: ::std::string::String,
    pub specific_provision: ::std::string::String,
    pub method: ::std::string::String,
    pub rate_curve: ::std::string::String,
    pub org_tenor: i64,
    pub rep_tenor: i64,
    pub fx_spread: f64,
    pub var_spread: f64,
    pub first_ftp: f64,
    pub bc_as_on_rule: i64,
    pub tenor_start_date_rule: i64,
    pub tenor_end_date_rule: i64,
    pub bc_as_on_applied: i64,
    pub tenor_start_date_applied: i64,
    pub tenor_end_date_applied: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl One_acc_view {
    pub fn new() -> One_acc_view {
        ::std::default::Default::default()
    }

    // string entity = 1;

    pub fn clear_entity(&mut self) {
        self.entity.clear();
    }

    // Param is passed by value, moved
    pub fn set_entity(&mut self, v: ::std::string::String) {
        self.entity = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entity(&mut self) -> &mut ::std::string::String {
        &mut self.entity
    }

    // Take field
    pub fn take_entity(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.entity, ::std::string::String::new())
    }

    pub fn get_entity(&self) -> &str {
        &self.entity
    }

    // string deal_no = 2;

    pub fn clear_deal_no(&mut self) {
        self.deal_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_no(&mut self, v: ::std::string::String) {
        self.deal_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_no(&mut self) -> &mut ::std::string::String {
        &mut self.deal_no
    }

    // Take field
    pub fn take_deal_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_no, ::std::string::String::new())
    }

    pub fn get_deal_no(&self) -> &str {
        &self.deal_no
    }

    // string contract_no = 3;

    pub fn clear_contract_no(&mut self) {
        self.contract_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_no(&mut self, v: ::std::string::String) {
        self.contract_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_no(&mut self) -> &mut ::std::string::String {
        &mut self.contract_no
    }

    // Take field
    pub fn take_contract_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_no, ::std::string::String::new())
    }

    pub fn get_contract_no(&self) -> &str {
        &self.contract_no
    }

    // string isin = 4;

    pub fn clear_isin(&mut self) {
        self.isin.clear();
    }

    // Param is passed by value, moved
    pub fn set_isin(&mut self, v: ::std::string::String) {
        self.isin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_isin(&mut self) -> &mut ::std::string::String {
        &mut self.isin
    }

    // Take field
    pub fn take_isin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.isin, ::std::string::String::new())
    }

    pub fn get_isin(&self) -> &str {
        &self.isin
    }

    // string instr_id = 5;

    pub fn clear_instr_id(&mut self) {
        self.instr_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_instr_id(&mut self, v: ::std::string::String) {
        self.instr_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instr_id(&mut self) -> &mut ::std::string::String {
        &mut self.instr_id
    }

    // Take field
    pub fn take_instr_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instr_id, ::std::string::String::new())
    }

    pub fn get_instr_id(&self) -> &str {
        &self.instr_id
    }

    // string parent_code = 6;

    pub fn clear_parent_code(&mut self) {
        self.parent_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent_code(&mut self, v: ::std::string::String) {
        self.parent_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent_code(&mut self) -> &mut ::std::string::String {
        &mut self.parent_code
    }

    // Take field
    pub fn take_parent_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent_code, ::std::string::String::new())
    }

    pub fn get_parent_code(&self) -> &str {
        &self.parent_code
    }

    // string short_name = 7;

    pub fn clear_short_name(&mut self) {
        self.short_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_short_name(&mut self, v: ::std::string::String) {
        self.short_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_short_name(&mut self) -> &mut ::std::string::String {
        &mut self.short_name
    }

    // Take field
    pub fn take_short_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.short_name, ::std::string::String::new())
    }

    pub fn get_short_name(&self) -> &str {
        &self.short_name
    }

    // string issuer_name = 8;

    pub fn clear_issuer_name(&mut self) {
        self.issuer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer_name(&mut self, v: ::std::string::String) {
        self.issuer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer_name(&mut self) -> &mut ::std::string::String {
        &mut self.issuer_name
    }

    // Take field
    pub fn take_issuer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer_name, ::std::string::String::new())
    }

    pub fn get_issuer_name(&self) -> &str {
        &self.issuer_name
    }

    // string intr_typ = 9;

    pub fn clear_intr_typ(&mut self) {
        self.intr_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_intr_typ(&mut self, v: ::std::string::String) {
        self.intr_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_intr_typ(&mut self) -> &mut ::std::string::String {
        &mut self.intr_typ
    }

    // Take field
    pub fn take_intr_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.intr_typ, ::std::string::String::new())
    }

    pub fn get_intr_typ(&self) -> &str {
        &self.intr_typ
    }

    // int64 sec_issuance_date = 10;

    pub fn clear_sec_issuance_date(&mut self) {
        self.sec_issuance_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_sec_issuance_date(&mut self, v: i64) {
        self.sec_issuance_date = v;
    }

    pub fn get_sec_issuance_date(&self) -> i64 {
        self.sec_issuance_date
    }

    // string coupon = 11;

    pub fn clear_coupon(&mut self) {
        self.coupon.clear();
    }

    // Param is passed by value, moved
    pub fn set_coupon(&mut self, v: ::std::string::String) {
        self.coupon = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coupon(&mut self) -> &mut ::std::string::String {
        &mut self.coupon
    }

    // Take field
    pub fn take_coupon(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coupon, ::std::string::String::new())
    }

    pub fn get_coupon(&self) -> &str {
        &self.coupon
    }

    // int64 last_intr_dt = 12;

    pub fn clear_last_intr_dt(&mut self) {
        self.last_intr_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_intr_dt(&mut self, v: i64) {
        self.last_intr_dt = v;
    }

    pub fn get_last_intr_dt(&self) -> i64 {
        self.last_intr_dt
    }

    // int64 next_intr_dt = 13;

    pub fn clear_next_intr_dt(&mut self) {
        self.next_intr_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_intr_dt(&mut self, v: i64) {
        self.next_intr_dt = v;
    }

    pub fn get_next_intr_dt(&self) -> i64 {
        self.next_intr_dt
    }

    // int64 nxt_repricing_dt = 14;

    pub fn clear_nxt_repricing_dt(&mut self) {
        self.nxt_repricing_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_repricing_dt(&mut self, v: i64) {
        self.nxt_repricing_dt = v;
    }

    pub fn get_nxt_repricing_dt(&self) -> i64 {
        self.nxt_repricing_dt
    }

    // string rating = 15;

    pub fn clear_rating(&mut self) {
        self.rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_rating(&mut self, v: ::std::string::String) {
        self.rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rating(&mut self) -> &mut ::std::string::String {
        &mut self.rating
    }

    // Take field
    pub fn take_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rating, ::std::string::String::new())
    }

    pub fn get_rating(&self) -> &str {
        &self.rating
    }

    // int64 mat_dt = 16;

    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }

    // int64 call_dt = 17;

    pub fn clear_call_dt(&mut self) {
        self.call_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_call_dt(&mut self, v: i64) {
        self.call_dt = v;
    }

    pub fn get_call_dt(&self) -> i64 {
        self.call_dt
    }

    // int64 put_dt = 18;

    pub fn clear_put_dt(&mut self) {
        self.put_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_put_dt(&mut self, v: i64) {
        self.put_dt = v;
    }

    pub fn get_put_dt(&self) -> i64 {
        self.put_dt
    }

    // string tax_status = 19;

    pub fn clear_tax_status(&mut self) {
        self.tax_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_tax_status(&mut self, v: ::std::string::String) {
        self.tax_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tax_status(&mut self) -> &mut ::std::string::String {
        &mut self.tax_status
    }

    // Take field
    pub fn take_tax_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tax_status, ::std::string::String::new())
    }

    pub fn get_tax_status(&self) -> &str {
        &self.tax_status
    }

    // string product = 20;

    pub fn clear_product(&mut self) {
        self.product.clear();
    }

    // Param is passed by value, moved
    pub fn set_product(&mut self, v: ::std::string::String) {
        self.product = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product(&mut self) -> &mut ::std::string::String {
        &mut self.product
    }

    // Take field
    pub fn take_product(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product, ::std::string::String::new())
    }

    pub fn get_product(&self) -> &str {
        &self.product
    }

    // string prod_desc = 21;

    pub fn clear_prod_desc(&mut self) {
        self.prod_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_desc(&mut self, v: ::std::string::String) {
        self.prod_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_desc(&mut self) -> &mut ::std::string::String {
        &mut self.prod_desc
    }

    // Take field
    pub fn take_prod_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_desc, ::std::string::String::new())
    }

    pub fn get_prod_desc(&self) -> &str {
        &self.prod_desc
    }

    // string slr_nslr = 22;

    pub fn clear_slr_nslr(&mut self) {
        self.slr_nslr.clear();
    }

    // Param is passed by value, moved
    pub fn set_slr_nslr(&mut self, v: ::std::string::String) {
        self.slr_nslr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slr_nslr(&mut self) -> &mut ::std::string::String {
        &mut self.slr_nslr
    }

    // Take field
    pub fn take_slr_nslr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.slr_nslr, ::std::string::String::new())
    }

    pub fn get_slr_nslr(&self) -> &str {
        &self.slr_nslr
    }

    // int64 deal_dt = 23;

    pub fn clear_deal_dt(&mut self) {
        self.deal_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_deal_dt(&mut self, v: i64) {
        self.deal_dt = v;
    }

    pub fn get_deal_dt(&self) -> i64 {
        self.deal_dt
    }

    // string portfolio = 24;

    pub fn clear_portfolio(&mut self) {
        self.portfolio.clear();
    }

    // Param is passed by value, moved
    pub fn set_portfolio(&mut self, v: ::std::string::String) {
        self.portfolio = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_portfolio(&mut self) -> &mut ::std::string::String {
        &mut self.portfolio
    }

    // Take field
    pub fn take_portfolio(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.portfolio, ::std::string::String::new())
    }

    pub fn get_portfolio(&self) -> &str {
        &self.portfolio
    }

    // string desk = 25;

    pub fn clear_desk(&mut self) {
        self.desk.clear();
    }

    // Param is passed by value, moved
    pub fn set_desk(&mut self, v: ::std::string::String) {
        self.desk = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_desk(&mut self) -> &mut ::std::string::String {
        &mut self.desk
    }

    // Take field
    pub fn take_desk(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.desk, ::std::string::String::new())
    }

    pub fn get_desk(&self) -> &str {
        &self.desk
    }

    // string acc_sec_igaap = 26;

    pub fn clear_acc_sec_igaap(&mut self) {
        self.acc_sec_igaap.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_sec_igaap(&mut self, v: ::std::string::String) {
        self.acc_sec_igaap = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_sec_igaap(&mut self) -> &mut ::std::string::String {
        &mut self.acc_sec_igaap
    }

    // Take field
    pub fn take_acc_sec_igaap(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_sec_igaap, ::std::string::String::new())
    }

    pub fn get_acc_sec_igaap(&self) -> &str {
        &self.acc_sec_igaap
    }

    // string port_typ = 27;

    pub fn clear_port_typ(&mut self) {
        self.port_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_port_typ(&mut self, v: ::std::string::String) {
        self.port_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_port_typ(&mut self) -> &mut ::std::string::String {
        &mut self.port_typ
    }

    // Take field
    pub fn take_port_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.port_typ, ::std::string::String::new())
    }

    pub fn get_port_typ(&self) -> &str {
        &self.port_typ
    }

    // double deal_ytm = 28;

    pub fn clear_deal_ytm(&mut self) {
        self.deal_ytm = 0.;
    }

    // Param is passed by value, moved
    pub fn set_deal_ytm(&mut self, v: f64) {
        self.deal_ytm = v;
    }

    pub fn get_deal_ytm(&self) -> f64 {
        self.deal_ytm
    }

    // double deal_rt = 29;

    pub fn clear_deal_rt(&mut self) {
        self.deal_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_deal_rt(&mut self, v: f64) {
        self.deal_rt = v;
    }

    pub fn get_deal_rt(&self) -> f64 {
        self.deal_rt
    }

    // string currency = 30;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // int64 os_face_val = 31;

    pub fn clear_os_face_val(&mut self) {
        self.os_face_val = 0;
    }

    // Param is passed by value, moved
    pub fn set_os_face_val(&mut self, v: i64) {
        self.os_face_val = v;
    }

    pub fn get_os_face_val(&self) -> i64 {
        self.os_face_val
    }

    // double accr_int = 32;

    pub fn clear_accr_int(&mut self) {
        self.accr_int = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accr_int(&mut self, v: f64) {
        self.accr_int = v;
    }

    pub fn get_accr_int(&self) -> f64 {
        self.accr_int
    }

    // double os_cv_before_amort = 33;

    pub fn clear_os_cv_before_amort(&mut self) {
        self.os_cv_before_amort = 0.;
    }

    // Param is passed by value, moved
    pub fn set_os_cv_before_amort(&mut self, v: f64) {
        self.os_cv_before_amort = v;
    }

    pub fn get_os_cv_before_amort(&self) -> f64 {
        self.os_cv_before_amort
    }

    // double amort_till_dt = 34;

    pub fn clear_amort_till_dt(&mut self) {
        self.amort_till_dt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amort_till_dt(&mut self, v: f64) {
        self.amort_till_dt = v;
    }

    pub fn get_amort_till_dt(&self) -> f64 {
        self.amort_till_dt
    }

    // double os_cv_after_amort = 35;

    pub fn clear_os_cv_after_amort(&mut self) {
        self.os_cv_after_amort = 0.;
    }

    // Param is passed by value, moved
    pub fn set_os_cv_after_amort(&mut self, v: f64) {
        self.os_cv_after_amort = v;
    }

    pub fn get_os_cv_after_amort(&self) -> f64 {
        self.os_cv_after_amort
    }

    // string intr_app_freq = 36;

    pub fn clear_intr_app_freq(&mut self) {
        self.intr_app_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_intr_app_freq(&mut self, v: ::std::string::String) {
        self.intr_app_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_intr_app_freq(&mut self) -> &mut ::std::string::String {
        &mut self.intr_app_freq
    }

    // Take field
    pub fn take_intr_app_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.intr_app_freq, ::std::string::String::new())
    }

    pub fn get_intr_app_freq(&self) -> &str {
        &self.intr_app_freq
    }

    // string comp_freq = 37;

    pub fn clear_comp_freq(&mut self) {
        self.comp_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_comp_freq(&mut self, v: ::std::string::String) {
        self.comp_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_comp_freq(&mut self) -> &mut ::std::string::String {
        &mut self.comp_freq
    }

    // Take field
    pub fn take_comp_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.comp_freq, ::std::string::String::new())
    }

    pub fn get_comp_freq(&self) -> &str {
        &self.comp_freq
    }

    // string intr_prac = 38;

    pub fn clear_intr_prac(&mut self) {
        self.intr_prac.clear();
    }

    // Param is passed by value, moved
    pub fn set_intr_prac(&mut self, v: ::std::string::String) {
        self.intr_prac = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_intr_prac(&mut self) -> &mut ::std::string::String {
        &mut self.intr_prac
    }

    // Take field
    pub fn take_intr_prac(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.intr_prac, ::std::string::String::new())
    }

    pub fn get_intr_prac(&self) -> &str {
        &self.intr_prac
    }

    // string rate_spread = 39;

    pub fn clear_rate_spread(&mut self) {
        self.rate_spread.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_spread(&mut self, v: ::std::string::String) {
        self.rate_spread = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_spread(&mut self) -> &mut ::std::string::String {
        &mut self.rate_spread
    }

    // Take field
    pub fn take_rate_spread(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_spread, ::std::string::String::new())
    }

    pub fn get_rate_spread(&self) -> &str {
        &self.rate_spread
    }

    // string asset_class = 40;

    pub fn clear_asset_class(&mut self) {
        self.asset_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_class(&mut self, v: ::std::string::String) {
        self.asset_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_class(&mut self) -> &mut ::std::string::String {
        &mut self.asset_class
    }

    // Take field
    pub fn take_asset_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_class, ::std::string::String::new())
    }

    pub fn get_asset_class(&self) -> &str {
        &self.asset_class
    }

    // double average_balance = 41;

    pub fn clear_average_balance(&mut self) {
        self.average_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_average_balance(&mut self, v: f64) {
        self.average_balance = v;
    }

    pub fn get_average_balance(&self) -> f64 {
        self.average_balance
    }

    // double yld_to_call = 42;

    pub fn clear_yld_to_call(&mut self) {
        self.yld_to_call = 0.;
    }

    // Param is passed by value, moved
    pub fn set_yld_to_call(&mut self, v: f64) {
        self.yld_to_call = v;
    }

    pub fn get_yld_to_call(&self) -> f64 {
        self.yld_to_call
    }

    // double int_rate = 43;

    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }

    // double base_rate = 44;

    pub fn clear_base_rate(&mut self) {
        self.base_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_rate(&mut self, v: f64) {
        self.base_rate = v;
    }

    pub fn get_base_rate(&self) -> f64 {
        self.base_rate
    }

    // double final_ftp_rate = 45;

    pub fn clear_final_ftp_rate(&mut self) {
        self.final_ftp_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_final_ftp_rate(&mut self, v: f64) {
        self.final_ftp_rate = v;
    }

    pub fn get_final_ftp_rate(&self) -> f64 {
        self.final_ftp_rate
    }

    // int64 value_date = 46;

    pub fn clear_value_date(&mut self) {
        self.value_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_date(&mut self, v: i64) {
        self.value_date = v;
    }

    pub fn get_value_date(&self) -> i64 {
        self.value_date
    }

    // int64 nxt_rep_dt = 47;

    pub fn clear_nxt_rep_dt(&mut self) {
        self.nxt_rep_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_rep_dt(&mut self, v: i64) {
        self.nxt_rep_dt = v;
    }

    pub fn get_nxt_rep_dt(&self) -> i64 {
        self.nxt_rep_dt
    }

    // int64 lst_rep_dt = 48;

    pub fn clear_lst_rep_dt(&mut self) {
        self.lst_rep_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_lst_rep_dt(&mut self, v: i64) {
        self.lst_rep_dt = v;
    }

    pub fn get_lst_rep_dt(&self) -> i64 {
        self.lst_rep_dt
    }

    // string mis1 = 49;

    pub fn clear_mis1(&mut self) {
        self.mis1.clear();
    }

    // Param is passed by value, moved
    pub fn set_mis1(&mut self, v: ::std::string::String) {
        self.mis1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mis1(&mut self) -> &mut ::std::string::String {
        &mut self.mis1
    }

    // Take field
    pub fn take_mis1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mis1, ::std::string::String::new())
    }

    pub fn get_mis1(&self) -> &str {
        &self.mis1
    }

    // string mis2 = 50;

    pub fn clear_mis2(&mut self) {
        self.mis2.clear();
    }

    // Param is passed by value, moved
    pub fn set_mis2(&mut self, v: ::std::string::String) {
        self.mis2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mis2(&mut self) -> &mut ::std::string::String {
        &mut self.mis2
    }

    // Take field
    pub fn take_mis2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mis2, ::std::string::String::new())
    }

    pub fn get_mis2(&self) -> &str {
        &self.mis2
    }

    // string psl_code = 51;

    pub fn clear_psl_code(&mut self) {
        self.psl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_psl_code(&mut self, v: ::std::string::String) {
        self.psl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_psl_code(&mut self) -> &mut ::std::string::String {
        &mut self.psl_code
    }

    // Take field
    pub fn take_psl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.psl_code, ::std::string::String::new())
    }

    pub fn get_psl_code(&self) -> &str {
        &self.psl_code
    }

    // string prod_type = 52;

    pub fn clear_prod_type(&mut self) {
        self.prod_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_type(&mut self, v: ::std::string::String) {
        self.prod_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_type(&mut self) -> &mut ::std::string::String {
        &mut self.prod_type
    }

    // Take field
    pub fn take_prod_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_type, ::std::string::String::new())
    }

    pub fn get_prod_type(&self) -> &str {
        &self.prod_type
    }

    // string rate_flag = 53;

    pub fn clear_rate_flag(&mut self) {
        self.rate_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_flag(&mut self, v: ::std::string::String) {
        self.rate_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_flag(&mut self) -> &mut ::std::string::String {
        &mut self.rate_flag
    }

    // Take field
    pub fn take_rate_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_flag, ::std::string::String::new())
    }

    pub fn get_rate_flag(&self) -> &str {
        &self.rate_flag
    }

    // string branch = 54;

    pub fn clear_branch(&mut self) {
        self.branch.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch(&mut self, v: ::std::string::String) {
        self.branch = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch(&mut self) -> &mut ::std::string::String {
        &mut self.branch
    }

    // Take field
    pub fn take_branch(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch, ::std::string::String::new())
    }

    pub fn get_branch(&self) -> &str {
        &self.branch
    }

    // string source_file_name = 55;

    pub fn clear_source_file_name(&mut self) {
        self.source_file_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_file_name(&mut self, v: ::std::string::String) {
        self.source_file_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_file_name(&mut self) -> &mut ::std::string::String {
        &mut self.source_file_name
    }

    // Take field
    pub fn take_source_file_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source_file_name, ::std::string::String::new())
    }

    pub fn get_source_file_name(&self) -> &str {
        &self.source_file_name
    }

    // string gl = 56;

    pub fn clear_gl(&mut self) {
        self.gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl(&mut self, v: ::std::string::String) {
        self.gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl(&mut self) -> &mut ::std::string::String {
        &mut self.gl
    }

    // Take field
    pub fn take_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl, ::std::string::String::new())
    }

    pub fn get_gl(&self) -> &str {
        &self.gl
    }

    // string cust_id = 57;

    pub fn clear_cust_id(&mut self) {
        self.cust_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: ::std::string::String) {
        self.cust_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_id
    }

    // Take field
    pub fn take_cust_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_id, ::std::string::String::new())
    }

    pub fn get_cust_id(&self) -> &str {
        &self.cust_id
    }

    // double final_ftp_amt = 58;

    pub fn clear_final_ftp_amt(&mut self) {
        self.final_ftp_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_final_ftp_amt(&mut self, v: f64) {
        self.final_ftp_amt = v;
    }

    pub fn get_final_ftp_amt(&self) -> f64 {
        self.final_ftp_amt
    }

    // string alm_line = 59;

    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }

    // string trade_dt = 60;

    pub fn clear_trade_dt(&mut self) {
        self.trade_dt.clear();
    }

    // Param is passed by value, moved
    pub fn set_trade_dt(&mut self, v: ::std::string::String) {
        self.trade_dt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trade_dt(&mut self) -> &mut ::std::string::String {
        &mut self.trade_dt
    }

    // Take field
    pub fn take_trade_dt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trade_dt, ::std::string::String::new())
    }

    pub fn get_trade_dt(&self) -> &str {
        &self.trade_dt
    }

    // double orig_bal = 61;

    pub fn clear_orig_bal(&mut self) {
        self.orig_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_orig_bal(&mut self, v: f64) {
        self.orig_bal = v;
    }

    pub fn get_orig_bal(&self) -> f64 {
        self.orig_bal
    }

    // double outstanding_bal = 62;

    pub fn clear_outstanding_bal(&mut self) {
        self.outstanding_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_outstanding_bal(&mut self, v: f64) {
        self.outstanding_bal = v;
    }

    pub fn get_outstanding_bal(&self) -> f64 {
        self.outstanding_bal
    }

    // double adj1 = 63;

    pub fn clear_adj1(&mut self) {
        self.adj1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj1(&mut self, v: f64) {
        self.adj1 = v;
    }

    pub fn get_adj1(&self) -> f64 {
        self.adj1
    }

    // double adj2 = 64;

    pub fn clear_adj2(&mut self) {
        self.adj2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj2(&mut self, v: f64) {
        self.adj2 = v;
    }

    pub fn get_adj2(&self) -> f64 {
        self.adj2
    }

    // double adj3 = 65;

    pub fn clear_adj3(&mut self) {
        self.adj3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj3(&mut self, v: f64) {
        self.adj3 = v;
    }

    pub fn get_adj3(&self) -> f64 {
        self.adj3
    }

    // double adj4 = 66;

    pub fn clear_adj4(&mut self) {
        self.adj4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj4(&mut self, v: f64) {
        self.adj4 = v;
    }

    pub fn get_adj4(&self) -> f64 {
        self.adj4
    }

    // double adj5 = 67;

    pub fn clear_adj5(&mut self) {
        self.adj5 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj5(&mut self, v: f64) {
        self.adj5 = v;
    }

    pub fn get_adj5(&self) -> f64 {
        self.adj5
    }

    // double adj6 = 68;

    pub fn clear_adj6(&mut self) {
        self.adj6 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj6(&mut self, v: f64) {
        self.adj6 = v;
    }

    pub fn get_adj6(&self) -> f64 {
        self.adj6
    }

    // string liquidity_premia = 69;

    pub fn clear_liquidity_premia(&mut self) {
        self.liquidity_premia.clear();
    }

    // Param is passed by value, moved
    pub fn set_liquidity_premia(&mut self, v: ::std::string::String) {
        self.liquidity_premia = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_liquidity_premia(&mut self) -> &mut ::std::string::String {
        &mut self.liquidity_premia
    }

    // Take field
    pub fn take_liquidity_premia(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.liquidity_premia, ::std::string::String::new())
    }

    pub fn get_liquidity_premia(&self) -> &str {
        &self.liquidity_premia
    }

    // string psl_charge = 70;

    pub fn clear_psl_charge(&mut self) {
        self.psl_charge.clear();
    }

    // Param is passed by value, moved
    pub fn set_psl_charge(&mut self, v: ::std::string::String) {
        self.psl_charge = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_psl_charge(&mut self) -> &mut ::std::string::String {
        &mut self.psl_charge
    }

    // Take field
    pub fn take_psl_charge(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.psl_charge, ::std::string::String::new())
    }

    pub fn get_psl_charge(&self) -> &str {
        &self.psl_charge
    }

    // string input_benchmark = 71;

    pub fn clear_input_benchmark(&mut self) {
        self.input_benchmark.clear();
    }

    // Param is passed by value, moved
    pub fn set_input_benchmark(&mut self, v: ::std::string::String) {
        self.input_benchmark = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_input_benchmark(&mut self) -> &mut ::std::string::String {
        &mut self.input_benchmark
    }

    // Take field
    pub fn take_input_benchmark(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.input_benchmark, ::std::string::String::new())
    }

    pub fn get_input_benchmark(&self) -> &str {
        &self.input_benchmark
    }

    // string pdo = 72;

    pub fn clear_pdo(&mut self) {
        self.pdo.clear();
    }

    // Param is passed by value, moved
    pub fn set_pdo(&mut self, v: ::std::string::String) {
        self.pdo = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pdo(&mut self) -> &mut ::std::string::String {
        &mut self.pdo
    }

    // Take field
    pub fn take_pdo(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pdo, ::std::string::String::new())
    }

    pub fn get_pdo(&self) -> &str {
        &self.pdo
    }

    // string npl = 73;

    pub fn clear_npl(&mut self) {
        self.npl.clear();
    }

    // Param is passed by value, moved
    pub fn set_npl(&mut self, v: ::std::string::String) {
        self.npl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npl(&mut self) -> &mut ::std::string::String {
        &mut self.npl
    }

    // Take field
    pub fn take_npl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npl, ::std::string::String::new())
    }

    pub fn get_npl(&self) -> &str {
        &self.npl
    }

    // string specific_provision = 74;

    pub fn clear_specific_provision(&mut self) {
        self.specific_provision.clear();
    }

    // Param is passed by value, moved
    pub fn set_specific_provision(&mut self, v: ::std::string::String) {
        self.specific_provision = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_specific_provision(&mut self) -> &mut ::std::string::String {
        &mut self.specific_provision
    }

    // Take field
    pub fn take_specific_provision(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.specific_provision, ::std::string::String::new())
    }

    pub fn get_specific_provision(&self) -> &str {
        &self.specific_provision
    }

    // string method = 75;

    pub fn clear_method(&mut self) {
        self.method.clear();
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: ::std::string::String) {
        self.method = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method(&mut self) -> &mut ::std::string::String {
        &mut self.method
    }

    // Take field
    pub fn take_method(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.method, ::std::string::String::new())
    }

    pub fn get_method(&self) -> &str {
        &self.method
    }

    // string rate_curve = 76;

    pub fn clear_rate_curve(&mut self) {
        self.rate_curve.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_curve(&mut self, v: ::std::string::String) {
        self.rate_curve = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_curve(&mut self) -> &mut ::std::string::String {
        &mut self.rate_curve
    }

    // Take field
    pub fn take_rate_curve(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_curve, ::std::string::String::new())
    }

    pub fn get_rate_curve(&self) -> &str {
        &self.rate_curve
    }

    // int64 org_tenor = 77;

    pub fn clear_org_tenor(&mut self) {
        self.org_tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_org_tenor(&mut self, v: i64) {
        self.org_tenor = v;
    }

    pub fn get_org_tenor(&self) -> i64 {
        self.org_tenor
    }

    // int64 rep_tenor = 78;

    pub fn clear_rep_tenor(&mut self) {
        self.rep_tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_rep_tenor(&mut self, v: i64) {
        self.rep_tenor = v;
    }

    pub fn get_rep_tenor(&self) -> i64 {
        self.rep_tenor
    }

    // double fx_spread = 79;

    pub fn clear_fx_spread(&mut self) {
        self.fx_spread = 0.;
    }

    // Param is passed by value, moved
    pub fn set_fx_spread(&mut self, v: f64) {
        self.fx_spread = v;
    }

    pub fn get_fx_spread(&self) -> f64 {
        self.fx_spread
    }

    // double var_spread = 80;

    pub fn clear_var_spread(&mut self) {
        self.var_spread = 0.;
    }

    // Param is passed by value, moved
    pub fn set_var_spread(&mut self, v: f64) {
        self.var_spread = v;
    }

    pub fn get_var_spread(&self) -> f64 {
        self.var_spread
    }

    // double first_ftp = 81;

    pub fn clear_first_ftp(&mut self) {
        self.first_ftp = 0.;
    }

    // Param is passed by value, moved
    pub fn set_first_ftp(&mut self, v: f64) {
        self.first_ftp = v;
    }

    pub fn get_first_ftp(&self) -> f64 {
        self.first_ftp
    }

    // int64 bc_as_on_rule = 82;

    pub fn clear_bc_as_on_rule(&mut self) {
        self.bc_as_on_rule = 0;
    }

    // Param is passed by value, moved
    pub fn set_bc_as_on_rule(&mut self, v: i64) {
        self.bc_as_on_rule = v;
    }

    pub fn get_bc_as_on_rule(&self) -> i64 {
        self.bc_as_on_rule
    }

    // int64 tenor_start_date_rule = 83;

    pub fn clear_tenor_start_date_rule(&mut self) {
        self.tenor_start_date_rule = 0;
    }

    // Param is passed by value, moved
    pub fn set_tenor_start_date_rule(&mut self, v: i64) {
        self.tenor_start_date_rule = v;
    }

    pub fn get_tenor_start_date_rule(&self) -> i64 {
        self.tenor_start_date_rule
    }

    // int64 tenor_end_date_rule = 84;

    pub fn clear_tenor_end_date_rule(&mut self) {
        self.tenor_end_date_rule = 0;
    }

    // Param is passed by value, moved
    pub fn set_tenor_end_date_rule(&mut self, v: i64) {
        self.tenor_end_date_rule = v;
    }

    pub fn get_tenor_end_date_rule(&self) -> i64 {
        self.tenor_end_date_rule
    }

    // int64 bc_as_on_applied = 85;

    pub fn clear_bc_as_on_applied(&mut self) {
        self.bc_as_on_applied = 0;
    }

    // Param is passed by value, moved
    pub fn set_bc_as_on_applied(&mut self, v: i64) {
        self.bc_as_on_applied = v;
    }

    pub fn get_bc_as_on_applied(&self) -> i64 {
        self.bc_as_on_applied
    }

    // int64 tenor_start_date_applied = 86;

    pub fn clear_tenor_start_date_applied(&mut self) {
        self.tenor_start_date_applied = 0;
    }

    // Param is passed by value, moved
    pub fn set_tenor_start_date_applied(&mut self, v: i64) {
        self.tenor_start_date_applied = v;
    }

    pub fn get_tenor_start_date_applied(&self) -> i64 {
        self.tenor_start_date_applied
    }

    // int64 tenor_end_date_applied = 87;

    pub fn clear_tenor_end_date_applied(&mut self) {
        self.tenor_end_date_applied = 0;
    }

    // Param is passed by value, moved
    pub fn set_tenor_end_date_applied(&mut self, v: i64) {
        self.tenor_end_date_applied = v;
    }

    pub fn get_tenor_end_date_applied(&self) -> i64 {
        self.tenor_end_date_applied
    }
}

impl ::protobuf::Message for One_acc_view {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.entity)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_no)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_no)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.isin)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instr_id)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent_code)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.short_name)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer_name)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.intr_typ)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.sec_issuance_date = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coupon)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_intr_dt = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_intr_dt = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_repricing_dt = tmp;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rating)?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.call_dt = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.put_dt = tmp;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tax_status)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_desc)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.slr_nslr)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deal_dt = tmp;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.portfolio)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.desk)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_sec_igaap)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.port_typ)?;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.deal_ytm = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.deal_rt = tmp;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.os_face_val = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.accr_int = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.os_cv_before_amort = tmp;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amort_till_dt = tmp;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.os_cv_after_amort = tmp;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.intr_app_freq)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.comp_freq)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.intr_prac)?;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_spread)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_class)?;
                },
                41 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.average_balance = tmp;
                },
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.yld_to_call = tmp;
                },
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                44 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.base_rate = tmp;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.final_ftp_rate = tmp;
                },
                46 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.value_date = tmp;
                },
                47 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_rep_dt = tmp;
                },
                48 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lst_rep_dt = tmp;
                },
                49 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mis1)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mis2)?;
                },
                51 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.psl_code)?;
                },
                52 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_type)?;
                },
                53 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_flag)?;
                },
                54 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch)?;
                },
                55 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source_file_name)?;
                },
                56 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl)?;
                },
                57 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_id)?;
                },
                58 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.final_ftp_amt = tmp;
                },
                59 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alm_line)?;
                },
                60 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trade_dt)?;
                },
                61 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.orig_bal = tmp;
                },
                62 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.outstanding_bal = tmp;
                },
                63 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj1 = tmp;
                },
                64 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj2 = tmp;
                },
                65 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj3 = tmp;
                },
                66 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj4 = tmp;
                },
                67 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj5 = tmp;
                },
                68 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj6 = tmp;
                },
                69 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.liquidity_premia)?;
                },
                70 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.psl_charge)?;
                },
                71 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.input_benchmark)?;
                },
                72 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pdo)?;
                },
                73 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npl)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.specific_provision)?;
                },
                75 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.method)?;
                },
                76 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_curve)?;
                },
                77 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.org_tenor = tmp;
                },
                78 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rep_tenor = tmp;
                },
                79 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.fx_spread = tmp;
                },
                80 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.var_spread = tmp;
                },
                81 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.first_ftp = tmp;
                },
                82 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.bc_as_on_rule = tmp;
                },
                83 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tenor_start_date_rule = tmp;
                },
                84 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tenor_end_date_rule = tmp;
                },
                85 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.bc_as_on_applied = tmp;
                },
                86 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tenor_start_date_applied = tmp;
                },
                87 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tenor_end_date_applied = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.entity.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.entity);
        }
        if !self.deal_no.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.deal_no);
        }
        if !self.contract_no.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.contract_no);
        }
        if !self.isin.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.isin);
        }
        if !self.instr_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.instr_id);
        }
        if !self.parent_code.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.parent_code);
        }
        if !self.short_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.short_name);
        }
        if !self.issuer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.issuer_name);
        }
        if !self.intr_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.intr_typ);
        }
        if self.sec_issuance_date != 0 {
            my_size += ::protobuf::rt::value_size(10, self.sec_issuance_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.coupon.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.coupon);
        }
        if self.last_intr_dt != 0 {
            my_size += ::protobuf::rt::value_size(12, self.last_intr_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_intr_dt != 0 {
            my_size += ::protobuf::rt::value_size(13, self.next_intr_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.nxt_repricing_dt != 0 {
            my_size += ::protobuf::rt::value_size(14, self.nxt_repricing_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.rating.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.rating);
        }
        if self.mat_dt != 0 {
            my_size += ::protobuf::rt::value_size(16, self.mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.call_dt != 0 {
            my_size += ::protobuf::rt::value_size(17, self.call_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.put_dt != 0 {
            my_size += ::protobuf::rt::value_size(18, self.put_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.tax_status.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.tax_status);
        }
        if !self.product.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.product);
        }
        if !self.prod_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.prod_desc);
        }
        if !self.slr_nslr.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.slr_nslr);
        }
        if self.deal_dt != 0 {
            my_size += ::protobuf::rt::value_size(23, self.deal_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.portfolio.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.portfolio);
        }
        if !self.desk.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.desk);
        }
        if !self.acc_sec_igaap.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.acc_sec_igaap);
        }
        if !self.port_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.port_typ);
        }
        if self.deal_ytm != 0. {
            my_size += 10;
        }
        if self.deal_rt != 0. {
            my_size += 10;
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.currency);
        }
        if self.os_face_val != 0 {
            my_size += ::protobuf::rt::value_size(31, self.os_face_val, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.accr_int != 0. {
            my_size += 10;
        }
        if self.os_cv_before_amort != 0. {
            my_size += 10;
        }
        if self.amort_till_dt != 0. {
            my_size += 10;
        }
        if self.os_cv_after_amort != 0. {
            my_size += 10;
        }
        if !self.intr_app_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.intr_app_freq);
        }
        if !self.comp_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.comp_freq);
        }
        if !self.intr_prac.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.intr_prac);
        }
        if !self.rate_spread.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.rate_spread);
        }
        if !self.asset_class.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.asset_class);
        }
        if self.average_balance != 0. {
            my_size += 10;
        }
        if self.yld_to_call != 0. {
            my_size += 10;
        }
        if self.int_rate != 0. {
            my_size += 10;
        }
        if self.base_rate != 0. {
            my_size += 10;
        }
        if self.final_ftp_rate != 0. {
            my_size += 10;
        }
        if self.value_date != 0 {
            my_size += ::protobuf::rt::value_size(46, self.value_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.nxt_rep_dt != 0 {
            my_size += ::protobuf::rt::value_size(47, self.nxt_rep_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lst_rep_dt != 0 {
            my_size += ::protobuf::rt::value_size(48, self.lst_rep_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.mis1.is_empty() {
            my_size += ::protobuf::rt::string_size(49, &self.mis1);
        }
        if !self.mis2.is_empty() {
            my_size += ::protobuf::rt::string_size(50, &self.mis2);
        }
        if !self.psl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(51, &self.psl_code);
        }
        if !self.prod_type.is_empty() {
            my_size += ::protobuf::rt::string_size(52, &self.prod_type);
        }
        if !self.rate_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(53, &self.rate_flag);
        }
        if !self.branch.is_empty() {
            my_size += ::protobuf::rt::string_size(54, &self.branch);
        }
        if !self.source_file_name.is_empty() {
            my_size += ::protobuf::rt::string_size(55, &self.source_file_name);
        }
        if !self.gl.is_empty() {
            my_size += ::protobuf::rt::string_size(56, &self.gl);
        }
        if !self.cust_id.is_empty() {
            my_size += ::protobuf::rt::string_size(57, &self.cust_id);
        }
        if self.final_ftp_amt != 0. {
            my_size += 10;
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(59, &self.alm_line);
        }
        if !self.trade_dt.is_empty() {
            my_size += ::protobuf::rt::string_size(60, &self.trade_dt);
        }
        if self.orig_bal != 0. {
            my_size += 10;
        }
        if self.outstanding_bal != 0. {
            my_size += 10;
        }
        if self.adj1 != 0. {
            my_size += 10;
        }
        if self.adj2 != 0. {
            my_size += 10;
        }
        if self.adj3 != 0. {
            my_size += 10;
        }
        if self.adj4 != 0. {
            my_size += 10;
        }
        if self.adj5 != 0. {
            my_size += 10;
        }
        if self.adj6 != 0. {
            my_size += 10;
        }
        if !self.liquidity_premia.is_empty() {
            my_size += ::protobuf::rt::string_size(69, &self.liquidity_premia);
        }
        if !self.psl_charge.is_empty() {
            my_size += ::protobuf::rt::string_size(70, &self.psl_charge);
        }
        if !self.input_benchmark.is_empty() {
            my_size += ::protobuf::rt::string_size(71, &self.input_benchmark);
        }
        if !self.pdo.is_empty() {
            my_size += ::protobuf::rt::string_size(72, &self.pdo);
        }
        if !self.npl.is_empty() {
            my_size += ::protobuf::rt::string_size(73, &self.npl);
        }
        if !self.specific_provision.is_empty() {
            my_size += ::protobuf::rt::string_size(74, &self.specific_provision);
        }
        if !self.method.is_empty() {
            my_size += ::protobuf::rt::string_size(75, &self.method);
        }
        if !self.rate_curve.is_empty() {
            my_size += ::protobuf::rt::string_size(76, &self.rate_curve);
        }
        if self.org_tenor != 0 {
            my_size += ::protobuf::rt::value_size(77, self.org_tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rep_tenor != 0 {
            my_size += ::protobuf::rt::value_size(78, self.rep_tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fx_spread != 0. {
            my_size += 10;
        }
        if self.var_spread != 0. {
            my_size += 10;
        }
        if self.first_ftp != 0. {
            my_size += 10;
        }
        if self.bc_as_on_rule != 0 {
            my_size += ::protobuf::rt::value_size(82, self.bc_as_on_rule, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tenor_start_date_rule != 0 {
            my_size += ::protobuf::rt::value_size(83, self.tenor_start_date_rule, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tenor_end_date_rule != 0 {
            my_size += ::protobuf::rt::value_size(84, self.tenor_end_date_rule, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bc_as_on_applied != 0 {
            my_size += ::protobuf::rt::value_size(85, self.bc_as_on_applied, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tenor_start_date_applied != 0 {
            my_size += ::protobuf::rt::value_size(86, self.tenor_start_date_applied, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tenor_end_date_applied != 0 {
            my_size += ::protobuf::rt::value_size(87, self.tenor_end_date_applied, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.entity.is_empty() {
            os.write_string(1, &self.entity)?;
        }
        if !self.deal_no.is_empty() {
            os.write_string(2, &self.deal_no)?;
        }
        if !self.contract_no.is_empty() {
            os.write_string(3, &self.contract_no)?;
        }
        if !self.isin.is_empty() {
            os.write_string(4, &self.isin)?;
        }
        if !self.instr_id.is_empty() {
            os.write_string(5, &self.instr_id)?;
        }
        if !self.parent_code.is_empty() {
            os.write_string(6, &self.parent_code)?;
        }
        if !self.short_name.is_empty() {
            os.write_string(7, &self.short_name)?;
        }
        if !self.issuer_name.is_empty() {
            os.write_string(8, &self.issuer_name)?;
        }
        if !self.intr_typ.is_empty() {
            os.write_string(9, &self.intr_typ)?;
        }
        if self.sec_issuance_date != 0 {
            os.write_int64(10, self.sec_issuance_date)?;
        }
        if !self.coupon.is_empty() {
            os.write_string(11, &self.coupon)?;
        }
        if self.last_intr_dt != 0 {
            os.write_int64(12, self.last_intr_dt)?;
        }
        if self.next_intr_dt != 0 {
            os.write_int64(13, self.next_intr_dt)?;
        }
        if self.nxt_repricing_dt != 0 {
            os.write_int64(14, self.nxt_repricing_dt)?;
        }
        if !self.rating.is_empty() {
            os.write_string(15, &self.rating)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(16, self.mat_dt)?;
        }
        if self.call_dt != 0 {
            os.write_int64(17, self.call_dt)?;
        }
        if self.put_dt != 0 {
            os.write_int64(18, self.put_dt)?;
        }
        if !self.tax_status.is_empty() {
            os.write_string(19, &self.tax_status)?;
        }
        if !self.product.is_empty() {
            os.write_string(20, &self.product)?;
        }
        if !self.prod_desc.is_empty() {
            os.write_string(21, &self.prod_desc)?;
        }
        if !self.slr_nslr.is_empty() {
            os.write_string(22, &self.slr_nslr)?;
        }
        if self.deal_dt != 0 {
            os.write_int64(23, self.deal_dt)?;
        }
        if !self.portfolio.is_empty() {
            os.write_string(24, &self.portfolio)?;
        }
        if !self.desk.is_empty() {
            os.write_string(25, &self.desk)?;
        }
        if !self.acc_sec_igaap.is_empty() {
            os.write_string(26, &self.acc_sec_igaap)?;
        }
        if !self.port_typ.is_empty() {
            os.write_string(27, &self.port_typ)?;
        }
        if self.deal_ytm != 0. {
            os.write_double(28, self.deal_ytm)?;
        }
        if self.deal_rt != 0. {
            os.write_double(29, self.deal_rt)?;
        }
        if !self.currency.is_empty() {
            os.write_string(30, &self.currency)?;
        }
        if self.os_face_val != 0 {
            os.write_int64(31, self.os_face_val)?;
        }
        if self.accr_int != 0. {
            os.write_double(32, self.accr_int)?;
        }
        if self.os_cv_before_amort != 0. {
            os.write_double(33, self.os_cv_before_amort)?;
        }
        if self.amort_till_dt != 0. {
            os.write_double(34, self.amort_till_dt)?;
        }
        if self.os_cv_after_amort != 0. {
            os.write_double(35, self.os_cv_after_amort)?;
        }
        if !self.intr_app_freq.is_empty() {
            os.write_string(36, &self.intr_app_freq)?;
        }
        if !self.comp_freq.is_empty() {
            os.write_string(37, &self.comp_freq)?;
        }
        if !self.intr_prac.is_empty() {
            os.write_string(38, &self.intr_prac)?;
        }
        if !self.rate_spread.is_empty() {
            os.write_string(39, &self.rate_spread)?;
        }
        if !self.asset_class.is_empty() {
            os.write_string(40, &self.asset_class)?;
        }
        if self.average_balance != 0. {
            os.write_double(41, self.average_balance)?;
        }
        if self.yld_to_call != 0. {
            os.write_double(42, self.yld_to_call)?;
        }
        if self.int_rate != 0. {
            os.write_double(43, self.int_rate)?;
        }
        if self.base_rate != 0. {
            os.write_double(44, self.base_rate)?;
        }
        if self.final_ftp_rate != 0. {
            os.write_double(45, self.final_ftp_rate)?;
        }
        if self.value_date != 0 {
            os.write_int64(46, self.value_date)?;
        }
        if self.nxt_rep_dt != 0 {
            os.write_int64(47, self.nxt_rep_dt)?;
        }
        if self.lst_rep_dt != 0 {
            os.write_int64(48, self.lst_rep_dt)?;
        }
        if !self.mis1.is_empty() {
            os.write_string(49, &self.mis1)?;
        }
        if !self.mis2.is_empty() {
            os.write_string(50, &self.mis2)?;
        }
        if !self.psl_code.is_empty() {
            os.write_string(51, &self.psl_code)?;
        }
        if !self.prod_type.is_empty() {
            os.write_string(52, &self.prod_type)?;
        }
        if !self.rate_flag.is_empty() {
            os.write_string(53, &self.rate_flag)?;
        }
        if !self.branch.is_empty() {
            os.write_string(54, &self.branch)?;
        }
        if !self.source_file_name.is_empty() {
            os.write_string(55, &self.source_file_name)?;
        }
        if !self.gl.is_empty() {
            os.write_string(56, &self.gl)?;
        }
        if !self.cust_id.is_empty() {
            os.write_string(57, &self.cust_id)?;
        }
        if self.final_ftp_amt != 0. {
            os.write_double(58, self.final_ftp_amt)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(59, &self.alm_line)?;
        }
        if !self.trade_dt.is_empty() {
            os.write_string(60, &self.trade_dt)?;
        }
        if self.orig_bal != 0. {
            os.write_double(61, self.orig_bal)?;
        }
        if self.outstanding_bal != 0. {
            os.write_double(62, self.outstanding_bal)?;
        }
        if self.adj1 != 0. {
            os.write_double(63, self.adj1)?;
        }
        if self.adj2 != 0. {
            os.write_double(64, self.adj2)?;
        }
        if self.adj3 != 0. {
            os.write_double(65, self.adj3)?;
        }
        if self.adj4 != 0. {
            os.write_double(66, self.adj4)?;
        }
        if self.adj5 != 0. {
            os.write_double(67, self.adj5)?;
        }
        if self.adj6 != 0. {
            os.write_double(68, self.adj6)?;
        }
        if !self.liquidity_premia.is_empty() {
            os.write_string(69, &self.liquidity_premia)?;
        }
        if !self.psl_charge.is_empty() {
            os.write_string(70, &self.psl_charge)?;
        }
        if !self.input_benchmark.is_empty() {
            os.write_string(71, &self.input_benchmark)?;
        }
        if !self.pdo.is_empty() {
            os.write_string(72, &self.pdo)?;
        }
        if !self.npl.is_empty() {
            os.write_string(73, &self.npl)?;
        }
        if !self.specific_provision.is_empty() {
            os.write_string(74, &self.specific_provision)?;
        }
        if !self.method.is_empty() {
            os.write_string(75, &self.method)?;
        }
        if !self.rate_curve.is_empty() {
            os.write_string(76, &self.rate_curve)?;
        }
        if self.org_tenor != 0 {
            os.write_int64(77, self.org_tenor)?;
        }
        if self.rep_tenor != 0 {
            os.write_int64(78, self.rep_tenor)?;
        }
        if self.fx_spread != 0. {
            os.write_double(79, self.fx_spread)?;
        }
        if self.var_spread != 0. {
            os.write_double(80, self.var_spread)?;
        }
        if self.first_ftp != 0. {
            os.write_double(81, self.first_ftp)?;
        }
        if self.bc_as_on_rule != 0 {
            os.write_int64(82, self.bc_as_on_rule)?;
        }
        if self.tenor_start_date_rule != 0 {
            os.write_int64(83, self.tenor_start_date_rule)?;
        }
        if self.tenor_end_date_rule != 0 {
            os.write_int64(84, self.tenor_end_date_rule)?;
        }
        if self.bc_as_on_applied != 0 {
            os.write_int64(85, self.bc_as_on_applied)?;
        }
        if self.tenor_start_date_applied != 0 {
            os.write_int64(86, self.tenor_start_date_applied)?;
        }
        if self.tenor_end_date_applied != 0 {
            os.write_int64(87, self.tenor_end_date_applied)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> One_acc_view {
        One_acc_view::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "entity",
                    |m: &One_acc_view| { &m.entity },
                    |m: &mut One_acc_view| { &mut m.entity },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_no",
                    |m: &One_acc_view| { &m.deal_no },
                    |m: &mut One_acc_view| { &mut m.deal_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "contract_no",
                    |m: &One_acc_view| { &m.contract_no },
                    |m: &mut One_acc_view| { &mut m.contract_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "isin",
                    |m: &One_acc_view| { &m.isin },
                    |m: &mut One_acc_view| { &mut m.isin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "instr_id",
                    |m: &One_acc_view| { &m.instr_id },
                    |m: &mut One_acc_view| { &mut m.instr_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "parent_code",
                    |m: &One_acc_view| { &m.parent_code },
                    |m: &mut One_acc_view| { &mut m.parent_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "short_name",
                    |m: &One_acc_view| { &m.short_name },
                    |m: &mut One_acc_view| { &mut m.short_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "issuer_name",
                    |m: &One_acc_view| { &m.issuer_name },
                    |m: &mut One_acc_view| { &mut m.issuer_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "intr_typ",
                    |m: &One_acc_view| { &m.intr_typ },
                    |m: &mut One_acc_view| { &mut m.intr_typ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "sec_issuance_date",
                    |m: &One_acc_view| { &m.sec_issuance_date },
                    |m: &mut One_acc_view| { &mut m.sec_issuance_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "coupon",
                    |m: &One_acc_view| { &m.coupon },
                    |m: &mut One_acc_view| { &mut m.coupon },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "last_intr_dt",
                    |m: &One_acc_view| { &m.last_intr_dt },
                    |m: &mut One_acc_view| { &mut m.last_intr_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "next_intr_dt",
                    |m: &One_acc_view| { &m.next_intr_dt },
                    |m: &mut One_acc_view| { &mut m.next_intr_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "nxt_repricing_dt",
                    |m: &One_acc_view| { &m.nxt_repricing_dt },
                    |m: &mut One_acc_view| { &mut m.nxt_repricing_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rating",
                    |m: &One_acc_view| { &m.rating },
                    |m: &mut One_acc_view| { &mut m.rating },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "mat_dt",
                    |m: &One_acc_view| { &m.mat_dt },
                    |m: &mut One_acc_view| { &mut m.mat_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "call_dt",
                    |m: &One_acc_view| { &m.call_dt },
                    |m: &mut One_acc_view| { &mut m.call_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "put_dt",
                    |m: &One_acc_view| { &m.put_dt },
                    |m: &mut One_acc_view| { &mut m.put_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "tax_status",
                    |m: &One_acc_view| { &m.tax_status },
                    |m: &mut One_acc_view| { &mut m.tax_status },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "product",
                    |m: &One_acc_view| { &m.product },
                    |m: &mut One_acc_view| { &mut m.product },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "prod_desc",
                    |m: &One_acc_view| { &m.prod_desc },
                    |m: &mut One_acc_view| { &mut m.prod_desc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "slr_nslr",
                    |m: &One_acc_view| { &m.slr_nslr },
                    |m: &mut One_acc_view| { &mut m.slr_nslr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "deal_dt",
                    |m: &One_acc_view| { &m.deal_dt },
                    |m: &mut One_acc_view| { &mut m.deal_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "portfolio",
                    |m: &One_acc_view| { &m.portfolio },
                    |m: &mut One_acc_view| { &mut m.portfolio },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "desk",
                    |m: &One_acc_view| { &m.desk },
                    |m: &mut One_acc_view| { &mut m.desk },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acc_sec_igaap",
                    |m: &One_acc_view| { &m.acc_sec_igaap },
                    |m: &mut One_acc_view| { &mut m.acc_sec_igaap },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "port_typ",
                    |m: &One_acc_view| { &m.port_typ },
                    |m: &mut One_acc_view| { &mut m.port_typ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "deal_ytm",
                    |m: &One_acc_view| { &m.deal_ytm },
                    |m: &mut One_acc_view| { &mut m.deal_ytm },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "deal_rt",
                    |m: &One_acc_view| { &m.deal_rt },
                    |m: &mut One_acc_view| { &mut m.deal_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &One_acc_view| { &m.currency },
                    |m: &mut One_acc_view| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "os_face_val",
                    |m: &One_acc_view| { &m.os_face_val },
                    |m: &mut One_acc_view| { &mut m.os_face_val },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "accr_int",
                    |m: &One_acc_view| { &m.accr_int },
                    |m: &mut One_acc_view| { &mut m.accr_int },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "os_cv_before_amort",
                    |m: &One_acc_view| { &m.os_cv_before_amort },
                    |m: &mut One_acc_view| { &mut m.os_cv_before_amort },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "amort_till_dt",
                    |m: &One_acc_view| { &m.amort_till_dt },
                    |m: &mut One_acc_view| { &mut m.amort_till_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "os_cv_after_amort",
                    |m: &One_acc_view| { &m.os_cv_after_amort },
                    |m: &mut One_acc_view| { &mut m.os_cv_after_amort },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "intr_app_freq",
                    |m: &One_acc_view| { &m.intr_app_freq },
                    |m: &mut One_acc_view| { &mut m.intr_app_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "comp_freq",
                    |m: &One_acc_view| { &m.comp_freq },
                    |m: &mut One_acc_view| { &mut m.comp_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "intr_prac",
                    |m: &One_acc_view| { &m.intr_prac },
                    |m: &mut One_acc_view| { &mut m.intr_prac },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rate_spread",
                    |m: &One_acc_view| { &m.rate_spread },
                    |m: &mut One_acc_view| { &mut m.rate_spread },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "asset_class",
                    |m: &One_acc_view| { &m.asset_class },
                    |m: &mut One_acc_view| { &mut m.asset_class },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "average_balance",
                    |m: &One_acc_view| { &m.average_balance },
                    |m: &mut One_acc_view| { &mut m.average_balance },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "yld_to_call",
                    |m: &One_acc_view| { &m.yld_to_call },
                    |m: &mut One_acc_view| { &mut m.yld_to_call },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rate",
                    |m: &One_acc_view| { &m.int_rate },
                    |m: &mut One_acc_view| { &mut m.int_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "base_rate",
                    |m: &One_acc_view| { &m.base_rate },
                    |m: &mut One_acc_view| { &mut m.base_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "final_ftp_rate",
                    |m: &One_acc_view| { &m.final_ftp_rate },
                    |m: &mut One_acc_view| { &mut m.final_ftp_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "value_date",
                    |m: &One_acc_view| { &m.value_date },
                    |m: &mut One_acc_view| { &mut m.value_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "nxt_rep_dt",
                    |m: &One_acc_view| { &m.nxt_rep_dt },
                    |m: &mut One_acc_view| { &mut m.nxt_rep_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "lst_rep_dt",
                    |m: &One_acc_view| { &m.lst_rep_dt },
                    |m: &mut One_acc_view| { &mut m.lst_rep_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "mis1",
                    |m: &One_acc_view| { &m.mis1 },
                    |m: &mut One_acc_view| { &mut m.mis1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "mis2",
                    |m: &One_acc_view| { &m.mis2 },
                    |m: &mut One_acc_view| { &mut m.mis2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "psl_code",
                    |m: &One_acc_view| { &m.psl_code },
                    |m: &mut One_acc_view| { &mut m.psl_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "prod_type",
                    |m: &One_acc_view| { &m.prod_type },
                    |m: &mut One_acc_view| { &mut m.prod_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rate_flag",
                    |m: &One_acc_view| { &m.rate_flag },
                    |m: &mut One_acc_view| { &mut m.rate_flag },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "branch",
                    |m: &One_acc_view| { &m.branch },
                    |m: &mut One_acc_view| { &mut m.branch },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "source_file_name",
                    |m: &One_acc_view| { &m.source_file_name },
                    |m: &mut One_acc_view| { &mut m.source_file_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gl",
                    |m: &One_acc_view| { &m.gl },
                    |m: &mut One_acc_view| { &mut m.gl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_id",
                    |m: &One_acc_view| { &m.cust_id },
                    |m: &mut One_acc_view| { &mut m.cust_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "final_ftp_amt",
                    |m: &One_acc_view| { &m.final_ftp_amt },
                    |m: &mut One_acc_view| { &mut m.final_ftp_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "alm_line",
                    |m: &One_acc_view| { &m.alm_line },
                    |m: &mut One_acc_view| { &mut m.alm_line },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "trade_dt",
                    |m: &One_acc_view| { &m.trade_dt },
                    |m: &mut One_acc_view| { &mut m.trade_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "orig_bal",
                    |m: &One_acc_view| { &m.orig_bal },
                    |m: &mut One_acc_view| { &mut m.orig_bal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "outstanding_bal",
                    |m: &One_acc_view| { &m.outstanding_bal },
                    |m: &mut One_acc_view| { &mut m.outstanding_bal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj1",
                    |m: &One_acc_view| { &m.adj1 },
                    |m: &mut One_acc_view| { &mut m.adj1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj2",
                    |m: &One_acc_view| { &m.adj2 },
                    |m: &mut One_acc_view| { &mut m.adj2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj3",
                    |m: &One_acc_view| { &m.adj3 },
                    |m: &mut One_acc_view| { &mut m.adj3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj4",
                    |m: &One_acc_view| { &m.adj4 },
                    |m: &mut One_acc_view| { &mut m.adj4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj5",
                    |m: &One_acc_view| { &m.adj5 },
                    |m: &mut One_acc_view| { &mut m.adj5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj6",
                    |m: &One_acc_view| { &m.adj6 },
                    |m: &mut One_acc_view| { &mut m.adj6 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "liquidity_premia",
                    |m: &One_acc_view| { &m.liquidity_premia },
                    |m: &mut One_acc_view| { &mut m.liquidity_premia },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "psl_charge",
                    |m: &One_acc_view| { &m.psl_charge },
                    |m: &mut One_acc_view| { &mut m.psl_charge },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "input_benchmark",
                    |m: &One_acc_view| { &m.input_benchmark },
                    |m: &mut One_acc_view| { &mut m.input_benchmark },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pdo",
                    |m: &One_acc_view| { &m.pdo },
                    |m: &mut One_acc_view| { &mut m.pdo },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "npl",
                    |m: &One_acc_view| { &m.npl },
                    |m: &mut One_acc_view| { &mut m.npl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "specific_provision",
                    |m: &One_acc_view| { &m.specific_provision },
                    |m: &mut One_acc_view| { &mut m.specific_provision },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "method",
                    |m: &One_acc_view| { &m.method },
                    |m: &mut One_acc_view| { &mut m.method },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rate_curve",
                    |m: &One_acc_view| { &m.rate_curve },
                    |m: &mut One_acc_view| { &mut m.rate_curve },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "org_tenor",
                    |m: &One_acc_view| { &m.org_tenor },
                    |m: &mut One_acc_view| { &mut m.org_tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "rep_tenor",
                    |m: &One_acc_view| { &m.rep_tenor },
                    |m: &mut One_acc_view| { &mut m.rep_tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "fx_spread",
                    |m: &One_acc_view| { &m.fx_spread },
                    |m: &mut One_acc_view| { &mut m.fx_spread },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "var_spread",
                    |m: &One_acc_view| { &m.var_spread },
                    |m: &mut One_acc_view| { &mut m.var_spread },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "first_ftp",
                    |m: &One_acc_view| { &m.first_ftp },
                    |m: &mut One_acc_view| { &mut m.first_ftp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "bc_as_on_rule",
                    |m: &One_acc_view| { &m.bc_as_on_rule },
                    |m: &mut One_acc_view| { &mut m.bc_as_on_rule },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tenor_start_date_rule",
                    |m: &One_acc_view| { &m.tenor_start_date_rule },
                    |m: &mut One_acc_view| { &mut m.tenor_start_date_rule },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tenor_end_date_rule",
                    |m: &One_acc_view| { &m.tenor_end_date_rule },
                    |m: &mut One_acc_view| { &mut m.tenor_end_date_rule },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "bc_as_on_applied",
                    |m: &One_acc_view| { &m.bc_as_on_applied },
                    |m: &mut One_acc_view| { &mut m.bc_as_on_applied },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tenor_start_date_applied",
                    |m: &One_acc_view| { &m.tenor_start_date_applied },
                    |m: &mut One_acc_view| { &mut m.tenor_start_date_applied },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tenor_end_date_applied",
                    |m: &One_acc_view| { &m.tenor_end_date_applied },
                    |m: &mut One_acc_view| { &mut m.tenor_end_date_applied },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<One_acc_view>(
                    "One_acc_view",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static One_acc_view {
        static mut instance: ::protobuf::lazy::Lazy<One_acc_view> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const One_acc_view,
        };
        unsafe {
            instance.get(One_acc_view::new)
        }
    }
}

impl ::protobuf::Clear for One_acc_view {
    fn clear(&mut self) {
        self.clear_entity();
        self.clear_deal_no();
        self.clear_contract_no();
        self.clear_isin();
        self.clear_instr_id();
        self.clear_parent_code();
        self.clear_short_name();
        self.clear_issuer_name();
        self.clear_intr_typ();
        self.clear_sec_issuance_date();
        self.clear_coupon();
        self.clear_last_intr_dt();
        self.clear_next_intr_dt();
        self.clear_nxt_repricing_dt();
        self.clear_rating();
        self.clear_mat_dt();
        self.clear_call_dt();
        self.clear_put_dt();
        self.clear_tax_status();
        self.clear_product();
        self.clear_prod_desc();
        self.clear_slr_nslr();
        self.clear_deal_dt();
        self.clear_portfolio();
        self.clear_desk();
        self.clear_acc_sec_igaap();
        self.clear_port_typ();
        self.clear_deal_ytm();
        self.clear_deal_rt();
        self.clear_currency();
        self.clear_os_face_val();
        self.clear_accr_int();
        self.clear_os_cv_before_amort();
        self.clear_amort_till_dt();
        self.clear_os_cv_after_amort();
        self.clear_intr_app_freq();
        self.clear_comp_freq();
        self.clear_intr_prac();
        self.clear_rate_spread();
        self.clear_asset_class();
        self.clear_average_balance();
        self.clear_yld_to_call();
        self.clear_int_rate();
        self.clear_base_rate();
        self.clear_final_ftp_rate();
        self.clear_value_date();
        self.clear_nxt_rep_dt();
        self.clear_lst_rep_dt();
        self.clear_mis1();
        self.clear_mis2();
        self.clear_psl_code();
        self.clear_prod_type();
        self.clear_rate_flag();
        self.clear_branch();
        self.clear_source_file_name();
        self.clear_gl();
        self.clear_cust_id();
        self.clear_final_ftp_amt();
        self.clear_alm_line();
        self.clear_trade_dt();
        self.clear_orig_bal();
        self.clear_outstanding_bal();
        self.clear_adj1();
        self.clear_adj2();
        self.clear_adj3();
        self.clear_adj4();
        self.clear_adj5();
        self.clear_adj6();
        self.clear_liquidity_premia();
        self.clear_psl_charge();
        self.clear_input_benchmark();
        self.clear_pdo();
        self.clear_npl();
        self.clear_specific_provision();
        self.clear_method();
        self.clear_rate_curve();
        self.clear_org_tenor();
        self.clear_rep_tenor();
        self.clear_fx_spread();
        self.clear_var_spread();
        self.clear_first_ftp();
        self.clear_bc_as_on_rule();
        self.clear_tenor_start_date_rule();
        self.clear_tenor_end_date_rule();
        self.clear_bc_as_on_applied();
        self.clear_tenor_start_date_applied();
        self.clear_tenor_end_date_applied();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for One_acc_view {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for One_acc_view {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16proto/ftp_inv_op.proto\"\xea\x14\n\x0cOne_acc_view\x12\x16\n\x06en\
    tity\x18\x01\x20\x01(\tR\x06entity\x12\x17\n\x07deal_no\x18\x02\x20\x01(\
    \tR\x06dealNo\x12\x1f\n\x0bcontract_no\x18\x03\x20\x01(\tR\ncontractNo\
    \x12\x12\n\x04isin\x18\x04\x20\x01(\tR\x04isin\x12\x19\n\x08instr_id\x18\
    \x05\x20\x01(\tR\x07instrId\x12\x1f\n\x0bparent_code\x18\x06\x20\x01(\tR\
    \nparentCode\x12\x1d\n\nshort_name\x18\x07\x20\x01(\tR\tshortName\x12\
    \x1f\n\x0bissuer_name\x18\x08\x20\x01(\tR\nissuerName\x12\x19\n\x08intr_\
    typ\x18\t\x20\x01(\tR\x07intrTyp\x12*\n\x11sec_issuance_date\x18\n\x20\
    \x01(\x03R\x0fsecIssuanceDate\x12\x16\n\x06coupon\x18\x0b\x20\x01(\tR\
    \x06coupon\x12\x20\n\x0clast_intr_dt\x18\x0c\x20\x01(\x03R\nlastIntrDt\
    \x12\x20\n\x0cnext_intr_dt\x18\r\x20\x01(\x03R\nnextIntrDt\x12(\n\x10nxt\
    _repricing_dt\x18\x0e\x20\x01(\x03R\x0enxtRepricingDt\x12\x16\n\x06ratin\
    g\x18\x0f\x20\x01(\tR\x06rating\x12\x15\n\x06mat_dt\x18\x10\x20\x01(\x03\
    R\x05matDt\x12\x17\n\x07call_dt\x18\x11\x20\x01(\x03R\x06callDt\x12\x15\
    \n\x06put_dt\x18\x12\x20\x01(\x03R\x05putDt\x12\x1d\n\ntax_status\x18\
    \x13\x20\x01(\tR\ttaxStatus\x12\x18\n\x07product\x18\x14\x20\x01(\tR\x07\
    product\x12\x1b\n\tprod_desc\x18\x15\x20\x01(\tR\x08prodDesc\x12\x19\n\
    \x08slr_nslr\x18\x16\x20\x01(\tR\x07slrNslr\x12\x17\n\x07deal_dt\x18\x17\
    \x20\x01(\x03R\x06dealDt\x12\x1c\n\tportfolio\x18\x18\x20\x01(\tR\tportf\
    olio\x12\x12\n\x04desk\x18\x19\x20\x01(\tR\x04desk\x12\"\n\racc_sec_igaa\
    p\x18\x1a\x20\x01(\tR\x0baccSecIgaap\x12\x19\n\x08port_typ\x18\x1b\x20\
    \x01(\tR\x07portTyp\x12\x19\n\x08deal_ytm\x18\x1c\x20\x01(\x01R\x07dealY\
    tm\x12\x17\n\x07deal_rt\x18\x1d\x20\x01(\x01R\x06dealRt\x12\x1a\n\x08cur\
    rency\x18\x1e\x20\x01(\tR\x08currency\x12\x1e\n\x0bos_face_val\x18\x1f\
    \x20\x01(\x03R\tosFaceVal\x12\x19\n\x08accr_int\x18\x20\x20\x01(\x01R\
    \x07accrInt\x12+\n\x12os_cv_before_amort\x18!\x20\x01(\x01R\x0fosCvBefor\
    eAmort\x12\"\n\ramort_till_dt\x18\"\x20\x01(\x01R\x0bamortTillDt\x12)\n\
    \x11os_cv_after_amort\x18#\x20\x01(\x01R\x0eosCvAfterAmort\x12\"\n\rintr\
    _app_freq\x18$\x20\x01(\tR\x0bintrAppFreq\x12\x1b\n\tcomp_freq\x18%\x20\
    \x01(\tR\x08compFreq\x12\x1b\n\tintr_prac\x18&\x20\x01(\tR\x08intrPrac\
    \x12\x1f\n\x0brate_spread\x18'\x20\x01(\tR\nrateSpread\x12\x1f\n\x0basse\
    t_class\x18(\x20\x01(\tR\nassetClass\x12'\n\x0faverage_balance\x18)\x20\
    \x01(\x01R\x0eaverageBalance\x12\x1e\n\x0byld_to_call\x18*\x20\x01(\x01R\
    \tyldToCall\x12\x19\n\x08int_rate\x18+\x20\x01(\x01R\x07intRate\x12\x1b\
    \n\tbase_rate\x18,\x20\x01(\x01R\x08baseRate\x12$\n\x0efinal_ftp_rate\
    \x18-\x20\x01(\x01R\x0cfinalFtpRate\x12\x1d\n\nvalue_date\x18.\x20\x01(\
    \x03R\tvalueDate\x12\x1c\n\nnxt_rep_dt\x18/\x20\x01(\x03R\x08nxtRepDt\
    \x12\x1c\n\nlst_rep_dt\x180\x20\x01(\x03R\x08lstRepDt\x12\x12\n\x04mis1\
    \x181\x20\x01(\tR\x04mis1\x12\x12\n\x04mis2\x182\x20\x01(\tR\x04mis2\x12\
    \x19\n\x08psl_code\x183\x20\x01(\tR\x07pslCode\x12\x1b\n\tprod_type\x184\
    \x20\x01(\tR\x08prodType\x12\x1b\n\trate_flag\x185\x20\x01(\tR\x08rateFl\
    ag\x12\x16\n\x06branch\x186\x20\x01(\tR\x06branch\x12(\n\x10source_file_\
    name\x187\x20\x01(\tR\x0esourceFileName\x12\x0e\n\x02gl\x188\x20\x01(\tR\
    \x02gl\x12\x17\n\x07cust_id\x189\x20\x01(\tR\x06custId\x12\"\n\rfinal_ft\
    p_amt\x18:\x20\x01(\x01R\x0bfinalFtpAmt\x12\x19\n\x08alm_line\x18;\x20\
    \x01(\tR\x07almLine\x12\x19\n\x08trade_dt\x18<\x20\x01(\tR\x07tradeDt\
    \x12\x19\n\x08orig_bal\x18=\x20\x01(\x01R\x07origBal\x12'\n\x0foutstandi\
    ng_bal\x18>\x20\x01(\x01R\x0eoutstandingBal\x12\x12\n\x04adj1\x18?\x20\
    \x01(\x01R\x04adj1\x12\x12\n\x04adj2\x18@\x20\x01(\x01R\x04adj2\x12\x12\
    \n\x04adj3\x18A\x20\x01(\x01R\x04adj3\x12\x12\n\x04adj4\x18B\x20\x01(\
    \x01R\x04adj4\x12\x12\n\x04adj5\x18C\x20\x01(\x01R\x04adj5\x12\x12\n\x04\
    adj6\x18D\x20\x01(\x01R\x04adj6\x12)\n\x10liquidity_premia\x18E\x20\x01(\
    \tR\x0fliquidityPremia\x12\x1d\n\npsl_charge\x18F\x20\x01(\tR\tpslCharge\
    \x12'\n\x0finput_benchmark\x18G\x20\x01(\tR\x0einputBenchmark\x12\x10\n\
    \x03pdo\x18H\x20\x01(\tR\x03pdo\x12\x10\n\x03npl\x18I\x20\x01(\tR\x03npl\
    \x12-\n\x12specific_provision\x18J\x20\x01(\tR\x11specificProvision\x12\
    \x16\n\x06method\x18K\x20\x01(\tR\x06method\x12\x1d\n\nrate_curve\x18L\
    \x20\x01(\tR\trateCurve\x12\x1b\n\torg_tenor\x18M\x20\x01(\x03R\x08orgTe\
    nor\x12\x1b\n\trep_tenor\x18N\x20\x01(\x03R\x08repTenor\x12\x1b\n\tfx_sp\
    read\x18O\x20\x01(\x01R\x08fxSpread\x12\x1d\n\nvar_spread\x18P\x20\x01(\
    \x01R\tvarSpread\x12\x1b\n\tfirst_ftp\x18Q\x20\x01(\x01R\x08firstFtp\x12\
    !\n\rbc_as_on_rule\x18R\x20\x01(\x03R\nbcAsOnRule\x121\n\x15tenor_start_\
    date_rule\x18S\x20\x01(\x03R\x12tenorStartDateRule\x12-\n\x13tenor_end_d\
    ate_rule\x18T\x20\x01(\x03R\x10tenorEndDateRule\x12'\n\x10bc_as_on_appli\
    ed\x18U\x20\x01(\x03R\rbcAsOnApplied\x127\n\x18tenor_start_date_applied\
    \x18V\x20\x01(\x03R\x15tenorStartDateApplied\x123\n\x16tenor_end_date_ap\
    plied\x18W\x20\x01(\x03R\x13tenorEndDateAppliedb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}