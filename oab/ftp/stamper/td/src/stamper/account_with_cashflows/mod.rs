// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double prin_amt = 2;

    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_int_amt();
        self.clear_prin_amt();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub account_id: ::std::string::String,
    pub currency: ::std::string::String,
    pub int_rate: f64,
    pub outstanding_bal: f64,
    pub gl: ::std::string::String,
    pub start_date: i64,
    pub maturity_date: i64,
    pub rate_flag: ::std::string::String,
    pub branch: ::std::string::String,
    pub customer_id: ::std::string::String,
    pub customer_type: ::std::string::String,
    pub product_code: ::std::string::String,
    pub group: ::std::string::String,
    pub acc_branch: ::std::string::String,
    pub acc_number: ::std::string::String,
    pub acc_suffix: ::std::string::String,
    pub acc_type: ::std::string::String,
    pub deal_type: ::std::string::String,
    pub repricing_frequency: ::std::string::String,
    pub last_repr_date: i64,
    pub next_repr_date: i64,
    pub int_compounding_frequency: i64,
    pub int_repayment_frequency: i64,
    pub margin_rate: ::std::string::String,
    pub cpas: ::std::string::String,
    pub cust_constitution_code: ::std::string::String,
    pub customer_rating: ::std::string::String,
    pub p2: ::std::string::String,
    pub analysis_code: ::std::string::String,
    pub sundry_analysis_code: ::std::string::String,
    pub numeric_analysis_code: ::std::string::String,
    pub base_rate_code: ::std::string::String,
    pub differential_rate_code: ::std::string::String,
    pub accrued_int_amt: f64,
    pub next_rollover_date: i64,
    pub interest_computation_type: ::std::string::String,
    pub rm: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub monthly_avg_bal: f64,
    pub aorl: ::std::string::String,
    pub rl1: i32,
    pub rl2: i32,
    pub rl3: i32,
    pub total_interest_amount: f64,
    pub total_principal_amount: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string account_id = 1;

    pub fn clear_account_id(&mut self) {
        self.account_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: ::std::string::String) {
        self.account_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_id(&mut self) -> &mut ::std::string::String {
        &mut self.account_id
    }

    // Take field
    pub fn take_account_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_id, ::std::string::String::new())
    }

    pub fn get_account_id(&self) -> &str {
        &self.account_id
    }

    // string currency = 2;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // double int_rate = 3;

    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }

    // double outstanding_bal = 4;

    pub fn clear_outstanding_bal(&mut self) {
        self.outstanding_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_outstanding_bal(&mut self, v: f64) {
        self.outstanding_bal = v;
    }

    pub fn get_outstanding_bal(&self) -> f64 {
        self.outstanding_bal
    }

    // string gl = 5;

    pub fn clear_gl(&mut self) {
        self.gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl(&mut self, v: ::std::string::String) {
        self.gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl(&mut self) -> &mut ::std::string::String {
        &mut self.gl
    }

    // Take field
    pub fn take_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl, ::std::string::String::new())
    }

    pub fn get_gl(&self) -> &str {
        &self.gl
    }

    // int64 start_date = 6;

    pub fn clear_start_date(&mut self) {
        self.start_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_date(&mut self, v: i64) {
        self.start_date = v;
    }

    pub fn get_start_date(&self) -> i64 {
        self.start_date
    }

    // int64 maturity_date = 7;

    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }

    // string rate_flag = 8;

    pub fn clear_rate_flag(&mut self) {
        self.rate_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_flag(&mut self, v: ::std::string::String) {
        self.rate_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_flag(&mut self) -> &mut ::std::string::String {
        &mut self.rate_flag
    }

    // Take field
    pub fn take_rate_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_flag, ::std::string::String::new())
    }

    pub fn get_rate_flag(&self) -> &str {
        &self.rate_flag
    }

    // string branch = 9;

    pub fn clear_branch(&mut self) {
        self.branch.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch(&mut self, v: ::std::string::String) {
        self.branch = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch(&mut self) -> &mut ::std::string::String {
        &mut self.branch
    }

    // Take field
    pub fn take_branch(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch, ::std::string::String::new())
    }

    pub fn get_branch(&self) -> &str {
        &self.branch
    }

    // string customer_id = 10;

    pub fn clear_customer_id(&mut self) {
        self.customer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_id(&mut self, v: ::std::string::String) {
        self.customer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_id(&mut self) -> &mut ::std::string::String {
        &mut self.customer_id
    }

    // Take field
    pub fn take_customer_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_id, ::std::string::String::new())
    }

    pub fn get_customer_id(&self) -> &str {
        &self.customer_id
    }

    // string customer_type = 11;

    pub fn clear_customer_type(&mut self) {
        self.customer_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_type(&mut self, v: ::std::string::String) {
        self.customer_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_type(&mut self) -> &mut ::std::string::String {
        &mut self.customer_type
    }

    // Take field
    pub fn take_customer_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_type, ::std::string::String::new())
    }

    pub fn get_customer_type(&self) -> &str {
        &self.customer_type
    }

    // string product_code = 12;

    pub fn clear_product_code(&mut self) {
        self.product_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_code(&mut self, v: ::std::string::String) {
        self.product_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_code(&mut self) -> &mut ::std::string::String {
        &mut self.product_code
    }

    // Take field
    pub fn take_product_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_code, ::std::string::String::new())
    }

    pub fn get_product_code(&self) -> &str {
        &self.product_code
    }

    // string group = 13;

    pub fn clear_group(&mut self) {
        self.group.clear();
    }

    // Param is passed by value, moved
    pub fn set_group(&mut self, v: ::std::string::String) {
        self.group = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group(&mut self) -> &mut ::std::string::String {
        &mut self.group
    }

    // Take field
    pub fn take_group(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group, ::std::string::String::new())
    }

    pub fn get_group(&self) -> &str {
        &self.group
    }

    // string acc_branch = 14;

    pub fn clear_acc_branch(&mut self) {
        self.acc_branch.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_branch(&mut self, v: ::std::string::String) {
        self.acc_branch = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_branch(&mut self) -> &mut ::std::string::String {
        &mut self.acc_branch
    }

    // Take field
    pub fn take_acc_branch(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_branch, ::std::string::String::new())
    }

    pub fn get_acc_branch(&self) -> &str {
        &self.acc_branch
    }

    // string acc_number = 15;

    pub fn clear_acc_number(&mut self) {
        self.acc_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_number(&mut self, v: ::std::string::String) {
        self.acc_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_number(&mut self) -> &mut ::std::string::String {
        &mut self.acc_number
    }

    // Take field
    pub fn take_acc_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_number, ::std::string::String::new())
    }

    pub fn get_acc_number(&self) -> &str {
        &self.acc_number
    }

    // string acc_suffix = 16;

    pub fn clear_acc_suffix(&mut self) {
        self.acc_suffix.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_suffix(&mut self, v: ::std::string::String) {
        self.acc_suffix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_suffix(&mut self) -> &mut ::std::string::String {
        &mut self.acc_suffix
    }

    // Take field
    pub fn take_acc_suffix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_suffix, ::std::string::String::new())
    }

    pub fn get_acc_suffix(&self) -> &str {
        &self.acc_suffix
    }

    // string acc_type = 17;

    pub fn clear_acc_type(&mut self) {
        self.acc_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_type(&mut self, v: ::std::string::String) {
        self.acc_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_type(&mut self) -> &mut ::std::string::String {
        &mut self.acc_type
    }

    // Take field
    pub fn take_acc_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_type, ::std::string::String::new())
    }

    pub fn get_acc_type(&self) -> &str {
        &self.acc_type
    }

    // string deal_type = 18;

    pub fn clear_deal_type(&mut self) {
        self.deal_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_type(&mut self, v: ::std::string::String) {
        self.deal_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_type(&mut self) -> &mut ::std::string::String {
        &mut self.deal_type
    }

    // Take field
    pub fn take_deal_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_type, ::std::string::String::new())
    }

    pub fn get_deal_type(&self) -> &str {
        &self.deal_type
    }

    // string repricing_frequency = 19;

    pub fn clear_repricing_frequency(&mut self) {
        self.repricing_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_repricing_frequency(&mut self, v: ::std::string::String) {
        self.repricing_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repricing_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.repricing_frequency
    }

    // Take field
    pub fn take_repricing_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.repricing_frequency, ::std::string::String::new())
    }

    pub fn get_repricing_frequency(&self) -> &str {
        &self.repricing_frequency
    }

    // int64 last_repr_date = 20;

    pub fn clear_last_repr_date(&mut self) {
        self.last_repr_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_repr_date(&mut self, v: i64) {
        self.last_repr_date = v;
    }

    pub fn get_last_repr_date(&self) -> i64 {
        self.last_repr_date
    }

    // int64 next_repr_date = 21;

    pub fn clear_next_repr_date(&mut self) {
        self.next_repr_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_repr_date(&mut self, v: i64) {
        self.next_repr_date = v;
    }

    pub fn get_next_repr_date(&self) -> i64 {
        self.next_repr_date
    }

    // int64 int_compounding_frequency = 22;

    pub fn clear_int_compounding_frequency(&mut self) {
        self.int_compounding_frequency = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_compounding_frequency(&mut self, v: i64) {
        self.int_compounding_frequency = v;
    }

    pub fn get_int_compounding_frequency(&self) -> i64 {
        self.int_compounding_frequency
    }

    // int64 int_repayment_frequency = 23;

    pub fn clear_int_repayment_frequency(&mut self) {
        self.int_repayment_frequency = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_repayment_frequency(&mut self, v: i64) {
        self.int_repayment_frequency = v;
    }

    pub fn get_int_repayment_frequency(&self) -> i64 {
        self.int_repayment_frequency
    }

    // string margin_rate = 24;

    pub fn clear_margin_rate(&mut self) {
        self.margin_rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_margin_rate(&mut self, v: ::std::string::String) {
        self.margin_rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_margin_rate(&mut self) -> &mut ::std::string::String {
        &mut self.margin_rate
    }

    // Take field
    pub fn take_margin_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.margin_rate, ::std::string::String::new())
    }

    pub fn get_margin_rate(&self) -> &str {
        &self.margin_rate
    }

    // string cpas = 25;

    pub fn clear_cpas(&mut self) {
        self.cpas.clear();
    }

    // Param is passed by value, moved
    pub fn set_cpas(&mut self, v: ::std::string::String) {
        self.cpas = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cpas(&mut self) -> &mut ::std::string::String {
        &mut self.cpas
    }

    // Take field
    pub fn take_cpas(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cpas, ::std::string::String::new())
    }

    pub fn get_cpas(&self) -> &str {
        &self.cpas
    }

    // string cust_constitution_code = 26;

    pub fn clear_cust_constitution_code(&mut self) {
        self.cust_constitution_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_constitution_code(&mut self, v: ::std::string::String) {
        self.cust_constitution_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_constitution_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_constitution_code
    }

    // Take field
    pub fn take_cust_constitution_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_constitution_code, ::std::string::String::new())
    }

    pub fn get_cust_constitution_code(&self) -> &str {
        &self.cust_constitution_code
    }

    // string customer_rating = 27;

    pub fn clear_customer_rating(&mut self) {
        self.customer_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_rating(&mut self, v: ::std::string::String) {
        self.customer_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_rating(&mut self) -> &mut ::std::string::String {
        &mut self.customer_rating
    }

    // Take field
    pub fn take_customer_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_rating, ::std::string::String::new())
    }

    pub fn get_customer_rating(&self) -> &str {
        &self.customer_rating
    }

    // string p2 = 28;

    pub fn clear_p2(&mut self) {
        self.p2.clear();
    }

    // Param is passed by value, moved
    pub fn set_p2(&mut self, v: ::std::string::String) {
        self.p2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p2(&mut self) -> &mut ::std::string::String {
        &mut self.p2
    }

    // Take field
    pub fn take_p2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.p2, ::std::string::String::new())
    }

    pub fn get_p2(&self) -> &str {
        &self.p2
    }

    // string analysis_code = 29;

    pub fn clear_analysis_code(&mut self) {
        self.analysis_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_analysis_code(&mut self, v: ::std::string::String) {
        self.analysis_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_analysis_code(&mut self) -> &mut ::std::string::String {
        &mut self.analysis_code
    }

    // Take field
    pub fn take_analysis_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.analysis_code, ::std::string::String::new())
    }

    pub fn get_analysis_code(&self) -> &str {
        &self.analysis_code
    }

    // string sundry_analysis_code = 30;

    pub fn clear_sundry_analysis_code(&mut self) {
        self.sundry_analysis_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_sundry_analysis_code(&mut self, v: ::std::string::String) {
        self.sundry_analysis_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sundry_analysis_code(&mut self) -> &mut ::std::string::String {
        &mut self.sundry_analysis_code
    }

    // Take field
    pub fn take_sundry_analysis_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sundry_analysis_code, ::std::string::String::new())
    }

    pub fn get_sundry_analysis_code(&self) -> &str {
        &self.sundry_analysis_code
    }

    // string numeric_analysis_code = 31;

    pub fn clear_numeric_analysis_code(&mut self) {
        self.numeric_analysis_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_numeric_analysis_code(&mut self, v: ::std::string::String) {
        self.numeric_analysis_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_numeric_analysis_code(&mut self) -> &mut ::std::string::String {
        &mut self.numeric_analysis_code
    }

    // Take field
    pub fn take_numeric_analysis_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.numeric_analysis_code, ::std::string::String::new())
    }

    pub fn get_numeric_analysis_code(&self) -> &str {
        &self.numeric_analysis_code
    }

    // string base_rate_code = 32;

    pub fn clear_base_rate_code(&mut self) {
        self.base_rate_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_rate_code(&mut self, v: ::std::string::String) {
        self.base_rate_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_rate_code(&mut self) -> &mut ::std::string::String {
        &mut self.base_rate_code
    }

    // Take field
    pub fn take_base_rate_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base_rate_code, ::std::string::String::new())
    }

    pub fn get_base_rate_code(&self) -> &str {
        &self.base_rate_code
    }

    // string differential_rate_code = 33;

    pub fn clear_differential_rate_code(&mut self) {
        self.differential_rate_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_differential_rate_code(&mut self, v: ::std::string::String) {
        self.differential_rate_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_differential_rate_code(&mut self) -> &mut ::std::string::String {
        &mut self.differential_rate_code
    }

    // Take field
    pub fn take_differential_rate_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.differential_rate_code, ::std::string::String::new())
    }

    pub fn get_differential_rate_code(&self) -> &str {
        &self.differential_rate_code
    }

    // double accrued_int_amt = 34;

    pub fn clear_accrued_int_amt(&mut self) {
        self.accrued_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accrued_int_amt(&mut self, v: f64) {
        self.accrued_int_amt = v;
    }

    pub fn get_accrued_int_amt(&self) -> f64 {
        self.accrued_int_amt
    }

    // int64 next_rollover_date = 35;

    pub fn clear_next_rollover_date(&mut self) {
        self.next_rollover_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_rollover_date(&mut self, v: i64) {
        self.next_rollover_date = v;
    }

    pub fn get_next_rollover_date(&self) -> i64 {
        self.next_rollover_date
    }

    // string interest_computation_type = 36;

    pub fn clear_interest_computation_type(&mut self) {
        self.interest_computation_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_interest_computation_type(&mut self, v: ::std::string::String) {
        self.interest_computation_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interest_computation_type(&mut self) -> &mut ::std::string::String {
        &mut self.interest_computation_type
    }

    // Take field
    pub fn take_interest_computation_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interest_computation_type, ::std::string::String::new())
    }

    pub fn get_interest_computation_type(&self) -> &str {
        &self.interest_computation_type
    }

    // string rm = 37;

    pub fn clear_rm(&mut self) {
        self.rm.clear();
    }

    // Param is passed by value, moved
    pub fn set_rm(&mut self, v: ::std::string::String) {
        self.rm = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rm(&mut self) -> &mut ::std::string::String {
        &mut self.rm
    }

    // Take field
    pub fn take_rm(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rm, ::std::string::String::new())
    }

    pub fn get_rm(&self) -> &str {
        &self.rm
    }

    // string customer_name = 38;

    pub fn clear_customer_name(&mut self) {
        self.customer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_name(&mut self, v: ::std::string::String) {
        self.customer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_name(&mut self) -> &mut ::std::string::String {
        &mut self.customer_name
    }

    // Take field
    pub fn take_customer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_name, ::std::string::String::new())
    }

    pub fn get_customer_name(&self) -> &str {
        &self.customer_name
    }

    // double monthly_avg_bal = 39;

    pub fn clear_monthly_avg_bal(&mut self) {
        self.monthly_avg_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_monthly_avg_bal(&mut self, v: f64) {
        self.monthly_avg_bal = v;
    }

    pub fn get_monthly_avg_bal(&self) -> f64 {
        self.monthly_avg_bal
    }

    // string aorl = 40;

    pub fn clear_aorl(&mut self) {
        self.aorl.clear();
    }

    // Param is passed by value, moved
    pub fn set_aorl(&mut self, v: ::std::string::String) {
        self.aorl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_aorl(&mut self) -> &mut ::std::string::String {
        &mut self.aorl
    }

    // Take field
    pub fn take_aorl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.aorl, ::std::string::String::new())
    }

    pub fn get_aorl(&self) -> &str {
        &self.aorl
    }

    // int32 rl1 = 41;

    pub fn clear_rl1(&mut self) {
        self.rl1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_rl1(&mut self, v: i32) {
        self.rl1 = v;
    }

    pub fn get_rl1(&self) -> i32 {
        self.rl1
    }

    // int32 rl2 = 42;

    pub fn clear_rl2(&mut self) {
        self.rl2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_rl2(&mut self, v: i32) {
        self.rl2 = v;
    }

    pub fn get_rl2(&self) -> i32 {
        self.rl2
    }

    // int32 rl3 = 43;

    pub fn clear_rl3(&mut self) {
        self.rl3 = 0;
    }

    // Param is passed by value, moved
    pub fn set_rl3(&mut self, v: i32) {
        self.rl3 = v;
    }

    pub fn get_rl3(&self) -> i32 {
        self.rl3
    }

    // double total_interest_amount = 44;

    pub fn clear_total_interest_amount(&mut self) {
        self.total_interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_amount(&mut self, v: f64) {
        self.total_interest_amount = v;
    }

    pub fn get_total_interest_amount(&self) -> f64 {
        self.total_interest_amount
    }

    // double total_principal_amount = 45;

    pub fn clear_total_principal_amount(&mut self) {
        self.total_principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_principal_amount(&mut self, v: f64) {
        self.total_principal_amount = v;
    }

    pub fn get_total_principal_amount(&self) -> f64 {
        self.total_principal_amount
    }

    // repeated .Cashflow cashflows = 46;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.outstanding_bal = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.start_date = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_flag)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_id)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_type)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product_code)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_branch)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_number)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_suffix)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_type)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_type)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.repricing_frequency)?;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_repr_date = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_repr_date = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int_compounding_frequency = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int_repayment_frequency = tmp;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.margin_rate)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cpas)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_constitution_code)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_rating)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.p2)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.analysis_code)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sundry_analysis_code)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.numeric_analysis_code)?;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base_rate_code)?;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.differential_rate_code)?;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.accrued_int_amt = tmp;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_rollover_date = tmp;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interest_computation_type)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rm)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_name)?;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.monthly_avg_bal = tmp;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.aorl)?;
                },
                41 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rl1 = tmp;
                },
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rl2 = tmp;
                },
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rl3 = tmp;
                },
                44 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_amount = tmp;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_principal_amount = tmp;
                },
                46 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.account_id);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.currency);
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if self.outstanding_bal != 0. {
            my_size += 9;
        }
        if !self.gl.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.gl);
        }
        if self.start_date != 0 {
            my_size += ::protobuf::rt::value_size(6, self.start_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(7, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.rate_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.rate_flag);
        }
        if !self.branch.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.branch);
        }
        if !self.customer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.customer_id);
        }
        if !self.customer_type.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.customer_type);
        }
        if !self.product_code.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.product_code);
        }
        if !self.group.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.group);
        }
        if !self.acc_branch.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.acc_branch);
        }
        if !self.acc_number.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.acc_number);
        }
        if !self.acc_suffix.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.acc_suffix);
        }
        if !self.acc_type.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.acc_type);
        }
        if !self.deal_type.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.deal_type);
        }
        if !self.repricing_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.repricing_frequency);
        }
        if self.last_repr_date != 0 {
            my_size += ::protobuf::rt::value_size(20, self.last_repr_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_repr_date != 0 {
            my_size += ::protobuf::rt::value_size(21, self.next_repr_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_compounding_frequency != 0 {
            my_size += ::protobuf::rt::value_size(22, self.int_compounding_frequency, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_repayment_frequency != 0 {
            my_size += ::protobuf::rt::value_size(23, self.int_repayment_frequency, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.margin_rate.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.margin_rate);
        }
        if !self.cpas.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.cpas);
        }
        if !self.cust_constitution_code.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.cust_constitution_code);
        }
        if !self.customer_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.customer_rating);
        }
        if !self.p2.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.p2);
        }
        if !self.analysis_code.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.analysis_code);
        }
        if !self.sundry_analysis_code.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.sundry_analysis_code);
        }
        if !self.numeric_analysis_code.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.numeric_analysis_code);
        }
        if !self.base_rate_code.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.base_rate_code);
        }
        if !self.differential_rate_code.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.differential_rate_code);
        }
        if self.accrued_int_amt != 0. {
            my_size += 10;
        }
        if self.next_rollover_date != 0 {
            my_size += ::protobuf::rt::value_size(35, self.next_rollover_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.interest_computation_type.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.interest_computation_type);
        }
        if !self.rm.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.rm);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.customer_name);
        }
        if self.monthly_avg_bal != 0. {
            my_size += 10;
        }
        if !self.aorl.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.aorl);
        }
        if self.rl1 != 0 {
            my_size += ::protobuf::rt::value_size(41, self.rl1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rl2 != 0 {
            my_size += ::protobuf::rt::value_size(42, self.rl2, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rl3 != 0 {
            my_size += ::protobuf::rt::value_size(43, self.rl3, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_interest_amount != 0. {
            my_size += 10;
        }
        if self.total_principal_amount != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.account_id.is_empty() {
            os.write_string(1, &self.account_id)?;
        }
        if !self.currency.is_empty() {
            os.write_string(2, &self.currency)?;
        }
        if self.int_rate != 0. {
            os.write_double(3, self.int_rate)?;
        }
        if self.outstanding_bal != 0. {
            os.write_double(4, self.outstanding_bal)?;
        }
        if !self.gl.is_empty() {
            os.write_string(5, &self.gl)?;
        }
        if self.start_date != 0 {
            os.write_int64(6, self.start_date)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(7, self.maturity_date)?;
        }
        if !self.rate_flag.is_empty() {
            os.write_string(8, &self.rate_flag)?;
        }
        if !self.branch.is_empty() {
            os.write_string(9, &self.branch)?;
        }
        if !self.customer_id.is_empty() {
            os.write_string(10, &self.customer_id)?;
        }
        if !self.customer_type.is_empty() {
            os.write_string(11, &self.customer_type)?;
        }
        if !self.product_code.is_empty() {
            os.write_string(12, &self.product_code)?;
        }
        if !self.group.is_empty() {
            os.write_string(13, &self.group)?;
        }
        if !self.acc_branch.is_empty() {
            os.write_string(14, &self.acc_branch)?;
        }
        if !self.acc_number.is_empty() {
            os.write_string(15, &self.acc_number)?;
        }
        if !self.acc_suffix.is_empty() {
            os.write_string(16, &self.acc_suffix)?;
        }
        if !self.acc_type.is_empty() {
            os.write_string(17, &self.acc_type)?;
        }
        if !self.deal_type.is_empty() {
            os.write_string(18, &self.deal_type)?;
        }
        if !self.repricing_frequency.is_empty() {
            os.write_string(19, &self.repricing_frequency)?;
        }
        if self.last_repr_date != 0 {
            os.write_int64(20, self.last_repr_date)?;
        }
        if self.next_repr_date != 0 {
            os.write_int64(21, self.next_repr_date)?;
        }
        if self.int_compounding_frequency != 0 {
            os.write_int64(22, self.int_compounding_frequency)?;
        }
        if self.int_repayment_frequency != 0 {
            os.write_int64(23, self.int_repayment_frequency)?;
        }
        if !self.margin_rate.is_empty() {
            os.write_string(24, &self.margin_rate)?;
        }
        if !self.cpas.is_empty() {
            os.write_string(25, &self.cpas)?;
        }
        if !self.cust_constitution_code.is_empty() {
            os.write_string(26, &self.cust_constitution_code)?;
        }
        if !self.customer_rating.is_empty() {
            os.write_string(27, &self.customer_rating)?;
        }
        if !self.p2.is_empty() {
            os.write_string(28, &self.p2)?;
        }
        if !self.analysis_code.is_empty() {
            os.write_string(29, &self.analysis_code)?;
        }
        if !self.sundry_analysis_code.is_empty() {
            os.write_string(30, &self.sundry_analysis_code)?;
        }
        if !self.numeric_analysis_code.is_empty() {
            os.write_string(31, &self.numeric_analysis_code)?;
        }
        if !self.base_rate_code.is_empty() {
            os.write_string(32, &self.base_rate_code)?;
        }
        if !self.differential_rate_code.is_empty() {
            os.write_string(33, &self.differential_rate_code)?;
        }
        if self.accrued_int_amt != 0. {
            os.write_double(34, self.accrued_int_amt)?;
        }
        if self.next_rollover_date != 0 {
            os.write_int64(35, self.next_rollover_date)?;
        }
        if !self.interest_computation_type.is_empty() {
            os.write_string(36, &self.interest_computation_type)?;
        }
        if !self.rm.is_empty() {
            os.write_string(37, &self.rm)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(38, &self.customer_name)?;
        }
        if self.monthly_avg_bal != 0. {
            os.write_double(39, self.monthly_avg_bal)?;
        }
        if !self.aorl.is_empty() {
            os.write_string(40, &self.aorl)?;
        }
        if self.rl1 != 0 {
            os.write_int32(41, self.rl1)?;
        }
        if self.rl2 != 0 {
            os.write_int32(42, self.rl2)?;
        }
        if self.rl3 != 0 {
            os.write_int32(43, self.rl3)?;
        }
        if self.total_interest_amount != 0. {
            os.write_double(44, self.total_interest_amount)?;
        }
        if self.total_principal_amount != 0. {
            os.write_double(45, self.total_principal_amount)?;
        }
        for v in &self.cashflows {
            os.write_tag(46, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "account_id",
                    |m: &AccountWithCashflows| { &m.account_id },
                    |m: &mut AccountWithCashflows| { &mut m.account_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &AccountWithCashflows| { &m.currency },
                    |m: &mut AccountWithCashflows| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rate",
                    |m: &AccountWithCashflows| { &m.int_rate },
                    |m: &mut AccountWithCashflows| { &mut m.int_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "outstanding_bal",
                    |m: &AccountWithCashflows| { &m.outstanding_bal },
                    |m: &mut AccountWithCashflows| { &mut m.outstanding_bal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gl",
                    |m: &AccountWithCashflows| { &m.gl },
                    |m: &mut AccountWithCashflows| { &mut m.gl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "start_date",
                    |m: &AccountWithCashflows| { &m.start_date },
                    |m: &mut AccountWithCashflows| { &mut m.start_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "maturity_date",
                    |m: &AccountWithCashflows| { &m.maturity_date },
                    |m: &mut AccountWithCashflows| { &mut m.maturity_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rate_flag",
                    |m: &AccountWithCashflows| { &m.rate_flag },
                    |m: &mut AccountWithCashflows| { &mut m.rate_flag },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "branch",
                    |m: &AccountWithCashflows| { &m.branch },
                    |m: &mut AccountWithCashflows| { &mut m.branch },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "customer_id",
                    |m: &AccountWithCashflows| { &m.customer_id },
                    |m: &mut AccountWithCashflows| { &mut m.customer_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "customer_type",
                    |m: &AccountWithCashflows| { &m.customer_type },
                    |m: &mut AccountWithCashflows| { &mut m.customer_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "product_code",
                    |m: &AccountWithCashflows| { &m.product_code },
                    |m: &mut AccountWithCashflows| { &mut m.product_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "group",
                    |m: &AccountWithCashflows| { &m.group },
                    |m: &mut AccountWithCashflows| { &mut m.group },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acc_branch",
                    |m: &AccountWithCashflows| { &m.acc_branch },
                    |m: &mut AccountWithCashflows| { &mut m.acc_branch },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acc_number",
                    |m: &AccountWithCashflows| { &m.acc_number },
                    |m: &mut AccountWithCashflows| { &mut m.acc_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acc_suffix",
                    |m: &AccountWithCashflows| { &m.acc_suffix },
                    |m: &mut AccountWithCashflows| { &mut m.acc_suffix },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acc_type",
                    |m: &AccountWithCashflows| { &m.acc_type },
                    |m: &mut AccountWithCashflows| { &mut m.acc_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_type",
                    |m: &AccountWithCashflows| { &m.deal_type },
                    |m: &mut AccountWithCashflows| { &mut m.deal_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "repricing_frequency",
                    |m: &AccountWithCashflows| { &m.repricing_frequency },
                    |m: &mut AccountWithCashflows| { &mut m.repricing_frequency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "last_repr_date",
                    |m: &AccountWithCashflows| { &m.last_repr_date },
                    |m: &mut AccountWithCashflows| { &mut m.last_repr_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "next_repr_date",
                    |m: &AccountWithCashflows| { &m.next_repr_date },
                    |m: &mut AccountWithCashflows| { &mut m.next_repr_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "int_compounding_frequency",
                    |m: &AccountWithCashflows| { &m.int_compounding_frequency },
                    |m: &mut AccountWithCashflows| { &mut m.int_compounding_frequency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "int_repayment_frequency",
                    |m: &AccountWithCashflows| { &m.int_repayment_frequency },
                    |m: &mut AccountWithCashflows| { &mut m.int_repayment_frequency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "margin_rate",
                    |m: &AccountWithCashflows| { &m.margin_rate },
                    |m: &mut AccountWithCashflows| { &mut m.margin_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cpas",
                    |m: &AccountWithCashflows| { &m.cpas },
                    |m: &mut AccountWithCashflows| { &mut m.cpas },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_constitution_code",
                    |m: &AccountWithCashflows| { &m.cust_constitution_code },
                    |m: &mut AccountWithCashflows| { &mut m.cust_constitution_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "customer_rating",
                    |m: &AccountWithCashflows| { &m.customer_rating },
                    |m: &mut AccountWithCashflows| { &mut m.customer_rating },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "p2",
                    |m: &AccountWithCashflows| { &m.p2 },
                    |m: &mut AccountWithCashflows| { &mut m.p2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "analysis_code",
                    |m: &AccountWithCashflows| { &m.analysis_code },
                    |m: &mut AccountWithCashflows| { &mut m.analysis_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sundry_analysis_code",
                    |m: &AccountWithCashflows| { &m.sundry_analysis_code },
                    |m: &mut AccountWithCashflows| { &mut m.sundry_analysis_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "numeric_analysis_code",
                    |m: &AccountWithCashflows| { &m.numeric_analysis_code },
                    |m: &mut AccountWithCashflows| { &mut m.numeric_analysis_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "base_rate_code",
                    |m: &AccountWithCashflows| { &m.base_rate_code },
                    |m: &mut AccountWithCashflows| { &mut m.base_rate_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "differential_rate_code",
                    |m: &AccountWithCashflows| { &m.differential_rate_code },
                    |m: &mut AccountWithCashflows| { &mut m.differential_rate_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "accrued_int_amt",
                    |m: &AccountWithCashflows| { &m.accrued_int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.accrued_int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "next_rollover_date",
                    |m: &AccountWithCashflows| { &m.next_rollover_date },
                    |m: &mut AccountWithCashflows| { &mut m.next_rollover_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "interest_computation_type",
                    |m: &AccountWithCashflows| { &m.interest_computation_type },
                    |m: &mut AccountWithCashflows| { &mut m.interest_computation_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rm",
                    |m: &AccountWithCashflows| { &m.rm },
                    |m: &mut AccountWithCashflows| { &mut m.rm },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "customer_name",
                    |m: &AccountWithCashflows| { &m.customer_name },
                    |m: &mut AccountWithCashflows| { &mut m.customer_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "monthly_avg_bal",
                    |m: &AccountWithCashflows| { &m.monthly_avg_bal },
                    |m: &mut AccountWithCashflows| { &mut m.monthly_avg_bal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "aorl",
                    |m: &AccountWithCashflows| { &m.aorl },
                    |m: &mut AccountWithCashflows| { &mut m.aorl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "rl1",
                    |m: &AccountWithCashflows| { &m.rl1 },
                    |m: &mut AccountWithCashflows| { &mut m.rl1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "rl2",
                    |m: &AccountWithCashflows| { &m.rl2 },
                    |m: &mut AccountWithCashflows| { &mut m.rl2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "rl3",
                    |m: &AccountWithCashflows| { &m.rl3 },
                    |m: &mut AccountWithCashflows| { &mut m.rl3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_interest_amount",
                    |m: &AccountWithCashflows| { &m.total_interest_amount },
                    |m: &mut AccountWithCashflows| { &mut m.total_interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_principal_amount",
                    |m: &AccountWithCashflows| { &m.total_principal_amount },
                    |m: &mut AccountWithCashflows| { &mut m.total_principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_account_id();
        self.clear_currency();
        self.clear_int_rate();
        self.clear_outstanding_bal();
        self.clear_gl();
        self.clear_start_date();
        self.clear_maturity_date();
        self.clear_rate_flag();
        self.clear_branch();
        self.clear_customer_id();
        self.clear_customer_type();
        self.clear_product_code();
        self.clear_group();
        self.clear_acc_branch();
        self.clear_acc_number();
        self.clear_acc_suffix();
        self.clear_acc_type();
        self.clear_deal_type();
        self.clear_repricing_frequency();
        self.clear_last_repr_date();
        self.clear_next_repr_date();
        self.clear_int_compounding_frequency();
        self.clear_int_repayment_frequency();
        self.clear_margin_rate();
        self.clear_cpas();
        self.clear_cust_constitution_code();
        self.clear_customer_rating();
        self.clear_p2();
        self.clear_analysis_code();
        self.clear_sundry_analysis_code();
        self.clear_numeric_analysis_code();
        self.clear_base_rate_code();
        self.clear_differential_rate_code();
        self.clear_accrued_int_amt();
        self.clear_next_rollover_date();
        self.clear_interest_computation_type();
        self.clear_rm();
        self.clear_customer_name();
        self.clear_monthly_avg_bal();
        self.clear_aorl();
        self.clear_rl1();
        self.clear_rl2();
        self.clear_rl3();
        self.clear_total_interest_amount();
        self.clear_total_principal_amount();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmessage.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\x01(\
    \x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prinAmt\
    \x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xfa\x0c\n\x14AccountW\
    ithCashflows\x12\x1d\n\naccount_id\x18\x01\x20\x01(\tR\taccountId\x12\
    \x1a\n\x08currency\x18\x02\x20\x01(\tR\x08currency\x12\x19\n\x08int_rate\
    \x18\x03\x20\x01(\x01R\x07intRate\x12'\n\x0foutstanding_bal\x18\x04\x20\
    \x01(\x01R\x0eoutstandingBal\x12\x0e\n\x02gl\x18\x05\x20\x01(\tR\x02gl\
    \x12\x1d\n\nstart_date\x18\x06\x20\x01(\x03R\tstartDate\x12#\n\rmaturity\
    _date\x18\x07\x20\x01(\x03R\x0cmaturityDate\x12\x1b\n\trate_flag\x18\x08\
    \x20\x01(\tR\x08rateFlag\x12\x16\n\x06branch\x18\t\x20\x01(\tR\x06branch\
    \x12\x1f\n\x0bcustomer_id\x18\n\x20\x01(\tR\ncustomerId\x12#\n\rcustomer\
    _type\x18\x0b\x20\x01(\tR\x0ccustomerType\x12!\n\x0cproduct_code\x18\x0c\
    \x20\x01(\tR\x0bproductCode\x12\x14\n\x05group\x18\r\x20\x01(\tR\x05grou\
    p\x12\x1d\n\nacc_branch\x18\x0e\x20\x01(\tR\taccBranch\x12\x1d\n\nacc_nu\
    mber\x18\x0f\x20\x01(\tR\taccNumber\x12\x1d\n\nacc_suffix\x18\x10\x20\
    \x01(\tR\taccSuffix\x12\x19\n\x08acc_type\x18\x11\x20\x01(\tR\x07accType\
    \x12\x1b\n\tdeal_type\x18\x12\x20\x01(\tR\x08dealType\x12/\n\x13repricin\
    g_frequency\x18\x13\x20\x01(\tR\x12repricingFrequency\x12$\n\x0elast_rep\
    r_date\x18\x14\x20\x01(\x03R\x0clastReprDate\x12$\n\x0enext_repr_date\
    \x18\x15\x20\x01(\x03R\x0cnextReprDate\x12:\n\x19int_compounding_frequen\
    cy\x18\x16\x20\x01(\x03R\x17intCompoundingFrequency\x126\n\x17int_repaym\
    ent_frequency\x18\x17\x20\x01(\x03R\x15intRepaymentFrequency\x12\x1f\n\
    \x0bmargin_rate\x18\x18\x20\x01(\tR\nmarginRate\x12\x12\n\x04cpas\x18\
    \x19\x20\x01(\tR\x04cpas\x124\n\x16cust_constitution_code\x18\x1a\x20\
    \x01(\tR\x14custConstitutionCode\x12'\n\x0fcustomer_rating\x18\x1b\x20\
    \x01(\tR\x0ecustomerRating\x12\x0e\n\x02p2\x18\x1c\x20\x01(\tR\x02p2\x12\
    #\n\ranalysis_code\x18\x1d\x20\x01(\tR\x0canalysisCode\x120\n\x14sundry_\
    analysis_code\x18\x1e\x20\x01(\tR\x12sundryAnalysisCode\x122\n\x15numeri\
    c_analysis_code\x18\x1f\x20\x01(\tR\x13numericAnalysisCode\x12$\n\x0ebas\
    e_rate_code\x18\x20\x20\x01(\tR\x0cbaseRateCode\x124\n\x16differential_r\
    ate_code\x18!\x20\x01(\tR\x14differentialRateCode\x12&\n\x0faccrued_int_\
    amt\x18\"\x20\x01(\x01R\raccruedIntAmt\x12,\n\x12next_rollover_date\x18#\
    \x20\x01(\x03R\x10nextRolloverDate\x12:\n\x19interest_computation_type\
    \x18$\x20\x01(\tR\x17interestComputationType\x12\x0e\n\x02rm\x18%\x20\
    \x01(\tR\x02rm\x12#\n\rcustomer_name\x18&\x20\x01(\tR\x0ccustomerName\
    \x12&\n\x0fmonthly_avg_bal\x18'\x20\x01(\x01R\rmonthlyAvgBal\x12\x12\n\
    \x04aorl\x18(\x20\x01(\tR\x04aorl\x12\x10\n\x03rl1\x18)\x20\x01(\x05R\
    \x03rl1\x12\x10\n\x03rl2\x18*\x20\x01(\x05R\x03rl2\x12\x10\n\x03rl3\x18+\
    \x20\x01(\x05R\x03rl3\x122\n\x15total_interest_amount\x18,\x20\x01(\x01R\
    \x13totalInterestAmount\x124\n\x16total_principal_amount\x18-\x20\x01(\
    \x01R\x14totalPrincipalAmount\x12'\n\tcashflows\x18.\x20\x03(\x0b2\t.Cas\
    hflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}