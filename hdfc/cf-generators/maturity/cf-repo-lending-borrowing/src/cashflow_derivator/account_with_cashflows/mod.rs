// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double prin_amt = 2;

    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_int_amt();
        self.clear_prin_amt();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub deal_no: ::std::string::String,
    pub bank_oper_typ: ::std::string::String,
    pub deal_dt: i64,
    pub value_dt: i64,
    pub deal_type: ::std::string::String,
    pub slr_type: ::std::string::String,
    pub category: ::std::string::String,
    pub portfolio: ::std::string::String,
    pub counter_party: ::std::string::String,
    pub settle_amt: f64,
    pub accr_int: f64,
    pub sec_setdate: i64,
    pub as_on_dt: i64,
    pub ccy: ::std::string::String,
    pub nxt_rep_dt: i64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string deal_no = 1;

    pub fn clear_deal_no(&mut self) {
        self.deal_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_no(&mut self, v: ::std::string::String) {
        self.deal_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_no(&mut self) -> &mut ::std::string::String {
        &mut self.deal_no
    }

    // Take field
    pub fn take_deal_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_no, ::std::string::String::new())
    }

    pub fn get_deal_no(&self) -> &str {
        &self.deal_no
    }

    // string bank_oper_typ = 2;

    pub fn clear_bank_oper_typ(&mut self) {
        self.bank_oper_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_bank_oper_typ(&mut self, v: ::std::string::String) {
        self.bank_oper_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bank_oper_typ(&mut self) -> &mut ::std::string::String {
        &mut self.bank_oper_typ
    }

    // Take field
    pub fn take_bank_oper_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bank_oper_typ, ::std::string::String::new())
    }

    pub fn get_bank_oper_typ(&self) -> &str {
        &self.bank_oper_typ
    }

    // int64 deal_dt = 3;

    pub fn clear_deal_dt(&mut self) {
        self.deal_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_deal_dt(&mut self, v: i64) {
        self.deal_dt = v;
    }

    pub fn get_deal_dt(&self) -> i64 {
        self.deal_dt
    }

    // int64 value_dt = 4;

    pub fn clear_value_dt(&mut self) {
        self.value_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_dt(&mut self, v: i64) {
        self.value_dt = v;
    }

    pub fn get_value_dt(&self) -> i64 {
        self.value_dt
    }

    // string deal_type = 5;

    pub fn clear_deal_type(&mut self) {
        self.deal_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_type(&mut self, v: ::std::string::String) {
        self.deal_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_type(&mut self) -> &mut ::std::string::String {
        &mut self.deal_type
    }

    // Take field
    pub fn take_deal_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_type, ::std::string::String::new())
    }

    pub fn get_deal_type(&self) -> &str {
        &self.deal_type
    }

    // string slr_type = 6;

    pub fn clear_slr_type(&mut self) {
        self.slr_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_slr_type(&mut self, v: ::std::string::String) {
        self.slr_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slr_type(&mut self) -> &mut ::std::string::String {
        &mut self.slr_type
    }

    // Take field
    pub fn take_slr_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.slr_type, ::std::string::String::new())
    }

    pub fn get_slr_type(&self) -> &str {
        &self.slr_type
    }

    // string category = 7;

    pub fn clear_category(&mut self) {
        self.category.clear();
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        &mut self.category
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category, ::std::string::String::new())
    }

    pub fn get_category(&self) -> &str {
        &self.category
    }

    // string portfolio = 8;

    pub fn clear_portfolio(&mut self) {
        self.portfolio.clear();
    }

    // Param is passed by value, moved
    pub fn set_portfolio(&mut self, v: ::std::string::String) {
        self.portfolio = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_portfolio(&mut self) -> &mut ::std::string::String {
        &mut self.portfolio
    }

    // Take field
    pub fn take_portfolio(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.portfolio, ::std::string::String::new())
    }

    pub fn get_portfolio(&self) -> &str {
        &self.portfolio
    }

    // string counter_party = 9;

    pub fn clear_counter_party(&mut self) {
        self.counter_party.clear();
    }

    // Param is passed by value, moved
    pub fn set_counter_party(&mut self, v: ::std::string::String) {
        self.counter_party = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counter_party(&mut self) -> &mut ::std::string::String {
        &mut self.counter_party
    }

    // Take field
    pub fn take_counter_party(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counter_party, ::std::string::String::new())
    }

    pub fn get_counter_party(&self) -> &str {
        &self.counter_party
    }

    // double settle_amt = 10;

    pub fn clear_settle_amt(&mut self) {
        self.settle_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_settle_amt(&mut self, v: f64) {
        self.settle_amt = v;
    }

    pub fn get_settle_amt(&self) -> f64 {
        self.settle_amt
    }

    // double accr_int = 11;

    pub fn clear_accr_int(&mut self) {
        self.accr_int = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accr_int(&mut self, v: f64) {
        self.accr_int = v;
    }

    pub fn get_accr_int(&self) -> f64 {
        self.accr_int
    }

    // int64 sec_setdate = 12;

    pub fn clear_sec_setdate(&mut self) {
        self.sec_setdate = 0;
    }

    // Param is passed by value, moved
    pub fn set_sec_setdate(&mut self, v: i64) {
        self.sec_setdate = v;
    }

    pub fn get_sec_setdate(&self) -> i64 {
        self.sec_setdate
    }

    // int64 as_on_dt = 13;

    pub fn clear_as_on_dt(&mut self) {
        self.as_on_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on_dt(&mut self, v: i64) {
        self.as_on_dt = v;
    }

    pub fn get_as_on_dt(&self) -> i64 {
        self.as_on_dt
    }

    // string ccy = 14;

    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }

    // int64 nxt_rep_dt = 15;

    pub fn clear_nxt_rep_dt(&mut self) {
        self.nxt_rep_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_rep_dt(&mut self, v: i64) {
        self.nxt_rep_dt = v;
    }

    pub fn get_nxt_rep_dt(&self) -> i64 {
        self.nxt_rep_dt
    }

    // repeated .Cashflow cashflows = 16;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_no)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bank_oper_typ)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deal_dt = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.value_dt = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_type)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.slr_type)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.portfolio)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counter_party)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.settle_amt = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.accr_int = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.sec_setdate = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on_dt = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_rep_dt = tmp;
                },
                16 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.deal_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.deal_no);
        }
        if !self.bank_oper_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.bank_oper_typ);
        }
        if self.deal_dt != 0 {
            my_size += ::protobuf::rt::value_size(3, self.deal_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.value_dt != 0 {
            my_size += ::protobuf::rt::value_size(4, self.value_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.deal_type.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.deal_type);
        }
        if !self.slr_type.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.slr_type);
        }
        if !self.category.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.category);
        }
        if !self.portfolio.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.portfolio);
        }
        if !self.counter_party.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.counter_party);
        }
        if self.settle_amt != 0. {
            my_size += 9;
        }
        if self.accr_int != 0. {
            my_size += 9;
        }
        if self.sec_setdate != 0 {
            my_size += ::protobuf::rt::value_size(12, self.sec_setdate, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.as_on_dt != 0 {
            my_size += ::protobuf::rt::value_size(13, self.as_on_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.ccy);
        }
        if self.nxt_rep_dt != 0 {
            my_size += ::protobuf::rt::value_size(15, self.nxt_rep_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.deal_no.is_empty() {
            os.write_string(1, &self.deal_no)?;
        }
        if !self.bank_oper_typ.is_empty() {
            os.write_string(2, &self.bank_oper_typ)?;
        }
        if self.deal_dt != 0 {
            os.write_int64(3, self.deal_dt)?;
        }
        if self.value_dt != 0 {
            os.write_int64(4, self.value_dt)?;
        }
        if !self.deal_type.is_empty() {
            os.write_string(5, &self.deal_type)?;
        }
        if !self.slr_type.is_empty() {
            os.write_string(6, &self.slr_type)?;
        }
        if !self.category.is_empty() {
            os.write_string(7, &self.category)?;
        }
        if !self.portfolio.is_empty() {
            os.write_string(8, &self.portfolio)?;
        }
        if !self.counter_party.is_empty() {
            os.write_string(9, &self.counter_party)?;
        }
        if self.settle_amt != 0. {
            os.write_double(10, self.settle_amt)?;
        }
        if self.accr_int != 0. {
            os.write_double(11, self.accr_int)?;
        }
        if self.sec_setdate != 0 {
            os.write_int64(12, self.sec_setdate)?;
        }
        if self.as_on_dt != 0 {
            os.write_int64(13, self.as_on_dt)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(14, &self.ccy)?;
        }
        if self.nxt_rep_dt != 0 {
            os.write_int64(15, self.nxt_rep_dt)?;
        }
        for v in &self.cashflows {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_no",
                    |m: &AccountWithCashflows| { &m.deal_no },
                    |m: &mut AccountWithCashflows| { &mut m.deal_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bank_oper_typ",
                    |m: &AccountWithCashflows| { &m.bank_oper_typ },
                    |m: &mut AccountWithCashflows| { &mut m.bank_oper_typ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "deal_dt",
                    |m: &AccountWithCashflows| { &m.deal_dt },
                    |m: &mut AccountWithCashflows| { &mut m.deal_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "value_dt",
                    |m: &AccountWithCashflows| { &m.value_dt },
                    |m: &mut AccountWithCashflows| { &mut m.value_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_type",
                    |m: &AccountWithCashflows| { &m.deal_type },
                    |m: &mut AccountWithCashflows| { &mut m.deal_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "slr_type",
                    |m: &AccountWithCashflows| { &m.slr_type },
                    |m: &mut AccountWithCashflows| { &mut m.slr_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "category",
                    |m: &AccountWithCashflows| { &m.category },
                    |m: &mut AccountWithCashflows| { &mut m.category },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "portfolio",
                    |m: &AccountWithCashflows| { &m.portfolio },
                    |m: &mut AccountWithCashflows| { &mut m.portfolio },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counter_party",
                    |m: &AccountWithCashflows| { &m.counter_party },
                    |m: &mut AccountWithCashflows| { &mut m.counter_party },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "settle_amt",
                    |m: &AccountWithCashflows| { &m.settle_amt },
                    |m: &mut AccountWithCashflows| { &mut m.settle_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "accr_int",
                    |m: &AccountWithCashflows| { &m.accr_int },
                    |m: &mut AccountWithCashflows| { &mut m.accr_int },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "sec_setdate",
                    |m: &AccountWithCashflows| { &m.sec_setdate },
                    |m: &mut AccountWithCashflows| { &mut m.sec_setdate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "as_on_dt",
                    |m: &AccountWithCashflows| { &m.as_on_dt },
                    |m: &mut AccountWithCashflows| { &mut m.as_on_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy",
                    |m: &AccountWithCashflows| { &m.ccy },
                    |m: &mut AccountWithCashflows| { &mut m.ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "nxt_rep_dt",
                    |m: &AccountWithCashflows| { &m.nxt_rep_dt },
                    |m: &mut AccountWithCashflows| { &mut m.nxt_rep_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_deal_no();
        self.clear_bank_oper_typ();
        self.clear_deal_dt();
        self.clear_value_dt();
        self.clear_deal_type();
        self.clear_slr_type();
        self.clear_category();
        self.clear_portfolio();
        self.clear_counter_party();
        self.clear_settle_amt();
        self.clear_accr_int();
        self.clear_sec_setdate();
        self.clear_as_on_dt();
        self.clear_ccy();
        self.clear_nxt_rep_dt();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aAccountWithCashflows.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\
    \x18\x01\x20\x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\
    \x01R\x07prinAmt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xec\
    \x03\n\x14AccountWithCashflows\x12\x17\n\x07deal_no\x18\x01\x20\x01(\tR\
    \x06dealNo\x12\"\n\rbank_oper_typ\x18\x02\x20\x01(\tR\x0bbankOperTyp\x12\
    \x17\n\x07deal_dt\x18\x03\x20\x01(\x03R\x06dealDt\x12\x19\n\x08value_dt\
    \x18\x04\x20\x01(\x03R\x07valueDt\x12\x1b\n\tdeal_type\x18\x05\x20\x01(\
    \tR\x08dealType\x12\x19\n\x08slr_type\x18\x06\x20\x01(\tR\x07slrType\x12\
    \x1a\n\x08category\x18\x07\x20\x01(\tR\x08category\x12\x1c\n\tportfolio\
    \x18\x08\x20\x01(\tR\tportfolio\x12#\n\rcounter_party\x18\t\x20\x01(\tR\
    \x0ccounterParty\x12\x1d\n\nsettle_amt\x18\n\x20\x01(\x01R\tsettleAmt\
    \x12\x19\n\x08accr_int\x18\x0b\x20\x01(\x01R\x07accrInt\x12\x1f\n\x0bsec\
    _setdate\x18\x0c\x20\x01(\x03R\nsecSetdate\x12\x18\n\x08as_on_dt\x18\r\
    \x20\x01(\x03R\x06asOnDt\x12\x10\n\x03ccy\x18\x0e\x20\x01(\tR\x03ccy\x12\
    \x1c\n\nnxt_rep_dt\x18\x0f\x20\x01(\x03R\x08nxtRepDt\x12'\n\tcashflows\
    \x18\x10\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}