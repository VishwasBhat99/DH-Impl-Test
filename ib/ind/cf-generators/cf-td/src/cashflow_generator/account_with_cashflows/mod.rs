// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_amt",
                |m: &Cashflow| { &m.int_amt },
                |m: &mut Cashflow| { &mut m.int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "prin_amt",
                |m: &Cashflow| { &m.prin_amt },
                |m: &mut Cashflow| { &mut m.prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub key_1: ::std::string::String,
    pub branch_no: ::std::string::String,
    pub curr_status: ::std::string::String,
    pub acc_type: ::std::string::String,
    pub int_cat: ::std::string::String,
    pub inv_type: ::std::string::String,
    pub currency: ::std::string::String,
    pub customer_no: ::std::string::String,
    pub cr_limit: f64,
    pub curr_bal: f64,
    pub wdl_flag: ::std::string::String,
    pub int_available: f64,
    pub int_proj: f64,
    pub acct_open_dt: i64,
    pub int_frm_dt: i64,
    pub int_to_dt: i64,
    pub no_dues: f64,
    pub var_int_rate: f64,
    pub rval_ind: f64,
    pub mat_dt: i64,
    pub mat_amt: f64,
    pub lst_rollovr_dt: i64,
    pub lst_ovr_limit_dt: i64,
    pub cr_store_rate: f64,
    pub dr_store_rate: f64,
    pub gl_class_code: ::std::string::String,
    pub mop_type: ::std::string::String,
    pub instl_due_day: i64,
    pub term_int_comp_freq: i64,
    pub term_int_comp_sop_dt: i64,
    pub term_int_comp_eop_dt: i64,
    pub term_int_comp_amt: f64,
    pub lending_status: ::std::string::String,
    pub int_repay_freq: i64,
    pub name: ::std::string::String,
    pub cust_acct_no: ::std::string::String,
    pub prim_acct: ::std::string::String,
    pub segment_code: ::std::string::String,
    pub industry_code: ::std::string::String,
    pub group_code: ::std::string::String,
    pub bus_sector_code: ::std::string::String,
    pub tier_cust_type: ::std::string::String,
    pub a1: ::std::string::String,
    pub a2: ::std::string::String,
    pub a3: ::std::string::String,
    pub a4: ::std::string::String,
    pub a5: ::std::string::String,
    pub a6: ::std::string::String,
    pub a7: ::std::string::String,
    pub a8: ::std::string::String,
    pub a9: ::std::string::String,
    pub a10: ::std::string::String,
    pub glcode: ::std::string::String,
    pub int_rate: f64,
    pub curr_bal_lcy: f64,
    pub as_on_date: i64,
    pub residual_days: i64,
    pub tot_int_amt: f64,
    pub tot_prin_amt: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string key_1 = 1;


    pub fn get_key_1(&self) -> &str {
        &self.key_1
    }
    pub fn clear_key_1(&mut self) {
        self.key_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_key_1(&mut self, v: ::std::string::String) {
        self.key_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_1(&mut self) -> &mut ::std::string::String {
        &mut self.key_1
    }

    // Take field
    pub fn take_key_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key_1, ::std::string::String::new())
    }

    // string branch_no = 2;


    pub fn get_branch_no(&self) -> &str {
        &self.branch_no
    }
    pub fn clear_branch_no(&mut self) {
        self.branch_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch_no(&mut self, v: ::std::string::String) {
        self.branch_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch_no(&mut self) -> &mut ::std::string::String {
        &mut self.branch_no
    }

    // Take field
    pub fn take_branch_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch_no, ::std::string::String::new())
    }

    // string curr_status = 3;


    pub fn get_curr_status(&self) -> &str {
        &self.curr_status
    }
    pub fn clear_curr_status(&mut self) {
        self.curr_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_curr_status(&mut self, v: ::std::string::String) {
        self.curr_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_curr_status(&mut self) -> &mut ::std::string::String {
        &mut self.curr_status
    }

    // Take field
    pub fn take_curr_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.curr_status, ::std::string::String::new())
    }

    // string acc_type = 4;


    pub fn get_acc_type(&self) -> &str {
        &self.acc_type
    }
    pub fn clear_acc_type(&mut self) {
        self.acc_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_type(&mut self, v: ::std::string::String) {
        self.acc_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_type(&mut self) -> &mut ::std::string::String {
        &mut self.acc_type
    }

    // Take field
    pub fn take_acc_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_type, ::std::string::String::new())
    }

    // string int_cat = 5;


    pub fn get_int_cat(&self) -> &str {
        &self.int_cat
    }
    pub fn clear_int_cat(&mut self) {
        self.int_cat.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_cat(&mut self, v: ::std::string::String) {
        self.int_cat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_cat(&mut self) -> &mut ::std::string::String {
        &mut self.int_cat
    }

    // Take field
    pub fn take_int_cat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_cat, ::std::string::String::new())
    }

    // string inv_type = 6;


    pub fn get_inv_type(&self) -> &str {
        &self.inv_type
    }
    pub fn clear_inv_type(&mut self) {
        self.inv_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_inv_type(&mut self, v: ::std::string::String) {
        self.inv_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inv_type(&mut self) -> &mut ::std::string::String {
        &mut self.inv_type
    }

    // Take field
    pub fn take_inv_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.inv_type, ::std::string::String::new())
    }

    // string currency = 7;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // string customer_no = 8;


    pub fn get_customer_no(&self) -> &str {
        &self.customer_no
    }
    pub fn clear_customer_no(&mut self) {
        self.customer_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_no(&mut self, v: ::std::string::String) {
        self.customer_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_no(&mut self) -> &mut ::std::string::String {
        &mut self.customer_no
    }

    // Take field
    pub fn take_customer_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_no, ::std::string::String::new())
    }

    // double cr_limit = 9;


    pub fn get_cr_limit(&self) -> f64 {
        self.cr_limit
    }
    pub fn clear_cr_limit(&mut self) {
        self.cr_limit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cr_limit(&mut self, v: f64) {
        self.cr_limit = v;
    }

    // double curr_bal = 10;


    pub fn get_curr_bal(&self) -> f64 {
        self.curr_bal
    }
    pub fn clear_curr_bal(&mut self) {
        self.curr_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_curr_bal(&mut self, v: f64) {
        self.curr_bal = v;
    }

    // string wdl_flag = 11;


    pub fn get_wdl_flag(&self) -> &str {
        &self.wdl_flag
    }
    pub fn clear_wdl_flag(&mut self) {
        self.wdl_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_wdl_flag(&mut self, v: ::std::string::String) {
        self.wdl_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_wdl_flag(&mut self) -> &mut ::std::string::String {
        &mut self.wdl_flag
    }

    // Take field
    pub fn take_wdl_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.wdl_flag, ::std::string::String::new())
    }

    // double int_available = 12;


    pub fn get_int_available(&self) -> f64 {
        self.int_available
    }
    pub fn clear_int_available(&mut self) {
        self.int_available = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_available(&mut self, v: f64) {
        self.int_available = v;
    }

    // double int_proj = 13;


    pub fn get_int_proj(&self) -> f64 {
        self.int_proj
    }
    pub fn clear_int_proj(&mut self) {
        self.int_proj = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_proj(&mut self, v: f64) {
        self.int_proj = v;
    }

    // int64 acct_open_dt = 14;


    pub fn get_acct_open_dt(&self) -> i64 {
        self.acct_open_dt
    }
    pub fn clear_acct_open_dt(&mut self) {
        self.acct_open_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_acct_open_dt(&mut self, v: i64) {
        self.acct_open_dt = v;
    }

    // int64 int_frm_dt = 15;


    pub fn get_int_frm_dt(&self) -> i64 {
        self.int_frm_dt
    }
    pub fn clear_int_frm_dt(&mut self) {
        self.int_frm_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_frm_dt(&mut self, v: i64) {
        self.int_frm_dt = v;
    }

    // int64 int_to_dt = 16;


    pub fn get_int_to_dt(&self) -> i64 {
        self.int_to_dt
    }
    pub fn clear_int_to_dt(&mut self) {
        self.int_to_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_to_dt(&mut self, v: i64) {
        self.int_to_dt = v;
    }

    // double no_dues = 17;


    pub fn get_no_dues(&self) -> f64 {
        self.no_dues
    }
    pub fn clear_no_dues(&mut self) {
        self.no_dues = 0.;
    }

    // Param is passed by value, moved
    pub fn set_no_dues(&mut self, v: f64) {
        self.no_dues = v;
    }

    // double var_int_rate = 18;


    pub fn get_var_int_rate(&self) -> f64 {
        self.var_int_rate
    }
    pub fn clear_var_int_rate(&mut self) {
        self.var_int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_var_int_rate(&mut self, v: f64) {
        self.var_int_rate = v;
    }

    // double rval_ind = 19;


    pub fn get_rval_ind(&self) -> f64 {
        self.rval_ind
    }
    pub fn clear_rval_ind(&mut self) {
        self.rval_ind = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rval_ind(&mut self, v: f64) {
        self.rval_ind = v;
    }

    // int64 mat_dt = 20;


    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }
    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    // double mat_amt = 21;


    pub fn get_mat_amt(&self) -> f64 {
        self.mat_amt
    }
    pub fn clear_mat_amt(&mut self) {
        self.mat_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mat_amt(&mut self, v: f64) {
        self.mat_amt = v;
    }

    // int64 lst_rollovr_dt = 22;


    pub fn get_lst_rollovr_dt(&self) -> i64 {
        self.lst_rollovr_dt
    }
    pub fn clear_lst_rollovr_dt(&mut self) {
        self.lst_rollovr_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_lst_rollovr_dt(&mut self, v: i64) {
        self.lst_rollovr_dt = v;
    }

    // int64 lst_ovr_limit_dt = 23;


    pub fn get_lst_ovr_limit_dt(&self) -> i64 {
        self.lst_ovr_limit_dt
    }
    pub fn clear_lst_ovr_limit_dt(&mut self) {
        self.lst_ovr_limit_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_lst_ovr_limit_dt(&mut self, v: i64) {
        self.lst_ovr_limit_dt = v;
    }

    // double cr_store_rate = 24;


    pub fn get_cr_store_rate(&self) -> f64 {
        self.cr_store_rate
    }
    pub fn clear_cr_store_rate(&mut self) {
        self.cr_store_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cr_store_rate(&mut self, v: f64) {
        self.cr_store_rate = v;
    }

    // double dr_store_rate = 25;


    pub fn get_dr_store_rate(&self) -> f64 {
        self.dr_store_rate
    }
    pub fn clear_dr_store_rate(&mut self) {
        self.dr_store_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dr_store_rate(&mut self, v: f64) {
        self.dr_store_rate = v;
    }

    // string gl_class_code = 26;


    pub fn get_gl_class_code(&self) -> &str {
        &self.gl_class_code
    }
    pub fn clear_gl_class_code(&mut self) {
        self.gl_class_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_class_code(&mut self, v: ::std::string::String) {
        self.gl_class_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_class_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_class_code
    }

    // Take field
    pub fn take_gl_class_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_class_code, ::std::string::String::new())
    }

    // string mop_type = 27;


    pub fn get_mop_type(&self) -> &str {
        &self.mop_type
    }
    pub fn clear_mop_type(&mut self) {
        self.mop_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_mop_type(&mut self, v: ::std::string::String) {
        self.mop_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mop_type(&mut self) -> &mut ::std::string::String {
        &mut self.mop_type
    }

    // Take field
    pub fn take_mop_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mop_type, ::std::string::String::new())
    }

    // int64 instl_due_day = 28;


    pub fn get_instl_due_day(&self) -> i64 {
        self.instl_due_day
    }
    pub fn clear_instl_due_day(&mut self) {
        self.instl_due_day = 0;
    }

    // Param is passed by value, moved
    pub fn set_instl_due_day(&mut self, v: i64) {
        self.instl_due_day = v;
    }

    // int64 term_int_comp_freq = 29;


    pub fn get_term_int_comp_freq(&self) -> i64 {
        self.term_int_comp_freq
    }
    pub fn clear_term_int_comp_freq(&mut self) {
        self.term_int_comp_freq = 0;
    }

    // Param is passed by value, moved
    pub fn set_term_int_comp_freq(&mut self, v: i64) {
        self.term_int_comp_freq = v;
    }

    // int64 term_int_comp_sop_dt = 30;


    pub fn get_term_int_comp_sop_dt(&self) -> i64 {
        self.term_int_comp_sop_dt
    }
    pub fn clear_term_int_comp_sop_dt(&mut self) {
        self.term_int_comp_sop_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_term_int_comp_sop_dt(&mut self, v: i64) {
        self.term_int_comp_sop_dt = v;
    }

    // int64 term_int_comp_eop_dt = 31;


    pub fn get_term_int_comp_eop_dt(&self) -> i64 {
        self.term_int_comp_eop_dt
    }
    pub fn clear_term_int_comp_eop_dt(&mut self) {
        self.term_int_comp_eop_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_term_int_comp_eop_dt(&mut self, v: i64) {
        self.term_int_comp_eop_dt = v;
    }

    // double term_int_comp_amt = 32;


    pub fn get_term_int_comp_amt(&self) -> f64 {
        self.term_int_comp_amt
    }
    pub fn clear_term_int_comp_amt(&mut self) {
        self.term_int_comp_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_term_int_comp_amt(&mut self, v: f64) {
        self.term_int_comp_amt = v;
    }

    // string lending_status = 33;


    pub fn get_lending_status(&self) -> &str {
        &self.lending_status
    }
    pub fn clear_lending_status(&mut self) {
        self.lending_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_lending_status(&mut self, v: ::std::string::String) {
        self.lending_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lending_status(&mut self) -> &mut ::std::string::String {
        &mut self.lending_status
    }

    // Take field
    pub fn take_lending_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lending_status, ::std::string::String::new())
    }

    // int64 int_repay_freq = 34;


    pub fn get_int_repay_freq(&self) -> i64 {
        self.int_repay_freq
    }
    pub fn clear_int_repay_freq(&mut self) {
        self.int_repay_freq = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_repay_freq(&mut self, v: i64) {
        self.int_repay_freq = v;
    }

    // string name = 35;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string cust_acct_no = 36;


    pub fn get_cust_acct_no(&self) -> &str {
        &self.cust_acct_no
    }
    pub fn clear_cust_acct_no(&mut self) {
        self.cust_acct_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_acct_no(&mut self, v: ::std::string::String) {
        self.cust_acct_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_acct_no(&mut self) -> &mut ::std::string::String {
        &mut self.cust_acct_no
    }

    // Take field
    pub fn take_cust_acct_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_acct_no, ::std::string::String::new())
    }

    // string prim_acct = 37;


    pub fn get_prim_acct(&self) -> &str {
        &self.prim_acct
    }
    pub fn clear_prim_acct(&mut self) {
        self.prim_acct.clear();
    }

    // Param is passed by value, moved
    pub fn set_prim_acct(&mut self, v: ::std::string::String) {
        self.prim_acct = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prim_acct(&mut self) -> &mut ::std::string::String {
        &mut self.prim_acct
    }

    // Take field
    pub fn take_prim_acct(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prim_acct, ::std::string::String::new())
    }

    // string segment_code = 38;


    pub fn get_segment_code(&self) -> &str {
        &self.segment_code
    }
    pub fn clear_segment_code(&mut self) {
        self.segment_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_segment_code(&mut self, v: ::std::string::String) {
        self.segment_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_segment_code(&mut self) -> &mut ::std::string::String {
        &mut self.segment_code
    }

    // Take field
    pub fn take_segment_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.segment_code, ::std::string::String::new())
    }

    // string industry_code = 39;


    pub fn get_industry_code(&self) -> &str {
        &self.industry_code
    }
    pub fn clear_industry_code(&mut self) {
        self.industry_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_industry_code(&mut self, v: ::std::string::String) {
        self.industry_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_industry_code(&mut self) -> &mut ::std::string::String {
        &mut self.industry_code
    }

    // Take field
    pub fn take_industry_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.industry_code, ::std::string::String::new())
    }

    // string group_code = 40;


    pub fn get_group_code(&self) -> &str {
        &self.group_code
    }
    pub fn clear_group_code(&mut self) {
        self.group_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_group_code(&mut self, v: ::std::string::String) {
        self.group_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group_code(&mut self) -> &mut ::std::string::String {
        &mut self.group_code
    }

    // Take field
    pub fn take_group_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group_code, ::std::string::String::new())
    }

    // string bus_sector_code = 41;


    pub fn get_bus_sector_code(&self) -> &str {
        &self.bus_sector_code
    }
    pub fn clear_bus_sector_code(&mut self) {
        self.bus_sector_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_bus_sector_code(&mut self, v: ::std::string::String) {
        self.bus_sector_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bus_sector_code(&mut self) -> &mut ::std::string::String {
        &mut self.bus_sector_code
    }

    // Take field
    pub fn take_bus_sector_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bus_sector_code, ::std::string::String::new())
    }

    // string tier_cust_type = 42;


    pub fn get_tier_cust_type(&self) -> &str {
        &self.tier_cust_type
    }
    pub fn clear_tier_cust_type(&mut self) {
        self.tier_cust_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_tier_cust_type(&mut self, v: ::std::string::String) {
        self.tier_cust_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tier_cust_type(&mut self) -> &mut ::std::string::String {
        &mut self.tier_cust_type
    }

    // Take field
    pub fn take_tier_cust_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tier_cust_type, ::std::string::String::new())
    }

    // string a1 = 43;


    pub fn get_a1(&self) -> &str {
        &self.a1
    }
    pub fn clear_a1(&mut self) {
        self.a1.clear();
    }

    // Param is passed by value, moved
    pub fn set_a1(&mut self, v: ::std::string::String) {
        self.a1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a1(&mut self) -> &mut ::std::string::String {
        &mut self.a1
    }

    // Take field
    pub fn take_a1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a1, ::std::string::String::new())
    }

    // string a2 = 44;


    pub fn get_a2(&self) -> &str {
        &self.a2
    }
    pub fn clear_a2(&mut self) {
        self.a2.clear();
    }

    // Param is passed by value, moved
    pub fn set_a2(&mut self, v: ::std::string::String) {
        self.a2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a2(&mut self) -> &mut ::std::string::String {
        &mut self.a2
    }

    // Take field
    pub fn take_a2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a2, ::std::string::String::new())
    }

    // string a3 = 45;


    pub fn get_a3(&self) -> &str {
        &self.a3
    }
    pub fn clear_a3(&mut self) {
        self.a3.clear();
    }

    // Param is passed by value, moved
    pub fn set_a3(&mut self, v: ::std::string::String) {
        self.a3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a3(&mut self) -> &mut ::std::string::String {
        &mut self.a3
    }

    // Take field
    pub fn take_a3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a3, ::std::string::String::new())
    }

    // string a4 = 46;


    pub fn get_a4(&self) -> &str {
        &self.a4
    }
    pub fn clear_a4(&mut self) {
        self.a4.clear();
    }

    // Param is passed by value, moved
    pub fn set_a4(&mut self, v: ::std::string::String) {
        self.a4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a4(&mut self) -> &mut ::std::string::String {
        &mut self.a4
    }

    // Take field
    pub fn take_a4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a4, ::std::string::String::new())
    }

    // string a5 = 47;


    pub fn get_a5(&self) -> &str {
        &self.a5
    }
    pub fn clear_a5(&mut self) {
        self.a5.clear();
    }

    // Param is passed by value, moved
    pub fn set_a5(&mut self, v: ::std::string::String) {
        self.a5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a5(&mut self) -> &mut ::std::string::String {
        &mut self.a5
    }

    // Take field
    pub fn take_a5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a5, ::std::string::String::new())
    }

    // string a6 = 48;


    pub fn get_a6(&self) -> &str {
        &self.a6
    }
    pub fn clear_a6(&mut self) {
        self.a6.clear();
    }

    // Param is passed by value, moved
    pub fn set_a6(&mut self, v: ::std::string::String) {
        self.a6 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a6(&mut self) -> &mut ::std::string::String {
        &mut self.a6
    }

    // Take field
    pub fn take_a6(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a6, ::std::string::String::new())
    }

    // string a7 = 49;


    pub fn get_a7(&self) -> &str {
        &self.a7
    }
    pub fn clear_a7(&mut self) {
        self.a7.clear();
    }

    // Param is passed by value, moved
    pub fn set_a7(&mut self, v: ::std::string::String) {
        self.a7 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a7(&mut self) -> &mut ::std::string::String {
        &mut self.a7
    }

    // Take field
    pub fn take_a7(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a7, ::std::string::String::new())
    }

    // string a8 = 50;


    pub fn get_a8(&self) -> &str {
        &self.a8
    }
    pub fn clear_a8(&mut self) {
        self.a8.clear();
    }

    // Param is passed by value, moved
    pub fn set_a8(&mut self, v: ::std::string::String) {
        self.a8 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a8(&mut self) -> &mut ::std::string::String {
        &mut self.a8
    }

    // Take field
    pub fn take_a8(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a8, ::std::string::String::new())
    }

    // string a9 = 51;


    pub fn get_a9(&self) -> &str {
        &self.a9
    }
    pub fn clear_a9(&mut self) {
        self.a9.clear();
    }

    // Param is passed by value, moved
    pub fn set_a9(&mut self, v: ::std::string::String) {
        self.a9 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a9(&mut self) -> &mut ::std::string::String {
        &mut self.a9
    }

    // Take field
    pub fn take_a9(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a9, ::std::string::String::new())
    }

    // string a10 = 52;


    pub fn get_a10(&self) -> &str {
        &self.a10
    }
    pub fn clear_a10(&mut self) {
        self.a10.clear();
    }

    // Param is passed by value, moved
    pub fn set_a10(&mut self, v: ::std::string::String) {
        self.a10 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a10(&mut self) -> &mut ::std::string::String {
        &mut self.a10
    }

    // Take field
    pub fn take_a10(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a10, ::std::string::String::new())
    }

    // string glcode = 53;


    pub fn get_glcode(&self) -> &str {
        &self.glcode
    }
    pub fn clear_glcode(&mut self) {
        self.glcode.clear();
    }

    // Param is passed by value, moved
    pub fn set_glcode(&mut self, v: ::std::string::String) {
        self.glcode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_glcode(&mut self) -> &mut ::std::string::String {
        &mut self.glcode
    }

    // Take field
    pub fn take_glcode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.glcode, ::std::string::String::new())
    }

    // double int_rate = 54;


    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }
    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    // double curr_bal_lcy = 55;


    pub fn get_curr_bal_lcy(&self) -> f64 {
        self.curr_bal_lcy
    }
    pub fn clear_curr_bal_lcy(&mut self) {
        self.curr_bal_lcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_curr_bal_lcy(&mut self, v: f64) {
        self.curr_bal_lcy = v;
    }

    // int64 as_on_date = 56;


    pub fn get_as_on_date(&self) -> i64 {
        self.as_on_date
    }
    pub fn clear_as_on_date(&mut self) {
        self.as_on_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on_date(&mut self, v: i64) {
        self.as_on_date = v;
    }

    // int64 residual_days = 57;


    pub fn get_residual_days(&self) -> i64 {
        self.residual_days
    }
    pub fn clear_residual_days(&mut self) {
        self.residual_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_residual_days(&mut self, v: i64) {
        self.residual_days = v;
    }

    // double tot_int_amt = 58;


    pub fn get_tot_int_amt(&self) -> f64 {
        self.tot_int_amt
    }
    pub fn clear_tot_int_amt(&mut self) {
        self.tot_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_int_amt(&mut self, v: f64) {
        self.tot_int_amt = v;
    }

    // double tot_prin_amt = 59;


    pub fn get_tot_prin_amt(&self) -> f64 {
        self.tot_prin_amt
    }
    pub fn clear_tot_prin_amt(&mut self) {
        self.tot_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_prin_amt(&mut self, v: f64) {
        self.tot_prin_amt = v;
    }

    // repeated .Cashflow cashflows = 60;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key_1)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch_no)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.curr_status)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_type)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_cat)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.inv_type)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_no)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.cr_limit = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.curr_bal = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.wdl_flag)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_available = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_proj = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acct_open_dt = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int_frm_dt = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int_to_dt = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.no_dues = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.var_int_rate = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rval_ind = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.mat_amt = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lst_rollovr_dt = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lst_ovr_limit_dt = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.cr_store_rate = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.dr_store_rate = tmp;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_class_code)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mop_type)?;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.instl_due_day = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.term_int_comp_freq = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.term_int_comp_sop_dt = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.term_int_comp_eop_dt = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.term_int_comp_amt = tmp;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lending_status)?;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int_repay_freq = tmp;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_acct_no)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prim_acct)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.segment_code)?;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.industry_code)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group_code)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bus_sector_code)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tier_cust_type)?;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a1)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a2)?;
                },
                45 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a3)?;
                },
                46 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a4)?;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a5)?;
                },
                48 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a6)?;
                },
                49 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a7)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a8)?;
                },
                51 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a9)?;
                },
                52 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a10)?;
                },
                53 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.glcode)?;
                },
                54 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                55 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.curr_bal_lcy = tmp;
                },
                56 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on_date = tmp;
                },
                57 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.residual_days = tmp;
                },
                58 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_int_amt = tmp;
                },
                59 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_prin_amt = tmp;
                },
                60 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key_1.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key_1);
        }
        if !self.branch_no.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.branch_no);
        }
        if !self.curr_status.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.curr_status);
        }
        if !self.acc_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.acc_type);
        }
        if !self.int_cat.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.int_cat);
        }
        if !self.inv_type.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.inv_type);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.currency);
        }
        if !self.customer_no.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.customer_no);
        }
        if self.cr_limit != 0. {
            my_size += 9;
        }
        if self.curr_bal != 0. {
            my_size += 9;
        }
        if !self.wdl_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.wdl_flag);
        }
        if self.int_available != 0. {
            my_size += 9;
        }
        if self.int_proj != 0. {
            my_size += 9;
        }
        if self.acct_open_dt != 0 {
            my_size += ::protobuf::rt::value_size(14, self.acct_open_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_frm_dt != 0 {
            my_size += ::protobuf::rt::value_size(15, self.int_frm_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_to_dt != 0 {
            my_size += ::protobuf::rt::value_size(16, self.int_to_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.no_dues != 0. {
            my_size += 10;
        }
        if self.var_int_rate != 0. {
            my_size += 10;
        }
        if self.rval_ind != 0. {
            my_size += 10;
        }
        if self.mat_dt != 0 {
            my_size += ::protobuf::rt::value_size(20, self.mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mat_amt != 0. {
            my_size += 10;
        }
        if self.lst_rollovr_dt != 0 {
            my_size += ::protobuf::rt::value_size(22, self.lst_rollovr_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lst_ovr_limit_dt != 0 {
            my_size += ::protobuf::rt::value_size(23, self.lst_ovr_limit_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cr_store_rate != 0. {
            my_size += 10;
        }
        if self.dr_store_rate != 0. {
            my_size += 10;
        }
        if !self.gl_class_code.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.gl_class_code);
        }
        if !self.mop_type.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.mop_type);
        }
        if self.instl_due_day != 0 {
            my_size += ::protobuf::rt::value_size(28, self.instl_due_day, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.term_int_comp_freq != 0 {
            my_size += ::protobuf::rt::value_size(29, self.term_int_comp_freq, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.term_int_comp_sop_dt != 0 {
            my_size += ::protobuf::rt::value_size(30, self.term_int_comp_sop_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.term_int_comp_eop_dt != 0 {
            my_size += ::protobuf::rt::value_size(31, self.term_int_comp_eop_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.term_int_comp_amt != 0. {
            my_size += 10;
        }
        if !self.lending_status.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.lending_status);
        }
        if self.int_repay_freq != 0 {
            my_size += ::protobuf::rt::value_size(34, self.int_repay_freq, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.name);
        }
        if !self.cust_acct_no.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.cust_acct_no);
        }
        if !self.prim_acct.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.prim_acct);
        }
        if !self.segment_code.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.segment_code);
        }
        if !self.industry_code.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.industry_code);
        }
        if !self.group_code.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.group_code);
        }
        if !self.bus_sector_code.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.bus_sector_code);
        }
        if !self.tier_cust_type.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.tier_cust_type);
        }
        if !self.a1.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.a1);
        }
        if !self.a2.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.a2);
        }
        if !self.a3.is_empty() {
            my_size += ::protobuf::rt::string_size(45, &self.a3);
        }
        if !self.a4.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.a4);
        }
        if !self.a5.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.a5);
        }
        if !self.a6.is_empty() {
            my_size += ::protobuf::rt::string_size(48, &self.a6);
        }
        if !self.a7.is_empty() {
            my_size += ::protobuf::rt::string_size(49, &self.a7);
        }
        if !self.a8.is_empty() {
            my_size += ::protobuf::rt::string_size(50, &self.a8);
        }
        if !self.a9.is_empty() {
            my_size += ::protobuf::rt::string_size(51, &self.a9);
        }
        if !self.a10.is_empty() {
            my_size += ::protobuf::rt::string_size(52, &self.a10);
        }
        if !self.glcode.is_empty() {
            my_size += ::protobuf::rt::string_size(53, &self.glcode);
        }
        if self.int_rate != 0. {
            my_size += 10;
        }
        if self.curr_bal_lcy != 0. {
            my_size += 10;
        }
        if self.as_on_date != 0 {
            my_size += ::protobuf::rt::value_size(56, self.as_on_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.residual_days != 0 {
            my_size += ::protobuf::rt::value_size(57, self.residual_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tot_int_amt != 0. {
            my_size += 10;
        }
        if self.tot_prin_amt != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key_1.is_empty() {
            os.write_string(1, &self.key_1)?;
        }
        if !self.branch_no.is_empty() {
            os.write_string(2, &self.branch_no)?;
        }
        if !self.curr_status.is_empty() {
            os.write_string(3, &self.curr_status)?;
        }
        if !self.acc_type.is_empty() {
            os.write_string(4, &self.acc_type)?;
        }
        if !self.int_cat.is_empty() {
            os.write_string(5, &self.int_cat)?;
        }
        if !self.inv_type.is_empty() {
            os.write_string(6, &self.inv_type)?;
        }
        if !self.currency.is_empty() {
            os.write_string(7, &self.currency)?;
        }
        if !self.customer_no.is_empty() {
            os.write_string(8, &self.customer_no)?;
        }
        if self.cr_limit != 0. {
            os.write_double(9, self.cr_limit)?;
        }
        if self.curr_bal != 0. {
            os.write_double(10, self.curr_bal)?;
        }
        if !self.wdl_flag.is_empty() {
            os.write_string(11, &self.wdl_flag)?;
        }
        if self.int_available != 0. {
            os.write_double(12, self.int_available)?;
        }
        if self.int_proj != 0. {
            os.write_double(13, self.int_proj)?;
        }
        if self.acct_open_dt != 0 {
            os.write_int64(14, self.acct_open_dt)?;
        }
        if self.int_frm_dt != 0 {
            os.write_int64(15, self.int_frm_dt)?;
        }
        if self.int_to_dt != 0 {
            os.write_int64(16, self.int_to_dt)?;
        }
        if self.no_dues != 0. {
            os.write_double(17, self.no_dues)?;
        }
        if self.var_int_rate != 0. {
            os.write_double(18, self.var_int_rate)?;
        }
        if self.rval_ind != 0. {
            os.write_double(19, self.rval_ind)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(20, self.mat_dt)?;
        }
        if self.mat_amt != 0. {
            os.write_double(21, self.mat_amt)?;
        }
        if self.lst_rollovr_dt != 0 {
            os.write_int64(22, self.lst_rollovr_dt)?;
        }
        if self.lst_ovr_limit_dt != 0 {
            os.write_int64(23, self.lst_ovr_limit_dt)?;
        }
        if self.cr_store_rate != 0. {
            os.write_double(24, self.cr_store_rate)?;
        }
        if self.dr_store_rate != 0. {
            os.write_double(25, self.dr_store_rate)?;
        }
        if !self.gl_class_code.is_empty() {
            os.write_string(26, &self.gl_class_code)?;
        }
        if !self.mop_type.is_empty() {
            os.write_string(27, &self.mop_type)?;
        }
        if self.instl_due_day != 0 {
            os.write_int64(28, self.instl_due_day)?;
        }
        if self.term_int_comp_freq != 0 {
            os.write_int64(29, self.term_int_comp_freq)?;
        }
        if self.term_int_comp_sop_dt != 0 {
            os.write_int64(30, self.term_int_comp_sop_dt)?;
        }
        if self.term_int_comp_eop_dt != 0 {
            os.write_int64(31, self.term_int_comp_eop_dt)?;
        }
        if self.term_int_comp_amt != 0. {
            os.write_double(32, self.term_int_comp_amt)?;
        }
        if !self.lending_status.is_empty() {
            os.write_string(33, &self.lending_status)?;
        }
        if self.int_repay_freq != 0 {
            os.write_int64(34, self.int_repay_freq)?;
        }
        if !self.name.is_empty() {
            os.write_string(35, &self.name)?;
        }
        if !self.cust_acct_no.is_empty() {
            os.write_string(36, &self.cust_acct_no)?;
        }
        if !self.prim_acct.is_empty() {
            os.write_string(37, &self.prim_acct)?;
        }
        if !self.segment_code.is_empty() {
            os.write_string(38, &self.segment_code)?;
        }
        if !self.industry_code.is_empty() {
            os.write_string(39, &self.industry_code)?;
        }
        if !self.group_code.is_empty() {
            os.write_string(40, &self.group_code)?;
        }
        if !self.bus_sector_code.is_empty() {
            os.write_string(41, &self.bus_sector_code)?;
        }
        if !self.tier_cust_type.is_empty() {
            os.write_string(42, &self.tier_cust_type)?;
        }
        if !self.a1.is_empty() {
            os.write_string(43, &self.a1)?;
        }
        if !self.a2.is_empty() {
            os.write_string(44, &self.a2)?;
        }
        if !self.a3.is_empty() {
            os.write_string(45, &self.a3)?;
        }
        if !self.a4.is_empty() {
            os.write_string(46, &self.a4)?;
        }
        if !self.a5.is_empty() {
            os.write_string(47, &self.a5)?;
        }
        if !self.a6.is_empty() {
            os.write_string(48, &self.a6)?;
        }
        if !self.a7.is_empty() {
            os.write_string(49, &self.a7)?;
        }
        if !self.a8.is_empty() {
            os.write_string(50, &self.a8)?;
        }
        if !self.a9.is_empty() {
            os.write_string(51, &self.a9)?;
        }
        if !self.a10.is_empty() {
            os.write_string(52, &self.a10)?;
        }
        if !self.glcode.is_empty() {
            os.write_string(53, &self.glcode)?;
        }
        if self.int_rate != 0. {
            os.write_double(54, self.int_rate)?;
        }
        if self.curr_bal_lcy != 0. {
            os.write_double(55, self.curr_bal_lcy)?;
        }
        if self.as_on_date != 0 {
            os.write_int64(56, self.as_on_date)?;
        }
        if self.residual_days != 0 {
            os.write_int64(57, self.residual_days)?;
        }
        if self.tot_int_amt != 0. {
            os.write_double(58, self.tot_int_amt)?;
        }
        if self.tot_prin_amt != 0. {
            os.write_double(59, self.tot_prin_amt)?;
        }
        for v in &self.cashflows {
            os.write_tag(60, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key_1",
                |m: &AccountWithCashflows| { &m.key_1 },
                |m: &mut AccountWithCashflows| { &mut m.key_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "branch_no",
                |m: &AccountWithCashflows| { &m.branch_no },
                |m: &mut AccountWithCashflows| { &mut m.branch_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "curr_status",
                |m: &AccountWithCashflows| { &m.curr_status },
                |m: &mut AccountWithCashflows| { &mut m.curr_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acc_type",
                |m: &AccountWithCashflows| { &m.acc_type },
                |m: &mut AccountWithCashflows| { &mut m.acc_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_cat",
                |m: &AccountWithCashflows| { &m.int_cat },
                |m: &mut AccountWithCashflows| { &mut m.int_cat },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "inv_type",
                |m: &AccountWithCashflows| { &m.inv_type },
                |m: &mut AccountWithCashflows| { &mut m.inv_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &AccountWithCashflows| { &m.currency },
                |m: &mut AccountWithCashflows| { &mut m.currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_no",
                |m: &AccountWithCashflows| { &m.customer_no },
                |m: &mut AccountWithCashflows| { &mut m.customer_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "cr_limit",
                |m: &AccountWithCashflows| { &m.cr_limit },
                |m: &mut AccountWithCashflows| { &mut m.cr_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "curr_bal",
                |m: &AccountWithCashflows| { &m.curr_bal },
                |m: &mut AccountWithCashflows| { &mut m.curr_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "wdl_flag",
                |m: &AccountWithCashflows| { &m.wdl_flag },
                |m: &mut AccountWithCashflows| { &mut m.wdl_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_available",
                |m: &AccountWithCashflows| { &m.int_available },
                |m: &mut AccountWithCashflows| { &mut m.int_available },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_proj",
                |m: &AccountWithCashflows| { &m.int_proj },
                |m: &mut AccountWithCashflows| { &mut m.int_proj },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "acct_open_dt",
                |m: &AccountWithCashflows| { &m.acct_open_dt },
                |m: &mut AccountWithCashflows| { &mut m.acct_open_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "int_frm_dt",
                |m: &AccountWithCashflows| { &m.int_frm_dt },
                |m: &mut AccountWithCashflows| { &mut m.int_frm_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "int_to_dt",
                |m: &AccountWithCashflows| { &m.int_to_dt },
                |m: &mut AccountWithCashflows| { &mut m.int_to_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "no_dues",
                |m: &AccountWithCashflows| { &m.no_dues },
                |m: &mut AccountWithCashflows| { &mut m.no_dues },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "var_int_rate",
                |m: &AccountWithCashflows| { &m.var_int_rate },
                |m: &mut AccountWithCashflows| { &mut m.var_int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "rval_ind",
                |m: &AccountWithCashflows| { &m.rval_ind },
                |m: &mut AccountWithCashflows| { &mut m.rval_ind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "mat_dt",
                |m: &AccountWithCashflows| { &m.mat_dt },
                |m: &mut AccountWithCashflows| { &mut m.mat_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "mat_amt",
                |m: &AccountWithCashflows| { &m.mat_amt },
                |m: &mut AccountWithCashflows| { &mut m.mat_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "lst_rollovr_dt",
                |m: &AccountWithCashflows| { &m.lst_rollovr_dt },
                |m: &mut AccountWithCashflows| { &mut m.lst_rollovr_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "lst_ovr_limit_dt",
                |m: &AccountWithCashflows| { &m.lst_ovr_limit_dt },
                |m: &mut AccountWithCashflows| { &mut m.lst_ovr_limit_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "cr_store_rate",
                |m: &AccountWithCashflows| { &m.cr_store_rate },
                |m: &mut AccountWithCashflows| { &mut m.cr_store_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "dr_store_rate",
                |m: &AccountWithCashflows| { &m.dr_store_rate },
                |m: &mut AccountWithCashflows| { &mut m.dr_store_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_class_code",
                |m: &AccountWithCashflows| { &m.gl_class_code },
                |m: &mut AccountWithCashflows| { &mut m.gl_class_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mop_type",
                |m: &AccountWithCashflows| { &m.mop_type },
                |m: &mut AccountWithCashflows| { &mut m.mop_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "instl_due_day",
                |m: &AccountWithCashflows| { &m.instl_due_day },
                |m: &mut AccountWithCashflows| { &mut m.instl_due_day },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "term_int_comp_freq",
                |m: &AccountWithCashflows| { &m.term_int_comp_freq },
                |m: &mut AccountWithCashflows| { &mut m.term_int_comp_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "term_int_comp_sop_dt",
                |m: &AccountWithCashflows| { &m.term_int_comp_sop_dt },
                |m: &mut AccountWithCashflows| { &mut m.term_int_comp_sop_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "term_int_comp_eop_dt",
                |m: &AccountWithCashflows| { &m.term_int_comp_eop_dt },
                |m: &mut AccountWithCashflows| { &mut m.term_int_comp_eop_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "term_int_comp_amt",
                |m: &AccountWithCashflows| { &m.term_int_comp_amt },
                |m: &mut AccountWithCashflows| { &mut m.term_int_comp_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "lending_status",
                |m: &AccountWithCashflows| { &m.lending_status },
                |m: &mut AccountWithCashflows| { &mut m.lending_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "int_repay_freq",
                |m: &AccountWithCashflows| { &m.int_repay_freq },
                |m: &mut AccountWithCashflows| { &mut m.int_repay_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &AccountWithCashflows| { &m.name },
                |m: &mut AccountWithCashflows| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_acct_no",
                |m: &AccountWithCashflows| { &m.cust_acct_no },
                |m: &mut AccountWithCashflows| { &mut m.cust_acct_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prim_acct",
                |m: &AccountWithCashflows| { &m.prim_acct },
                |m: &mut AccountWithCashflows| { &mut m.prim_acct },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "segment_code",
                |m: &AccountWithCashflows| { &m.segment_code },
                |m: &mut AccountWithCashflows| { &mut m.segment_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "industry_code",
                |m: &AccountWithCashflows| { &m.industry_code },
                |m: &mut AccountWithCashflows| { &mut m.industry_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group_code",
                |m: &AccountWithCashflows| { &m.group_code },
                |m: &mut AccountWithCashflows| { &mut m.group_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bus_sector_code",
                |m: &AccountWithCashflows| { &m.bus_sector_code },
                |m: &mut AccountWithCashflows| { &mut m.bus_sector_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tier_cust_type",
                |m: &AccountWithCashflows| { &m.tier_cust_type },
                |m: &mut AccountWithCashflows| { &mut m.tier_cust_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a1",
                |m: &AccountWithCashflows| { &m.a1 },
                |m: &mut AccountWithCashflows| { &mut m.a1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a2",
                |m: &AccountWithCashflows| { &m.a2 },
                |m: &mut AccountWithCashflows| { &mut m.a2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a3",
                |m: &AccountWithCashflows| { &m.a3 },
                |m: &mut AccountWithCashflows| { &mut m.a3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a4",
                |m: &AccountWithCashflows| { &m.a4 },
                |m: &mut AccountWithCashflows| { &mut m.a4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a5",
                |m: &AccountWithCashflows| { &m.a5 },
                |m: &mut AccountWithCashflows| { &mut m.a5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a6",
                |m: &AccountWithCashflows| { &m.a6 },
                |m: &mut AccountWithCashflows| { &mut m.a6 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a7",
                |m: &AccountWithCashflows| { &m.a7 },
                |m: &mut AccountWithCashflows| { &mut m.a7 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a8",
                |m: &AccountWithCashflows| { &m.a8 },
                |m: &mut AccountWithCashflows| { &mut m.a8 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a9",
                |m: &AccountWithCashflows| { &m.a9 },
                |m: &mut AccountWithCashflows| { &mut m.a9 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a10",
                |m: &AccountWithCashflows| { &m.a10 },
                |m: &mut AccountWithCashflows| { &mut m.a10 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "glcode",
                |m: &AccountWithCashflows| { &m.glcode },
                |m: &mut AccountWithCashflows| { &mut m.glcode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_rate",
                |m: &AccountWithCashflows| { &m.int_rate },
                |m: &mut AccountWithCashflows| { &mut m.int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "curr_bal_lcy",
                |m: &AccountWithCashflows| { &m.curr_bal_lcy },
                |m: &mut AccountWithCashflows| { &mut m.curr_bal_lcy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "as_on_date",
                |m: &AccountWithCashflows| { &m.as_on_date },
                |m: &mut AccountWithCashflows| { &mut m.as_on_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "residual_days",
                |m: &AccountWithCashflows| { &m.residual_days },
                |m: &mut AccountWithCashflows| { &mut m.residual_days },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_int_amt",
                |m: &AccountWithCashflows| { &m.tot_int_amt },
                |m: &mut AccountWithCashflows| { &mut m.tot_int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_prin_amt",
                |m: &AccountWithCashflows| { &m.tot_prin_amt },
                |m: &mut AccountWithCashflows| { &mut m.tot_prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.key_1.clear();
        self.branch_no.clear();
        self.curr_status.clear();
        self.acc_type.clear();
        self.int_cat.clear();
        self.inv_type.clear();
        self.currency.clear();
        self.customer_no.clear();
        self.cr_limit = 0.;
        self.curr_bal = 0.;
        self.wdl_flag.clear();
        self.int_available = 0.;
        self.int_proj = 0.;
        self.acct_open_dt = 0;
        self.int_frm_dt = 0;
        self.int_to_dt = 0;
        self.no_dues = 0.;
        self.var_int_rate = 0.;
        self.rval_ind = 0.;
        self.mat_dt = 0;
        self.mat_amt = 0.;
        self.lst_rollovr_dt = 0;
        self.lst_ovr_limit_dt = 0;
        self.cr_store_rate = 0.;
        self.dr_store_rate = 0.;
        self.gl_class_code.clear();
        self.mop_type.clear();
        self.instl_due_day = 0;
        self.term_int_comp_freq = 0;
        self.term_int_comp_sop_dt = 0;
        self.term_int_comp_eop_dt = 0;
        self.term_int_comp_amt = 0.;
        self.lending_status.clear();
        self.int_repay_freq = 0;
        self.name.clear();
        self.cust_acct_no.clear();
        self.prim_acct.clear();
        self.segment_code.clear();
        self.industry_code.clear();
        self.group_code.clear();
        self.bus_sector_code.clear();
        self.tier_cust_type.clear();
        self.a1.clear();
        self.a2.clear();
        self.a3.clear();
        self.a4.clear();
        self.a5.clear();
        self.a6.clear();
        self.a7.clear();
        self.a8.clear();
        self.a9.clear();
        self.a10.clear();
        self.glcode.clear();
        self.int_rate = 0.;
        self.curr_bal_lcy = 0.;
        self.as_on_date = 0;
        self.residual_days = 0;
        self.tot_int_amt = 0.;
        self.tot_prin_amt = 0.;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\
    \x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prin\
    Amt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\x94\x0e\n\x14Accou\
    ntWithCashflows\x12\x13\n\x05key_1\x18\x01\x20\x01(\tR\x04key1\x12\x1b\n\
    \tbranch_no\x18\x02\x20\x01(\tR\x08branchNo\x12\x1f\n\x0bcurr_status\x18\
    \x03\x20\x01(\tR\ncurrStatus\x12\x19\n\x08acc_type\x18\x04\x20\x01(\tR\
    \x07accType\x12\x17\n\x07int_cat\x18\x05\x20\x01(\tR\x06intCat\x12\x19\n\
    \x08inv_type\x18\x06\x20\x01(\tR\x07invType\x12\x1a\n\x08currency\x18\
    \x07\x20\x01(\tR\x08currency\x12\x1f\n\x0bcustomer_no\x18\x08\x20\x01(\t\
    R\ncustomerNo\x12\x19\n\x08cr_limit\x18\t\x20\x01(\x01R\x07crLimit\x12\
    \x19\n\x08curr_bal\x18\n\x20\x01(\x01R\x07currBal\x12\x19\n\x08wdl_flag\
    \x18\x0b\x20\x01(\tR\x07wdlFlag\x12#\n\rint_available\x18\x0c\x20\x01(\
    \x01R\x0cintAvailable\x12\x19\n\x08int_proj\x18\r\x20\x01(\x01R\x07intPr\
    oj\x12\x20\n\x0cacct_open_dt\x18\x0e\x20\x01(\x03R\nacctOpenDt\x12\x1c\n\
    \nint_frm_dt\x18\x0f\x20\x01(\x03R\x08intFrmDt\x12\x1a\n\tint_to_dt\x18\
    \x10\x20\x01(\x03R\x07intToDt\x12\x17\n\x07no_dues\x18\x11\x20\x01(\x01R\
    \x06noDues\x12\x20\n\x0cvar_int_rate\x18\x12\x20\x01(\x01R\nvarIntRate\
    \x12\x19\n\x08rval_ind\x18\x13\x20\x01(\x01R\x07rvalInd\x12\x15\n\x06mat\
    _dt\x18\x14\x20\x01(\x03R\x05matDt\x12\x17\n\x07mat_amt\x18\x15\x20\x01(\
    \x01R\x06matAmt\x12$\n\x0elst_rollovr_dt\x18\x16\x20\x01(\x03R\x0clstRol\
    lovrDt\x12'\n\x10lst_ovr_limit_dt\x18\x17\x20\x01(\x03R\rlstOvrLimitDt\
    \x12\"\n\rcr_store_rate\x18\x18\x20\x01(\x01R\x0bcrStoreRate\x12\"\n\rdr\
    _store_rate\x18\x19\x20\x01(\x01R\x0bdrStoreRate\x12\"\n\rgl_class_code\
    \x18\x1a\x20\x01(\tR\x0bglClassCode\x12\x19\n\x08mop_type\x18\x1b\x20\
    \x01(\tR\x07mopType\x12\"\n\rinstl_due_day\x18\x1c\x20\x01(\x03R\x0binst\
    lDueDay\x12+\n\x12term_int_comp_freq\x18\x1d\x20\x01(\x03R\x0ftermIntCom\
    pFreq\x12.\n\x14term_int_comp_sop_dt\x18\x1e\x20\x01(\x03R\x10termIntCom\
    pSopDt\x12.\n\x14term_int_comp_eop_dt\x18\x1f\x20\x01(\x03R\x10termIntCo\
    mpEopDt\x12)\n\x11term_int_comp_amt\x18\x20\x20\x01(\x01R\x0etermIntComp\
    Amt\x12%\n\x0elending_status\x18!\x20\x01(\tR\rlendingStatus\x12$\n\x0ei\
    nt_repay_freq\x18\"\x20\x01(\x03R\x0cintRepayFreq\x12\x12\n\x04name\x18#\
    \x20\x01(\tR\x04name\x12\x20\n\x0ccust_acct_no\x18$\x20\x01(\tR\ncustAcc\
    tNo\x12\x1b\n\tprim_acct\x18%\x20\x01(\tR\x08primAcct\x12!\n\x0csegment_\
    code\x18&\x20\x01(\tR\x0bsegmentCode\x12#\n\rindustry_code\x18'\x20\x01(\
    \tR\x0cindustryCode\x12\x1d\n\ngroup_code\x18(\x20\x01(\tR\tgroupCode\
    \x12&\n\x0fbus_sector_code\x18)\x20\x01(\tR\rbusSectorCode\x12$\n\x0etie\
    r_cust_type\x18*\x20\x01(\tR\x0ctierCustType\x12\x0e\n\x02a1\x18+\x20\
    \x01(\tR\x02a1\x12\x0e\n\x02a2\x18,\x20\x01(\tR\x02a2\x12\x0e\n\x02a3\
    \x18-\x20\x01(\tR\x02a3\x12\x0e\n\x02a4\x18.\x20\x01(\tR\x02a4\x12\x0e\n\
    \x02a5\x18/\x20\x01(\tR\x02a5\x12\x0e\n\x02a6\x180\x20\x01(\tR\x02a6\x12\
    \x0e\n\x02a7\x181\x20\x01(\tR\x02a7\x12\x0e\n\x02a8\x182\x20\x01(\tR\x02\
    a8\x12\x0e\n\x02a9\x183\x20\x01(\tR\x02a9\x12\x10\n\x03a10\x184\x20\x01(\
    \tR\x03a10\x12\x16\n\x06glcode\x185\x20\x01(\tR\x06glcode\x12\x19\n\x08i\
    nt_rate\x186\x20\x01(\x01R\x07intRate\x12\x20\n\x0ccurr_bal_lcy\x187\x20\
    \x01(\x01R\ncurrBalLcy\x12\x1c\n\nas_on_date\x188\x20\x01(\x03R\x08asOnD\
    ate\x12#\n\rresidual_days\x189\x20\x01(\x03R\x0cresidualDays\x12\x1e\n\
    \x0btot_int_amt\x18:\x20\x01(\x01R\ttotIntAmt\x12\x20\n\x0ctot_prin_amt\
    \x18;\x20\x01(\x01R\ntotPrinAmt\x12'\n\tcashflows\x18<\x20\x03(\x0b2\t.C\
    ashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
