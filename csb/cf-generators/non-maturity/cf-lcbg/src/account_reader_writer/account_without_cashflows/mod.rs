// This file is generated by rust-protobuf 2.6.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct OutputAccount {
    // message fields
    pub acc_num: ::std::string::String,
    pub br_code: ::std::string::String,
    pub client_id: ::std::string::String,
    pub lc_typ: ::std::string::String,
    pub ccy: ::std::string::String,
    pub gl_cd: ::std::string::String,
    pub acc_open_dt: i64,
    pub lc_amt: f64,
    pub bal_os: f64,
    pub lc_dt: i64,
    pub cancel_dt: i64,
    pub lst_dt_of_negotiation: i64,
    pub acc_typ_cd: ::std::string::String,
    pub acc_typ_desc: ::std::string::String,
    pub prod_code: ::std::string::String,
    pub as_on: i64,
    pub client_type: ::std::string::String,
    pub clients_name: ::std::string::String,
    pub clients_bsr_type_flg: ::std::string::String,
    pub clients_busdivn_code: ::std::string::String,
    pub clients_const_code: ::std::string::String,
    pub clients_pan_gir_num: ::std::string::String,
    pub clients_risk_categorization: ::std::string::String,
    pub clients_risk_cntry: ::std::string::String,
    pub clients_segment_code: ::std::string::String,
    pub corpcl_orgn_qualifier: ::std::string::String,
    pub corpcl_indus_code: ::std::string::String,
    pub corpcl_nature_of_bus1: ::std::string::String,
    pub corpcl_central_state_flg: ::std::string::String,
    pub corpcl_public_sector_flg: ::std::string::String,
    pub corpcl_primary_dlr_flg: ::std::string::String,
    pub corpcl_multilateral_bank: ::std::string::String,
    pub corpcl_connp_inv_num: ::std::string::String,
    pub corpcl_bc_gross_turnover: f64,
    pub w4b_cd: ::std::string::String,
    pub balm_llg: ::std::string::String,
    pub care_llg: ::std::string::String,
    pub ba_llg: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutputAccount {
    fn default() -> &'a OutputAccount {
        <OutputAccount as ::protobuf::Message>::default_instance()
    }
}

impl OutputAccount {
    pub fn new() -> OutputAccount {
        ::std::default::Default::default()
    }

    // string acc_num = 1;


    pub fn get_acc_num(&self) -> &str {
        &self.acc_num
    }
    pub fn clear_acc_num(&mut self) {
        self.acc_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_num(&mut self, v: ::std::string::String) {
        self.acc_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_num(&mut self) -> &mut ::std::string::String {
        &mut self.acc_num
    }

    // Take field
    pub fn take_acc_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_num, ::std::string::String::new())
    }

    // string br_code = 2;


    pub fn get_br_code(&self) -> &str {
        &self.br_code
    }
    pub fn clear_br_code(&mut self) {
        self.br_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_br_code(&mut self, v: ::std::string::String) {
        self.br_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_br_code(&mut self) -> &mut ::std::string::String {
        &mut self.br_code
    }

    // Take field
    pub fn take_br_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.br_code, ::std::string::String::new())
    }

    // string client_id = 3;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // string lc_typ = 4;


    pub fn get_lc_typ(&self) -> &str {
        &self.lc_typ
    }
    pub fn clear_lc_typ(&mut self) {
        self.lc_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_lc_typ(&mut self, v: ::std::string::String) {
        self.lc_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lc_typ(&mut self) -> &mut ::std::string::String {
        &mut self.lc_typ
    }

    // Take field
    pub fn take_lc_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lc_typ, ::std::string::String::new())
    }

    // string ccy = 5;


    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }
    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    // string gl_cd = 6;


    pub fn get_gl_cd(&self) -> &str {
        &self.gl_cd
    }
    pub fn clear_gl_cd(&mut self) {
        self.gl_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_cd(&mut self, v: ::std::string::String) {
        self.gl_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_cd(&mut self) -> &mut ::std::string::String {
        &mut self.gl_cd
    }

    // Take field
    pub fn take_gl_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_cd, ::std::string::String::new())
    }

    // int64 acc_open_dt = 7;


    pub fn get_acc_open_dt(&self) -> i64 {
        self.acc_open_dt
    }
    pub fn clear_acc_open_dt(&mut self) {
        self.acc_open_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_acc_open_dt(&mut self, v: i64) {
        self.acc_open_dt = v;
    }

    // double lc_amt = 8;


    pub fn get_lc_amt(&self) -> f64 {
        self.lc_amt
    }
    pub fn clear_lc_amt(&mut self) {
        self.lc_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lc_amt(&mut self, v: f64) {
        self.lc_amt = v;
    }

    // double bal_os = 9;


    pub fn get_bal_os(&self) -> f64 {
        self.bal_os
    }
    pub fn clear_bal_os(&mut self) {
        self.bal_os = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bal_os(&mut self, v: f64) {
        self.bal_os = v;
    }

    // int64 lc_dt = 10;


    pub fn get_lc_dt(&self) -> i64 {
        self.lc_dt
    }
    pub fn clear_lc_dt(&mut self) {
        self.lc_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_lc_dt(&mut self, v: i64) {
        self.lc_dt = v;
    }

    // int64 cancel_dt = 11;


    pub fn get_cancel_dt(&self) -> i64 {
        self.cancel_dt
    }
    pub fn clear_cancel_dt(&mut self) {
        self.cancel_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_cancel_dt(&mut self, v: i64) {
        self.cancel_dt = v;
    }

    // int64 lst_dt_of_negotiation = 12;


    pub fn get_lst_dt_of_negotiation(&self) -> i64 {
        self.lst_dt_of_negotiation
    }
    pub fn clear_lst_dt_of_negotiation(&mut self) {
        self.lst_dt_of_negotiation = 0;
    }

    // Param is passed by value, moved
    pub fn set_lst_dt_of_negotiation(&mut self, v: i64) {
        self.lst_dt_of_negotiation = v;
    }

    // string acc_typ_cd = 13;


    pub fn get_acc_typ_cd(&self) -> &str {
        &self.acc_typ_cd
    }
    pub fn clear_acc_typ_cd(&mut self) {
        self.acc_typ_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_typ_cd(&mut self, v: ::std::string::String) {
        self.acc_typ_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_typ_cd(&mut self) -> &mut ::std::string::String {
        &mut self.acc_typ_cd
    }

    // Take field
    pub fn take_acc_typ_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_typ_cd, ::std::string::String::new())
    }

    // string acc_typ_desc = 14;


    pub fn get_acc_typ_desc(&self) -> &str {
        &self.acc_typ_desc
    }
    pub fn clear_acc_typ_desc(&mut self) {
        self.acc_typ_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_typ_desc(&mut self, v: ::std::string::String) {
        self.acc_typ_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_typ_desc(&mut self) -> &mut ::std::string::String {
        &mut self.acc_typ_desc
    }

    // Take field
    pub fn take_acc_typ_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_typ_desc, ::std::string::String::new())
    }

    // string prod_code = 15;


    pub fn get_prod_code(&self) -> &str {
        &self.prod_code
    }
    pub fn clear_prod_code(&mut self) {
        self.prod_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_code(&mut self, v: ::std::string::String) {
        self.prod_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_code(&mut self) -> &mut ::std::string::String {
        &mut self.prod_code
    }

    // Take field
    pub fn take_prod_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_code, ::std::string::String::new())
    }

    // int64 as_on = 16;


    pub fn get_as_on(&self) -> i64 {
        self.as_on
    }
    pub fn clear_as_on(&mut self) {
        self.as_on = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on(&mut self, v: i64) {
        self.as_on = v;
    }

    // string client_type = 17;


    pub fn get_client_type(&self) -> &str {
        &self.client_type
    }
    pub fn clear_client_type(&mut self) {
        self.client_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_type(&mut self, v: ::std::string::String) {
        self.client_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_type(&mut self) -> &mut ::std::string::String {
        &mut self.client_type
    }

    // Take field
    pub fn take_client_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_type, ::std::string::String::new())
    }

    // string clients_name = 18;


    pub fn get_clients_name(&self) -> &str {
        &self.clients_name
    }
    pub fn clear_clients_name(&mut self) {
        self.clients_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_name(&mut self, v: ::std::string::String) {
        self.clients_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_name(&mut self) -> &mut ::std::string::String {
        &mut self.clients_name
    }

    // Take field
    pub fn take_clients_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_name, ::std::string::String::new())
    }

    // string clients_bsr_type_flg = 19;


    pub fn get_clients_bsr_type_flg(&self) -> &str {
        &self.clients_bsr_type_flg
    }
    pub fn clear_clients_bsr_type_flg(&mut self) {
        self.clients_bsr_type_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_bsr_type_flg(&mut self, v: ::std::string::String) {
        self.clients_bsr_type_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_bsr_type_flg(&mut self) -> &mut ::std::string::String {
        &mut self.clients_bsr_type_flg
    }

    // Take field
    pub fn take_clients_bsr_type_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_bsr_type_flg, ::std::string::String::new())
    }

    // string clients_busdivn_code = 20;


    pub fn get_clients_busdivn_code(&self) -> &str {
        &self.clients_busdivn_code
    }
    pub fn clear_clients_busdivn_code(&mut self) {
        self.clients_busdivn_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_busdivn_code(&mut self, v: ::std::string::String) {
        self.clients_busdivn_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_busdivn_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_busdivn_code
    }

    // Take field
    pub fn take_clients_busdivn_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_busdivn_code, ::std::string::String::new())
    }

    // string clients_const_code = 21;


    pub fn get_clients_const_code(&self) -> &str {
        &self.clients_const_code
    }
    pub fn clear_clients_const_code(&mut self) {
        self.clients_const_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_const_code(&mut self, v: ::std::string::String) {
        self.clients_const_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_const_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_const_code
    }

    // Take field
    pub fn take_clients_const_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_const_code, ::std::string::String::new())
    }

    // string clients_pan_gir_num = 22;


    pub fn get_clients_pan_gir_num(&self) -> &str {
        &self.clients_pan_gir_num
    }
    pub fn clear_clients_pan_gir_num(&mut self) {
        self.clients_pan_gir_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_pan_gir_num(&mut self, v: ::std::string::String) {
        self.clients_pan_gir_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_pan_gir_num(&mut self) -> &mut ::std::string::String {
        &mut self.clients_pan_gir_num
    }

    // Take field
    pub fn take_clients_pan_gir_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_pan_gir_num, ::std::string::String::new())
    }

    // string clients_risk_categorization = 23;


    pub fn get_clients_risk_categorization(&self) -> &str {
        &self.clients_risk_categorization
    }
    pub fn clear_clients_risk_categorization(&mut self) {
        self.clients_risk_categorization.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_risk_categorization(&mut self, v: ::std::string::String) {
        self.clients_risk_categorization = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_risk_categorization(&mut self) -> &mut ::std::string::String {
        &mut self.clients_risk_categorization
    }

    // Take field
    pub fn take_clients_risk_categorization(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_risk_categorization, ::std::string::String::new())
    }

    // string clients_risk_cntry = 24;


    pub fn get_clients_risk_cntry(&self) -> &str {
        &self.clients_risk_cntry
    }
    pub fn clear_clients_risk_cntry(&mut self) {
        self.clients_risk_cntry.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_risk_cntry(&mut self, v: ::std::string::String) {
        self.clients_risk_cntry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_risk_cntry(&mut self) -> &mut ::std::string::String {
        &mut self.clients_risk_cntry
    }

    // Take field
    pub fn take_clients_risk_cntry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_risk_cntry, ::std::string::String::new())
    }

    // string clients_segment_code = 25;


    pub fn get_clients_segment_code(&self) -> &str {
        &self.clients_segment_code
    }
    pub fn clear_clients_segment_code(&mut self) {
        self.clients_segment_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_segment_code(&mut self, v: ::std::string::String) {
        self.clients_segment_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_segment_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_segment_code
    }

    // Take field
    pub fn take_clients_segment_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_segment_code, ::std::string::String::new())
    }

    // string corpcl_orgn_qualifier = 26;


    pub fn get_corpcl_orgn_qualifier(&self) -> &str {
        &self.corpcl_orgn_qualifier
    }
    pub fn clear_corpcl_orgn_qualifier(&mut self) {
        self.corpcl_orgn_qualifier.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_orgn_qualifier(&mut self, v: ::std::string::String) {
        self.corpcl_orgn_qualifier = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_orgn_qualifier(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_orgn_qualifier
    }

    // Take field
    pub fn take_corpcl_orgn_qualifier(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_orgn_qualifier, ::std::string::String::new())
    }

    // string corpcl_indus_code = 27;


    pub fn get_corpcl_indus_code(&self) -> &str {
        &self.corpcl_indus_code
    }
    pub fn clear_corpcl_indus_code(&mut self) {
        self.corpcl_indus_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_indus_code(&mut self, v: ::std::string::String) {
        self.corpcl_indus_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_indus_code(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_indus_code
    }

    // Take field
    pub fn take_corpcl_indus_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_indus_code, ::std::string::String::new())
    }

    // string corpcl_nature_of_bus1 = 28;


    pub fn get_corpcl_nature_of_bus1(&self) -> &str {
        &self.corpcl_nature_of_bus1
    }
    pub fn clear_corpcl_nature_of_bus1(&mut self) {
        self.corpcl_nature_of_bus1.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_nature_of_bus1(&mut self, v: ::std::string::String) {
        self.corpcl_nature_of_bus1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_nature_of_bus1(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_nature_of_bus1
    }

    // Take field
    pub fn take_corpcl_nature_of_bus1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_nature_of_bus1, ::std::string::String::new())
    }

    // string corpcl_central_state_flg = 29;


    pub fn get_corpcl_central_state_flg(&self) -> &str {
        &self.corpcl_central_state_flg
    }
    pub fn clear_corpcl_central_state_flg(&mut self) {
        self.corpcl_central_state_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_central_state_flg(&mut self, v: ::std::string::String) {
        self.corpcl_central_state_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_central_state_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_central_state_flg
    }

    // Take field
    pub fn take_corpcl_central_state_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_central_state_flg, ::std::string::String::new())
    }

    // string corpcl_public_sector_flg = 30;


    pub fn get_corpcl_public_sector_flg(&self) -> &str {
        &self.corpcl_public_sector_flg
    }
    pub fn clear_corpcl_public_sector_flg(&mut self) {
        self.corpcl_public_sector_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_public_sector_flg(&mut self, v: ::std::string::String) {
        self.corpcl_public_sector_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_public_sector_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_public_sector_flg
    }

    // Take field
    pub fn take_corpcl_public_sector_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_public_sector_flg, ::std::string::String::new())
    }

    // string corpcl_primary_dlr_flg = 31;


    pub fn get_corpcl_primary_dlr_flg(&self) -> &str {
        &self.corpcl_primary_dlr_flg
    }
    pub fn clear_corpcl_primary_dlr_flg(&mut self) {
        self.corpcl_primary_dlr_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_primary_dlr_flg(&mut self, v: ::std::string::String) {
        self.corpcl_primary_dlr_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_primary_dlr_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_primary_dlr_flg
    }

    // Take field
    pub fn take_corpcl_primary_dlr_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_primary_dlr_flg, ::std::string::String::new())
    }

    // string corpcl_multilateral_bank = 32;


    pub fn get_corpcl_multilateral_bank(&self) -> &str {
        &self.corpcl_multilateral_bank
    }
    pub fn clear_corpcl_multilateral_bank(&mut self) {
        self.corpcl_multilateral_bank.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_multilateral_bank(&mut self, v: ::std::string::String) {
        self.corpcl_multilateral_bank = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_multilateral_bank(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_multilateral_bank
    }

    // Take field
    pub fn take_corpcl_multilateral_bank(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_multilateral_bank, ::std::string::String::new())
    }

    // string corpcl_connp_inv_num = 33;


    pub fn get_corpcl_connp_inv_num(&self) -> &str {
        &self.corpcl_connp_inv_num
    }
    pub fn clear_corpcl_connp_inv_num(&mut self) {
        self.corpcl_connp_inv_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_connp_inv_num(&mut self, v: ::std::string::String) {
        self.corpcl_connp_inv_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_connp_inv_num(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_connp_inv_num
    }

    // Take field
    pub fn take_corpcl_connp_inv_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_connp_inv_num, ::std::string::String::new())
    }

    // double corpcl_bc_gross_turnover = 34;


    pub fn get_corpcl_bc_gross_turnover(&self) -> f64 {
        self.corpcl_bc_gross_turnover
    }
    pub fn clear_corpcl_bc_gross_turnover(&mut self) {
        self.corpcl_bc_gross_turnover = 0.;
    }

    // Param is passed by value, moved
    pub fn set_corpcl_bc_gross_turnover(&mut self, v: f64) {
        self.corpcl_bc_gross_turnover = v;
    }

    // string w4b_cd = 35;


    pub fn get_w4b_cd(&self) -> &str {
        &self.w4b_cd
    }
    pub fn clear_w4b_cd(&mut self) {
        self.w4b_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_w4b_cd(&mut self, v: ::std::string::String) {
        self.w4b_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_w4b_cd(&mut self) -> &mut ::std::string::String {
        &mut self.w4b_cd
    }

    // Take field
    pub fn take_w4b_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.w4b_cd, ::std::string::String::new())
    }

    // string balm_llg = 36;


    pub fn get_balm_llg(&self) -> &str {
        &self.balm_llg
    }
    pub fn clear_balm_llg(&mut self) {
        self.balm_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_balm_llg(&mut self, v: ::std::string::String) {
        self.balm_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balm_llg(&mut self) -> &mut ::std::string::String {
        &mut self.balm_llg
    }

    // Take field
    pub fn take_balm_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balm_llg, ::std::string::String::new())
    }

    // string care_llg = 37;


    pub fn get_care_llg(&self) -> &str {
        &self.care_llg
    }
    pub fn clear_care_llg(&mut self) {
        self.care_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_care_llg(&mut self, v: ::std::string::String) {
        self.care_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_care_llg(&mut self) -> &mut ::std::string::String {
        &mut self.care_llg
    }

    // Take field
    pub fn take_care_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.care_llg, ::std::string::String::new())
    }

    // string ba_llg = 38;


    pub fn get_ba_llg(&self) -> &str {
        &self.ba_llg
    }
    pub fn clear_ba_llg(&mut self) {
        self.ba_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_ba_llg(&mut self, v: ::std::string::String) {
        self.ba_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ba_llg(&mut self) -> &mut ::std::string::String {
        &mut self.ba_llg
    }

    // Take field
    pub fn take_ba_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ba_llg, ::std::string::String::new())
    }
}

impl ::protobuf::Message for OutputAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_num)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.br_code)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lc_typ)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_cd)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acc_open_dt = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.lc_amt = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bal_os = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lc_dt = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cancel_dt = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lst_dt_of_negotiation = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_typ_cd)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_typ_desc)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_code)?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on = tmp;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_type)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_name)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_bsr_type_flg)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_busdivn_code)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_const_code)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_pan_gir_num)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_risk_categorization)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_risk_cntry)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_segment_code)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_orgn_qualifier)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_indus_code)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_nature_of_bus1)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_central_state_flg)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_public_sector_flg)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_primary_dlr_flg)?;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_multilateral_bank)?;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_connp_inv_num)?;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.corpcl_bc_gross_turnover = tmp;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.w4b_cd)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.balm_llg)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.care_llg)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ba_llg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.acc_num.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.acc_num);
        }
        if !self.br_code.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.br_code);
        }
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.client_id);
        }
        if !self.lc_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.lc_typ);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.ccy);
        }
        if !self.gl_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.gl_cd);
        }
        if self.acc_open_dt != 0 {
            my_size += ::protobuf::rt::value_size(7, self.acc_open_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lc_amt != 0. {
            my_size += 9;
        }
        if self.bal_os != 0. {
            my_size += 9;
        }
        if self.lc_dt != 0 {
            my_size += ::protobuf::rt::value_size(10, self.lc_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cancel_dt != 0 {
            my_size += ::protobuf::rt::value_size(11, self.cancel_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lst_dt_of_negotiation != 0 {
            my_size += ::protobuf::rt::value_size(12, self.lst_dt_of_negotiation, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.acc_typ_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.acc_typ_cd);
        }
        if !self.acc_typ_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.acc_typ_desc);
        }
        if !self.prod_code.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.prod_code);
        }
        if self.as_on != 0 {
            my_size += ::protobuf::rt::value_size(16, self.as_on, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.client_type.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.client_type);
        }
        if !self.clients_name.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.clients_name);
        }
        if !self.clients_bsr_type_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.clients_bsr_type_flg);
        }
        if !self.clients_busdivn_code.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.clients_busdivn_code);
        }
        if !self.clients_const_code.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.clients_const_code);
        }
        if !self.clients_pan_gir_num.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.clients_pan_gir_num);
        }
        if !self.clients_risk_categorization.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.clients_risk_categorization);
        }
        if !self.clients_risk_cntry.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.clients_risk_cntry);
        }
        if !self.clients_segment_code.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.clients_segment_code);
        }
        if !self.corpcl_orgn_qualifier.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.corpcl_orgn_qualifier);
        }
        if !self.corpcl_indus_code.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.corpcl_indus_code);
        }
        if !self.corpcl_nature_of_bus1.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.corpcl_nature_of_bus1);
        }
        if !self.corpcl_central_state_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.corpcl_central_state_flg);
        }
        if !self.corpcl_public_sector_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.corpcl_public_sector_flg);
        }
        if !self.corpcl_primary_dlr_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.corpcl_primary_dlr_flg);
        }
        if !self.corpcl_multilateral_bank.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.corpcl_multilateral_bank);
        }
        if !self.corpcl_connp_inv_num.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.corpcl_connp_inv_num);
        }
        if self.corpcl_bc_gross_turnover != 0. {
            my_size += 10;
        }
        if !self.w4b_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.w4b_cd);
        }
        if !self.balm_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.balm_llg);
        }
        if !self.care_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.care_llg);
        }
        if !self.ba_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.ba_llg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.acc_num.is_empty() {
            os.write_string(1, &self.acc_num)?;
        }
        if !self.br_code.is_empty() {
            os.write_string(2, &self.br_code)?;
        }
        if !self.client_id.is_empty() {
            os.write_string(3, &self.client_id)?;
        }
        if !self.lc_typ.is_empty() {
            os.write_string(4, &self.lc_typ)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(5, &self.ccy)?;
        }
        if !self.gl_cd.is_empty() {
            os.write_string(6, &self.gl_cd)?;
        }
        if self.acc_open_dt != 0 {
            os.write_int64(7, self.acc_open_dt)?;
        }
        if self.lc_amt != 0. {
            os.write_double(8, self.lc_amt)?;
        }
        if self.bal_os != 0. {
            os.write_double(9, self.bal_os)?;
        }
        if self.lc_dt != 0 {
            os.write_int64(10, self.lc_dt)?;
        }
        if self.cancel_dt != 0 {
            os.write_int64(11, self.cancel_dt)?;
        }
        if self.lst_dt_of_negotiation != 0 {
            os.write_int64(12, self.lst_dt_of_negotiation)?;
        }
        if !self.acc_typ_cd.is_empty() {
            os.write_string(13, &self.acc_typ_cd)?;
        }
        if !self.acc_typ_desc.is_empty() {
            os.write_string(14, &self.acc_typ_desc)?;
        }
        if !self.prod_code.is_empty() {
            os.write_string(15, &self.prod_code)?;
        }
        if self.as_on != 0 {
            os.write_int64(16, self.as_on)?;
        }
        if !self.client_type.is_empty() {
            os.write_string(17, &self.client_type)?;
        }
        if !self.clients_name.is_empty() {
            os.write_string(18, &self.clients_name)?;
        }
        if !self.clients_bsr_type_flg.is_empty() {
            os.write_string(19, &self.clients_bsr_type_flg)?;
        }
        if !self.clients_busdivn_code.is_empty() {
            os.write_string(20, &self.clients_busdivn_code)?;
        }
        if !self.clients_const_code.is_empty() {
            os.write_string(21, &self.clients_const_code)?;
        }
        if !self.clients_pan_gir_num.is_empty() {
            os.write_string(22, &self.clients_pan_gir_num)?;
        }
        if !self.clients_risk_categorization.is_empty() {
            os.write_string(23, &self.clients_risk_categorization)?;
        }
        if !self.clients_risk_cntry.is_empty() {
            os.write_string(24, &self.clients_risk_cntry)?;
        }
        if !self.clients_segment_code.is_empty() {
            os.write_string(25, &self.clients_segment_code)?;
        }
        if !self.corpcl_orgn_qualifier.is_empty() {
            os.write_string(26, &self.corpcl_orgn_qualifier)?;
        }
        if !self.corpcl_indus_code.is_empty() {
            os.write_string(27, &self.corpcl_indus_code)?;
        }
        if !self.corpcl_nature_of_bus1.is_empty() {
            os.write_string(28, &self.corpcl_nature_of_bus1)?;
        }
        if !self.corpcl_central_state_flg.is_empty() {
            os.write_string(29, &self.corpcl_central_state_flg)?;
        }
        if !self.corpcl_public_sector_flg.is_empty() {
            os.write_string(30, &self.corpcl_public_sector_flg)?;
        }
        if !self.corpcl_primary_dlr_flg.is_empty() {
            os.write_string(31, &self.corpcl_primary_dlr_flg)?;
        }
        if !self.corpcl_multilateral_bank.is_empty() {
            os.write_string(32, &self.corpcl_multilateral_bank)?;
        }
        if !self.corpcl_connp_inv_num.is_empty() {
            os.write_string(33, &self.corpcl_connp_inv_num)?;
        }
        if self.corpcl_bc_gross_turnover != 0. {
            os.write_double(34, self.corpcl_bc_gross_turnover)?;
        }
        if !self.w4b_cd.is_empty() {
            os.write_string(35, &self.w4b_cd)?;
        }
        if !self.balm_llg.is_empty() {
            os.write_string(36, &self.balm_llg)?;
        }
        if !self.care_llg.is_empty() {
            os.write_string(37, &self.care_llg)?;
        }
        if !self.ba_llg.is_empty() {
            os.write_string(38, &self.ba_llg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputAccount {
        OutputAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acc_num",
                    |m: &OutputAccount| { &m.acc_num },
                    |m: &mut OutputAccount| { &mut m.acc_num },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "br_code",
                    |m: &OutputAccount| { &m.br_code },
                    |m: &mut OutputAccount| { &mut m.br_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "client_id",
                    |m: &OutputAccount| { &m.client_id },
                    |m: &mut OutputAccount| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "lc_typ",
                    |m: &OutputAccount| { &m.lc_typ },
                    |m: &mut OutputAccount| { &mut m.lc_typ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy",
                    |m: &OutputAccount| { &m.ccy },
                    |m: &mut OutputAccount| { &mut m.ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gl_cd",
                    |m: &OutputAccount| { &m.gl_cd },
                    |m: &mut OutputAccount| { &mut m.gl_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "acc_open_dt",
                    |m: &OutputAccount| { &m.acc_open_dt },
                    |m: &mut OutputAccount| { &mut m.acc_open_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "lc_amt",
                    |m: &OutputAccount| { &m.lc_amt },
                    |m: &mut OutputAccount| { &mut m.lc_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "bal_os",
                    |m: &OutputAccount| { &m.bal_os },
                    |m: &mut OutputAccount| { &mut m.bal_os },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "lc_dt",
                    |m: &OutputAccount| { &m.lc_dt },
                    |m: &mut OutputAccount| { &mut m.lc_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cancel_dt",
                    |m: &OutputAccount| { &m.cancel_dt },
                    |m: &mut OutputAccount| { &mut m.cancel_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "lst_dt_of_negotiation",
                    |m: &OutputAccount| { &m.lst_dt_of_negotiation },
                    |m: &mut OutputAccount| { &mut m.lst_dt_of_negotiation },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acc_typ_cd",
                    |m: &OutputAccount| { &m.acc_typ_cd },
                    |m: &mut OutputAccount| { &mut m.acc_typ_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acc_typ_desc",
                    |m: &OutputAccount| { &m.acc_typ_desc },
                    |m: &mut OutputAccount| { &mut m.acc_typ_desc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "prod_code",
                    |m: &OutputAccount| { &m.prod_code },
                    |m: &mut OutputAccount| { &mut m.prod_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "as_on",
                    |m: &OutputAccount| { &m.as_on },
                    |m: &mut OutputAccount| { &mut m.as_on },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "client_type",
                    |m: &OutputAccount| { &m.client_type },
                    |m: &mut OutputAccount| { &mut m.client_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_name",
                    |m: &OutputAccount| { &m.clients_name },
                    |m: &mut OutputAccount| { &mut m.clients_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_bsr_type_flg",
                    |m: &OutputAccount| { &m.clients_bsr_type_flg },
                    |m: &mut OutputAccount| { &mut m.clients_bsr_type_flg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_busdivn_code",
                    |m: &OutputAccount| { &m.clients_busdivn_code },
                    |m: &mut OutputAccount| { &mut m.clients_busdivn_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_const_code",
                    |m: &OutputAccount| { &m.clients_const_code },
                    |m: &mut OutputAccount| { &mut m.clients_const_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_pan_gir_num",
                    |m: &OutputAccount| { &m.clients_pan_gir_num },
                    |m: &mut OutputAccount| { &mut m.clients_pan_gir_num },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_risk_categorization",
                    |m: &OutputAccount| { &m.clients_risk_categorization },
                    |m: &mut OutputAccount| { &mut m.clients_risk_categorization },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_risk_cntry",
                    |m: &OutputAccount| { &m.clients_risk_cntry },
                    |m: &mut OutputAccount| { &mut m.clients_risk_cntry },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_segment_code",
                    |m: &OutputAccount| { &m.clients_segment_code },
                    |m: &mut OutputAccount| { &mut m.clients_segment_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_orgn_qualifier",
                    |m: &OutputAccount| { &m.corpcl_orgn_qualifier },
                    |m: &mut OutputAccount| { &mut m.corpcl_orgn_qualifier },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_indus_code",
                    |m: &OutputAccount| { &m.corpcl_indus_code },
                    |m: &mut OutputAccount| { &mut m.corpcl_indus_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_nature_of_bus1",
                    |m: &OutputAccount| { &m.corpcl_nature_of_bus1 },
                    |m: &mut OutputAccount| { &mut m.corpcl_nature_of_bus1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_central_state_flg",
                    |m: &OutputAccount| { &m.corpcl_central_state_flg },
                    |m: &mut OutputAccount| { &mut m.corpcl_central_state_flg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_public_sector_flg",
                    |m: &OutputAccount| { &m.corpcl_public_sector_flg },
                    |m: &mut OutputAccount| { &mut m.corpcl_public_sector_flg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_primary_dlr_flg",
                    |m: &OutputAccount| { &m.corpcl_primary_dlr_flg },
                    |m: &mut OutputAccount| { &mut m.corpcl_primary_dlr_flg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_multilateral_bank",
                    |m: &OutputAccount| { &m.corpcl_multilateral_bank },
                    |m: &mut OutputAccount| { &mut m.corpcl_multilateral_bank },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_connp_inv_num",
                    |m: &OutputAccount| { &m.corpcl_connp_inv_num },
                    |m: &mut OutputAccount| { &mut m.corpcl_connp_inv_num },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "corpcl_bc_gross_turnover",
                    |m: &OutputAccount| { &m.corpcl_bc_gross_turnover },
                    |m: &mut OutputAccount| { &mut m.corpcl_bc_gross_turnover },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "w4b_cd",
                    |m: &OutputAccount| { &m.w4b_cd },
                    |m: &mut OutputAccount| { &mut m.w4b_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "balm_llg",
                    |m: &OutputAccount| { &m.balm_llg },
                    |m: &mut OutputAccount| { &mut m.balm_llg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "care_llg",
                    |m: &OutputAccount| { &m.care_llg },
                    |m: &mut OutputAccount| { &mut m.care_llg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ba_llg",
                    |m: &OutputAccount| { &m.ba_llg },
                    |m: &mut OutputAccount| { &mut m.ba_llg },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OutputAccount>(
                    "OutputAccount",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OutputAccount {
        static mut instance: ::protobuf::lazy::Lazy<OutputAccount> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OutputAccount,
        };
        unsafe {
            instance.get(OutputAccount::new)
        }
    }
}

impl ::protobuf::Clear for OutputAccount {
    fn clear(&mut self) {
        self.acc_num.clear();
        self.br_code.clear();
        self.client_id.clear();
        self.lc_typ.clear();
        self.ccy.clear();
        self.gl_cd.clear();
        self.acc_open_dt = 0;
        self.lc_amt = 0.;
        self.bal_os = 0.;
        self.lc_dt = 0;
        self.cancel_dt = 0;
        self.lst_dt_of_negotiation = 0;
        self.acc_typ_cd.clear();
        self.acc_typ_desc.clear();
        self.prod_code.clear();
        self.as_on = 0;
        self.client_type.clear();
        self.clients_name.clear();
        self.clients_bsr_type_flg.clear();
        self.clients_busdivn_code.clear();
        self.clients_const_code.clear();
        self.clients_pan_gir_num.clear();
        self.clients_risk_categorization.clear();
        self.clients_risk_cntry.clear();
        self.clients_segment_code.clear();
        self.corpcl_orgn_qualifier.clear();
        self.corpcl_indus_code.clear();
        self.corpcl_nature_of_bus1.clear();
        self.corpcl_central_state_flg.clear();
        self.corpcl_public_sector_flg.clear();
        self.corpcl_primary_dlr_flg.clear();
        self.corpcl_multilateral_bank.clear();
        self.corpcl_connp_inv_num.clear();
        self.corpcl_bc_gross_turnover = 0.;
        self.w4b_cd.clear();
        self.balm_llg.clear();
        self.care_llg.clear();
        self.ba_llg.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ecsb_lcbg.proto\"\xa7\x0b\n\rOutputAccount\x12\x17\n\x07acc_num\x18\
    \x01\x20\x01(\tR\x06accNum\x12\x17\n\x07br_code\x18\x02\x20\x01(\tR\x06b\
    rCode\x12\x1b\n\tclient_id\x18\x03\x20\x01(\tR\x08clientId\x12\x15\n\x06\
    lc_typ\x18\x04\x20\x01(\tR\x05lcTyp\x12\x10\n\x03ccy\x18\x05\x20\x01(\tR\
    \x03ccy\x12\x13\n\x05gl_cd\x18\x06\x20\x01(\tR\x04glCd\x12\x1e\n\x0bacc_\
    open_dt\x18\x07\x20\x01(\x03R\taccOpenDt\x12\x15\n\x06lc_amt\x18\x08\x20\
    \x01(\x01R\x05lcAmt\x12\x15\n\x06bal_os\x18\t\x20\x01(\x01R\x05balOs\x12\
    \x13\n\x05lc_dt\x18\n\x20\x01(\x03R\x04lcDt\x12\x1b\n\tcancel_dt\x18\x0b\
    \x20\x01(\x03R\x08cancelDt\x121\n\x15lst_dt_of_negotiation\x18\x0c\x20\
    \x01(\x03R\x12lstDtOfNegotiation\x12\x1c\n\nacc_typ_cd\x18\r\x20\x01(\tR\
    \x08accTypCd\x12\x20\n\x0cacc_typ_desc\x18\x0e\x20\x01(\tR\naccTypDesc\
    \x12\x1b\n\tprod_code\x18\x0f\x20\x01(\tR\x08prodCode\x12\x13\n\x05as_on\
    \x18\x10\x20\x01(\x03R\x04asOn\x12\x1f\n\x0bclient_type\x18\x11\x20\x01(\
    \tR\nclientType\x12!\n\x0cclients_name\x18\x12\x20\x01(\tR\x0bclientsNam\
    e\x12/\n\x14clients_bsr_type_flg\x18\x13\x20\x01(\tR\x11clientsBsrTypeFl\
    g\x120\n\x14clients_busdivn_code\x18\x14\x20\x01(\tR\x12clientsBusdivnCo\
    de\x12,\n\x12clients_const_code\x18\x15\x20\x01(\tR\x10clientsConstCode\
    \x12-\n\x13clients_pan_gir_num\x18\x16\x20\x01(\tR\x10clientsPanGirNum\
    \x12>\n\x1bclients_risk_categorization\x18\x17\x20\x01(\tR\x19clientsRis\
    kCategorization\x12,\n\x12clients_risk_cntry\x18\x18\x20\x01(\tR\x10clie\
    ntsRiskCntry\x120\n\x14clients_segment_code\x18\x19\x20\x01(\tR\x12clien\
    tsSegmentCode\x122\n\x15corpcl_orgn_qualifier\x18\x1a\x20\x01(\tR\x13cor\
    pclOrgnQualifier\x12*\n\x11corpcl_indus_code\x18\x1b\x20\x01(\tR\x0fcorp\
    clIndusCode\x121\n\x15corpcl_nature_of_bus1\x18\x1c\x20\x01(\tR\x12corpc\
    lNatureOfBus1\x127\n\x18corpcl_central_state_flg\x18\x1d\x20\x01(\tR\x15\
    corpclCentralStateFlg\x127\n\x18corpcl_public_sector_flg\x18\x1e\x20\x01\
    (\tR\x15corpclPublicSectorFlg\x123\n\x16corpcl_primary_dlr_flg\x18\x1f\
    \x20\x01(\tR\x13corpclPrimaryDlrFlg\x128\n\x18corpcl_multilateral_bank\
    \x18\x20\x20\x01(\tR\x16corpclMultilateralBank\x12/\n\x14corpcl_connp_in\
    v_num\x18!\x20\x01(\tR\x11corpclConnpInvNum\x127\n\x18corpcl_bc_gross_tu\
    rnover\x18\"\x20\x01(\x01R\x15corpclBcGrossTurnover\x12\x15\n\x06w4b_cd\
    \x18#\x20\x01(\tR\x05w4bCd\x12\x19\n\x08balm_llg\x18$\x20\x01(\tR\x07bal\
    mLlg\x12\x19\n\x08care_llg\x18%\x20\x01(\tR\x07careLlg\x12\x15\n\x06ba_l\
    lg\x18&\x20\x01(\tR\x05baLlgb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
