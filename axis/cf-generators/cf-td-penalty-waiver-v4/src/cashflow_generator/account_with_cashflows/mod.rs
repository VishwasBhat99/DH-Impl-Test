// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]


/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub acid: ::std::string::String,
    pub foracid: ::std::string::String,
    pub bacid: ::std::string::String,
    pub clr_bal_amt: f64,
    pub un_clr_bal_amt: f64,
    pub sol_id: ::std::string::String,
    pub cust_id: ::std::string::String,
    pub acct_ownership: ::std::string::String,
    pub ledg_num: ::std::string::String,
    pub drwng_power: ::std::string::String,
    pub mode_of_oper_code: ::std::string::String,
    pub lien_amt: f64,
    pub sanct_lim: ::std::string::String,
    pub gl_sub_head_code: ::std::string::String,
    pub schm_code: ::std::string::String,
    pub schm_type: ::std::string::String,
    pub crncy_code: ::std::string::String,
    pub acct_crncy_code: ::std::string::String,
    pub acct_cls_flg: ::std::string::String,
    pub del_flg: ::std::string::String,
    pub acct_opn_date: i64,
    pub entity_cre_flg: ::std::string::String,
    pub acct_cls_date: i64,
    pub last_tran_date: i64,
    pub notional_rate_code: ::std::string::String,
    pub emp_id: ::std::string::String,
    pub notional_rate: f64,
    pub limit_b2kid: ::std::string::String,
    pub adim1_gam: ::std::string::String,
    pub adim2_gam: i64,
    pub adim3_gam: i64,
    pub int_rate: f64,
    pub bm_id: ::std::string::String,
    pub spread: f64,
    pub reprice_freq: ::std::string::String,
    pub last_reprice_dt: i64,
    pub next_reprice_dt: i64,
    pub code1: ::std::string::String,
    pub code2: ::std::string::String,
    pub code3: ::std::string::String,
    pub code4: ::std::string::String,
    pub adim1_gac: ::std::string::String,
    pub adim2_gac: ::std::string::String,
    pub adim3_gac: ::std::string::String,
    pub cust_name: ::std::string::String,
    pub cmg_pan_gir_num: ::std::string::String,
    pub cmg_cust_const: ::std::string::String,
    pub adim1_cmg: ::std::string::String,
    pub adim2_cmg: ::std::string::String,
    pub adim3_cmg: ::std::string::String,
    pub out_bal_amt: f64,
    pub cust_grp_id: ::std::string::String,
    pub ucif_cust_const: ::std::string::String,
    pub exch_rt: ::std::string::String,
    pub out_bal_amt_con: f64,
    pub segment_code: ::std::string::String,
    pub nfs: ::std::string::String,
    pub oth_del_flg: ::std::string::String,
    pub open_effective_date: i64,
    pub oth_schm_type: ::std::string::String,
    pub int_tbl_code: ::std::string::String,
    pub int_version: i64,
    pub int_tbl_ver_num: i64,
    pub min_int_pcnt_cr: f64,
    pub max_int_pcnt_cr: f64,
    pub cust_cr_pref_pcnt: f64,
    pub id_cr_pref_pcnt: f64,
    pub nrml_int_pcnt: f64,
    pub id_dr_pref_pcnt: f64,
    pub base_int_tbl_code: ::std::string::String,
    pub base_pcnt_dr: f64,
    pub base_pcnt_cr: f64,
    pub base_pcnt: f64,
    pub deposit_period_mths: i64,
    pub deposit_period_days: i64,
    pub deposit_amount: f64,
    pub oth_acct_crncy_code: ::std::string::String,
    pub deposit_type: ::std::string::String,
    pub spl_catg_ind: ::std::string::String,
    pub nrml_int_pcnt_cr: f64,
    pub base_differential_exists: ::std::string::String,
    pub deposit_status: ::std::string::String,
    pub maturity_amount: f64,
    pub maturity_date: i64,
    pub rcre_time: i64,
    pub auto_renewed_counter: ::std::string::String,
    pub overdue_flg: ::std::string::String,
    pub final_int_rate: f64,
    pub source_name: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string acid = 1;


    pub fn get_acid(&self) -> &str {
        &self.acid
    }
    pub fn clear_acid(&mut self) {
        self.acid.clear();
    }

    // Param is passed by value, moved
    pub fn set_acid(&mut self, v: ::std::string::String) {
        self.acid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acid(&mut self) -> &mut ::std::string::String {
        &mut self.acid
    }

    // Take field
    pub fn take_acid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acid, ::std::string::String::new())
    }

    // string foracid = 2;


    pub fn get_foracid(&self) -> &str {
        &self.foracid
    }
    pub fn clear_foracid(&mut self) {
        self.foracid.clear();
    }

    // Param is passed by value, moved
    pub fn set_foracid(&mut self, v: ::std::string::String) {
        self.foracid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_foracid(&mut self) -> &mut ::std::string::String {
        &mut self.foracid
    }

    // Take field
    pub fn take_foracid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.foracid, ::std::string::String::new())
    }

    // string bacid = 3;


    pub fn get_bacid(&self) -> &str {
        &self.bacid
    }
    pub fn clear_bacid(&mut self) {
        self.bacid.clear();
    }

    // Param is passed by value, moved
    pub fn set_bacid(&mut self, v: ::std::string::String) {
        self.bacid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bacid(&mut self) -> &mut ::std::string::String {
        &mut self.bacid
    }

    // Take field
    pub fn take_bacid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bacid, ::std::string::String::new())
    }

    // double clr_bal_amt = 4;


    pub fn get_clr_bal_amt(&self) -> f64 {
        self.clr_bal_amt
    }
    pub fn clear_clr_bal_amt(&mut self) {
        self.clr_bal_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_clr_bal_amt(&mut self, v: f64) {
        self.clr_bal_amt = v;
    }

    // double un_clr_bal_amt = 5;


    pub fn get_un_clr_bal_amt(&self) -> f64 {
        self.un_clr_bal_amt
    }
    pub fn clear_un_clr_bal_amt(&mut self) {
        self.un_clr_bal_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_un_clr_bal_amt(&mut self, v: f64) {
        self.un_clr_bal_amt = v;
    }

    // string sol_id = 6;


    pub fn get_sol_id(&self) -> &str {
        &self.sol_id
    }
    pub fn clear_sol_id(&mut self) {
        self.sol_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_sol_id(&mut self, v: ::std::string::String) {
        self.sol_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sol_id(&mut self) -> &mut ::std::string::String {
        &mut self.sol_id
    }

    // Take field
    pub fn take_sol_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sol_id, ::std::string::String::new())
    }

    // string cust_id = 7;


    pub fn get_cust_id(&self) -> &str {
        &self.cust_id
    }
    pub fn clear_cust_id(&mut self) {
        self.cust_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: ::std::string::String) {
        self.cust_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_id
    }

    // Take field
    pub fn take_cust_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_id, ::std::string::String::new())
    }

    // string acct_ownership = 8;


    pub fn get_acct_ownership(&self) -> &str {
        &self.acct_ownership
    }
    pub fn clear_acct_ownership(&mut self) {
        self.acct_ownership.clear();
    }

    // Param is passed by value, moved
    pub fn set_acct_ownership(&mut self, v: ::std::string::String) {
        self.acct_ownership = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acct_ownership(&mut self) -> &mut ::std::string::String {
        &mut self.acct_ownership
    }

    // Take field
    pub fn take_acct_ownership(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acct_ownership, ::std::string::String::new())
    }

    // string ledg_num = 9;


    pub fn get_ledg_num(&self) -> &str {
        &self.ledg_num
    }
    pub fn clear_ledg_num(&mut self) {
        self.ledg_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_ledg_num(&mut self, v: ::std::string::String) {
        self.ledg_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ledg_num(&mut self) -> &mut ::std::string::String {
        &mut self.ledg_num
    }

    // Take field
    pub fn take_ledg_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ledg_num, ::std::string::String::new())
    }

    // string drwng_power = 10;


    pub fn get_drwng_power(&self) -> &str {
        &self.drwng_power
    }
    pub fn clear_drwng_power(&mut self) {
        self.drwng_power.clear();
    }

    // Param is passed by value, moved
    pub fn set_drwng_power(&mut self, v: ::std::string::String) {
        self.drwng_power = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_drwng_power(&mut self) -> &mut ::std::string::String {
        &mut self.drwng_power
    }

    // Take field
    pub fn take_drwng_power(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.drwng_power, ::std::string::String::new())
    }

    // string mode_of_oper_code = 11;


    pub fn get_mode_of_oper_code(&self) -> &str {
        &self.mode_of_oper_code
    }
    pub fn clear_mode_of_oper_code(&mut self) {
        self.mode_of_oper_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_mode_of_oper_code(&mut self, v: ::std::string::String) {
        self.mode_of_oper_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mode_of_oper_code(&mut self) -> &mut ::std::string::String {
        &mut self.mode_of_oper_code
    }

    // Take field
    pub fn take_mode_of_oper_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mode_of_oper_code, ::std::string::String::new())
    }

    // double lien_amt = 12;


    pub fn get_lien_amt(&self) -> f64 {
        self.lien_amt
    }
    pub fn clear_lien_amt(&mut self) {
        self.lien_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lien_amt(&mut self, v: f64) {
        self.lien_amt = v;
    }

    // string sanct_lim = 13;


    pub fn get_sanct_lim(&self) -> &str {
        &self.sanct_lim
    }
    pub fn clear_sanct_lim(&mut self) {
        self.sanct_lim.clear();
    }

    // Param is passed by value, moved
    pub fn set_sanct_lim(&mut self, v: ::std::string::String) {
        self.sanct_lim = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sanct_lim(&mut self) -> &mut ::std::string::String {
        &mut self.sanct_lim
    }

    // Take field
    pub fn take_sanct_lim(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sanct_lim, ::std::string::String::new())
    }

    // string gl_sub_head_code = 14;


    pub fn get_gl_sub_head_code(&self) -> &str {
        &self.gl_sub_head_code
    }
    pub fn clear_gl_sub_head_code(&mut self) {
        self.gl_sub_head_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_sub_head_code(&mut self, v: ::std::string::String) {
        self.gl_sub_head_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_sub_head_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_sub_head_code
    }

    // Take field
    pub fn take_gl_sub_head_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_sub_head_code, ::std::string::String::new())
    }

    // string schm_code = 15;


    pub fn get_schm_code(&self) -> &str {
        &self.schm_code
    }
    pub fn clear_schm_code(&mut self) {
        self.schm_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_schm_code(&mut self, v: ::std::string::String) {
        self.schm_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schm_code(&mut self) -> &mut ::std::string::String {
        &mut self.schm_code
    }

    // Take field
    pub fn take_schm_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schm_code, ::std::string::String::new())
    }

    // string schm_type = 16;


    pub fn get_schm_type(&self) -> &str {
        &self.schm_type
    }
    pub fn clear_schm_type(&mut self) {
        self.schm_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_schm_type(&mut self, v: ::std::string::String) {
        self.schm_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schm_type(&mut self) -> &mut ::std::string::String {
        &mut self.schm_type
    }

    // Take field
    pub fn take_schm_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schm_type, ::std::string::String::new())
    }

    // string crncy_code = 17;


    pub fn get_crncy_code(&self) -> &str {
        &self.crncy_code
    }
    pub fn clear_crncy_code(&mut self) {
        self.crncy_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_crncy_code(&mut self, v: ::std::string::String) {
        self.crncy_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_crncy_code(&mut self) -> &mut ::std::string::String {
        &mut self.crncy_code
    }

    // Take field
    pub fn take_crncy_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.crncy_code, ::std::string::String::new())
    }

    // string acct_crncy_code = 18;


    pub fn get_acct_crncy_code(&self) -> &str {
        &self.acct_crncy_code
    }
    pub fn clear_acct_crncy_code(&mut self) {
        self.acct_crncy_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_acct_crncy_code(&mut self, v: ::std::string::String) {
        self.acct_crncy_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acct_crncy_code(&mut self) -> &mut ::std::string::String {
        &mut self.acct_crncy_code
    }

    // Take field
    pub fn take_acct_crncy_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acct_crncy_code, ::std::string::String::new())
    }

    // string acct_cls_flg = 19;


    pub fn get_acct_cls_flg(&self) -> &str {
        &self.acct_cls_flg
    }
    pub fn clear_acct_cls_flg(&mut self) {
        self.acct_cls_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_acct_cls_flg(&mut self, v: ::std::string::String) {
        self.acct_cls_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acct_cls_flg(&mut self) -> &mut ::std::string::String {
        &mut self.acct_cls_flg
    }

    // Take field
    pub fn take_acct_cls_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acct_cls_flg, ::std::string::String::new())
    }

    // string del_flg = 20;


    pub fn get_del_flg(&self) -> &str {
        &self.del_flg
    }
    pub fn clear_del_flg(&mut self) {
        self.del_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_del_flg(&mut self, v: ::std::string::String) {
        self.del_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_del_flg(&mut self) -> &mut ::std::string::String {
        &mut self.del_flg
    }

    // Take field
    pub fn take_del_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.del_flg, ::std::string::String::new())
    }

    // int64 acct_opn_date = 21;


    pub fn get_acct_opn_date(&self) -> i64 {
        self.acct_opn_date
    }
    pub fn clear_acct_opn_date(&mut self) {
        self.acct_opn_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_acct_opn_date(&mut self, v: i64) {
        self.acct_opn_date = v;
    }

    // string entity_cre_flg = 22;


    pub fn get_entity_cre_flg(&self) -> &str {
        &self.entity_cre_flg
    }
    pub fn clear_entity_cre_flg(&mut self) {
        self.entity_cre_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_entity_cre_flg(&mut self, v: ::std::string::String) {
        self.entity_cre_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entity_cre_flg(&mut self) -> &mut ::std::string::String {
        &mut self.entity_cre_flg
    }

    // Take field
    pub fn take_entity_cre_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.entity_cre_flg, ::std::string::String::new())
    }

    // int64 acct_cls_date = 23;


    pub fn get_acct_cls_date(&self) -> i64 {
        self.acct_cls_date
    }
    pub fn clear_acct_cls_date(&mut self) {
        self.acct_cls_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_acct_cls_date(&mut self, v: i64) {
        self.acct_cls_date = v;
    }

    // int64 last_tran_date = 24;


    pub fn get_last_tran_date(&self) -> i64 {
        self.last_tran_date
    }
    pub fn clear_last_tran_date(&mut self) {
        self.last_tran_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_tran_date(&mut self, v: i64) {
        self.last_tran_date = v;
    }

    // string notional_rate_code = 25;


    pub fn get_notional_rate_code(&self) -> &str {
        &self.notional_rate_code
    }
    pub fn clear_notional_rate_code(&mut self) {
        self.notional_rate_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_notional_rate_code(&mut self, v: ::std::string::String) {
        self.notional_rate_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_notional_rate_code(&mut self) -> &mut ::std::string::String {
        &mut self.notional_rate_code
    }

    // Take field
    pub fn take_notional_rate_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.notional_rate_code, ::std::string::String::new())
    }

    // string emp_id = 26;


    pub fn get_emp_id(&self) -> &str {
        &self.emp_id
    }
    pub fn clear_emp_id(&mut self) {
        self.emp_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_emp_id(&mut self, v: ::std::string::String) {
        self.emp_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_emp_id(&mut self) -> &mut ::std::string::String {
        &mut self.emp_id
    }

    // Take field
    pub fn take_emp_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.emp_id, ::std::string::String::new())
    }

    // double notional_rate = 27;


    pub fn get_notional_rate(&self) -> f64 {
        self.notional_rate
    }
    pub fn clear_notional_rate(&mut self) {
        self.notional_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_notional_rate(&mut self, v: f64) {
        self.notional_rate = v;
    }

    // string limit_b2kid = 28;


    pub fn get_limit_b2kid(&self) -> &str {
        &self.limit_b2kid
    }
    pub fn clear_limit_b2kid(&mut self) {
        self.limit_b2kid.clear();
    }

    // Param is passed by value, moved
    pub fn set_limit_b2kid(&mut self, v: ::std::string::String) {
        self.limit_b2kid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_limit_b2kid(&mut self) -> &mut ::std::string::String {
        &mut self.limit_b2kid
    }

    // Take field
    pub fn take_limit_b2kid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.limit_b2kid, ::std::string::String::new())
    }

    // string adim1_gam = 29;


    pub fn get_adim1_gam(&self) -> &str {
        &self.adim1_gam
    }
    pub fn clear_adim1_gam(&mut self) {
        self.adim1_gam.clear();
    }

    // Param is passed by value, moved
    pub fn set_adim1_gam(&mut self, v: ::std::string::String) {
        self.adim1_gam = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_adim1_gam(&mut self) -> &mut ::std::string::String {
        &mut self.adim1_gam
    }

    // Take field
    pub fn take_adim1_gam(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.adim1_gam, ::std::string::String::new())
    }

    // int64 adim2_gam = 30;


    pub fn get_adim2_gam(&self) -> i64 {
        self.adim2_gam
    }
    pub fn clear_adim2_gam(&mut self) {
        self.adim2_gam = 0;
    }

    // Param is passed by value, moved
    pub fn set_adim2_gam(&mut self, v: i64) {
        self.adim2_gam = v;
    }

    // int64 adim3_gam = 31;


    pub fn get_adim3_gam(&self) -> i64 {
        self.adim3_gam
    }
    pub fn clear_adim3_gam(&mut self) {
        self.adim3_gam = 0;
    }

    // Param is passed by value, moved
    pub fn set_adim3_gam(&mut self, v: i64) {
        self.adim3_gam = v;
    }

    // double int_rate = 32;


    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }
    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    // string bm_id = 33;


    pub fn get_bm_id(&self) -> &str {
        &self.bm_id
    }
    pub fn clear_bm_id(&mut self) {
        self.bm_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_bm_id(&mut self, v: ::std::string::String) {
        self.bm_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bm_id(&mut self) -> &mut ::std::string::String {
        &mut self.bm_id
    }

    // Take field
    pub fn take_bm_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bm_id, ::std::string::String::new())
    }

    // double spread = 34;


    pub fn get_spread(&self) -> f64 {
        self.spread
    }
    pub fn clear_spread(&mut self) {
        self.spread = 0.;
    }

    // Param is passed by value, moved
    pub fn set_spread(&mut self, v: f64) {
        self.spread = v;
    }

    // string reprice_freq = 35;


    pub fn get_reprice_freq(&self) -> &str {
        &self.reprice_freq
    }
    pub fn clear_reprice_freq(&mut self) {
        self.reprice_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_reprice_freq(&mut self, v: ::std::string::String) {
        self.reprice_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reprice_freq(&mut self) -> &mut ::std::string::String {
        &mut self.reprice_freq
    }

    // Take field
    pub fn take_reprice_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reprice_freq, ::std::string::String::new())
    }

    // int64 last_reprice_dt = 36;


    pub fn get_last_reprice_dt(&self) -> i64 {
        self.last_reprice_dt
    }
    pub fn clear_last_reprice_dt(&mut self) {
        self.last_reprice_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_reprice_dt(&mut self, v: i64) {
        self.last_reprice_dt = v;
    }

    // int64 next_reprice_dt = 37;


    pub fn get_next_reprice_dt(&self) -> i64 {
        self.next_reprice_dt
    }
    pub fn clear_next_reprice_dt(&mut self) {
        self.next_reprice_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_reprice_dt(&mut self, v: i64) {
        self.next_reprice_dt = v;
    }

    // string code1 = 38;


    pub fn get_code1(&self) -> &str {
        &self.code1
    }
    pub fn clear_code1(&mut self) {
        self.code1.clear();
    }

    // Param is passed by value, moved
    pub fn set_code1(&mut self, v: ::std::string::String) {
        self.code1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code1(&mut self) -> &mut ::std::string::String {
        &mut self.code1
    }

    // Take field
    pub fn take_code1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.code1, ::std::string::String::new())
    }

    // string code2 = 39;


    pub fn get_code2(&self) -> &str {
        &self.code2
    }
    pub fn clear_code2(&mut self) {
        self.code2.clear();
    }

    // Param is passed by value, moved
    pub fn set_code2(&mut self, v: ::std::string::String) {
        self.code2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code2(&mut self) -> &mut ::std::string::String {
        &mut self.code2
    }

    // Take field
    pub fn take_code2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.code2, ::std::string::String::new())
    }

    // string code3 = 40;


    pub fn get_code3(&self) -> &str {
        &self.code3
    }
    pub fn clear_code3(&mut self) {
        self.code3.clear();
    }

    // Param is passed by value, moved
    pub fn set_code3(&mut self, v: ::std::string::String) {
        self.code3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code3(&mut self) -> &mut ::std::string::String {
        &mut self.code3
    }

    // Take field
    pub fn take_code3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.code3, ::std::string::String::new())
    }

    // string code4 = 41;


    pub fn get_code4(&self) -> &str {
        &self.code4
    }
    pub fn clear_code4(&mut self) {
        self.code4.clear();
    }

    // Param is passed by value, moved
    pub fn set_code4(&mut self, v: ::std::string::String) {
        self.code4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code4(&mut self) -> &mut ::std::string::String {
        &mut self.code4
    }

    // Take field
    pub fn take_code4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.code4, ::std::string::String::new())
    }

    // string adim1_gac = 42;


    pub fn get_adim1_gac(&self) -> &str {
        &self.adim1_gac
    }
    pub fn clear_adim1_gac(&mut self) {
        self.adim1_gac.clear();
    }

    // Param is passed by value, moved
    pub fn set_adim1_gac(&mut self, v: ::std::string::String) {
        self.adim1_gac = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_adim1_gac(&mut self) -> &mut ::std::string::String {
        &mut self.adim1_gac
    }

    // Take field
    pub fn take_adim1_gac(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.adim1_gac, ::std::string::String::new())
    }

    // string adim2_gac = 43;


    pub fn get_adim2_gac(&self) -> &str {
        &self.adim2_gac
    }
    pub fn clear_adim2_gac(&mut self) {
        self.adim2_gac.clear();
    }

    // Param is passed by value, moved
    pub fn set_adim2_gac(&mut self, v: ::std::string::String) {
        self.adim2_gac = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_adim2_gac(&mut self) -> &mut ::std::string::String {
        &mut self.adim2_gac
    }

    // Take field
    pub fn take_adim2_gac(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.adim2_gac, ::std::string::String::new())
    }

    // string adim3_gac = 44;


    pub fn get_adim3_gac(&self) -> &str {
        &self.adim3_gac
    }
    pub fn clear_adim3_gac(&mut self) {
        self.adim3_gac.clear();
    }

    // Param is passed by value, moved
    pub fn set_adim3_gac(&mut self, v: ::std::string::String) {
        self.adim3_gac = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_adim3_gac(&mut self) -> &mut ::std::string::String {
        &mut self.adim3_gac
    }

    // Take field
    pub fn take_adim3_gac(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.adim3_gac, ::std::string::String::new())
    }

    // string cust_name = 45;


    pub fn get_cust_name(&self) -> &str {
        &self.cust_name
    }
    pub fn clear_cust_name(&mut self) {
        self.cust_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_name(&mut self, v: ::std::string::String) {
        self.cust_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_name
    }

    // Take field
    pub fn take_cust_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_name, ::std::string::String::new())
    }

    // string cmg_pan_gir_num = 46;


    pub fn get_cmg_pan_gir_num(&self) -> &str {
        &self.cmg_pan_gir_num
    }
    pub fn clear_cmg_pan_gir_num(&mut self) {
        self.cmg_pan_gir_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_cmg_pan_gir_num(&mut self, v: ::std::string::String) {
        self.cmg_pan_gir_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cmg_pan_gir_num(&mut self) -> &mut ::std::string::String {
        &mut self.cmg_pan_gir_num
    }

    // Take field
    pub fn take_cmg_pan_gir_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cmg_pan_gir_num, ::std::string::String::new())
    }

    // string cmg_cust_const = 47;


    pub fn get_cmg_cust_const(&self) -> &str {
        &self.cmg_cust_const
    }
    pub fn clear_cmg_cust_const(&mut self) {
        self.cmg_cust_const.clear();
    }

    // Param is passed by value, moved
    pub fn set_cmg_cust_const(&mut self, v: ::std::string::String) {
        self.cmg_cust_const = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cmg_cust_const(&mut self) -> &mut ::std::string::String {
        &mut self.cmg_cust_const
    }

    // Take field
    pub fn take_cmg_cust_const(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cmg_cust_const, ::std::string::String::new())
    }

    // string adim1_cmg = 48;


    pub fn get_adim1_cmg(&self) -> &str {
        &self.adim1_cmg
    }
    pub fn clear_adim1_cmg(&mut self) {
        self.adim1_cmg.clear();
    }

    // Param is passed by value, moved
    pub fn set_adim1_cmg(&mut self, v: ::std::string::String) {
        self.adim1_cmg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_adim1_cmg(&mut self) -> &mut ::std::string::String {
        &mut self.adim1_cmg
    }

    // Take field
    pub fn take_adim1_cmg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.adim1_cmg, ::std::string::String::new())
    }

    // string adim2_cmg = 49;


    pub fn get_adim2_cmg(&self) -> &str {
        &self.adim2_cmg
    }
    pub fn clear_adim2_cmg(&mut self) {
        self.adim2_cmg.clear();
    }

    // Param is passed by value, moved
    pub fn set_adim2_cmg(&mut self, v: ::std::string::String) {
        self.adim2_cmg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_adim2_cmg(&mut self) -> &mut ::std::string::String {
        &mut self.adim2_cmg
    }

    // Take field
    pub fn take_adim2_cmg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.adim2_cmg, ::std::string::String::new())
    }

    // string adim3_cmg = 50;


    pub fn get_adim3_cmg(&self) -> &str {
        &self.adim3_cmg
    }
    pub fn clear_adim3_cmg(&mut self) {
        self.adim3_cmg.clear();
    }

    // Param is passed by value, moved
    pub fn set_adim3_cmg(&mut self, v: ::std::string::String) {
        self.adim3_cmg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_adim3_cmg(&mut self) -> &mut ::std::string::String {
        &mut self.adim3_cmg
    }

    // Take field
    pub fn take_adim3_cmg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.adim3_cmg, ::std::string::String::new())
    }

    // double out_bal_amt = 51;


    pub fn get_out_bal_amt(&self) -> f64 {
        self.out_bal_amt
    }
    pub fn clear_out_bal_amt(&mut self) {
        self.out_bal_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_out_bal_amt(&mut self, v: f64) {
        self.out_bal_amt = v;
    }

    // string cust_grp_id = 52;


    pub fn get_cust_grp_id(&self) -> &str {
        &self.cust_grp_id
    }
    pub fn clear_cust_grp_id(&mut self) {
        self.cust_grp_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_grp_id(&mut self, v: ::std::string::String) {
        self.cust_grp_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_grp_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_grp_id
    }

    // Take field
    pub fn take_cust_grp_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_grp_id, ::std::string::String::new())
    }

    // string ucif_cust_const = 53;


    pub fn get_ucif_cust_const(&self) -> &str {
        &self.ucif_cust_const
    }
    pub fn clear_ucif_cust_const(&mut self) {
        self.ucif_cust_const.clear();
    }

    // Param is passed by value, moved
    pub fn set_ucif_cust_const(&mut self, v: ::std::string::String) {
        self.ucif_cust_const = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ucif_cust_const(&mut self) -> &mut ::std::string::String {
        &mut self.ucif_cust_const
    }

    // Take field
    pub fn take_ucif_cust_const(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ucif_cust_const, ::std::string::String::new())
    }

    // string exch_rt = 54;


    pub fn get_exch_rt(&self) -> &str {
        &self.exch_rt
    }
    pub fn clear_exch_rt(&mut self) {
        self.exch_rt.clear();
    }

    // Param is passed by value, moved
    pub fn set_exch_rt(&mut self, v: ::std::string::String) {
        self.exch_rt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exch_rt(&mut self) -> &mut ::std::string::String {
        &mut self.exch_rt
    }

    // Take field
    pub fn take_exch_rt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.exch_rt, ::std::string::String::new())
    }

    // double out_bal_amt_con = 55;


    pub fn get_out_bal_amt_con(&self) -> f64 {
        self.out_bal_amt_con
    }
    pub fn clear_out_bal_amt_con(&mut self) {
        self.out_bal_amt_con = 0.;
    }

    // Param is passed by value, moved
    pub fn set_out_bal_amt_con(&mut self, v: f64) {
        self.out_bal_amt_con = v;
    }

    // string segment_code = 56;


    pub fn get_segment_code(&self) -> &str {
        &self.segment_code
    }
    pub fn clear_segment_code(&mut self) {
        self.segment_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_segment_code(&mut self, v: ::std::string::String) {
        self.segment_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_segment_code(&mut self) -> &mut ::std::string::String {
        &mut self.segment_code
    }

    // Take field
    pub fn take_segment_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.segment_code, ::std::string::String::new())
    }

    // string nfs = 57;


    pub fn get_nfs(&self) -> &str {
        &self.nfs
    }
    pub fn clear_nfs(&mut self) {
        self.nfs.clear();
    }

    // Param is passed by value, moved
    pub fn set_nfs(&mut self, v: ::std::string::String) {
        self.nfs = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nfs(&mut self) -> &mut ::std::string::String {
        &mut self.nfs
    }

    // Take field
    pub fn take_nfs(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nfs, ::std::string::String::new())
    }

    // string oth_del_flg = 58;


    pub fn get_oth_del_flg(&self) -> &str {
        &self.oth_del_flg
    }
    pub fn clear_oth_del_flg(&mut self) {
        self.oth_del_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_oth_del_flg(&mut self, v: ::std::string::String) {
        self.oth_del_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oth_del_flg(&mut self) -> &mut ::std::string::String {
        &mut self.oth_del_flg
    }

    // Take field
    pub fn take_oth_del_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.oth_del_flg, ::std::string::String::new())
    }

    // int64 open_effective_date = 59;


    pub fn get_open_effective_date(&self) -> i64 {
        self.open_effective_date
    }
    pub fn clear_open_effective_date(&mut self) {
        self.open_effective_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_open_effective_date(&mut self, v: i64) {
        self.open_effective_date = v;
    }

    // string oth_schm_type = 60;


    pub fn get_oth_schm_type(&self) -> &str {
        &self.oth_schm_type
    }
    pub fn clear_oth_schm_type(&mut self) {
        self.oth_schm_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_oth_schm_type(&mut self, v: ::std::string::String) {
        self.oth_schm_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oth_schm_type(&mut self) -> &mut ::std::string::String {
        &mut self.oth_schm_type
    }

    // Take field
    pub fn take_oth_schm_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.oth_schm_type, ::std::string::String::new())
    }

    // string int_tbl_code = 61;


    pub fn get_int_tbl_code(&self) -> &str {
        &self.int_tbl_code
    }
    pub fn clear_int_tbl_code(&mut self) {
        self.int_tbl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_tbl_code(&mut self, v: ::std::string::String) {
        self.int_tbl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_tbl_code(&mut self) -> &mut ::std::string::String {
        &mut self.int_tbl_code
    }

    // Take field
    pub fn take_int_tbl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_tbl_code, ::std::string::String::new())
    }

    // int64 int_version = 62;


    pub fn get_int_version(&self) -> i64 {
        self.int_version
    }
    pub fn clear_int_version(&mut self) {
        self.int_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_version(&mut self, v: i64) {
        self.int_version = v;
    }

    // int64 int_tbl_ver_num = 63;


    pub fn get_int_tbl_ver_num(&self) -> i64 {
        self.int_tbl_ver_num
    }
    pub fn clear_int_tbl_ver_num(&mut self) {
        self.int_tbl_ver_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_tbl_ver_num(&mut self, v: i64) {
        self.int_tbl_ver_num = v;
    }

    // double min_int_pcnt_cr = 64;


    pub fn get_min_int_pcnt_cr(&self) -> f64 {
        self.min_int_pcnt_cr
    }
    pub fn clear_min_int_pcnt_cr(&mut self) {
        self.min_int_pcnt_cr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_min_int_pcnt_cr(&mut self, v: f64) {
        self.min_int_pcnt_cr = v;
    }

    // double max_int_pcnt_cr = 65;


    pub fn get_max_int_pcnt_cr(&self) -> f64 {
        self.max_int_pcnt_cr
    }
    pub fn clear_max_int_pcnt_cr(&mut self) {
        self.max_int_pcnt_cr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_max_int_pcnt_cr(&mut self, v: f64) {
        self.max_int_pcnt_cr = v;
    }

    // double cust_cr_pref_pcnt = 66;


    pub fn get_cust_cr_pref_pcnt(&self) -> f64 {
        self.cust_cr_pref_pcnt
    }
    pub fn clear_cust_cr_pref_pcnt(&mut self) {
        self.cust_cr_pref_pcnt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cust_cr_pref_pcnt(&mut self, v: f64) {
        self.cust_cr_pref_pcnt = v;
    }

    // double id_cr_pref_pcnt = 67;


    pub fn get_id_cr_pref_pcnt(&self) -> f64 {
        self.id_cr_pref_pcnt
    }
    pub fn clear_id_cr_pref_pcnt(&mut self) {
        self.id_cr_pref_pcnt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_id_cr_pref_pcnt(&mut self, v: f64) {
        self.id_cr_pref_pcnt = v;
    }

    // double nrml_int_pcnt = 68;


    pub fn get_nrml_int_pcnt(&self) -> f64 {
        self.nrml_int_pcnt
    }
    pub fn clear_nrml_int_pcnt(&mut self) {
        self.nrml_int_pcnt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_nrml_int_pcnt(&mut self, v: f64) {
        self.nrml_int_pcnt = v;
    }

    // double id_dr_pref_pcnt = 69;


    pub fn get_id_dr_pref_pcnt(&self) -> f64 {
        self.id_dr_pref_pcnt
    }
    pub fn clear_id_dr_pref_pcnt(&mut self) {
        self.id_dr_pref_pcnt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_id_dr_pref_pcnt(&mut self, v: f64) {
        self.id_dr_pref_pcnt = v;
    }

    // string base_int_tbl_code = 70;


    pub fn get_base_int_tbl_code(&self) -> &str {
        &self.base_int_tbl_code
    }
    pub fn clear_base_int_tbl_code(&mut self) {
        self.base_int_tbl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_int_tbl_code(&mut self, v: ::std::string::String) {
        self.base_int_tbl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_int_tbl_code(&mut self) -> &mut ::std::string::String {
        &mut self.base_int_tbl_code
    }

    // Take field
    pub fn take_base_int_tbl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base_int_tbl_code, ::std::string::String::new())
    }

    // double base_pcnt_dr = 71;


    pub fn get_base_pcnt_dr(&self) -> f64 {
        self.base_pcnt_dr
    }
    pub fn clear_base_pcnt_dr(&mut self) {
        self.base_pcnt_dr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_pcnt_dr(&mut self, v: f64) {
        self.base_pcnt_dr = v;
    }

    // double base_pcnt_cr = 72;


    pub fn get_base_pcnt_cr(&self) -> f64 {
        self.base_pcnt_cr
    }
    pub fn clear_base_pcnt_cr(&mut self) {
        self.base_pcnt_cr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_pcnt_cr(&mut self, v: f64) {
        self.base_pcnt_cr = v;
    }

    // double base_pcnt = 73;


    pub fn get_base_pcnt(&self) -> f64 {
        self.base_pcnt
    }
    pub fn clear_base_pcnt(&mut self) {
        self.base_pcnt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_pcnt(&mut self, v: f64) {
        self.base_pcnt = v;
    }

    // int64 deposit_period_mths = 74;


    pub fn get_deposit_period_mths(&self) -> i64 {
        self.deposit_period_mths
    }
    pub fn clear_deposit_period_mths(&mut self) {
        self.deposit_period_mths = 0;
    }

    // Param is passed by value, moved
    pub fn set_deposit_period_mths(&mut self, v: i64) {
        self.deposit_period_mths = v;
    }

    // int64 deposit_period_days = 75;


    pub fn get_deposit_period_days(&self) -> i64 {
        self.deposit_period_days
    }
    pub fn clear_deposit_period_days(&mut self) {
        self.deposit_period_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_deposit_period_days(&mut self, v: i64) {
        self.deposit_period_days = v;
    }

    // double deposit_amount = 76;


    pub fn get_deposit_amount(&self) -> f64 {
        self.deposit_amount
    }
    pub fn clear_deposit_amount(&mut self) {
        self.deposit_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_deposit_amount(&mut self, v: f64) {
        self.deposit_amount = v;
    }

    // string oth_acct_crncy_code = 77;


    pub fn get_oth_acct_crncy_code(&self) -> &str {
        &self.oth_acct_crncy_code
    }
    pub fn clear_oth_acct_crncy_code(&mut self) {
        self.oth_acct_crncy_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_oth_acct_crncy_code(&mut self, v: ::std::string::String) {
        self.oth_acct_crncy_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oth_acct_crncy_code(&mut self) -> &mut ::std::string::String {
        &mut self.oth_acct_crncy_code
    }

    // Take field
    pub fn take_oth_acct_crncy_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.oth_acct_crncy_code, ::std::string::String::new())
    }

    // string deposit_type = 78;


    pub fn get_deposit_type(&self) -> &str {
        &self.deposit_type
    }
    pub fn clear_deposit_type(&mut self) {
        self.deposit_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_deposit_type(&mut self, v: ::std::string::String) {
        self.deposit_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deposit_type(&mut self) -> &mut ::std::string::String {
        &mut self.deposit_type
    }

    // Take field
    pub fn take_deposit_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deposit_type, ::std::string::String::new())
    }

    // string spl_catg_ind = 79;


    pub fn get_spl_catg_ind(&self) -> &str {
        &self.spl_catg_ind
    }
    pub fn clear_spl_catg_ind(&mut self) {
        self.spl_catg_ind.clear();
    }

    // Param is passed by value, moved
    pub fn set_spl_catg_ind(&mut self, v: ::std::string::String) {
        self.spl_catg_ind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spl_catg_ind(&mut self) -> &mut ::std::string::String {
        &mut self.spl_catg_ind
    }

    // Take field
    pub fn take_spl_catg_ind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.spl_catg_ind, ::std::string::String::new())
    }

    // double nrml_int_pcnt_cr = 80;


    pub fn get_nrml_int_pcnt_cr(&self) -> f64 {
        self.nrml_int_pcnt_cr
    }
    pub fn clear_nrml_int_pcnt_cr(&mut self) {
        self.nrml_int_pcnt_cr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_nrml_int_pcnt_cr(&mut self, v: f64) {
        self.nrml_int_pcnt_cr = v;
    }

    // string base_differential_exists = 81;


    pub fn get_base_differential_exists(&self) -> &str {
        &self.base_differential_exists
    }
    pub fn clear_base_differential_exists(&mut self) {
        self.base_differential_exists.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_differential_exists(&mut self, v: ::std::string::String) {
        self.base_differential_exists = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_differential_exists(&mut self) -> &mut ::std::string::String {
        &mut self.base_differential_exists
    }

    // Take field
    pub fn take_base_differential_exists(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base_differential_exists, ::std::string::String::new())
    }

    // string deposit_status = 82;


    pub fn get_deposit_status(&self) -> &str {
        &self.deposit_status
    }
    pub fn clear_deposit_status(&mut self) {
        self.deposit_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_deposit_status(&mut self, v: ::std::string::String) {
        self.deposit_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deposit_status(&mut self) -> &mut ::std::string::String {
        &mut self.deposit_status
    }

    // Take field
    pub fn take_deposit_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deposit_status, ::std::string::String::new())
    }

    // double maturity_amount = 83;


    pub fn get_maturity_amount(&self) -> f64 {
        self.maturity_amount
    }
    pub fn clear_maturity_amount(&mut self) {
        self.maturity_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_maturity_amount(&mut self, v: f64) {
        self.maturity_amount = v;
    }

    // int64 maturity_date = 84;


    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }
    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    // int64 rcre_time = 85;


    pub fn get_rcre_time(&self) -> i64 {
        self.rcre_time
    }
    pub fn clear_rcre_time(&mut self) {
        self.rcre_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_rcre_time(&mut self, v: i64) {
        self.rcre_time = v;
    }

    // string auto_renewed_counter = 86;


    pub fn get_auto_renewed_counter(&self) -> &str {
        &self.auto_renewed_counter
    }
    pub fn clear_auto_renewed_counter(&mut self) {
        self.auto_renewed_counter.clear();
    }

    // Param is passed by value, moved
    pub fn set_auto_renewed_counter(&mut self, v: ::std::string::String) {
        self.auto_renewed_counter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_auto_renewed_counter(&mut self) -> &mut ::std::string::String {
        &mut self.auto_renewed_counter
    }

    // Take field
    pub fn take_auto_renewed_counter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.auto_renewed_counter, ::std::string::String::new())
    }

    // string overdue_flg = 87;


    pub fn get_overdue_flg(&self) -> &str {
        &self.overdue_flg
    }
    pub fn clear_overdue_flg(&mut self) {
        self.overdue_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_overdue_flg(&mut self, v: ::std::string::String) {
        self.overdue_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_overdue_flg(&mut self) -> &mut ::std::string::String {
        &mut self.overdue_flg
    }

    // Take field
    pub fn take_overdue_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.overdue_flg, ::std::string::String::new())
    }

    // double final_int_rate = 88;


    pub fn get_final_int_rate(&self) -> f64 {
        self.final_int_rate
    }
    pub fn clear_final_int_rate(&mut self) {
        self.final_int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_final_int_rate(&mut self, v: f64) {
        self.final_int_rate = v;
    }

    // string source_name = 89;


    pub fn get_source_name(&self) -> &str {
        &self.source_name
    }
    pub fn clear_source_name(&mut self) {
        self.source_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_name(&mut self, v: ::std::string::String) {
        self.source_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_name(&mut self) -> &mut ::std::string::String {
        &mut self.source_name
    }

    // Take field
    pub fn take_source_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source_name, ::std::string::String::new())
    }

    // repeated .Cashflow cashflows = 90;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.foracid)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bacid)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.clr_bal_amt = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.un_clr_bal_amt = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sol_id)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_id)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acct_ownership)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ledg_num)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.drwng_power)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mode_of_oper_code)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.lien_amt = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sanct_lim)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_sub_head_code)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schm_code)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schm_type)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.crncy_code)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acct_crncy_code)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acct_cls_flg)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.del_flg)?;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acct_opn_date = tmp;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.entity_cre_flg)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acct_cls_date = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_tran_date = tmp;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.notional_rate_code)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.emp_id)?;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.notional_rate = tmp;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.limit_b2kid)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.adim1_gam)?;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.adim2_gam = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.adim3_gam = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bm_id)?;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.spread = tmp;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reprice_freq)?;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_reprice_dt = tmp;
                },
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_reprice_dt = tmp;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.code1)?;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.code2)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.code3)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.code4)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.adim1_gac)?;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.adim2_gac)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.adim3_gac)?;
                },
                45 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_name)?;
                },
                46 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cmg_pan_gir_num)?;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cmg_cust_const)?;
                },
                48 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.adim1_cmg)?;
                },
                49 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.adim2_cmg)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.adim3_cmg)?;
                },
                51 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.out_bal_amt = tmp;
                },
                52 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_grp_id)?;
                },
                53 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ucif_cust_const)?;
                },
                54 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.exch_rt)?;
                },
                55 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.out_bal_amt_con = tmp;
                },
                56 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.segment_code)?;
                },
                57 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nfs)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.oth_del_flg)?;
                },
                59 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.open_effective_date = tmp;
                },
                60 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.oth_schm_type)?;
                },
                61 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_tbl_code)?;
                },
                62 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int_version = tmp;
                },
                63 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int_tbl_ver_num = tmp;
                },
                64 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.min_int_pcnt_cr = tmp;
                },
                65 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.max_int_pcnt_cr = tmp;
                },
                66 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.cust_cr_pref_pcnt = tmp;
                },
                67 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.id_cr_pref_pcnt = tmp;
                },
                68 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.nrml_int_pcnt = tmp;
                },
                69 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.id_dr_pref_pcnt = tmp;
                },
                70 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base_int_tbl_code)?;
                },
                71 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.base_pcnt_dr = tmp;
                },
                72 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.base_pcnt_cr = tmp;
                },
                73 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.base_pcnt = tmp;
                },
                74 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deposit_period_mths = tmp;
                },
                75 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deposit_period_days = tmp;
                },
                76 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.deposit_amount = tmp;
                },
                77 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.oth_acct_crncy_code)?;
                },
                78 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deposit_type)?;
                },
                79 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.spl_catg_ind)?;
                },
                80 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.nrml_int_pcnt_cr = tmp;
                },
                81 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base_differential_exists)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deposit_status)?;
                },
                83 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.maturity_amount = tmp;
                },
                84 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                85 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rcre_time = tmp;
                },
                86 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.auto_renewed_counter)?;
                },
                87 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.overdue_flg)?;
                },
                88 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.final_int_rate = tmp;
                },
                89 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source_name)?;
                },
                90 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.acid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.acid);
        }
        if !self.foracid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.foracid);
        }
        if !self.bacid.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.bacid);
        }
        if self.clr_bal_amt != 0. {
            my_size += 9;
        }
        if self.un_clr_bal_amt != 0. {
            my_size += 9;
        }
        if !self.sol_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.sol_id);
        }
        if !self.cust_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.cust_id);
        }
        if !self.acct_ownership.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.acct_ownership);
        }
        if !self.ledg_num.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.ledg_num);
        }
        if !self.drwng_power.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.drwng_power);
        }
        if !self.mode_of_oper_code.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.mode_of_oper_code);
        }
        if self.lien_amt != 0. {
            my_size += 9;
        }
        if !self.sanct_lim.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.sanct_lim);
        }
        if !self.gl_sub_head_code.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.gl_sub_head_code);
        }
        if !self.schm_code.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.schm_code);
        }
        if !self.schm_type.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.schm_type);
        }
        if !self.crncy_code.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.crncy_code);
        }
        if !self.acct_crncy_code.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.acct_crncy_code);
        }
        if !self.acct_cls_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.acct_cls_flg);
        }
        if !self.del_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.del_flg);
        }
        if self.acct_opn_date != 0 {
            my_size += ::protobuf::rt::value_size(21, self.acct_opn_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.entity_cre_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.entity_cre_flg);
        }
        if self.acct_cls_date != 0 {
            my_size += ::protobuf::rt::value_size(23, self.acct_cls_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_tran_date != 0 {
            my_size += ::protobuf::rt::value_size(24, self.last_tran_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.notional_rate_code.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.notional_rate_code);
        }
        if !self.emp_id.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.emp_id);
        }
        if self.notional_rate != 0. {
            my_size += 10;
        }
        if !self.limit_b2kid.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.limit_b2kid);
        }
        if !self.adim1_gam.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.adim1_gam);
        }
        if self.adim2_gam != 0 {
            my_size += ::protobuf::rt::value_size(30, self.adim2_gam, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.adim3_gam != 0 {
            my_size += ::protobuf::rt::value_size(31, self.adim3_gam, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_rate != 0. {
            my_size += 10;
        }
        if !self.bm_id.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.bm_id);
        }
        if self.spread != 0. {
            my_size += 10;
        }
        if !self.reprice_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.reprice_freq);
        }
        if self.last_reprice_dt != 0 {
            my_size += ::protobuf::rt::value_size(36, self.last_reprice_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_reprice_dt != 0 {
            my_size += ::protobuf::rt::value_size(37, self.next_reprice_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.code1.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.code1);
        }
        if !self.code2.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.code2);
        }
        if !self.code3.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.code3);
        }
        if !self.code4.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.code4);
        }
        if !self.adim1_gac.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.adim1_gac);
        }
        if !self.adim2_gac.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.adim2_gac);
        }
        if !self.adim3_gac.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.adim3_gac);
        }
        if !self.cust_name.is_empty() {
            my_size += ::protobuf::rt::string_size(45, &self.cust_name);
        }
        if !self.cmg_pan_gir_num.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.cmg_pan_gir_num);
        }
        if !self.cmg_cust_const.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.cmg_cust_const);
        }
        if !self.adim1_cmg.is_empty() {
            my_size += ::protobuf::rt::string_size(48, &self.adim1_cmg);
        }
        if !self.adim2_cmg.is_empty() {
            my_size += ::protobuf::rt::string_size(49, &self.adim2_cmg);
        }
        if !self.adim3_cmg.is_empty() {
            my_size += ::protobuf::rt::string_size(50, &self.adim3_cmg);
        }
        if self.out_bal_amt != 0. {
            my_size += 10;
        }
        if !self.cust_grp_id.is_empty() {
            my_size += ::protobuf::rt::string_size(52, &self.cust_grp_id);
        }
        if !self.ucif_cust_const.is_empty() {
            my_size += ::protobuf::rt::string_size(53, &self.ucif_cust_const);
        }
        if !self.exch_rt.is_empty() {
            my_size += ::protobuf::rt::string_size(54, &self.exch_rt);
        }
        if self.out_bal_amt_con != 0. {
            my_size += 10;
        }
        if !self.segment_code.is_empty() {
            my_size += ::protobuf::rt::string_size(56, &self.segment_code);
        }
        if !self.nfs.is_empty() {
            my_size += ::protobuf::rt::string_size(57, &self.nfs);
        }
        if !self.oth_del_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(58, &self.oth_del_flg);
        }
        if self.open_effective_date != 0 {
            my_size += ::protobuf::rt::value_size(59, self.open_effective_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.oth_schm_type.is_empty() {
            my_size += ::protobuf::rt::string_size(60, &self.oth_schm_type);
        }
        if !self.int_tbl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(61, &self.int_tbl_code);
        }
        if self.int_version != 0 {
            my_size += ::protobuf::rt::value_size(62, self.int_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_tbl_ver_num != 0 {
            my_size += ::protobuf::rt::value_size(63, self.int_tbl_ver_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_int_pcnt_cr != 0. {
            my_size += 10;
        }
        if self.max_int_pcnt_cr != 0. {
            my_size += 10;
        }
        if self.cust_cr_pref_pcnt != 0. {
            my_size += 10;
        }
        if self.id_cr_pref_pcnt != 0. {
            my_size += 10;
        }
        if self.nrml_int_pcnt != 0. {
            my_size += 10;
        }
        if self.id_dr_pref_pcnt != 0. {
            my_size += 10;
        }
        if !self.base_int_tbl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(70, &self.base_int_tbl_code);
        }
        if self.base_pcnt_dr != 0. {
            my_size += 10;
        }
        if self.base_pcnt_cr != 0. {
            my_size += 10;
        }
        if self.base_pcnt != 0. {
            my_size += 10;
        }
        if self.deposit_period_mths != 0 {
            my_size += ::protobuf::rt::value_size(74, self.deposit_period_mths, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.deposit_period_days != 0 {
            my_size += ::protobuf::rt::value_size(75, self.deposit_period_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.deposit_amount != 0. {
            my_size += 10;
        }
        if !self.oth_acct_crncy_code.is_empty() {
            my_size += ::protobuf::rt::string_size(77, &self.oth_acct_crncy_code);
        }
        if !self.deposit_type.is_empty() {
            my_size += ::protobuf::rt::string_size(78, &self.deposit_type);
        }
        if !self.spl_catg_ind.is_empty() {
            my_size += ::protobuf::rt::string_size(79, &self.spl_catg_ind);
        }
        if self.nrml_int_pcnt_cr != 0. {
            my_size += 10;
        }
        if !self.base_differential_exists.is_empty() {
            my_size += ::protobuf::rt::string_size(81, &self.base_differential_exists);
        }
        if !self.deposit_status.is_empty() {
            my_size += ::protobuf::rt::string_size(82, &self.deposit_status);
        }
        if self.maturity_amount != 0. {
            my_size += 10;
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(84, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rcre_time != 0 {
            my_size += ::protobuf::rt::value_size(85, self.rcre_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.auto_renewed_counter.is_empty() {
            my_size += ::protobuf::rt::string_size(86, &self.auto_renewed_counter);
        }
        if !self.overdue_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(87, &self.overdue_flg);
        }
        if self.final_int_rate != 0. {
            my_size += 10;
        }
        if !self.source_name.is_empty() {
            my_size += ::protobuf::rt::string_size(89, &self.source_name);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.acid.is_empty() {
            os.write_string(1, &self.acid)?;
        }
        if !self.foracid.is_empty() {
            os.write_string(2, &self.foracid)?;
        }
        if !self.bacid.is_empty() {
            os.write_string(3, &self.bacid)?;
        }
        if self.clr_bal_amt != 0. {
            os.write_double(4, self.clr_bal_amt)?;
        }
        if self.un_clr_bal_amt != 0. {
            os.write_double(5, self.un_clr_bal_amt)?;
        }
        if !self.sol_id.is_empty() {
            os.write_string(6, &self.sol_id)?;
        }
        if !self.cust_id.is_empty() {
            os.write_string(7, &self.cust_id)?;
        }
        if !self.acct_ownership.is_empty() {
            os.write_string(8, &self.acct_ownership)?;
        }
        if !self.ledg_num.is_empty() {
            os.write_string(9, &self.ledg_num)?;
        }
        if !self.drwng_power.is_empty() {
            os.write_string(10, &self.drwng_power)?;
        }
        if !self.mode_of_oper_code.is_empty() {
            os.write_string(11, &self.mode_of_oper_code)?;
        }
        if self.lien_amt != 0. {
            os.write_double(12, self.lien_amt)?;
        }
        if !self.sanct_lim.is_empty() {
            os.write_string(13, &self.sanct_lim)?;
        }
        if !self.gl_sub_head_code.is_empty() {
            os.write_string(14, &self.gl_sub_head_code)?;
        }
        if !self.schm_code.is_empty() {
            os.write_string(15, &self.schm_code)?;
        }
        if !self.schm_type.is_empty() {
            os.write_string(16, &self.schm_type)?;
        }
        if !self.crncy_code.is_empty() {
            os.write_string(17, &self.crncy_code)?;
        }
        if !self.acct_crncy_code.is_empty() {
            os.write_string(18, &self.acct_crncy_code)?;
        }
        if !self.acct_cls_flg.is_empty() {
            os.write_string(19, &self.acct_cls_flg)?;
        }
        if !self.del_flg.is_empty() {
            os.write_string(20, &self.del_flg)?;
        }
        if self.acct_opn_date != 0 {
            os.write_int64(21, self.acct_opn_date)?;
        }
        if !self.entity_cre_flg.is_empty() {
            os.write_string(22, &self.entity_cre_flg)?;
        }
        if self.acct_cls_date != 0 {
            os.write_int64(23, self.acct_cls_date)?;
        }
        if self.last_tran_date != 0 {
            os.write_int64(24, self.last_tran_date)?;
        }
        if !self.notional_rate_code.is_empty() {
            os.write_string(25, &self.notional_rate_code)?;
        }
        if !self.emp_id.is_empty() {
            os.write_string(26, &self.emp_id)?;
        }
        if self.notional_rate != 0. {
            os.write_double(27, self.notional_rate)?;
        }
        if !self.limit_b2kid.is_empty() {
            os.write_string(28, &self.limit_b2kid)?;
        }
        if !self.adim1_gam.is_empty() {
            os.write_string(29, &self.adim1_gam)?;
        }
        if self.adim2_gam != 0 {
            os.write_int64(30, self.adim2_gam)?;
        }
        if self.adim3_gam != 0 {
            os.write_int64(31, self.adim3_gam)?;
        }
        if self.int_rate != 0. {
            os.write_double(32, self.int_rate)?;
        }
        if !self.bm_id.is_empty() {
            os.write_string(33, &self.bm_id)?;
        }
        if self.spread != 0. {
            os.write_double(34, self.spread)?;
        }
        if !self.reprice_freq.is_empty() {
            os.write_string(35, &self.reprice_freq)?;
        }
        if self.last_reprice_dt != 0 {
            os.write_int64(36, self.last_reprice_dt)?;
        }
        if self.next_reprice_dt != 0 {
            os.write_int64(37, self.next_reprice_dt)?;
        }
        if !self.code1.is_empty() {
            os.write_string(38, &self.code1)?;
        }
        if !self.code2.is_empty() {
            os.write_string(39, &self.code2)?;
        }
        if !self.code3.is_empty() {
            os.write_string(40, &self.code3)?;
        }
        if !self.code4.is_empty() {
            os.write_string(41, &self.code4)?;
        }
        if !self.adim1_gac.is_empty() {
            os.write_string(42, &self.adim1_gac)?;
        }
        if !self.adim2_gac.is_empty() {
            os.write_string(43, &self.adim2_gac)?;
        }
        if !self.adim3_gac.is_empty() {
            os.write_string(44, &self.adim3_gac)?;
        }
        if !self.cust_name.is_empty() {
            os.write_string(45, &self.cust_name)?;
        }
        if !self.cmg_pan_gir_num.is_empty() {
            os.write_string(46, &self.cmg_pan_gir_num)?;
        }
        if !self.cmg_cust_const.is_empty() {
            os.write_string(47, &self.cmg_cust_const)?;
        }
        if !self.adim1_cmg.is_empty() {
            os.write_string(48, &self.adim1_cmg)?;
        }
        if !self.adim2_cmg.is_empty() {
            os.write_string(49, &self.adim2_cmg)?;
        }
        if !self.adim3_cmg.is_empty() {
            os.write_string(50, &self.adim3_cmg)?;
        }
        if self.out_bal_amt != 0. {
            os.write_double(51, self.out_bal_amt)?;
        }
        if !self.cust_grp_id.is_empty() {
            os.write_string(52, &self.cust_grp_id)?;
        }
        if !self.ucif_cust_const.is_empty() {
            os.write_string(53, &self.ucif_cust_const)?;
        }
        if !self.exch_rt.is_empty() {
            os.write_string(54, &self.exch_rt)?;
        }
        if self.out_bal_amt_con != 0. {
            os.write_double(55, self.out_bal_amt_con)?;
        }
        if !self.segment_code.is_empty() {
            os.write_string(56, &self.segment_code)?;
        }
        if !self.nfs.is_empty() {
            os.write_string(57, &self.nfs)?;
        }
        if !self.oth_del_flg.is_empty() {
            os.write_string(58, &self.oth_del_flg)?;
        }
        if self.open_effective_date != 0 {
            os.write_int64(59, self.open_effective_date)?;
        }
        if !self.oth_schm_type.is_empty() {
            os.write_string(60, &self.oth_schm_type)?;
        }
        if !self.int_tbl_code.is_empty() {
            os.write_string(61, &self.int_tbl_code)?;
        }
        if self.int_version != 0 {
            os.write_int64(62, self.int_version)?;
        }
        if self.int_tbl_ver_num != 0 {
            os.write_int64(63, self.int_tbl_ver_num)?;
        }
        if self.min_int_pcnt_cr != 0. {
            os.write_double(64, self.min_int_pcnt_cr)?;
        }
        if self.max_int_pcnt_cr != 0. {
            os.write_double(65, self.max_int_pcnt_cr)?;
        }
        if self.cust_cr_pref_pcnt != 0. {
            os.write_double(66, self.cust_cr_pref_pcnt)?;
        }
        if self.id_cr_pref_pcnt != 0. {
            os.write_double(67, self.id_cr_pref_pcnt)?;
        }
        if self.nrml_int_pcnt != 0. {
            os.write_double(68, self.nrml_int_pcnt)?;
        }
        if self.id_dr_pref_pcnt != 0. {
            os.write_double(69, self.id_dr_pref_pcnt)?;
        }
        if !self.base_int_tbl_code.is_empty() {
            os.write_string(70, &self.base_int_tbl_code)?;
        }
        if self.base_pcnt_dr != 0. {
            os.write_double(71, self.base_pcnt_dr)?;
        }
        if self.base_pcnt_cr != 0. {
            os.write_double(72, self.base_pcnt_cr)?;
        }
        if self.base_pcnt != 0. {
            os.write_double(73, self.base_pcnt)?;
        }
        if self.deposit_period_mths != 0 {
            os.write_int64(74, self.deposit_period_mths)?;
        }
        if self.deposit_period_days != 0 {
            os.write_int64(75, self.deposit_period_days)?;
        }
        if self.deposit_amount != 0. {
            os.write_double(76, self.deposit_amount)?;
        }
        if !self.oth_acct_crncy_code.is_empty() {
            os.write_string(77, &self.oth_acct_crncy_code)?;
        }
        if !self.deposit_type.is_empty() {
            os.write_string(78, &self.deposit_type)?;
        }
        if !self.spl_catg_ind.is_empty() {
            os.write_string(79, &self.spl_catg_ind)?;
        }
        if self.nrml_int_pcnt_cr != 0. {
            os.write_double(80, self.nrml_int_pcnt_cr)?;
        }
        if !self.base_differential_exists.is_empty() {
            os.write_string(81, &self.base_differential_exists)?;
        }
        if !self.deposit_status.is_empty() {
            os.write_string(82, &self.deposit_status)?;
        }
        if self.maturity_amount != 0. {
            os.write_double(83, self.maturity_amount)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(84, self.maturity_date)?;
        }
        if self.rcre_time != 0 {
            os.write_int64(85, self.rcre_time)?;
        }
        if !self.auto_renewed_counter.is_empty() {
            os.write_string(86, &self.auto_renewed_counter)?;
        }
        if !self.overdue_flg.is_empty() {
            os.write_string(87, &self.overdue_flg)?;
        }
        if self.final_int_rate != 0. {
            os.write_double(88, self.final_int_rate)?;
        }
        if !self.source_name.is_empty() {
            os.write_string(89, &self.source_name)?;
        }
        for v in &self.cashflows {
            os.write_tag(90, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acid",
                |m: &AccountWithCashflows| { &m.acid },
                |m: &mut AccountWithCashflows| { &mut m.acid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "foracid",
                |m: &AccountWithCashflows| { &m.foracid },
                |m: &mut AccountWithCashflows| { &mut m.foracid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bacid",
                |m: &AccountWithCashflows| { &m.bacid },
                |m: &mut AccountWithCashflows| { &mut m.bacid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "clr_bal_amt",
                |m: &AccountWithCashflows| { &m.clr_bal_amt },
                |m: &mut AccountWithCashflows| { &mut m.clr_bal_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "un_clr_bal_amt",
                |m: &AccountWithCashflows| { &m.un_clr_bal_amt },
                |m: &mut AccountWithCashflows| { &mut m.un_clr_bal_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sol_id",
                |m: &AccountWithCashflows| { &m.sol_id },
                |m: &mut AccountWithCashflows| { &mut m.sol_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_id",
                |m: &AccountWithCashflows| { &m.cust_id },
                |m: &mut AccountWithCashflows| { &mut m.cust_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acct_ownership",
                |m: &AccountWithCashflows| { &m.acct_ownership },
                |m: &mut AccountWithCashflows| { &mut m.acct_ownership },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ledg_num",
                |m: &AccountWithCashflows| { &m.ledg_num },
                |m: &mut AccountWithCashflows| { &mut m.ledg_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "drwng_power",
                |m: &AccountWithCashflows| { &m.drwng_power },
                |m: &mut AccountWithCashflows| { &mut m.drwng_power },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mode_of_oper_code",
                |m: &AccountWithCashflows| { &m.mode_of_oper_code },
                |m: &mut AccountWithCashflows| { &mut m.mode_of_oper_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "lien_amt",
                |m: &AccountWithCashflows| { &m.lien_amt },
                |m: &mut AccountWithCashflows| { &mut m.lien_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sanct_lim",
                |m: &AccountWithCashflows| { &m.sanct_lim },
                |m: &mut AccountWithCashflows| { &mut m.sanct_lim },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_sub_head_code",
                |m: &AccountWithCashflows| { &m.gl_sub_head_code },
                |m: &mut AccountWithCashflows| { &mut m.gl_sub_head_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "schm_code",
                |m: &AccountWithCashflows| { &m.schm_code },
                |m: &mut AccountWithCashflows| { &mut m.schm_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "schm_type",
                |m: &AccountWithCashflows| { &m.schm_type },
                |m: &mut AccountWithCashflows| { &mut m.schm_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "crncy_code",
                |m: &AccountWithCashflows| { &m.crncy_code },
                |m: &mut AccountWithCashflows| { &mut m.crncy_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acct_crncy_code",
                |m: &AccountWithCashflows| { &m.acct_crncy_code },
                |m: &mut AccountWithCashflows| { &mut m.acct_crncy_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acct_cls_flg",
                |m: &AccountWithCashflows| { &m.acct_cls_flg },
                |m: &mut AccountWithCashflows| { &mut m.acct_cls_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "del_flg",
                |m: &AccountWithCashflows| { &m.del_flg },
                |m: &mut AccountWithCashflows| { &mut m.del_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "acct_opn_date",
                |m: &AccountWithCashflows| { &m.acct_opn_date },
                |m: &mut AccountWithCashflows| { &mut m.acct_opn_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "entity_cre_flg",
                |m: &AccountWithCashflows| { &m.entity_cre_flg },
                |m: &mut AccountWithCashflows| { &mut m.entity_cre_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "acct_cls_date",
                |m: &AccountWithCashflows| { &m.acct_cls_date },
                |m: &mut AccountWithCashflows| { &mut m.acct_cls_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_tran_date",
                |m: &AccountWithCashflows| { &m.last_tran_date },
                |m: &mut AccountWithCashflows| { &mut m.last_tran_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "notional_rate_code",
                |m: &AccountWithCashflows| { &m.notional_rate_code },
                |m: &mut AccountWithCashflows| { &mut m.notional_rate_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "emp_id",
                |m: &AccountWithCashflows| { &m.emp_id },
                |m: &mut AccountWithCashflows| { &mut m.emp_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "notional_rate",
                |m: &AccountWithCashflows| { &m.notional_rate },
                |m: &mut AccountWithCashflows| { &mut m.notional_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "limit_b2kid",
                |m: &AccountWithCashflows| { &m.limit_b2kid },
                |m: &mut AccountWithCashflows| { &mut m.limit_b2kid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "adim1_gam",
                |m: &AccountWithCashflows| { &m.adim1_gam },
                |m: &mut AccountWithCashflows| { &mut m.adim1_gam },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "adim2_gam",
                |m: &AccountWithCashflows| { &m.adim2_gam },
                |m: &mut AccountWithCashflows| { &mut m.adim2_gam },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "adim3_gam",
                |m: &AccountWithCashflows| { &m.adim3_gam },
                |m: &mut AccountWithCashflows| { &mut m.adim3_gam },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_rate",
                |m: &AccountWithCashflows| { &m.int_rate },
                |m: &mut AccountWithCashflows| { &mut m.int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bm_id",
                |m: &AccountWithCashflows| { &m.bm_id },
                |m: &mut AccountWithCashflows| { &mut m.bm_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "spread",
                |m: &AccountWithCashflows| { &m.spread },
                |m: &mut AccountWithCashflows| { &mut m.spread },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reprice_freq",
                |m: &AccountWithCashflows| { &m.reprice_freq },
                |m: &mut AccountWithCashflows| { &mut m.reprice_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_reprice_dt",
                |m: &AccountWithCashflows| { &m.last_reprice_dt },
                |m: &mut AccountWithCashflows| { &mut m.last_reprice_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_reprice_dt",
                |m: &AccountWithCashflows| { &m.next_reprice_dt },
                |m: &mut AccountWithCashflows| { &mut m.next_reprice_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "code1",
                |m: &AccountWithCashflows| { &m.code1 },
                |m: &mut AccountWithCashflows| { &mut m.code1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "code2",
                |m: &AccountWithCashflows| { &m.code2 },
                |m: &mut AccountWithCashflows| { &mut m.code2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "code3",
                |m: &AccountWithCashflows| { &m.code3 },
                |m: &mut AccountWithCashflows| { &mut m.code3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "code4",
                |m: &AccountWithCashflows| { &m.code4 },
                |m: &mut AccountWithCashflows| { &mut m.code4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "adim1_gac",
                |m: &AccountWithCashflows| { &m.adim1_gac },
                |m: &mut AccountWithCashflows| { &mut m.adim1_gac },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "adim2_gac",
                |m: &AccountWithCashflows| { &m.adim2_gac },
                |m: &mut AccountWithCashflows| { &mut m.adim2_gac },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "adim3_gac",
                |m: &AccountWithCashflows| { &m.adim3_gac },
                |m: &mut AccountWithCashflows| { &mut m.adim3_gac },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_name",
                |m: &AccountWithCashflows| { &m.cust_name },
                |m: &mut AccountWithCashflows| { &mut m.cust_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cmg_pan_gir_num",
                |m: &AccountWithCashflows| { &m.cmg_pan_gir_num },
                |m: &mut AccountWithCashflows| { &mut m.cmg_pan_gir_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cmg_cust_const",
                |m: &AccountWithCashflows| { &m.cmg_cust_const },
                |m: &mut AccountWithCashflows| { &mut m.cmg_cust_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "adim1_cmg",
                |m: &AccountWithCashflows| { &m.adim1_cmg },
                |m: &mut AccountWithCashflows| { &mut m.adim1_cmg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "adim2_cmg",
                |m: &AccountWithCashflows| { &m.adim2_cmg },
                |m: &mut AccountWithCashflows| { &mut m.adim2_cmg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "adim3_cmg",
                |m: &AccountWithCashflows| { &m.adim3_cmg },
                |m: &mut AccountWithCashflows| { &mut m.adim3_cmg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "out_bal_amt",
                |m: &AccountWithCashflows| { &m.out_bal_amt },
                |m: &mut AccountWithCashflows| { &mut m.out_bal_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_grp_id",
                |m: &AccountWithCashflows| { &m.cust_grp_id },
                |m: &mut AccountWithCashflows| { &mut m.cust_grp_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ucif_cust_const",
                |m: &AccountWithCashflows| { &m.ucif_cust_const },
                |m: &mut AccountWithCashflows| { &mut m.ucif_cust_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "exch_rt",
                |m: &AccountWithCashflows| { &m.exch_rt },
                |m: &mut AccountWithCashflows| { &mut m.exch_rt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "out_bal_amt_con",
                |m: &AccountWithCashflows| { &m.out_bal_amt_con },
                |m: &mut AccountWithCashflows| { &mut m.out_bal_amt_con },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "segment_code",
                |m: &AccountWithCashflows| { &m.segment_code },
                |m: &mut AccountWithCashflows| { &mut m.segment_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nfs",
                |m: &AccountWithCashflows| { &m.nfs },
                |m: &mut AccountWithCashflows| { &mut m.nfs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "oth_del_flg",
                |m: &AccountWithCashflows| { &m.oth_del_flg },
                |m: &mut AccountWithCashflows| { &mut m.oth_del_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "open_effective_date",
                |m: &AccountWithCashflows| { &m.open_effective_date },
                |m: &mut AccountWithCashflows| { &mut m.open_effective_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "oth_schm_type",
                |m: &AccountWithCashflows| { &m.oth_schm_type },
                |m: &mut AccountWithCashflows| { &mut m.oth_schm_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_tbl_code",
                |m: &AccountWithCashflows| { &m.int_tbl_code },
                |m: &mut AccountWithCashflows| { &mut m.int_tbl_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "int_version",
                |m: &AccountWithCashflows| { &m.int_version },
                |m: &mut AccountWithCashflows| { &mut m.int_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "int_tbl_ver_num",
                |m: &AccountWithCashflows| { &m.int_tbl_ver_num },
                |m: &mut AccountWithCashflows| { &mut m.int_tbl_ver_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "min_int_pcnt_cr",
                |m: &AccountWithCashflows| { &m.min_int_pcnt_cr },
                |m: &mut AccountWithCashflows| { &mut m.min_int_pcnt_cr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "max_int_pcnt_cr",
                |m: &AccountWithCashflows| { &m.max_int_pcnt_cr },
                |m: &mut AccountWithCashflows| { &mut m.max_int_pcnt_cr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "cust_cr_pref_pcnt",
                |m: &AccountWithCashflows| { &m.cust_cr_pref_pcnt },
                |m: &mut AccountWithCashflows| { &mut m.cust_cr_pref_pcnt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "id_cr_pref_pcnt",
                |m: &AccountWithCashflows| { &m.id_cr_pref_pcnt },
                |m: &mut AccountWithCashflows| { &mut m.id_cr_pref_pcnt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "nrml_int_pcnt",
                |m: &AccountWithCashflows| { &m.nrml_int_pcnt },
                |m: &mut AccountWithCashflows| { &mut m.nrml_int_pcnt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "id_dr_pref_pcnt",
                |m: &AccountWithCashflows| { &m.id_dr_pref_pcnt },
                |m: &mut AccountWithCashflows| { &mut m.id_dr_pref_pcnt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "base_int_tbl_code",
                |m: &AccountWithCashflows| { &m.base_int_tbl_code },
                |m: &mut AccountWithCashflows| { &mut m.base_int_tbl_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "base_pcnt_dr",
                |m: &AccountWithCashflows| { &m.base_pcnt_dr },
                |m: &mut AccountWithCashflows| { &mut m.base_pcnt_dr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "base_pcnt_cr",
                |m: &AccountWithCashflows| { &m.base_pcnt_cr },
                |m: &mut AccountWithCashflows| { &mut m.base_pcnt_cr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "base_pcnt",
                |m: &AccountWithCashflows| { &m.base_pcnt },
                |m: &mut AccountWithCashflows| { &mut m.base_pcnt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "deposit_period_mths",
                |m: &AccountWithCashflows| { &m.deposit_period_mths },
                |m: &mut AccountWithCashflows| { &mut m.deposit_period_mths },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "deposit_period_days",
                |m: &AccountWithCashflows| { &m.deposit_period_days },
                |m: &mut AccountWithCashflows| { &mut m.deposit_period_days },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "deposit_amount",
                |m: &AccountWithCashflows| { &m.deposit_amount },
                |m: &mut AccountWithCashflows| { &mut m.deposit_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "oth_acct_crncy_code",
                |m: &AccountWithCashflows| { &m.oth_acct_crncy_code },
                |m: &mut AccountWithCashflows| { &mut m.oth_acct_crncy_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "deposit_type",
                |m: &AccountWithCashflows| { &m.deposit_type },
                |m: &mut AccountWithCashflows| { &mut m.deposit_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "spl_catg_ind",
                |m: &AccountWithCashflows| { &m.spl_catg_ind },
                |m: &mut AccountWithCashflows| { &mut m.spl_catg_ind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "nrml_int_pcnt_cr",
                |m: &AccountWithCashflows| { &m.nrml_int_pcnt_cr },
                |m: &mut AccountWithCashflows| { &mut m.nrml_int_pcnt_cr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "base_differential_exists",
                |m: &AccountWithCashflows| { &m.base_differential_exists },
                |m: &mut AccountWithCashflows| { &mut m.base_differential_exists },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "deposit_status",
                |m: &AccountWithCashflows| { &m.deposit_status },
                |m: &mut AccountWithCashflows| { &mut m.deposit_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "maturity_amount",
                |m: &AccountWithCashflows| { &m.maturity_amount },
                |m: &mut AccountWithCashflows| { &mut m.maturity_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "maturity_date",
                |m: &AccountWithCashflows| { &m.maturity_date },
                |m: &mut AccountWithCashflows| { &mut m.maturity_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "rcre_time",
                |m: &AccountWithCashflows| { &m.rcre_time },
                |m: &mut AccountWithCashflows| { &mut m.rcre_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "auto_renewed_counter",
                |m: &AccountWithCashflows| { &m.auto_renewed_counter },
                |m: &mut AccountWithCashflows| { &mut m.auto_renewed_counter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "overdue_flg",
                |m: &AccountWithCashflows| { &m.overdue_flg },
                |m: &mut AccountWithCashflows| { &mut m.overdue_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "final_int_rate",
                |m: &AccountWithCashflows| { &m.final_int_rate },
                |m: &mut AccountWithCashflows| { &mut m.final_int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "source_name",
                |m: &AccountWithCashflows| { &m.source_name },
                |m: &mut AccountWithCashflows| { &mut m.source_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.acid.clear();
        self.foracid.clear();
        self.bacid.clear();
        self.clr_bal_amt = 0.;
        self.un_clr_bal_amt = 0.;
        self.sol_id.clear();
        self.cust_id.clear();
        self.acct_ownership.clear();
        self.ledg_num.clear();
        self.drwng_power.clear();
        self.mode_of_oper_code.clear();
        self.lien_amt = 0.;
        self.sanct_lim.clear();
        self.gl_sub_head_code.clear();
        self.schm_code.clear();
        self.schm_type.clear();
        self.crncy_code.clear();
        self.acct_crncy_code.clear();
        self.acct_cls_flg.clear();
        self.del_flg.clear();
        self.acct_opn_date = 0;
        self.entity_cre_flg.clear();
        self.acct_cls_date = 0;
        self.last_tran_date = 0;
        self.notional_rate_code.clear();
        self.emp_id.clear();
        self.notional_rate = 0.;
        self.limit_b2kid.clear();
        self.adim1_gam.clear();
        self.adim2_gam = 0;
        self.adim3_gam = 0;
        self.int_rate = 0.;
        self.bm_id.clear();
        self.spread = 0.;
        self.reprice_freq.clear();
        self.last_reprice_dt = 0;
        self.next_reprice_dt = 0;
        self.code1.clear();
        self.code2.clear();
        self.code3.clear();
        self.code4.clear();
        self.adim1_gac.clear();
        self.adim2_gac.clear();
        self.adim3_gac.clear();
        self.cust_name.clear();
        self.cmg_pan_gir_num.clear();
        self.cmg_cust_const.clear();
        self.adim1_cmg.clear();
        self.adim2_cmg.clear();
        self.adim3_cmg.clear();
        self.out_bal_amt = 0.;
        self.cust_grp_id.clear();
        self.ucif_cust_const.clear();
        self.exch_rt.clear();
        self.out_bal_amt_con = 0.;
        self.segment_code.clear();
        self.nfs.clear();
        self.oth_del_flg.clear();
        self.open_effective_date = 0;
        self.oth_schm_type.clear();
        self.int_tbl_code.clear();
        self.int_version = 0;
        self.int_tbl_ver_num = 0;
        self.min_int_pcnt_cr = 0.;
        self.max_int_pcnt_cr = 0.;
        self.cust_cr_pref_pcnt = 0.;
        self.id_cr_pref_pcnt = 0.;
        self.nrml_int_pcnt = 0.;
        self.id_dr_pref_pcnt = 0.;
        self.base_int_tbl_code.clear();
        self.base_pcnt_dr = 0.;
        self.base_pcnt_cr = 0.;
        self.base_pcnt = 0.;
        self.deposit_period_mths = 0;
        self.deposit_period_days = 0;
        self.deposit_amount = 0.;
        self.oth_acct_crncy_code.clear();
        self.deposit_type.clear();
        self.spl_catg_ind.clear();
        self.nrml_int_pcnt_cr = 0.;
        self.base_differential_exists.clear();
        self.deposit_status.clear();
        self.maturity_amount = 0.;
        self.maturity_date = 0;
        self.rcre_time = 0;
        self.auto_renewed_counter.clear();
        self.overdue_flg.clear();
        self.final_int_rate = 0.;
        self.source_name.clear();
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\
    \x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\
    \x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\
    \x04date\"\x80\x18\n\x14AccountWithCashflows\x12\x12\n\x04acid\x18\x01\
    \x20\x01(\tR\x04acid\x12\x18\n\x07foracid\x18\x02\x20\x01(\tR\x07foracid\
    \x12\x14\n\x05bacid\x18\x03\x20\x01(\tR\x05bacid\x12\x1e\n\x0bclr_bal_am\
    t\x18\x04\x20\x01(\x01R\tclrBalAmt\x12#\n\x0eun_clr_bal_amt\x18\x05\x20\
    \x01(\x01R\x0bunClrBalAmt\x12\x15\n\x06sol_id\x18\x06\x20\x01(\tR\x05sol\
    Id\x12\x17\n\x07cust_id\x18\x07\x20\x01(\tR\x06custId\x12%\n\x0eacct_own\
    ership\x18\x08\x20\x01(\tR\racctOwnership\x12\x19\n\x08ledg_num\x18\t\
    \x20\x01(\tR\x07ledgNum\x12\x1f\n\x0bdrwng_power\x18\n\x20\x01(\tR\ndrwn\
    gPower\x12)\n\x11mode_of_oper_code\x18\x0b\x20\x01(\tR\x0emodeOfOperCode\
    \x12\x19\n\x08lien_amt\x18\x0c\x20\x01(\x01R\x07lienAmt\x12\x1b\n\tsanct\
    _lim\x18\r\x20\x01(\tR\x08sanctLim\x12'\n\x10gl_sub_head_code\x18\x0e\
    \x20\x01(\tR\rglSubHeadCode\x12\x1b\n\tschm_code\x18\x0f\x20\x01(\tR\x08\
    schmCode\x12\x1b\n\tschm_type\x18\x10\x20\x01(\tR\x08schmType\x12\x1d\n\
    \ncrncy_code\x18\x11\x20\x01(\tR\tcrncyCode\x12&\n\x0facct_crncy_code\
    \x18\x12\x20\x01(\tR\racctCrncyCode\x12\x20\n\x0cacct_cls_flg\x18\x13\
    \x20\x01(\tR\nacctClsFlg\x12\x17\n\x07del_flg\x18\x14\x20\x01(\tR\x06del\
    Flg\x12\"\n\racct_opn_date\x18\x15\x20\x01(\x03R\x0bacctOpnDate\x12$\n\
    \x0eentity_cre_flg\x18\x16\x20\x01(\tR\x0centityCreFlg\x12\"\n\racct_cls\
    _date\x18\x17\x20\x01(\x03R\x0bacctClsDate\x12$\n\x0elast_tran_date\x18\
    \x18\x20\x01(\x03R\x0clastTranDate\x12,\n\x12notional_rate_code\x18\x19\
    \x20\x01(\tR\x10notionalRateCode\x12\x15\n\x06emp_id\x18\x1a\x20\x01(\tR\
    \x05empId\x12#\n\rnotional_rate\x18\x1b\x20\x01(\x01R\x0cnotionalRate\
    \x12\x1f\n\x0blimit_b2kid\x18\x1c\x20\x01(\tR\nlimitB2kid\x12\x1b\n\tadi\
    m1_gam\x18\x1d\x20\x01(\tR\x08adim1Gam\x12\x1b\n\tadim2_gam\x18\x1e\x20\
    \x01(\x03R\x08adim2Gam\x12\x1b\n\tadim3_gam\x18\x1f\x20\x01(\x03R\x08adi\
    m3Gam\x12\x19\n\x08int_rate\x18\x20\x20\x01(\x01R\x07intRate\x12\x13\n\
    \x05bm_id\x18!\x20\x01(\tR\x04bmId\x12\x16\n\x06spread\x18\"\x20\x01(\
    \x01R\x06spread\x12!\n\x0creprice_freq\x18#\x20\x01(\tR\x0brepriceFreq\
    \x12&\n\x0flast_reprice_dt\x18$\x20\x01(\x03R\rlastRepriceDt\x12&\n\x0fn\
    ext_reprice_dt\x18%\x20\x01(\x03R\rnextRepriceDt\x12\x14\n\x05code1\x18&\
    \x20\x01(\tR\x05code1\x12\x14\n\x05code2\x18'\x20\x01(\tR\x05code2\x12\
    \x14\n\x05code3\x18(\x20\x01(\tR\x05code3\x12\x14\n\x05code4\x18)\x20\
    \x01(\tR\x05code4\x12\x1b\n\tadim1_gac\x18*\x20\x01(\tR\x08adim1Gac\x12\
    \x1b\n\tadim2_gac\x18+\x20\x01(\tR\x08adim2Gac\x12\x1b\n\tadim3_gac\x18,\
    \x20\x01(\tR\x08adim3Gac\x12\x1b\n\tcust_name\x18-\x20\x01(\tR\x08custNa\
    me\x12%\n\x0fcmg_pan_gir_num\x18.\x20\x01(\tR\x0ccmgPanGirNum\x12$\n\x0e\
    cmg_cust_const\x18/\x20\x01(\tR\x0ccmgCustConst\x12\x1b\n\tadim1_cmg\x18\
    0\x20\x01(\tR\x08adim1Cmg\x12\x1b\n\tadim2_cmg\x181\x20\x01(\tR\x08adim2\
    Cmg\x12\x1b\n\tadim3_cmg\x182\x20\x01(\tR\x08adim3Cmg\x12\x1e\n\x0bout_b\
    al_amt\x183\x20\x01(\x01R\toutBalAmt\x12\x1e\n\x0bcust_grp_id\x184\x20\
    \x01(\tR\tcustGrpId\x12&\n\x0fucif_cust_const\x185\x20\x01(\tR\rucifCust\
    Const\x12\x17\n\x07exch_rt\x186\x20\x01(\tR\x06exchRt\x12%\n\x0fout_bal_\
    amt_con\x187\x20\x01(\x01R\x0coutBalAmtCon\x12!\n\x0csegment_code\x188\
    \x20\x01(\tR\x0bsegmentCode\x12\x10\n\x03nfs\x189\x20\x01(\tR\x03nfs\x12\
    \x1e\n\x0both_del_flg\x18:\x20\x01(\tR\tothDelFlg\x12.\n\x13open_effecti\
    ve_date\x18;\x20\x01(\x03R\x11openEffectiveDate\x12\"\n\roth_schm_type\
    \x18<\x20\x01(\tR\x0bothSchmType\x12\x20\n\x0cint_tbl_code\x18=\x20\x01(\
    \tR\nintTblCode\x12\x1f\n\x0bint_version\x18>\x20\x01(\x03R\nintVersion\
    \x12%\n\x0fint_tbl_ver_num\x18?\x20\x01(\x03R\x0cintTblVerNum\x12%\n\x0f\
    min_int_pcnt_cr\x18@\x20\x01(\x01R\x0cminIntPcntCr\x12%\n\x0fmax_int_pcn\
    t_cr\x18A\x20\x01(\x01R\x0cmaxIntPcntCr\x12)\n\x11cust_cr_pref_pcnt\x18B\
    \x20\x01(\x01R\x0ecustCrPrefPcnt\x12%\n\x0fid_cr_pref_pcnt\x18C\x20\x01(\
    \x01R\x0cidCrPrefPcnt\x12\"\n\rnrml_int_pcnt\x18D\x20\x01(\x01R\x0bnrmlI\
    ntPcnt\x12%\n\x0fid_dr_pref_pcnt\x18E\x20\x01(\x01R\x0cidDrPrefPcnt\x12)\
    \n\x11base_int_tbl_code\x18F\x20\x01(\tR\x0ebaseIntTblCode\x12\x20\n\x0c\
    base_pcnt_dr\x18G\x20\x01(\x01R\nbasePcntDr\x12\x20\n\x0cbase_pcnt_cr\
    \x18H\x20\x01(\x01R\nbasePcntCr\x12\x1b\n\tbase_pcnt\x18I\x20\x01(\x01R\
    \x08basePcnt\x12.\n\x13deposit_period_mths\x18J\x20\x01(\x03R\x11deposit\
    PeriodMths\x12.\n\x13deposit_period_days\x18K\x20\x01(\x03R\x11depositPe\
    riodDays\x12%\n\x0edeposit_amount\x18L\x20\x01(\x01R\rdepositAmount\x12-\
    \n\x13oth_acct_crncy_code\x18M\x20\x01(\tR\x10othAcctCrncyCode\x12!\n\
    \x0cdeposit_type\x18N\x20\x01(\tR\x0bdepositType\x12\x20\n\x0cspl_catg_i\
    nd\x18O\x20\x01(\tR\nsplCatgInd\x12'\n\x10nrml_int_pcnt_cr\x18P\x20\x01(\
    \x01R\rnrmlIntPcntCr\x128\n\x18base_differential_exists\x18Q\x20\x01(\tR\
    \x16baseDifferentialExists\x12%\n\x0edeposit_status\x18R\x20\x01(\tR\rde\
    positStatus\x12'\n\x0fmaturity_amount\x18S\x20\x01(\x01R\x0ematurityAmou\
    nt\x12#\n\rmaturity_date\x18T\x20\x01(\x03R\x0cmaturityDate\x12\x1b\n\tr\
    cre_time\x18U\x20\x01(\x03R\x08rcreTime\x120\n\x14auto_renewed_counter\
    \x18V\x20\x01(\tR\x12autoRenewedCounter\x12\x1f\n\x0boverdue_flg\x18W\
    \x20\x01(\tR\noverdueFlg\x12$\n\x0efinal_int_rate\x18X\x20\x01(\x01R\x0c\
    finalIntRate\x12\x1f\n\x0bsource_name\x18Y\x20\x01(\tR\nsourceName\x12'\
    \n\tcashflows\x18Z\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
