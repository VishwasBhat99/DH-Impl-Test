// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq, Clone, Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    pub base_rate: f64,
    pub base_rate_amount: f64,
    pub adj1_rate: f64,
    pub adj1_rate_amount: f64,
    pub adj2_rate: f64,
    pub adj2_rate_amount: f64,
    pub adj3_rate: f64,
    pub adj3_rate_amount: f64,
    pub adj4_rate: f64,
    pub adj4_rate_amount: f64,
    pub adj5_rate: f64,
    pub adj5_rate_amount: f64,
    pub adj6_rate: f64,
    pub adj6_rate_amount: f64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // double principal_amount = 2;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }

    // double base_rate = 4;

    pub fn clear_base_rate(&mut self) {
        self.base_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_rate(&mut self, v: f64) {
        self.base_rate = v;
    }

    pub fn get_base_rate(&self) -> f64 {
        self.base_rate
    }

    // double base_rate_amount = 5;

    pub fn clear_base_rate_amount(&mut self) {
        self.base_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_rate_amount(&mut self, v: f64) {
        self.base_rate_amount = v;
    }

    pub fn get_base_rate_amount(&self) -> f64 {
        self.base_rate_amount
    }

    // double adj1_rate = 6;

    pub fn clear_adj1_rate(&mut self) {
        self.adj1_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj1_rate(&mut self, v: f64) {
        self.adj1_rate = v;
    }

    pub fn get_adj1_rate(&self) -> f64 {
        self.adj1_rate
    }

    // double adj1_rate_amount = 7;

    pub fn clear_adj1_rate_amount(&mut self) {
        self.adj1_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj1_rate_amount(&mut self, v: f64) {
        self.adj1_rate_amount = v;
    }

    pub fn get_adj1_rate_amount(&self) -> f64 {
        self.adj1_rate_amount
    }

    // double adj2_rate = 8;

    pub fn clear_adj2_rate(&mut self) {
        self.adj2_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj2_rate(&mut self, v: f64) {
        self.adj2_rate = v;
    }

    pub fn get_adj2_rate(&self) -> f64 {
        self.adj2_rate
    }

    // double adj2_rate_amount = 9;

    pub fn clear_adj2_rate_amount(&mut self) {
        self.adj2_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj2_rate_amount(&mut self, v: f64) {
        self.adj2_rate_amount = v;
    }

    pub fn get_adj2_rate_amount(&self) -> f64 {
        self.adj2_rate_amount
    }

    // double adj3_rate = 10;

    pub fn clear_adj3_rate(&mut self) {
        self.adj3_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj3_rate(&mut self, v: f64) {
        self.adj3_rate = v;
    }

    pub fn get_adj3_rate(&self) -> f64 {
        self.adj3_rate
    }

    // double adj3_rate_amount = 11;

    pub fn clear_adj3_rate_amount(&mut self) {
        self.adj3_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj3_rate_amount(&mut self, v: f64) {
        self.adj3_rate_amount = v;
    }

    pub fn get_adj3_rate_amount(&self) -> f64 {
        self.adj3_rate_amount
    }

    // double adj4_rate = 12;

    pub fn clear_adj4_rate(&mut self) {
        self.adj4_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj4_rate(&mut self, v: f64) {
        self.adj4_rate = v;
    }

    pub fn get_adj4_rate(&self) -> f64 {
        self.adj4_rate
    }

    // double adj4_rate_amount = 13;

    pub fn clear_adj4_rate_amount(&mut self) {
        self.adj4_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj4_rate_amount(&mut self, v: f64) {
        self.adj4_rate_amount = v;
    }

    pub fn get_adj4_rate_amount(&self) -> f64 {
        self.adj4_rate_amount
    }

    // double adj5_rate = 14;

    pub fn clear_adj5_rate(&mut self) {
        self.adj5_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj5_rate(&mut self, v: f64) {
        self.adj5_rate = v;
    }

    pub fn get_adj5_rate(&self) -> f64 {
        self.adj5_rate
    }

    // double adj5_rate_amount = 15;

    pub fn clear_adj5_rate_amount(&mut self) {
        self.adj5_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj5_rate_amount(&mut self, v: f64) {
        self.adj5_rate_amount = v;
    }

    pub fn get_adj5_rate_amount(&self) -> f64 {
        self.adj5_rate_amount
    }

    // double adj6_rate = 16;

    pub fn clear_adj6_rate(&mut self) {
        self.adj6_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj6_rate(&mut self, v: f64) {
        self.adj6_rate = v;
    }

    pub fn get_adj6_rate(&self) -> f64 {
        self.adj6_rate
    }

    // double adj6_rate_amount = 17;

    pub fn clear_adj6_rate_amount(&mut self) {
        self.adj6_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj6_rate_amount(&mut self, v: f64) {
        self.adj6_rate_amount = v;
    }

    pub fn get_adj6_rate_amount(&self) -> f64 {
        self.adj6_rate_amount
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                }
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.base_rate = tmp;
                }
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.base_rate_amount = tmp;
                }
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj1_rate = tmp;
                }
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj1_rate_amount = tmp;
                }
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj2_rate = tmp;
                }
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj2_rate_amount = tmp;
                }
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj3_rate = tmp;
                }
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj3_rate_amount = tmp;
                }
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj4_rate = tmp;
                }
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj4_rate_amount = tmp;
                }
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj5_rate = tmp;
                }
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj5_rate_amount = tmp;
                }
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj6_rate = tmp;
                }
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj6_rate_amount = tmp;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size +=
                ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.base_rate != 0. {
            my_size += 9;
        }
        if self.base_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj1_rate != 0. {
            my_size += 9;
        }
        if self.adj1_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj2_rate != 0. {
            my_size += 9;
        }
        if self.adj2_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj3_rate != 0. {
            my_size += 9;
        }
        if self.adj3_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj4_rate != 0. {
            my_size += 9;
        }
        if self.adj4_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj5_rate != 0. {
            my_size += 9;
        }
        if self.adj5_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj6_rate != 0. {
            my_size += 10;
        }
        if self.adj6_rate_amount != 0. {
            my_size += 10;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream,
    ) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        if self.base_rate != 0. {
            os.write_double(4, self.base_rate)?;
        }
        if self.base_rate_amount != 0. {
            os.write_double(5, self.base_rate_amount)?;
        }
        if self.adj1_rate != 0. {
            os.write_double(6, self.adj1_rate)?;
        }
        if self.adj1_rate_amount != 0. {
            os.write_double(7, self.adj1_rate_amount)?;
        }
        if self.adj2_rate != 0. {
            os.write_double(8, self.adj2_rate)?;
        }
        if self.adj2_rate_amount != 0. {
            os.write_double(9, self.adj2_rate_amount)?;
        }
        if self.adj3_rate != 0. {
            os.write_double(10, self.adj3_rate)?;
        }
        if self.adj3_rate_amount != 0. {
            os.write_double(11, self.adj3_rate_amount)?;
        }
        if self.adj4_rate != 0. {
            os.write_double(12, self.adj4_rate)?;
        }
        if self.adj4_rate_amount != 0. {
            os.write_double(13, self.adj4_rate_amount)?;
        }
        if self.adj5_rate != 0. {
            os.write_double(14, self.adj5_rate)?;
        }
        if self.adj5_rate_amount != 0. {
            os.write_double(15, self.adj5_rate_amount)?;
        }
        if self.adj6_rate != 0. {
            os.write_double(16, self.adj6_rate)?;
        }
        if self.adj6_rate_amount != 0. {
            os.write_double(17, self.adj6_rate_amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "interest_amount",
                    |m: &Cashflow| &m.interest_amount,
                    |m: &mut Cashflow| &mut m.interest_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "principal_amount",
                    |m: &Cashflow| &m.principal_amount,
                    |m: &mut Cashflow| &mut m.principal_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "date",
                    |m: &Cashflow| &m.date,
                    |m: &mut Cashflow| &mut m.date,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "base_rate",
                    |m: &Cashflow| &m.base_rate,
                    |m: &mut Cashflow| &mut m.base_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "base_rate_amount",
                    |m: &Cashflow| &m.base_rate_amount,
                    |m: &mut Cashflow| &mut m.base_rate_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj1_rate",
                    |m: &Cashflow| &m.adj1_rate,
                    |m: &mut Cashflow| &mut m.adj1_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj1_rate_amount",
                    |m: &Cashflow| &m.adj1_rate_amount,
                    |m: &mut Cashflow| &mut m.adj1_rate_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj2_rate",
                    |m: &Cashflow| &m.adj2_rate,
                    |m: &mut Cashflow| &mut m.adj2_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj2_rate_amount",
                    |m: &Cashflow| &m.adj2_rate_amount,
                    |m: &mut Cashflow| &mut m.adj2_rate_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj3_rate",
                    |m: &Cashflow| &m.adj3_rate,
                    |m: &mut Cashflow| &mut m.adj3_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj3_rate_amount",
                    |m: &Cashflow| &m.adj3_rate_amount,
                    |m: &mut Cashflow| &mut m.adj3_rate_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj4_rate",
                    |m: &Cashflow| &m.adj4_rate,
                    |m: &mut Cashflow| &mut m.adj4_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj4_rate_amount",
                    |m: &Cashflow| &m.adj4_rate_amount,
                    |m: &mut Cashflow| &mut m.adj4_rate_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj5_rate",
                    |m: &Cashflow| &m.adj5_rate,
                    |m: &mut Cashflow| &mut m.adj5_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj5_rate_amount",
                    |m: &Cashflow| &m.adj5_rate_amount,
                    |m: &mut Cashflow| &mut m.adj5_rate_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj6_rate",
                    |m: &Cashflow| &m.adj6_rate,
                    |m: &mut Cashflow| &mut m.adj6_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj6_rate_amount",
                    |m: &Cashflow| &m.adj6_rate_amount,
                    |m: &mut Cashflow| &mut m.adj6_rate_amount,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe { instance.get(Cashflow::new) }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_interest_amount();
        self.clear_principal_amount();
        self.clear_date();
        self.clear_base_rate();
        self.clear_base_rate_amount();
        self.clear_adj1_rate();
        self.clear_adj1_rate_amount();
        self.clear_adj2_rate();
        self.clear_adj2_rate_amount();
        self.clear_adj3_rate();
        self.clear_adj3_rate_amount();
        self.clear_adj4_rate();
        self.clear_adj4_rate_amount();
        self.clear_adj5_rate();
        self.clear_adj5_rate_amount();
        self.clear_adj6_rate();
        self.clear_adj6_rate_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct AccountWithCashflows {
    // message fields
    pub acc_id: ::std::string::String,
    pub cust_name: ::std::string::String,
    pub pout_bal: f64,
    pub acc_int: f64,
    pub st_dt: i64,
    pub c_dt: i64,
    pub gl_cd: ::std::string::String,
    pub int_rt: f64,
    pub int_typ: ::std::string::String,
    pub int_bmark: ::std::string::String,
    pub rt_flag: ::std::string::String,
    pub prod_cd: ::std::string::String,
    pub nxt_pay_dt: i64,
    pub mis2: i64,
    pub ccy: ::std::string::String,
    pub ratings: ::std::string::String,
    pub rating_agency: ::std::string::String,
    pub asset_class: ::std::string::String,
    pub div: ::std::string::String,
    pub typ: ::std::string::String,
    pub originator: ::std::string::String,
    pub as_on_dt: i64,
    pub rep_freq: ::std::string::String,
    pub nxt_rep_dt: i64,
    pub alm_line: ::std::string::String,
    pub yeild: f64,
    pub total_interest_amount: f64,
    pub total_principal_amount: f64,
    pub Method: i32,
    pub BaseCurve: i32,
    pub ftp_runid: i64,
    pub from_date: i32,
    pub to_date: i32,
    pub total_balance: f64,
    pub total_interest_ftp: f64,
    pub total_ftp: f64,
    pub FTP_Rate: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string acc_id = 1;

    pub fn clear_acc_id(&mut self) {
        self.acc_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_id(&mut self, v: ::std::string::String) {
        self.acc_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_id(&mut self) -> &mut ::std::string::String {
        &mut self.acc_id
    }

    // Take field
    pub fn take_acc_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_id, ::std::string::String::new())
    }

    pub fn get_acc_id(&self) -> &str {
        &self.acc_id
    }

    // string cust_name = 2;

    pub fn clear_cust_name(&mut self) {
        self.cust_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_name(&mut self, v: ::std::string::String) {
        self.cust_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_name
    }

    // Take field
    pub fn take_cust_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_name, ::std::string::String::new())
    }

    pub fn get_cust_name(&self) -> &str {
        &self.cust_name
    }

    // double pout_bal = 3;

    pub fn clear_pout_bal(&mut self) {
        self.pout_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pout_bal(&mut self, v: f64) {
        self.pout_bal = v;
    }

    pub fn get_pout_bal(&self) -> f64 {
        self.pout_bal
    }

    // double acc_int = 4;

    pub fn clear_acc_int(&mut self) {
        self.acc_int = 0.;
    }

    // Param is passed by value, moved
    pub fn set_acc_int(&mut self, v: f64) {
        self.acc_int = v;
    }

    pub fn get_acc_int(&self) -> f64 {
        self.acc_int
    }

    // int64 st_dt = 5;

    pub fn clear_st_dt(&mut self) {
        self.st_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_st_dt(&mut self, v: i64) {
        self.st_dt = v;
    }

    pub fn get_st_dt(&self) -> i64 {
        self.st_dt
    }

    // int64 c_dt = 6;

    pub fn clear_c_dt(&mut self) {
        self.c_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_c_dt(&mut self, v: i64) {
        self.c_dt = v;
    }

    pub fn get_c_dt(&self) -> i64 {
        self.c_dt
    }

    // string gl_cd = 7;

    pub fn clear_gl_cd(&mut self) {
        self.gl_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_cd(&mut self, v: ::std::string::String) {
        self.gl_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_cd(&mut self) -> &mut ::std::string::String {
        &mut self.gl_cd
    }

    // Take field
    pub fn take_gl_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_cd, ::std::string::String::new())
    }

    pub fn get_gl_cd(&self) -> &str {
        &self.gl_cd
    }

    // double int_rt = 8;

    pub fn clear_int_rt(&mut self) {
        self.int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rt(&mut self, v: f64) {
        self.int_rt = v;
    }

    pub fn get_int_rt(&self) -> f64 {
        self.int_rt
    }

    // string int_typ = 9;

    pub fn clear_int_typ(&mut self) {
        self.int_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_typ(&mut self, v: ::std::string::String) {
        self.int_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_typ(&mut self) -> &mut ::std::string::String {
        &mut self.int_typ
    }

    // Take field
    pub fn take_int_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_typ, ::std::string::String::new())
    }

    pub fn get_int_typ(&self) -> &str {
        &self.int_typ
    }

    // string int_bmark = 10;

    pub fn clear_int_bmark(&mut self) {
        self.int_bmark.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_bmark(&mut self, v: ::std::string::String) {
        self.int_bmark = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_bmark(&mut self) -> &mut ::std::string::String {
        &mut self.int_bmark
    }

    // Take field
    pub fn take_int_bmark(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_bmark, ::std::string::String::new())
    }

    pub fn get_int_bmark(&self) -> &str {
        &self.int_bmark
    }

    // string rt_flag = 11;

    pub fn clear_rt_flag(&mut self) {
        self.rt_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_rt_flag(&mut self, v: ::std::string::String) {
        self.rt_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rt_flag(&mut self) -> &mut ::std::string::String {
        &mut self.rt_flag
    }

    // Take field
    pub fn take_rt_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rt_flag, ::std::string::String::new())
    }

    pub fn get_rt_flag(&self) -> &str {
        &self.rt_flag
    }

    // string prod_cd = 12;

    pub fn clear_prod_cd(&mut self) {
        self.prod_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_cd(&mut self, v: ::std::string::String) {
        self.prod_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_cd(&mut self) -> &mut ::std::string::String {
        &mut self.prod_cd
    }

    // Take field
    pub fn take_prod_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_cd, ::std::string::String::new())
    }

    pub fn get_prod_cd(&self) -> &str {
        &self.prod_cd
    }

    // int64 nxt_pay_dt = 13;

    pub fn clear_nxt_pay_dt(&mut self) {
        self.nxt_pay_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_pay_dt(&mut self, v: i64) {
        self.nxt_pay_dt = v;
    }

    pub fn get_nxt_pay_dt(&self) -> i64 {
        self.nxt_pay_dt
    }

    // int64 mis2 = 14;

    pub fn clear_mis2(&mut self) {
        self.mis2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_mis2(&mut self, v: i64) {
        self.mis2 = v;
    }

    pub fn get_mis2(&self) -> i64 {
        self.mis2
    }

    // string ccy = 15;

    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }

    // string ratings = 16;

    pub fn clear_ratings(&mut self) {
        self.ratings.clear();
    }

    // Param is passed by value, moved
    pub fn set_ratings(&mut self, v: ::std::string::String) {
        self.ratings = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ratings(&mut self) -> &mut ::std::string::String {
        &mut self.ratings
    }

    // Take field
    pub fn take_ratings(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ratings, ::std::string::String::new())
    }

    pub fn get_ratings(&self) -> &str {
        &self.ratings
    }

    // string rating_agency = 17;

    pub fn clear_rating_agency(&mut self) {
        self.rating_agency.clear();
    }

    // Param is passed by value, moved
    pub fn set_rating_agency(&mut self, v: ::std::string::String) {
        self.rating_agency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rating_agency(&mut self) -> &mut ::std::string::String {
        &mut self.rating_agency
    }

    // Take field
    pub fn take_rating_agency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rating_agency, ::std::string::String::new())
    }

    pub fn get_rating_agency(&self) -> &str {
        &self.rating_agency
    }

    // string asset_class = 18;

    pub fn clear_asset_class(&mut self) {
        self.asset_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_class(&mut self, v: ::std::string::String) {
        self.asset_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_class(&mut self) -> &mut ::std::string::String {
        &mut self.asset_class
    }

    // Take field
    pub fn take_asset_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_class, ::std::string::String::new())
    }

    pub fn get_asset_class(&self) -> &str {
        &self.asset_class
    }

    // string div = 19;

    pub fn clear_div(&mut self) {
        self.div.clear();
    }

    // Param is passed by value, moved
    pub fn set_div(&mut self, v: ::std::string::String) {
        self.div = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_div(&mut self) -> &mut ::std::string::String {
        &mut self.div
    }

    // Take field
    pub fn take_div(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.div, ::std::string::String::new())
    }

    pub fn get_div(&self) -> &str {
        &self.div
    }

    // string typ = 20;

    pub fn clear_typ(&mut self) {
        self.typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_typ(&mut self, v: ::std::string::String) {
        self.typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_typ(&mut self) -> &mut ::std::string::String {
        &mut self.typ
    }

    // Take field
    pub fn take_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.typ, ::std::string::String::new())
    }

    pub fn get_typ(&self) -> &str {
        &self.typ
    }

    // string originator = 21;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // int64 as_on_dt = 22;

    pub fn clear_as_on_dt(&mut self) {
        self.as_on_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on_dt(&mut self, v: i64) {
        self.as_on_dt = v;
    }

    pub fn get_as_on_dt(&self) -> i64 {
        self.as_on_dt
    }

    // string rep_freq = 23;

    pub fn clear_rep_freq(&mut self) {
        self.rep_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_rep_freq(&mut self, v: ::std::string::String) {
        self.rep_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rep_freq(&mut self) -> &mut ::std::string::String {
        &mut self.rep_freq
    }

    // Take field
    pub fn take_rep_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rep_freq, ::std::string::String::new())
    }

    pub fn get_rep_freq(&self) -> &str {
        &self.rep_freq
    }

    // int64 nxt_rep_dt = 24;

    pub fn clear_nxt_rep_dt(&mut self) {
        self.nxt_rep_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_rep_dt(&mut self, v: i64) {
        self.nxt_rep_dt = v;
    }

    pub fn get_nxt_rep_dt(&self) -> i64 {
        self.nxt_rep_dt
    }

    // string alm_line = 25;

    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }

    // double yeild = 26;

    pub fn clear_yeild(&mut self) {
        self.yeild = 0.;
    }

    // Param is passed by value, moved
    pub fn set_yeild(&mut self, v: f64) {
        self.yeild = v;
    }

    pub fn get_yeild(&self) -> f64 {
        self.yeild
    }

    // double total_interest_amount = 27;

    pub fn clear_total_interest_amount(&mut self) {
        self.total_interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_amount(&mut self, v: f64) {
        self.total_interest_amount = v;
    }

    pub fn get_total_interest_amount(&self) -> f64 {
        self.total_interest_amount
    }

    // double total_principal_amount = 28;

    pub fn clear_total_principal_amount(&mut self) {
        self.total_principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_principal_amount(&mut self, v: f64) {
        self.total_principal_amount = v;
    }

    pub fn get_total_principal_amount(&self) -> f64 {
        self.total_principal_amount
    }

    // int32 Method = 29;

    pub fn clear_Method(&mut self) {
        self.Method = 0;
    }

    // Param is passed by value, moved
    pub fn set_Method(&mut self, v: i32) {
        self.Method = v;
    }

    pub fn get_Method(&self) -> i32 {
        self.Method
    }

    // int32 BaseCurve = 30;

    pub fn clear_BaseCurve(&mut self) {
        self.BaseCurve = 0;
    }

    // Param is passed by value, moved
    pub fn set_BaseCurve(&mut self, v: i32) {
        self.BaseCurve = v;
    }

    pub fn get_BaseCurve(&self) -> i32 {
        self.BaseCurve
    }

    // int64 ftp_runid = 31;

    pub fn clear_ftp_runid(&mut self) {
        self.ftp_runid = 0;
    }

    // Param is passed by value, moved
    pub fn set_ftp_runid(&mut self, v: i64) {
        self.ftp_runid = v;
    }

    pub fn get_ftp_runid(&self) -> i64 {
        self.ftp_runid
    }

    // int32 from_date = 32;

    pub fn clear_from_date(&mut self) {
        self.from_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_from_date(&mut self, v: i32) {
        self.from_date = v;
    }

    pub fn get_from_date(&self) -> i32 {
        self.from_date
    }

    // int32 to_date = 33;

    pub fn clear_to_date(&mut self) {
        self.to_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_to_date(&mut self, v: i32) {
        self.to_date = v;
    }

    pub fn get_to_date(&self) -> i32 {
        self.to_date
    }

    // double total_balance = 34;

    pub fn clear_total_balance(&mut self) {
        self.total_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_balance(&mut self, v: f64) {
        self.total_balance = v;
    }

    pub fn get_total_balance(&self) -> f64 {
        self.total_balance
    }

    // double total_interest_ftp = 35;

    pub fn clear_total_interest_ftp(&mut self) {
        self.total_interest_ftp = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_ftp(&mut self, v: f64) {
        self.total_interest_ftp = v;
    }

    pub fn get_total_interest_ftp(&self) -> f64 {
        self.total_interest_ftp
    }

    // double total_ftp = 36;

    pub fn clear_total_ftp(&mut self) {
        self.total_ftp = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_ftp(&mut self, v: f64) {
        self.total_ftp = v;
    }

    pub fn get_total_ftp(&self) -> f64 {
        self.total_ftp
    }

    // double FTP_Rate = 37;

    pub fn clear_FTP_Rate(&mut self) {
        self.FTP_Rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_FTP_Rate(&mut self, v: f64) {
        self.FTP_Rate = v;
    }

    pub fn get_FTP_Rate(&self) -> f64 {
        self.FTP_Rate
    }

    // repeated .Cashflow cashflows = 38;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.acc_id,
                    )?;
                }
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.cust_name,
                    )?;
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.pout_bal = tmp;
                }
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.acc_int = tmp;
                }
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.st_dt = tmp;
                }
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.c_dt = tmp;
                }
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.gl_cd,
                    )?;
                }
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.int_rt = tmp;
                }
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.int_typ,
                    )?;
                }
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.int_bmark,
                    )?;
                }
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.rt_flag,
                    )?;
                }
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.prod_cd,
                    )?;
                }
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_pay_dt = tmp;
                }
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.mis2 = tmp;
                }
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                }
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.ratings,
                    )?;
                }
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.rating_agency,
                    )?;
                }
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.asset_class,
                    )?;
                }
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.div)?;
                }
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.typ)?;
                }
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.originator,
                    )?;
                }
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on_dt = tmp;
                }
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.rep_freq,
                    )?;
                }
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_rep_dt = tmp;
                }
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.alm_line,
                    )?;
                }
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.yeild = tmp;
                }
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_amount = tmp;
                }
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.total_principal_amount = tmp;
                }
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.Method = tmp;
                }
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.BaseCurve = tmp;
                }
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.ftp_runid = tmp;
                }
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.from_date = tmp;
                }
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.to_date = tmp;
                }
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.total_balance = tmp;
                }
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_ftp = tmp;
                }
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.total_ftp = tmp;
                }
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.FTP_Rate = tmp;
                }
                38 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.acc_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.acc_id);
        }
        if !self.cust_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.cust_name);
        }
        if self.pout_bal != 0. {
            my_size += 9;
        }
        if self.acc_int != 0. {
            my_size += 9;
        }
        if self.st_dt != 0 {
            my_size +=
                ::protobuf::rt::value_size(5, self.st_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.c_dt != 0 {
            my_size +=
                ::protobuf::rt::value_size(6, self.c_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.gl_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.gl_cd);
        }
        if self.int_rt != 0. {
            my_size += 9;
        }
        if !self.int_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.int_typ);
        }
        if !self.int_bmark.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.int_bmark);
        }
        if !self.rt_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.rt_flag);
        }
        if !self.prod_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.prod_cd);
        }
        if self.nxt_pay_dt != 0 {
            my_size += ::protobuf::rt::value_size(
                13,
                self.nxt_pay_dt,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.mis2 != 0 {
            my_size +=
                ::protobuf::rt::value_size(14, self.mis2, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.ccy);
        }
        if !self.ratings.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.ratings);
        }
        if !self.rating_agency.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.rating_agency);
        }
        if !self.asset_class.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.asset_class);
        }
        if !self.div.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.div);
        }
        if !self.typ.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.typ);
        }
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.originator);
        }
        if self.as_on_dt != 0 {
            my_size += ::protobuf::rt::value_size(
                22,
                self.as_on_dt,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.rep_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.rep_freq);
        }
        if self.nxt_rep_dt != 0 {
            my_size += ::protobuf::rt::value_size(
                24,
                self.nxt_rep_dt,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.alm_line);
        }
        if self.yeild != 0. {
            my_size += 10;
        }
        if self.total_interest_amount != 0. {
            my_size += 10;
        }
        if self.total_principal_amount != 0. {
            my_size += 10;
        }
        if self.Method != 0 {
            my_size += ::protobuf::rt::value_size(
                29,
                self.Method,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.BaseCurve != 0 {
            my_size += ::protobuf::rt::value_size(
                30,
                self.BaseCurve,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.ftp_runid != 0 {
            my_size += ::protobuf::rt::value_size(
                31,
                self.ftp_runid,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.from_date != 0 {
            my_size += ::protobuf::rt::value_size(
                32,
                self.from_date,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.to_date != 0 {
            my_size += ::protobuf::rt::value_size(
                33,
                self.to_date,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.total_balance != 0. {
            my_size += 10;
        }
        if self.total_interest_ftp != 0. {
            my_size += 10;
        }
        if self.total_ftp != 0. {
            my_size += 10;
        }
        if self.FTP_Rate != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.acc_id.is_empty() {
            os.write_string(1, &self.acc_id)?;
        }
        if !self.cust_name.is_empty() {
            os.write_string(2, &self.cust_name)?;
        }
        if self.pout_bal != 0. {
            os.write_double(3, self.pout_bal)?;
        }
        if self.acc_int != 0. {
            os.write_double(4, self.acc_int)?;
        }
        if self.st_dt != 0 {
            os.write_int64(5, self.st_dt)?;
        }
        if self.c_dt != 0 {
            os.write_int64(6, self.c_dt)?;
        }
        if !self.gl_cd.is_empty() {
            os.write_string(7, &self.gl_cd)?;
        }
        if self.int_rt != 0. {
            os.write_double(8, self.int_rt)?;
        }
        if !self.int_typ.is_empty() {
            os.write_string(9, &self.int_typ)?;
        }
        if !self.int_bmark.is_empty() {
            os.write_string(10, &self.int_bmark)?;
        }
        if !self.rt_flag.is_empty() {
            os.write_string(11, &self.rt_flag)?;
        }
        if !self.prod_cd.is_empty() {
            os.write_string(12, &self.prod_cd)?;
        }
        if self.nxt_pay_dt != 0 {
            os.write_int64(13, self.nxt_pay_dt)?;
        }
        if self.mis2 != 0 {
            os.write_int64(14, self.mis2)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(15, &self.ccy)?;
        }
        if !self.ratings.is_empty() {
            os.write_string(16, &self.ratings)?;
        }
        if !self.rating_agency.is_empty() {
            os.write_string(17, &self.rating_agency)?;
        }
        if !self.asset_class.is_empty() {
            os.write_string(18, &self.asset_class)?;
        }
        if !self.div.is_empty() {
            os.write_string(19, &self.div)?;
        }
        if !self.typ.is_empty() {
            os.write_string(20, &self.typ)?;
        }
        if !self.originator.is_empty() {
            os.write_string(21, &self.originator)?;
        }
        if self.as_on_dt != 0 {
            os.write_int64(22, self.as_on_dt)?;
        }
        if !self.rep_freq.is_empty() {
            os.write_string(23, &self.rep_freq)?;
        }
        if self.nxt_rep_dt != 0 {
            os.write_int64(24, self.nxt_rep_dt)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(25, &self.alm_line)?;
        }
        if self.yeild != 0. {
            os.write_double(26, self.yeild)?;
        }
        if self.total_interest_amount != 0. {
            os.write_double(27, self.total_interest_amount)?;
        }
        if self.total_principal_amount != 0. {
            os.write_double(28, self.total_principal_amount)?;
        }
        if self.Method != 0 {
            os.write_int32(29, self.Method)?;
        }
        if self.BaseCurve != 0 {
            os.write_int32(30, self.BaseCurve)?;
        }
        if self.ftp_runid != 0 {
            os.write_int64(31, self.ftp_runid)?;
        }
        if self.from_date != 0 {
            os.write_int32(32, self.from_date)?;
        }
        if self.to_date != 0 {
            os.write_int32(33, self.to_date)?;
        }
        if self.total_balance != 0. {
            os.write_double(34, self.total_balance)?;
        }
        if self.total_interest_ftp != 0. {
            os.write_double(35, self.total_interest_ftp)?;
        }
        if self.total_ftp != 0. {
            os.write_double(36, self.total_ftp)?;
        }
        if self.FTP_Rate != 0. {
            os.write_double(37, self.FTP_Rate)?;
        }
        for v in &self.cashflows {
            os.write_tag(38, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "acc_id",
                    |m: &AccountWithCashflows| &m.acc_id,
                    |m: &mut AccountWithCashflows| &mut m.acc_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "cust_name",
                    |m: &AccountWithCashflows| &m.cust_name,
                    |m: &mut AccountWithCashflows| &mut m.cust_name,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "pout_bal",
                    |m: &AccountWithCashflows| &m.pout_bal,
                    |m: &mut AccountWithCashflows| &mut m.pout_bal,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "acc_int",
                    |m: &AccountWithCashflows| &m.acc_int,
                    |m: &mut AccountWithCashflows| &mut m.acc_int,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "st_dt",
                    |m: &AccountWithCashflows| &m.st_dt,
                    |m: &mut AccountWithCashflows| &mut m.st_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "c_dt",
                    |m: &AccountWithCashflows| &m.c_dt,
                    |m: &mut AccountWithCashflows| &mut m.c_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "gl_cd",
                    |m: &AccountWithCashflows| &m.gl_cd,
                    |m: &mut AccountWithCashflows| &mut m.gl_cd,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "int_rt",
                    |m: &AccountWithCashflows| &m.int_rt,
                    |m: &mut AccountWithCashflows| &mut m.int_rt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "int_typ",
                    |m: &AccountWithCashflows| &m.int_typ,
                    |m: &mut AccountWithCashflows| &mut m.int_typ,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "int_bmark",
                    |m: &AccountWithCashflows| &m.int_bmark,
                    |m: &mut AccountWithCashflows| &mut m.int_bmark,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "rt_flag",
                    |m: &AccountWithCashflows| &m.rt_flag,
                    |m: &mut AccountWithCashflows| &mut m.rt_flag,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "prod_cd",
                    |m: &AccountWithCashflows| &m.prod_cd,
                    |m: &mut AccountWithCashflows| &mut m.prod_cd,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "nxt_pay_dt",
                    |m: &AccountWithCashflows| &m.nxt_pay_dt,
                    |m: &mut AccountWithCashflows| &mut m.nxt_pay_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "mis2",
                    |m: &AccountWithCashflows| &m.mis2,
                    |m: &mut AccountWithCashflows| &mut m.mis2,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "ccy",
                    |m: &AccountWithCashflows| &m.ccy,
                    |m: &mut AccountWithCashflows| &mut m.ccy,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "ratings",
                    |m: &AccountWithCashflows| &m.ratings,
                    |m: &mut AccountWithCashflows| &mut m.ratings,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "rating_agency",
                    |m: &AccountWithCashflows| &m.rating_agency,
                    |m: &mut AccountWithCashflows| &mut m.rating_agency,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "asset_class",
                    |m: &AccountWithCashflows| &m.asset_class,
                    |m: &mut AccountWithCashflows| &mut m.asset_class,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "div",
                    |m: &AccountWithCashflows| &m.div,
                    |m: &mut AccountWithCashflows| &mut m.div,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "typ",
                    |m: &AccountWithCashflows| &m.typ,
                    |m: &mut AccountWithCashflows| &mut m.typ,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "originator",
                    |m: &AccountWithCashflows| &m.originator,
                    |m: &mut AccountWithCashflows| &mut m.originator,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "as_on_dt",
                    |m: &AccountWithCashflows| &m.as_on_dt,
                    |m: &mut AccountWithCashflows| &mut m.as_on_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "rep_freq",
                    |m: &AccountWithCashflows| &m.rep_freq,
                    |m: &mut AccountWithCashflows| &mut m.rep_freq,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "nxt_rep_dt",
                    |m: &AccountWithCashflows| &m.nxt_rep_dt,
                    |m: &mut AccountWithCashflows| &mut m.nxt_rep_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "alm_line",
                    |m: &AccountWithCashflows| &m.alm_line,
                    |m: &mut AccountWithCashflows| &mut m.alm_line,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "yeild",
                    |m: &AccountWithCashflows| &m.yeild,
                    |m: &mut AccountWithCashflows| &mut m.yeild,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "total_interest_amount",
                    |m: &AccountWithCashflows| &m.total_interest_amount,
                    |m: &mut AccountWithCashflows| &mut m.total_interest_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "total_principal_amount",
                    |m: &AccountWithCashflows| &m.total_principal_amount,
                    |m: &mut AccountWithCashflows| &mut m.total_principal_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "Method",
                    |m: &AccountWithCashflows| &m.Method,
                    |m: &mut AccountWithCashflows| &mut m.Method,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "BaseCurve",
                    |m: &AccountWithCashflows| &m.BaseCurve,
                    |m: &mut AccountWithCashflows| &mut m.BaseCurve,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "ftp_runid",
                    |m: &AccountWithCashflows| &m.ftp_runid,
                    |m: &mut AccountWithCashflows| &mut m.ftp_runid,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "from_date",
                    |m: &AccountWithCashflows| &m.from_date,
                    |m: &mut AccountWithCashflows| &mut m.from_date,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "to_date",
                    |m: &AccountWithCashflows| &m.to_date,
                    |m: &mut AccountWithCashflows| &mut m.to_date,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "total_balance",
                    |m: &AccountWithCashflows| &m.total_balance,
                    |m: &mut AccountWithCashflows| &mut m.total_balance,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "total_interest_ftp",
                    |m: &AccountWithCashflows| &m.total_interest_ftp,
                    |m: &mut AccountWithCashflows| &mut m.total_interest_ftp,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "total_ftp",
                    |m: &AccountWithCashflows| &m.total_ftp,
                    |m: &mut AccountWithCashflows| &mut m.total_ftp,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "FTP_Rate",
                    |m: &AccountWithCashflows| &m.FTP_Rate,
                    |m: &mut AccountWithCashflows| &mut m.FTP_Rate,
                ));
                fields.push(
                    ::protobuf::reflect::accessor::make_repeated_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<Cashflow>,
                    >(
                        "cashflows",
                        |m: &AccountWithCashflows| &m.cashflows,
                        |m: &mut AccountWithCashflows| &mut m.cashflows,
                    ),
                );
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const AccountWithCashflows,
            };
        unsafe { instance.get(AccountWithCashflows::new) }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_acc_id();
        self.clear_cust_name();
        self.clear_pout_bal();
        self.clear_acc_int();
        self.clear_st_dt();
        self.clear_c_dt();
        self.clear_gl_cd();
        self.clear_int_rt();
        self.clear_int_typ();
        self.clear_int_bmark();
        self.clear_rt_flag();
        self.clear_prod_cd();
        self.clear_nxt_pay_dt();
        self.clear_mis2();
        self.clear_ccy();
        self.clear_ratings();
        self.clear_rating_agency();
        self.clear_asset_class();
        self.clear_div();
        self.clear_typ();
        self.clear_originator();
        self.clear_as_on_dt();
        self.clear_rep_freq();
        self.clear_nxt_rep_dt();
        self.clear_alm_line();
        self.clear_yeild();
        self.clear_total_interest_amount();
        self.clear_total_principal_amount();
        self.clear_Method();
        self.clear_BaseCurve();
        self.clear_ftp_runid();
        self.clear_from_date();
        self.clear_to_date();
        self.clear_total_balance();
        self.clear_total_interest_ftp();
        self.clear_total_ftp();
        self.clear_FTP_Rate();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aAccountWithCashflows.proto\"\xe3\x04\n\x08Cashflow\x12'\n\x0finter\
    est_amount\x18\x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_a\
    mount\x18\x02\x20\x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\
    \x20\x01(\x03R\x04date\x12\x1b\n\tbase_rate\x18\x04\x20\x01(\x01R\x08bas\
    eRate\x12(\n\x10base_rate_amount\x18\x05\x20\x01(\x01R\x0ebaseRateAmount\
    \x12\x1b\n\tadj1_rate\x18\x06\x20\x01(\x01R\x08adj1Rate\x12(\n\x10adj1_r\
    ate_amount\x18\x07\x20\x01(\x01R\x0eadj1RateAmount\x12\x1b\n\tadj2_rate\
    \x18\x08\x20\x01(\x01R\x08adj2Rate\x12(\n\x10adj2_rate_amount\x18\t\x20\
    \x01(\x01R\x0eadj2RateAmount\x12\x1b\n\tadj3_rate\x18\n\x20\x01(\x01R\
    \x08adj3Rate\x12(\n\x10adj3_rate_amount\x18\x0b\x20\x01(\x01R\x0eadj3Rat\
    eAmount\x12\x1b\n\tadj4_rate\x18\x0c\x20\x01(\x01R\x08adj4Rate\x12(\n\
    \x10adj4_rate_amount\x18\r\x20\x01(\x01R\x0eadj4RateAmount\x12\x1b\n\tad\
    j5_rate\x18\x0e\x20\x01(\x01R\x08adj5Rate\x12(\n\x10adj5_rate_amount\x18\
    \x0f\x20\x01(\x01R\x0eadj5RateAmount\x12\x1b\n\tadj6_rate\x18\x10\x20\
    \x01(\x01R\x08adj6Rate\x12(\n\x10adj6_rate_amount\x18\x11\x20\x01(\x01R\
    \x0eadj6RateAmount\"\xcd\x08\n\x14AccountWithCashflows\x12\x15\n\x06acc_\
    id\x18\x01\x20\x01(\tR\x05accId\x12\x1b\n\tcust_name\x18\x02\x20\x01(\tR\
    \x08custName\x12\x19\n\x08pout_bal\x18\x03\x20\x01(\x01R\x07poutBal\x12\
    \x17\n\x07acc_int\x18\x04\x20\x01(\x01R\x06accInt\x12\x13\n\x05st_dt\x18\
    \x05\x20\x01(\x03R\x04stDt\x12\x11\n\x04c_dt\x18\x06\x20\x01(\x03R\x03cD\
    t\x12\x13\n\x05gl_cd\x18\x07\x20\x01(\tR\x04glCd\x12\x15\n\x06int_rt\x18\
    \x08\x20\x01(\x01R\x05intRt\x12\x17\n\x07int_typ\x18\t\x20\x01(\tR\x06in\
    tTyp\x12\x1b\n\tint_bmark\x18\n\x20\x01(\tR\x08intBmark\x12\x17\n\x07rt_\
    flag\x18\x0b\x20\x01(\tR\x06rtFlag\x12\x17\n\x07prod_cd\x18\x0c\x20\x01(\
    \tR\x06prodCd\x12\x1c\n\nnxt_pay_dt\x18\r\x20\x01(\x03R\x08nxtPayDt\x12\
    \x12\n\x04mis2\x18\x0e\x20\x01(\x03R\x04mis2\x12\x10\n\x03ccy\x18\x0f\
    \x20\x01(\tR\x03ccy\x12\x18\n\x07ratings\x18\x10\x20\x01(\tR\x07ratings\
    \x12#\n\rrating_agency\x18\x11\x20\x01(\tR\x0cratingAgency\x12\x1f\n\x0b\
    asset_class\x18\x12\x20\x01(\tR\nassetClass\x12\x10\n\x03div\x18\x13\x20\
    \x01(\tR\x03div\x12\x10\n\x03typ\x18\x14\x20\x01(\tR\x03typ\x12\x1e\n\no\
    riginator\x18\x15\x20\x01(\tR\noriginator\x12\x18\n\x08as_on_dt\x18\x16\
    \x20\x01(\x03R\x06asOnDt\x12\x19\n\x08rep_freq\x18\x17\x20\x01(\tR\x07re\
    pFreq\x12\x1c\n\nnxt_rep_dt\x18\x18\x20\x01(\x03R\x08nxtRepDt\x12\x19\n\
    \x08alm_line\x18\x19\x20\x01(\tR\x07almLine\x12\x14\n\x05yeild\x18\x1a\
    \x20\x01(\x01R\x05yeild\x122\n\x15total_interest_amount\x18\x1b\x20\x01(\
    \x01R\x13totalInterestAmount\x124\n\x16total_principal_amount\x18\x1c\
    \x20\x01(\x01R\x14totalPrincipalAmount\x12\x16\n\x06Method\x18\x1d\x20\
    \x01(\x05R\x06Method\x12\x1c\n\tBaseCurve\x18\x1e\x20\x01(\x05R\tBaseCur\
    ve\x12\x1b\n\tftp_runid\x18\x1f\x20\x01(\x03R\x08ftpRunid\x12\x1b\n\tfro\
    m_date\x18\x20\x20\x01(\x05R\x08fromDate\x12\x17\n\x07to_date\x18!\x20\
    \x01(\x05R\x06toDate\x12#\n\rtotal_balance\x18\"\x20\x01(\x01R\x0ctotalB\
    alance\x12,\n\x12total_interest_ftp\x18#\x20\x01(\x01R\x10totalInterestF\
    tp\x12\x1b\n\ttotal_ftp\x18$\x20\x01(\x01R\x08totalFtp\x12\x19\n\x08FTP_\
    Rate\x18%\x20\x01(\x01R\x07FTPRate\x12'\n\tcashflows\x18&\x20\x03(\x0b2\
    \t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<
    ::protobuf::descriptor::FileDescriptorProto,
> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe { file_descriptor_proto_lazy.get(|| parse_descriptor_proto()) }
}
