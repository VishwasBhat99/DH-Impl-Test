// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double prin_amt = 2;

    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_int_amt();
        self.clear_prin_amt();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub entity: ::std::string::String,
    pub trade_id: ::std::string::String,
    pub struct_id: i64,
    pub comp_typology: ::std::string::String,
    pub cntrct_typology: ::std::string::String,
    pub desk: ::std::string::String,
    pub book: ::std::string::String,
    pub folder: ::std::string::String,
    pub trading_banking: ::std::string::String,
    pub cntr_prty_grp_cd: ::std::string::String,
    pub cntr_prty_prnt_cd: ::std::string::String,
    pub intrnl_extrnl: ::std::string::String,
    pub trade_dt: i64,
    pub del_dt: i64,
    pub buy_sell: ::std::string::String,
    pub put_call: ::std::string::String,
    pub call_ccy: ::std::string::String,
    pub put_ccy: ::std::string::String,
    pub put_amt: f64,
    pub mtm_excld_prem_inr: f64,
    pub position_ccy: ::std::string::String,
    pub forward_delta_ccy_1_amt: f64,
    pub pl_ccy: ::std::string::String,
    pub forward_delta_ccy_2_amt: f64,
    pub inst: ::std::string::String,
    pub cf_type: ::std::string::String,
    pub tot_int_amt: f64,
    pub tot_prin_amt: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string entity = 1;

    pub fn clear_entity(&mut self) {
        self.entity.clear();
    }

    // Param is passed by value, moved
    pub fn set_entity(&mut self, v: ::std::string::String) {
        self.entity = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entity(&mut self) -> &mut ::std::string::String {
        &mut self.entity
    }

    // Take field
    pub fn take_entity(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.entity, ::std::string::String::new())
    }

    pub fn get_entity(&self) -> &str {
        &self.entity
    }

    // string trade_id = 2;

    pub fn clear_trade_id(&mut self) {
        self.trade_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_trade_id(&mut self, v: ::std::string::String) {
        self.trade_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trade_id(&mut self) -> &mut ::std::string::String {
        &mut self.trade_id
    }

    // Take field
    pub fn take_trade_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trade_id, ::std::string::String::new())
    }

    pub fn get_trade_id(&self) -> &str {
        &self.trade_id
    }

    // int64 struct_id = 3;

    pub fn clear_struct_id(&mut self) {
        self.struct_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_struct_id(&mut self, v: i64) {
        self.struct_id = v;
    }

    pub fn get_struct_id(&self) -> i64 {
        self.struct_id
    }

    // string comp_typology = 4;

    pub fn clear_comp_typology(&mut self) {
        self.comp_typology.clear();
    }

    // Param is passed by value, moved
    pub fn set_comp_typology(&mut self, v: ::std::string::String) {
        self.comp_typology = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_comp_typology(&mut self) -> &mut ::std::string::String {
        &mut self.comp_typology
    }

    // Take field
    pub fn take_comp_typology(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.comp_typology, ::std::string::String::new())
    }

    pub fn get_comp_typology(&self) -> &str {
        &self.comp_typology
    }

    // string cntrct_typology = 5;

    pub fn clear_cntrct_typology(&mut self) {
        self.cntrct_typology.clear();
    }

    // Param is passed by value, moved
    pub fn set_cntrct_typology(&mut self, v: ::std::string::String) {
        self.cntrct_typology = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cntrct_typology(&mut self) -> &mut ::std::string::String {
        &mut self.cntrct_typology
    }

    // Take field
    pub fn take_cntrct_typology(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cntrct_typology, ::std::string::String::new())
    }

    pub fn get_cntrct_typology(&self) -> &str {
        &self.cntrct_typology
    }

    // string desk = 6;

    pub fn clear_desk(&mut self) {
        self.desk.clear();
    }

    // Param is passed by value, moved
    pub fn set_desk(&mut self, v: ::std::string::String) {
        self.desk = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_desk(&mut self) -> &mut ::std::string::String {
        &mut self.desk
    }

    // Take field
    pub fn take_desk(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.desk, ::std::string::String::new())
    }

    pub fn get_desk(&self) -> &str {
        &self.desk
    }

    // string book = 7;

    pub fn clear_book(&mut self) {
        self.book.clear();
    }

    // Param is passed by value, moved
    pub fn set_book(&mut self, v: ::std::string::String) {
        self.book = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_book(&mut self) -> &mut ::std::string::String {
        &mut self.book
    }

    // Take field
    pub fn take_book(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.book, ::std::string::String::new())
    }

    pub fn get_book(&self) -> &str {
        &self.book
    }

    // string folder = 8;

    pub fn clear_folder(&mut self) {
        self.folder.clear();
    }

    // Param is passed by value, moved
    pub fn set_folder(&mut self, v: ::std::string::String) {
        self.folder = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_folder(&mut self) -> &mut ::std::string::String {
        &mut self.folder
    }

    // Take field
    pub fn take_folder(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.folder, ::std::string::String::new())
    }

    pub fn get_folder(&self) -> &str {
        &self.folder
    }

    // string trading_banking = 9;

    pub fn clear_trading_banking(&mut self) {
        self.trading_banking.clear();
    }

    // Param is passed by value, moved
    pub fn set_trading_banking(&mut self, v: ::std::string::String) {
        self.trading_banking = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trading_banking(&mut self) -> &mut ::std::string::String {
        &mut self.trading_banking
    }

    // Take field
    pub fn take_trading_banking(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trading_banking, ::std::string::String::new())
    }

    pub fn get_trading_banking(&self) -> &str {
        &self.trading_banking
    }

    // string cntr_prty_grp_cd = 10;

    pub fn clear_cntr_prty_grp_cd(&mut self) {
        self.cntr_prty_grp_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_cntr_prty_grp_cd(&mut self, v: ::std::string::String) {
        self.cntr_prty_grp_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cntr_prty_grp_cd(&mut self) -> &mut ::std::string::String {
        &mut self.cntr_prty_grp_cd
    }

    // Take field
    pub fn take_cntr_prty_grp_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cntr_prty_grp_cd, ::std::string::String::new())
    }

    pub fn get_cntr_prty_grp_cd(&self) -> &str {
        &self.cntr_prty_grp_cd
    }

    // string cntr_prty_prnt_cd = 11;

    pub fn clear_cntr_prty_prnt_cd(&mut self) {
        self.cntr_prty_prnt_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_cntr_prty_prnt_cd(&mut self, v: ::std::string::String) {
        self.cntr_prty_prnt_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cntr_prty_prnt_cd(&mut self) -> &mut ::std::string::String {
        &mut self.cntr_prty_prnt_cd
    }

    // Take field
    pub fn take_cntr_prty_prnt_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cntr_prty_prnt_cd, ::std::string::String::new())
    }

    pub fn get_cntr_prty_prnt_cd(&self) -> &str {
        &self.cntr_prty_prnt_cd
    }

    // string intrnl_extrnl = 12;

    pub fn clear_intrnl_extrnl(&mut self) {
        self.intrnl_extrnl.clear();
    }

    // Param is passed by value, moved
    pub fn set_intrnl_extrnl(&mut self, v: ::std::string::String) {
        self.intrnl_extrnl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_intrnl_extrnl(&mut self) -> &mut ::std::string::String {
        &mut self.intrnl_extrnl
    }

    // Take field
    pub fn take_intrnl_extrnl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.intrnl_extrnl, ::std::string::String::new())
    }

    pub fn get_intrnl_extrnl(&self) -> &str {
        &self.intrnl_extrnl
    }

    // int64 trade_dt = 13;

    pub fn clear_trade_dt(&mut self) {
        self.trade_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_trade_dt(&mut self, v: i64) {
        self.trade_dt = v;
    }

    pub fn get_trade_dt(&self) -> i64 {
        self.trade_dt
    }

    // int64 del_dt = 14;

    pub fn clear_del_dt(&mut self) {
        self.del_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_del_dt(&mut self, v: i64) {
        self.del_dt = v;
    }

    pub fn get_del_dt(&self) -> i64 {
        self.del_dt
    }

    // string buy_sell = 15;

    pub fn clear_buy_sell(&mut self) {
        self.buy_sell.clear();
    }

    // Param is passed by value, moved
    pub fn set_buy_sell(&mut self, v: ::std::string::String) {
        self.buy_sell = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buy_sell(&mut self) -> &mut ::std::string::String {
        &mut self.buy_sell
    }

    // Take field
    pub fn take_buy_sell(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buy_sell, ::std::string::String::new())
    }

    pub fn get_buy_sell(&self) -> &str {
        &self.buy_sell
    }

    // string put_call = 16;

    pub fn clear_put_call(&mut self) {
        self.put_call.clear();
    }

    // Param is passed by value, moved
    pub fn set_put_call(&mut self, v: ::std::string::String) {
        self.put_call = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_put_call(&mut self) -> &mut ::std::string::String {
        &mut self.put_call
    }

    // Take field
    pub fn take_put_call(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.put_call, ::std::string::String::new())
    }

    pub fn get_put_call(&self) -> &str {
        &self.put_call
    }

    // string call_ccy = 17;

    pub fn clear_call_ccy(&mut self) {
        self.call_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_call_ccy(&mut self, v: ::std::string::String) {
        self.call_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_call_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.call_ccy
    }

    // Take field
    pub fn take_call_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.call_ccy, ::std::string::String::new())
    }

    pub fn get_call_ccy(&self) -> &str {
        &self.call_ccy
    }

    // string put_ccy = 18;

    pub fn clear_put_ccy(&mut self) {
        self.put_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_put_ccy(&mut self, v: ::std::string::String) {
        self.put_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_put_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.put_ccy
    }

    // Take field
    pub fn take_put_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.put_ccy, ::std::string::String::new())
    }

    pub fn get_put_ccy(&self) -> &str {
        &self.put_ccy
    }

    // double put_amt = 19;

    pub fn clear_put_amt(&mut self) {
        self.put_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_put_amt(&mut self, v: f64) {
        self.put_amt = v;
    }

    pub fn get_put_amt(&self) -> f64 {
        self.put_amt
    }

    // double mtm_excld_prem_inr = 20;

    pub fn clear_mtm_excld_prem_inr(&mut self) {
        self.mtm_excld_prem_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mtm_excld_prem_inr(&mut self, v: f64) {
        self.mtm_excld_prem_inr = v;
    }

    pub fn get_mtm_excld_prem_inr(&self) -> f64 {
        self.mtm_excld_prem_inr
    }

    // string position_ccy = 21;

    pub fn clear_position_ccy(&mut self) {
        self.position_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_position_ccy(&mut self, v: ::std::string::String) {
        self.position_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_position_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.position_ccy
    }

    // Take field
    pub fn take_position_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.position_ccy, ::std::string::String::new())
    }

    pub fn get_position_ccy(&self) -> &str {
        &self.position_ccy
    }

    // double forward_delta_ccy_1_amt = 22;

    pub fn clear_forward_delta_ccy_1_amt(&mut self) {
        self.forward_delta_ccy_1_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_forward_delta_ccy_1_amt(&mut self, v: f64) {
        self.forward_delta_ccy_1_amt = v;
    }

    pub fn get_forward_delta_ccy_1_amt(&self) -> f64 {
        self.forward_delta_ccy_1_amt
    }

    // string pl_ccy = 23;

    pub fn clear_pl_ccy(&mut self) {
        self.pl_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_pl_ccy(&mut self, v: ::std::string::String) {
        self.pl_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pl_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.pl_ccy
    }

    // Take field
    pub fn take_pl_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pl_ccy, ::std::string::String::new())
    }

    pub fn get_pl_ccy(&self) -> &str {
        &self.pl_ccy
    }

    // double forward_delta_ccy_2_amt = 24;

    pub fn clear_forward_delta_ccy_2_amt(&mut self) {
        self.forward_delta_ccy_2_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_forward_delta_ccy_2_amt(&mut self, v: f64) {
        self.forward_delta_ccy_2_amt = v;
    }

    pub fn get_forward_delta_ccy_2_amt(&self) -> f64 {
        self.forward_delta_ccy_2_amt
    }

    // string inst = 25;

    pub fn clear_inst(&mut self) {
        self.inst.clear();
    }

    // Param is passed by value, moved
    pub fn set_inst(&mut self, v: ::std::string::String) {
        self.inst = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inst(&mut self) -> &mut ::std::string::String {
        &mut self.inst
    }

    // Take field
    pub fn take_inst(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.inst, ::std::string::String::new())
    }

    pub fn get_inst(&self) -> &str {
        &self.inst
    }

    // string cf_type = 26;

    pub fn clear_cf_type(&mut self) {
        self.cf_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_cf_type(&mut self, v: ::std::string::String) {
        self.cf_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf_type(&mut self) -> &mut ::std::string::String {
        &mut self.cf_type
    }

    // Take field
    pub fn take_cf_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cf_type, ::std::string::String::new())
    }

    pub fn get_cf_type(&self) -> &str {
        &self.cf_type
    }

    // double tot_int_amt = 27;

    pub fn clear_tot_int_amt(&mut self) {
        self.tot_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_int_amt(&mut self, v: f64) {
        self.tot_int_amt = v;
    }

    pub fn get_tot_int_amt(&self) -> f64 {
        self.tot_int_amt
    }

    // double tot_prin_amt = 28;

    pub fn clear_tot_prin_amt(&mut self) {
        self.tot_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_prin_amt(&mut self, v: f64) {
        self.tot_prin_amt = v;
    }

    pub fn get_tot_prin_amt(&self) -> f64 {
        self.tot_prin_amt
    }

    // repeated .Cashflow cashflows = 29;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.entity)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trade_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.struct_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.comp_typology)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cntrct_typology)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.desk)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.book)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.folder)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trading_banking)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cntr_prty_grp_cd)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cntr_prty_prnt_cd)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.intrnl_extrnl)?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.trade_dt = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.del_dt = tmp;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buy_sell)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.put_call)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.call_ccy)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.put_ccy)?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.put_amt = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.mtm_excld_prem_inr = tmp;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.position_ccy)?;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.forward_delta_ccy_1_amt = tmp;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pl_ccy)?;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.forward_delta_ccy_2_amt = tmp;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.inst)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cf_type)?;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_int_amt = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_prin_amt = tmp;
                },
                29 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.entity.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.entity);
        }
        if !self.trade_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.trade_id);
        }
        if self.struct_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.struct_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.comp_typology.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.comp_typology);
        }
        if !self.cntrct_typology.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.cntrct_typology);
        }
        if !self.desk.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.desk);
        }
        if !self.book.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.book);
        }
        if !self.folder.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.folder);
        }
        if !self.trading_banking.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.trading_banking);
        }
        if !self.cntr_prty_grp_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.cntr_prty_grp_cd);
        }
        if !self.cntr_prty_prnt_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.cntr_prty_prnt_cd);
        }
        if !self.intrnl_extrnl.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.intrnl_extrnl);
        }
        if self.trade_dt != 0 {
            my_size += ::protobuf::rt::value_size(13, self.trade_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.del_dt != 0 {
            my_size += ::protobuf::rt::value_size(14, self.del_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.buy_sell.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.buy_sell);
        }
        if !self.put_call.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.put_call);
        }
        if !self.call_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.call_ccy);
        }
        if !self.put_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.put_ccy);
        }
        if self.put_amt != 0. {
            my_size += 10;
        }
        if self.mtm_excld_prem_inr != 0. {
            my_size += 10;
        }
        if !self.position_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.position_ccy);
        }
        if self.forward_delta_ccy_1_amt != 0. {
            my_size += 10;
        }
        if !self.pl_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.pl_ccy);
        }
        if self.forward_delta_ccy_2_amt != 0. {
            my_size += 10;
        }
        if !self.inst.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.inst);
        }
        if !self.cf_type.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.cf_type);
        }
        if self.tot_int_amt != 0. {
            my_size += 10;
        }
        if self.tot_prin_amt != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.entity.is_empty() {
            os.write_string(1, &self.entity)?;
        }
        if !self.trade_id.is_empty() {
            os.write_string(2, &self.trade_id)?;
        }
        if self.struct_id != 0 {
            os.write_int64(3, self.struct_id)?;
        }
        if !self.comp_typology.is_empty() {
            os.write_string(4, &self.comp_typology)?;
        }
        if !self.cntrct_typology.is_empty() {
            os.write_string(5, &self.cntrct_typology)?;
        }
        if !self.desk.is_empty() {
            os.write_string(6, &self.desk)?;
        }
        if !self.book.is_empty() {
            os.write_string(7, &self.book)?;
        }
        if !self.folder.is_empty() {
            os.write_string(8, &self.folder)?;
        }
        if !self.trading_banking.is_empty() {
            os.write_string(9, &self.trading_banking)?;
        }
        if !self.cntr_prty_grp_cd.is_empty() {
            os.write_string(10, &self.cntr_prty_grp_cd)?;
        }
        if !self.cntr_prty_prnt_cd.is_empty() {
            os.write_string(11, &self.cntr_prty_prnt_cd)?;
        }
        if !self.intrnl_extrnl.is_empty() {
            os.write_string(12, &self.intrnl_extrnl)?;
        }
        if self.trade_dt != 0 {
            os.write_int64(13, self.trade_dt)?;
        }
        if self.del_dt != 0 {
            os.write_int64(14, self.del_dt)?;
        }
        if !self.buy_sell.is_empty() {
            os.write_string(15, &self.buy_sell)?;
        }
        if !self.put_call.is_empty() {
            os.write_string(16, &self.put_call)?;
        }
        if !self.call_ccy.is_empty() {
            os.write_string(17, &self.call_ccy)?;
        }
        if !self.put_ccy.is_empty() {
            os.write_string(18, &self.put_ccy)?;
        }
        if self.put_amt != 0. {
            os.write_double(19, self.put_amt)?;
        }
        if self.mtm_excld_prem_inr != 0. {
            os.write_double(20, self.mtm_excld_prem_inr)?;
        }
        if !self.position_ccy.is_empty() {
            os.write_string(21, &self.position_ccy)?;
        }
        if self.forward_delta_ccy_1_amt != 0. {
            os.write_double(22, self.forward_delta_ccy_1_amt)?;
        }
        if !self.pl_ccy.is_empty() {
            os.write_string(23, &self.pl_ccy)?;
        }
        if self.forward_delta_ccy_2_amt != 0. {
            os.write_double(24, self.forward_delta_ccy_2_amt)?;
        }
        if !self.inst.is_empty() {
            os.write_string(25, &self.inst)?;
        }
        if !self.cf_type.is_empty() {
            os.write_string(26, &self.cf_type)?;
        }
        if self.tot_int_amt != 0. {
            os.write_double(27, self.tot_int_amt)?;
        }
        if self.tot_prin_amt != 0. {
            os.write_double(28, self.tot_prin_amt)?;
        }
        for v in &self.cashflows {
            os.write_tag(29, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "entity",
                    |m: &AccountWithCashflows| { &m.entity },
                    |m: &mut AccountWithCashflows| { &mut m.entity },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "trade_id",
                    |m: &AccountWithCashflows| { &m.trade_id },
                    |m: &mut AccountWithCashflows| { &mut m.trade_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "struct_id",
                    |m: &AccountWithCashflows| { &m.struct_id },
                    |m: &mut AccountWithCashflows| { &mut m.struct_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "comp_typology",
                    |m: &AccountWithCashflows| { &m.comp_typology },
                    |m: &mut AccountWithCashflows| { &mut m.comp_typology },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cntrct_typology",
                    |m: &AccountWithCashflows| { &m.cntrct_typology },
                    |m: &mut AccountWithCashflows| { &mut m.cntrct_typology },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "desk",
                    |m: &AccountWithCashflows| { &m.desk },
                    |m: &mut AccountWithCashflows| { &mut m.desk },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "book",
                    |m: &AccountWithCashflows| { &m.book },
                    |m: &mut AccountWithCashflows| { &mut m.book },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "folder",
                    |m: &AccountWithCashflows| { &m.folder },
                    |m: &mut AccountWithCashflows| { &mut m.folder },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "trading_banking",
                    |m: &AccountWithCashflows| { &m.trading_banking },
                    |m: &mut AccountWithCashflows| { &mut m.trading_banking },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cntr_prty_grp_cd",
                    |m: &AccountWithCashflows| { &m.cntr_prty_grp_cd },
                    |m: &mut AccountWithCashflows| { &mut m.cntr_prty_grp_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cntr_prty_prnt_cd",
                    |m: &AccountWithCashflows| { &m.cntr_prty_prnt_cd },
                    |m: &mut AccountWithCashflows| { &mut m.cntr_prty_prnt_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "intrnl_extrnl",
                    |m: &AccountWithCashflows| { &m.intrnl_extrnl },
                    |m: &mut AccountWithCashflows| { &mut m.intrnl_extrnl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "trade_dt",
                    |m: &AccountWithCashflows| { &m.trade_dt },
                    |m: &mut AccountWithCashflows| { &mut m.trade_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "del_dt",
                    |m: &AccountWithCashflows| { &m.del_dt },
                    |m: &mut AccountWithCashflows| { &mut m.del_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "buy_sell",
                    |m: &AccountWithCashflows| { &m.buy_sell },
                    |m: &mut AccountWithCashflows| { &mut m.buy_sell },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "put_call",
                    |m: &AccountWithCashflows| { &m.put_call },
                    |m: &mut AccountWithCashflows| { &mut m.put_call },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "call_ccy",
                    |m: &AccountWithCashflows| { &m.call_ccy },
                    |m: &mut AccountWithCashflows| { &mut m.call_ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "put_ccy",
                    |m: &AccountWithCashflows| { &m.put_ccy },
                    |m: &mut AccountWithCashflows| { &mut m.put_ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "put_amt",
                    |m: &AccountWithCashflows| { &m.put_amt },
                    |m: &mut AccountWithCashflows| { &mut m.put_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "mtm_excld_prem_inr",
                    |m: &AccountWithCashflows| { &m.mtm_excld_prem_inr },
                    |m: &mut AccountWithCashflows| { &mut m.mtm_excld_prem_inr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "position_ccy",
                    |m: &AccountWithCashflows| { &m.position_ccy },
                    |m: &mut AccountWithCashflows| { &mut m.position_ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "forward_delta_ccy_1_amt",
                    |m: &AccountWithCashflows| { &m.forward_delta_ccy_1_amt },
                    |m: &mut AccountWithCashflows| { &mut m.forward_delta_ccy_1_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pl_ccy",
                    |m: &AccountWithCashflows| { &m.pl_ccy },
                    |m: &mut AccountWithCashflows| { &mut m.pl_ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "forward_delta_ccy_2_amt",
                    |m: &AccountWithCashflows| { &m.forward_delta_ccy_2_amt },
                    |m: &mut AccountWithCashflows| { &mut m.forward_delta_ccy_2_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "inst",
                    |m: &AccountWithCashflows| { &m.inst },
                    |m: &mut AccountWithCashflows| { &mut m.inst },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cf_type",
                    |m: &AccountWithCashflows| { &m.cf_type },
                    |m: &mut AccountWithCashflows| { &mut m.cf_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_int_amt",
                    |m: &AccountWithCashflows| { &m.tot_int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.tot_int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_prin_amt",
                    |m: &AccountWithCashflows| { &m.tot_prin_amt },
                    |m: &mut AccountWithCashflows| { &mut m.tot_prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_entity();
        self.clear_trade_id();
        self.clear_struct_id();
        self.clear_comp_typology();
        self.clear_cntrct_typology();
        self.clear_desk();
        self.clear_book();
        self.clear_folder();
        self.clear_trading_banking();
        self.clear_cntr_prty_grp_cd();
        self.clear_cntr_prty_prnt_cd();
        self.clear_intrnl_extrnl();
        self.clear_trade_dt();
        self.clear_del_dt();
        self.clear_buy_sell();
        self.clear_put_call();
        self.clear_call_ccy();
        self.clear_put_ccy();
        self.clear_put_amt();
        self.clear_mtm_excld_prem_inr();
        self.clear_position_ccy();
        self.clear_forward_delta_ccy_1_amt();
        self.clear_pl_ccy();
        self.clear_forward_delta_ccy_2_amt();
        self.clear_inst();
        self.clear_cf_type();
        self.clear_tot_int_amt();
        self.clear_tot_prin_amt();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15option_register.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\
    \x01\x20\x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\
    \x07prinAmt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xb6\x07\n\
    \x14AccountWithCashflows\x12\x16\n\x06entity\x18\x01\x20\x01(\tR\x06enti\
    ty\x12\x19\n\x08trade_id\x18\x02\x20\x01(\tR\x07tradeId\x12\x1b\n\tstruc\
    t_id\x18\x03\x20\x01(\x03R\x08structId\x12#\n\rcomp_typology\x18\x04\x20\
    \x01(\tR\x0ccompTypology\x12'\n\x0fcntrct_typology\x18\x05\x20\x01(\tR\
    \x0ecntrctTypology\x12\x12\n\x04desk\x18\x06\x20\x01(\tR\x04desk\x12\x12\
    \n\x04book\x18\x07\x20\x01(\tR\x04book\x12\x16\n\x06folder\x18\x08\x20\
    \x01(\tR\x06folder\x12'\n\x0ftrading_banking\x18\t\x20\x01(\tR\x0etradin\
    gBanking\x12'\n\x10cntr_prty_grp_cd\x18\n\x20\x01(\tR\rcntrPrtyGrpCd\x12\
    )\n\x11cntr_prty_prnt_cd\x18\x0b\x20\x01(\tR\x0ecntrPrtyPrntCd\x12#\n\ri\
    ntrnl_extrnl\x18\x0c\x20\x01(\tR\x0cintrnlExtrnl\x12\x19\n\x08trade_dt\
    \x18\r\x20\x01(\x03R\x07tradeDt\x12\x15\n\x06del_dt\x18\x0e\x20\x01(\x03\
    R\x05delDt\x12\x19\n\x08buy_sell\x18\x0f\x20\x01(\tR\x07buySell\x12\x19\
    \n\x08put_call\x18\x10\x20\x01(\tR\x07putCall\x12\x19\n\x08call_ccy\x18\
    \x11\x20\x01(\tR\x07callCcy\x12\x17\n\x07put_ccy\x18\x12\x20\x01(\tR\x06\
    putCcy\x12\x17\n\x07put_amt\x18\x13\x20\x01(\x01R\x06putAmt\x12+\n\x12mt\
    m_excld_prem_inr\x18\x14\x20\x01(\x01R\x0fmtmExcldPremInr\x12!\n\x0cposi\
    tion_ccy\x18\x15\x20\x01(\tR\x0bpositionCcy\x124\n\x17forward_delta_ccy_\
    1_amt\x18\x16\x20\x01(\x01R\x13forwardDeltaCcy1Amt\x12\x15\n\x06pl_ccy\
    \x18\x17\x20\x01(\tR\x05plCcy\x124\n\x17forward_delta_ccy_2_amt\x18\x18\
    \x20\x01(\x01R\x13forwardDeltaCcy2Amt\x12\x12\n\x04inst\x18\x19\x20\x01(\
    \tR\x04inst\x12\x17\n\x07cf_type\x18\x1a\x20\x01(\tR\x06cfType\x12\x1e\n\
    \x0btot_int_amt\x18\x1b\x20\x01(\x01R\ttotIntAmt\x12\x20\n\x0ctot_prin_a\
    mt\x18\x1c\x20\x01(\x01R\ntotPrinAmt\x12'\n\tcashflows\x18\x1d\x20\x03(\
    \x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
