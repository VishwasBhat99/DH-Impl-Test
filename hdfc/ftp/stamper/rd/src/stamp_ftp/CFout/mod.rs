// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq, Clone, Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    pub base_rate: f64,
    pub base_rate_amount: f64,
    pub adj1_rate: f64,
    pub adj1_rate_amount: f64,
    pub adj2_rate: f64,
    pub adj2_rate_amount: f64,
    pub adj3_rate: f64,
    pub adj3_rate_amount: f64,
    pub adj4_rate: f64,
    pub adj4_rate_amount: f64,
    pub adj5_rate: f64,
    pub adj5_rate_amount: f64,
    pub adj6_rate: f64,
    pub adj6_rate_amount: f64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // double principal_amount = 2;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }

    // double base_rate = 4;

    pub fn clear_base_rate(&mut self) {
        self.base_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_rate(&mut self, v: f64) {
        self.base_rate = v;
    }

    pub fn get_base_rate(&self) -> f64 {
        self.base_rate
    }

    // double base_rate_amount = 5;

    pub fn clear_base_rate_amount(&mut self) {
        self.base_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_rate_amount(&mut self, v: f64) {
        self.base_rate_amount = v;
    }

    pub fn get_base_rate_amount(&self) -> f64 {
        self.base_rate_amount
    }

    // double adj1_rate = 6;

    pub fn clear_adj1_rate(&mut self) {
        self.adj1_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj1_rate(&mut self, v: f64) {
        self.adj1_rate = v;
    }

    pub fn get_adj1_rate(&self) -> f64 {
        self.adj1_rate
    }

    // double adj1_rate_amount = 7;

    pub fn clear_adj1_rate_amount(&mut self) {
        self.adj1_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj1_rate_amount(&mut self, v: f64) {
        self.adj1_rate_amount = v;
    }

    pub fn get_adj1_rate_amount(&self) -> f64 {
        self.adj1_rate_amount
    }

    // double adj2_rate = 8;

    pub fn clear_adj2_rate(&mut self) {
        self.adj2_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj2_rate(&mut self, v: f64) {
        self.adj2_rate = v;
    }

    pub fn get_adj2_rate(&self) -> f64 {
        self.adj2_rate
    }

    // double adj2_rate_amount = 9;

    pub fn clear_adj2_rate_amount(&mut self) {
        self.adj2_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj2_rate_amount(&mut self, v: f64) {
        self.adj2_rate_amount = v;
    }

    pub fn get_adj2_rate_amount(&self) -> f64 {
        self.adj2_rate_amount
    }

    // double adj3_rate = 10;

    pub fn clear_adj3_rate(&mut self) {
        self.adj3_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj3_rate(&mut self, v: f64) {
        self.adj3_rate = v;
    }

    pub fn get_adj3_rate(&self) -> f64 {
        self.adj3_rate
    }

    // double adj3_rate_amount = 11;

    pub fn clear_adj3_rate_amount(&mut self) {
        self.adj3_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj3_rate_amount(&mut self, v: f64) {
        self.adj3_rate_amount = v;
    }

    pub fn get_adj3_rate_amount(&self) -> f64 {
        self.adj3_rate_amount
    }

    // double adj4_rate = 12;

    pub fn clear_adj4_rate(&mut self) {
        self.adj4_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj4_rate(&mut self, v: f64) {
        self.adj4_rate = v;
    }

    pub fn get_adj4_rate(&self) -> f64 {
        self.adj4_rate
    }

    // double adj4_rate_amount = 13;

    pub fn clear_adj4_rate_amount(&mut self) {
        self.adj4_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj4_rate_amount(&mut self, v: f64) {
        self.adj4_rate_amount = v;
    }

    pub fn get_adj4_rate_amount(&self) -> f64 {
        self.adj4_rate_amount
    }

    // double adj5_rate = 14;

    pub fn clear_adj5_rate(&mut self) {
        self.adj5_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj5_rate(&mut self, v: f64) {
        self.adj5_rate = v;
    }

    pub fn get_adj5_rate(&self) -> f64 {
        self.adj5_rate
    }

    // double adj5_rate_amount = 15;

    pub fn clear_adj5_rate_amount(&mut self) {
        self.adj5_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj5_rate_amount(&mut self, v: f64) {
        self.adj5_rate_amount = v;
    }

    pub fn get_adj5_rate_amount(&self) -> f64 {
        self.adj5_rate_amount
    }

    // double adj6_rate = 16;

    pub fn clear_adj6_rate(&mut self) {
        self.adj6_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj6_rate(&mut self, v: f64) {
        self.adj6_rate = v;
    }

    pub fn get_adj6_rate(&self) -> f64 {
        self.adj6_rate
    }

    // double adj6_rate_amount = 17;

    pub fn clear_adj6_rate_amount(&mut self) {
        self.adj6_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj6_rate_amount(&mut self, v: f64) {
        self.adj6_rate_amount = v;
    }

    pub fn get_adj6_rate_amount(&self) -> f64 {
        self.adj6_rate_amount
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                }
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.base_rate = tmp;
                }
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.base_rate_amount = tmp;
                }
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj1_rate = tmp;
                }
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj1_rate_amount = tmp;
                }
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj2_rate = tmp;
                }
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj2_rate_amount = tmp;
                }
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj3_rate = tmp;
                }
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj3_rate_amount = tmp;
                }
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj4_rate = tmp;
                }
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj4_rate_amount = tmp;
                }
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj5_rate = tmp;
                }
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj5_rate_amount = tmp;
                }
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj6_rate = tmp;
                }
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.adj6_rate_amount = tmp;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size +=
                ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.base_rate != 0. {
            my_size += 9;
        }
        if self.base_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj1_rate != 0. {
            my_size += 9;
        }
        if self.adj1_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj2_rate != 0. {
            my_size += 9;
        }
        if self.adj2_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj3_rate != 0. {
            my_size += 9;
        }
        if self.adj3_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj4_rate != 0. {
            my_size += 9;
        }
        if self.adj4_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj5_rate != 0. {
            my_size += 9;
        }
        if self.adj5_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj6_rate != 0. {
            my_size += 10;
        }
        if self.adj6_rate_amount != 0. {
            my_size += 10;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream,
    ) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        if self.base_rate != 0. {
            os.write_double(4, self.base_rate)?;
        }
        if self.base_rate_amount != 0. {
            os.write_double(5, self.base_rate_amount)?;
        }
        if self.adj1_rate != 0. {
            os.write_double(6, self.adj1_rate)?;
        }
        if self.adj1_rate_amount != 0. {
            os.write_double(7, self.adj1_rate_amount)?;
        }
        if self.adj2_rate != 0. {
            os.write_double(8, self.adj2_rate)?;
        }
        if self.adj2_rate_amount != 0. {
            os.write_double(9, self.adj2_rate_amount)?;
        }
        if self.adj3_rate != 0. {
            os.write_double(10, self.adj3_rate)?;
        }
        if self.adj3_rate_amount != 0. {
            os.write_double(11, self.adj3_rate_amount)?;
        }
        if self.adj4_rate != 0. {
            os.write_double(12, self.adj4_rate)?;
        }
        if self.adj4_rate_amount != 0. {
            os.write_double(13, self.adj4_rate_amount)?;
        }
        if self.adj5_rate != 0. {
            os.write_double(14, self.adj5_rate)?;
        }
        if self.adj5_rate_amount != 0. {
            os.write_double(15, self.adj5_rate_amount)?;
        }
        if self.adj6_rate != 0. {
            os.write_double(16, self.adj6_rate)?;
        }
        if self.adj6_rate_amount != 0. {
            os.write_double(17, self.adj6_rate_amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "interest_amount",
                    |m: &Cashflow| &m.interest_amount,
                    |m: &mut Cashflow| &mut m.interest_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "principal_amount",
                    |m: &Cashflow| &m.principal_amount,
                    |m: &mut Cashflow| &mut m.principal_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "date",
                    |m: &Cashflow| &m.date,
                    |m: &mut Cashflow| &mut m.date,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "base_rate",
                    |m: &Cashflow| &m.base_rate,
                    |m: &mut Cashflow| &mut m.base_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "base_rate_amount",
                    |m: &Cashflow| &m.base_rate_amount,
                    |m: &mut Cashflow| &mut m.base_rate_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj1_rate",
                    |m: &Cashflow| &m.adj1_rate,
                    |m: &mut Cashflow| &mut m.adj1_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj1_rate_amount",
                    |m: &Cashflow| &m.adj1_rate_amount,
                    |m: &mut Cashflow| &mut m.adj1_rate_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj2_rate",
                    |m: &Cashflow| &m.adj2_rate,
                    |m: &mut Cashflow| &mut m.adj2_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj2_rate_amount",
                    |m: &Cashflow| &m.adj2_rate_amount,
                    |m: &mut Cashflow| &mut m.adj2_rate_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj3_rate",
                    |m: &Cashflow| &m.adj3_rate,
                    |m: &mut Cashflow| &mut m.adj3_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj3_rate_amount",
                    |m: &Cashflow| &m.adj3_rate_amount,
                    |m: &mut Cashflow| &mut m.adj3_rate_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj4_rate",
                    |m: &Cashflow| &m.adj4_rate,
                    |m: &mut Cashflow| &mut m.adj4_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj4_rate_amount",
                    |m: &Cashflow| &m.adj4_rate_amount,
                    |m: &mut Cashflow| &mut m.adj4_rate_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj5_rate",
                    |m: &Cashflow| &m.adj5_rate,
                    |m: &mut Cashflow| &mut m.adj5_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj5_rate_amount",
                    |m: &Cashflow| &m.adj5_rate_amount,
                    |m: &mut Cashflow| &mut m.adj5_rate_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj6_rate",
                    |m: &Cashflow| &m.adj6_rate,
                    |m: &mut Cashflow| &mut m.adj6_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "adj6_rate_amount",
                    |m: &Cashflow| &m.adj6_rate_amount,
                    |m: &mut Cashflow| &mut m.adj6_rate_amount,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe { instance.get(Cashflow::new) }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_interest_amount();
        self.clear_principal_amount();
        self.clear_date();
        self.clear_base_rate();
        self.clear_base_rate_amount();
        self.clear_adj1_rate();
        self.clear_adj1_rate_amount();
        self.clear_adj2_rate();
        self.clear_adj2_rate_amount();
        self.clear_adj3_rate();
        self.clear_adj3_rate_amount();
        self.clear_adj4_rate();
        self.clear_adj4_rate_amount();
        self.clear_adj5_rate();
        self.clear_adj5_rate_amount();
        self.clear_adj6_rate();
        self.clear_adj6_rate_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct AccountWithCashflows {
    // message fields
    pub acc_no: ::std::string::String,
    pub cntr_party: ::std::string::String,
    pub ccy: ::std::string::String,
    pub gl_no: ::std::string::String,
    pub amt: f64,
    pub int_rt: f64,
    pub st_dt: i64,
    pub mat_dt: i64,
    pub alm_line: ::std::string::String,
    pub div: ::std::string::String,
    pub cust_id: i64,
    pub prod_code: ::std::string::String,
    pub cod_mis_comp1: ::std::string::String,
    pub Method: i32,
    pub BaseCurve: i32,
    pub ftp_runid: i64,
    pub from_date: i32,
    pub to_date: i32,
    pub total_balance: f64,
    pub total_interest_ftp: f64,
    pub total_ftp: f64,
    pub FTP_Rate: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string acc_no = 1;

    pub fn clear_acc_no(&mut self) {
        self.acc_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_no(&mut self, v: ::std::string::String) {
        self.acc_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_no(&mut self) -> &mut ::std::string::String {
        &mut self.acc_no
    }

    // Take field
    pub fn take_acc_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_no, ::std::string::String::new())
    }

    pub fn get_acc_no(&self) -> &str {
        &self.acc_no
    }

    // string cntr_party = 2;

    pub fn clear_cntr_party(&mut self) {
        self.cntr_party.clear();
    }

    // Param is passed by value, moved
    pub fn set_cntr_party(&mut self, v: ::std::string::String) {
        self.cntr_party = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cntr_party(&mut self) -> &mut ::std::string::String {
        &mut self.cntr_party
    }

    // Take field
    pub fn take_cntr_party(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cntr_party, ::std::string::String::new())
    }

    pub fn get_cntr_party(&self) -> &str {
        &self.cntr_party
    }

    // string ccy = 3;

    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }

    // string gl_no = 4;

    pub fn clear_gl_no(&mut self) {
        self.gl_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_no(&mut self, v: ::std::string::String) {
        self.gl_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_no(&mut self) -> &mut ::std::string::String {
        &mut self.gl_no
    }

    // Take field
    pub fn take_gl_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_no, ::std::string::String::new())
    }

    pub fn get_gl_no(&self) -> &str {
        &self.gl_no
    }

    // double amt = 5;

    pub fn clear_amt(&mut self) {
        self.amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amt(&mut self, v: f64) {
        self.amt = v;
    }

    pub fn get_amt(&self) -> f64 {
        self.amt
    }

    // double int_rt = 6;

    pub fn clear_int_rt(&mut self) {
        self.int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rt(&mut self, v: f64) {
        self.int_rt = v;
    }

    pub fn get_int_rt(&self) -> f64 {
        self.int_rt
    }

    // int64 st_dt = 7;

    pub fn clear_st_dt(&mut self) {
        self.st_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_st_dt(&mut self, v: i64) {
        self.st_dt = v;
    }

    pub fn get_st_dt(&self) -> i64 {
        self.st_dt
    }

    // int64 mat_dt = 8;

    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }

    // string alm_line = 9;

    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }

    // string div = 10;

    pub fn clear_div(&mut self) {
        self.div.clear();
    }

    // Param is passed by value, moved
    pub fn set_div(&mut self, v: ::std::string::String) {
        self.div = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_div(&mut self) -> &mut ::std::string::String {
        &mut self.div
    }

    // Take field
    pub fn take_div(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.div, ::std::string::String::new())
    }

    pub fn get_div(&self) -> &str {
        &self.div
    }

    // int64 cust_id = 11;

    pub fn clear_cust_id(&mut self) {
        self.cust_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: i64) {
        self.cust_id = v;
    }

    pub fn get_cust_id(&self) -> i64 {
        self.cust_id
    }

    // string prod_code = 12;

    pub fn clear_prod_code(&mut self) {
        self.prod_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_code(&mut self, v: ::std::string::String) {
        self.prod_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_code(&mut self) -> &mut ::std::string::String {
        &mut self.prod_code
    }

    // Take field
    pub fn take_prod_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_code, ::std::string::String::new())
    }

    pub fn get_prod_code(&self) -> &str {
        &self.prod_code
    }

    // string cod_mis_comp1 = 13;

    pub fn clear_cod_mis_comp1(&mut self) {
        self.cod_mis_comp1.clear();
    }

    // Param is passed by value, moved
    pub fn set_cod_mis_comp1(&mut self, v: ::std::string::String) {
        self.cod_mis_comp1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cod_mis_comp1(&mut self) -> &mut ::std::string::String {
        &mut self.cod_mis_comp1
    }

    // Take field
    pub fn take_cod_mis_comp1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cod_mis_comp1, ::std::string::String::new())
    }

    pub fn get_cod_mis_comp1(&self) -> &str {
        &self.cod_mis_comp1
    }

    // int32 Method = 14;

    pub fn clear_Method(&mut self) {
        self.Method = 0;
    }

    // Param is passed by value, moved
    pub fn set_Method(&mut self, v: i32) {
        self.Method = v;
    }

    pub fn get_Method(&self) -> i32 {
        self.Method
    }

    // int32 BaseCurve = 15;

    pub fn clear_BaseCurve(&mut self) {
        self.BaseCurve = 0;
    }

    // Param is passed by value, moved
    pub fn set_BaseCurve(&mut self, v: i32) {
        self.BaseCurve = v;
    }

    pub fn get_BaseCurve(&self) -> i32 {
        self.BaseCurve
    }

    // int64 ftp_runid = 16;

    pub fn clear_ftp_runid(&mut self) {
        self.ftp_runid = 0;
    }

    // Param is passed by value, moved
    pub fn set_ftp_runid(&mut self, v: i64) {
        self.ftp_runid = v;
    }

    pub fn get_ftp_runid(&self) -> i64 {
        self.ftp_runid
    }

    // int32 from_date = 17;

    pub fn clear_from_date(&mut self) {
        self.from_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_from_date(&mut self, v: i32) {
        self.from_date = v;
    }

    pub fn get_from_date(&self) -> i32 {
        self.from_date
    }

    // int32 to_date = 18;

    pub fn clear_to_date(&mut self) {
        self.to_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_to_date(&mut self, v: i32) {
        self.to_date = v;
    }

    pub fn get_to_date(&self) -> i32 {
        self.to_date
    }

    // double total_balance = 19;

    pub fn clear_total_balance(&mut self) {
        self.total_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_balance(&mut self, v: f64) {
        self.total_balance = v;
    }

    pub fn get_total_balance(&self) -> f64 {
        self.total_balance
    }

    // double total_interest_ftp = 20;

    pub fn clear_total_interest_ftp(&mut self) {
        self.total_interest_ftp = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_ftp(&mut self, v: f64) {
        self.total_interest_ftp = v;
    }

    pub fn get_total_interest_ftp(&self) -> f64 {
        self.total_interest_ftp
    }

    // double total_ftp = 21;

    pub fn clear_total_ftp(&mut self) {
        self.total_ftp = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_ftp(&mut self, v: f64) {
        self.total_ftp = v;
    }

    pub fn get_total_ftp(&self) -> f64 {
        self.total_ftp
    }

    // double FTP_Rate = 22;

    pub fn clear_FTP_Rate(&mut self) {
        self.FTP_Rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_FTP_Rate(&mut self, v: f64) {
        self.FTP_Rate = v;
    }

    pub fn get_FTP_Rate(&self) -> f64 {
        self.FTP_Rate
    }

    // repeated .Cashflow cashflows = 23;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.acc_no,
                    )?;
                }
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.cntr_party,
                    )?;
                }
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                }
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.gl_no,
                    )?;
                }
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.amt = tmp;
                }
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.int_rt = tmp;
                }
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.st_dt = tmp;
                }
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                }
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.alm_line,
                    )?;
                }
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.div)?;
                }
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.cust_id = tmp;
                }
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.prod_code,
                    )?;
                }
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.cod_mis_comp1,
                    )?;
                }
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.Method = tmp;
                }
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.BaseCurve = tmp;
                }
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.ftp_runid = tmp;
                }
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.from_date = tmp;
                }
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.to_date = tmp;
                }
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.total_balance = tmp;
                }
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_ftp = tmp;
                }
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.total_ftp = tmp;
                }
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.FTP_Rate = tmp;
                }
                23 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.acc_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.acc_no);
        }
        if !self.cntr_party.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.cntr_party);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ccy);
        }
        if !self.gl_no.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.gl_no);
        }
        if self.amt != 0. {
            my_size += 9;
        }
        if self.int_rt != 0. {
            my_size += 9;
        }
        if self.st_dt != 0 {
            my_size +=
                ::protobuf::rt::value_size(7, self.st_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mat_dt != 0 {
            my_size +=
                ::protobuf::rt::value_size(8, self.mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.alm_line);
        }
        if !self.div.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.div);
        }
        if self.cust_id != 0 {
            my_size += ::protobuf::rt::value_size(
                11,
                self.cust_id,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.prod_code.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.prod_code);
        }
        if !self.cod_mis_comp1.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.cod_mis_comp1);
        }
        if self.Method != 0 {
            my_size += ::protobuf::rt::value_size(
                14,
                self.Method,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.BaseCurve != 0 {
            my_size += ::protobuf::rt::value_size(
                15,
                self.BaseCurve,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.ftp_runid != 0 {
            my_size += ::protobuf::rt::value_size(
                16,
                self.ftp_runid,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.from_date != 0 {
            my_size += ::protobuf::rt::value_size(
                17,
                self.from_date,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.to_date != 0 {
            my_size += ::protobuf::rt::value_size(
                18,
                self.to_date,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.total_balance != 0. {
            my_size += 10;
        }
        if self.total_interest_ftp != 0. {
            my_size += 10;
        }
        if self.total_ftp != 0. {
            my_size += 10;
        }
        if self.FTP_Rate != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.acc_no.is_empty() {
            os.write_string(1, &self.acc_no)?;
        }
        if !self.cntr_party.is_empty() {
            os.write_string(2, &self.cntr_party)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(3, &self.ccy)?;
        }
        if !self.gl_no.is_empty() {
            os.write_string(4, &self.gl_no)?;
        }
        if self.amt != 0. {
            os.write_double(5, self.amt)?;
        }
        if self.int_rt != 0. {
            os.write_double(6, self.int_rt)?;
        }
        if self.st_dt != 0 {
            os.write_int64(7, self.st_dt)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(8, self.mat_dt)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(9, &self.alm_line)?;
        }
        if !self.div.is_empty() {
            os.write_string(10, &self.div)?;
        }
        if self.cust_id != 0 {
            os.write_int64(11, self.cust_id)?;
        }
        if !self.prod_code.is_empty() {
            os.write_string(12, &self.prod_code)?;
        }
        if !self.cod_mis_comp1.is_empty() {
            os.write_string(13, &self.cod_mis_comp1)?;
        }
        if self.Method != 0 {
            os.write_int32(14, self.Method)?;
        }
        if self.BaseCurve != 0 {
            os.write_int32(15, self.BaseCurve)?;
        }
        if self.ftp_runid != 0 {
            os.write_int64(16, self.ftp_runid)?;
        }
        if self.from_date != 0 {
            os.write_int32(17, self.from_date)?;
        }
        if self.to_date != 0 {
            os.write_int32(18, self.to_date)?;
        }
        if self.total_balance != 0. {
            os.write_double(19, self.total_balance)?;
        }
        if self.total_interest_ftp != 0. {
            os.write_double(20, self.total_interest_ftp)?;
        }
        if self.total_ftp != 0. {
            os.write_double(21, self.total_ftp)?;
        }
        if self.FTP_Rate != 0. {
            os.write_double(22, self.FTP_Rate)?;
        }
        for v in &self.cashflows {
            os.write_tag(23, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "acc_no",
                    |m: &AccountWithCashflows| &m.acc_no,
                    |m: &mut AccountWithCashflows| &mut m.acc_no,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "cntr_party",
                    |m: &AccountWithCashflows| &m.cntr_party,
                    |m: &mut AccountWithCashflows| &mut m.cntr_party,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "ccy",
                    |m: &AccountWithCashflows| &m.ccy,
                    |m: &mut AccountWithCashflows| &mut m.ccy,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "gl_no",
                    |m: &AccountWithCashflows| &m.gl_no,
                    |m: &mut AccountWithCashflows| &mut m.gl_no,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "amt",
                    |m: &AccountWithCashflows| &m.amt,
                    |m: &mut AccountWithCashflows| &mut m.amt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "int_rt",
                    |m: &AccountWithCashflows| &m.int_rt,
                    |m: &mut AccountWithCashflows| &mut m.int_rt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "st_dt",
                    |m: &AccountWithCashflows| &m.st_dt,
                    |m: &mut AccountWithCashflows| &mut m.st_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "mat_dt",
                    |m: &AccountWithCashflows| &m.mat_dt,
                    |m: &mut AccountWithCashflows| &mut m.mat_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "alm_line",
                    |m: &AccountWithCashflows| &m.alm_line,
                    |m: &mut AccountWithCashflows| &mut m.alm_line,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "div",
                    |m: &AccountWithCashflows| &m.div,
                    |m: &mut AccountWithCashflows| &mut m.div,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "cust_id",
                    |m: &AccountWithCashflows| &m.cust_id,
                    |m: &mut AccountWithCashflows| &mut m.cust_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "prod_code",
                    |m: &AccountWithCashflows| &m.prod_code,
                    |m: &mut AccountWithCashflows| &mut m.prod_code,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "cod_mis_comp1",
                    |m: &AccountWithCashflows| &m.cod_mis_comp1,
                    |m: &mut AccountWithCashflows| &mut m.cod_mis_comp1,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "Method",
                    |m: &AccountWithCashflows| &m.Method,
                    |m: &mut AccountWithCashflows| &mut m.Method,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "BaseCurve",
                    |m: &AccountWithCashflows| &m.BaseCurve,
                    |m: &mut AccountWithCashflows| &mut m.BaseCurve,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "ftp_runid",
                    |m: &AccountWithCashflows| &m.ftp_runid,
                    |m: &mut AccountWithCashflows| &mut m.ftp_runid,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "from_date",
                    |m: &AccountWithCashflows| &m.from_date,
                    |m: &mut AccountWithCashflows| &mut m.from_date,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "to_date",
                    |m: &AccountWithCashflows| &m.to_date,
                    |m: &mut AccountWithCashflows| &mut m.to_date,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "total_balance",
                    |m: &AccountWithCashflows| &m.total_balance,
                    |m: &mut AccountWithCashflows| &mut m.total_balance,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "total_interest_ftp",
                    |m: &AccountWithCashflows| &m.total_interest_ftp,
                    |m: &mut AccountWithCashflows| &mut m.total_interest_ftp,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "total_ftp",
                    |m: &AccountWithCashflows| &m.total_ftp,
                    |m: &mut AccountWithCashflows| &mut m.total_ftp,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "FTP_Rate",
                    |m: &AccountWithCashflows| &m.FTP_Rate,
                    |m: &mut AccountWithCashflows| &mut m.FTP_Rate,
                ));
                fields.push(
                    ::protobuf::reflect::accessor::make_repeated_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<Cashflow>,
                    >(
                        "cashflows",
                        |m: &AccountWithCashflows| &m.cashflows,
                        |m: &mut AccountWithCashflows| &mut m.cashflows,
                    ),
                );
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const AccountWithCashflows,
            };
        unsafe { instance.get(AccountWithCashflows::new) }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_acc_no();
        self.clear_cntr_party();
        self.clear_ccy();
        self.clear_gl_no();
        self.clear_amt();
        self.clear_int_rt();
        self.clear_st_dt();
        self.clear_mat_dt();
        self.clear_alm_line();
        self.clear_div();
        self.clear_cust_id();
        self.clear_prod_code();
        self.clear_cod_mis_comp1();
        self.clear_Method();
        self.clear_BaseCurve();
        self.clear_ftp_runid();
        self.clear_from_date();
        self.clear_to_date();
        self.clear_total_balance();
        self.clear_total_interest_ftp();
        self.clear_total_ftp();
        self.clear_FTP_Rate();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$AccountWithCashflows_bills_ftp.proto\"\xe3\x04\n\x08Cashflow\x12'\n\
    \x0finterest_amount\x18\x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10pr\
    incipal_amount\x18\x02\x20\x01(\x01R\x0fprincipalAmount\x12\x12\n\x04dat\
    e\x18\x03\x20\x01(\x03R\x04date\x12\x1b\n\tbase_rate\x18\x04\x20\x01(\
    \x01R\x08baseRate\x12(\n\x10base_rate_amount\x18\x05\x20\x01(\x01R\x0eba\
    seRateAmount\x12\x1b\n\tadj1_rate\x18\x06\x20\x01(\x01R\x08adj1Rate\x12(\
    \n\x10adj1_rate_amount\x18\x07\x20\x01(\x01R\x0eadj1RateAmount\x12\x1b\n\
    \tadj2_rate\x18\x08\x20\x01(\x01R\x08adj2Rate\x12(\n\x10adj2_rate_amount\
    \x18\t\x20\x01(\x01R\x0eadj2RateAmount\x12\x1b\n\tadj3_rate\x18\n\x20\
    \x01(\x01R\x08adj3Rate\x12(\n\x10adj3_rate_amount\x18\x0b\x20\x01(\x01R\
    \x0eadj3RateAmount\x12\x1b\n\tadj4_rate\x18\x0c\x20\x01(\x01R\x08adj4Rat\
    e\x12(\n\x10adj4_rate_amount\x18\r\x20\x01(\x01R\x0eadj4RateAmount\x12\
    \x1b\n\tadj5_rate\x18\x0e\x20\x01(\x01R\x08adj5Rate\x12(\n\x10adj5_rate_\
    amount\x18\x0f\x20\x01(\x01R\x0eadj5RateAmount\x12\x1b\n\tadj6_rate\x18\
    \x10\x20\x01(\x01R\x08adj6Rate\x12(\n\x10adj6_rate_amount\x18\x11\x20\
    \x01(\x01R\x0eadj6RateAmount\"\x8c\x05\n\x14AccountWithCashflows\x12\x15\
    \n\x06acc_no\x18\x01\x20\x01(\tR\x05accNo\x12\x1d\n\ncntr_party\x18\x02\
    \x20\x01(\tR\tcntrParty\x12\x10\n\x03ccy\x18\x03\x20\x01(\tR\x03ccy\x12\
    \x13\n\x05gl_no\x18\x04\x20\x01(\tR\x04glNo\x12\x10\n\x03amt\x18\x05\x20\
    \x01(\x01R\x03amt\x12\x15\n\x06int_rt\x18\x06\x20\x01(\x01R\x05intRt\x12\
    \x13\n\x05st_dt\x18\x07\x20\x01(\x03R\x04stDt\x12\x15\n\x06mat_dt\x18\
    \x08\x20\x01(\x03R\x05matDt\x12\x19\n\x08alm_line\x18\t\x20\x01(\tR\x07a\
    lmLine\x12\x10\n\x03div\x18\n\x20\x01(\tR\x03div\x12\x17\n\x07cust_id\
    \x18\x0b\x20\x01(\x03R\x06custId\x12\x1b\n\tprod_code\x18\x0c\x20\x01(\t\
    R\x08prodCode\x12\"\n\rcod_mis_comp1\x18\r\x20\x01(\tR\x0bcodMisComp1\
    \x12\x16\n\x06Method\x18\x0e\x20\x01(\x05R\x06Method\x12\x1c\n\tBaseCurv\
    e\x18\x0f\x20\x01(\x05R\tBaseCurve\x12\x1b\n\tftp_runid\x18\x10\x20\x01(\
    \x03R\x08ftpRunid\x12\x1b\n\tfrom_date\x18\x11\x20\x01(\x05R\x08fromDate\
    \x12\x17\n\x07to_date\x18\x12\x20\x01(\x05R\x06toDate\x12#\n\rtotal_bala\
    nce\x18\x13\x20\x01(\x01R\x0ctotalBalance\x12,\n\x12total_interest_ftp\
    \x18\x14\x20\x01(\x01R\x10totalInterestFtp\x12\x1b\n\ttotal_ftp\x18\x15\
    \x20\x01(\x01R\x08totalFtp\x12\x19\n\x08FTP_Rate\x18\x16\x20\x01(\x01R\
    \x07FTPRate\x12'\n\tcashflows\x18\x17\x20\x03(\x0b2\t.CashflowR\tcashflo\
    wsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<
    ::protobuf::descriptor::FileDescriptorProto,
> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe { file_descriptor_proto_lazy.get(|| parse_descriptor_proto()) }
}
