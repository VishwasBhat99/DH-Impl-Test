// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cf_borrwings.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_amt",
                |m: &Cashflow| { &m.int_amt },
                |m: &mut Cashflow| { &mut m.int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "prin_amt",
                |m: &Cashflow| { &m.prin_amt },
                |m: &mut Cashflow| { &mut m.prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub as_on_date: i64,
    pub deal_number: ::std::string::String,
    pub instrument_type: ::std::string::String,
    pub branch: i64,
    pub outstanding_amount: f64,
    pub currency: ::std::string::String,
    pub instrument_classification: ::std::string::String,
    pub counter_party_id: i64,
    pub counter_party_name: ::std::string::String,
    pub counter_party_type: ::std::string::String,
    pub borrowing_date: i64,
    pub borrowing_maturity_date: i64,
    pub interest_rate: f64,
    pub interest_rate_classification: ::std::string::String,
    pub frequency: f64,
    pub basis: f64,
    pub next_repricing_date: i64,
    pub last_repricing_date: i64,
    pub repricing_frequency: ::std::string::String,
    pub coupon_payment_start_date: i64,
    pub coupon_payment_frequency: ::std::string::String,
    pub benchmark: ::std::string::String,
    pub spread: ::std::string::String,
    pub isin_code: ::std::string::String,
    pub mduration: ::std::string::String,
    pub treasury_gl_code: ::std::string::String,
    pub accrued_interest: f64,
    pub accrued_gl: ::std::string::String,
    pub deal_date: i64,
    pub value_date: i64,
    pub avg_mon_balance: f64,
    pub cdr_flg: ::std::string::String,
    pub cf_type: ::std::string::String,
    pub cf_sub_type: ::std::string::String,
    pub cf_amount: f64,
    pub cf_date: i64,
    pub cf_currency: ::std::string::String,
    pub outstanding_diff_amount: f64,
    pub group: ::std::string::String,
    pub llg: ::std::string::String,
    pub other_llg_classification: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // int64 as_on_date = 1;


    pub fn get_as_on_date(&self) -> i64 {
        self.as_on_date
    }
    pub fn clear_as_on_date(&mut self) {
        self.as_on_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on_date(&mut self, v: i64) {
        self.as_on_date = v;
    }

    // string deal_number = 2;


    pub fn get_deal_number(&self) -> &str {
        &self.deal_number
    }
    pub fn clear_deal_number(&mut self) {
        self.deal_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_number(&mut self, v: ::std::string::String) {
        self.deal_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_number(&mut self) -> &mut ::std::string::String {
        &mut self.deal_number
    }

    // Take field
    pub fn take_deal_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_number, ::std::string::String::new())
    }

    // string instrument_type = 3;


    pub fn get_instrument_type(&self) -> &str {
        &self.instrument_type
    }
    pub fn clear_instrument_type(&mut self) {
        self.instrument_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_instrument_type(&mut self, v: ::std::string::String) {
        self.instrument_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instrument_type(&mut self) -> &mut ::std::string::String {
        &mut self.instrument_type
    }

    // Take field
    pub fn take_instrument_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instrument_type, ::std::string::String::new())
    }

    // int64 branch = 4;


    pub fn get_branch(&self) -> i64 {
        self.branch
    }
    pub fn clear_branch(&mut self) {
        self.branch = 0;
    }

    // Param is passed by value, moved
    pub fn set_branch(&mut self, v: i64) {
        self.branch = v;
    }

    // double outstanding_amount = 5;


    pub fn get_outstanding_amount(&self) -> f64 {
        self.outstanding_amount
    }
    pub fn clear_outstanding_amount(&mut self) {
        self.outstanding_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_outstanding_amount(&mut self, v: f64) {
        self.outstanding_amount = v;
    }

    // string currency = 6;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // string instrument_classification = 7;


    pub fn get_instrument_classification(&self) -> &str {
        &self.instrument_classification
    }
    pub fn clear_instrument_classification(&mut self) {
        self.instrument_classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_instrument_classification(&mut self, v: ::std::string::String) {
        self.instrument_classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instrument_classification(&mut self) -> &mut ::std::string::String {
        &mut self.instrument_classification
    }

    // Take field
    pub fn take_instrument_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instrument_classification, ::std::string::String::new())
    }

    // int64 counter_party_id = 8;


    pub fn get_counter_party_id(&self) -> i64 {
        self.counter_party_id
    }
    pub fn clear_counter_party_id(&mut self) {
        self.counter_party_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_counter_party_id(&mut self, v: i64) {
        self.counter_party_id = v;
    }

    // string counter_party_name = 9;


    pub fn get_counter_party_name(&self) -> &str {
        &self.counter_party_name
    }
    pub fn clear_counter_party_name(&mut self) {
        self.counter_party_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_counter_party_name(&mut self, v: ::std::string::String) {
        self.counter_party_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counter_party_name(&mut self) -> &mut ::std::string::String {
        &mut self.counter_party_name
    }

    // Take field
    pub fn take_counter_party_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counter_party_name, ::std::string::String::new())
    }

    // string counter_party_type = 10;


    pub fn get_counter_party_type(&self) -> &str {
        &self.counter_party_type
    }
    pub fn clear_counter_party_type(&mut self) {
        self.counter_party_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_counter_party_type(&mut self, v: ::std::string::String) {
        self.counter_party_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counter_party_type(&mut self) -> &mut ::std::string::String {
        &mut self.counter_party_type
    }

    // Take field
    pub fn take_counter_party_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counter_party_type, ::std::string::String::new())
    }

    // int64 borrowing_date = 11;


    pub fn get_borrowing_date(&self) -> i64 {
        self.borrowing_date
    }
    pub fn clear_borrowing_date(&mut self) {
        self.borrowing_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_borrowing_date(&mut self, v: i64) {
        self.borrowing_date = v;
    }

    // int64 borrowing_maturity_date = 12;


    pub fn get_borrowing_maturity_date(&self) -> i64 {
        self.borrowing_maturity_date
    }
    pub fn clear_borrowing_maturity_date(&mut self) {
        self.borrowing_maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_borrowing_maturity_date(&mut self, v: i64) {
        self.borrowing_maturity_date = v;
    }

    // double interest_rate = 13;


    pub fn get_interest_rate(&self) -> f64 {
        self.interest_rate
    }
    pub fn clear_interest_rate(&mut self) {
        self.interest_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_rate(&mut self, v: f64) {
        self.interest_rate = v;
    }

    // string interest_rate_classification = 14;


    pub fn get_interest_rate_classification(&self) -> &str {
        &self.interest_rate_classification
    }
    pub fn clear_interest_rate_classification(&mut self) {
        self.interest_rate_classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_interest_rate_classification(&mut self, v: ::std::string::String) {
        self.interest_rate_classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interest_rate_classification(&mut self) -> &mut ::std::string::String {
        &mut self.interest_rate_classification
    }

    // Take field
    pub fn take_interest_rate_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interest_rate_classification, ::std::string::String::new())
    }

    // double frequency = 15;


    pub fn get_frequency(&self) -> f64 {
        self.frequency
    }
    pub fn clear_frequency(&mut self) {
        self.frequency = 0.;
    }

    // Param is passed by value, moved
    pub fn set_frequency(&mut self, v: f64) {
        self.frequency = v;
    }

    // double basis = 16;


    pub fn get_basis(&self) -> f64 {
        self.basis
    }
    pub fn clear_basis(&mut self) {
        self.basis = 0.;
    }

    // Param is passed by value, moved
    pub fn set_basis(&mut self, v: f64) {
        self.basis = v;
    }

    // int64 next_repricing_date = 17;


    pub fn get_next_repricing_date(&self) -> i64 {
        self.next_repricing_date
    }
    pub fn clear_next_repricing_date(&mut self) {
        self.next_repricing_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_repricing_date(&mut self, v: i64) {
        self.next_repricing_date = v;
    }

    // int64 last_repricing_date = 18;


    pub fn get_last_repricing_date(&self) -> i64 {
        self.last_repricing_date
    }
    pub fn clear_last_repricing_date(&mut self) {
        self.last_repricing_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_repricing_date(&mut self, v: i64) {
        self.last_repricing_date = v;
    }

    // string repricing_frequency = 19;


    pub fn get_repricing_frequency(&self) -> &str {
        &self.repricing_frequency
    }
    pub fn clear_repricing_frequency(&mut self) {
        self.repricing_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_repricing_frequency(&mut self, v: ::std::string::String) {
        self.repricing_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repricing_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.repricing_frequency
    }

    // Take field
    pub fn take_repricing_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.repricing_frequency, ::std::string::String::new())
    }

    // int64 coupon_payment_start_date = 20;


    pub fn get_coupon_payment_start_date(&self) -> i64 {
        self.coupon_payment_start_date
    }
    pub fn clear_coupon_payment_start_date(&mut self) {
        self.coupon_payment_start_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_coupon_payment_start_date(&mut self, v: i64) {
        self.coupon_payment_start_date = v;
    }

    // string coupon_payment_frequency = 21;


    pub fn get_coupon_payment_frequency(&self) -> &str {
        &self.coupon_payment_frequency
    }
    pub fn clear_coupon_payment_frequency(&mut self) {
        self.coupon_payment_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_coupon_payment_frequency(&mut self, v: ::std::string::String) {
        self.coupon_payment_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coupon_payment_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.coupon_payment_frequency
    }

    // Take field
    pub fn take_coupon_payment_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coupon_payment_frequency, ::std::string::String::new())
    }

    // string benchmark = 22;


    pub fn get_benchmark(&self) -> &str {
        &self.benchmark
    }
    pub fn clear_benchmark(&mut self) {
        self.benchmark.clear();
    }

    // Param is passed by value, moved
    pub fn set_benchmark(&mut self, v: ::std::string::String) {
        self.benchmark = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_benchmark(&mut self) -> &mut ::std::string::String {
        &mut self.benchmark
    }

    // Take field
    pub fn take_benchmark(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.benchmark, ::std::string::String::new())
    }

    // string spread = 23;


    pub fn get_spread(&self) -> &str {
        &self.spread
    }
    pub fn clear_spread(&mut self) {
        self.spread.clear();
    }

    // Param is passed by value, moved
    pub fn set_spread(&mut self, v: ::std::string::String) {
        self.spread = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spread(&mut self) -> &mut ::std::string::String {
        &mut self.spread
    }

    // Take field
    pub fn take_spread(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.spread, ::std::string::String::new())
    }

    // string isin_code = 24;


    pub fn get_isin_code(&self) -> &str {
        &self.isin_code
    }
    pub fn clear_isin_code(&mut self) {
        self.isin_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_isin_code(&mut self, v: ::std::string::String) {
        self.isin_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_isin_code(&mut self) -> &mut ::std::string::String {
        &mut self.isin_code
    }

    // Take field
    pub fn take_isin_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.isin_code, ::std::string::String::new())
    }

    // string mduration = 25;


    pub fn get_mduration(&self) -> &str {
        &self.mduration
    }
    pub fn clear_mduration(&mut self) {
        self.mduration.clear();
    }

    // Param is passed by value, moved
    pub fn set_mduration(&mut self, v: ::std::string::String) {
        self.mduration = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mduration(&mut self) -> &mut ::std::string::String {
        &mut self.mduration
    }

    // Take field
    pub fn take_mduration(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mduration, ::std::string::String::new())
    }

    // string treasury_gl_code = 26;


    pub fn get_treasury_gl_code(&self) -> &str {
        &self.treasury_gl_code
    }
    pub fn clear_treasury_gl_code(&mut self) {
        self.treasury_gl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_treasury_gl_code(&mut self, v: ::std::string::String) {
        self.treasury_gl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_treasury_gl_code(&mut self) -> &mut ::std::string::String {
        &mut self.treasury_gl_code
    }

    // Take field
    pub fn take_treasury_gl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.treasury_gl_code, ::std::string::String::new())
    }

    // double accrued_interest = 27;


    pub fn get_accrued_interest(&self) -> f64 {
        self.accrued_interest
    }
    pub fn clear_accrued_interest(&mut self) {
        self.accrued_interest = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accrued_interest(&mut self, v: f64) {
        self.accrued_interest = v;
    }

    // string accrued_gl = 28;


    pub fn get_accrued_gl(&self) -> &str {
        &self.accrued_gl
    }
    pub fn clear_accrued_gl(&mut self) {
        self.accrued_gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_accrued_gl(&mut self, v: ::std::string::String) {
        self.accrued_gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accrued_gl(&mut self) -> &mut ::std::string::String {
        &mut self.accrued_gl
    }

    // Take field
    pub fn take_accrued_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.accrued_gl, ::std::string::String::new())
    }

    // int64 deal_date = 29;


    pub fn get_deal_date(&self) -> i64 {
        self.deal_date
    }
    pub fn clear_deal_date(&mut self) {
        self.deal_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_deal_date(&mut self, v: i64) {
        self.deal_date = v;
    }

    // int64 value_date = 30;


    pub fn get_value_date(&self) -> i64 {
        self.value_date
    }
    pub fn clear_value_date(&mut self) {
        self.value_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_date(&mut self, v: i64) {
        self.value_date = v;
    }

    // double avg_mon_balance = 31;


    pub fn get_avg_mon_balance(&self) -> f64 {
        self.avg_mon_balance
    }
    pub fn clear_avg_mon_balance(&mut self) {
        self.avg_mon_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_avg_mon_balance(&mut self, v: f64) {
        self.avg_mon_balance = v;
    }

    // string cdr_flg = 32;


    pub fn get_cdr_flg(&self) -> &str {
        &self.cdr_flg
    }
    pub fn clear_cdr_flg(&mut self) {
        self.cdr_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_cdr_flg(&mut self, v: ::std::string::String) {
        self.cdr_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cdr_flg(&mut self) -> &mut ::std::string::String {
        &mut self.cdr_flg
    }

    // Take field
    pub fn take_cdr_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cdr_flg, ::std::string::String::new())
    }

    // string cf_type = 33;


    pub fn get_cf_type(&self) -> &str {
        &self.cf_type
    }
    pub fn clear_cf_type(&mut self) {
        self.cf_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_cf_type(&mut self, v: ::std::string::String) {
        self.cf_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf_type(&mut self) -> &mut ::std::string::String {
        &mut self.cf_type
    }

    // Take field
    pub fn take_cf_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cf_type, ::std::string::String::new())
    }

    // string cf_sub_type = 34;


    pub fn get_cf_sub_type(&self) -> &str {
        &self.cf_sub_type
    }
    pub fn clear_cf_sub_type(&mut self) {
        self.cf_sub_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_cf_sub_type(&mut self, v: ::std::string::String) {
        self.cf_sub_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf_sub_type(&mut self) -> &mut ::std::string::String {
        &mut self.cf_sub_type
    }

    // Take field
    pub fn take_cf_sub_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cf_sub_type, ::std::string::String::new())
    }

    // double cf_amount = 35;


    pub fn get_cf_amount(&self) -> f64 {
        self.cf_amount
    }
    pub fn clear_cf_amount(&mut self) {
        self.cf_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cf_amount(&mut self, v: f64) {
        self.cf_amount = v;
    }

    // int64 cf_date = 36;


    pub fn get_cf_date(&self) -> i64 {
        self.cf_date
    }
    pub fn clear_cf_date(&mut self) {
        self.cf_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_cf_date(&mut self, v: i64) {
        self.cf_date = v;
    }

    // string cf_currency = 37;


    pub fn get_cf_currency(&self) -> &str {
        &self.cf_currency
    }
    pub fn clear_cf_currency(&mut self) {
        self.cf_currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_cf_currency(&mut self, v: ::std::string::String) {
        self.cf_currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf_currency(&mut self) -> &mut ::std::string::String {
        &mut self.cf_currency
    }

    // Take field
    pub fn take_cf_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cf_currency, ::std::string::String::new())
    }

    // double outstanding_diff_amount = 38;


    pub fn get_outstanding_diff_amount(&self) -> f64 {
        self.outstanding_diff_amount
    }
    pub fn clear_outstanding_diff_amount(&mut self) {
        self.outstanding_diff_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_outstanding_diff_amount(&mut self, v: f64) {
        self.outstanding_diff_amount = v;
    }

    // string group = 39;


    pub fn get_group(&self) -> &str {
        &self.group
    }
    pub fn clear_group(&mut self) {
        self.group.clear();
    }

    // Param is passed by value, moved
    pub fn set_group(&mut self, v: ::std::string::String) {
        self.group = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group(&mut self) -> &mut ::std::string::String {
        &mut self.group
    }

    // Take field
    pub fn take_group(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group, ::std::string::String::new())
    }

    // string llg = 40;


    pub fn get_llg(&self) -> &str {
        &self.llg
    }
    pub fn clear_llg(&mut self) {
        self.llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_llg(&mut self, v: ::std::string::String) {
        self.llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_llg(&mut self) -> &mut ::std::string::String {
        &mut self.llg
    }

    // Take field
    pub fn take_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.llg, ::std::string::String::new())
    }

    // string other_llg_classification = 41;


    pub fn get_other_llg_classification(&self) -> &str {
        &self.other_llg_classification
    }
    pub fn clear_other_llg_classification(&mut self) {
        self.other_llg_classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_other_llg_classification(&mut self, v: ::std::string::String) {
        self.other_llg_classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_other_llg_classification(&mut self) -> &mut ::std::string::String {
        &mut self.other_llg_classification
    }

    // Take field
    pub fn take_other_llg_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.other_llg_classification, ::std::string::String::new())
    }

    // repeated .Cashflow cashflows = 42;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on_date = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_number)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instrument_type)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.branch = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.outstanding_amount = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instrument_classification)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.counter_party_id = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counter_party_name)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counter_party_type)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.borrowing_date = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.borrowing_maturity_date = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_rate = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interest_rate_classification)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.frequency = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.basis = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_repricing_date = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_repricing_date = tmp;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.repricing_frequency)?;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.coupon_payment_start_date = tmp;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coupon_payment_frequency)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.benchmark)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.spread)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.isin_code)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mduration)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.treasury_gl_code)?;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.accrued_interest = tmp;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.accrued_gl)?;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deal_date = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.value_date = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.avg_mon_balance = tmp;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cdr_flg)?;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cf_type)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cf_sub_type)?;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.cf_amount = tmp;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cf_date = tmp;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cf_currency)?;
                },
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.outstanding_diff_amount = tmp;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.llg)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.other_llg_classification)?;
                },
                42 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.as_on_date != 0 {
            my_size += ::protobuf::rt::value_size(1, self.as_on_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.deal_number.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.deal_number);
        }
        if !self.instrument_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.instrument_type);
        }
        if self.branch != 0 {
            my_size += ::protobuf::rt::value_size(4, self.branch, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.outstanding_amount != 0. {
            my_size += 9;
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.currency);
        }
        if !self.instrument_classification.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.instrument_classification);
        }
        if self.counter_party_id != 0 {
            my_size += ::protobuf::rt::value_size(8, self.counter_party_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.counter_party_name.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.counter_party_name);
        }
        if !self.counter_party_type.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.counter_party_type);
        }
        if self.borrowing_date != 0 {
            my_size += ::protobuf::rt::value_size(11, self.borrowing_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.borrowing_maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(12, self.borrowing_maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.interest_rate != 0. {
            my_size += 9;
        }
        if !self.interest_rate_classification.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.interest_rate_classification);
        }
        if self.frequency != 0. {
            my_size += 9;
        }
        if self.basis != 0. {
            my_size += 10;
        }
        if self.next_repricing_date != 0 {
            my_size += ::protobuf::rt::value_size(17, self.next_repricing_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_repricing_date != 0 {
            my_size += ::protobuf::rt::value_size(18, self.last_repricing_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.repricing_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.repricing_frequency);
        }
        if self.coupon_payment_start_date != 0 {
            my_size += ::protobuf::rt::value_size(20, self.coupon_payment_start_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.coupon_payment_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.coupon_payment_frequency);
        }
        if !self.benchmark.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.benchmark);
        }
        if !self.spread.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.spread);
        }
        if !self.isin_code.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.isin_code);
        }
        if !self.mduration.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.mduration);
        }
        if !self.treasury_gl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.treasury_gl_code);
        }
        if self.accrued_interest != 0. {
            my_size += 10;
        }
        if !self.accrued_gl.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.accrued_gl);
        }
        if self.deal_date != 0 {
            my_size += ::protobuf::rt::value_size(29, self.deal_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.value_date != 0 {
            my_size += ::protobuf::rt::value_size(30, self.value_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.avg_mon_balance != 0. {
            my_size += 10;
        }
        if !self.cdr_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.cdr_flg);
        }
        if !self.cf_type.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.cf_type);
        }
        if !self.cf_sub_type.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.cf_sub_type);
        }
        if self.cf_amount != 0. {
            my_size += 10;
        }
        if self.cf_date != 0 {
            my_size += ::protobuf::rt::value_size(36, self.cf_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.cf_currency.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.cf_currency);
        }
        if self.outstanding_diff_amount != 0. {
            my_size += 10;
        }
        if !self.group.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.group);
        }
        if !self.llg.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.llg);
        }
        if !self.other_llg_classification.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.other_llg_classification);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.as_on_date != 0 {
            os.write_int64(1, self.as_on_date)?;
        }
        if !self.deal_number.is_empty() {
            os.write_string(2, &self.deal_number)?;
        }
        if !self.instrument_type.is_empty() {
            os.write_string(3, &self.instrument_type)?;
        }
        if self.branch != 0 {
            os.write_int64(4, self.branch)?;
        }
        if self.outstanding_amount != 0. {
            os.write_double(5, self.outstanding_amount)?;
        }
        if !self.currency.is_empty() {
            os.write_string(6, &self.currency)?;
        }
        if !self.instrument_classification.is_empty() {
            os.write_string(7, &self.instrument_classification)?;
        }
        if self.counter_party_id != 0 {
            os.write_int64(8, self.counter_party_id)?;
        }
        if !self.counter_party_name.is_empty() {
            os.write_string(9, &self.counter_party_name)?;
        }
        if !self.counter_party_type.is_empty() {
            os.write_string(10, &self.counter_party_type)?;
        }
        if self.borrowing_date != 0 {
            os.write_int64(11, self.borrowing_date)?;
        }
        if self.borrowing_maturity_date != 0 {
            os.write_int64(12, self.borrowing_maturity_date)?;
        }
        if self.interest_rate != 0. {
            os.write_double(13, self.interest_rate)?;
        }
        if !self.interest_rate_classification.is_empty() {
            os.write_string(14, &self.interest_rate_classification)?;
        }
        if self.frequency != 0. {
            os.write_double(15, self.frequency)?;
        }
        if self.basis != 0. {
            os.write_double(16, self.basis)?;
        }
        if self.next_repricing_date != 0 {
            os.write_int64(17, self.next_repricing_date)?;
        }
        if self.last_repricing_date != 0 {
            os.write_int64(18, self.last_repricing_date)?;
        }
        if !self.repricing_frequency.is_empty() {
            os.write_string(19, &self.repricing_frequency)?;
        }
        if self.coupon_payment_start_date != 0 {
            os.write_int64(20, self.coupon_payment_start_date)?;
        }
        if !self.coupon_payment_frequency.is_empty() {
            os.write_string(21, &self.coupon_payment_frequency)?;
        }
        if !self.benchmark.is_empty() {
            os.write_string(22, &self.benchmark)?;
        }
        if !self.spread.is_empty() {
            os.write_string(23, &self.spread)?;
        }
        if !self.isin_code.is_empty() {
            os.write_string(24, &self.isin_code)?;
        }
        if !self.mduration.is_empty() {
            os.write_string(25, &self.mduration)?;
        }
        if !self.treasury_gl_code.is_empty() {
            os.write_string(26, &self.treasury_gl_code)?;
        }
        if self.accrued_interest != 0. {
            os.write_double(27, self.accrued_interest)?;
        }
        if !self.accrued_gl.is_empty() {
            os.write_string(28, &self.accrued_gl)?;
        }
        if self.deal_date != 0 {
            os.write_int64(29, self.deal_date)?;
        }
        if self.value_date != 0 {
            os.write_int64(30, self.value_date)?;
        }
        if self.avg_mon_balance != 0. {
            os.write_double(31, self.avg_mon_balance)?;
        }
        if !self.cdr_flg.is_empty() {
            os.write_string(32, &self.cdr_flg)?;
        }
        if !self.cf_type.is_empty() {
            os.write_string(33, &self.cf_type)?;
        }
        if !self.cf_sub_type.is_empty() {
            os.write_string(34, &self.cf_sub_type)?;
        }
        if self.cf_amount != 0. {
            os.write_double(35, self.cf_amount)?;
        }
        if self.cf_date != 0 {
            os.write_int64(36, self.cf_date)?;
        }
        if !self.cf_currency.is_empty() {
            os.write_string(37, &self.cf_currency)?;
        }
        if self.outstanding_diff_amount != 0. {
            os.write_double(38, self.outstanding_diff_amount)?;
        }
        if !self.group.is_empty() {
            os.write_string(39, &self.group)?;
        }
        if !self.llg.is_empty() {
            os.write_string(40, &self.llg)?;
        }
        if !self.other_llg_classification.is_empty() {
            os.write_string(41, &self.other_llg_classification)?;
        }
        for v in &self.cashflows {
            os.write_tag(42, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "as_on_date",
                |m: &AccountWithCashflows| { &m.as_on_date },
                |m: &mut AccountWithCashflows| { &mut m.as_on_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "deal_number",
                |m: &AccountWithCashflows| { &m.deal_number },
                |m: &mut AccountWithCashflows| { &mut m.deal_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instrument_type",
                |m: &AccountWithCashflows| { &m.instrument_type },
                |m: &mut AccountWithCashflows| { &mut m.instrument_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "branch",
                |m: &AccountWithCashflows| { &m.branch },
                |m: &mut AccountWithCashflows| { &mut m.branch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "outstanding_amount",
                |m: &AccountWithCashflows| { &m.outstanding_amount },
                |m: &mut AccountWithCashflows| { &mut m.outstanding_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &AccountWithCashflows| { &m.currency },
                |m: &mut AccountWithCashflows| { &mut m.currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instrument_classification",
                |m: &AccountWithCashflows| { &m.instrument_classification },
                |m: &mut AccountWithCashflows| { &mut m.instrument_classification },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "counter_party_id",
                |m: &AccountWithCashflows| { &m.counter_party_id },
                |m: &mut AccountWithCashflows| { &mut m.counter_party_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "counter_party_name",
                |m: &AccountWithCashflows| { &m.counter_party_name },
                |m: &mut AccountWithCashflows| { &mut m.counter_party_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "counter_party_type",
                |m: &AccountWithCashflows| { &m.counter_party_type },
                |m: &mut AccountWithCashflows| { &mut m.counter_party_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "borrowing_date",
                |m: &AccountWithCashflows| { &m.borrowing_date },
                |m: &mut AccountWithCashflows| { &mut m.borrowing_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "borrowing_maturity_date",
                |m: &AccountWithCashflows| { &m.borrowing_maturity_date },
                |m: &mut AccountWithCashflows| { &mut m.borrowing_maturity_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_rate",
                |m: &AccountWithCashflows| { &m.interest_rate },
                |m: &mut AccountWithCashflows| { &mut m.interest_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "interest_rate_classification",
                |m: &AccountWithCashflows| { &m.interest_rate_classification },
                |m: &mut AccountWithCashflows| { &mut m.interest_rate_classification },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "frequency",
                |m: &AccountWithCashflows| { &m.frequency },
                |m: &mut AccountWithCashflows| { &mut m.frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "basis",
                |m: &AccountWithCashflows| { &m.basis },
                |m: &mut AccountWithCashflows| { &mut m.basis },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_repricing_date",
                |m: &AccountWithCashflows| { &m.next_repricing_date },
                |m: &mut AccountWithCashflows| { &mut m.next_repricing_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_repricing_date",
                |m: &AccountWithCashflows| { &m.last_repricing_date },
                |m: &mut AccountWithCashflows| { &mut m.last_repricing_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "repricing_frequency",
                |m: &AccountWithCashflows| { &m.repricing_frequency },
                |m: &mut AccountWithCashflows| { &mut m.repricing_frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "coupon_payment_start_date",
                |m: &AccountWithCashflows| { &m.coupon_payment_start_date },
                |m: &mut AccountWithCashflows| { &mut m.coupon_payment_start_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "coupon_payment_frequency",
                |m: &AccountWithCashflows| { &m.coupon_payment_frequency },
                |m: &mut AccountWithCashflows| { &mut m.coupon_payment_frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "benchmark",
                |m: &AccountWithCashflows| { &m.benchmark },
                |m: &mut AccountWithCashflows| { &mut m.benchmark },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "spread",
                |m: &AccountWithCashflows| { &m.spread },
                |m: &mut AccountWithCashflows| { &mut m.spread },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "isin_code",
                |m: &AccountWithCashflows| { &m.isin_code },
                |m: &mut AccountWithCashflows| { &mut m.isin_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mduration",
                |m: &AccountWithCashflows| { &m.mduration },
                |m: &mut AccountWithCashflows| { &mut m.mduration },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "treasury_gl_code",
                |m: &AccountWithCashflows| { &m.treasury_gl_code },
                |m: &mut AccountWithCashflows| { &mut m.treasury_gl_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "accrued_interest",
                |m: &AccountWithCashflows| { &m.accrued_interest },
                |m: &mut AccountWithCashflows| { &mut m.accrued_interest },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "accrued_gl",
                |m: &AccountWithCashflows| { &m.accrued_gl },
                |m: &mut AccountWithCashflows| { &mut m.accrued_gl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "deal_date",
                |m: &AccountWithCashflows| { &m.deal_date },
                |m: &mut AccountWithCashflows| { &mut m.deal_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "value_date",
                |m: &AccountWithCashflows| { &m.value_date },
                |m: &mut AccountWithCashflows| { &mut m.value_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "avg_mon_balance",
                |m: &AccountWithCashflows| { &m.avg_mon_balance },
                |m: &mut AccountWithCashflows| { &mut m.avg_mon_balance },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cdr_flg",
                |m: &AccountWithCashflows| { &m.cdr_flg },
                |m: &mut AccountWithCashflows| { &mut m.cdr_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cf_type",
                |m: &AccountWithCashflows| { &m.cf_type },
                |m: &mut AccountWithCashflows| { &mut m.cf_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cf_sub_type",
                |m: &AccountWithCashflows| { &m.cf_sub_type },
                |m: &mut AccountWithCashflows| { &mut m.cf_sub_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "cf_amount",
                |m: &AccountWithCashflows| { &m.cf_amount },
                |m: &mut AccountWithCashflows| { &mut m.cf_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cf_date",
                |m: &AccountWithCashflows| { &m.cf_date },
                |m: &mut AccountWithCashflows| { &mut m.cf_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cf_currency",
                |m: &AccountWithCashflows| { &m.cf_currency },
                |m: &mut AccountWithCashflows| { &mut m.cf_currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "outstanding_diff_amount",
                |m: &AccountWithCashflows| { &m.outstanding_diff_amount },
                |m: &mut AccountWithCashflows| { &mut m.outstanding_diff_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group",
                |m: &AccountWithCashflows| { &m.group },
                |m: &mut AccountWithCashflows| { &mut m.group },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "llg",
                |m: &AccountWithCashflows| { &m.llg },
                |m: &mut AccountWithCashflows| { &mut m.llg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "other_llg_classification",
                |m: &AccountWithCashflows| { &m.other_llg_classification },
                |m: &mut AccountWithCashflows| { &mut m.other_llg_classification },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.as_on_date = 0;
        self.deal_number.clear();
        self.instrument_type.clear();
        self.branch = 0;
        self.outstanding_amount = 0.;
        self.currency.clear();
        self.instrument_classification.clear();
        self.counter_party_id = 0;
        self.counter_party_name.clear();
        self.counter_party_type.clear();
        self.borrowing_date = 0;
        self.borrowing_maturity_date = 0;
        self.interest_rate = 0.;
        self.interest_rate_classification.clear();
        self.frequency = 0.;
        self.basis = 0.;
        self.next_repricing_date = 0;
        self.last_repricing_date = 0;
        self.repricing_frequency.clear();
        self.coupon_payment_start_date = 0;
        self.coupon_payment_frequency.clear();
        self.benchmark.clear();
        self.spread.clear();
        self.isin_code.clear();
        self.mduration.clear();
        self.treasury_gl_code.clear();
        self.accrued_interest = 0.;
        self.accrued_gl.clear();
        self.deal_date = 0;
        self.value_date = 0;
        self.avg_mon_balance = 0.;
        self.cdr_flg.clear();
        self.cf_type.clear();
        self.cf_sub_type.clear();
        self.cf_amount = 0.;
        self.cf_date = 0;
        self.cf_currency.clear();
        self.outstanding_diff_amount = 0.;
        self.group.clear();
        self.llg.clear();
        self.other_llg_classification.clear();
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12cf_borrwings.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\
    \x20\x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07\
    prinAmt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xd9\x0c\n\x14A\
    ccountWithCashflows\x12\x1c\n\nas_on_date\x18\x01\x20\x01(\x03R\x08asOnD\
    ate\x12\x1f\n\x0bdeal_number\x18\x02\x20\x01(\tR\ndealNumber\x12'\n\x0fi\
    nstrument_type\x18\x03\x20\x01(\tR\x0einstrumentType\x12\x16\n\x06branch\
    \x18\x04\x20\x01(\x03R\x06branch\x12-\n\x12outstanding_amount\x18\x05\
    \x20\x01(\x01R\x11outstandingAmount\x12\x1a\n\x08currency\x18\x06\x20\
    \x01(\tR\x08currency\x12;\n\x19instrument_classification\x18\x07\x20\x01\
    (\tR\x18instrumentClassification\x12(\n\x10counter_party_id\x18\x08\x20\
    \x01(\x03R\x0ecounterPartyId\x12,\n\x12counter_party_name\x18\t\x20\x01(\
    \tR\x10counterPartyName\x12,\n\x12counter_party_type\x18\n\x20\x01(\tR\
    \x10counterPartyType\x12%\n\x0eborrowing_date\x18\x0b\x20\x01(\x03R\rbor\
    rowingDate\x126\n\x17borrowing_maturity_date\x18\x0c\x20\x01(\x03R\x15bo\
    rrowingMaturityDate\x12#\n\rinterest_rate\x18\r\x20\x01(\x01R\x0cinteres\
    tRate\x12@\n\x1cinterest_rate_classification\x18\x0e\x20\x01(\tR\x1ainte\
    restRateClassification\x12\x1c\n\tfrequency\x18\x0f\x20\x01(\x01R\tfrequ\
    ency\x12\x14\n\x05basis\x18\x10\x20\x01(\x01R\x05basis\x12.\n\x13next_re\
    pricing_date\x18\x11\x20\x01(\x03R\x11nextRepricingDate\x12.\n\x13last_r\
    epricing_date\x18\x12\x20\x01(\x03R\x11lastRepricingDate\x12/\n\x13repri\
    cing_frequency\x18\x13\x20\x01(\tR\x12repricingFrequency\x129\n\x19coupo\
    n_payment_start_date\x18\x14\x20\x01(\x03R\x16couponPaymentStartDate\x12\
    8\n\x18coupon_payment_frequency\x18\x15\x20\x01(\tR\x16couponPaymentFreq\
    uency\x12\x1c\n\tbenchmark\x18\x16\x20\x01(\tR\tbenchmark\x12\x16\n\x06s\
    pread\x18\x17\x20\x01(\tR\x06spread\x12\x1b\n\tisin_code\x18\x18\x20\x01\
    (\tR\x08isinCode\x12\x1c\n\tmduration\x18\x19\x20\x01(\tR\tmduration\x12\
    (\n\x10treasury_gl_code\x18\x1a\x20\x01(\tR\x0etreasuryGlCode\x12)\n\x10\
    accrued_interest\x18\x1b\x20\x01(\x01R\x0faccruedInterest\x12\x1d\n\nacc\
    rued_gl\x18\x1c\x20\x01(\tR\taccruedGl\x12\x1b\n\tdeal_date\x18\x1d\x20\
    \x01(\x03R\x08dealDate\x12\x1d\n\nvalue_date\x18\x1e\x20\x01(\x03R\tvalu\
    eDate\x12&\n\x0favg_mon_balance\x18\x1f\x20\x01(\x01R\ravgMonBalance\x12\
    \x17\n\x07cdr_flg\x18\x20\x20\x01(\tR\x06cdrFlg\x12\x17\n\x07cf_type\x18\
    !\x20\x01(\tR\x06cfType\x12\x1e\n\x0bcf_sub_type\x18\"\x20\x01(\tR\tcfSu\
    bType\x12\x1b\n\tcf_amount\x18#\x20\x01(\x01R\x08cfAmount\x12\x17\n\x07c\
    f_date\x18$\x20\x01(\x03R\x06cfDate\x12\x1f\n\x0bcf_currency\x18%\x20\
    \x01(\tR\ncfCurrency\x126\n\x17outstanding_diff_amount\x18&\x20\x01(\x01\
    R\x15outstandingDiffAmount\x12\x14\n\x05group\x18'\x20\x01(\tR\x05group\
    \x12\x10\n\x03llg\x18(\x20\x01(\tR\x03llg\x128\n\x18other_llg_classifica\
    tion\x18)\x20\x01(\tR\x16otherLlgClassification\x12'\n\tcashflows\x18*\
    \x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
