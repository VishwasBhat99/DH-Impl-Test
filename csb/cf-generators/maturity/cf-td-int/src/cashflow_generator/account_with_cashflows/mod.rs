// This file is generated by rust-protobuf 2.11.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `csb_td_int.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_11_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub acc_no: ::std::string::String,
    pub br_cd: i64,
    pub cust_id: i64,
    pub ucic_id: i64,
    pub ccy: ::std::string::String,
    pub prod_cd: i64,
    pub gl_cd: i64,
    pub gl_comp_portion: ::std::string::String,
    pub acc_open_dt: i64,
    pub effc_dt: i64,
    pub bal_os: f64,
    pub bal_os_cly: f64,
    pub int_comp_type: ::std::string::String,
    pub compo_int_amt: f64,
    pub int_rt: f64,
    pub mat_dt: i64,
    pub dep_amt: f64,
    pub dep_amt_lcy: f64,
    pub int_amt: f64,
    pub int_acc_amt: f64,
    pub non_with_flag: ::std::string::String,
    pub notice_day: ::std::string::String,
    pub cust_const_code: i64,
    pub cntrct_num: i64,
    pub as_on: i64,
    pub comp_freq: ::std::string::String,
    pub pay_freq: ::std::string::String,
    pub over_dt: i64,
    pub lst_int_acr_dt: i64,
    pub int_pay_amt: f64,
    pub is_overdue: ::std::string::String,
    pub max_date: i64,
    pub resid_days: i64,
    pub over_int_rt: f64,
    pub tot_int_amt: f64,
    pub tot_prin_amt: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string acc_no = 1;


    pub fn get_acc_no(&self) -> &str {
        &self.acc_no
    }
    pub fn clear_acc_no(&mut self) {
        self.acc_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_no(&mut self, v: ::std::string::String) {
        self.acc_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_no(&mut self) -> &mut ::std::string::String {
        &mut self.acc_no
    }

    // Take field
    pub fn take_acc_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_no, ::std::string::String::new())
    }

    // int64 br_cd = 2;


    pub fn get_br_cd(&self) -> i64 {
        self.br_cd
    }
    pub fn clear_br_cd(&mut self) {
        self.br_cd = 0;
    }

    // Param is passed by value, moved
    pub fn set_br_cd(&mut self, v: i64) {
        self.br_cd = v;
    }

    // int64 cust_id = 3;


    pub fn get_cust_id(&self) -> i64 {
        self.cust_id
    }
    pub fn clear_cust_id(&mut self) {
        self.cust_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: i64) {
        self.cust_id = v;
    }

    // int64 ucic_id = 4;


    pub fn get_ucic_id(&self) -> i64 {
        self.ucic_id
    }
    pub fn clear_ucic_id(&mut self) {
        self.ucic_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_ucic_id(&mut self, v: i64) {
        self.ucic_id = v;
    }

    // string ccy = 5;


    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }
    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    // int64 prod_cd = 6;


    pub fn get_prod_cd(&self) -> i64 {
        self.prod_cd
    }
    pub fn clear_prod_cd(&mut self) {
        self.prod_cd = 0;
    }

    // Param is passed by value, moved
    pub fn set_prod_cd(&mut self, v: i64) {
        self.prod_cd = v;
    }

    // int64 gl_cd = 7;


    pub fn get_gl_cd(&self) -> i64 {
        self.gl_cd
    }
    pub fn clear_gl_cd(&mut self) {
        self.gl_cd = 0;
    }

    // Param is passed by value, moved
    pub fn set_gl_cd(&mut self, v: i64) {
        self.gl_cd = v;
    }

    // string gl_comp_portion = 8;


    pub fn get_gl_comp_portion(&self) -> &str {
        &self.gl_comp_portion
    }
    pub fn clear_gl_comp_portion(&mut self) {
        self.gl_comp_portion.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_comp_portion(&mut self, v: ::std::string::String) {
        self.gl_comp_portion = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_comp_portion(&mut self) -> &mut ::std::string::String {
        &mut self.gl_comp_portion
    }

    // Take field
    pub fn take_gl_comp_portion(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_comp_portion, ::std::string::String::new())
    }

    // int64 acc_open_dt = 9;


    pub fn get_acc_open_dt(&self) -> i64 {
        self.acc_open_dt
    }
    pub fn clear_acc_open_dt(&mut self) {
        self.acc_open_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_acc_open_dt(&mut self, v: i64) {
        self.acc_open_dt = v;
    }

    // int64 effc_dt = 10;


    pub fn get_effc_dt(&self) -> i64 {
        self.effc_dt
    }
    pub fn clear_effc_dt(&mut self) {
        self.effc_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_effc_dt(&mut self, v: i64) {
        self.effc_dt = v;
    }

    // double bal_os = 11;


    pub fn get_bal_os(&self) -> f64 {
        self.bal_os
    }
    pub fn clear_bal_os(&mut self) {
        self.bal_os = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bal_os(&mut self, v: f64) {
        self.bal_os = v;
    }

    // double bal_os_cly = 12;


    pub fn get_bal_os_cly(&self) -> f64 {
        self.bal_os_cly
    }
    pub fn clear_bal_os_cly(&mut self) {
        self.bal_os_cly = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bal_os_cly(&mut self, v: f64) {
        self.bal_os_cly = v;
    }

    // string int_comp_type = 13;


    pub fn get_int_comp_type(&self) -> &str {
        &self.int_comp_type
    }
    pub fn clear_int_comp_type(&mut self) {
        self.int_comp_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_comp_type(&mut self, v: ::std::string::String) {
        self.int_comp_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_comp_type(&mut self) -> &mut ::std::string::String {
        &mut self.int_comp_type
    }

    // Take field
    pub fn take_int_comp_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_comp_type, ::std::string::String::new())
    }

    // double compo_int_amt = 14;


    pub fn get_compo_int_amt(&self) -> f64 {
        self.compo_int_amt
    }
    pub fn clear_compo_int_amt(&mut self) {
        self.compo_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_compo_int_amt(&mut self, v: f64) {
        self.compo_int_amt = v;
    }

    // double int_rt = 15;


    pub fn get_int_rt(&self) -> f64 {
        self.int_rt
    }
    pub fn clear_int_rt(&mut self) {
        self.int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rt(&mut self, v: f64) {
        self.int_rt = v;
    }

    // int64 mat_dt = 16;


    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }
    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    // double dep_amt = 17;


    pub fn get_dep_amt(&self) -> f64 {
        self.dep_amt
    }
    pub fn clear_dep_amt(&mut self) {
        self.dep_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dep_amt(&mut self, v: f64) {
        self.dep_amt = v;
    }

    // double dep_amt_lcy = 18;


    pub fn get_dep_amt_lcy(&self) -> f64 {
        self.dep_amt_lcy
    }
    pub fn clear_dep_amt_lcy(&mut self) {
        self.dep_amt_lcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dep_amt_lcy(&mut self, v: f64) {
        self.dep_amt_lcy = v;
    }

    // double int_amt = 19;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double int_acc_amt = 20;


    pub fn get_int_acc_amt(&self) -> f64 {
        self.int_acc_amt
    }
    pub fn clear_int_acc_amt(&mut self) {
        self.int_acc_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_acc_amt(&mut self, v: f64) {
        self.int_acc_amt = v;
    }

    // string non_with_flag = 21;


    pub fn get_non_with_flag(&self) -> &str {
        &self.non_with_flag
    }
    pub fn clear_non_with_flag(&mut self) {
        self.non_with_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_non_with_flag(&mut self, v: ::std::string::String) {
        self.non_with_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_non_with_flag(&mut self) -> &mut ::std::string::String {
        &mut self.non_with_flag
    }

    // Take field
    pub fn take_non_with_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.non_with_flag, ::std::string::String::new())
    }

    // string notice_day = 22;


    pub fn get_notice_day(&self) -> &str {
        &self.notice_day
    }
    pub fn clear_notice_day(&mut self) {
        self.notice_day.clear();
    }

    // Param is passed by value, moved
    pub fn set_notice_day(&mut self, v: ::std::string::String) {
        self.notice_day = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_notice_day(&mut self) -> &mut ::std::string::String {
        &mut self.notice_day
    }

    // Take field
    pub fn take_notice_day(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.notice_day, ::std::string::String::new())
    }

    // int64 cust_const_code = 23;


    pub fn get_cust_const_code(&self) -> i64 {
        self.cust_const_code
    }
    pub fn clear_cust_const_code(&mut self) {
        self.cust_const_code = 0;
    }

    // Param is passed by value, moved
    pub fn set_cust_const_code(&mut self, v: i64) {
        self.cust_const_code = v;
    }

    // int64 cntrct_num = 24;


    pub fn get_cntrct_num(&self) -> i64 {
        self.cntrct_num
    }
    pub fn clear_cntrct_num(&mut self) {
        self.cntrct_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_cntrct_num(&mut self, v: i64) {
        self.cntrct_num = v;
    }

    // int64 as_on = 25;


    pub fn get_as_on(&self) -> i64 {
        self.as_on
    }
    pub fn clear_as_on(&mut self) {
        self.as_on = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on(&mut self, v: i64) {
        self.as_on = v;
    }

    // string comp_freq = 26;


    pub fn get_comp_freq(&self) -> &str {
        &self.comp_freq
    }
    pub fn clear_comp_freq(&mut self) {
        self.comp_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_comp_freq(&mut self, v: ::std::string::String) {
        self.comp_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_comp_freq(&mut self) -> &mut ::std::string::String {
        &mut self.comp_freq
    }

    // Take field
    pub fn take_comp_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.comp_freq, ::std::string::String::new())
    }

    // string pay_freq = 27;


    pub fn get_pay_freq(&self) -> &str {
        &self.pay_freq
    }
    pub fn clear_pay_freq(&mut self) {
        self.pay_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_pay_freq(&mut self, v: ::std::string::String) {
        self.pay_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pay_freq(&mut self) -> &mut ::std::string::String {
        &mut self.pay_freq
    }

    // Take field
    pub fn take_pay_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pay_freq, ::std::string::String::new())
    }

    // int64 over_dt = 28;


    pub fn get_over_dt(&self) -> i64 {
        self.over_dt
    }
    pub fn clear_over_dt(&mut self) {
        self.over_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_over_dt(&mut self, v: i64) {
        self.over_dt = v;
    }

    // int64 lst_int_acr_dt = 29;


    pub fn get_lst_int_acr_dt(&self) -> i64 {
        self.lst_int_acr_dt
    }
    pub fn clear_lst_int_acr_dt(&mut self) {
        self.lst_int_acr_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_lst_int_acr_dt(&mut self, v: i64) {
        self.lst_int_acr_dt = v;
    }

    // double int_pay_amt = 30;


    pub fn get_int_pay_amt(&self) -> f64 {
        self.int_pay_amt
    }
    pub fn clear_int_pay_amt(&mut self) {
        self.int_pay_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_pay_amt(&mut self, v: f64) {
        self.int_pay_amt = v;
    }

    // string is_overdue = 31;


    pub fn get_is_overdue(&self) -> &str {
        &self.is_overdue
    }
    pub fn clear_is_overdue(&mut self) {
        self.is_overdue.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_overdue(&mut self, v: ::std::string::String) {
        self.is_overdue = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_overdue(&mut self) -> &mut ::std::string::String {
        &mut self.is_overdue
    }

    // Take field
    pub fn take_is_overdue(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_overdue, ::std::string::String::new())
    }

    // int64 max_date = 32;


    pub fn get_max_date(&self) -> i64 {
        self.max_date
    }
    pub fn clear_max_date(&mut self) {
        self.max_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_date(&mut self, v: i64) {
        self.max_date = v;
    }

    // int64 resid_days = 33;


    pub fn get_resid_days(&self) -> i64 {
        self.resid_days
    }
    pub fn clear_resid_days(&mut self) {
        self.resid_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_resid_days(&mut self, v: i64) {
        self.resid_days = v;
    }

    // double over_int_rt = 34;


    pub fn get_over_int_rt(&self) -> f64 {
        self.over_int_rt
    }
    pub fn clear_over_int_rt(&mut self) {
        self.over_int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_over_int_rt(&mut self, v: f64) {
        self.over_int_rt = v;
    }

    // double tot_int_amt = 35;


    pub fn get_tot_int_amt(&self) -> f64 {
        self.tot_int_amt
    }
    pub fn clear_tot_int_amt(&mut self) {
        self.tot_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_int_amt(&mut self, v: f64) {
        self.tot_int_amt = v;
    }

    // double tot_prin_amt = 36;


    pub fn get_tot_prin_amt(&self) -> f64 {
        self.tot_prin_amt
    }
    pub fn clear_tot_prin_amt(&mut self) {
        self.tot_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_prin_amt(&mut self, v: f64) {
        self.tot_prin_amt = v;
    }

    // repeated .Cashflow cashflows = 37;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_no)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.br_cd = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cust_id = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ucic_id = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.prod_cd = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.gl_cd = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_comp_portion)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acc_open_dt = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.effc_dt = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bal_os = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bal_os_cly = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_comp_type)?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.compo_int_amt = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rt = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.dep_amt = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.dep_amt_lcy = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_acc_amt = tmp;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.non_with_flag)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.notice_day)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cust_const_code = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cntrct_num = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on = tmp;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.comp_freq)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pay_freq)?;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.over_dt = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lst_int_acr_dt = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_pay_amt = tmp;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_overdue)?;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.max_date = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.resid_days = tmp;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.over_int_rt = tmp;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_int_amt = tmp;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_prin_amt = tmp;
                },
                37 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.acc_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.acc_no);
        }
        if self.br_cd != 0 {
            my_size += ::protobuf::rt::value_size(2, self.br_cd, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cust_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cust_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ucic_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.ucic_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.ccy);
        }
        if self.prod_cd != 0 {
            my_size += ::protobuf::rt::value_size(6, self.prod_cd, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gl_cd != 0 {
            my_size += ::protobuf::rt::value_size(7, self.gl_cd, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.gl_comp_portion.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.gl_comp_portion);
        }
        if self.acc_open_dt != 0 {
            my_size += ::protobuf::rt::value_size(9, self.acc_open_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.effc_dt != 0 {
            my_size += ::protobuf::rt::value_size(10, self.effc_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bal_os != 0. {
            my_size += 9;
        }
        if self.bal_os_cly != 0. {
            my_size += 9;
        }
        if !self.int_comp_type.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.int_comp_type);
        }
        if self.compo_int_amt != 0. {
            my_size += 9;
        }
        if self.int_rt != 0. {
            my_size += 9;
        }
        if self.mat_dt != 0 {
            my_size += ::protobuf::rt::value_size(16, self.mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dep_amt != 0. {
            my_size += 10;
        }
        if self.dep_amt_lcy != 0. {
            my_size += 10;
        }
        if self.int_amt != 0. {
            my_size += 10;
        }
        if self.int_acc_amt != 0. {
            my_size += 10;
        }
        if !self.non_with_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.non_with_flag);
        }
        if !self.notice_day.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.notice_day);
        }
        if self.cust_const_code != 0 {
            my_size += ::protobuf::rt::value_size(23, self.cust_const_code, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cntrct_num != 0 {
            my_size += ::protobuf::rt::value_size(24, self.cntrct_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.as_on != 0 {
            my_size += ::protobuf::rt::value_size(25, self.as_on, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.comp_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.comp_freq);
        }
        if !self.pay_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.pay_freq);
        }
        if self.over_dt != 0 {
            my_size += ::protobuf::rt::value_size(28, self.over_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lst_int_acr_dt != 0 {
            my_size += ::protobuf::rt::value_size(29, self.lst_int_acr_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_pay_amt != 0. {
            my_size += 10;
        }
        if !self.is_overdue.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.is_overdue);
        }
        if self.max_date != 0 {
            my_size += ::protobuf::rt::value_size(32, self.max_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.resid_days != 0 {
            my_size += ::protobuf::rt::value_size(33, self.resid_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.over_int_rt != 0. {
            my_size += 10;
        }
        if self.tot_int_amt != 0. {
            my_size += 10;
        }
        if self.tot_prin_amt != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.acc_no.is_empty() {
            os.write_string(1, &self.acc_no)?;
        }
        if self.br_cd != 0 {
            os.write_int64(2, self.br_cd)?;
        }
        if self.cust_id != 0 {
            os.write_int64(3, self.cust_id)?;
        }
        if self.ucic_id != 0 {
            os.write_int64(4, self.ucic_id)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(5, &self.ccy)?;
        }
        if self.prod_cd != 0 {
            os.write_int64(6, self.prod_cd)?;
        }
        if self.gl_cd != 0 {
            os.write_int64(7, self.gl_cd)?;
        }
        if !self.gl_comp_portion.is_empty() {
            os.write_string(8, &self.gl_comp_portion)?;
        }
        if self.acc_open_dt != 0 {
            os.write_int64(9, self.acc_open_dt)?;
        }
        if self.effc_dt != 0 {
            os.write_int64(10, self.effc_dt)?;
        }
        if self.bal_os != 0. {
            os.write_double(11, self.bal_os)?;
        }
        if self.bal_os_cly != 0. {
            os.write_double(12, self.bal_os_cly)?;
        }
        if !self.int_comp_type.is_empty() {
            os.write_string(13, &self.int_comp_type)?;
        }
        if self.compo_int_amt != 0. {
            os.write_double(14, self.compo_int_amt)?;
        }
        if self.int_rt != 0. {
            os.write_double(15, self.int_rt)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(16, self.mat_dt)?;
        }
        if self.dep_amt != 0. {
            os.write_double(17, self.dep_amt)?;
        }
        if self.dep_amt_lcy != 0. {
            os.write_double(18, self.dep_amt_lcy)?;
        }
        if self.int_amt != 0. {
            os.write_double(19, self.int_amt)?;
        }
        if self.int_acc_amt != 0. {
            os.write_double(20, self.int_acc_amt)?;
        }
        if !self.non_with_flag.is_empty() {
            os.write_string(21, &self.non_with_flag)?;
        }
        if !self.notice_day.is_empty() {
            os.write_string(22, &self.notice_day)?;
        }
        if self.cust_const_code != 0 {
            os.write_int64(23, self.cust_const_code)?;
        }
        if self.cntrct_num != 0 {
            os.write_int64(24, self.cntrct_num)?;
        }
        if self.as_on != 0 {
            os.write_int64(25, self.as_on)?;
        }
        if !self.comp_freq.is_empty() {
            os.write_string(26, &self.comp_freq)?;
        }
        if !self.pay_freq.is_empty() {
            os.write_string(27, &self.pay_freq)?;
        }
        if self.over_dt != 0 {
            os.write_int64(28, self.over_dt)?;
        }
        if self.lst_int_acr_dt != 0 {
            os.write_int64(29, self.lst_int_acr_dt)?;
        }
        if self.int_pay_amt != 0. {
            os.write_double(30, self.int_pay_amt)?;
        }
        if !self.is_overdue.is_empty() {
            os.write_string(31, &self.is_overdue)?;
        }
        if self.max_date != 0 {
            os.write_int64(32, self.max_date)?;
        }
        if self.resid_days != 0 {
            os.write_int64(33, self.resid_days)?;
        }
        if self.over_int_rt != 0. {
            os.write_double(34, self.over_int_rt)?;
        }
        if self.tot_int_amt != 0. {
            os.write_double(35, self.tot_int_amt)?;
        }
        if self.tot_prin_amt != 0. {
            os.write_double(36, self.tot_prin_amt)?;
        }
        for v in &self.cashflows {
            os.write_tag(37, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acc_no",
                    |m: &AccountWithCashflows| { &m.acc_no },
                    |m: &mut AccountWithCashflows| { &mut m.acc_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "br_cd",
                    |m: &AccountWithCashflows| { &m.br_cd },
                    |m: &mut AccountWithCashflows| { &mut m.br_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cust_id",
                    |m: &AccountWithCashflows| { &m.cust_id },
                    |m: &mut AccountWithCashflows| { &mut m.cust_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "ucic_id",
                    |m: &AccountWithCashflows| { &m.ucic_id },
                    |m: &mut AccountWithCashflows| { &mut m.ucic_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy",
                    |m: &AccountWithCashflows| { &m.ccy },
                    |m: &mut AccountWithCashflows| { &mut m.ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "prod_cd",
                    |m: &AccountWithCashflows| { &m.prod_cd },
                    |m: &mut AccountWithCashflows| { &mut m.prod_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "gl_cd",
                    |m: &AccountWithCashflows| { &m.gl_cd },
                    |m: &mut AccountWithCashflows| { &mut m.gl_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gl_comp_portion",
                    |m: &AccountWithCashflows| { &m.gl_comp_portion },
                    |m: &mut AccountWithCashflows| { &mut m.gl_comp_portion },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "acc_open_dt",
                    |m: &AccountWithCashflows| { &m.acc_open_dt },
                    |m: &mut AccountWithCashflows| { &mut m.acc_open_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "effc_dt",
                    |m: &AccountWithCashflows| { &m.effc_dt },
                    |m: &mut AccountWithCashflows| { &mut m.effc_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "bal_os",
                    |m: &AccountWithCashflows| { &m.bal_os },
                    |m: &mut AccountWithCashflows| { &mut m.bal_os },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "bal_os_cly",
                    |m: &AccountWithCashflows| { &m.bal_os_cly },
                    |m: &mut AccountWithCashflows| { &mut m.bal_os_cly },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "int_comp_type",
                    |m: &AccountWithCashflows| { &m.int_comp_type },
                    |m: &mut AccountWithCashflows| { &mut m.int_comp_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "compo_int_amt",
                    |m: &AccountWithCashflows| { &m.compo_int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.compo_int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rt",
                    |m: &AccountWithCashflows| { &m.int_rt },
                    |m: &mut AccountWithCashflows| { &mut m.int_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "mat_dt",
                    |m: &AccountWithCashflows| { &m.mat_dt },
                    |m: &mut AccountWithCashflows| { &mut m.mat_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "dep_amt",
                    |m: &AccountWithCashflows| { &m.dep_amt },
                    |m: &mut AccountWithCashflows| { &mut m.dep_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "dep_amt_lcy",
                    |m: &AccountWithCashflows| { &m.dep_amt_lcy },
                    |m: &mut AccountWithCashflows| { &mut m.dep_amt_lcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &AccountWithCashflows| { &m.int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_acc_amt",
                    |m: &AccountWithCashflows| { &m.int_acc_amt },
                    |m: &mut AccountWithCashflows| { &mut m.int_acc_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "non_with_flag",
                    |m: &AccountWithCashflows| { &m.non_with_flag },
                    |m: &mut AccountWithCashflows| { &mut m.non_with_flag },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "notice_day",
                    |m: &AccountWithCashflows| { &m.notice_day },
                    |m: &mut AccountWithCashflows| { &mut m.notice_day },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cust_const_code",
                    |m: &AccountWithCashflows| { &m.cust_const_code },
                    |m: &mut AccountWithCashflows| { &mut m.cust_const_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cntrct_num",
                    |m: &AccountWithCashflows| { &m.cntrct_num },
                    |m: &mut AccountWithCashflows| { &mut m.cntrct_num },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "as_on",
                    |m: &AccountWithCashflows| { &m.as_on },
                    |m: &mut AccountWithCashflows| { &mut m.as_on },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "comp_freq",
                    |m: &AccountWithCashflows| { &m.comp_freq },
                    |m: &mut AccountWithCashflows| { &mut m.comp_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pay_freq",
                    |m: &AccountWithCashflows| { &m.pay_freq },
                    |m: &mut AccountWithCashflows| { &mut m.pay_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "over_dt",
                    |m: &AccountWithCashflows| { &m.over_dt },
                    |m: &mut AccountWithCashflows| { &mut m.over_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "lst_int_acr_dt",
                    |m: &AccountWithCashflows| { &m.lst_int_acr_dt },
                    |m: &mut AccountWithCashflows| { &mut m.lst_int_acr_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_pay_amt",
                    |m: &AccountWithCashflows| { &m.int_pay_amt },
                    |m: &mut AccountWithCashflows| { &mut m.int_pay_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "is_overdue",
                    |m: &AccountWithCashflows| { &m.is_overdue },
                    |m: &mut AccountWithCashflows| { &mut m.is_overdue },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "max_date",
                    |m: &AccountWithCashflows| { &m.max_date },
                    |m: &mut AccountWithCashflows| { &mut m.max_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "resid_days",
                    |m: &AccountWithCashflows| { &m.resid_days },
                    |m: &mut AccountWithCashflows| { &mut m.resid_days },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "over_int_rt",
                    |m: &AccountWithCashflows| { &m.over_int_rt },
                    |m: &mut AccountWithCashflows| { &mut m.over_int_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_int_amt",
                    |m: &AccountWithCashflows| { &m.tot_int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.tot_int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_prin_amt",
                    |m: &AccountWithCashflows| { &m.tot_prin_amt },
                    |m: &mut AccountWithCashflows| { &mut m.tot_prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.acc_no.clear();
        self.br_cd = 0;
        self.cust_id = 0;
        self.ucic_id = 0;
        self.ccy.clear();
        self.prod_cd = 0;
        self.gl_cd = 0;
        self.gl_comp_portion.clear();
        self.acc_open_dt = 0;
        self.effc_dt = 0;
        self.bal_os = 0.;
        self.bal_os_cly = 0.;
        self.int_comp_type.clear();
        self.compo_int_amt = 0.;
        self.int_rt = 0.;
        self.mat_dt = 0;
        self.dep_amt = 0.;
        self.dep_amt_lcy = 0.;
        self.int_amt = 0.;
        self.int_acc_amt = 0.;
        self.non_with_flag.clear();
        self.notice_day.clear();
        self.cust_const_code = 0;
        self.cntrct_num = 0;
        self.as_on = 0;
        self.comp_freq.clear();
        self.pay_freq.clear();
        self.over_dt = 0;
        self.lst_int_acr_dt = 0;
        self.int_pay_amt = 0.;
        self.is_overdue.clear();
        self.max_date = 0;
        self.resid_days = 0;
        self.over_int_rt = 0.;
        self.tot_int_amt = 0.;
        self.tot_prin_amt = 0.;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10csb_td_int.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\
    \x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prin\
    Amt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xcb\x08\n\x14Accou\
    ntWithCashflows\x12\x15\n\x06acc_no\x18\x01\x20\x01(\tR\x05accNo\x12\x13\
    \n\x05br_cd\x18\x02\x20\x01(\x03R\x04brCd\x12\x17\n\x07cust_id\x18\x03\
    \x20\x01(\x03R\x06custId\x12\x17\n\x07ucic_id\x18\x04\x20\x01(\x03R\x06u\
    cicId\x12\x10\n\x03ccy\x18\x05\x20\x01(\tR\x03ccy\x12\x17\n\x07prod_cd\
    \x18\x06\x20\x01(\x03R\x06prodCd\x12\x13\n\x05gl_cd\x18\x07\x20\x01(\x03\
    R\x04glCd\x12&\n\x0fgl_comp_portion\x18\x08\x20\x01(\tR\rglCompPortion\
    \x12\x1e\n\x0bacc_open_dt\x18\t\x20\x01(\x03R\taccOpenDt\x12\x17\n\x07ef\
    fc_dt\x18\n\x20\x01(\x03R\x06effcDt\x12\x15\n\x06bal_os\x18\x0b\x20\x01(\
    \x01R\x05balOs\x12\x1c\n\nbal_os_cly\x18\x0c\x20\x01(\x01R\x08balOsCly\
    \x12\"\n\rint_comp_type\x18\r\x20\x01(\tR\x0bintCompType\x12\"\n\rcompo_\
    int_amt\x18\x0e\x20\x01(\x01R\x0bcompoIntAmt\x12\x15\n\x06int_rt\x18\x0f\
    \x20\x01(\x01R\x05intRt\x12\x15\n\x06mat_dt\x18\x10\x20\x01(\x03R\x05mat\
    Dt\x12\x17\n\x07dep_amt\x18\x11\x20\x01(\x01R\x06depAmt\x12\x1e\n\x0bdep\
    _amt_lcy\x18\x12\x20\x01(\x01R\tdepAmtLcy\x12\x17\n\x07int_amt\x18\x13\
    \x20\x01(\x01R\x06intAmt\x12\x1e\n\x0bint_acc_amt\x18\x14\x20\x01(\x01R\
    \tintAccAmt\x12\"\n\rnon_with_flag\x18\x15\x20\x01(\tR\x0bnonWithFlag\
    \x12\x1d\n\nnotice_day\x18\x16\x20\x01(\tR\tnoticeDay\x12&\n\x0fcust_con\
    st_code\x18\x17\x20\x01(\x03R\rcustConstCode\x12\x1d\n\ncntrct_num\x18\
    \x18\x20\x01(\x03R\tcntrctNum\x12\x13\n\x05as_on\x18\x19\x20\x01(\x03R\
    \x04asOn\x12\x1b\n\tcomp_freq\x18\x1a\x20\x01(\tR\x08compFreq\x12\x19\n\
    \x08pay_freq\x18\x1b\x20\x01(\tR\x07payFreq\x12\x17\n\x07over_dt\x18\x1c\
    \x20\x01(\x03R\x06overDt\x12#\n\x0elst_int_acr_dt\x18\x1d\x20\x01(\x03R\
    \x0blstIntAcrDt\x12\x1e\n\x0bint_pay_amt\x18\x1e\x20\x01(\x01R\tintPayAm\
    t\x12\x1d\n\nis_overdue\x18\x1f\x20\x01(\tR\tisOverdue\x12\x19\n\x08max_\
    date\x18\x20\x20\x01(\x03R\x07maxDate\x12\x1d\n\nresid_days\x18!\x20\x01\
    (\x03R\tresidDays\x12\x1e\n\x0bover_int_rt\x18\"\x20\x01(\x01R\toverIntR\
    t\x12\x1e\n\x0btot_int_amt\x18#\x20\x01(\x01R\ttotIntAmt\x12\x20\n\x0cto\
    t_prin_amt\x18$\x20\x01(\x01R\ntotPrinAmt\x12'\n\tcashflows\x18%\x20\x03\
    (\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
