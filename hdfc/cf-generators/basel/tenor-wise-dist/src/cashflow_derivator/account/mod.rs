// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]

#[derive(PartialEq,Clone,Default)]
pub struct OutputAccount {
    // message fields
    pub as_on_date: ::std::string::String,
    pub acc_no: f64,
    pub custid: i64,
    pub classid: i64,
    pub curr: ::std::string::String,
    pub mat_date: ::std::string::String,
    pub tot_amt: f64,
    pub tot_nwd_amt: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutputAccount {
    fn default() -> &'a OutputAccount {
        <OutputAccount as ::protobuf::Message>::default_instance()
    }
}

impl OutputAccount {
    pub fn new() -> OutputAccount {
        ::std::default::Default::default()
    }

    // string as_on_date = 1;


    pub fn get_as_on_date(&self) -> &str {
        &self.as_on_date
    }
    pub fn clear_as_on_date(&mut self) {
        self.as_on_date.clear();
    }

    // Param is passed by value, moved
    pub fn set_as_on_date(&mut self, v: ::std::string::String) {
        self.as_on_date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_as_on_date(&mut self) -> &mut ::std::string::String {
        &mut self.as_on_date
    }

    // Take field
    pub fn take_as_on_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.as_on_date, ::std::string::String::new())
    }

    // double acc_no = 2;


    pub fn get_acc_no(&self) -> f64 {
        self.acc_no
    }
    pub fn clear_acc_no(&mut self) {
        self.acc_no = 0.;
    }

    // Param is passed by value, moved
    pub fn set_acc_no(&mut self, v: f64) {
        self.acc_no = v;
    }

    // int64 custid = 3;


    pub fn get_custid(&self) -> i64 {
        self.custid
    }
    pub fn clear_custid(&mut self) {
        self.custid = 0;
    }

    // Param is passed by value, moved
    pub fn set_custid(&mut self, v: i64) {
        self.custid = v;
    }

    // int64 classid = 4;


    pub fn get_classid(&self) -> i64 {
        self.classid
    }
    pub fn clear_classid(&mut self) {
        self.classid = 0;
    }

    // Param is passed by value, moved
    pub fn set_classid(&mut self, v: i64) {
        self.classid = v;
    }

    // string curr = 5;


    pub fn get_curr(&self) -> &str {
        &self.curr
    }
    pub fn clear_curr(&mut self) {
        self.curr.clear();
    }

    // Param is passed by value, moved
    pub fn set_curr(&mut self, v: ::std::string::String) {
        self.curr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_curr(&mut self) -> &mut ::std::string::String {
        &mut self.curr
    }

    // Take field
    pub fn take_curr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.curr, ::std::string::String::new())
    }

    // string mat_date = 6;


    pub fn get_mat_date(&self) -> &str {
        &self.mat_date
    }
    pub fn clear_mat_date(&mut self) {
        self.mat_date.clear();
    }

    // Param is passed by value, moved
    pub fn set_mat_date(&mut self, v: ::std::string::String) {
        self.mat_date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mat_date(&mut self) -> &mut ::std::string::String {
        &mut self.mat_date
    }

    // Take field
    pub fn take_mat_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mat_date, ::std::string::String::new())
    }

    // double tot_amt = 7;


    pub fn get_tot_amt(&self) -> f64 {
        self.tot_amt
    }
    pub fn clear_tot_amt(&mut self) {
        self.tot_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_amt(&mut self, v: f64) {
        self.tot_amt = v;
    }

    // double tot_nwd_amt = 8;


    pub fn get_tot_nwd_amt(&self) -> f64 {
        self.tot_nwd_amt
    }
    pub fn clear_tot_nwd_amt(&mut self) {
        self.tot_nwd_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_nwd_amt(&mut self, v: f64) {
        self.tot_nwd_amt = v;
    }
}

impl ::protobuf::Message for OutputAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.as_on_date)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.acc_no = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.custid = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.classid = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.curr)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mat_date)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_amt = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_nwd_amt = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.as_on_date.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.as_on_date);
        }
        if self.acc_no != 0. {
            my_size += 9;
        }
        if self.custid != 0 {
            my_size += ::protobuf::rt::value_size(3, self.custid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.classid != 0 {
            my_size += ::protobuf::rt::value_size(4, self.classid, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.curr.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.curr);
        }
        if !self.mat_date.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.mat_date);
        }
        if self.tot_amt != 0. {
            my_size += 9;
        }
        if self.tot_nwd_amt != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.as_on_date.is_empty() {
            os.write_string(1, &self.as_on_date)?;
        }
        if self.acc_no != 0. {
            os.write_double(2, self.acc_no)?;
        }
        if self.custid != 0 {
            os.write_int64(3, self.custid)?;
        }
        if self.classid != 0 {
            os.write_int64(4, self.classid)?;
        }
        if !self.curr.is_empty() {
            os.write_string(5, &self.curr)?;
        }
        if !self.mat_date.is_empty() {
            os.write_string(6, &self.mat_date)?;
        }
        if self.tot_amt != 0. {
            os.write_double(7, self.tot_amt)?;
        }
        if self.tot_nwd_amt != 0. {
            os.write_double(8, self.tot_nwd_amt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputAccount {
        OutputAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "as_on_date",
                |m: &OutputAccount| { &m.as_on_date },
                |m: &mut OutputAccount| { &mut m.as_on_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "acc_no",
                |m: &OutputAccount| { &m.acc_no },
                |m: &mut OutputAccount| { &mut m.acc_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "custid",
                |m: &OutputAccount| { &m.custid },
                |m: &mut OutputAccount| { &mut m.custid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "classid",
                |m: &OutputAccount| { &m.classid },
                |m: &mut OutputAccount| { &mut m.classid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "curr",
                |m: &OutputAccount| { &m.curr },
                |m: &mut OutputAccount| { &mut m.curr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mat_date",
                |m: &OutputAccount| { &m.mat_date },
                |m: &mut OutputAccount| { &mut m.mat_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_amt",
                |m: &OutputAccount| { &m.tot_amt },
                |m: &mut OutputAccount| { &mut m.tot_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_nwd_amt",
                |m: &OutputAccount| { &m.tot_nwd_amt },
                |m: &mut OutputAccount| { &mut m.tot_nwd_amt },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OutputAccount>(
                "OutputAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OutputAccount {
        static instance: ::protobuf::rt::LazyV2<OutputAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OutputAccount::new)
    }
}

impl ::protobuf::Clear for OutputAccount {
    fn clear(&mut self) {
        self.as_on_date.clear();
        self.acc_no = 0.;
        self.custid = 0;
        self.classid = 0;
        self.curr.clear();
        self.mat_date.clear();
        self.tot_amt = 0.;
        self.tot_nwd_amt = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10tenor_wise.proto\"\xde\x01\n\rOutputAccount\x12\x1c\n\nas_on_date\
    \x18\x01\x20\x01(\tR\x08asOnDate\x12\x15\n\x06acc_no\x18\x02\x20\x01(\
    \x01R\x05accNo\x12\x16\n\x06custid\x18\x03\x20\x01(\x03R\x06custid\x12\
    \x18\n\x07classid\x18\x04\x20\x01(\x03R\x07classid\x12\x12\n\x04curr\x18\
    \x05\x20\x01(\tR\x04curr\x12\x19\n\x08mat_date\x18\x06\x20\x01(\tR\x07ma\
    tDate\x12\x17\n\x07tot_amt\x18\x07\x20\x01(\x01R\x06totAmt\x12\x1e\n\x0b\
    tot_nwd_amt\x18\x08\x20\x01(\x01R\ttotNwdAmtb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
