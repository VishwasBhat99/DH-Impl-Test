// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // double principal_amount = 2;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_amount",
                    |m: &Cashflow| { &m.interest_amount },
                    |m: &mut Cashflow| { &mut m.interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal_amount",
                    |m: &Cashflow| { &m.principal_amount },
                    |m: &mut Cashflow| { &mut m.principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_interest_amount();
        self.clear_principal_amount();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub acid: ::std::string::String,
    pub foracid: ::std::string::String,
    pub sol_id: ::std::string::String,
    pub acct_opn_date: i64,
    pub gl_sub_head_code: ::std::string::String,
    pub schm_code: ::std::string::String,
    pub schm_type: ::std::string::String,
    pub acct_crncy_code: ::std::string::String,
    pub rep_shdl_num: i64,
    pub rep_shdl_date: i64,
    pub dis_shdl_num: i64,
    pub dis_shdl_date: i64,
    pub dis_amt: f64,
    pub clr_bal_amt: f64,
    pub sanct_lim: f64,
    pub rephasement_principal: f64,
    pub ei_perd_end_date: i64,
    pub cust_id: ::std::string::String,
    pub cust_name: ::std::string::String,
    pub ei_schm_flg: ::std::string::String,
    pub int_basis: ::std::string::String,
    pub ei_formula_flg: ::std::string::String,
    pub ei_intcalc_freq: ::std::string::String,
    pub ei_method: ::std::string::String,
    pub int_rate: f64,
    pub int_type: ::std::string::String,
    pub next_repricing_date: i64,
    pub last_repricing_date: i64,
    pub repricing_freq: ::std::string::String,
    pub float_rate_benchmark: ::std::string::String,
    pub spread: f64,
    pub npa_flg: ::std::string::String,
    pub npa_classification: ::std::string::String,
    pub npa_amt: f64,
    pub cust_country_cd: ::std::string::String,
    pub cust_credit_rating: ::std::string::String,
    pub cust_sector_cd: ::std::string::String,
    pub cust_industry_cd: ::std::string::String,
    pub exchangert: f64,
    pub contractual_maturity_days: i64,
    pub residual_maturity_days: i64,
    pub custom1: ::std::string::String,
    pub custom2: ::std::string::String,
    pub custom3: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string acid = 1;

    pub fn clear_acid(&mut self) {
        self.acid.clear();
    }

    // Param is passed by value, moved
    pub fn set_acid(&mut self, v: ::std::string::String) {
        self.acid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acid(&mut self) -> &mut ::std::string::String {
        &mut self.acid
    }

    // Take field
    pub fn take_acid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acid, ::std::string::String::new())
    }

    pub fn get_acid(&self) -> &str {
        &self.acid
    }

    // string foracid = 2;

    pub fn clear_foracid(&mut self) {
        self.foracid.clear();
    }

    // Param is passed by value, moved
    pub fn set_foracid(&mut self, v: ::std::string::String) {
        self.foracid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_foracid(&mut self) -> &mut ::std::string::String {
        &mut self.foracid
    }

    // Take field
    pub fn take_foracid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.foracid, ::std::string::String::new())
    }

    pub fn get_foracid(&self) -> &str {
        &self.foracid
    }

    // string sol_id = 3;

    pub fn clear_sol_id(&mut self) {
        self.sol_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_sol_id(&mut self, v: ::std::string::String) {
        self.sol_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sol_id(&mut self) -> &mut ::std::string::String {
        &mut self.sol_id
    }

    // Take field
    pub fn take_sol_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sol_id, ::std::string::String::new())
    }

    pub fn get_sol_id(&self) -> &str {
        &self.sol_id
    }

    // int64 acct_opn_date = 4;

    pub fn clear_acct_opn_date(&mut self) {
        self.acct_opn_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_acct_opn_date(&mut self, v: i64) {
        self.acct_opn_date = v;
    }

    pub fn get_acct_opn_date(&self) -> i64 {
        self.acct_opn_date
    }

    // string gl_sub_head_code = 5;

    pub fn clear_gl_sub_head_code(&mut self) {
        self.gl_sub_head_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_sub_head_code(&mut self, v: ::std::string::String) {
        self.gl_sub_head_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_sub_head_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_sub_head_code
    }

    // Take field
    pub fn take_gl_sub_head_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_sub_head_code, ::std::string::String::new())
    }

    pub fn get_gl_sub_head_code(&self) -> &str {
        &self.gl_sub_head_code
    }

    // string schm_code = 6;

    pub fn clear_schm_code(&mut self) {
        self.schm_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_schm_code(&mut self, v: ::std::string::String) {
        self.schm_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schm_code(&mut self) -> &mut ::std::string::String {
        &mut self.schm_code
    }

    // Take field
    pub fn take_schm_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schm_code, ::std::string::String::new())
    }

    pub fn get_schm_code(&self) -> &str {
        &self.schm_code
    }

    // string schm_type = 7;

    pub fn clear_schm_type(&mut self) {
        self.schm_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_schm_type(&mut self, v: ::std::string::String) {
        self.schm_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schm_type(&mut self) -> &mut ::std::string::String {
        &mut self.schm_type
    }

    // Take field
    pub fn take_schm_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schm_type, ::std::string::String::new())
    }

    pub fn get_schm_type(&self) -> &str {
        &self.schm_type
    }

    // string acct_crncy_code = 8;

    pub fn clear_acct_crncy_code(&mut self) {
        self.acct_crncy_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_acct_crncy_code(&mut self, v: ::std::string::String) {
        self.acct_crncy_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acct_crncy_code(&mut self) -> &mut ::std::string::String {
        &mut self.acct_crncy_code
    }

    // Take field
    pub fn take_acct_crncy_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acct_crncy_code, ::std::string::String::new())
    }

    pub fn get_acct_crncy_code(&self) -> &str {
        &self.acct_crncy_code
    }

    // int64 rep_shdl_num = 9;

    pub fn clear_rep_shdl_num(&mut self) {
        self.rep_shdl_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_rep_shdl_num(&mut self, v: i64) {
        self.rep_shdl_num = v;
    }

    pub fn get_rep_shdl_num(&self) -> i64 {
        self.rep_shdl_num
    }

    // int64 rep_shdl_date = 10;

    pub fn clear_rep_shdl_date(&mut self) {
        self.rep_shdl_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_rep_shdl_date(&mut self, v: i64) {
        self.rep_shdl_date = v;
    }

    pub fn get_rep_shdl_date(&self) -> i64 {
        self.rep_shdl_date
    }

    // int64 dis_shdl_num = 11;

    pub fn clear_dis_shdl_num(&mut self) {
        self.dis_shdl_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_dis_shdl_num(&mut self, v: i64) {
        self.dis_shdl_num = v;
    }

    pub fn get_dis_shdl_num(&self) -> i64 {
        self.dis_shdl_num
    }

    // int64 dis_shdl_date = 12;

    pub fn clear_dis_shdl_date(&mut self) {
        self.dis_shdl_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_dis_shdl_date(&mut self, v: i64) {
        self.dis_shdl_date = v;
    }

    pub fn get_dis_shdl_date(&self) -> i64 {
        self.dis_shdl_date
    }

    // double dis_amt = 13;

    pub fn clear_dis_amt(&mut self) {
        self.dis_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dis_amt(&mut self, v: f64) {
        self.dis_amt = v;
    }

    pub fn get_dis_amt(&self) -> f64 {
        self.dis_amt
    }

    // double clr_bal_amt = 14;

    pub fn clear_clr_bal_amt(&mut self) {
        self.clr_bal_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_clr_bal_amt(&mut self, v: f64) {
        self.clr_bal_amt = v;
    }

    pub fn get_clr_bal_amt(&self) -> f64 {
        self.clr_bal_amt
    }

    // double sanct_lim = 15;

    pub fn clear_sanct_lim(&mut self) {
        self.sanct_lim = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sanct_lim(&mut self, v: f64) {
        self.sanct_lim = v;
    }

    pub fn get_sanct_lim(&self) -> f64 {
        self.sanct_lim
    }

    // double rephasement_principal = 16;

    pub fn clear_rephasement_principal(&mut self) {
        self.rephasement_principal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rephasement_principal(&mut self, v: f64) {
        self.rephasement_principal = v;
    }

    pub fn get_rephasement_principal(&self) -> f64 {
        self.rephasement_principal
    }

    // int64 ei_perd_end_date = 17;

    pub fn clear_ei_perd_end_date(&mut self) {
        self.ei_perd_end_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_ei_perd_end_date(&mut self, v: i64) {
        self.ei_perd_end_date = v;
    }

    pub fn get_ei_perd_end_date(&self) -> i64 {
        self.ei_perd_end_date
    }

    // string cust_id = 18;

    pub fn clear_cust_id(&mut self) {
        self.cust_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: ::std::string::String) {
        self.cust_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_id
    }

    // Take field
    pub fn take_cust_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_id, ::std::string::String::new())
    }

    pub fn get_cust_id(&self) -> &str {
        &self.cust_id
    }

    // string cust_name = 19;

    pub fn clear_cust_name(&mut self) {
        self.cust_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_name(&mut self, v: ::std::string::String) {
        self.cust_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_name
    }

    // Take field
    pub fn take_cust_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_name, ::std::string::String::new())
    }

    pub fn get_cust_name(&self) -> &str {
        &self.cust_name
    }

    // string ei_schm_flg = 20;

    pub fn clear_ei_schm_flg(&mut self) {
        self.ei_schm_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_ei_schm_flg(&mut self, v: ::std::string::String) {
        self.ei_schm_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ei_schm_flg(&mut self) -> &mut ::std::string::String {
        &mut self.ei_schm_flg
    }

    // Take field
    pub fn take_ei_schm_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ei_schm_flg, ::std::string::String::new())
    }

    pub fn get_ei_schm_flg(&self) -> &str {
        &self.ei_schm_flg
    }

    // string int_basis = 21;

    pub fn clear_int_basis(&mut self) {
        self.int_basis.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_basis(&mut self, v: ::std::string::String) {
        self.int_basis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_basis(&mut self) -> &mut ::std::string::String {
        &mut self.int_basis
    }

    // Take field
    pub fn take_int_basis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_basis, ::std::string::String::new())
    }

    pub fn get_int_basis(&self) -> &str {
        &self.int_basis
    }

    // string ei_formula_flg = 22;

    pub fn clear_ei_formula_flg(&mut self) {
        self.ei_formula_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_ei_formula_flg(&mut self, v: ::std::string::String) {
        self.ei_formula_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ei_formula_flg(&mut self) -> &mut ::std::string::String {
        &mut self.ei_formula_flg
    }

    // Take field
    pub fn take_ei_formula_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ei_formula_flg, ::std::string::String::new())
    }

    pub fn get_ei_formula_flg(&self) -> &str {
        &self.ei_formula_flg
    }

    // string ei_intcalc_freq = 23;

    pub fn clear_ei_intcalc_freq(&mut self) {
        self.ei_intcalc_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_ei_intcalc_freq(&mut self, v: ::std::string::String) {
        self.ei_intcalc_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ei_intcalc_freq(&mut self) -> &mut ::std::string::String {
        &mut self.ei_intcalc_freq
    }

    // Take field
    pub fn take_ei_intcalc_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ei_intcalc_freq, ::std::string::String::new())
    }

    pub fn get_ei_intcalc_freq(&self) -> &str {
        &self.ei_intcalc_freq
    }

    // string ei_method = 24;

    pub fn clear_ei_method(&mut self) {
        self.ei_method.clear();
    }

    // Param is passed by value, moved
    pub fn set_ei_method(&mut self, v: ::std::string::String) {
        self.ei_method = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ei_method(&mut self) -> &mut ::std::string::String {
        &mut self.ei_method
    }

    // Take field
    pub fn take_ei_method(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ei_method, ::std::string::String::new())
    }

    pub fn get_ei_method(&self) -> &str {
        &self.ei_method
    }

    // double int_rate = 25;

    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }

    // string int_type = 26;

    pub fn clear_int_type(&mut self) {
        self.int_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_type(&mut self, v: ::std::string::String) {
        self.int_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_type(&mut self) -> &mut ::std::string::String {
        &mut self.int_type
    }

    // Take field
    pub fn take_int_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_type, ::std::string::String::new())
    }

    pub fn get_int_type(&self) -> &str {
        &self.int_type
    }

    // int64 next_repricing_date = 27;

    pub fn clear_next_repricing_date(&mut self) {
        self.next_repricing_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_repricing_date(&mut self, v: i64) {
        self.next_repricing_date = v;
    }

    pub fn get_next_repricing_date(&self) -> i64 {
        self.next_repricing_date
    }

    // int64 last_repricing_date = 28;

    pub fn clear_last_repricing_date(&mut self) {
        self.last_repricing_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_repricing_date(&mut self, v: i64) {
        self.last_repricing_date = v;
    }

    pub fn get_last_repricing_date(&self) -> i64 {
        self.last_repricing_date
    }

    // string repricing_freq = 29;

    pub fn clear_repricing_freq(&mut self) {
        self.repricing_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_repricing_freq(&mut self, v: ::std::string::String) {
        self.repricing_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repricing_freq(&mut self) -> &mut ::std::string::String {
        &mut self.repricing_freq
    }

    // Take field
    pub fn take_repricing_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.repricing_freq, ::std::string::String::new())
    }

    pub fn get_repricing_freq(&self) -> &str {
        &self.repricing_freq
    }

    // string float_rate_benchmark = 30;

    pub fn clear_float_rate_benchmark(&mut self) {
        self.float_rate_benchmark.clear();
    }

    // Param is passed by value, moved
    pub fn set_float_rate_benchmark(&mut self, v: ::std::string::String) {
        self.float_rate_benchmark = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_float_rate_benchmark(&mut self) -> &mut ::std::string::String {
        &mut self.float_rate_benchmark
    }

    // Take field
    pub fn take_float_rate_benchmark(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.float_rate_benchmark, ::std::string::String::new())
    }

    pub fn get_float_rate_benchmark(&self) -> &str {
        &self.float_rate_benchmark
    }

    // double spread = 31;

    pub fn clear_spread(&mut self) {
        self.spread = 0.;
    }

    // Param is passed by value, moved
    pub fn set_spread(&mut self, v: f64) {
        self.spread = v;
    }

    pub fn get_spread(&self) -> f64 {
        self.spread
    }

    // string npa_flg = 32;

    pub fn clear_npa_flg(&mut self) {
        self.npa_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_flg(&mut self, v: ::std::string::String) {
        self.npa_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_flg(&mut self) -> &mut ::std::string::String {
        &mut self.npa_flg
    }

    // Take field
    pub fn take_npa_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_flg, ::std::string::String::new())
    }

    pub fn get_npa_flg(&self) -> &str {
        &self.npa_flg
    }

    // string npa_classification = 33;

    pub fn clear_npa_classification(&mut self) {
        self.npa_classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_classification(&mut self, v: ::std::string::String) {
        self.npa_classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_classification(&mut self) -> &mut ::std::string::String {
        &mut self.npa_classification
    }

    // Take field
    pub fn take_npa_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_classification, ::std::string::String::new())
    }

    pub fn get_npa_classification(&self) -> &str {
        &self.npa_classification
    }

    // double npa_amt = 34;

    pub fn clear_npa_amt(&mut self) {
        self.npa_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_npa_amt(&mut self, v: f64) {
        self.npa_amt = v;
    }

    pub fn get_npa_amt(&self) -> f64 {
        self.npa_amt
    }

    // string cust_country_cd = 35;

    pub fn clear_cust_country_cd(&mut self) {
        self.cust_country_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_country_cd(&mut self, v: ::std::string::String) {
        self.cust_country_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_country_cd(&mut self) -> &mut ::std::string::String {
        &mut self.cust_country_cd
    }

    // Take field
    pub fn take_cust_country_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_country_cd, ::std::string::String::new())
    }

    pub fn get_cust_country_cd(&self) -> &str {
        &self.cust_country_cd
    }

    // string cust_credit_rating = 36;

    pub fn clear_cust_credit_rating(&mut self) {
        self.cust_credit_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_credit_rating(&mut self, v: ::std::string::String) {
        self.cust_credit_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_credit_rating(&mut self) -> &mut ::std::string::String {
        &mut self.cust_credit_rating
    }

    // Take field
    pub fn take_cust_credit_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_credit_rating, ::std::string::String::new())
    }

    pub fn get_cust_credit_rating(&self) -> &str {
        &self.cust_credit_rating
    }

    // string cust_sector_cd = 37;

    pub fn clear_cust_sector_cd(&mut self) {
        self.cust_sector_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_sector_cd(&mut self, v: ::std::string::String) {
        self.cust_sector_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_sector_cd(&mut self) -> &mut ::std::string::String {
        &mut self.cust_sector_cd
    }

    // Take field
    pub fn take_cust_sector_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_sector_cd, ::std::string::String::new())
    }

    pub fn get_cust_sector_cd(&self) -> &str {
        &self.cust_sector_cd
    }

    // string cust_industry_cd = 38;

    pub fn clear_cust_industry_cd(&mut self) {
        self.cust_industry_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_industry_cd(&mut self, v: ::std::string::String) {
        self.cust_industry_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_industry_cd(&mut self) -> &mut ::std::string::String {
        &mut self.cust_industry_cd
    }

    // Take field
    pub fn take_cust_industry_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_industry_cd, ::std::string::String::new())
    }

    pub fn get_cust_industry_cd(&self) -> &str {
        &self.cust_industry_cd
    }

    // double exchangert = 39;

    pub fn clear_exchangert(&mut self) {
        self.exchangert = 0.;
    }

    // Param is passed by value, moved
    pub fn set_exchangert(&mut self, v: f64) {
        self.exchangert = v;
    }

    pub fn get_exchangert(&self) -> f64 {
        self.exchangert
    }

    // int64 contractual_maturity_days = 40;

    pub fn clear_contractual_maturity_days(&mut self) {
        self.contractual_maturity_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_contractual_maturity_days(&mut self, v: i64) {
        self.contractual_maturity_days = v;
    }

    pub fn get_contractual_maturity_days(&self) -> i64 {
        self.contractual_maturity_days
    }

    // int64 residual_maturity_days = 41;

    pub fn clear_residual_maturity_days(&mut self) {
        self.residual_maturity_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_residual_maturity_days(&mut self, v: i64) {
        self.residual_maturity_days = v;
    }

    pub fn get_residual_maturity_days(&self) -> i64 {
        self.residual_maturity_days
    }

    // string custom1 = 42;

    pub fn clear_custom1(&mut self) {
        self.custom1.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom1(&mut self, v: ::std::string::String) {
        self.custom1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom1(&mut self) -> &mut ::std::string::String {
        &mut self.custom1
    }

    // Take field
    pub fn take_custom1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom1, ::std::string::String::new())
    }

    pub fn get_custom1(&self) -> &str {
        &self.custom1
    }

    // string custom2 = 43;

    pub fn clear_custom2(&mut self) {
        self.custom2.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom2(&mut self, v: ::std::string::String) {
        self.custom2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom2(&mut self) -> &mut ::std::string::String {
        &mut self.custom2
    }

    // Take field
    pub fn take_custom2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom2, ::std::string::String::new())
    }

    pub fn get_custom2(&self) -> &str {
        &self.custom2
    }

    // string custom3 = 44;

    pub fn clear_custom3(&mut self) {
        self.custom3.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom3(&mut self, v: ::std::string::String) {
        self.custom3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom3(&mut self) -> &mut ::std::string::String {
        &mut self.custom3
    }

    // Take field
    pub fn take_custom3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custom3, ::std::string::String::new())
    }

    pub fn get_custom3(&self) -> &str {
        &self.custom3
    }

    // repeated .Cashflow cashflows = 45;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.foracid)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sol_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acct_opn_date = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_sub_head_code)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schm_code)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schm_type)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acct_crncy_code)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rep_shdl_num = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rep_shdl_date = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.dis_shdl_num = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.dis_shdl_date = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.dis_amt = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.clr_bal_amt = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.sanct_lim = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rephasement_principal = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ei_perd_end_date = tmp;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_id)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_name)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ei_schm_flg)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_basis)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ei_formula_flg)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ei_intcalc_freq)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ei_method)?;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_type)?;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_repricing_date = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_repricing_date = tmp;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.repricing_freq)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.float_rate_benchmark)?;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.spread = tmp;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa_flg)?;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa_classification)?;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.npa_amt = tmp;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_country_cd)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_credit_rating)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_sector_cd)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_industry_cd)?;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.exchangert = tmp;
                },
                40 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.contractual_maturity_days = tmp;
                },
                41 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.residual_maturity_days = tmp;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom1)?;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom2)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custom3)?;
                },
                45 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.acid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.acid);
        }
        if !self.foracid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.foracid);
        }
        if !self.sol_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.sol_id);
        }
        if self.acct_opn_date != 0 {
            my_size += ::protobuf::rt::value_size(4, self.acct_opn_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.gl_sub_head_code.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.gl_sub_head_code);
        }
        if !self.schm_code.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.schm_code);
        }
        if !self.schm_type.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.schm_type);
        }
        if !self.acct_crncy_code.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.acct_crncy_code);
        }
        if self.rep_shdl_num != 0 {
            my_size += ::protobuf::rt::value_size(9, self.rep_shdl_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rep_shdl_date != 0 {
            my_size += ::protobuf::rt::value_size(10, self.rep_shdl_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dis_shdl_num != 0 {
            my_size += ::protobuf::rt::value_size(11, self.dis_shdl_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dis_shdl_date != 0 {
            my_size += ::protobuf::rt::value_size(12, self.dis_shdl_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dis_amt != 0. {
            my_size += 9;
        }
        if self.clr_bal_amt != 0. {
            my_size += 9;
        }
        if self.sanct_lim != 0. {
            my_size += 9;
        }
        if self.rephasement_principal != 0. {
            my_size += 10;
        }
        if self.ei_perd_end_date != 0 {
            my_size += ::protobuf::rt::value_size(17, self.ei_perd_end_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.cust_id.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.cust_id);
        }
        if !self.cust_name.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.cust_name);
        }
        if !self.ei_schm_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.ei_schm_flg);
        }
        if !self.int_basis.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.int_basis);
        }
        if !self.ei_formula_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.ei_formula_flg);
        }
        if !self.ei_intcalc_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.ei_intcalc_freq);
        }
        if !self.ei_method.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.ei_method);
        }
        if self.int_rate != 0. {
            my_size += 10;
        }
        if !self.int_type.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.int_type);
        }
        if self.next_repricing_date != 0 {
            my_size += ::protobuf::rt::value_size(27, self.next_repricing_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_repricing_date != 0 {
            my_size += ::protobuf::rt::value_size(28, self.last_repricing_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.repricing_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.repricing_freq);
        }
        if !self.float_rate_benchmark.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.float_rate_benchmark);
        }
        if self.spread != 0. {
            my_size += 10;
        }
        if !self.npa_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.npa_flg);
        }
        if !self.npa_classification.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.npa_classification);
        }
        if self.npa_amt != 0. {
            my_size += 10;
        }
        if !self.cust_country_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.cust_country_cd);
        }
        if !self.cust_credit_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.cust_credit_rating);
        }
        if !self.cust_sector_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.cust_sector_cd);
        }
        if !self.cust_industry_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.cust_industry_cd);
        }
        if self.exchangert != 0. {
            my_size += 10;
        }
        if self.contractual_maturity_days != 0 {
            my_size += ::protobuf::rt::value_size(40, self.contractual_maturity_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.residual_maturity_days != 0 {
            my_size += ::protobuf::rt::value_size(41, self.residual_maturity_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.custom1.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.custom1);
        }
        if !self.custom2.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.custom2);
        }
        if !self.custom3.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.custom3);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.acid.is_empty() {
            os.write_string(1, &self.acid)?;
        }
        if !self.foracid.is_empty() {
            os.write_string(2, &self.foracid)?;
        }
        if !self.sol_id.is_empty() {
            os.write_string(3, &self.sol_id)?;
        }
        if self.acct_opn_date != 0 {
            os.write_int64(4, self.acct_opn_date)?;
        }
        if !self.gl_sub_head_code.is_empty() {
            os.write_string(5, &self.gl_sub_head_code)?;
        }
        if !self.schm_code.is_empty() {
            os.write_string(6, &self.schm_code)?;
        }
        if !self.schm_type.is_empty() {
            os.write_string(7, &self.schm_type)?;
        }
        if !self.acct_crncy_code.is_empty() {
            os.write_string(8, &self.acct_crncy_code)?;
        }
        if self.rep_shdl_num != 0 {
            os.write_int64(9, self.rep_shdl_num)?;
        }
        if self.rep_shdl_date != 0 {
            os.write_int64(10, self.rep_shdl_date)?;
        }
        if self.dis_shdl_num != 0 {
            os.write_int64(11, self.dis_shdl_num)?;
        }
        if self.dis_shdl_date != 0 {
            os.write_int64(12, self.dis_shdl_date)?;
        }
        if self.dis_amt != 0. {
            os.write_double(13, self.dis_amt)?;
        }
        if self.clr_bal_amt != 0. {
            os.write_double(14, self.clr_bal_amt)?;
        }
        if self.sanct_lim != 0. {
            os.write_double(15, self.sanct_lim)?;
        }
        if self.rephasement_principal != 0. {
            os.write_double(16, self.rephasement_principal)?;
        }
        if self.ei_perd_end_date != 0 {
            os.write_int64(17, self.ei_perd_end_date)?;
        }
        if !self.cust_id.is_empty() {
            os.write_string(18, &self.cust_id)?;
        }
        if !self.cust_name.is_empty() {
            os.write_string(19, &self.cust_name)?;
        }
        if !self.ei_schm_flg.is_empty() {
            os.write_string(20, &self.ei_schm_flg)?;
        }
        if !self.int_basis.is_empty() {
            os.write_string(21, &self.int_basis)?;
        }
        if !self.ei_formula_flg.is_empty() {
            os.write_string(22, &self.ei_formula_flg)?;
        }
        if !self.ei_intcalc_freq.is_empty() {
            os.write_string(23, &self.ei_intcalc_freq)?;
        }
        if !self.ei_method.is_empty() {
            os.write_string(24, &self.ei_method)?;
        }
        if self.int_rate != 0. {
            os.write_double(25, self.int_rate)?;
        }
        if !self.int_type.is_empty() {
            os.write_string(26, &self.int_type)?;
        }
        if self.next_repricing_date != 0 {
            os.write_int64(27, self.next_repricing_date)?;
        }
        if self.last_repricing_date != 0 {
            os.write_int64(28, self.last_repricing_date)?;
        }
        if !self.repricing_freq.is_empty() {
            os.write_string(29, &self.repricing_freq)?;
        }
        if !self.float_rate_benchmark.is_empty() {
            os.write_string(30, &self.float_rate_benchmark)?;
        }
        if self.spread != 0. {
            os.write_double(31, self.spread)?;
        }
        if !self.npa_flg.is_empty() {
            os.write_string(32, &self.npa_flg)?;
        }
        if !self.npa_classification.is_empty() {
            os.write_string(33, &self.npa_classification)?;
        }
        if self.npa_amt != 0. {
            os.write_double(34, self.npa_amt)?;
        }
        if !self.cust_country_cd.is_empty() {
            os.write_string(35, &self.cust_country_cd)?;
        }
        if !self.cust_credit_rating.is_empty() {
            os.write_string(36, &self.cust_credit_rating)?;
        }
        if !self.cust_sector_cd.is_empty() {
            os.write_string(37, &self.cust_sector_cd)?;
        }
        if !self.cust_industry_cd.is_empty() {
            os.write_string(38, &self.cust_industry_cd)?;
        }
        if self.exchangert != 0. {
            os.write_double(39, self.exchangert)?;
        }
        if self.contractual_maturity_days != 0 {
            os.write_int64(40, self.contractual_maturity_days)?;
        }
        if self.residual_maturity_days != 0 {
            os.write_int64(41, self.residual_maturity_days)?;
        }
        if !self.custom1.is_empty() {
            os.write_string(42, &self.custom1)?;
        }
        if !self.custom2.is_empty() {
            os.write_string(43, &self.custom2)?;
        }
        if !self.custom3.is_empty() {
            os.write_string(44, &self.custom3)?;
        }
        for v in &self.cashflows {
            os.write_tag(45, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acid",
                    |m: &AccountWithCashflows| { &m.acid },
                    |m: &mut AccountWithCashflows| { &mut m.acid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "foracid",
                    |m: &AccountWithCashflows| { &m.foracid },
                    |m: &mut AccountWithCashflows| { &mut m.foracid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sol_id",
                    |m: &AccountWithCashflows| { &m.sol_id },
                    |m: &mut AccountWithCashflows| { &mut m.sol_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "acct_opn_date",
                    |m: &AccountWithCashflows| { &m.acct_opn_date },
                    |m: &mut AccountWithCashflows| { &mut m.acct_opn_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gl_sub_head_code",
                    |m: &AccountWithCashflows| { &m.gl_sub_head_code },
                    |m: &mut AccountWithCashflows| { &mut m.gl_sub_head_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "schm_code",
                    |m: &AccountWithCashflows| { &m.schm_code },
                    |m: &mut AccountWithCashflows| { &mut m.schm_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "schm_type",
                    |m: &AccountWithCashflows| { &m.schm_type },
                    |m: &mut AccountWithCashflows| { &mut m.schm_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acct_crncy_code",
                    |m: &AccountWithCashflows| { &m.acct_crncy_code },
                    |m: &mut AccountWithCashflows| { &mut m.acct_crncy_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "rep_shdl_num",
                    |m: &AccountWithCashflows| { &m.rep_shdl_num },
                    |m: &mut AccountWithCashflows| { &mut m.rep_shdl_num },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "rep_shdl_date",
                    |m: &AccountWithCashflows| { &m.rep_shdl_date },
                    |m: &mut AccountWithCashflows| { &mut m.rep_shdl_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "dis_shdl_num",
                    |m: &AccountWithCashflows| { &m.dis_shdl_num },
                    |m: &mut AccountWithCashflows| { &mut m.dis_shdl_num },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "dis_shdl_date",
                    |m: &AccountWithCashflows| { &m.dis_shdl_date },
                    |m: &mut AccountWithCashflows| { &mut m.dis_shdl_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "dis_amt",
                    |m: &AccountWithCashflows| { &m.dis_amt },
                    |m: &mut AccountWithCashflows| { &mut m.dis_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "clr_bal_amt",
                    |m: &AccountWithCashflows| { &m.clr_bal_amt },
                    |m: &mut AccountWithCashflows| { &mut m.clr_bal_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "sanct_lim",
                    |m: &AccountWithCashflows| { &m.sanct_lim },
                    |m: &mut AccountWithCashflows| { &mut m.sanct_lim },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rephasement_principal",
                    |m: &AccountWithCashflows| { &m.rephasement_principal },
                    |m: &mut AccountWithCashflows| { &mut m.rephasement_principal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "ei_perd_end_date",
                    |m: &AccountWithCashflows| { &m.ei_perd_end_date },
                    |m: &mut AccountWithCashflows| { &mut m.ei_perd_end_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_id",
                    |m: &AccountWithCashflows| { &m.cust_id },
                    |m: &mut AccountWithCashflows| { &mut m.cust_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_name",
                    |m: &AccountWithCashflows| { &m.cust_name },
                    |m: &mut AccountWithCashflows| { &mut m.cust_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ei_schm_flg",
                    |m: &AccountWithCashflows| { &m.ei_schm_flg },
                    |m: &mut AccountWithCashflows| { &mut m.ei_schm_flg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "int_basis",
                    |m: &AccountWithCashflows| { &m.int_basis },
                    |m: &mut AccountWithCashflows| { &mut m.int_basis },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ei_formula_flg",
                    |m: &AccountWithCashflows| { &m.ei_formula_flg },
                    |m: &mut AccountWithCashflows| { &mut m.ei_formula_flg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ei_intcalc_freq",
                    |m: &AccountWithCashflows| { &m.ei_intcalc_freq },
                    |m: &mut AccountWithCashflows| { &mut m.ei_intcalc_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ei_method",
                    |m: &AccountWithCashflows| { &m.ei_method },
                    |m: &mut AccountWithCashflows| { &mut m.ei_method },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rate",
                    |m: &AccountWithCashflows| { &m.int_rate },
                    |m: &mut AccountWithCashflows| { &mut m.int_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "int_type",
                    |m: &AccountWithCashflows| { &m.int_type },
                    |m: &mut AccountWithCashflows| { &mut m.int_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "next_repricing_date",
                    |m: &AccountWithCashflows| { &m.next_repricing_date },
                    |m: &mut AccountWithCashflows| { &mut m.next_repricing_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "last_repricing_date",
                    |m: &AccountWithCashflows| { &m.last_repricing_date },
                    |m: &mut AccountWithCashflows| { &mut m.last_repricing_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "repricing_freq",
                    |m: &AccountWithCashflows| { &m.repricing_freq },
                    |m: &mut AccountWithCashflows| { &mut m.repricing_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "float_rate_benchmark",
                    |m: &AccountWithCashflows| { &m.float_rate_benchmark },
                    |m: &mut AccountWithCashflows| { &mut m.float_rate_benchmark },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "spread",
                    |m: &AccountWithCashflows| { &m.spread },
                    |m: &mut AccountWithCashflows| { &mut m.spread },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "npa_flg",
                    |m: &AccountWithCashflows| { &m.npa_flg },
                    |m: &mut AccountWithCashflows| { &mut m.npa_flg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "npa_classification",
                    |m: &AccountWithCashflows| { &m.npa_classification },
                    |m: &mut AccountWithCashflows| { &mut m.npa_classification },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "npa_amt",
                    |m: &AccountWithCashflows| { &m.npa_amt },
                    |m: &mut AccountWithCashflows| { &mut m.npa_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_country_cd",
                    |m: &AccountWithCashflows| { &m.cust_country_cd },
                    |m: &mut AccountWithCashflows| { &mut m.cust_country_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_credit_rating",
                    |m: &AccountWithCashflows| { &m.cust_credit_rating },
                    |m: &mut AccountWithCashflows| { &mut m.cust_credit_rating },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_sector_cd",
                    |m: &AccountWithCashflows| { &m.cust_sector_cd },
                    |m: &mut AccountWithCashflows| { &mut m.cust_sector_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_industry_cd",
                    |m: &AccountWithCashflows| { &m.cust_industry_cd },
                    |m: &mut AccountWithCashflows| { &mut m.cust_industry_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "exchangert",
                    |m: &AccountWithCashflows| { &m.exchangert },
                    |m: &mut AccountWithCashflows| { &mut m.exchangert },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "contractual_maturity_days",
                    |m: &AccountWithCashflows| { &m.contractual_maturity_days },
                    |m: &mut AccountWithCashflows| { &mut m.contractual_maturity_days },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "residual_maturity_days",
                    |m: &AccountWithCashflows| { &m.residual_maturity_days },
                    |m: &mut AccountWithCashflows| { &mut m.residual_maturity_days },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "custom1",
                    |m: &AccountWithCashflows| { &m.custom1 },
                    |m: &mut AccountWithCashflows| { &mut m.custom1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "custom2",
                    |m: &AccountWithCashflows| { &m.custom2 },
                    |m: &mut AccountWithCashflows| { &mut m.custom2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "custom3",
                    |m: &AccountWithCashflows| { &m.custom3 },
                    |m: &mut AccountWithCashflows| { &mut m.custom3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_acid();
        self.clear_foracid();
        self.clear_sol_id();
        self.clear_acct_opn_date();
        self.clear_gl_sub_head_code();
        self.clear_schm_code();
        self.clear_schm_type();
        self.clear_acct_crncy_code();
        self.clear_rep_shdl_num();
        self.clear_rep_shdl_date();
        self.clear_dis_shdl_num();
        self.clear_dis_shdl_date();
        self.clear_dis_amt();
        self.clear_clr_bal_amt();
        self.clear_sanct_lim();
        self.clear_rephasement_principal();
        self.clear_ei_perd_end_date();
        self.clear_cust_id();
        self.clear_cust_name();
        self.clear_ei_schm_flg();
        self.clear_int_basis();
        self.clear_ei_formula_flg();
        self.clear_ei_intcalc_freq();
        self.clear_ei_method();
        self.clear_int_rate();
        self.clear_int_type();
        self.clear_next_repricing_date();
        self.clear_last_repricing_date();
        self.clear_repricing_freq();
        self.clear_float_rate_benchmark();
        self.clear_spread();
        self.clear_npa_flg();
        self.clear_npa_classification();
        self.clear_npa_amt();
        self.clear_cust_country_cd();
        self.clear_cust_credit_rating();
        self.clear_cust_sector_cd();
        self.clear_cust_industry_cd();
        self.clear_exchangert();
        self.clear_contractual_maturity_days();
        self.clear_residual_maturity_days();
        self.clear_custom1();
        self.clear_custom2();
        self.clear_custom3();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18proto/sar_ei_loans.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amoun\
    t\x18\x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\
    \x02\x20\x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\
    \x03R\x04date\"\xbf\x0c\n\x14AccountWithCashflows\x12\x12\n\x04acid\x18\
    \x01\x20\x01(\tR\x04acid\x12\x18\n\x07foracid\x18\x02\x20\x01(\tR\x07for\
    acid\x12\x15\n\x06sol_id\x18\x03\x20\x01(\tR\x05solId\x12\"\n\racct_opn_\
    date\x18\x04\x20\x01(\x03R\x0bacctOpnDate\x12'\n\x10gl_sub_head_code\x18\
    \x05\x20\x01(\tR\rglSubHeadCode\x12\x1b\n\tschm_code\x18\x06\x20\x01(\tR\
    \x08schmCode\x12\x1b\n\tschm_type\x18\x07\x20\x01(\tR\x08schmType\x12&\n\
    \x0facct_crncy_code\x18\x08\x20\x01(\tR\racctCrncyCode\x12\x20\n\x0crep_\
    shdl_num\x18\t\x20\x01(\x03R\nrepShdlNum\x12\"\n\rrep_shdl_date\x18\n\
    \x20\x01(\x03R\x0brepShdlDate\x12\x20\n\x0cdis_shdl_num\x18\x0b\x20\x01(\
    \x03R\ndisShdlNum\x12\"\n\rdis_shdl_date\x18\x0c\x20\x01(\x03R\x0bdisShd\
    lDate\x12\x17\n\x07dis_amt\x18\r\x20\x01(\x01R\x06disAmt\x12\x1e\n\x0bcl\
    r_bal_amt\x18\x0e\x20\x01(\x01R\tclrBalAmt\x12\x1b\n\tsanct_lim\x18\x0f\
    \x20\x01(\x01R\x08sanctLim\x123\n\x15rephasement_principal\x18\x10\x20\
    \x01(\x01R\x14rephasementPrincipal\x12'\n\x10ei_perd_end_date\x18\x11\
    \x20\x01(\x03R\reiPerdEndDate\x12\x17\n\x07cust_id\x18\x12\x20\x01(\tR\
    \x06custId\x12\x1b\n\tcust_name\x18\x13\x20\x01(\tR\x08custName\x12\x1e\
    \n\x0bei_schm_flg\x18\x14\x20\x01(\tR\teiSchmFlg\x12\x1b\n\tint_basis\
    \x18\x15\x20\x01(\tR\x08intBasis\x12$\n\x0eei_formula_flg\x18\x16\x20\
    \x01(\tR\x0ceiFormulaFlg\x12&\n\x0fei_intcalc_freq\x18\x17\x20\x01(\tR\r\
    eiIntcalcFreq\x12\x1b\n\tei_method\x18\x18\x20\x01(\tR\x08eiMethod\x12\
    \x19\n\x08int_rate\x18\x19\x20\x01(\x01R\x07intRate\x12\x19\n\x08int_typ\
    e\x18\x1a\x20\x01(\tR\x07intType\x12.\n\x13next_repricing_date\x18\x1b\
    \x20\x01(\x03R\x11nextRepricingDate\x12.\n\x13last_repricing_date\x18\
    \x1c\x20\x01(\x03R\x11lastRepricingDate\x12%\n\x0erepricing_freq\x18\x1d\
    \x20\x01(\tR\rrepricingFreq\x120\n\x14float_rate_benchmark\x18\x1e\x20\
    \x01(\tR\x12floatRateBenchmark\x12\x16\n\x06spread\x18\x1f\x20\x01(\x01R\
    \x06spread\x12\x17\n\x07npa_flg\x18\x20\x20\x01(\tR\x06npaFlg\x12-\n\x12\
    npa_classification\x18!\x20\x01(\tR\x11npaClassification\x12\x17\n\x07np\
    a_amt\x18\"\x20\x01(\x01R\x06npaAmt\x12&\n\x0fcust_country_cd\x18#\x20\
    \x01(\tR\rcustCountryCd\x12,\n\x12cust_credit_rating\x18$\x20\x01(\tR\
    \x10custCreditRating\x12$\n\x0ecust_sector_cd\x18%\x20\x01(\tR\x0ccustSe\
    ctorCd\x12(\n\x10cust_industry_cd\x18&\x20\x01(\tR\x0ecustIndustryCd\x12\
    \x1e\n\nexchangert\x18'\x20\x01(\x01R\nexchangert\x12:\n\x19contractual_\
    maturity_days\x18(\x20\x01(\x03R\x17contractualMaturityDays\x124\n\x16re\
    sidual_maturity_days\x18)\x20\x01(\x03R\x14residualMaturityDays\x12\x18\
    \n\x07custom1\x18*\x20\x01(\tR\x07custom1\x12\x18\n\x07custom2\x18+\x20\
    \x01(\tR\x07custom2\x12\x18\n\x07custom3\x18,\x20\x01(\tR\x07custom3\x12\
    '\n\tcashflows\x18-\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
