// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct One_acc_view {
    // message fields
    pub account_number: ::std::string::String,
    pub cust_name: ::std::string::String,
    pub average_balance: f64,
    pub accr_int: f64,
    pub yld_to_call: f64,
    pub int_rate: f64,
    pub base_rate: f64,
    pub final_ftp_rate: f64,
    pub value_date: i64,
    pub maturity_date: i64,
    pub nxt_rep_dt: i64,
    pub lst_rep_dt: i64,
    pub mis1: ::std::string::String,
    pub mis2: ::std::string::String,
    pub psl_code: ::std::string::String,
    pub prod_type: ::std::string::String,
    pub rate_flag: ::std::string::String,
    pub repr_spread: ::std::string::String,
    pub source_file_name: ::std::string::String,
    pub ccy: ::std::string::String,
    pub gl: ::std::string::String,
    pub cust_id: ::std::string::String,
    pub final_ftp_amt: f64,
    pub alm_line: ::std::string::String,
    pub trade_dt: ::std::string::String,
    pub init_dep_amt: f64,
    pub outstanding_bal: f64,
    pub adj1: f64,
    pub adj2: f64,
    pub adj3: f64,
    pub adj4: f64,
    pub adj5: f64,
    pub adj6: f64,
    pub input_benchmark: ::std::string::String,
    pub pdo: ::std::string::String,
    pub npa: ::std::string::String,
    pub method: ::std::string::String,
    pub rate_curve: ::std::string::String,
    pub org_tenor: i64,
    pub rep_tenor: i64,
    pub fx_spread: f64,
    pub var_spread: f64,
    pub first_ftp: f64,
    pub bc_as_on_rule: i64,
    pub tenor_start_date_rule: i64,
    pub tenor_end_date_rule: i64,
    pub bc_as_on_applied: i64,
    pub tenor_start_date_applied: i64,
    pub tenor_end_date_applied: i64,
    pub alm_concat: ::std::string::String,
    pub two_point_concat: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl One_acc_view {
    pub fn new() -> One_acc_view {
        ::std::default::Default::default()
    }

    // string account_number = 1;

    pub fn clear_account_number(&mut self) {
        self.account_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_number(&mut self, v: ::std::string::String) {
        self.account_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_number(&mut self) -> &mut ::std::string::String {
        &mut self.account_number
    }

    // Take field
    pub fn take_account_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_number, ::std::string::String::new())
    }

    pub fn get_account_number(&self) -> &str {
        &self.account_number
    }

    // string cust_name = 2;

    pub fn clear_cust_name(&mut self) {
        self.cust_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_name(&mut self, v: ::std::string::String) {
        self.cust_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_name
    }

    // Take field
    pub fn take_cust_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_name, ::std::string::String::new())
    }

    pub fn get_cust_name(&self) -> &str {
        &self.cust_name
    }

    // double average_balance = 3;

    pub fn clear_average_balance(&mut self) {
        self.average_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_average_balance(&mut self, v: f64) {
        self.average_balance = v;
    }

    pub fn get_average_balance(&self) -> f64 {
        self.average_balance
    }

    // double accr_int = 4;

    pub fn clear_accr_int(&mut self) {
        self.accr_int = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accr_int(&mut self, v: f64) {
        self.accr_int = v;
    }

    pub fn get_accr_int(&self) -> f64 {
        self.accr_int
    }

    // double yld_to_call = 5;

    pub fn clear_yld_to_call(&mut self) {
        self.yld_to_call = 0.;
    }

    // Param is passed by value, moved
    pub fn set_yld_to_call(&mut self, v: f64) {
        self.yld_to_call = v;
    }

    pub fn get_yld_to_call(&self) -> f64 {
        self.yld_to_call
    }

    // double int_rate = 6;

    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }

    // double base_rate = 7;

    pub fn clear_base_rate(&mut self) {
        self.base_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_rate(&mut self, v: f64) {
        self.base_rate = v;
    }

    pub fn get_base_rate(&self) -> f64 {
        self.base_rate
    }

    // double final_ftp_rate = 8;

    pub fn clear_final_ftp_rate(&mut self) {
        self.final_ftp_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_final_ftp_rate(&mut self, v: f64) {
        self.final_ftp_rate = v;
    }

    pub fn get_final_ftp_rate(&self) -> f64 {
        self.final_ftp_rate
    }

    // int64 value_date = 9;

    pub fn clear_value_date(&mut self) {
        self.value_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_date(&mut self, v: i64) {
        self.value_date = v;
    }

    pub fn get_value_date(&self) -> i64 {
        self.value_date
    }

    // int64 maturity_date = 10;

    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }

    // int64 nxt_rep_dt = 11;

    pub fn clear_nxt_rep_dt(&mut self) {
        self.nxt_rep_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_rep_dt(&mut self, v: i64) {
        self.nxt_rep_dt = v;
    }

    pub fn get_nxt_rep_dt(&self) -> i64 {
        self.nxt_rep_dt
    }

    // int64 lst_rep_dt = 12;

    pub fn clear_lst_rep_dt(&mut self) {
        self.lst_rep_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_lst_rep_dt(&mut self, v: i64) {
        self.lst_rep_dt = v;
    }

    pub fn get_lst_rep_dt(&self) -> i64 {
        self.lst_rep_dt
    }

    // string mis1 = 13;

    pub fn clear_mis1(&mut self) {
        self.mis1.clear();
    }

    // Param is passed by value, moved
    pub fn set_mis1(&mut self, v: ::std::string::String) {
        self.mis1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mis1(&mut self) -> &mut ::std::string::String {
        &mut self.mis1
    }

    // Take field
    pub fn take_mis1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mis1, ::std::string::String::new())
    }

    pub fn get_mis1(&self) -> &str {
        &self.mis1
    }

    // string mis2 = 14;

    pub fn clear_mis2(&mut self) {
        self.mis2.clear();
    }

    // Param is passed by value, moved
    pub fn set_mis2(&mut self, v: ::std::string::String) {
        self.mis2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mis2(&mut self) -> &mut ::std::string::String {
        &mut self.mis2
    }

    // Take field
    pub fn take_mis2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mis2, ::std::string::String::new())
    }

    pub fn get_mis2(&self) -> &str {
        &self.mis2
    }

    // string psl_code = 15;

    pub fn clear_psl_code(&mut self) {
        self.psl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_psl_code(&mut self, v: ::std::string::String) {
        self.psl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_psl_code(&mut self) -> &mut ::std::string::String {
        &mut self.psl_code
    }

    // Take field
    pub fn take_psl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.psl_code, ::std::string::String::new())
    }

    pub fn get_psl_code(&self) -> &str {
        &self.psl_code
    }

    // string prod_type = 16;

    pub fn clear_prod_type(&mut self) {
        self.prod_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_type(&mut self, v: ::std::string::String) {
        self.prod_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_type(&mut self) -> &mut ::std::string::String {
        &mut self.prod_type
    }

    // Take field
    pub fn take_prod_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_type, ::std::string::String::new())
    }

    pub fn get_prod_type(&self) -> &str {
        &self.prod_type
    }

    // string rate_flag = 17;

    pub fn clear_rate_flag(&mut self) {
        self.rate_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_flag(&mut self, v: ::std::string::String) {
        self.rate_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_flag(&mut self) -> &mut ::std::string::String {
        &mut self.rate_flag
    }

    // Take field
    pub fn take_rate_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_flag, ::std::string::String::new())
    }

    pub fn get_rate_flag(&self) -> &str {
        &self.rate_flag
    }

    // string repr_spread = 18;

    pub fn clear_repr_spread(&mut self) {
        self.repr_spread.clear();
    }

    // Param is passed by value, moved
    pub fn set_repr_spread(&mut self, v: ::std::string::String) {
        self.repr_spread = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repr_spread(&mut self) -> &mut ::std::string::String {
        &mut self.repr_spread
    }

    // Take field
    pub fn take_repr_spread(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.repr_spread, ::std::string::String::new())
    }

    pub fn get_repr_spread(&self) -> &str {
        &self.repr_spread
    }

    // string source_file_name = 19;

    pub fn clear_source_file_name(&mut self) {
        self.source_file_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_file_name(&mut self, v: ::std::string::String) {
        self.source_file_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_file_name(&mut self) -> &mut ::std::string::String {
        &mut self.source_file_name
    }

    // Take field
    pub fn take_source_file_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source_file_name, ::std::string::String::new())
    }

    pub fn get_source_file_name(&self) -> &str {
        &self.source_file_name
    }

    // string ccy = 20;

    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }

    // string gl = 21;

    pub fn clear_gl(&mut self) {
        self.gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl(&mut self, v: ::std::string::String) {
        self.gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl(&mut self) -> &mut ::std::string::String {
        &mut self.gl
    }

    // Take field
    pub fn take_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl, ::std::string::String::new())
    }

    pub fn get_gl(&self) -> &str {
        &self.gl
    }

    // string cust_id = 22;

    pub fn clear_cust_id(&mut self) {
        self.cust_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: ::std::string::String) {
        self.cust_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_id
    }

    // Take field
    pub fn take_cust_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_id, ::std::string::String::new())
    }

    pub fn get_cust_id(&self) -> &str {
        &self.cust_id
    }

    // double final_ftp_amt = 23;

    pub fn clear_final_ftp_amt(&mut self) {
        self.final_ftp_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_final_ftp_amt(&mut self, v: f64) {
        self.final_ftp_amt = v;
    }

    pub fn get_final_ftp_amt(&self) -> f64 {
        self.final_ftp_amt
    }

    // string alm_line = 24;

    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }

    // string trade_dt = 25;

    pub fn clear_trade_dt(&mut self) {
        self.trade_dt.clear();
    }

    // Param is passed by value, moved
    pub fn set_trade_dt(&mut self, v: ::std::string::String) {
        self.trade_dt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trade_dt(&mut self) -> &mut ::std::string::String {
        &mut self.trade_dt
    }

    // Take field
    pub fn take_trade_dt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trade_dt, ::std::string::String::new())
    }

    pub fn get_trade_dt(&self) -> &str {
        &self.trade_dt
    }

    // double init_dep_amt = 26;

    pub fn clear_init_dep_amt(&mut self) {
        self.init_dep_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_init_dep_amt(&mut self, v: f64) {
        self.init_dep_amt = v;
    }

    pub fn get_init_dep_amt(&self) -> f64 {
        self.init_dep_amt
    }

    // double outstanding_bal = 27;

    pub fn clear_outstanding_bal(&mut self) {
        self.outstanding_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_outstanding_bal(&mut self, v: f64) {
        self.outstanding_bal = v;
    }

    pub fn get_outstanding_bal(&self) -> f64 {
        self.outstanding_bal
    }

    // double adj1 = 28;

    pub fn clear_adj1(&mut self) {
        self.adj1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj1(&mut self, v: f64) {
        self.adj1 = v;
    }

    pub fn get_adj1(&self) -> f64 {
        self.adj1
    }

    // double adj2 = 29;

    pub fn clear_adj2(&mut self) {
        self.adj2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj2(&mut self, v: f64) {
        self.adj2 = v;
    }

    pub fn get_adj2(&self) -> f64 {
        self.adj2
    }

    // double adj3 = 30;

    pub fn clear_adj3(&mut self) {
        self.adj3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj3(&mut self, v: f64) {
        self.adj3 = v;
    }

    pub fn get_adj3(&self) -> f64 {
        self.adj3
    }

    // double adj4 = 31;

    pub fn clear_adj4(&mut self) {
        self.adj4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj4(&mut self, v: f64) {
        self.adj4 = v;
    }

    pub fn get_adj4(&self) -> f64 {
        self.adj4
    }

    // double adj5 = 32;

    pub fn clear_adj5(&mut self) {
        self.adj5 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj5(&mut self, v: f64) {
        self.adj5 = v;
    }

    pub fn get_adj5(&self) -> f64 {
        self.adj5
    }

    // double adj6 = 33;

    pub fn clear_adj6(&mut self) {
        self.adj6 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj6(&mut self, v: f64) {
        self.adj6 = v;
    }

    pub fn get_adj6(&self) -> f64 {
        self.adj6
    }

    // string input_benchmark = 34;

    pub fn clear_input_benchmark(&mut self) {
        self.input_benchmark.clear();
    }

    // Param is passed by value, moved
    pub fn set_input_benchmark(&mut self, v: ::std::string::String) {
        self.input_benchmark = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_input_benchmark(&mut self) -> &mut ::std::string::String {
        &mut self.input_benchmark
    }

    // Take field
    pub fn take_input_benchmark(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.input_benchmark, ::std::string::String::new())
    }

    pub fn get_input_benchmark(&self) -> &str {
        &self.input_benchmark
    }

    // string pdo = 35;

    pub fn clear_pdo(&mut self) {
        self.pdo.clear();
    }

    // Param is passed by value, moved
    pub fn set_pdo(&mut self, v: ::std::string::String) {
        self.pdo = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pdo(&mut self) -> &mut ::std::string::String {
        &mut self.pdo
    }

    // Take field
    pub fn take_pdo(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pdo, ::std::string::String::new())
    }

    pub fn get_pdo(&self) -> &str {
        &self.pdo
    }

    // string npa = 36;

    pub fn clear_npa(&mut self) {
        self.npa.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa(&mut self, v: ::std::string::String) {
        self.npa = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa(&mut self) -> &mut ::std::string::String {
        &mut self.npa
    }

    // Take field
    pub fn take_npa(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa, ::std::string::String::new())
    }

    pub fn get_npa(&self) -> &str {
        &self.npa
    }

    // string method = 37;

    pub fn clear_method(&mut self) {
        self.method.clear();
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: ::std::string::String) {
        self.method = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method(&mut self) -> &mut ::std::string::String {
        &mut self.method
    }

    // Take field
    pub fn take_method(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.method, ::std::string::String::new())
    }

    pub fn get_method(&self) -> &str {
        &self.method
    }

    // string rate_curve = 38;

    pub fn clear_rate_curve(&mut self) {
        self.rate_curve.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_curve(&mut self, v: ::std::string::String) {
        self.rate_curve = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_curve(&mut self) -> &mut ::std::string::String {
        &mut self.rate_curve
    }

    // Take field
    pub fn take_rate_curve(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_curve, ::std::string::String::new())
    }

    pub fn get_rate_curve(&self) -> &str {
        &self.rate_curve
    }

    // int64 org_tenor = 39;

    pub fn clear_org_tenor(&mut self) {
        self.org_tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_org_tenor(&mut self, v: i64) {
        self.org_tenor = v;
    }

    pub fn get_org_tenor(&self) -> i64 {
        self.org_tenor
    }

    // int64 rep_tenor = 40;

    pub fn clear_rep_tenor(&mut self) {
        self.rep_tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_rep_tenor(&mut self, v: i64) {
        self.rep_tenor = v;
    }

    pub fn get_rep_tenor(&self) -> i64 {
        self.rep_tenor
    }

    // double fx_spread = 41;

    pub fn clear_fx_spread(&mut self) {
        self.fx_spread = 0.;
    }

    // Param is passed by value, moved
    pub fn set_fx_spread(&mut self, v: f64) {
        self.fx_spread = v;
    }

    pub fn get_fx_spread(&self) -> f64 {
        self.fx_spread
    }

    // double var_spread = 42;

    pub fn clear_var_spread(&mut self) {
        self.var_spread = 0.;
    }

    // Param is passed by value, moved
    pub fn set_var_spread(&mut self, v: f64) {
        self.var_spread = v;
    }

    pub fn get_var_spread(&self) -> f64 {
        self.var_spread
    }

    // double first_ftp = 43;

    pub fn clear_first_ftp(&mut self) {
        self.first_ftp = 0.;
    }

    // Param is passed by value, moved
    pub fn set_first_ftp(&mut self, v: f64) {
        self.first_ftp = v;
    }

    pub fn get_first_ftp(&self) -> f64 {
        self.first_ftp
    }

    // int64 bc_as_on_rule = 44;

    pub fn clear_bc_as_on_rule(&mut self) {
        self.bc_as_on_rule = 0;
    }

    // Param is passed by value, moved
    pub fn set_bc_as_on_rule(&mut self, v: i64) {
        self.bc_as_on_rule = v;
    }

    pub fn get_bc_as_on_rule(&self) -> i64 {
        self.bc_as_on_rule
    }

    // int64 tenor_start_date_rule = 45;

    pub fn clear_tenor_start_date_rule(&mut self) {
        self.tenor_start_date_rule = 0;
    }

    // Param is passed by value, moved
    pub fn set_tenor_start_date_rule(&mut self, v: i64) {
        self.tenor_start_date_rule = v;
    }

    pub fn get_tenor_start_date_rule(&self) -> i64 {
        self.tenor_start_date_rule
    }

    // int64 tenor_end_date_rule = 46;

    pub fn clear_tenor_end_date_rule(&mut self) {
        self.tenor_end_date_rule = 0;
    }

    // Param is passed by value, moved
    pub fn set_tenor_end_date_rule(&mut self, v: i64) {
        self.tenor_end_date_rule = v;
    }

    pub fn get_tenor_end_date_rule(&self) -> i64 {
        self.tenor_end_date_rule
    }

    // int64 bc_as_on_applied = 47;

    pub fn clear_bc_as_on_applied(&mut self) {
        self.bc_as_on_applied = 0;
    }

    // Param is passed by value, moved
    pub fn set_bc_as_on_applied(&mut self, v: i64) {
        self.bc_as_on_applied = v;
    }

    pub fn get_bc_as_on_applied(&self) -> i64 {
        self.bc_as_on_applied
    }

    // int64 tenor_start_date_applied = 48;

    pub fn clear_tenor_start_date_applied(&mut self) {
        self.tenor_start_date_applied = 0;
    }

    // Param is passed by value, moved
    pub fn set_tenor_start_date_applied(&mut self, v: i64) {
        self.tenor_start_date_applied = v;
    }

    pub fn get_tenor_start_date_applied(&self) -> i64 {
        self.tenor_start_date_applied
    }

    // int64 tenor_end_date_applied = 49;

    pub fn clear_tenor_end_date_applied(&mut self) {
        self.tenor_end_date_applied = 0;
    }

    // Param is passed by value, moved
    pub fn set_tenor_end_date_applied(&mut self, v: i64) {
        self.tenor_end_date_applied = v;
    }

    pub fn get_tenor_end_date_applied(&self) -> i64 {
        self.tenor_end_date_applied
    }

    // string alm_concat = 50;

    pub fn clear_alm_concat(&mut self) {
        self.alm_concat.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_concat(&mut self, v: ::std::string::String) {
        self.alm_concat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_concat(&mut self) -> &mut ::std::string::String {
        &mut self.alm_concat
    }

    // Take field
    pub fn take_alm_concat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_concat, ::std::string::String::new())
    }

    pub fn get_alm_concat(&self) -> &str {
        &self.alm_concat
    }

    // string two_point_concat = 51;

    pub fn clear_two_point_concat(&mut self) {
        self.two_point_concat.clear();
    }

    // Param is passed by value, moved
    pub fn set_two_point_concat(&mut self, v: ::std::string::String) {
        self.two_point_concat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_two_point_concat(&mut self) -> &mut ::std::string::String {
        &mut self.two_point_concat
    }

    // Take field
    pub fn take_two_point_concat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.two_point_concat, ::std::string::String::new())
    }

    pub fn get_two_point_concat(&self) -> &str {
        &self.two_point_concat
    }
}

impl ::protobuf::Message for One_acc_view {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_number)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.average_balance = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.accr_int = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.yld_to_call = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.base_rate = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.final_ftp_rate = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.value_date = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_rep_dt = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lst_rep_dt = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mis1)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mis2)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.psl_code)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_type)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_flag)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.repr_spread)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source_file_name)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_id)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.final_ftp_amt = tmp;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alm_line)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trade_dt)?;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.init_dep_amt = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.outstanding_bal = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj1 = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj2 = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj3 = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj4 = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj5 = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj6 = tmp;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.input_benchmark)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pdo)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.method)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_curve)?;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.org_tenor = tmp;
                },
                40 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rep_tenor = tmp;
                },
                41 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.fx_spread = tmp;
                },
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.var_spread = tmp;
                },
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.first_ftp = tmp;
                },
                44 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.bc_as_on_rule = tmp;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tenor_start_date_rule = tmp;
                },
                46 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tenor_end_date_rule = tmp;
                },
                47 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.bc_as_on_applied = tmp;
                },
                48 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tenor_start_date_applied = tmp;
                },
                49 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tenor_end_date_applied = tmp;
                },
                50 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alm_concat)?;
                },
                51 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.two_point_concat)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.account_number);
        }
        if !self.cust_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.cust_name);
        }
        if self.average_balance != 0. {
            my_size += 9;
        }
        if self.accr_int != 0. {
            my_size += 9;
        }
        if self.yld_to_call != 0. {
            my_size += 9;
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if self.base_rate != 0. {
            my_size += 9;
        }
        if self.final_ftp_rate != 0. {
            my_size += 9;
        }
        if self.value_date != 0 {
            my_size += ::protobuf::rt::value_size(9, self.value_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(10, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.nxt_rep_dt != 0 {
            my_size += ::protobuf::rt::value_size(11, self.nxt_rep_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lst_rep_dt != 0 {
            my_size += ::protobuf::rt::value_size(12, self.lst_rep_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.mis1.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.mis1);
        }
        if !self.mis2.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.mis2);
        }
        if !self.psl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.psl_code);
        }
        if !self.prod_type.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.prod_type);
        }
        if !self.rate_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.rate_flag);
        }
        if !self.repr_spread.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.repr_spread);
        }
        if !self.source_file_name.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.source_file_name);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.ccy);
        }
        if !self.gl.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.gl);
        }
        if !self.cust_id.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.cust_id);
        }
        if self.final_ftp_amt != 0. {
            my_size += 10;
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.alm_line);
        }
        if !self.trade_dt.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.trade_dt);
        }
        if self.init_dep_amt != 0. {
            my_size += 10;
        }
        if self.outstanding_bal != 0. {
            my_size += 10;
        }
        if self.adj1 != 0. {
            my_size += 10;
        }
        if self.adj2 != 0. {
            my_size += 10;
        }
        if self.adj3 != 0. {
            my_size += 10;
        }
        if self.adj4 != 0. {
            my_size += 10;
        }
        if self.adj5 != 0. {
            my_size += 10;
        }
        if self.adj6 != 0. {
            my_size += 10;
        }
        if !self.input_benchmark.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.input_benchmark);
        }
        if !self.pdo.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.pdo);
        }
        if !self.npa.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.npa);
        }
        if !self.method.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.method);
        }
        if !self.rate_curve.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.rate_curve);
        }
        if self.org_tenor != 0 {
            my_size += ::protobuf::rt::value_size(39, self.org_tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rep_tenor != 0 {
            my_size += ::protobuf::rt::value_size(40, self.rep_tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fx_spread != 0. {
            my_size += 10;
        }
        if self.var_spread != 0. {
            my_size += 10;
        }
        if self.first_ftp != 0. {
            my_size += 10;
        }
        if self.bc_as_on_rule != 0 {
            my_size += ::protobuf::rt::value_size(44, self.bc_as_on_rule, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tenor_start_date_rule != 0 {
            my_size += ::protobuf::rt::value_size(45, self.tenor_start_date_rule, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tenor_end_date_rule != 0 {
            my_size += ::protobuf::rt::value_size(46, self.tenor_end_date_rule, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bc_as_on_applied != 0 {
            my_size += ::protobuf::rt::value_size(47, self.bc_as_on_applied, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tenor_start_date_applied != 0 {
            my_size += ::protobuf::rt::value_size(48, self.tenor_start_date_applied, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tenor_end_date_applied != 0 {
            my_size += ::protobuf::rt::value_size(49, self.tenor_end_date_applied, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.alm_concat.is_empty() {
            my_size += ::protobuf::rt::string_size(50, &self.alm_concat);
        }
        if !self.two_point_concat.is_empty() {
            my_size += ::protobuf::rt::string_size(51, &self.two_point_concat);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.account_number.is_empty() {
            os.write_string(1, &self.account_number)?;
        }
        if !self.cust_name.is_empty() {
            os.write_string(2, &self.cust_name)?;
        }
        if self.average_balance != 0. {
            os.write_double(3, self.average_balance)?;
        }
        if self.accr_int != 0. {
            os.write_double(4, self.accr_int)?;
        }
        if self.yld_to_call != 0. {
            os.write_double(5, self.yld_to_call)?;
        }
        if self.int_rate != 0. {
            os.write_double(6, self.int_rate)?;
        }
        if self.base_rate != 0. {
            os.write_double(7, self.base_rate)?;
        }
        if self.final_ftp_rate != 0. {
            os.write_double(8, self.final_ftp_rate)?;
        }
        if self.value_date != 0 {
            os.write_int64(9, self.value_date)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(10, self.maturity_date)?;
        }
        if self.nxt_rep_dt != 0 {
            os.write_int64(11, self.nxt_rep_dt)?;
        }
        if self.lst_rep_dt != 0 {
            os.write_int64(12, self.lst_rep_dt)?;
        }
        if !self.mis1.is_empty() {
            os.write_string(13, &self.mis1)?;
        }
        if !self.mis2.is_empty() {
            os.write_string(14, &self.mis2)?;
        }
        if !self.psl_code.is_empty() {
            os.write_string(15, &self.psl_code)?;
        }
        if !self.prod_type.is_empty() {
            os.write_string(16, &self.prod_type)?;
        }
        if !self.rate_flag.is_empty() {
            os.write_string(17, &self.rate_flag)?;
        }
        if !self.repr_spread.is_empty() {
            os.write_string(18, &self.repr_spread)?;
        }
        if !self.source_file_name.is_empty() {
            os.write_string(19, &self.source_file_name)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(20, &self.ccy)?;
        }
        if !self.gl.is_empty() {
            os.write_string(21, &self.gl)?;
        }
        if !self.cust_id.is_empty() {
            os.write_string(22, &self.cust_id)?;
        }
        if self.final_ftp_amt != 0. {
            os.write_double(23, self.final_ftp_amt)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(24, &self.alm_line)?;
        }
        if !self.trade_dt.is_empty() {
            os.write_string(25, &self.trade_dt)?;
        }
        if self.init_dep_amt != 0. {
            os.write_double(26, self.init_dep_amt)?;
        }
        if self.outstanding_bal != 0. {
            os.write_double(27, self.outstanding_bal)?;
        }
        if self.adj1 != 0. {
            os.write_double(28, self.adj1)?;
        }
        if self.adj2 != 0. {
            os.write_double(29, self.adj2)?;
        }
        if self.adj3 != 0. {
            os.write_double(30, self.adj3)?;
        }
        if self.adj4 != 0. {
            os.write_double(31, self.adj4)?;
        }
        if self.adj5 != 0. {
            os.write_double(32, self.adj5)?;
        }
        if self.adj6 != 0. {
            os.write_double(33, self.adj6)?;
        }
        if !self.input_benchmark.is_empty() {
            os.write_string(34, &self.input_benchmark)?;
        }
        if !self.pdo.is_empty() {
            os.write_string(35, &self.pdo)?;
        }
        if !self.npa.is_empty() {
            os.write_string(36, &self.npa)?;
        }
        if !self.method.is_empty() {
            os.write_string(37, &self.method)?;
        }
        if !self.rate_curve.is_empty() {
            os.write_string(38, &self.rate_curve)?;
        }
        if self.org_tenor != 0 {
            os.write_int64(39, self.org_tenor)?;
        }
        if self.rep_tenor != 0 {
            os.write_int64(40, self.rep_tenor)?;
        }
        if self.fx_spread != 0. {
            os.write_double(41, self.fx_spread)?;
        }
        if self.var_spread != 0. {
            os.write_double(42, self.var_spread)?;
        }
        if self.first_ftp != 0. {
            os.write_double(43, self.first_ftp)?;
        }
        if self.bc_as_on_rule != 0 {
            os.write_int64(44, self.bc_as_on_rule)?;
        }
        if self.tenor_start_date_rule != 0 {
            os.write_int64(45, self.tenor_start_date_rule)?;
        }
        if self.tenor_end_date_rule != 0 {
            os.write_int64(46, self.tenor_end_date_rule)?;
        }
        if self.bc_as_on_applied != 0 {
            os.write_int64(47, self.bc_as_on_applied)?;
        }
        if self.tenor_start_date_applied != 0 {
            os.write_int64(48, self.tenor_start_date_applied)?;
        }
        if self.tenor_end_date_applied != 0 {
            os.write_int64(49, self.tenor_end_date_applied)?;
        }
        if !self.alm_concat.is_empty() {
            os.write_string(50, &self.alm_concat)?;
        }
        if !self.two_point_concat.is_empty() {
            os.write_string(51, &self.two_point_concat)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> One_acc_view {
        One_acc_view::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "account_number",
                    |m: &One_acc_view| { &m.account_number },
                    |m: &mut One_acc_view| { &mut m.account_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_name",
                    |m: &One_acc_view| { &m.cust_name },
                    |m: &mut One_acc_view| { &mut m.cust_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "average_balance",
                    |m: &One_acc_view| { &m.average_balance },
                    |m: &mut One_acc_view| { &mut m.average_balance },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "accr_int",
                    |m: &One_acc_view| { &m.accr_int },
                    |m: &mut One_acc_view| { &mut m.accr_int },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "yld_to_call",
                    |m: &One_acc_view| { &m.yld_to_call },
                    |m: &mut One_acc_view| { &mut m.yld_to_call },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rate",
                    |m: &One_acc_view| { &m.int_rate },
                    |m: &mut One_acc_view| { &mut m.int_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "base_rate",
                    |m: &One_acc_view| { &m.base_rate },
                    |m: &mut One_acc_view| { &mut m.base_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "final_ftp_rate",
                    |m: &One_acc_view| { &m.final_ftp_rate },
                    |m: &mut One_acc_view| { &mut m.final_ftp_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "value_date",
                    |m: &One_acc_view| { &m.value_date },
                    |m: &mut One_acc_view| { &mut m.value_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "maturity_date",
                    |m: &One_acc_view| { &m.maturity_date },
                    |m: &mut One_acc_view| { &mut m.maturity_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "nxt_rep_dt",
                    |m: &One_acc_view| { &m.nxt_rep_dt },
                    |m: &mut One_acc_view| { &mut m.nxt_rep_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "lst_rep_dt",
                    |m: &One_acc_view| { &m.lst_rep_dt },
                    |m: &mut One_acc_view| { &mut m.lst_rep_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "mis1",
                    |m: &One_acc_view| { &m.mis1 },
                    |m: &mut One_acc_view| { &mut m.mis1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "mis2",
                    |m: &One_acc_view| { &m.mis2 },
                    |m: &mut One_acc_view| { &mut m.mis2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "psl_code",
                    |m: &One_acc_view| { &m.psl_code },
                    |m: &mut One_acc_view| { &mut m.psl_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "prod_type",
                    |m: &One_acc_view| { &m.prod_type },
                    |m: &mut One_acc_view| { &mut m.prod_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rate_flag",
                    |m: &One_acc_view| { &m.rate_flag },
                    |m: &mut One_acc_view| { &mut m.rate_flag },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "repr_spread",
                    |m: &One_acc_view| { &m.repr_spread },
                    |m: &mut One_acc_view| { &mut m.repr_spread },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "source_file_name",
                    |m: &One_acc_view| { &m.source_file_name },
                    |m: &mut One_acc_view| { &mut m.source_file_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy",
                    |m: &One_acc_view| { &m.ccy },
                    |m: &mut One_acc_view| { &mut m.ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gl",
                    |m: &One_acc_view| { &m.gl },
                    |m: &mut One_acc_view| { &mut m.gl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_id",
                    |m: &One_acc_view| { &m.cust_id },
                    |m: &mut One_acc_view| { &mut m.cust_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "final_ftp_amt",
                    |m: &One_acc_view| { &m.final_ftp_amt },
                    |m: &mut One_acc_view| { &mut m.final_ftp_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "alm_line",
                    |m: &One_acc_view| { &m.alm_line },
                    |m: &mut One_acc_view| { &mut m.alm_line },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "trade_dt",
                    |m: &One_acc_view| { &m.trade_dt },
                    |m: &mut One_acc_view| { &mut m.trade_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "init_dep_amt",
                    |m: &One_acc_view| { &m.init_dep_amt },
                    |m: &mut One_acc_view| { &mut m.init_dep_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "outstanding_bal",
                    |m: &One_acc_view| { &m.outstanding_bal },
                    |m: &mut One_acc_view| { &mut m.outstanding_bal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj1",
                    |m: &One_acc_view| { &m.adj1 },
                    |m: &mut One_acc_view| { &mut m.adj1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj2",
                    |m: &One_acc_view| { &m.adj2 },
                    |m: &mut One_acc_view| { &mut m.adj2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj3",
                    |m: &One_acc_view| { &m.adj3 },
                    |m: &mut One_acc_view| { &mut m.adj3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj4",
                    |m: &One_acc_view| { &m.adj4 },
                    |m: &mut One_acc_view| { &mut m.adj4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj5",
                    |m: &One_acc_view| { &m.adj5 },
                    |m: &mut One_acc_view| { &mut m.adj5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj6",
                    |m: &One_acc_view| { &m.adj6 },
                    |m: &mut One_acc_view| { &mut m.adj6 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "input_benchmark",
                    |m: &One_acc_view| { &m.input_benchmark },
                    |m: &mut One_acc_view| { &mut m.input_benchmark },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pdo",
                    |m: &One_acc_view| { &m.pdo },
                    |m: &mut One_acc_view| { &mut m.pdo },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "npa",
                    |m: &One_acc_view| { &m.npa },
                    |m: &mut One_acc_view| { &mut m.npa },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "method",
                    |m: &One_acc_view| { &m.method },
                    |m: &mut One_acc_view| { &mut m.method },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rate_curve",
                    |m: &One_acc_view| { &m.rate_curve },
                    |m: &mut One_acc_view| { &mut m.rate_curve },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "org_tenor",
                    |m: &One_acc_view| { &m.org_tenor },
                    |m: &mut One_acc_view| { &mut m.org_tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "rep_tenor",
                    |m: &One_acc_view| { &m.rep_tenor },
                    |m: &mut One_acc_view| { &mut m.rep_tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "fx_spread",
                    |m: &One_acc_view| { &m.fx_spread },
                    |m: &mut One_acc_view| { &mut m.fx_spread },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "var_spread",
                    |m: &One_acc_view| { &m.var_spread },
                    |m: &mut One_acc_view| { &mut m.var_spread },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "first_ftp",
                    |m: &One_acc_view| { &m.first_ftp },
                    |m: &mut One_acc_view| { &mut m.first_ftp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "bc_as_on_rule",
                    |m: &One_acc_view| { &m.bc_as_on_rule },
                    |m: &mut One_acc_view| { &mut m.bc_as_on_rule },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tenor_start_date_rule",
                    |m: &One_acc_view| { &m.tenor_start_date_rule },
                    |m: &mut One_acc_view| { &mut m.tenor_start_date_rule },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tenor_end_date_rule",
                    |m: &One_acc_view| { &m.tenor_end_date_rule },
                    |m: &mut One_acc_view| { &mut m.tenor_end_date_rule },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "bc_as_on_applied",
                    |m: &One_acc_view| { &m.bc_as_on_applied },
                    |m: &mut One_acc_view| { &mut m.bc_as_on_applied },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tenor_start_date_applied",
                    |m: &One_acc_view| { &m.tenor_start_date_applied },
                    |m: &mut One_acc_view| { &mut m.tenor_start_date_applied },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tenor_end_date_applied",
                    |m: &One_acc_view| { &m.tenor_end_date_applied },
                    |m: &mut One_acc_view| { &mut m.tenor_end_date_applied },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "alm_concat",
                    |m: &One_acc_view| { &m.alm_concat },
                    |m: &mut One_acc_view| { &mut m.alm_concat },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "two_point_concat",
                    |m: &One_acc_view| { &m.two_point_concat },
                    |m: &mut One_acc_view| { &mut m.two_point_concat },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<One_acc_view>(
                    "One_acc_view",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static One_acc_view {
        static mut instance: ::protobuf::lazy::Lazy<One_acc_view> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const One_acc_view,
        };
        unsafe {
            instance.get(One_acc_view::new)
        }
    }
}

impl ::protobuf::Clear for One_acc_view {
    fn clear(&mut self) {
        self.clear_account_number();
        self.clear_cust_name();
        self.clear_average_balance();
        self.clear_accr_int();
        self.clear_yld_to_call();
        self.clear_int_rate();
        self.clear_base_rate();
        self.clear_final_ftp_rate();
        self.clear_value_date();
        self.clear_maturity_date();
        self.clear_nxt_rep_dt();
        self.clear_lst_rep_dt();
        self.clear_mis1();
        self.clear_mis2();
        self.clear_psl_code();
        self.clear_prod_type();
        self.clear_rate_flag();
        self.clear_repr_spread();
        self.clear_source_file_name();
        self.clear_ccy();
        self.clear_gl();
        self.clear_cust_id();
        self.clear_final_ftp_amt();
        self.clear_alm_line();
        self.clear_trade_dt();
        self.clear_init_dep_amt();
        self.clear_outstanding_bal();
        self.clear_adj1();
        self.clear_adj2();
        self.clear_adj3();
        self.clear_adj4();
        self.clear_adj5();
        self.clear_adj6();
        self.clear_input_benchmark();
        self.clear_pdo();
        self.clear_npa();
        self.clear_method();
        self.clear_rate_curve();
        self.clear_org_tenor();
        self.clear_rep_tenor();
        self.clear_fx_spread();
        self.clear_var_spread();
        self.clear_first_ftp();
        self.clear_bc_as_on_rule();
        self.clear_tenor_start_date_rule();
        self.clear_tenor_end_date_rule();
        self.clear_bc_as_on_applied();
        self.clear_tenor_start_date_applied();
        self.clear_tenor_end_date_applied();
        self.clear_alm_concat();
        self.clear_two_point_concat();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for One_acc_view {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for One_acc_view {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bproto/one_acc_view_od.proto\"\xb0\x0c\n\x0cOne_acc_view\x12%\n\x0e\
    account_number\x18\x01\x20\x01(\tR\raccountNumber\x12\x1b\n\tcust_name\
    \x18\x02\x20\x01(\tR\x08custName\x12'\n\x0faverage_balance\x18\x03\x20\
    \x01(\x01R\x0eaverageBalance\x12\x19\n\x08accr_int\x18\x04\x20\x01(\x01R\
    \x07accrInt\x12\x1e\n\x0byld_to_call\x18\x05\x20\x01(\x01R\tyldToCall\
    \x12\x19\n\x08int_rate\x18\x06\x20\x01(\x01R\x07intRate\x12\x1b\n\tbase_\
    rate\x18\x07\x20\x01(\x01R\x08baseRate\x12$\n\x0efinal_ftp_rate\x18\x08\
    \x20\x01(\x01R\x0cfinalFtpRate\x12\x1d\n\nvalue_date\x18\t\x20\x01(\x03R\
    \tvalueDate\x12#\n\rmaturity_date\x18\n\x20\x01(\x03R\x0cmaturityDate\
    \x12\x1c\n\nnxt_rep_dt\x18\x0b\x20\x01(\x03R\x08nxtRepDt\x12\x1c\n\nlst_\
    rep_dt\x18\x0c\x20\x01(\x03R\x08lstRepDt\x12\x12\n\x04mis1\x18\r\x20\x01\
    (\tR\x04mis1\x12\x12\n\x04mis2\x18\x0e\x20\x01(\tR\x04mis2\x12\x19\n\x08\
    psl_code\x18\x0f\x20\x01(\tR\x07pslCode\x12\x1b\n\tprod_type\x18\x10\x20\
    \x01(\tR\x08prodType\x12\x1b\n\trate_flag\x18\x11\x20\x01(\tR\x08rateFla\
    g\x12\x1f\n\x0brepr_spread\x18\x12\x20\x01(\tR\nreprSpread\x12(\n\x10sou\
    rce_file_name\x18\x13\x20\x01(\tR\x0esourceFileName\x12\x10\n\x03ccy\x18\
    \x14\x20\x01(\tR\x03ccy\x12\x0e\n\x02gl\x18\x15\x20\x01(\tR\x02gl\x12\
    \x17\n\x07cust_id\x18\x16\x20\x01(\tR\x06custId\x12\"\n\rfinal_ftp_amt\
    \x18\x17\x20\x01(\x01R\x0bfinalFtpAmt\x12\x19\n\x08alm_line\x18\x18\x20\
    \x01(\tR\x07almLine\x12\x19\n\x08trade_dt\x18\x19\x20\x01(\tR\x07tradeDt\
    \x12\x20\n\x0cinit_dep_amt\x18\x1a\x20\x01(\x01R\ninitDepAmt\x12'\n\x0fo\
    utstanding_bal\x18\x1b\x20\x01(\x01R\x0eoutstandingBal\x12\x12\n\x04adj1\
    \x18\x1c\x20\x01(\x01R\x04adj1\x12\x12\n\x04adj2\x18\x1d\x20\x01(\x01R\
    \x04adj2\x12\x12\n\x04adj3\x18\x1e\x20\x01(\x01R\x04adj3\x12\x12\n\x04ad\
    j4\x18\x1f\x20\x01(\x01R\x04adj4\x12\x12\n\x04adj5\x18\x20\x20\x01(\x01R\
    \x04adj5\x12\x12\n\x04adj6\x18!\x20\x01(\x01R\x04adj6\x12'\n\x0finput_be\
    nchmark\x18\"\x20\x01(\tR\x0einputBenchmark\x12\x10\n\x03pdo\x18#\x20\
    \x01(\tR\x03pdo\x12\x10\n\x03npa\x18$\x20\x01(\tR\x03npa\x12\x16\n\x06me\
    thod\x18%\x20\x01(\tR\x06method\x12\x1d\n\nrate_curve\x18&\x20\x01(\tR\t\
    rateCurve\x12\x1b\n\torg_tenor\x18'\x20\x01(\x03R\x08orgTenor\x12\x1b\n\
    \trep_tenor\x18(\x20\x01(\x03R\x08repTenor\x12\x1b\n\tfx_spread\x18)\x20\
    \x01(\x01R\x08fxSpread\x12\x1d\n\nvar_spread\x18*\x20\x01(\x01R\tvarSpre\
    ad\x12\x1b\n\tfirst_ftp\x18+\x20\x01(\x01R\x08firstFtp\x12!\n\rbc_as_on_\
    rule\x18,\x20\x01(\x03R\nbcAsOnRule\x121\n\x15tenor_start_date_rule\x18-\
    \x20\x01(\x03R\x12tenorStartDateRule\x12-\n\x13tenor_end_date_rule\x18.\
    \x20\x01(\x03R\x10tenorEndDateRule\x12'\n\x10bc_as_on_applied\x18/\x20\
    \x01(\x03R\rbcAsOnApplied\x127\n\x18tenor_start_date_applied\x180\x20\
    \x01(\x03R\x15tenorStartDateApplied\x123\n\x16tenor_end_date_applied\x18\
    1\x20\x01(\x03R\x13tenorEndDateApplied\x12\x1d\n\nalm_concat\x182\x20\
    \x01(\tR\talmConcat\x12(\n\x10two_point_concat\x183\x20\x01(\tR\x0etwoPo\
    intConcatb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
