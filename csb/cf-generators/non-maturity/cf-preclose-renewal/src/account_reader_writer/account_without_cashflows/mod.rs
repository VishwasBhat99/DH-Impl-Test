// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `non-maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct OutputAccount {
    // message fields
    pub as_on_date: i64,
    pub acc_id: ::std::string::String,
    pub gl_code: ::std::string::String,
    pub acc_open_dt: i64,
    pub curr_out_bl_ccy: f64,
    pub curr_out_bl_lcy: f64,
    pub premat_renew_value_ccy: f64,
    pub premat_renew_value_lcy: f64,
    pub ccy: ::std::string::String,
    pub preclose_renew_dt: i64,
    pub int_rate: f64,
    pub actual_mat_dt: i64,
    pub prod_cd: ::std::string::String,
    pub add_dim_1: ::std::string::String,
    pub add_dim_2: ::std::string::String,
    pub add_dim_3: ::std::string::String,
    pub add_dim_4: ::std::string::String,
    pub add_dim_5: ::std::string::String,
    pub add_dim_6: ::std::string::String,
    pub add_dim_7: ::std::string::String,
    pub add_dim_8: ::std::string::String,
    pub add_dim_9: ::std::string::String,
    pub add_dim_10: ::std::string::String,
    pub event_type: ::std::string::String,
    pub pre_closure_days: i64,
    pub contratual_mat_days: i64,
    pub bucket_days: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutputAccount {
    fn default() -> &'a OutputAccount {
        <OutputAccount as ::protobuf::Message>::default_instance()
    }
}

impl OutputAccount {
    pub fn new() -> OutputAccount {
        ::std::default::Default::default()
    }

    // int64 as_on_date = 1;


    pub fn get_as_on_date(&self) -> i64 {
        self.as_on_date
    }
    pub fn clear_as_on_date(&mut self) {
        self.as_on_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on_date(&mut self, v: i64) {
        self.as_on_date = v;
    }

    // string acc_id = 2;


    pub fn get_acc_id(&self) -> &str {
        &self.acc_id
    }
    pub fn clear_acc_id(&mut self) {
        self.acc_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_id(&mut self, v: ::std::string::String) {
        self.acc_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_id(&mut self) -> &mut ::std::string::String {
        &mut self.acc_id
    }

    // Take field
    pub fn take_acc_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_id, ::std::string::String::new())
    }

    // string gl_code = 3;


    pub fn get_gl_code(&self) -> &str {
        &self.gl_code
    }
    pub fn clear_gl_code(&mut self) {
        self.gl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_code(&mut self, v: ::std::string::String) {
        self.gl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_code
    }

    // Take field
    pub fn take_gl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_code, ::std::string::String::new())
    }

    // int64 acc_open_dt = 4;


    pub fn get_acc_open_dt(&self) -> i64 {
        self.acc_open_dt
    }
    pub fn clear_acc_open_dt(&mut self) {
        self.acc_open_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_acc_open_dt(&mut self, v: i64) {
        self.acc_open_dt = v;
    }

    // double curr_out_bl_ccy = 5;


    pub fn get_curr_out_bl_ccy(&self) -> f64 {
        self.curr_out_bl_ccy
    }
    pub fn clear_curr_out_bl_ccy(&mut self) {
        self.curr_out_bl_ccy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_curr_out_bl_ccy(&mut self, v: f64) {
        self.curr_out_bl_ccy = v;
    }

    // double curr_out_bl_lcy = 6;


    pub fn get_curr_out_bl_lcy(&self) -> f64 {
        self.curr_out_bl_lcy
    }
    pub fn clear_curr_out_bl_lcy(&mut self) {
        self.curr_out_bl_lcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_curr_out_bl_lcy(&mut self, v: f64) {
        self.curr_out_bl_lcy = v;
    }

    // double premat_renew_value_ccy = 7;


    pub fn get_premat_renew_value_ccy(&self) -> f64 {
        self.premat_renew_value_ccy
    }
    pub fn clear_premat_renew_value_ccy(&mut self) {
        self.premat_renew_value_ccy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_premat_renew_value_ccy(&mut self, v: f64) {
        self.premat_renew_value_ccy = v;
    }

    // double premat_renew_value_lcy = 8;


    pub fn get_premat_renew_value_lcy(&self) -> f64 {
        self.premat_renew_value_lcy
    }
    pub fn clear_premat_renew_value_lcy(&mut self) {
        self.premat_renew_value_lcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_premat_renew_value_lcy(&mut self, v: f64) {
        self.premat_renew_value_lcy = v;
    }

    // string ccy = 9;


    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }
    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    // int64 preclose_renew_dt = 10;


    pub fn get_preclose_renew_dt(&self) -> i64 {
        self.preclose_renew_dt
    }
    pub fn clear_preclose_renew_dt(&mut self) {
        self.preclose_renew_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_preclose_renew_dt(&mut self, v: i64) {
        self.preclose_renew_dt = v;
    }

    // double int_rate = 11;


    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }
    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    // int64 actual_mat_dt = 12;


    pub fn get_actual_mat_dt(&self) -> i64 {
        self.actual_mat_dt
    }
    pub fn clear_actual_mat_dt(&mut self) {
        self.actual_mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_actual_mat_dt(&mut self, v: i64) {
        self.actual_mat_dt = v;
    }

    // string prod_cd = 13;


    pub fn get_prod_cd(&self) -> &str {
        &self.prod_cd
    }
    pub fn clear_prod_cd(&mut self) {
        self.prod_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_cd(&mut self, v: ::std::string::String) {
        self.prod_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_cd(&mut self) -> &mut ::std::string::String {
        &mut self.prod_cd
    }

    // Take field
    pub fn take_prod_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_cd, ::std::string::String::new())
    }

    // string add_dim_1 = 14;


    pub fn get_add_dim_1(&self) -> &str {
        &self.add_dim_1
    }
    pub fn clear_add_dim_1(&mut self) {
        self.add_dim_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_dim_1(&mut self, v: ::std::string::String) {
        self.add_dim_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_dim_1(&mut self) -> &mut ::std::string::String {
        &mut self.add_dim_1
    }

    // Take field
    pub fn take_add_dim_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_dim_1, ::std::string::String::new())
    }

    // string add_dim_2 = 15;


    pub fn get_add_dim_2(&self) -> &str {
        &self.add_dim_2
    }
    pub fn clear_add_dim_2(&mut self) {
        self.add_dim_2.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_dim_2(&mut self, v: ::std::string::String) {
        self.add_dim_2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_dim_2(&mut self) -> &mut ::std::string::String {
        &mut self.add_dim_2
    }

    // Take field
    pub fn take_add_dim_2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_dim_2, ::std::string::String::new())
    }

    // string add_dim_3 = 16;


    pub fn get_add_dim_3(&self) -> &str {
        &self.add_dim_3
    }
    pub fn clear_add_dim_3(&mut self) {
        self.add_dim_3.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_dim_3(&mut self, v: ::std::string::String) {
        self.add_dim_3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_dim_3(&mut self) -> &mut ::std::string::String {
        &mut self.add_dim_3
    }

    // Take field
    pub fn take_add_dim_3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_dim_3, ::std::string::String::new())
    }

    // string add_dim_4 = 17;


    pub fn get_add_dim_4(&self) -> &str {
        &self.add_dim_4
    }
    pub fn clear_add_dim_4(&mut self) {
        self.add_dim_4.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_dim_4(&mut self, v: ::std::string::String) {
        self.add_dim_4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_dim_4(&mut self) -> &mut ::std::string::String {
        &mut self.add_dim_4
    }

    // Take field
    pub fn take_add_dim_4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_dim_4, ::std::string::String::new())
    }

    // string add_dim_5 = 18;


    pub fn get_add_dim_5(&self) -> &str {
        &self.add_dim_5
    }
    pub fn clear_add_dim_5(&mut self) {
        self.add_dim_5.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_dim_5(&mut self, v: ::std::string::String) {
        self.add_dim_5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_dim_5(&mut self) -> &mut ::std::string::String {
        &mut self.add_dim_5
    }

    // Take field
    pub fn take_add_dim_5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_dim_5, ::std::string::String::new())
    }

    // string add_dim_6 = 19;


    pub fn get_add_dim_6(&self) -> &str {
        &self.add_dim_6
    }
    pub fn clear_add_dim_6(&mut self) {
        self.add_dim_6.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_dim_6(&mut self, v: ::std::string::String) {
        self.add_dim_6 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_dim_6(&mut self) -> &mut ::std::string::String {
        &mut self.add_dim_6
    }

    // Take field
    pub fn take_add_dim_6(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_dim_6, ::std::string::String::new())
    }

    // string add_dim_7 = 20;


    pub fn get_add_dim_7(&self) -> &str {
        &self.add_dim_7
    }
    pub fn clear_add_dim_7(&mut self) {
        self.add_dim_7.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_dim_7(&mut self, v: ::std::string::String) {
        self.add_dim_7 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_dim_7(&mut self) -> &mut ::std::string::String {
        &mut self.add_dim_7
    }

    // Take field
    pub fn take_add_dim_7(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_dim_7, ::std::string::String::new())
    }

    // string add_dim_8 = 21;


    pub fn get_add_dim_8(&self) -> &str {
        &self.add_dim_8
    }
    pub fn clear_add_dim_8(&mut self) {
        self.add_dim_8.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_dim_8(&mut self, v: ::std::string::String) {
        self.add_dim_8 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_dim_8(&mut self) -> &mut ::std::string::String {
        &mut self.add_dim_8
    }

    // Take field
    pub fn take_add_dim_8(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_dim_8, ::std::string::String::new())
    }

    // string add_dim_9 = 22;


    pub fn get_add_dim_9(&self) -> &str {
        &self.add_dim_9
    }
    pub fn clear_add_dim_9(&mut self) {
        self.add_dim_9.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_dim_9(&mut self, v: ::std::string::String) {
        self.add_dim_9 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_dim_9(&mut self) -> &mut ::std::string::String {
        &mut self.add_dim_9
    }

    // Take field
    pub fn take_add_dim_9(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_dim_9, ::std::string::String::new())
    }

    // string add_dim_10 = 23;


    pub fn get_add_dim_10(&self) -> &str {
        &self.add_dim_10
    }
    pub fn clear_add_dim_10(&mut self) {
        self.add_dim_10.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_dim_10(&mut self, v: ::std::string::String) {
        self.add_dim_10 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_dim_10(&mut self) -> &mut ::std::string::String {
        &mut self.add_dim_10
    }

    // Take field
    pub fn take_add_dim_10(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_dim_10, ::std::string::String::new())
    }

    // string event_type = 24;


    pub fn get_event_type(&self) -> &str {
        &self.event_type
    }
    pub fn clear_event_type(&mut self) {
        self.event_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_event_type(&mut self, v: ::std::string::String) {
        self.event_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_event_type(&mut self) -> &mut ::std::string::String {
        &mut self.event_type
    }

    // Take field
    pub fn take_event_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.event_type, ::std::string::String::new())
    }

    // int64 pre_closure_days = 25;


    pub fn get_pre_closure_days(&self) -> i64 {
        self.pre_closure_days
    }
    pub fn clear_pre_closure_days(&mut self) {
        self.pre_closure_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_pre_closure_days(&mut self, v: i64) {
        self.pre_closure_days = v;
    }

    // int64 contratual_mat_days = 26;


    pub fn get_contratual_mat_days(&self) -> i64 {
        self.contratual_mat_days
    }
    pub fn clear_contratual_mat_days(&mut self) {
        self.contratual_mat_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_contratual_mat_days(&mut self, v: i64) {
        self.contratual_mat_days = v;
    }

    // int64 bucket_days = 27;


    pub fn get_bucket_days(&self) -> i64 {
        self.bucket_days
    }
    pub fn clear_bucket_days(&mut self) {
        self.bucket_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_bucket_days(&mut self, v: i64) {
        self.bucket_days = v;
    }
}

impl ::protobuf::Message for OutputAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on_date = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_code)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acc_open_dt = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.curr_out_bl_ccy = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.curr_out_bl_lcy = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.premat_renew_value_ccy = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.premat_renew_value_lcy = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.preclose_renew_dt = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.actual_mat_dt = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_cd)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_dim_1)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_dim_2)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_dim_3)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_dim_4)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_dim_5)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_dim_6)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_dim_7)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_dim_8)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_dim_9)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_dim_10)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.event_type)?;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pre_closure_days = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.contratual_mat_days = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.bucket_days = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.as_on_date != 0 {
            my_size += ::protobuf::rt::value_size(1, self.as_on_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.acc_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.acc_id);
        }
        if !self.gl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.gl_code);
        }
        if self.acc_open_dt != 0 {
            my_size += ::protobuf::rt::value_size(4, self.acc_open_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.curr_out_bl_ccy != 0. {
            my_size += 9;
        }
        if self.curr_out_bl_lcy != 0. {
            my_size += 9;
        }
        if self.premat_renew_value_ccy != 0. {
            my_size += 9;
        }
        if self.premat_renew_value_lcy != 0. {
            my_size += 9;
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.ccy);
        }
        if self.preclose_renew_dt != 0 {
            my_size += ::protobuf::rt::value_size(10, self.preclose_renew_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if self.actual_mat_dt != 0 {
            my_size += ::protobuf::rt::value_size(12, self.actual_mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.prod_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.prod_cd);
        }
        if !self.add_dim_1.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.add_dim_1);
        }
        if !self.add_dim_2.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.add_dim_2);
        }
        if !self.add_dim_3.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.add_dim_3);
        }
        if !self.add_dim_4.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.add_dim_4);
        }
        if !self.add_dim_5.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.add_dim_5);
        }
        if !self.add_dim_6.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.add_dim_6);
        }
        if !self.add_dim_7.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.add_dim_7);
        }
        if !self.add_dim_8.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.add_dim_8);
        }
        if !self.add_dim_9.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.add_dim_9);
        }
        if !self.add_dim_10.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.add_dim_10);
        }
        if !self.event_type.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.event_type);
        }
        if self.pre_closure_days != 0 {
            my_size += ::protobuf::rt::value_size(25, self.pre_closure_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.contratual_mat_days != 0 {
            my_size += ::protobuf::rt::value_size(26, self.contratual_mat_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bucket_days != 0 {
            my_size += ::protobuf::rt::value_size(27, self.bucket_days, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.as_on_date != 0 {
            os.write_int64(1, self.as_on_date)?;
        }
        if !self.acc_id.is_empty() {
            os.write_string(2, &self.acc_id)?;
        }
        if !self.gl_code.is_empty() {
            os.write_string(3, &self.gl_code)?;
        }
        if self.acc_open_dt != 0 {
            os.write_int64(4, self.acc_open_dt)?;
        }
        if self.curr_out_bl_ccy != 0. {
            os.write_double(5, self.curr_out_bl_ccy)?;
        }
        if self.curr_out_bl_lcy != 0. {
            os.write_double(6, self.curr_out_bl_lcy)?;
        }
        if self.premat_renew_value_ccy != 0. {
            os.write_double(7, self.premat_renew_value_ccy)?;
        }
        if self.premat_renew_value_lcy != 0. {
            os.write_double(8, self.premat_renew_value_lcy)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(9, &self.ccy)?;
        }
        if self.preclose_renew_dt != 0 {
            os.write_int64(10, self.preclose_renew_dt)?;
        }
        if self.int_rate != 0. {
            os.write_double(11, self.int_rate)?;
        }
        if self.actual_mat_dt != 0 {
            os.write_int64(12, self.actual_mat_dt)?;
        }
        if !self.prod_cd.is_empty() {
            os.write_string(13, &self.prod_cd)?;
        }
        if !self.add_dim_1.is_empty() {
            os.write_string(14, &self.add_dim_1)?;
        }
        if !self.add_dim_2.is_empty() {
            os.write_string(15, &self.add_dim_2)?;
        }
        if !self.add_dim_3.is_empty() {
            os.write_string(16, &self.add_dim_3)?;
        }
        if !self.add_dim_4.is_empty() {
            os.write_string(17, &self.add_dim_4)?;
        }
        if !self.add_dim_5.is_empty() {
            os.write_string(18, &self.add_dim_5)?;
        }
        if !self.add_dim_6.is_empty() {
            os.write_string(19, &self.add_dim_6)?;
        }
        if !self.add_dim_7.is_empty() {
            os.write_string(20, &self.add_dim_7)?;
        }
        if !self.add_dim_8.is_empty() {
            os.write_string(21, &self.add_dim_8)?;
        }
        if !self.add_dim_9.is_empty() {
            os.write_string(22, &self.add_dim_9)?;
        }
        if !self.add_dim_10.is_empty() {
            os.write_string(23, &self.add_dim_10)?;
        }
        if !self.event_type.is_empty() {
            os.write_string(24, &self.event_type)?;
        }
        if self.pre_closure_days != 0 {
            os.write_int64(25, self.pre_closure_days)?;
        }
        if self.contratual_mat_days != 0 {
            os.write_int64(26, self.contratual_mat_days)?;
        }
        if self.bucket_days != 0 {
            os.write_int64(27, self.bucket_days)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputAccount {
        OutputAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "as_on_date",
                |m: &OutputAccount| { &m.as_on_date },
                |m: &mut OutputAccount| { &mut m.as_on_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acc_id",
                |m: &OutputAccount| { &m.acc_id },
                |m: &mut OutputAccount| { &mut m.acc_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_code",
                |m: &OutputAccount| { &m.gl_code },
                |m: &mut OutputAccount| { &mut m.gl_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "acc_open_dt",
                |m: &OutputAccount| { &m.acc_open_dt },
                |m: &mut OutputAccount| { &mut m.acc_open_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "curr_out_bl_ccy",
                |m: &OutputAccount| { &m.curr_out_bl_ccy },
                |m: &mut OutputAccount| { &mut m.curr_out_bl_ccy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "curr_out_bl_lcy",
                |m: &OutputAccount| { &m.curr_out_bl_lcy },
                |m: &mut OutputAccount| { &mut m.curr_out_bl_lcy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "premat_renew_value_ccy",
                |m: &OutputAccount| { &m.premat_renew_value_ccy },
                |m: &mut OutputAccount| { &mut m.premat_renew_value_ccy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "premat_renew_value_lcy",
                |m: &OutputAccount| { &m.premat_renew_value_lcy },
                |m: &mut OutputAccount| { &mut m.premat_renew_value_lcy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ccy",
                |m: &OutputAccount| { &m.ccy },
                |m: &mut OutputAccount| { &mut m.ccy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "preclose_renew_dt",
                |m: &OutputAccount| { &m.preclose_renew_dt },
                |m: &mut OutputAccount| { &mut m.preclose_renew_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_rate",
                |m: &OutputAccount| { &m.int_rate },
                |m: &mut OutputAccount| { &mut m.int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "actual_mat_dt",
                |m: &OutputAccount| { &m.actual_mat_dt },
                |m: &mut OutputAccount| { &mut m.actual_mat_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prod_cd",
                |m: &OutputAccount| { &m.prod_cd },
                |m: &mut OutputAccount| { &mut m.prod_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "add_dim_1",
                |m: &OutputAccount| { &m.add_dim_1 },
                |m: &mut OutputAccount| { &mut m.add_dim_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "add_dim_2",
                |m: &OutputAccount| { &m.add_dim_2 },
                |m: &mut OutputAccount| { &mut m.add_dim_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "add_dim_3",
                |m: &OutputAccount| { &m.add_dim_3 },
                |m: &mut OutputAccount| { &mut m.add_dim_3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "add_dim_4",
                |m: &OutputAccount| { &m.add_dim_4 },
                |m: &mut OutputAccount| { &mut m.add_dim_4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "add_dim_5",
                |m: &OutputAccount| { &m.add_dim_5 },
                |m: &mut OutputAccount| { &mut m.add_dim_5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "add_dim_6",
                |m: &OutputAccount| { &m.add_dim_6 },
                |m: &mut OutputAccount| { &mut m.add_dim_6 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "add_dim_7",
                |m: &OutputAccount| { &m.add_dim_7 },
                |m: &mut OutputAccount| { &mut m.add_dim_7 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "add_dim_8",
                |m: &OutputAccount| { &m.add_dim_8 },
                |m: &mut OutputAccount| { &mut m.add_dim_8 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "add_dim_9",
                |m: &OutputAccount| { &m.add_dim_9 },
                |m: &mut OutputAccount| { &mut m.add_dim_9 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "add_dim_10",
                |m: &OutputAccount| { &m.add_dim_10 },
                |m: &mut OutputAccount| { &mut m.add_dim_10 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "event_type",
                |m: &OutputAccount| { &m.event_type },
                |m: &mut OutputAccount| { &mut m.event_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pre_closure_days",
                |m: &OutputAccount| { &m.pre_closure_days },
                |m: &mut OutputAccount| { &mut m.pre_closure_days },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "contratual_mat_days",
                |m: &OutputAccount| { &m.contratual_mat_days },
                |m: &mut OutputAccount| { &mut m.contratual_mat_days },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "bucket_days",
                |m: &OutputAccount| { &m.bucket_days },
                |m: &mut OutputAccount| { &mut m.bucket_days },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OutputAccount>(
                "OutputAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OutputAccount {
        static instance: ::protobuf::rt::LazyV2<OutputAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OutputAccount::new)
    }
}

impl ::protobuf::Clear for OutputAccount {
    fn clear(&mut self) {
        self.as_on_date = 0;
        self.acc_id.clear();
        self.gl_code.clear();
        self.acc_open_dt = 0;
        self.curr_out_bl_ccy = 0.;
        self.curr_out_bl_lcy = 0.;
        self.premat_renew_value_ccy = 0.;
        self.premat_renew_value_lcy = 0.;
        self.ccy.clear();
        self.preclose_renew_dt = 0;
        self.int_rate = 0.;
        self.actual_mat_dt = 0;
        self.prod_cd.clear();
        self.add_dim_1.clear();
        self.add_dim_2.clear();
        self.add_dim_3.clear();
        self.add_dim_4.clear();
        self.add_dim_5.clear();
        self.add_dim_6.clear();
        self.add_dim_7.clear();
        self.add_dim_8.clear();
        self.add_dim_9.clear();
        self.add_dim_10.clear();
        self.event_type.clear();
        self.pre_closure_days = 0;
        self.contratual_mat_days = 0;
        self.bucket_days = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12non-maturity.proto\"\xff\x06\n\rOutputAccount\x12\x1c\n\nas_on_dat\
    e\x18\x01\x20\x01(\x03R\x08asOnDate\x12\x15\n\x06acc_id\x18\x02\x20\x01(\
    \tR\x05accId\x12\x17\n\x07gl_code\x18\x03\x20\x01(\tR\x06glCode\x12\x1e\
    \n\x0bacc_open_dt\x18\x04\x20\x01(\x03R\taccOpenDt\x12%\n\x0fcurr_out_bl\
    _ccy\x18\x05\x20\x01(\x01R\x0ccurrOutBlCcy\x12%\n\x0fcurr_out_bl_lcy\x18\
    \x06\x20\x01(\x01R\x0ccurrOutBlLcy\x123\n\x16premat_renew_value_ccy\x18\
    \x07\x20\x01(\x01R\x13prematRenewValueCcy\x123\n\x16premat_renew_value_l\
    cy\x18\x08\x20\x01(\x01R\x13prematRenewValueLcy\x12\x10\n\x03ccy\x18\t\
    \x20\x01(\tR\x03ccy\x12*\n\x11preclose_renew_dt\x18\n\x20\x01(\x03R\x0fp\
    recloseRenewDt\x12\x19\n\x08int_rate\x18\x0b\x20\x01(\x01R\x07intRate\
    \x12\"\n\ractual_mat_dt\x18\x0c\x20\x01(\x03R\x0bactualMatDt\x12\x17\n\
    \x07prod_cd\x18\r\x20\x01(\tR\x06prodCd\x12\x1a\n\tadd_dim_1\x18\x0e\x20\
    \x01(\tR\x07addDim1\x12\x1a\n\tadd_dim_2\x18\x0f\x20\x01(\tR\x07addDim2\
    \x12\x1a\n\tadd_dim_3\x18\x10\x20\x01(\tR\x07addDim3\x12\x1a\n\tadd_dim_\
    4\x18\x11\x20\x01(\tR\x07addDim4\x12\x1a\n\tadd_dim_5\x18\x12\x20\x01(\t\
    R\x07addDim5\x12\x1a\n\tadd_dim_6\x18\x13\x20\x01(\tR\x07addDim6\x12\x1a\
    \n\tadd_dim_7\x18\x14\x20\x01(\tR\x07addDim7\x12\x1a\n\tadd_dim_8\x18\
    \x15\x20\x01(\tR\x07addDim8\x12\x1a\n\tadd_dim_9\x18\x16\x20\x01(\tR\x07\
    addDim9\x12\x1c\n\nadd_dim_10\x18\x17\x20\x01(\tR\x08addDim10\x12\x1d\n\
    \nevent_type\x18\x18\x20\x01(\tR\teventType\x12(\n\x10pre_closure_days\
    \x18\x19\x20\x01(\x03R\x0epreClosureDays\x12.\n\x13contratual_mat_days\
    \x18\x1a\x20\x01(\x03R\x11contratualMatDays\x12\x1f\n\x0bbucket_days\x18\
    \x1b\x20\x01(\x03R\nbucketDaysb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}