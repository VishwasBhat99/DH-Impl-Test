// This file is generated by rust-protobuf 2.11.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `oab_equity.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_11_0;

#[derive(PartialEq, Clone, Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;

    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size +=
                ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "int_amt",
                    |m: &Cashflow| &m.int_amt,
                    |m: &mut Cashflow| &mut m.int_amt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "prin_amt",
                    |m: &Cashflow| &m.prin_amt,
                    |m: &mut Cashflow| &mut m.prin_amt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "date",
                    |m: &Cashflow| &m.date,
                    |m: &mut Cashflow| &mut m.date,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy::INIT;
        unsafe { instance.get(Cashflow::new) }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct OutputAccount {
    // message fields
    pub account_id: ::std::string::String,
    pub book_value: f64,
    pub cf_amount: f64,
    pub currency: ::std::string::String,
    pub listing_status: ::std::string::String,
    pub listed_exchange: ::std::string::String,
    pub equity_id: ::std::string::String,
    pub equity_name: ::std::string::String,
    pub equity_issuer_type: ::std::string::String,
    pub issuer_country: ::std::string::String,
    pub customer_id: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub customer_type: ::std::string::String,
    pub isin: ::std::string::String,
    pub ifrs9cat: ::std::string::String,
    pub start_date: i64,
    pub branch: ::std::string::String,
    pub rm: ::std::string::String,
    pub department: ::std::string::String,
    pub gl: ::std::string::String,
    pub product_code: ::std::string::String,
    pub inv_type: ::std::string::String,
    pub aorl: ::std::string::String,
    pub rl1: i32,
    pub rl2: i32,
    pub rl3: i32,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutputAccount {
    fn default() -> &'a OutputAccount {
        <OutputAccount as ::protobuf::Message>::default_instance()
    }
}

impl OutputAccount {
    pub fn new() -> OutputAccount {
        ::std::default::Default::default()
    }

    // string account_id = 1;

    pub fn get_account_id(&self) -> &str {
        &self.account_id
    }
    pub fn clear_account_id(&mut self) {
        self.account_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: ::std::string::String) {
        self.account_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_id(&mut self) -> &mut ::std::string::String {
        &mut self.account_id
    }

    // Take field
    pub fn take_account_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_id, ::std::string::String::new())
    }

    // double book_value = 2;

    pub fn get_book_value(&self) -> f64 {
        self.book_value
    }
    pub fn clear_book_value(&mut self) {
        self.book_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_book_value(&mut self, v: f64) {
        self.book_value = v;
    }

    // double cf_amount = 3;

    pub fn get_cf_amount(&self) -> f64 {
        self.cf_amount
    }
    pub fn clear_cf_amount(&mut self) {
        self.cf_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cf_amount(&mut self, v: f64) {
        self.cf_amount = v;
    }

    // string currency = 4;

    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // string listing_status = 5;

    pub fn get_listing_status(&self) -> &str {
        &self.listing_status
    }
    pub fn clear_listing_status(&mut self) {
        self.listing_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_listing_status(&mut self, v: ::std::string::String) {
        self.listing_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_listing_status(&mut self) -> &mut ::std::string::String {
        &mut self.listing_status
    }

    // Take field
    pub fn take_listing_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.listing_status, ::std::string::String::new())
    }

    // string listed_exchange = 6;

    pub fn get_listed_exchange(&self) -> &str {
        &self.listed_exchange
    }
    pub fn clear_listed_exchange(&mut self) {
        self.listed_exchange.clear();
    }

    // Param is passed by value, moved
    pub fn set_listed_exchange(&mut self, v: ::std::string::String) {
        self.listed_exchange = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_listed_exchange(&mut self) -> &mut ::std::string::String {
        &mut self.listed_exchange
    }

    // Take field
    pub fn take_listed_exchange(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.listed_exchange, ::std::string::String::new())
    }

    // string equity_id = 7;

    pub fn get_equity_id(&self) -> &str {
        &self.equity_id
    }
    pub fn clear_equity_id(&mut self) {
        self.equity_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_equity_id(&mut self, v: ::std::string::String) {
        self.equity_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_equity_id(&mut self) -> &mut ::std::string::String {
        &mut self.equity_id
    }

    // Take field
    pub fn take_equity_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.equity_id, ::std::string::String::new())
    }

    // string equity_name = 8;

    pub fn get_equity_name(&self) -> &str {
        &self.equity_name
    }
    pub fn clear_equity_name(&mut self) {
        self.equity_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_equity_name(&mut self, v: ::std::string::String) {
        self.equity_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_equity_name(&mut self) -> &mut ::std::string::String {
        &mut self.equity_name
    }

    // Take field
    pub fn take_equity_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.equity_name, ::std::string::String::new())
    }

    // string equity_issuer_type = 9;

    pub fn get_equity_issuer_type(&self) -> &str {
        &self.equity_issuer_type
    }
    pub fn clear_equity_issuer_type(&mut self) {
        self.equity_issuer_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_equity_issuer_type(&mut self, v: ::std::string::String) {
        self.equity_issuer_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_equity_issuer_type(&mut self) -> &mut ::std::string::String {
        &mut self.equity_issuer_type
    }

    // Take field
    pub fn take_equity_issuer_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.equity_issuer_type, ::std::string::String::new())
    }

    // string issuer_country = 10;

    pub fn get_issuer_country(&self) -> &str {
        &self.issuer_country
    }
    pub fn clear_issuer_country(&mut self) {
        self.issuer_country.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer_country(&mut self, v: ::std::string::String) {
        self.issuer_country = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer_country(&mut self) -> &mut ::std::string::String {
        &mut self.issuer_country
    }

    // Take field
    pub fn take_issuer_country(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer_country, ::std::string::String::new())
    }

    // string customer_id = 11;

    pub fn get_customer_id(&self) -> &str {
        &self.customer_id
    }
    pub fn clear_customer_id(&mut self) {
        self.customer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_id(&mut self, v: ::std::string::String) {
        self.customer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_id(&mut self) -> &mut ::std::string::String {
        &mut self.customer_id
    }

    // Take field
    pub fn take_customer_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_id, ::std::string::String::new())
    }

    // string customer_name = 12;

    pub fn get_customer_name(&self) -> &str {
        &self.customer_name
    }
    pub fn clear_customer_name(&mut self) {
        self.customer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_name(&mut self, v: ::std::string::String) {
        self.customer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_name(&mut self) -> &mut ::std::string::String {
        &mut self.customer_name
    }

    // Take field
    pub fn take_customer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_name, ::std::string::String::new())
    }

    // string customer_type = 13;

    pub fn get_customer_type(&self) -> &str {
        &self.customer_type
    }
    pub fn clear_customer_type(&mut self) {
        self.customer_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_type(&mut self, v: ::std::string::String) {
        self.customer_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_type(&mut self) -> &mut ::std::string::String {
        &mut self.customer_type
    }

    // Take field
    pub fn take_customer_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_type, ::std::string::String::new())
    }

    // string isin = 14;

    pub fn get_isin(&self) -> &str {
        &self.isin
    }
    pub fn clear_isin(&mut self) {
        self.isin.clear();
    }

    // Param is passed by value, moved
    pub fn set_isin(&mut self, v: ::std::string::String) {
        self.isin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_isin(&mut self) -> &mut ::std::string::String {
        &mut self.isin
    }

    // Take field
    pub fn take_isin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.isin, ::std::string::String::new())
    }

    // string ifrs9cat = 15;

    pub fn get_ifrs9cat(&self) -> &str {
        &self.ifrs9cat
    }
    pub fn clear_ifrs9cat(&mut self) {
        self.ifrs9cat.clear();
    }

    // Param is passed by value, moved
    pub fn set_ifrs9cat(&mut self, v: ::std::string::String) {
        self.ifrs9cat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ifrs9cat(&mut self) -> &mut ::std::string::String {
        &mut self.ifrs9cat
    }

    // Take field
    pub fn take_ifrs9cat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ifrs9cat, ::std::string::String::new())
    }

    // int64 start_date = 16;

    pub fn get_start_date(&self) -> i64 {
        self.start_date
    }
    pub fn clear_start_date(&mut self) {
        self.start_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_date(&mut self, v: i64) {
        self.start_date = v;
    }

    // string branch = 17;

    pub fn get_branch(&self) -> &str {
        &self.branch
    }
    pub fn clear_branch(&mut self) {
        self.branch.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch(&mut self, v: ::std::string::String) {
        self.branch = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch(&mut self) -> &mut ::std::string::String {
        &mut self.branch
    }

    // Take field
    pub fn take_branch(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch, ::std::string::String::new())
    }

    // string rm = 18;

    pub fn get_rm(&self) -> &str {
        &self.rm
    }
    pub fn clear_rm(&mut self) {
        self.rm.clear();
    }

    // Param is passed by value, moved
    pub fn set_rm(&mut self, v: ::std::string::String) {
        self.rm = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rm(&mut self) -> &mut ::std::string::String {
        &mut self.rm
    }

    // Take field
    pub fn take_rm(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rm, ::std::string::String::new())
    }

    // string department = 19;

    pub fn get_department(&self) -> &str {
        &self.department
    }
    pub fn clear_department(&mut self) {
        self.department.clear();
    }

    // Param is passed by value, moved
    pub fn set_department(&mut self, v: ::std::string::String) {
        self.department = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_department(&mut self) -> &mut ::std::string::String {
        &mut self.department
    }

    // Take field
    pub fn take_department(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.department, ::std::string::String::new())
    }

    // string gl = 20;

    pub fn get_gl(&self) -> &str {
        &self.gl
    }
    pub fn clear_gl(&mut self) {
        self.gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl(&mut self, v: ::std::string::String) {
        self.gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl(&mut self) -> &mut ::std::string::String {
        &mut self.gl
    }

    // Take field
    pub fn take_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl, ::std::string::String::new())
    }

    // string product_code = 21;

    pub fn get_product_code(&self) -> &str {
        &self.product_code
    }
    pub fn clear_product_code(&mut self) {
        self.product_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_code(&mut self, v: ::std::string::String) {
        self.product_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_code(&mut self) -> &mut ::std::string::String {
        &mut self.product_code
    }

    // Take field
    pub fn take_product_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_code, ::std::string::String::new())
    }

    // string inv_type = 22;

    pub fn get_inv_type(&self) -> &str {
        &self.inv_type
    }
    pub fn clear_inv_type(&mut self) {
        self.inv_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_inv_type(&mut self, v: ::std::string::String) {
        self.inv_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inv_type(&mut self) -> &mut ::std::string::String {
        &mut self.inv_type
    }

    // Take field
    pub fn take_inv_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.inv_type, ::std::string::String::new())
    }

    // string aorl = 23;

    pub fn get_aorl(&self) -> &str {
        &self.aorl
    }
    pub fn clear_aorl(&mut self) {
        self.aorl.clear();
    }

    // Param is passed by value, moved
    pub fn set_aorl(&mut self, v: ::std::string::String) {
        self.aorl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_aorl(&mut self) -> &mut ::std::string::String {
        &mut self.aorl
    }

    // Take field
    pub fn take_aorl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.aorl, ::std::string::String::new())
    }

    // int32 rl1 = 24;

    pub fn get_rl1(&self) -> i32 {
        self.rl1
    }
    pub fn clear_rl1(&mut self) {
        self.rl1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_rl1(&mut self, v: i32) {
        self.rl1 = v;
    }

    // int32 rl2 = 25;

    pub fn get_rl2(&self) -> i32 {
        self.rl2
    }
    pub fn clear_rl2(&mut self) {
        self.rl2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_rl2(&mut self, v: i32) {
        self.rl2 = v;
    }

    // int32 rl3 = 26;

    pub fn get_rl3(&self) -> i32 {
        self.rl3
    }
    pub fn clear_rl3(&mut self) {
        self.rl3 = 0;
    }

    // Param is passed by value, moved
    pub fn set_rl3(&mut self, v: i32) {
        self.rl3 = v;
    }

    // repeated .Cashflow cashflows = 27;

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for OutputAccount {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.account_id,
                    )?;
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.book_value = tmp;
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.cf_amount = tmp;
                }
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.currency,
                    )?;
                }
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.listing_status,
                    )?;
                }
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.listed_exchange,
                    )?;
                }
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.equity_id,
                    )?;
                }
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.equity_name,
                    )?;
                }
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.equity_issuer_type,
                    )?;
                }
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.issuer_country,
                    )?;
                }
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.customer_id,
                    )?;
                }
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.customer_name,
                    )?;
                }
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.customer_type,
                    )?;
                }
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.isin,
                    )?;
                }
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.ifrs9cat,
                    )?;
                }
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.start_date = tmp;
                }
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.branch,
                    )?;
                }
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rm)?;
                }
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.department,
                    )?;
                }
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl)?;
                }
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.product_code,
                    )?;
                }
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.inv_type,
                    )?;
                }
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.aorl,
                    )?;
                }
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.rl1 = tmp;
                }
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.rl2 = tmp;
                }
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.rl3 = tmp;
                }
                27 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.account_id);
        }
        if self.book_value != 0. {
            my_size += 9;
        }
        if self.cf_amount != 0. {
            my_size += 9;
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.currency);
        }
        if !self.listing_status.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.listing_status);
        }
        if !self.listed_exchange.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.listed_exchange);
        }
        if !self.equity_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.equity_id);
        }
        if !self.equity_name.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.equity_name);
        }
        if !self.equity_issuer_type.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.equity_issuer_type);
        }
        if !self.issuer_country.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.issuer_country);
        }
        if !self.customer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.customer_id);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.customer_name);
        }
        if !self.customer_type.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.customer_type);
        }
        if !self.isin.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.isin);
        }
        if !self.ifrs9cat.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.ifrs9cat);
        }
        if self.start_date != 0 {
            my_size += ::protobuf::rt::value_size(
                16,
                self.start_date,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.branch.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.branch);
        }
        if !self.rm.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.rm);
        }
        if !self.department.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.department);
        }
        if !self.gl.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.gl);
        }
        if !self.product_code.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.product_code);
        }
        if !self.inv_type.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.inv_type);
        }
        if !self.aorl.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.aorl);
        }
        if self.rl1 != 0 {
            my_size +=
                ::protobuf::rt::value_size(24, self.rl1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rl2 != 0 {
            my_size +=
                ::protobuf::rt::value_size(25, self.rl2, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rl3 != 0 {
            my_size +=
                ::protobuf::rt::value_size(26, self.rl3, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.account_id.is_empty() {
            os.write_string(1, &self.account_id)?;
        }
        if self.book_value != 0. {
            os.write_double(2, self.book_value)?;
        }
        if self.cf_amount != 0. {
            os.write_double(3, self.cf_amount)?;
        }
        if !self.currency.is_empty() {
            os.write_string(4, &self.currency)?;
        }
        if !self.listing_status.is_empty() {
            os.write_string(5, &self.listing_status)?;
        }
        if !self.listed_exchange.is_empty() {
            os.write_string(6, &self.listed_exchange)?;
        }
        if !self.equity_id.is_empty() {
            os.write_string(7, &self.equity_id)?;
        }
        if !self.equity_name.is_empty() {
            os.write_string(8, &self.equity_name)?;
        }
        if !self.equity_issuer_type.is_empty() {
            os.write_string(9, &self.equity_issuer_type)?;
        }
        if !self.issuer_country.is_empty() {
            os.write_string(10, &self.issuer_country)?;
        }
        if !self.customer_id.is_empty() {
            os.write_string(11, &self.customer_id)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(12, &self.customer_name)?;
        }
        if !self.customer_type.is_empty() {
            os.write_string(13, &self.customer_type)?;
        }
        if !self.isin.is_empty() {
            os.write_string(14, &self.isin)?;
        }
        if !self.ifrs9cat.is_empty() {
            os.write_string(15, &self.ifrs9cat)?;
        }
        if self.start_date != 0 {
            os.write_int64(16, self.start_date)?;
        }
        if !self.branch.is_empty() {
            os.write_string(17, &self.branch)?;
        }
        if !self.rm.is_empty() {
            os.write_string(18, &self.rm)?;
        }
        if !self.department.is_empty() {
            os.write_string(19, &self.department)?;
        }
        if !self.gl.is_empty() {
            os.write_string(20, &self.gl)?;
        }
        if !self.product_code.is_empty() {
            os.write_string(21, &self.product_code)?;
        }
        if !self.inv_type.is_empty() {
            os.write_string(22, &self.inv_type)?;
        }
        if !self.aorl.is_empty() {
            os.write_string(23, &self.aorl)?;
        }
        if self.rl1 != 0 {
            os.write_int32(24, self.rl1)?;
        }
        if self.rl2 != 0 {
            os.write_int32(25, self.rl2)?;
        }
        if self.rl3 != 0 {
            os.write_int32(26, self.rl3)?;
        }
        for v in &self.cashflows {
            os.write_tag(27, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputAccount {
        OutputAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "account_id",
                    |m: &OutputAccount| &m.account_id,
                    |m: &mut OutputAccount| &mut m.account_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "book_value",
                    |m: &OutputAccount| &m.book_value,
                    |m: &mut OutputAccount| &mut m.book_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "cf_amount",
                    |m: &OutputAccount| &m.cf_amount,
                    |m: &mut OutputAccount| &mut m.cf_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "currency",
                    |m: &OutputAccount| &m.currency,
                    |m: &mut OutputAccount| &mut m.currency,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "listing_status",
                    |m: &OutputAccount| &m.listing_status,
                    |m: &mut OutputAccount| &mut m.listing_status,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "listed_exchange",
                    |m: &OutputAccount| &m.listed_exchange,
                    |m: &mut OutputAccount| &mut m.listed_exchange,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "equity_id",
                    |m: &OutputAccount| &m.equity_id,
                    |m: &mut OutputAccount| &mut m.equity_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "equity_name",
                    |m: &OutputAccount| &m.equity_name,
                    |m: &mut OutputAccount| &mut m.equity_name,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "equity_issuer_type",
                    |m: &OutputAccount| &m.equity_issuer_type,
                    |m: &mut OutputAccount| &mut m.equity_issuer_type,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "issuer_country",
                    |m: &OutputAccount| &m.issuer_country,
                    |m: &mut OutputAccount| &mut m.issuer_country,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "customer_id",
                    |m: &OutputAccount| &m.customer_id,
                    |m: &mut OutputAccount| &mut m.customer_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "customer_name",
                    |m: &OutputAccount| &m.customer_name,
                    |m: &mut OutputAccount| &mut m.customer_name,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "customer_type",
                    |m: &OutputAccount| &m.customer_type,
                    |m: &mut OutputAccount| &mut m.customer_type,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "isin",
                    |m: &OutputAccount| &m.isin,
                    |m: &mut OutputAccount| &mut m.isin,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "ifrs9cat",
                    |m: &OutputAccount| &m.ifrs9cat,
                    |m: &mut OutputAccount| &mut m.ifrs9cat,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "start_date",
                    |m: &OutputAccount| &m.start_date,
                    |m: &mut OutputAccount| &mut m.start_date,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "branch",
                    |m: &OutputAccount| &m.branch,
                    |m: &mut OutputAccount| &mut m.branch,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "rm",
                    |m: &OutputAccount| &m.rm,
                    |m: &mut OutputAccount| &mut m.rm,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "department",
                    |m: &OutputAccount| &m.department,
                    |m: &mut OutputAccount| &mut m.department,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "gl",
                    |m: &OutputAccount| &m.gl,
                    |m: &mut OutputAccount| &mut m.gl,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "product_code",
                    |m: &OutputAccount| &m.product_code,
                    |m: &mut OutputAccount| &mut m.product_code,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "inv_type",
                    |m: &OutputAccount| &m.inv_type,
                    |m: &mut OutputAccount| &mut m.inv_type,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "aorl",
                    |m: &OutputAccount| &m.aorl,
                    |m: &mut OutputAccount| &mut m.aorl,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "rl1",
                    |m: &OutputAccount| &m.rl1,
                    |m: &mut OutputAccount| &mut m.rl1,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "rl2",
                    |m: &OutputAccount| &m.rl2,
                    |m: &mut OutputAccount| &mut m.rl2,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "rl3",
                    |m: &OutputAccount| &m.rl3,
                    |m: &mut OutputAccount| &mut m.rl3,
                ));
                fields.push(
                    ::protobuf::reflect::accessor::make_repeated_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<Cashflow>,
                    >(
                        "cashflows",
                        |m: &OutputAccount| &m.cashflows,
                        |m: &mut OutputAccount| &mut m.cashflows,
                    ),
                );
                ::protobuf::reflect::MessageDescriptor::new::<OutputAccount>(
                    "OutputAccount",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static OutputAccount {
        static mut instance: ::protobuf::lazy::Lazy<OutputAccount> = ::protobuf::lazy::Lazy::INIT;
        unsafe { instance.get(OutputAccount::new) }
    }
}

impl ::protobuf::Clear for OutputAccount {
    fn clear(&mut self) {
        self.account_id.clear();
        self.book_value = 0.;
        self.cf_amount = 0.;
        self.currency.clear();
        self.listing_status.clear();
        self.listed_exchange.clear();
        self.equity_id.clear();
        self.equity_name.clear();
        self.equity_issuer_type.clear();
        self.issuer_country.clear();
        self.customer_id.clear();
        self.customer_name.clear();
        self.customer_type.clear();
        self.isin.clear();
        self.ifrs9cat.clear();
        self.start_date = 0;
        self.branch.clear();
        self.rm.clear();
        self.department.clear();
        self.gl.clear();
        self.product_code.clear();
        self.inv_type.clear();
        self.aorl.clear();
        self.rl1 = 0;
        self.rl2 = 0;
        self.rl3 = 0;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10oab_equity.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\
    \x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prin\
    Amt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xac\x06\n\rOutputA\
    ccount\x12\x1d\n\naccount_id\x18\x01\x20\x01(\tR\taccountId\x12\x1d\n\nb\
    ook_value\x18\x02\x20\x01(\x01R\tbookValue\x12\x1b\n\tcf_amount\x18\x03\
    \x20\x01(\x01R\x08cfAmount\x12\x1a\n\x08currency\x18\x04\x20\x01(\tR\x08\
    currency\x12%\n\x0elisting_status\x18\x05\x20\x01(\tR\rlistingStatus\x12\
    '\n\x0flisted_exchange\x18\x06\x20\x01(\tR\x0elistedExchange\x12\x1b\n\t\
    equity_id\x18\x07\x20\x01(\tR\x08equityId\x12\x1f\n\x0bequity_name\x18\
    \x08\x20\x01(\tR\nequityName\x12,\n\x12equity_issuer_type\x18\t\x20\x01(\
    \tR\x10equityIssuerType\x12%\n\x0eissuer_country\x18\n\x20\x01(\tR\rissu\
    erCountry\x12\x1f\n\x0bcustomer_id\x18\x0b\x20\x01(\tR\ncustomerId\x12#\
    \n\rcustomer_name\x18\x0c\x20\x01(\tR\x0ccustomerName\x12#\n\rcustomer_t\
    ype\x18\r\x20\x01(\tR\x0ccustomerType\x12\x12\n\x04isin\x18\x0e\x20\x01(\
    \tR\x04isin\x12\x1a\n\x08ifrs9cat\x18\x0f\x20\x01(\tR\x08ifrs9cat\x12\
    \x1d\n\nstart_date\x18\x10\x20\x01(\x03R\tstartDate\x12\x16\n\x06branch\
    \x18\x11\x20\x01(\tR\x06branch\x12\x0e\n\x02rm\x18\x12\x20\x01(\tR\x02rm\
    \x12\x1e\n\ndepartment\x18\x13\x20\x01(\tR\ndepartment\x12\x0e\n\x02gl\
    \x18\x14\x20\x01(\tR\x02gl\x12!\n\x0cproduct_code\x18\x15\x20\x01(\tR\
    \x0bproductCode\x12\x19\n\x08inv_type\x18\x16\x20\x01(\tR\x07invType\x12\
    \x12\n\x04aorl\x18\x17\x20\x01(\tR\x04aorl\x12\x10\n\x03rl1\x18\x18\x20\
    \x01(\x05R\x03rl1\x12\x10\n\x03rl2\x18\x19\x20\x01(\x05R\x03rl2\x12\x10\
    \n\x03rl3\x18\x1a\x20\x01(\x05R\x03rl3\x12'\n\tcashflows\x18\x1b\x20\x03\
    (\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<
    ::protobuf::descriptor::FileDescriptorProto,
> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe { file_descriptor_proto_lazy.get(|| parse_descriptor_proto()) }
}
