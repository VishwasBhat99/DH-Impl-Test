// This file is generated by rust-protobuf 2.6.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub deal_no: ::std::string::String,
    pub bond_issuance: ::std::string::String,
    pub isin: ::std::string::String,
    pub issuance_dt: i64,
    pub branch_entity: ::std::string::String,
    pub desk: ::std::string::String,
    pub portfolio_type: ::std::string::String,
    pub category: ::std::string::String,
    pub security_type: ::std::string::String,
    pub slrnon_slr: ::std::string::String,
    pub short_name: ::std::string::String,
    pub secured_unsecured: ::std::string::String,
    pub rt: f64,
    pub nxt_call_dt: i64,
    pub nxt_put_dt: i64,
    pub agency: ::std::string::String,
    pub rating: ::std::string::String,
    pub agency_of_current_rating: ::std::string::String,
    pub listed_unlisted: ::std::string::String,
    pub mat_dt: i64,
    pub conversion_rt_lcy: f64,
    pub ccy: ::std::string::String,
    pub bv_after_amortisation: f64,
    pub wap: f64,
    pub laf_and_msf_ost_fv: f64,
    pub laf_and_msf_ost_bv: f64,
    pub reverse_laf_ost_fv: f64,
    pub reverse_repo_ost_fv: f64,
    pub collateral_placed_fv: f64,
    pub encumbered_fv: f64,
    pub encumbered_bv: f64,
    pub ytm: f64,
    pub basis: ::std::string::String,
    pub issue_country: ::std::string::String,
    pub domicile_country: ::std::string::String,
    pub category1: ::std::string::String,
    pub category2: ::std::string::String,
    pub category3: ::std::string::String,
    pub category4: ::std::string::String,
    pub industry_code: ::std::string::String,
    pub taxability: ::std::string::String,
    pub air_till_dt: f64,
    pub modified_duration: f64,
    pub int_coupontype: ::std::string::String,
    pub nxt_rep_dt: i64,
    pub sec_grp: ::std::string::String,
    pub sec_typ: ::std::string::String,
    pub sec_issuer: ::std::string::String,
    pub sec_guaranteed: ::std::string::String,
    pub mrkt: ::std::string::String,
    pub idx_label: ::std::string::String,
    pub bd_cat: ::std::string::String,
    pub bd_typ: ::std::string::String,
    pub lstd: ::std::string::String,
    pub npa: ::std::string::String,
    pub cf_dt: i64,
    pub alm_line: ::std::string::String,
    pub ia_line: ::std::string::String,
    pub face_val: f64,
    pub book_val: f64,
    pub market_val: f64,
    pub mtm_amt: f64,
    pub cf_int_amt: f64,
    pub cf_prin_amt: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string deal_no = 1;


    pub fn get_deal_no(&self) -> &str {
        &self.deal_no
    }
    pub fn clear_deal_no(&mut self) {
        self.deal_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_no(&mut self, v: ::std::string::String) {
        self.deal_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_no(&mut self) -> &mut ::std::string::String {
        &mut self.deal_no
    }

    // Take field
    pub fn take_deal_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_no, ::std::string::String::new())
    }

    // string bond_issuance = 2;


    pub fn get_bond_issuance(&self) -> &str {
        &self.bond_issuance
    }
    pub fn clear_bond_issuance(&mut self) {
        self.bond_issuance.clear();
    }

    // Param is passed by value, moved
    pub fn set_bond_issuance(&mut self, v: ::std::string::String) {
        self.bond_issuance = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bond_issuance(&mut self) -> &mut ::std::string::String {
        &mut self.bond_issuance
    }

    // Take field
    pub fn take_bond_issuance(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bond_issuance, ::std::string::String::new())
    }

    // string isin = 3;


    pub fn get_isin(&self) -> &str {
        &self.isin
    }
    pub fn clear_isin(&mut self) {
        self.isin.clear();
    }

    // Param is passed by value, moved
    pub fn set_isin(&mut self, v: ::std::string::String) {
        self.isin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_isin(&mut self) -> &mut ::std::string::String {
        &mut self.isin
    }

    // Take field
    pub fn take_isin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.isin, ::std::string::String::new())
    }

    // int64 issuance_dt = 4;


    pub fn get_issuance_dt(&self) -> i64 {
        self.issuance_dt
    }
    pub fn clear_issuance_dt(&mut self) {
        self.issuance_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_issuance_dt(&mut self, v: i64) {
        self.issuance_dt = v;
    }

    // string branch_entity = 5;


    pub fn get_branch_entity(&self) -> &str {
        &self.branch_entity
    }
    pub fn clear_branch_entity(&mut self) {
        self.branch_entity.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch_entity(&mut self, v: ::std::string::String) {
        self.branch_entity = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch_entity(&mut self) -> &mut ::std::string::String {
        &mut self.branch_entity
    }

    // Take field
    pub fn take_branch_entity(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch_entity, ::std::string::String::new())
    }

    // string desk = 6;


    pub fn get_desk(&self) -> &str {
        &self.desk
    }
    pub fn clear_desk(&mut self) {
        self.desk.clear();
    }

    // Param is passed by value, moved
    pub fn set_desk(&mut self, v: ::std::string::String) {
        self.desk = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_desk(&mut self) -> &mut ::std::string::String {
        &mut self.desk
    }

    // Take field
    pub fn take_desk(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.desk, ::std::string::String::new())
    }

    // string portfolio_type = 7;


    pub fn get_portfolio_type(&self) -> &str {
        &self.portfolio_type
    }
    pub fn clear_portfolio_type(&mut self) {
        self.portfolio_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_portfolio_type(&mut self, v: ::std::string::String) {
        self.portfolio_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_portfolio_type(&mut self) -> &mut ::std::string::String {
        &mut self.portfolio_type
    }

    // Take field
    pub fn take_portfolio_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.portfolio_type, ::std::string::String::new())
    }

    // string category = 8;


    pub fn get_category(&self) -> &str {
        &self.category
    }
    pub fn clear_category(&mut self) {
        self.category.clear();
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        &mut self.category
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category, ::std::string::String::new())
    }

    // string security_type = 9;


    pub fn get_security_type(&self) -> &str {
        &self.security_type
    }
    pub fn clear_security_type(&mut self) {
        self.security_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_security_type(&mut self, v: ::std::string::String) {
        self.security_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_security_type(&mut self) -> &mut ::std::string::String {
        &mut self.security_type
    }

    // Take field
    pub fn take_security_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.security_type, ::std::string::String::new())
    }

    // string slrnon_slr = 10;


    pub fn get_slrnon_slr(&self) -> &str {
        &self.slrnon_slr
    }
    pub fn clear_slrnon_slr(&mut self) {
        self.slrnon_slr.clear();
    }

    // Param is passed by value, moved
    pub fn set_slrnon_slr(&mut self, v: ::std::string::String) {
        self.slrnon_slr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slrnon_slr(&mut self) -> &mut ::std::string::String {
        &mut self.slrnon_slr
    }

    // Take field
    pub fn take_slrnon_slr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.slrnon_slr, ::std::string::String::new())
    }

    // string short_name = 11;


    pub fn get_short_name(&self) -> &str {
        &self.short_name
    }
    pub fn clear_short_name(&mut self) {
        self.short_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_short_name(&mut self, v: ::std::string::String) {
        self.short_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_short_name(&mut self) -> &mut ::std::string::String {
        &mut self.short_name
    }

    // Take field
    pub fn take_short_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.short_name, ::std::string::String::new())
    }

    // string secured_unsecured = 12;


    pub fn get_secured_unsecured(&self) -> &str {
        &self.secured_unsecured
    }
    pub fn clear_secured_unsecured(&mut self) {
        self.secured_unsecured.clear();
    }

    // Param is passed by value, moved
    pub fn set_secured_unsecured(&mut self, v: ::std::string::String) {
        self.secured_unsecured = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secured_unsecured(&mut self) -> &mut ::std::string::String {
        &mut self.secured_unsecured
    }

    // Take field
    pub fn take_secured_unsecured(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.secured_unsecured, ::std::string::String::new())
    }

    // double rt = 13;


    pub fn get_rt(&self) -> f64 {
        self.rt
    }
    pub fn clear_rt(&mut self) {
        self.rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rt(&mut self, v: f64) {
        self.rt = v;
    }

    // int64 nxt_call_dt = 14;


    pub fn get_nxt_call_dt(&self) -> i64 {
        self.nxt_call_dt
    }
    pub fn clear_nxt_call_dt(&mut self) {
        self.nxt_call_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_call_dt(&mut self, v: i64) {
        self.nxt_call_dt = v;
    }

    // int64 nxt_put_dt = 15;


    pub fn get_nxt_put_dt(&self) -> i64 {
        self.nxt_put_dt
    }
    pub fn clear_nxt_put_dt(&mut self) {
        self.nxt_put_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_put_dt(&mut self, v: i64) {
        self.nxt_put_dt = v;
    }

    // string agency = 16;


    pub fn get_agency(&self) -> &str {
        &self.agency
    }
    pub fn clear_agency(&mut self) {
        self.agency.clear();
    }

    // Param is passed by value, moved
    pub fn set_agency(&mut self, v: ::std::string::String) {
        self.agency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agency(&mut self) -> &mut ::std::string::String {
        &mut self.agency
    }

    // Take field
    pub fn take_agency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.agency, ::std::string::String::new())
    }

    // string rating = 17;


    pub fn get_rating(&self) -> &str {
        &self.rating
    }
    pub fn clear_rating(&mut self) {
        self.rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_rating(&mut self, v: ::std::string::String) {
        self.rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rating(&mut self) -> &mut ::std::string::String {
        &mut self.rating
    }

    // Take field
    pub fn take_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rating, ::std::string::String::new())
    }

    // string agency_of_current_rating = 18;


    pub fn get_agency_of_current_rating(&self) -> &str {
        &self.agency_of_current_rating
    }
    pub fn clear_agency_of_current_rating(&mut self) {
        self.agency_of_current_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_agency_of_current_rating(&mut self, v: ::std::string::String) {
        self.agency_of_current_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agency_of_current_rating(&mut self) -> &mut ::std::string::String {
        &mut self.agency_of_current_rating
    }

    // Take field
    pub fn take_agency_of_current_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.agency_of_current_rating, ::std::string::String::new())
    }

    // string listed_unlisted = 19;


    pub fn get_listed_unlisted(&self) -> &str {
        &self.listed_unlisted
    }
    pub fn clear_listed_unlisted(&mut self) {
        self.listed_unlisted.clear();
    }

    // Param is passed by value, moved
    pub fn set_listed_unlisted(&mut self, v: ::std::string::String) {
        self.listed_unlisted = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_listed_unlisted(&mut self) -> &mut ::std::string::String {
        &mut self.listed_unlisted
    }

    // Take field
    pub fn take_listed_unlisted(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.listed_unlisted, ::std::string::String::new())
    }

    // int64 mat_dt = 20;


    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }
    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    // double conversion_rt_lcy = 21;


    pub fn get_conversion_rt_lcy(&self) -> f64 {
        self.conversion_rt_lcy
    }
    pub fn clear_conversion_rt_lcy(&mut self) {
        self.conversion_rt_lcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_conversion_rt_lcy(&mut self, v: f64) {
        self.conversion_rt_lcy = v;
    }

    // string ccy = 22;


    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }
    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    // double bv_after_amortisation = 23;


    pub fn get_bv_after_amortisation(&self) -> f64 {
        self.bv_after_amortisation
    }
    pub fn clear_bv_after_amortisation(&mut self) {
        self.bv_after_amortisation = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bv_after_amortisation(&mut self, v: f64) {
        self.bv_after_amortisation = v;
    }

    // double wap = 24;


    pub fn get_wap(&self) -> f64 {
        self.wap
    }
    pub fn clear_wap(&mut self) {
        self.wap = 0.;
    }

    // Param is passed by value, moved
    pub fn set_wap(&mut self, v: f64) {
        self.wap = v;
    }

    // double laf_and_msf_ost_fv = 25;


    pub fn get_laf_and_msf_ost_fv(&self) -> f64 {
        self.laf_and_msf_ost_fv
    }
    pub fn clear_laf_and_msf_ost_fv(&mut self) {
        self.laf_and_msf_ost_fv = 0.;
    }

    // Param is passed by value, moved
    pub fn set_laf_and_msf_ost_fv(&mut self, v: f64) {
        self.laf_and_msf_ost_fv = v;
    }

    // double laf_and_msf_ost_bv = 26;


    pub fn get_laf_and_msf_ost_bv(&self) -> f64 {
        self.laf_and_msf_ost_bv
    }
    pub fn clear_laf_and_msf_ost_bv(&mut self) {
        self.laf_and_msf_ost_bv = 0.;
    }

    // Param is passed by value, moved
    pub fn set_laf_and_msf_ost_bv(&mut self, v: f64) {
        self.laf_and_msf_ost_bv = v;
    }

    // double reverse_laf_ost_fv = 27;


    pub fn get_reverse_laf_ost_fv(&self) -> f64 {
        self.reverse_laf_ost_fv
    }
    pub fn clear_reverse_laf_ost_fv(&mut self) {
        self.reverse_laf_ost_fv = 0.;
    }

    // Param is passed by value, moved
    pub fn set_reverse_laf_ost_fv(&mut self, v: f64) {
        self.reverse_laf_ost_fv = v;
    }

    // double reverse_repo_ost_fv = 28;


    pub fn get_reverse_repo_ost_fv(&self) -> f64 {
        self.reverse_repo_ost_fv
    }
    pub fn clear_reverse_repo_ost_fv(&mut self) {
        self.reverse_repo_ost_fv = 0.;
    }

    // Param is passed by value, moved
    pub fn set_reverse_repo_ost_fv(&mut self, v: f64) {
        self.reverse_repo_ost_fv = v;
    }

    // double collateral_placed_fv = 29;


    pub fn get_collateral_placed_fv(&self) -> f64 {
        self.collateral_placed_fv
    }
    pub fn clear_collateral_placed_fv(&mut self) {
        self.collateral_placed_fv = 0.;
    }

    // Param is passed by value, moved
    pub fn set_collateral_placed_fv(&mut self, v: f64) {
        self.collateral_placed_fv = v;
    }

    // double encumbered_fv = 30;


    pub fn get_encumbered_fv(&self) -> f64 {
        self.encumbered_fv
    }
    pub fn clear_encumbered_fv(&mut self) {
        self.encumbered_fv = 0.;
    }

    // Param is passed by value, moved
    pub fn set_encumbered_fv(&mut self, v: f64) {
        self.encumbered_fv = v;
    }

    // double encumbered_bv = 31;


    pub fn get_encumbered_bv(&self) -> f64 {
        self.encumbered_bv
    }
    pub fn clear_encumbered_bv(&mut self) {
        self.encumbered_bv = 0.;
    }

    // Param is passed by value, moved
    pub fn set_encumbered_bv(&mut self, v: f64) {
        self.encumbered_bv = v;
    }

    // double ytm = 32;


    pub fn get_ytm(&self) -> f64 {
        self.ytm
    }
    pub fn clear_ytm(&mut self) {
        self.ytm = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ytm(&mut self, v: f64) {
        self.ytm = v;
    }

    // string basis = 33;


    pub fn get_basis(&self) -> &str {
        &self.basis
    }
    pub fn clear_basis(&mut self) {
        self.basis.clear();
    }

    // Param is passed by value, moved
    pub fn set_basis(&mut self, v: ::std::string::String) {
        self.basis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_basis(&mut self) -> &mut ::std::string::String {
        &mut self.basis
    }

    // Take field
    pub fn take_basis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.basis, ::std::string::String::new())
    }

    // string issue_country = 34;


    pub fn get_issue_country(&self) -> &str {
        &self.issue_country
    }
    pub fn clear_issue_country(&mut self) {
        self.issue_country.clear();
    }

    // Param is passed by value, moved
    pub fn set_issue_country(&mut self, v: ::std::string::String) {
        self.issue_country = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issue_country(&mut self) -> &mut ::std::string::String {
        &mut self.issue_country
    }

    // Take field
    pub fn take_issue_country(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issue_country, ::std::string::String::new())
    }

    // string domicile_country = 35;


    pub fn get_domicile_country(&self) -> &str {
        &self.domicile_country
    }
    pub fn clear_domicile_country(&mut self) {
        self.domicile_country.clear();
    }

    // Param is passed by value, moved
    pub fn set_domicile_country(&mut self, v: ::std::string::String) {
        self.domicile_country = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_domicile_country(&mut self) -> &mut ::std::string::String {
        &mut self.domicile_country
    }

    // Take field
    pub fn take_domicile_country(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.domicile_country, ::std::string::String::new())
    }

    // string category1 = 36;


    pub fn get_category1(&self) -> &str {
        &self.category1
    }
    pub fn clear_category1(&mut self) {
        self.category1.clear();
    }

    // Param is passed by value, moved
    pub fn set_category1(&mut self, v: ::std::string::String) {
        self.category1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category1(&mut self) -> &mut ::std::string::String {
        &mut self.category1
    }

    // Take field
    pub fn take_category1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category1, ::std::string::String::new())
    }

    // string category2 = 37;


    pub fn get_category2(&self) -> &str {
        &self.category2
    }
    pub fn clear_category2(&mut self) {
        self.category2.clear();
    }

    // Param is passed by value, moved
    pub fn set_category2(&mut self, v: ::std::string::String) {
        self.category2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category2(&mut self) -> &mut ::std::string::String {
        &mut self.category2
    }

    // Take field
    pub fn take_category2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category2, ::std::string::String::new())
    }

    // string category3 = 38;


    pub fn get_category3(&self) -> &str {
        &self.category3
    }
    pub fn clear_category3(&mut self) {
        self.category3.clear();
    }

    // Param is passed by value, moved
    pub fn set_category3(&mut self, v: ::std::string::String) {
        self.category3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category3(&mut self) -> &mut ::std::string::String {
        &mut self.category3
    }

    // Take field
    pub fn take_category3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category3, ::std::string::String::new())
    }

    // string category4 = 39;


    pub fn get_category4(&self) -> &str {
        &self.category4
    }
    pub fn clear_category4(&mut self) {
        self.category4.clear();
    }

    // Param is passed by value, moved
    pub fn set_category4(&mut self, v: ::std::string::String) {
        self.category4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category4(&mut self) -> &mut ::std::string::String {
        &mut self.category4
    }

    // Take field
    pub fn take_category4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category4, ::std::string::String::new())
    }

    // string industry_code = 40;


    pub fn get_industry_code(&self) -> &str {
        &self.industry_code
    }
    pub fn clear_industry_code(&mut self) {
        self.industry_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_industry_code(&mut self, v: ::std::string::String) {
        self.industry_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_industry_code(&mut self) -> &mut ::std::string::String {
        &mut self.industry_code
    }

    // Take field
    pub fn take_industry_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.industry_code, ::std::string::String::new())
    }

    // string taxability = 41;


    pub fn get_taxability(&self) -> &str {
        &self.taxability
    }
    pub fn clear_taxability(&mut self) {
        self.taxability.clear();
    }

    // Param is passed by value, moved
    pub fn set_taxability(&mut self, v: ::std::string::String) {
        self.taxability = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_taxability(&mut self) -> &mut ::std::string::String {
        &mut self.taxability
    }

    // Take field
    pub fn take_taxability(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.taxability, ::std::string::String::new())
    }

    // double air_till_dt = 42;


    pub fn get_air_till_dt(&self) -> f64 {
        self.air_till_dt
    }
    pub fn clear_air_till_dt(&mut self) {
        self.air_till_dt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_air_till_dt(&mut self, v: f64) {
        self.air_till_dt = v;
    }

    // double modified_duration = 43;


    pub fn get_modified_duration(&self) -> f64 {
        self.modified_duration
    }
    pub fn clear_modified_duration(&mut self) {
        self.modified_duration = 0.;
    }

    // Param is passed by value, moved
    pub fn set_modified_duration(&mut self, v: f64) {
        self.modified_duration = v;
    }

    // string int_coupontype = 44;


    pub fn get_int_coupontype(&self) -> &str {
        &self.int_coupontype
    }
    pub fn clear_int_coupontype(&mut self) {
        self.int_coupontype.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_coupontype(&mut self, v: ::std::string::String) {
        self.int_coupontype = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_coupontype(&mut self) -> &mut ::std::string::String {
        &mut self.int_coupontype
    }

    // Take field
    pub fn take_int_coupontype(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_coupontype, ::std::string::String::new())
    }

    // int64 nxt_rep_dt = 45;


    pub fn get_nxt_rep_dt(&self) -> i64 {
        self.nxt_rep_dt
    }
    pub fn clear_nxt_rep_dt(&mut self) {
        self.nxt_rep_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_rep_dt(&mut self, v: i64) {
        self.nxt_rep_dt = v;
    }

    // string sec_grp = 46;


    pub fn get_sec_grp(&self) -> &str {
        &self.sec_grp
    }
    pub fn clear_sec_grp(&mut self) {
        self.sec_grp.clear();
    }

    // Param is passed by value, moved
    pub fn set_sec_grp(&mut self, v: ::std::string::String) {
        self.sec_grp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sec_grp(&mut self) -> &mut ::std::string::String {
        &mut self.sec_grp
    }

    // Take field
    pub fn take_sec_grp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sec_grp, ::std::string::String::new())
    }

    // string sec_typ = 47;


    pub fn get_sec_typ(&self) -> &str {
        &self.sec_typ
    }
    pub fn clear_sec_typ(&mut self) {
        self.sec_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_sec_typ(&mut self, v: ::std::string::String) {
        self.sec_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sec_typ(&mut self) -> &mut ::std::string::String {
        &mut self.sec_typ
    }

    // Take field
    pub fn take_sec_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sec_typ, ::std::string::String::new())
    }

    // string sec_issuer = 48;


    pub fn get_sec_issuer(&self) -> &str {
        &self.sec_issuer
    }
    pub fn clear_sec_issuer(&mut self) {
        self.sec_issuer.clear();
    }

    // Param is passed by value, moved
    pub fn set_sec_issuer(&mut self, v: ::std::string::String) {
        self.sec_issuer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sec_issuer(&mut self) -> &mut ::std::string::String {
        &mut self.sec_issuer
    }

    // Take field
    pub fn take_sec_issuer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sec_issuer, ::std::string::String::new())
    }

    // string sec_guaranteed = 49;


    pub fn get_sec_guaranteed(&self) -> &str {
        &self.sec_guaranteed
    }
    pub fn clear_sec_guaranteed(&mut self) {
        self.sec_guaranteed.clear();
    }

    // Param is passed by value, moved
    pub fn set_sec_guaranteed(&mut self, v: ::std::string::String) {
        self.sec_guaranteed = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sec_guaranteed(&mut self) -> &mut ::std::string::String {
        &mut self.sec_guaranteed
    }

    // Take field
    pub fn take_sec_guaranteed(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sec_guaranteed, ::std::string::String::new())
    }

    // string mrkt = 50;


    pub fn get_mrkt(&self) -> &str {
        &self.mrkt
    }
    pub fn clear_mrkt(&mut self) {
        self.mrkt.clear();
    }

    // Param is passed by value, moved
    pub fn set_mrkt(&mut self, v: ::std::string::String) {
        self.mrkt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mrkt(&mut self) -> &mut ::std::string::String {
        &mut self.mrkt
    }

    // Take field
    pub fn take_mrkt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mrkt, ::std::string::String::new())
    }

    // string idx_label = 51;


    pub fn get_idx_label(&self) -> &str {
        &self.idx_label
    }
    pub fn clear_idx_label(&mut self) {
        self.idx_label.clear();
    }

    // Param is passed by value, moved
    pub fn set_idx_label(&mut self, v: ::std::string::String) {
        self.idx_label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_idx_label(&mut self) -> &mut ::std::string::String {
        &mut self.idx_label
    }

    // Take field
    pub fn take_idx_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.idx_label, ::std::string::String::new())
    }

    // string bd_cat = 52;


    pub fn get_bd_cat(&self) -> &str {
        &self.bd_cat
    }
    pub fn clear_bd_cat(&mut self) {
        self.bd_cat.clear();
    }

    // Param is passed by value, moved
    pub fn set_bd_cat(&mut self, v: ::std::string::String) {
        self.bd_cat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bd_cat(&mut self) -> &mut ::std::string::String {
        &mut self.bd_cat
    }

    // Take field
    pub fn take_bd_cat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bd_cat, ::std::string::String::new())
    }

    // string bd_typ = 53;


    pub fn get_bd_typ(&self) -> &str {
        &self.bd_typ
    }
    pub fn clear_bd_typ(&mut self) {
        self.bd_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_bd_typ(&mut self, v: ::std::string::String) {
        self.bd_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bd_typ(&mut self) -> &mut ::std::string::String {
        &mut self.bd_typ
    }

    // Take field
    pub fn take_bd_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bd_typ, ::std::string::String::new())
    }

    // string lstd = 54;


    pub fn get_lstd(&self) -> &str {
        &self.lstd
    }
    pub fn clear_lstd(&mut self) {
        self.lstd.clear();
    }

    // Param is passed by value, moved
    pub fn set_lstd(&mut self, v: ::std::string::String) {
        self.lstd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lstd(&mut self) -> &mut ::std::string::String {
        &mut self.lstd
    }

    // Take field
    pub fn take_lstd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lstd, ::std::string::String::new())
    }

    // string npa = 55;


    pub fn get_npa(&self) -> &str {
        &self.npa
    }
    pub fn clear_npa(&mut self) {
        self.npa.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa(&mut self, v: ::std::string::String) {
        self.npa = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa(&mut self) -> &mut ::std::string::String {
        &mut self.npa
    }

    // Take field
    pub fn take_npa(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa, ::std::string::String::new())
    }

    // int64 cf_dt = 56;


    pub fn get_cf_dt(&self) -> i64 {
        self.cf_dt
    }
    pub fn clear_cf_dt(&mut self) {
        self.cf_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_cf_dt(&mut self, v: i64) {
        self.cf_dt = v;
    }

    // string alm_line = 57;


    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }
    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    // string ia_line = 58;


    pub fn get_ia_line(&self) -> &str {
        &self.ia_line
    }
    pub fn clear_ia_line(&mut self) {
        self.ia_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_ia_line(&mut self, v: ::std::string::String) {
        self.ia_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ia_line(&mut self) -> &mut ::std::string::String {
        &mut self.ia_line
    }

    // Take field
    pub fn take_ia_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ia_line, ::std::string::String::new())
    }

    // double face_val = 59;


    pub fn get_face_val(&self) -> f64 {
        self.face_val
    }
    pub fn clear_face_val(&mut self) {
        self.face_val = 0.;
    }

    // Param is passed by value, moved
    pub fn set_face_val(&mut self, v: f64) {
        self.face_val = v;
    }

    // double book_val = 60;


    pub fn get_book_val(&self) -> f64 {
        self.book_val
    }
    pub fn clear_book_val(&mut self) {
        self.book_val = 0.;
    }

    // Param is passed by value, moved
    pub fn set_book_val(&mut self, v: f64) {
        self.book_val = v;
    }

    // double market_val = 61;


    pub fn get_market_val(&self) -> f64 {
        self.market_val
    }
    pub fn clear_market_val(&mut self) {
        self.market_val = 0.;
    }

    // Param is passed by value, moved
    pub fn set_market_val(&mut self, v: f64) {
        self.market_val = v;
    }

    // double mtm_amt = 62;


    pub fn get_mtm_amt(&self) -> f64 {
        self.mtm_amt
    }
    pub fn clear_mtm_amt(&mut self) {
        self.mtm_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mtm_amt(&mut self, v: f64) {
        self.mtm_amt = v;
    }

    // double cf_int_amt = 63;


    pub fn get_cf_int_amt(&self) -> f64 {
        self.cf_int_amt
    }
    pub fn clear_cf_int_amt(&mut self) {
        self.cf_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cf_int_amt(&mut self, v: f64) {
        self.cf_int_amt = v;
    }

    // double cf_prin_amt = 64;


    pub fn get_cf_prin_amt(&self) -> f64 {
        self.cf_prin_amt
    }
    pub fn clear_cf_prin_amt(&mut self) {
        self.cf_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cf_prin_amt(&mut self, v: f64) {
        self.cf_prin_amt = v;
    }

    // repeated .Cashflow cashflows = 65;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_no)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bond_issuance)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.isin)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.issuance_dt = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch_entity)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.desk)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.portfolio_type)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.security_type)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.slrnon_slr)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.short_name)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.secured_unsecured)?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rt = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_call_dt = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_put_dt = tmp;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.agency)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rating)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.agency_of_current_rating)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.listed_unlisted)?;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.conversion_rt_lcy = tmp;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bv_after_amortisation = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.wap = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.laf_and_msf_ost_fv = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.laf_and_msf_ost_bv = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.reverse_laf_ost_fv = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.reverse_repo_ost_fv = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.collateral_placed_fv = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.encumbered_fv = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.encumbered_bv = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ytm = tmp;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.basis)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issue_country)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.domicile_country)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category1)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category2)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category3)?;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category4)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.industry_code)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.taxability)?;
                },
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.air_till_dt = tmp;
                },
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.modified_duration = tmp;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_coupontype)?;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_rep_dt = tmp;
                },
                46 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sec_grp)?;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sec_typ)?;
                },
                48 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sec_issuer)?;
                },
                49 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sec_guaranteed)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mrkt)?;
                },
                51 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.idx_label)?;
                },
                52 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bd_cat)?;
                },
                53 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bd_typ)?;
                },
                54 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lstd)?;
                },
                55 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa)?;
                },
                56 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cf_dt = tmp;
                },
                57 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alm_line)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ia_line)?;
                },
                59 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.face_val = tmp;
                },
                60 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.book_val = tmp;
                },
                61 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.market_val = tmp;
                },
                62 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.mtm_amt = tmp;
                },
                63 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.cf_int_amt = tmp;
                },
                64 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.cf_prin_amt = tmp;
                },
                65 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.deal_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.deal_no);
        }
        if !self.bond_issuance.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.bond_issuance);
        }
        if !self.isin.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.isin);
        }
        if self.issuance_dt != 0 {
            my_size += ::protobuf::rt::value_size(4, self.issuance_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.branch_entity.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.branch_entity);
        }
        if !self.desk.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.desk);
        }
        if !self.portfolio_type.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.portfolio_type);
        }
        if !self.category.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.category);
        }
        if !self.security_type.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.security_type);
        }
        if !self.slrnon_slr.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.slrnon_slr);
        }
        if !self.short_name.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.short_name);
        }
        if !self.secured_unsecured.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.secured_unsecured);
        }
        if self.rt != 0. {
            my_size += 9;
        }
        if self.nxt_call_dt != 0 {
            my_size += ::protobuf::rt::value_size(14, self.nxt_call_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.nxt_put_dt != 0 {
            my_size += ::protobuf::rt::value_size(15, self.nxt_put_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.agency.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.agency);
        }
        if !self.rating.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.rating);
        }
        if !self.agency_of_current_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.agency_of_current_rating);
        }
        if !self.listed_unlisted.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.listed_unlisted);
        }
        if self.mat_dt != 0 {
            my_size += ::protobuf::rt::value_size(20, self.mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.conversion_rt_lcy != 0. {
            my_size += 10;
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.ccy);
        }
        if self.bv_after_amortisation != 0. {
            my_size += 10;
        }
        if self.wap != 0. {
            my_size += 10;
        }
        if self.laf_and_msf_ost_fv != 0. {
            my_size += 10;
        }
        if self.laf_and_msf_ost_bv != 0. {
            my_size += 10;
        }
        if self.reverse_laf_ost_fv != 0. {
            my_size += 10;
        }
        if self.reverse_repo_ost_fv != 0. {
            my_size += 10;
        }
        if self.collateral_placed_fv != 0. {
            my_size += 10;
        }
        if self.encumbered_fv != 0. {
            my_size += 10;
        }
        if self.encumbered_bv != 0. {
            my_size += 10;
        }
        if self.ytm != 0. {
            my_size += 10;
        }
        if !self.basis.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.basis);
        }
        if !self.issue_country.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.issue_country);
        }
        if !self.domicile_country.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.domicile_country);
        }
        if !self.category1.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.category1);
        }
        if !self.category2.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.category2);
        }
        if !self.category3.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.category3);
        }
        if !self.category4.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.category4);
        }
        if !self.industry_code.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.industry_code);
        }
        if !self.taxability.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.taxability);
        }
        if self.air_till_dt != 0. {
            my_size += 10;
        }
        if self.modified_duration != 0. {
            my_size += 10;
        }
        if !self.int_coupontype.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.int_coupontype);
        }
        if self.nxt_rep_dt != 0 {
            my_size += ::protobuf::rt::value_size(45, self.nxt_rep_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.sec_grp.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.sec_grp);
        }
        if !self.sec_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.sec_typ);
        }
        if !self.sec_issuer.is_empty() {
            my_size += ::protobuf::rt::string_size(48, &self.sec_issuer);
        }
        if !self.sec_guaranteed.is_empty() {
            my_size += ::protobuf::rt::string_size(49, &self.sec_guaranteed);
        }
        if !self.mrkt.is_empty() {
            my_size += ::protobuf::rt::string_size(50, &self.mrkt);
        }
        if !self.idx_label.is_empty() {
            my_size += ::protobuf::rt::string_size(51, &self.idx_label);
        }
        if !self.bd_cat.is_empty() {
            my_size += ::protobuf::rt::string_size(52, &self.bd_cat);
        }
        if !self.bd_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(53, &self.bd_typ);
        }
        if !self.lstd.is_empty() {
            my_size += ::protobuf::rt::string_size(54, &self.lstd);
        }
        if !self.npa.is_empty() {
            my_size += ::protobuf::rt::string_size(55, &self.npa);
        }
        if self.cf_dt != 0 {
            my_size += ::protobuf::rt::value_size(56, self.cf_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(57, &self.alm_line);
        }
        if !self.ia_line.is_empty() {
            my_size += ::protobuf::rt::string_size(58, &self.ia_line);
        }
        if self.face_val != 0. {
            my_size += 10;
        }
        if self.book_val != 0. {
            my_size += 10;
        }
        if self.market_val != 0. {
            my_size += 10;
        }
        if self.mtm_amt != 0. {
            my_size += 10;
        }
        if self.cf_int_amt != 0. {
            my_size += 10;
        }
        if self.cf_prin_amt != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.deal_no.is_empty() {
            os.write_string(1, &self.deal_no)?;
        }
        if !self.bond_issuance.is_empty() {
            os.write_string(2, &self.bond_issuance)?;
        }
        if !self.isin.is_empty() {
            os.write_string(3, &self.isin)?;
        }
        if self.issuance_dt != 0 {
            os.write_int64(4, self.issuance_dt)?;
        }
        if !self.branch_entity.is_empty() {
            os.write_string(5, &self.branch_entity)?;
        }
        if !self.desk.is_empty() {
            os.write_string(6, &self.desk)?;
        }
        if !self.portfolio_type.is_empty() {
            os.write_string(7, &self.portfolio_type)?;
        }
        if !self.category.is_empty() {
            os.write_string(8, &self.category)?;
        }
        if !self.security_type.is_empty() {
            os.write_string(9, &self.security_type)?;
        }
        if !self.slrnon_slr.is_empty() {
            os.write_string(10, &self.slrnon_slr)?;
        }
        if !self.short_name.is_empty() {
            os.write_string(11, &self.short_name)?;
        }
        if !self.secured_unsecured.is_empty() {
            os.write_string(12, &self.secured_unsecured)?;
        }
        if self.rt != 0. {
            os.write_double(13, self.rt)?;
        }
        if self.nxt_call_dt != 0 {
            os.write_int64(14, self.nxt_call_dt)?;
        }
        if self.nxt_put_dt != 0 {
            os.write_int64(15, self.nxt_put_dt)?;
        }
        if !self.agency.is_empty() {
            os.write_string(16, &self.agency)?;
        }
        if !self.rating.is_empty() {
            os.write_string(17, &self.rating)?;
        }
        if !self.agency_of_current_rating.is_empty() {
            os.write_string(18, &self.agency_of_current_rating)?;
        }
        if !self.listed_unlisted.is_empty() {
            os.write_string(19, &self.listed_unlisted)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(20, self.mat_dt)?;
        }
        if self.conversion_rt_lcy != 0. {
            os.write_double(21, self.conversion_rt_lcy)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(22, &self.ccy)?;
        }
        if self.bv_after_amortisation != 0. {
            os.write_double(23, self.bv_after_amortisation)?;
        }
        if self.wap != 0. {
            os.write_double(24, self.wap)?;
        }
        if self.laf_and_msf_ost_fv != 0. {
            os.write_double(25, self.laf_and_msf_ost_fv)?;
        }
        if self.laf_and_msf_ost_bv != 0. {
            os.write_double(26, self.laf_and_msf_ost_bv)?;
        }
        if self.reverse_laf_ost_fv != 0. {
            os.write_double(27, self.reverse_laf_ost_fv)?;
        }
        if self.reverse_repo_ost_fv != 0. {
            os.write_double(28, self.reverse_repo_ost_fv)?;
        }
        if self.collateral_placed_fv != 0. {
            os.write_double(29, self.collateral_placed_fv)?;
        }
        if self.encumbered_fv != 0. {
            os.write_double(30, self.encumbered_fv)?;
        }
        if self.encumbered_bv != 0. {
            os.write_double(31, self.encumbered_bv)?;
        }
        if self.ytm != 0. {
            os.write_double(32, self.ytm)?;
        }
        if !self.basis.is_empty() {
            os.write_string(33, &self.basis)?;
        }
        if !self.issue_country.is_empty() {
            os.write_string(34, &self.issue_country)?;
        }
        if !self.domicile_country.is_empty() {
            os.write_string(35, &self.domicile_country)?;
        }
        if !self.category1.is_empty() {
            os.write_string(36, &self.category1)?;
        }
        if !self.category2.is_empty() {
            os.write_string(37, &self.category2)?;
        }
        if !self.category3.is_empty() {
            os.write_string(38, &self.category3)?;
        }
        if !self.category4.is_empty() {
            os.write_string(39, &self.category4)?;
        }
        if !self.industry_code.is_empty() {
            os.write_string(40, &self.industry_code)?;
        }
        if !self.taxability.is_empty() {
            os.write_string(41, &self.taxability)?;
        }
        if self.air_till_dt != 0. {
            os.write_double(42, self.air_till_dt)?;
        }
        if self.modified_duration != 0. {
            os.write_double(43, self.modified_duration)?;
        }
        if !self.int_coupontype.is_empty() {
            os.write_string(44, &self.int_coupontype)?;
        }
        if self.nxt_rep_dt != 0 {
            os.write_int64(45, self.nxt_rep_dt)?;
        }
        if !self.sec_grp.is_empty() {
            os.write_string(46, &self.sec_grp)?;
        }
        if !self.sec_typ.is_empty() {
            os.write_string(47, &self.sec_typ)?;
        }
        if !self.sec_issuer.is_empty() {
            os.write_string(48, &self.sec_issuer)?;
        }
        if !self.sec_guaranteed.is_empty() {
            os.write_string(49, &self.sec_guaranteed)?;
        }
        if !self.mrkt.is_empty() {
            os.write_string(50, &self.mrkt)?;
        }
        if !self.idx_label.is_empty() {
            os.write_string(51, &self.idx_label)?;
        }
        if !self.bd_cat.is_empty() {
            os.write_string(52, &self.bd_cat)?;
        }
        if !self.bd_typ.is_empty() {
            os.write_string(53, &self.bd_typ)?;
        }
        if !self.lstd.is_empty() {
            os.write_string(54, &self.lstd)?;
        }
        if !self.npa.is_empty() {
            os.write_string(55, &self.npa)?;
        }
        if self.cf_dt != 0 {
            os.write_int64(56, self.cf_dt)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(57, &self.alm_line)?;
        }
        if !self.ia_line.is_empty() {
            os.write_string(58, &self.ia_line)?;
        }
        if self.face_val != 0. {
            os.write_double(59, self.face_val)?;
        }
        if self.book_val != 0. {
            os.write_double(60, self.book_val)?;
        }
        if self.market_val != 0. {
            os.write_double(61, self.market_val)?;
        }
        if self.mtm_amt != 0. {
            os.write_double(62, self.mtm_amt)?;
        }
        if self.cf_int_amt != 0. {
            os.write_double(63, self.cf_int_amt)?;
        }
        if self.cf_prin_amt != 0. {
            os.write_double(64, self.cf_prin_amt)?;
        }
        for v in &self.cashflows {
            os.write_tag(65, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_no",
                    |m: &AccountWithCashflows| { &m.deal_no },
                    |m: &mut AccountWithCashflows| { &mut m.deal_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bond_issuance",
                    |m: &AccountWithCashflows| { &m.bond_issuance },
                    |m: &mut AccountWithCashflows| { &mut m.bond_issuance },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "isin",
                    |m: &AccountWithCashflows| { &m.isin },
                    |m: &mut AccountWithCashflows| { &mut m.isin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "issuance_dt",
                    |m: &AccountWithCashflows| { &m.issuance_dt },
                    |m: &mut AccountWithCashflows| { &mut m.issuance_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "branch_entity",
                    |m: &AccountWithCashflows| { &m.branch_entity },
                    |m: &mut AccountWithCashflows| { &mut m.branch_entity },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "desk",
                    |m: &AccountWithCashflows| { &m.desk },
                    |m: &mut AccountWithCashflows| { &mut m.desk },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "portfolio_type",
                    |m: &AccountWithCashflows| { &m.portfolio_type },
                    |m: &mut AccountWithCashflows| { &mut m.portfolio_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "category",
                    |m: &AccountWithCashflows| { &m.category },
                    |m: &mut AccountWithCashflows| { &mut m.category },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "security_type",
                    |m: &AccountWithCashflows| { &m.security_type },
                    |m: &mut AccountWithCashflows| { &mut m.security_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "slrnon_slr",
                    |m: &AccountWithCashflows| { &m.slrnon_slr },
                    |m: &mut AccountWithCashflows| { &mut m.slrnon_slr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "short_name",
                    |m: &AccountWithCashflows| { &m.short_name },
                    |m: &mut AccountWithCashflows| { &mut m.short_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "secured_unsecured",
                    |m: &AccountWithCashflows| { &m.secured_unsecured },
                    |m: &mut AccountWithCashflows| { &mut m.secured_unsecured },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rt",
                    |m: &AccountWithCashflows| { &m.rt },
                    |m: &mut AccountWithCashflows| { &mut m.rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "nxt_call_dt",
                    |m: &AccountWithCashflows| { &m.nxt_call_dt },
                    |m: &mut AccountWithCashflows| { &mut m.nxt_call_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "nxt_put_dt",
                    |m: &AccountWithCashflows| { &m.nxt_put_dt },
                    |m: &mut AccountWithCashflows| { &mut m.nxt_put_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "agency",
                    |m: &AccountWithCashflows| { &m.agency },
                    |m: &mut AccountWithCashflows| { &mut m.agency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rating",
                    |m: &AccountWithCashflows| { &m.rating },
                    |m: &mut AccountWithCashflows| { &mut m.rating },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "agency_of_current_rating",
                    |m: &AccountWithCashflows| { &m.agency_of_current_rating },
                    |m: &mut AccountWithCashflows| { &mut m.agency_of_current_rating },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "listed_unlisted",
                    |m: &AccountWithCashflows| { &m.listed_unlisted },
                    |m: &mut AccountWithCashflows| { &mut m.listed_unlisted },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "mat_dt",
                    |m: &AccountWithCashflows| { &m.mat_dt },
                    |m: &mut AccountWithCashflows| { &mut m.mat_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "conversion_rt_lcy",
                    |m: &AccountWithCashflows| { &m.conversion_rt_lcy },
                    |m: &mut AccountWithCashflows| { &mut m.conversion_rt_lcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy",
                    |m: &AccountWithCashflows| { &m.ccy },
                    |m: &mut AccountWithCashflows| { &mut m.ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "bv_after_amortisation",
                    |m: &AccountWithCashflows| { &m.bv_after_amortisation },
                    |m: &mut AccountWithCashflows| { &mut m.bv_after_amortisation },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "wap",
                    |m: &AccountWithCashflows| { &m.wap },
                    |m: &mut AccountWithCashflows| { &mut m.wap },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "laf_and_msf_ost_fv",
                    |m: &AccountWithCashflows| { &m.laf_and_msf_ost_fv },
                    |m: &mut AccountWithCashflows| { &mut m.laf_and_msf_ost_fv },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "laf_and_msf_ost_bv",
                    |m: &AccountWithCashflows| { &m.laf_and_msf_ost_bv },
                    |m: &mut AccountWithCashflows| { &mut m.laf_and_msf_ost_bv },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "reverse_laf_ost_fv",
                    |m: &AccountWithCashflows| { &m.reverse_laf_ost_fv },
                    |m: &mut AccountWithCashflows| { &mut m.reverse_laf_ost_fv },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "reverse_repo_ost_fv",
                    |m: &AccountWithCashflows| { &m.reverse_repo_ost_fv },
                    |m: &mut AccountWithCashflows| { &mut m.reverse_repo_ost_fv },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "collateral_placed_fv",
                    |m: &AccountWithCashflows| { &m.collateral_placed_fv },
                    |m: &mut AccountWithCashflows| { &mut m.collateral_placed_fv },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "encumbered_fv",
                    |m: &AccountWithCashflows| { &m.encumbered_fv },
                    |m: &mut AccountWithCashflows| { &mut m.encumbered_fv },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "encumbered_bv",
                    |m: &AccountWithCashflows| { &m.encumbered_bv },
                    |m: &mut AccountWithCashflows| { &mut m.encumbered_bv },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ytm",
                    |m: &AccountWithCashflows| { &m.ytm },
                    |m: &mut AccountWithCashflows| { &mut m.ytm },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "basis",
                    |m: &AccountWithCashflows| { &m.basis },
                    |m: &mut AccountWithCashflows| { &mut m.basis },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "issue_country",
                    |m: &AccountWithCashflows| { &m.issue_country },
                    |m: &mut AccountWithCashflows| { &mut m.issue_country },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "domicile_country",
                    |m: &AccountWithCashflows| { &m.domicile_country },
                    |m: &mut AccountWithCashflows| { &mut m.domicile_country },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "category1",
                    |m: &AccountWithCashflows| { &m.category1 },
                    |m: &mut AccountWithCashflows| { &mut m.category1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "category2",
                    |m: &AccountWithCashflows| { &m.category2 },
                    |m: &mut AccountWithCashflows| { &mut m.category2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "category3",
                    |m: &AccountWithCashflows| { &m.category3 },
                    |m: &mut AccountWithCashflows| { &mut m.category3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "category4",
                    |m: &AccountWithCashflows| { &m.category4 },
                    |m: &mut AccountWithCashflows| { &mut m.category4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "industry_code",
                    |m: &AccountWithCashflows| { &m.industry_code },
                    |m: &mut AccountWithCashflows| { &mut m.industry_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "taxability",
                    |m: &AccountWithCashflows| { &m.taxability },
                    |m: &mut AccountWithCashflows| { &mut m.taxability },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "air_till_dt",
                    |m: &AccountWithCashflows| { &m.air_till_dt },
                    |m: &mut AccountWithCashflows| { &mut m.air_till_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "modified_duration",
                    |m: &AccountWithCashflows| { &m.modified_duration },
                    |m: &mut AccountWithCashflows| { &mut m.modified_duration },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "int_coupontype",
                    |m: &AccountWithCashflows| { &m.int_coupontype },
                    |m: &mut AccountWithCashflows| { &mut m.int_coupontype },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "nxt_rep_dt",
                    |m: &AccountWithCashflows| { &m.nxt_rep_dt },
                    |m: &mut AccountWithCashflows| { &mut m.nxt_rep_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sec_grp",
                    |m: &AccountWithCashflows| { &m.sec_grp },
                    |m: &mut AccountWithCashflows| { &mut m.sec_grp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sec_typ",
                    |m: &AccountWithCashflows| { &m.sec_typ },
                    |m: &mut AccountWithCashflows| { &mut m.sec_typ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sec_issuer",
                    |m: &AccountWithCashflows| { &m.sec_issuer },
                    |m: &mut AccountWithCashflows| { &mut m.sec_issuer },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sec_guaranteed",
                    |m: &AccountWithCashflows| { &m.sec_guaranteed },
                    |m: &mut AccountWithCashflows| { &mut m.sec_guaranteed },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "mrkt",
                    |m: &AccountWithCashflows| { &m.mrkt },
                    |m: &mut AccountWithCashflows| { &mut m.mrkt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "idx_label",
                    |m: &AccountWithCashflows| { &m.idx_label },
                    |m: &mut AccountWithCashflows| { &mut m.idx_label },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bd_cat",
                    |m: &AccountWithCashflows| { &m.bd_cat },
                    |m: &mut AccountWithCashflows| { &mut m.bd_cat },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bd_typ",
                    |m: &AccountWithCashflows| { &m.bd_typ },
                    |m: &mut AccountWithCashflows| { &mut m.bd_typ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "lstd",
                    |m: &AccountWithCashflows| { &m.lstd },
                    |m: &mut AccountWithCashflows| { &mut m.lstd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "npa",
                    |m: &AccountWithCashflows| { &m.npa },
                    |m: &mut AccountWithCashflows| { &mut m.npa },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cf_dt",
                    |m: &AccountWithCashflows| { &m.cf_dt },
                    |m: &mut AccountWithCashflows| { &mut m.cf_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "alm_line",
                    |m: &AccountWithCashflows| { &m.alm_line },
                    |m: &mut AccountWithCashflows| { &mut m.alm_line },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ia_line",
                    |m: &AccountWithCashflows| { &m.ia_line },
                    |m: &mut AccountWithCashflows| { &mut m.ia_line },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "face_val",
                    |m: &AccountWithCashflows| { &m.face_val },
                    |m: &mut AccountWithCashflows| { &mut m.face_val },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "book_val",
                    |m: &AccountWithCashflows| { &m.book_val },
                    |m: &mut AccountWithCashflows| { &mut m.book_val },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "market_val",
                    |m: &AccountWithCashflows| { &m.market_val },
                    |m: &mut AccountWithCashflows| { &mut m.market_val },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "mtm_amt",
                    |m: &AccountWithCashflows| { &m.mtm_amt },
                    |m: &mut AccountWithCashflows| { &mut m.mtm_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "cf_int_amt",
                    |m: &AccountWithCashflows| { &m.cf_int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.cf_int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "cf_prin_amt",
                    |m: &AccountWithCashflows| { &m.cf_prin_amt },
                    |m: &mut AccountWithCashflows| { &mut m.cf_prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.deal_no.clear();
        self.bond_issuance.clear();
        self.isin.clear();
        self.issuance_dt = 0;
        self.branch_entity.clear();
        self.desk.clear();
        self.portfolio_type.clear();
        self.category.clear();
        self.security_type.clear();
        self.slrnon_slr.clear();
        self.short_name.clear();
        self.secured_unsecured.clear();
        self.rt = 0.;
        self.nxt_call_dt = 0;
        self.nxt_put_dt = 0;
        self.agency.clear();
        self.rating.clear();
        self.agency_of_current_rating.clear();
        self.listed_unlisted.clear();
        self.mat_dt = 0;
        self.conversion_rt_lcy = 0.;
        self.ccy.clear();
        self.bv_after_amortisation = 0.;
        self.wap = 0.;
        self.laf_and_msf_ost_fv = 0.;
        self.laf_and_msf_ost_bv = 0.;
        self.reverse_laf_ost_fv = 0.;
        self.reverse_repo_ost_fv = 0.;
        self.collateral_placed_fv = 0.;
        self.encumbered_fv = 0.;
        self.encumbered_bv = 0.;
        self.ytm = 0.;
        self.basis.clear();
        self.issue_country.clear();
        self.domicile_country.clear();
        self.category1.clear();
        self.category2.clear();
        self.category3.clear();
        self.category4.clear();
        self.industry_code.clear();
        self.taxability.clear();
        self.air_till_dt = 0.;
        self.modified_duration = 0.;
        self.int_coupontype.clear();
        self.nxt_rep_dt = 0;
        self.sec_grp.clear();
        self.sec_typ.clear();
        self.sec_issuer.clear();
        self.sec_guaranteed.clear();
        self.mrkt.clear();
        self.idx_label.clear();
        self.bd_cat.clear();
        self.bd_typ.clear();
        self.lstd.clear();
        self.npa.clear();
        self.cf_dt = 0;
        self.alm_line.clear();
        self.ia_line.clear();
        self.face_val = 0.;
        self.book_val = 0.;
        self.market_val = 0.;
        self.mtm_amt = 0.;
        self.cf_int_amt = 0.;
        self.cf_prin_amt = 0.;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19sec_close_tock_mabs.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\
    \x18\x01\x20\x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\
    \x01R\x07prinAmt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xa2\
    \x10\n\x14AccountWithCashflows\x12\x17\n\x07deal_no\x18\x01\x20\x01(\tR\
    \x06dealNo\x12#\n\rbond_issuance\x18\x02\x20\x01(\tR\x0cbondIssuance\x12\
    \x12\n\x04isin\x18\x03\x20\x01(\tR\x04isin\x12\x1f\n\x0bissuance_dt\x18\
    \x04\x20\x01(\x03R\nissuanceDt\x12#\n\rbranch_entity\x18\x05\x20\x01(\tR\
    \x0cbranchEntity\x12\x12\n\x04desk\x18\x06\x20\x01(\tR\x04desk\x12%\n\
    \x0eportfolio_type\x18\x07\x20\x01(\tR\rportfolioType\x12\x1a\n\x08categ\
    ory\x18\x08\x20\x01(\tR\x08category\x12#\n\rsecurity_type\x18\t\x20\x01(\
    \tR\x0csecurityType\x12\x1d\n\nslrnon_slr\x18\n\x20\x01(\tR\tslrnonSlr\
    \x12\x1d\n\nshort_name\x18\x0b\x20\x01(\tR\tshortName\x12+\n\x11secured_\
    unsecured\x18\x0c\x20\x01(\tR\x10securedUnsecured\x12\x0e\n\x02rt\x18\r\
    \x20\x01(\x01R\x02rt\x12\x1e\n\x0bnxt_call_dt\x18\x0e\x20\x01(\x03R\tnxt\
    CallDt\x12\x1c\n\nnxt_put_dt\x18\x0f\x20\x01(\x03R\x08nxtPutDt\x12\x16\n\
    \x06agency\x18\x10\x20\x01(\tR\x06agency\x12\x16\n\x06rating\x18\x11\x20\
    \x01(\tR\x06rating\x127\n\x18agency_of_current_rating\x18\x12\x20\x01(\t\
    R\x15agencyOfCurrentRating\x12'\n\x0flisted_unlisted\x18\x13\x20\x01(\tR\
    \x0elistedUnlisted\x12\x15\n\x06mat_dt\x18\x14\x20\x01(\x03R\x05matDt\
    \x12*\n\x11conversion_rt_lcy\x18\x15\x20\x01(\x01R\x0fconversionRtLcy\
    \x12\x10\n\x03ccy\x18\x16\x20\x01(\tR\x03ccy\x122\n\x15bv_after_amortisa\
    tion\x18\x17\x20\x01(\x01R\x13bvAfterAmortisation\x12\x10\n\x03wap\x18\
    \x18\x20\x01(\x01R\x03wap\x12*\n\x12laf_and_msf_ost_fv\x18\x19\x20\x01(\
    \x01R\x0elafAndMsfOstFv\x12*\n\x12laf_and_msf_ost_bv\x18\x1a\x20\x01(\
    \x01R\x0elafAndMsfOstBv\x12+\n\x12reverse_laf_ost_fv\x18\x1b\x20\x01(\
    \x01R\x0freverseLafOstFv\x12-\n\x13reverse_repo_ost_fv\x18\x1c\x20\x01(\
    \x01R\x10reverseRepoOstFv\x120\n\x14collateral_placed_fv\x18\x1d\x20\x01\
    (\x01R\x12collateralPlacedFv\x12#\n\rencumbered_fv\x18\x1e\x20\x01(\x01R\
    \x0cencumberedFv\x12#\n\rencumbered_bv\x18\x1f\x20\x01(\x01R\x0cencumber\
    edBv\x12\x10\n\x03ytm\x18\x20\x20\x01(\x01R\x03ytm\x12\x14\n\x05basis\
    \x18!\x20\x01(\tR\x05basis\x12#\n\rissue_country\x18\"\x20\x01(\tR\x0cis\
    sueCountry\x12)\n\x10domicile_country\x18#\x20\x01(\tR\x0fdomicileCountr\
    y\x12\x1c\n\tcategory1\x18$\x20\x01(\tR\tcategory1\x12\x1c\n\tcategory2\
    \x18%\x20\x01(\tR\tcategory2\x12\x1c\n\tcategory3\x18&\x20\x01(\tR\tcate\
    gory3\x12\x1c\n\tcategory4\x18'\x20\x01(\tR\tcategory4\x12#\n\rindustry_\
    code\x18(\x20\x01(\tR\x0cindustryCode\x12\x1e\n\ntaxability\x18)\x20\x01\
    (\tR\ntaxability\x12\x1e\n\x0bair_till_dt\x18*\x20\x01(\x01R\tairTillDt\
    \x12+\n\x11modified_duration\x18+\x20\x01(\x01R\x10modifiedDuration\x12%\
    \n\x0eint_coupontype\x18,\x20\x01(\tR\rintCoupontype\x12\x1c\n\nnxt_rep_\
    dt\x18-\x20\x01(\x03R\x08nxtRepDt\x12\x17\n\x07sec_grp\x18.\x20\x01(\tR\
    \x06secGrp\x12\x17\n\x07sec_typ\x18/\x20\x01(\tR\x06secTyp\x12\x1d\n\nse\
    c_issuer\x180\x20\x01(\tR\tsecIssuer\x12%\n\x0esec_guaranteed\x181\x20\
    \x01(\tR\rsecGuaranteed\x12\x12\n\x04mrkt\x182\x20\x01(\tR\x04mrkt\x12\
    \x1b\n\tidx_label\x183\x20\x01(\tR\x08idxLabel\x12\x15\n\x06bd_cat\x184\
    \x20\x01(\tR\x05bdCat\x12\x15\n\x06bd_typ\x185\x20\x01(\tR\x05bdTyp\x12\
    \x12\n\x04lstd\x186\x20\x01(\tR\x04lstd\x12\x10\n\x03npa\x187\x20\x01(\t\
    R\x03npa\x12\x13\n\x05cf_dt\x188\x20\x01(\x03R\x04cfDt\x12\x19\n\x08alm_\
    line\x189\x20\x01(\tR\x07almLine\x12\x17\n\x07ia_line\x18:\x20\x01(\tR\
    \x06iaLine\x12\x19\n\x08face_val\x18;\x20\x01(\x01R\x07faceVal\x12\x19\n\
    \x08book_val\x18<\x20\x01(\x01R\x07bookVal\x12\x1d\n\nmarket_val\x18=\
    \x20\x01(\x01R\tmarketVal\x12\x17\n\x07mtm_amt\x18>\x20\x01(\x01R\x06mtm\
    Amt\x12\x1c\n\ncf_int_amt\x18?\x20\x01(\x01R\x08cfIntAmt\x12\x1e\n\x0bcf\
    _prin_amt\x18@\x20\x01(\x01R\tcfPrinAmt\x12'\n\tcashflows\x18A\x20\x03(\
    \x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
