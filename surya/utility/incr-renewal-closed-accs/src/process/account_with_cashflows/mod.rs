// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub account_number: ::std::string::String,
    pub account_id: ::std::string::String,
    pub as_on_date: i64,
    pub acc_open_date: i64,
    pub acc_crncy_code: ::std::string::String,
    pub out_bal: f64,
    pub out_bal_lcy: f64,
    pub maturity_date: i64,
    pub interest_rate: f64,
    pub next_reprise_date: i64,
    pub last_reprise_date: i64,
    pub gl_code: ::std::string::String,
    pub scheme_code: ::std::string::String,
    pub customer_id: ::std::string::String,
    pub customer_type: ::std::string::String,
    pub cust_const_code: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub tot_int_amt: f64,
    pub total_prin_amt: f64,
    pub acct_type: ::std::string::String,
    pub pt_f64_1: f64,
    pub pt_f64_2: f64,
    pub pt_f64_3: f64,
    pub pt_f64_4: f64,
    pub pt_i64_1: i64,
    pub pt_i64_2: i64,
    pub pt_i64_3: i64,
    pub pt_i64_4: i64,
    pub pt_str_1: ::std::string::String,
    pub pt_str_2: ::std::string::String,
    pub pt_str_3: ::std::string::String,
    pub pt_str_4: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string account_number = 1;


    pub fn get_account_number(&self) -> &str {
        &self.account_number
    }
    pub fn clear_account_number(&mut self) {
        self.account_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_number(&mut self, v: ::std::string::String) {
        self.account_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_number(&mut self) -> &mut ::std::string::String {
        &mut self.account_number
    }

    // Take field
    pub fn take_account_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_number, ::std::string::String::new())
    }

    // string account_id = 2;


    pub fn get_account_id(&self) -> &str {
        &self.account_id
    }
    pub fn clear_account_id(&mut self) {
        self.account_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: ::std::string::String) {
        self.account_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_id(&mut self) -> &mut ::std::string::String {
        &mut self.account_id
    }

    // Take field
    pub fn take_account_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_id, ::std::string::String::new())
    }

    // int64 as_on_date = 3;


    pub fn get_as_on_date(&self) -> i64 {
        self.as_on_date
    }
    pub fn clear_as_on_date(&mut self) {
        self.as_on_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on_date(&mut self, v: i64) {
        self.as_on_date = v;
    }

    // int64 acc_open_date = 4;


    pub fn get_acc_open_date(&self) -> i64 {
        self.acc_open_date
    }
    pub fn clear_acc_open_date(&mut self) {
        self.acc_open_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_acc_open_date(&mut self, v: i64) {
        self.acc_open_date = v;
    }

    // string acc_crncy_code = 5;


    pub fn get_acc_crncy_code(&self) -> &str {
        &self.acc_crncy_code
    }
    pub fn clear_acc_crncy_code(&mut self) {
        self.acc_crncy_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_crncy_code(&mut self, v: ::std::string::String) {
        self.acc_crncy_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_crncy_code(&mut self) -> &mut ::std::string::String {
        &mut self.acc_crncy_code
    }

    // Take field
    pub fn take_acc_crncy_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_crncy_code, ::std::string::String::new())
    }

    // double out_bal = 6;


    pub fn get_out_bal(&self) -> f64 {
        self.out_bal
    }
    pub fn clear_out_bal(&mut self) {
        self.out_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_out_bal(&mut self, v: f64) {
        self.out_bal = v;
    }

    // double out_bal_lcy = 7;


    pub fn get_out_bal_lcy(&self) -> f64 {
        self.out_bal_lcy
    }
    pub fn clear_out_bal_lcy(&mut self) {
        self.out_bal_lcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_out_bal_lcy(&mut self, v: f64) {
        self.out_bal_lcy = v;
    }

    // int64 maturity_date = 8;


    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }
    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    // double interest_rate = 9;


    pub fn get_interest_rate(&self) -> f64 {
        self.interest_rate
    }
    pub fn clear_interest_rate(&mut self) {
        self.interest_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_rate(&mut self, v: f64) {
        self.interest_rate = v;
    }

    // int64 next_reprise_date = 10;


    pub fn get_next_reprise_date(&self) -> i64 {
        self.next_reprise_date
    }
    pub fn clear_next_reprise_date(&mut self) {
        self.next_reprise_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_reprise_date(&mut self, v: i64) {
        self.next_reprise_date = v;
    }

    // int64 last_reprise_date = 11;


    pub fn get_last_reprise_date(&self) -> i64 {
        self.last_reprise_date
    }
    pub fn clear_last_reprise_date(&mut self) {
        self.last_reprise_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_reprise_date(&mut self, v: i64) {
        self.last_reprise_date = v;
    }

    // string gl_code = 12;


    pub fn get_gl_code(&self) -> &str {
        &self.gl_code
    }
    pub fn clear_gl_code(&mut self) {
        self.gl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_code(&mut self, v: ::std::string::String) {
        self.gl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_code
    }

    // Take field
    pub fn take_gl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_code, ::std::string::String::new())
    }

    // string scheme_code = 13;


    pub fn get_scheme_code(&self) -> &str {
        &self.scheme_code
    }
    pub fn clear_scheme_code(&mut self) {
        self.scheme_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_scheme_code(&mut self, v: ::std::string::String) {
        self.scheme_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scheme_code(&mut self) -> &mut ::std::string::String {
        &mut self.scheme_code
    }

    // Take field
    pub fn take_scheme_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.scheme_code, ::std::string::String::new())
    }

    // string customer_id = 14;


    pub fn get_customer_id(&self) -> &str {
        &self.customer_id
    }
    pub fn clear_customer_id(&mut self) {
        self.customer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_id(&mut self, v: ::std::string::String) {
        self.customer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_id(&mut self) -> &mut ::std::string::String {
        &mut self.customer_id
    }

    // Take field
    pub fn take_customer_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_id, ::std::string::String::new())
    }

    // string customer_type = 15;


    pub fn get_customer_type(&self) -> &str {
        &self.customer_type
    }
    pub fn clear_customer_type(&mut self) {
        self.customer_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_type(&mut self, v: ::std::string::String) {
        self.customer_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_type(&mut self) -> &mut ::std::string::String {
        &mut self.customer_type
    }

    // Take field
    pub fn take_customer_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_type, ::std::string::String::new())
    }

    // string cust_const_code = 16;


    pub fn get_cust_const_code(&self) -> &str {
        &self.cust_const_code
    }
    pub fn clear_cust_const_code(&mut self) {
        self.cust_const_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_const_code(&mut self, v: ::std::string::String) {
        self.cust_const_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_const_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_const_code
    }

    // Take field
    pub fn take_cust_const_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_const_code, ::std::string::String::new())
    }

    // string customer_name = 17;


    pub fn get_customer_name(&self) -> &str {
        &self.customer_name
    }
    pub fn clear_customer_name(&mut self) {
        self.customer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_name(&mut self, v: ::std::string::String) {
        self.customer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_name(&mut self) -> &mut ::std::string::String {
        &mut self.customer_name
    }

    // Take field
    pub fn take_customer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_name, ::std::string::String::new())
    }

    // double tot_int_amt = 18;


    pub fn get_tot_int_amt(&self) -> f64 {
        self.tot_int_amt
    }
    pub fn clear_tot_int_amt(&mut self) {
        self.tot_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_int_amt(&mut self, v: f64) {
        self.tot_int_amt = v;
    }

    // double total_prin_amt = 19;


    pub fn get_total_prin_amt(&self) -> f64 {
        self.total_prin_amt
    }
    pub fn clear_total_prin_amt(&mut self) {
        self.total_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_prin_amt(&mut self, v: f64) {
        self.total_prin_amt = v;
    }

    // string acct_type = 20;


    pub fn get_acct_type(&self) -> &str {
        &self.acct_type
    }
    pub fn clear_acct_type(&mut self) {
        self.acct_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_acct_type(&mut self, v: ::std::string::String) {
        self.acct_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acct_type(&mut self) -> &mut ::std::string::String {
        &mut self.acct_type
    }

    // Take field
    pub fn take_acct_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acct_type, ::std::string::String::new())
    }

    // double pt_f64_1 = 21;


    pub fn get_pt_f64_1(&self) -> f64 {
        self.pt_f64_1
    }
    pub fn clear_pt_f64_1(&mut self) {
        self.pt_f64_1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_1(&mut self, v: f64) {
        self.pt_f64_1 = v;
    }

    // double pt_f64_2 = 22;


    pub fn get_pt_f64_2(&self) -> f64 {
        self.pt_f64_2
    }
    pub fn clear_pt_f64_2(&mut self) {
        self.pt_f64_2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_2(&mut self, v: f64) {
        self.pt_f64_2 = v;
    }

    // double pt_f64_3 = 23;


    pub fn get_pt_f64_3(&self) -> f64 {
        self.pt_f64_3
    }
    pub fn clear_pt_f64_3(&mut self) {
        self.pt_f64_3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_3(&mut self, v: f64) {
        self.pt_f64_3 = v;
    }

    // double pt_f64_4 = 24;


    pub fn get_pt_f64_4(&self) -> f64 {
        self.pt_f64_4
    }
    pub fn clear_pt_f64_4(&mut self) {
        self.pt_f64_4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_4(&mut self, v: f64) {
        self.pt_f64_4 = v;
    }

    // int64 pt_i64_1 = 25;


    pub fn get_pt_i64_1(&self) -> i64 {
        self.pt_i64_1
    }
    pub fn clear_pt_i64_1(&mut self) {
        self.pt_i64_1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_1(&mut self, v: i64) {
        self.pt_i64_1 = v;
    }

    // int64 pt_i64_2 = 26;


    pub fn get_pt_i64_2(&self) -> i64 {
        self.pt_i64_2
    }
    pub fn clear_pt_i64_2(&mut self) {
        self.pt_i64_2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_2(&mut self, v: i64) {
        self.pt_i64_2 = v;
    }

    // int64 pt_i64_3 = 27;


    pub fn get_pt_i64_3(&self) -> i64 {
        self.pt_i64_3
    }
    pub fn clear_pt_i64_3(&mut self) {
        self.pt_i64_3 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_3(&mut self, v: i64) {
        self.pt_i64_3 = v;
    }

    // int64 pt_i64_4 = 28;


    pub fn get_pt_i64_4(&self) -> i64 {
        self.pt_i64_4
    }
    pub fn clear_pt_i64_4(&mut self) {
        self.pt_i64_4 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_4(&mut self, v: i64) {
        self.pt_i64_4 = v;
    }

    // string pt_str_1 = 29;


    pub fn get_pt_str_1(&self) -> &str {
        &self.pt_str_1
    }
    pub fn clear_pt_str_1(&mut self) {
        self.pt_str_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_1(&mut self, v: ::std::string::String) {
        self.pt_str_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_1(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_1
    }

    // Take field
    pub fn take_pt_str_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_1, ::std::string::String::new())
    }

    // string pt_str_2 = 30;


    pub fn get_pt_str_2(&self) -> &str {
        &self.pt_str_2
    }
    pub fn clear_pt_str_2(&mut self) {
        self.pt_str_2.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_2(&mut self, v: ::std::string::String) {
        self.pt_str_2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_2(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_2
    }

    // Take field
    pub fn take_pt_str_2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_2, ::std::string::String::new())
    }

    // string pt_str_3 = 31;


    pub fn get_pt_str_3(&self) -> &str {
        &self.pt_str_3
    }
    pub fn clear_pt_str_3(&mut self) {
        self.pt_str_3.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_3(&mut self, v: ::std::string::String) {
        self.pt_str_3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_3(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_3
    }

    // Take field
    pub fn take_pt_str_3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_3, ::std::string::String::new())
    }

    // string pt_str_4 = 32;


    pub fn get_pt_str_4(&self) -> &str {
        &self.pt_str_4
    }
    pub fn clear_pt_str_4(&mut self) {
        self.pt_str_4.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_4(&mut self, v: ::std::string::String) {
        self.pt_str_4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_4(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_4
    }

    // Take field
    pub fn take_pt_str_4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_4, ::std::string::String::new())
    }

    // repeated .Cashflow cashflows = 33;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_number)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on_date = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acc_open_date = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_crncy_code)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.out_bal = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.out_bal_lcy = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_rate = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_reprise_date = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_reprise_date = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_code)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.scheme_code)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_id)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_type)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_const_code)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_name)?;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_int_amt = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_prin_amt = tmp;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acct_type)?;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_1 = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_2 = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_3 = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_4 = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_1 = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_2 = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_3 = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_4 = tmp;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_1)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_2)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_3)?;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_4)?;
                },
                33 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.account_number);
        }
        if !self.account_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.account_id);
        }
        if self.as_on_date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.as_on_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.acc_open_date != 0 {
            my_size += ::protobuf::rt::value_size(4, self.acc_open_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.acc_crncy_code.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.acc_crncy_code);
        }
        if self.out_bal != 0. {
            my_size += 9;
        }
        if self.out_bal_lcy != 0. {
            my_size += 9;
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(8, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.interest_rate != 0. {
            my_size += 9;
        }
        if self.next_reprise_date != 0 {
            my_size += ::protobuf::rt::value_size(10, self.next_reprise_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_reprise_date != 0 {
            my_size += ::protobuf::rt::value_size(11, self.last_reprise_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.gl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.gl_code);
        }
        if !self.scheme_code.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.scheme_code);
        }
        if !self.customer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.customer_id);
        }
        if !self.customer_type.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.customer_type);
        }
        if !self.cust_const_code.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.cust_const_code);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.customer_name);
        }
        if self.tot_int_amt != 0. {
            my_size += 10;
        }
        if self.total_prin_amt != 0. {
            my_size += 10;
        }
        if !self.acct_type.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.acct_type);
        }
        if self.pt_f64_1 != 0. {
            my_size += 10;
        }
        if self.pt_f64_2 != 0. {
            my_size += 10;
        }
        if self.pt_f64_3 != 0. {
            my_size += 10;
        }
        if self.pt_f64_4 != 0. {
            my_size += 10;
        }
        if self.pt_i64_1 != 0 {
            my_size += ::protobuf::rt::value_size(25, self.pt_i64_1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_i64_2 != 0 {
            my_size += ::protobuf::rt::value_size(26, self.pt_i64_2, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_i64_3 != 0 {
            my_size += ::protobuf::rt::value_size(27, self.pt_i64_3, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_i64_4 != 0 {
            my_size += ::protobuf::rt::value_size(28, self.pt_i64_4, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.pt_str_1.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.pt_str_1);
        }
        if !self.pt_str_2.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.pt_str_2);
        }
        if !self.pt_str_3.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.pt_str_3);
        }
        if !self.pt_str_4.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.pt_str_4);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.account_number.is_empty() {
            os.write_string(1, &self.account_number)?;
        }
        if !self.account_id.is_empty() {
            os.write_string(2, &self.account_id)?;
        }
        if self.as_on_date != 0 {
            os.write_int64(3, self.as_on_date)?;
        }
        if self.acc_open_date != 0 {
            os.write_int64(4, self.acc_open_date)?;
        }
        if !self.acc_crncy_code.is_empty() {
            os.write_string(5, &self.acc_crncy_code)?;
        }
        if self.out_bal != 0. {
            os.write_double(6, self.out_bal)?;
        }
        if self.out_bal_lcy != 0. {
            os.write_double(7, self.out_bal_lcy)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(8, self.maturity_date)?;
        }
        if self.interest_rate != 0. {
            os.write_double(9, self.interest_rate)?;
        }
        if self.next_reprise_date != 0 {
            os.write_int64(10, self.next_reprise_date)?;
        }
        if self.last_reprise_date != 0 {
            os.write_int64(11, self.last_reprise_date)?;
        }
        if !self.gl_code.is_empty() {
            os.write_string(12, &self.gl_code)?;
        }
        if !self.scheme_code.is_empty() {
            os.write_string(13, &self.scheme_code)?;
        }
        if !self.customer_id.is_empty() {
            os.write_string(14, &self.customer_id)?;
        }
        if !self.customer_type.is_empty() {
            os.write_string(15, &self.customer_type)?;
        }
        if !self.cust_const_code.is_empty() {
            os.write_string(16, &self.cust_const_code)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(17, &self.customer_name)?;
        }
        if self.tot_int_amt != 0. {
            os.write_double(18, self.tot_int_amt)?;
        }
        if self.total_prin_amt != 0. {
            os.write_double(19, self.total_prin_amt)?;
        }
        if !self.acct_type.is_empty() {
            os.write_string(20, &self.acct_type)?;
        }
        if self.pt_f64_1 != 0. {
            os.write_double(21, self.pt_f64_1)?;
        }
        if self.pt_f64_2 != 0. {
            os.write_double(22, self.pt_f64_2)?;
        }
        if self.pt_f64_3 != 0. {
            os.write_double(23, self.pt_f64_3)?;
        }
        if self.pt_f64_4 != 0. {
            os.write_double(24, self.pt_f64_4)?;
        }
        if self.pt_i64_1 != 0 {
            os.write_int64(25, self.pt_i64_1)?;
        }
        if self.pt_i64_2 != 0 {
            os.write_int64(26, self.pt_i64_2)?;
        }
        if self.pt_i64_3 != 0 {
            os.write_int64(27, self.pt_i64_3)?;
        }
        if self.pt_i64_4 != 0 {
            os.write_int64(28, self.pt_i64_4)?;
        }
        if !self.pt_str_1.is_empty() {
            os.write_string(29, &self.pt_str_1)?;
        }
        if !self.pt_str_2.is_empty() {
            os.write_string(30, &self.pt_str_2)?;
        }
        if !self.pt_str_3.is_empty() {
            os.write_string(31, &self.pt_str_3)?;
        }
        if !self.pt_str_4.is_empty() {
            os.write_string(32, &self.pt_str_4)?;
        }
        for v in &self.cashflows {
            os.write_tag(33, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_number",
                |m: &AccountWithCashflows| { &m.account_number },
                |m: &mut AccountWithCashflows| { &mut m.account_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_id",
                |m: &AccountWithCashflows| { &m.account_id },
                |m: &mut AccountWithCashflows| { &mut m.account_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "as_on_date",
                |m: &AccountWithCashflows| { &m.as_on_date },
                |m: &mut AccountWithCashflows| { &mut m.as_on_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "acc_open_date",
                |m: &AccountWithCashflows| { &m.acc_open_date },
                |m: &mut AccountWithCashflows| { &mut m.acc_open_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acc_crncy_code",
                |m: &AccountWithCashflows| { &m.acc_crncy_code },
                |m: &mut AccountWithCashflows| { &mut m.acc_crncy_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "out_bal",
                |m: &AccountWithCashflows| { &m.out_bal },
                |m: &mut AccountWithCashflows| { &mut m.out_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "out_bal_lcy",
                |m: &AccountWithCashflows| { &m.out_bal_lcy },
                |m: &mut AccountWithCashflows| { &mut m.out_bal_lcy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "maturity_date",
                |m: &AccountWithCashflows| { &m.maturity_date },
                |m: &mut AccountWithCashflows| { &mut m.maturity_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_rate",
                |m: &AccountWithCashflows| { &m.interest_rate },
                |m: &mut AccountWithCashflows| { &mut m.interest_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_reprise_date",
                |m: &AccountWithCashflows| { &m.next_reprise_date },
                |m: &mut AccountWithCashflows| { &mut m.next_reprise_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_reprise_date",
                |m: &AccountWithCashflows| { &m.last_reprise_date },
                |m: &mut AccountWithCashflows| { &mut m.last_reprise_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_code",
                |m: &AccountWithCashflows| { &m.gl_code },
                |m: &mut AccountWithCashflows| { &mut m.gl_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "scheme_code",
                |m: &AccountWithCashflows| { &m.scheme_code },
                |m: &mut AccountWithCashflows| { &mut m.scheme_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_id",
                |m: &AccountWithCashflows| { &m.customer_id },
                |m: &mut AccountWithCashflows| { &mut m.customer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_type",
                |m: &AccountWithCashflows| { &m.customer_type },
                |m: &mut AccountWithCashflows| { &mut m.customer_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_const_code",
                |m: &AccountWithCashflows| { &m.cust_const_code },
                |m: &mut AccountWithCashflows| { &mut m.cust_const_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_name",
                |m: &AccountWithCashflows| { &m.customer_name },
                |m: &mut AccountWithCashflows| { &mut m.customer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_int_amt",
                |m: &AccountWithCashflows| { &m.tot_int_amt },
                |m: &mut AccountWithCashflows| { &mut m.tot_int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "total_prin_amt",
                |m: &AccountWithCashflows| { &m.total_prin_amt },
                |m: &mut AccountWithCashflows| { &mut m.total_prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acct_type",
                |m: &AccountWithCashflows| { &m.acct_type },
                |m: &mut AccountWithCashflows| { &mut m.acct_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_1",
                |m: &AccountWithCashflows| { &m.pt_f64_1 },
                |m: &mut AccountWithCashflows| { &mut m.pt_f64_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_2",
                |m: &AccountWithCashflows| { &m.pt_f64_2 },
                |m: &mut AccountWithCashflows| { &mut m.pt_f64_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_3",
                |m: &AccountWithCashflows| { &m.pt_f64_3 },
                |m: &mut AccountWithCashflows| { &mut m.pt_f64_3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_4",
                |m: &AccountWithCashflows| { &m.pt_f64_4 },
                |m: &mut AccountWithCashflows| { &mut m.pt_f64_4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_1",
                |m: &AccountWithCashflows| { &m.pt_i64_1 },
                |m: &mut AccountWithCashflows| { &mut m.pt_i64_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_2",
                |m: &AccountWithCashflows| { &m.pt_i64_2 },
                |m: &mut AccountWithCashflows| { &mut m.pt_i64_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_3",
                |m: &AccountWithCashflows| { &m.pt_i64_3 },
                |m: &mut AccountWithCashflows| { &mut m.pt_i64_3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_4",
                |m: &AccountWithCashflows| { &m.pt_i64_4 },
                |m: &mut AccountWithCashflows| { &mut m.pt_i64_4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pt_str_1",
                |m: &AccountWithCashflows| { &m.pt_str_1 },
                |m: &mut AccountWithCashflows| { &mut m.pt_str_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pt_str_2",
                |m: &AccountWithCashflows| { &m.pt_str_2 },
                |m: &mut AccountWithCashflows| { &mut m.pt_str_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pt_str_3",
                |m: &AccountWithCashflows| { &m.pt_str_3 },
                |m: &mut AccountWithCashflows| { &mut m.pt_str_3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pt_str_4",
                |m: &AccountWithCashflows| { &m.pt_str_4 },
                |m: &mut AccountWithCashflows| { &mut m.pt_str_4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.account_number.clear();
        self.account_id.clear();
        self.as_on_date = 0;
        self.acc_open_date = 0;
        self.acc_crncy_code.clear();
        self.out_bal = 0.;
        self.out_bal_lcy = 0.;
        self.maturity_date = 0;
        self.interest_rate = 0.;
        self.next_reprise_date = 0;
        self.last_reprise_date = 0;
        self.gl_code.clear();
        self.scheme_code.clear();
        self.customer_id.clear();
        self.customer_type.clear();
        self.cust_const_code.clear();
        self.customer_name.clear();
        self.tot_int_amt = 0.;
        self.total_prin_amt = 0.;
        self.acct_type.clear();
        self.pt_f64_1 = 0.;
        self.pt_f64_2 = 0.;
        self.pt_f64_3 = 0.;
        self.pt_f64_4 = 0.;
        self.pt_i64_1 = 0;
        self.pt_i64_2 = 0;
        self.pt_i64_3 = 0;
        self.pt_i64_4 = 0;
        self.pt_str_1.clear();
        self.pt_str_2.clear();
        self.pt_str_3.clear();
        self.pt_str_4.clear();
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\
    \x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\
    \x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\
    \x04date\"\xb0\x08\n\x14AccountWithCashflows\x12%\n\x0eaccount_number\
    \x18\x01\x20\x01(\tR\raccountNumber\x12\x1d\n\naccount_id\x18\x02\x20\
    \x01(\tR\taccountId\x12\x1c\n\nas_on_date\x18\x03\x20\x01(\x03R\x08asOnD\
    ate\x12\"\n\racc_open_date\x18\x04\x20\x01(\x03R\x0baccOpenDate\x12$\n\
    \x0eacc_crncy_code\x18\x05\x20\x01(\tR\x0caccCrncyCode\x12\x17\n\x07out_\
    bal\x18\x06\x20\x01(\x01R\x06outBal\x12\x1e\n\x0bout_bal_lcy\x18\x07\x20\
    \x01(\x01R\toutBalLcy\x12#\n\rmaturity_date\x18\x08\x20\x01(\x03R\x0cmat\
    urityDate\x12#\n\rinterest_rate\x18\t\x20\x01(\x01R\x0cinterestRate\x12*\
    \n\x11next_reprise_date\x18\n\x20\x01(\x03R\x0fnextRepriseDate\x12*\n\
    \x11last_reprise_date\x18\x0b\x20\x01(\x03R\x0flastRepriseDate\x12\x17\n\
    \x07gl_code\x18\x0c\x20\x01(\tR\x06glCode\x12\x1f\n\x0bscheme_code\x18\r\
    \x20\x01(\tR\nschemeCode\x12\x1f\n\x0bcustomer_id\x18\x0e\x20\x01(\tR\nc\
    ustomerId\x12#\n\rcustomer_type\x18\x0f\x20\x01(\tR\x0ccustomerType\x12&\
    \n\x0fcust_const_code\x18\x10\x20\x01(\tR\rcustConstCode\x12#\n\rcustome\
    r_name\x18\x11\x20\x01(\tR\x0ccustomerName\x12\x1e\n\x0btot_int_amt\x18\
    \x12\x20\x01(\x01R\ttotIntAmt\x12$\n\x0etotal_prin_amt\x18\x13\x20\x01(\
    \x01R\x0ctotalPrinAmt\x12\x1b\n\tacct_type\x18\x14\x20\x01(\tR\x08acctTy\
    pe\x12\x18\n\x08pt_f64_1\x18\x15\x20\x01(\x01R\x06ptF641\x12\x18\n\x08pt\
    _f64_2\x18\x16\x20\x01(\x01R\x06ptF642\x12\x18\n\x08pt_f64_3\x18\x17\x20\
    \x01(\x01R\x06ptF643\x12\x18\n\x08pt_f64_4\x18\x18\x20\x01(\x01R\x06ptF6\
    44\x12\x18\n\x08pt_i64_1\x18\x19\x20\x01(\x03R\x06ptI641\x12\x18\n\x08pt\
    _i64_2\x18\x1a\x20\x01(\x03R\x06ptI642\x12\x18\n\x08pt_i64_3\x18\x1b\x20\
    \x01(\x03R\x06ptI643\x12\x18\n\x08pt_i64_4\x18\x1c\x20\x01(\x03R\x06ptI6\
    44\x12\x18\n\x08pt_str_1\x18\x1d\x20\x01(\tR\x06ptStr1\x12\x18\n\x08pt_s\
    tr_2\x18\x1e\x20\x01(\tR\x06ptStr2\x12\x18\n\x08pt_str_3\x18\x1f\x20\x01\
    (\tR\x06ptStr3\x12\x18\n\x08pt_str_4\x18\x20\x20\x01(\tR\x06ptStr4\x12'\
    \n\tcashflows\x18!\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
