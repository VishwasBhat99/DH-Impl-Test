// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `bills.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub account_number: ::std::string::String,
    pub acid: ::std::string::String,
    pub foracid: ::std::string::String,
    pub bacid: ::std::string::String,
    pub solid: ::std::string::String,
    pub cust_id: ::std::string::String,
    pub schm_code: ::std::string::String,
    pub schm_type: ::std::string::String,
    pub bill_param_type: ::std::string::String,
    pub bill_b2k_id: ::std::string::String,
    pub bill_id: ::std::string::String,
    pub bill_amt: f64,
    pub bill_amt_inr: f64,
    pub bill_crncy_code: ::std::string::String,
    pub due_date: i64,
    pub bp_acid: ::std::string::String,
    pub del_flg: ::std::string::String,
    pub cls_flg: ::std::string::String,
    pub reg_type: ::std::string::String,
    pub reg_sub_type: ::std::string::String,
    pub bp_liab: f64,
    pub bp_liab_crncy: ::std::string::String,
    pub bill_liab_inr: f64,
    pub bill_stat: ::std::string::String,
    pub bill_func_code: ::std::string::String,
    pub bill_liab: f64,
    pub bill_liab_hc_eq: f64,
    pub bill_liab_crncy: ::std::string::String,
    pub bill_liab_crncy_der: ::std::string::String,
    pub clr_bal_amt: f64,
    pub un_clr_bal_amt: f64,
    pub out_bal_amt: f64,
    pub acct_opn_date: i64,
    pub acct_crncy_code: ::std::string::String,
    pub cust_name: ::std::string::String,
    pub gl_sub_head_code: ::std::string::String,
    pub npa_classification: ::std::string::String,
    pub cust_hlth_code: ::std::string::String,
    pub cust_npa_class: ::std::string::String,
    pub final_npa_class: ::std::string::String,
    pub int_rate: f64,
    pub acct_exch_rt: f64,
    pub cust_grp_id: ::std::string::String,
    pub ucif_cust_const: ::std::string::String,
    pub exch_rt: ::std::string::String,
    pub out_bal_amt_con: ::std::string::String,
    pub segment_code: ::std::string::String,
    pub nfs: ::std::string::String,
    pub overdue_flg: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string account_number = 1;


    pub fn get_account_number(&self) -> &str {
        &self.account_number
    }
    pub fn clear_account_number(&mut self) {
        self.account_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_number(&mut self, v: ::std::string::String) {
        self.account_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_number(&mut self) -> &mut ::std::string::String {
        &mut self.account_number
    }

    // Take field
    pub fn take_account_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_number, ::std::string::String::new())
    }

    // string acid = 2;


    pub fn get_acid(&self) -> &str {
        &self.acid
    }
    pub fn clear_acid(&mut self) {
        self.acid.clear();
    }

    // Param is passed by value, moved
    pub fn set_acid(&mut self, v: ::std::string::String) {
        self.acid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acid(&mut self) -> &mut ::std::string::String {
        &mut self.acid
    }

    // Take field
    pub fn take_acid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acid, ::std::string::String::new())
    }

    // string foracid = 3;


    pub fn get_foracid(&self) -> &str {
        &self.foracid
    }
    pub fn clear_foracid(&mut self) {
        self.foracid.clear();
    }

    // Param is passed by value, moved
    pub fn set_foracid(&mut self, v: ::std::string::String) {
        self.foracid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_foracid(&mut self) -> &mut ::std::string::String {
        &mut self.foracid
    }

    // Take field
    pub fn take_foracid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.foracid, ::std::string::String::new())
    }

    // string bacid = 4;


    pub fn get_bacid(&self) -> &str {
        &self.bacid
    }
    pub fn clear_bacid(&mut self) {
        self.bacid.clear();
    }

    // Param is passed by value, moved
    pub fn set_bacid(&mut self, v: ::std::string::String) {
        self.bacid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bacid(&mut self) -> &mut ::std::string::String {
        &mut self.bacid
    }

    // Take field
    pub fn take_bacid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bacid, ::std::string::String::new())
    }

    // string solid = 5;


    pub fn get_solid(&self) -> &str {
        &self.solid
    }
    pub fn clear_solid(&mut self) {
        self.solid.clear();
    }

    // Param is passed by value, moved
    pub fn set_solid(&mut self, v: ::std::string::String) {
        self.solid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_solid(&mut self) -> &mut ::std::string::String {
        &mut self.solid
    }

    // Take field
    pub fn take_solid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.solid, ::std::string::String::new())
    }

    // string cust_id = 6;


    pub fn get_cust_id(&self) -> &str {
        &self.cust_id
    }
    pub fn clear_cust_id(&mut self) {
        self.cust_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: ::std::string::String) {
        self.cust_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_id
    }

    // Take field
    pub fn take_cust_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_id, ::std::string::String::new())
    }

    // string schm_code = 7;


    pub fn get_schm_code(&self) -> &str {
        &self.schm_code
    }
    pub fn clear_schm_code(&mut self) {
        self.schm_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_schm_code(&mut self, v: ::std::string::String) {
        self.schm_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schm_code(&mut self) -> &mut ::std::string::String {
        &mut self.schm_code
    }

    // Take field
    pub fn take_schm_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schm_code, ::std::string::String::new())
    }

    // string schm_type = 8;


    pub fn get_schm_type(&self) -> &str {
        &self.schm_type
    }
    pub fn clear_schm_type(&mut self) {
        self.schm_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_schm_type(&mut self, v: ::std::string::String) {
        self.schm_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schm_type(&mut self) -> &mut ::std::string::String {
        &mut self.schm_type
    }

    // Take field
    pub fn take_schm_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schm_type, ::std::string::String::new())
    }

    // string bill_param_type = 9;


    pub fn get_bill_param_type(&self) -> &str {
        &self.bill_param_type
    }
    pub fn clear_bill_param_type(&mut self) {
        self.bill_param_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_bill_param_type(&mut self, v: ::std::string::String) {
        self.bill_param_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bill_param_type(&mut self) -> &mut ::std::string::String {
        &mut self.bill_param_type
    }

    // Take field
    pub fn take_bill_param_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bill_param_type, ::std::string::String::new())
    }

    // string bill_b2k_id = 10;


    pub fn get_bill_b2k_id(&self) -> &str {
        &self.bill_b2k_id
    }
    pub fn clear_bill_b2k_id(&mut self) {
        self.bill_b2k_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_bill_b2k_id(&mut self, v: ::std::string::String) {
        self.bill_b2k_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bill_b2k_id(&mut self) -> &mut ::std::string::String {
        &mut self.bill_b2k_id
    }

    // Take field
    pub fn take_bill_b2k_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bill_b2k_id, ::std::string::String::new())
    }

    // string bill_id = 11;


    pub fn get_bill_id(&self) -> &str {
        &self.bill_id
    }
    pub fn clear_bill_id(&mut self) {
        self.bill_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_bill_id(&mut self, v: ::std::string::String) {
        self.bill_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bill_id(&mut self) -> &mut ::std::string::String {
        &mut self.bill_id
    }

    // Take field
    pub fn take_bill_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bill_id, ::std::string::String::new())
    }

    // double bill_amt = 12;


    pub fn get_bill_amt(&self) -> f64 {
        self.bill_amt
    }
    pub fn clear_bill_amt(&mut self) {
        self.bill_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bill_amt(&mut self, v: f64) {
        self.bill_amt = v;
    }

    // double bill_amt_inr = 13;


    pub fn get_bill_amt_inr(&self) -> f64 {
        self.bill_amt_inr
    }
    pub fn clear_bill_amt_inr(&mut self) {
        self.bill_amt_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bill_amt_inr(&mut self, v: f64) {
        self.bill_amt_inr = v;
    }

    // string bill_crncy_code = 14;


    pub fn get_bill_crncy_code(&self) -> &str {
        &self.bill_crncy_code
    }
    pub fn clear_bill_crncy_code(&mut self) {
        self.bill_crncy_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_bill_crncy_code(&mut self, v: ::std::string::String) {
        self.bill_crncy_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bill_crncy_code(&mut self) -> &mut ::std::string::String {
        &mut self.bill_crncy_code
    }

    // Take field
    pub fn take_bill_crncy_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bill_crncy_code, ::std::string::String::new())
    }

    // int64 due_date = 15;


    pub fn get_due_date(&self) -> i64 {
        self.due_date
    }
    pub fn clear_due_date(&mut self) {
        self.due_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_due_date(&mut self, v: i64) {
        self.due_date = v;
    }

    // string bp_acid = 16;


    pub fn get_bp_acid(&self) -> &str {
        &self.bp_acid
    }
    pub fn clear_bp_acid(&mut self) {
        self.bp_acid.clear();
    }

    // Param is passed by value, moved
    pub fn set_bp_acid(&mut self, v: ::std::string::String) {
        self.bp_acid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bp_acid(&mut self) -> &mut ::std::string::String {
        &mut self.bp_acid
    }

    // Take field
    pub fn take_bp_acid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bp_acid, ::std::string::String::new())
    }

    // string del_flg = 17;


    pub fn get_del_flg(&self) -> &str {
        &self.del_flg
    }
    pub fn clear_del_flg(&mut self) {
        self.del_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_del_flg(&mut self, v: ::std::string::String) {
        self.del_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_del_flg(&mut self) -> &mut ::std::string::String {
        &mut self.del_flg
    }

    // Take field
    pub fn take_del_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.del_flg, ::std::string::String::new())
    }

    // string cls_flg = 18;


    pub fn get_cls_flg(&self) -> &str {
        &self.cls_flg
    }
    pub fn clear_cls_flg(&mut self) {
        self.cls_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_cls_flg(&mut self, v: ::std::string::String) {
        self.cls_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cls_flg(&mut self) -> &mut ::std::string::String {
        &mut self.cls_flg
    }

    // Take field
    pub fn take_cls_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cls_flg, ::std::string::String::new())
    }

    // string reg_type = 19;


    pub fn get_reg_type(&self) -> &str {
        &self.reg_type
    }
    pub fn clear_reg_type(&mut self) {
        self.reg_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_reg_type(&mut self, v: ::std::string::String) {
        self.reg_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reg_type(&mut self) -> &mut ::std::string::String {
        &mut self.reg_type
    }

    // Take field
    pub fn take_reg_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reg_type, ::std::string::String::new())
    }

    // string reg_sub_type = 20;


    pub fn get_reg_sub_type(&self) -> &str {
        &self.reg_sub_type
    }
    pub fn clear_reg_sub_type(&mut self) {
        self.reg_sub_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_reg_sub_type(&mut self, v: ::std::string::String) {
        self.reg_sub_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reg_sub_type(&mut self) -> &mut ::std::string::String {
        &mut self.reg_sub_type
    }

    // Take field
    pub fn take_reg_sub_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reg_sub_type, ::std::string::String::new())
    }

    // double bp_liab = 21;


    pub fn get_bp_liab(&self) -> f64 {
        self.bp_liab
    }
    pub fn clear_bp_liab(&mut self) {
        self.bp_liab = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bp_liab(&mut self, v: f64) {
        self.bp_liab = v;
    }

    // string bp_liab_crncy = 22;


    pub fn get_bp_liab_crncy(&self) -> &str {
        &self.bp_liab_crncy
    }
    pub fn clear_bp_liab_crncy(&mut self) {
        self.bp_liab_crncy.clear();
    }

    // Param is passed by value, moved
    pub fn set_bp_liab_crncy(&mut self, v: ::std::string::String) {
        self.bp_liab_crncy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bp_liab_crncy(&mut self) -> &mut ::std::string::String {
        &mut self.bp_liab_crncy
    }

    // Take field
    pub fn take_bp_liab_crncy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bp_liab_crncy, ::std::string::String::new())
    }

    // double bill_liab_inr = 23;


    pub fn get_bill_liab_inr(&self) -> f64 {
        self.bill_liab_inr
    }
    pub fn clear_bill_liab_inr(&mut self) {
        self.bill_liab_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bill_liab_inr(&mut self, v: f64) {
        self.bill_liab_inr = v;
    }

    // string bill_stat = 24;


    pub fn get_bill_stat(&self) -> &str {
        &self.bill_stat
    }
    pub fn clear_bill_stat(&mut self) {
        self.bill_stat.clear();
    }

    // Param is passed by value, moved
    pub fn set_bill_stat(&mut self, v: ::std::string::String) {
        self.bill_stat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bill_stat(&mut self) -> &mut ::std::string::String {
        &mut self.bill_stat
    }

    // Take field
    pub fn take_bill_stat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bill_stat, ::std::string::String::new())
    }

    // string bill_func_code = 25;


    pub fn get_bill_func_code(&self) -> &str {
        &self.bill_func_code
    }
    pub fn clear_bill_func_code(&mut self) {
        self.bill_func_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_bill_func_code(&mut self, v: ::std::string::String) {
        self.bill_func_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bill_func_code(&mut self) -> &mut ::std::string::String {
        &mut self.bill_func_code
    }

    // Take field
    pub fn take_bill_func_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bill_func_code, ::std::string::String::new())
    }

    // double bill_liab = 26;


    pub fn get_bill_liab(&self) -> f64 {
        self.bill_liab
    }
    pub fn clear_bill_liab(&mut self) {
        self.bill_liab = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bill_liab(&mut self, v: f64) {
        self.bill_liab = v;
    }

    // double bill_liab_hc_eq = 27;


    pub fn get_bill_liab_hc_eq(&self) -> f64 {
        self.bill_liab_hc_eq
    }
    pub fn clear_bill_liab_hc_eq(&mut self) {
        self.bill_liab_hc_eq = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bill_liab_hc_eq(&mut self, v: f64) {
        self.bill_liab_hc_eq = v;
    }

    // string bill_liab_crncy = 28;


    pub fn get_bill_liab_crncy(&self) -> &str {
        &self.bill_liab_crncy
    }
    pub fn clear_bill_liab_crncy(&mut self) {
        self.bill_liab_crncy.clear();
    }

    // Param is passed by value, moved
    pub fn set_bill_liab_crncy(&mut self, v: ::std::string::String) {
        self.bill_liab_crncy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bill_liab_crncy(&mut self) -> &mut ::std::string::String {
        &mut self.bill_liab_crncy
    }

    // Take field
    pub fn take_bill_liab_crncy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bill_liab_crncy, ::std::string::String::new())
    }

    // string bill_liab_crncy_der = 29;


    pub fn get_bill_liab_crncy_der(&self) -> &str {
        &self.bill_liab_crncy_der
    }
    pub fn clear_bill_liab_crncy_der(&mut self) {
        self.bill_liab_crncy_der.clear();
    }

    // Param is passed by value, moved
    pub fn set_bill_liab_crncy_der(&mut self, v: ::std::string::String) {
        self.bill_liab_crncy_der = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bill_liab_crncy_der(&mut self) -> &mut ::std::string::String {
        &mut self.bill_liab_crncy_der
    }

    // Take field
    pub fn take_bill_liab_crncy_der(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bill_liab_crncy_der, ::std::string::String::new())
    }

    // double clr_bal_amt = 30;


    pub fn get_clr_bal_amt(&self) -> f64 {
        self.clr_bal_amt
    }
    pub fn clear_clr_bal_amt(&mut self) {
        self.clr_bal_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_clr_bal_amt(&mut self, v: f64) {
        self.clr_bal_amt = v;
    }

    // double un_clr_bal_amt = 31;


    pub fn get_un_clr_bal_amt(&self) -> f64 {
        self.un_clr_bal_amt
    }
    pub fn clear_un_clr_bal_amt(&mut self) {
        self.un_clr_bal_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_un_clr_bal_amt(&mut self, v: f64) {
        self.un_clr_bal_amt = v;
    }

    // double out_bal_amt = 32;


    pub fn get_out_bal_amt(&self) -> f64 {
        self.out_bal_amt
    }
    pub fn clear_out_bal_amt(&mut self) {
        self.out_bal_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_out_bal_amt(&mut self, v: f64) {
        self.out_bal_amt = v;
    }

    // int64 acct_opn_date = 33;


    pub fn get_acct_opn_date(&self) -> i64 {
        self.acct_opn_date
    }
    pub fn clear_acct_opn_date(&mut self) {
        self.acct_opn_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_acct_opn_date(&mut self, v: i64) {
        self.acct_opn_date = v;
    }

    // string acct_crncy_code = 34;


    pub fn get_acct_crncy_code(&self) -> &str {
        &self.acct_crncy_code
    }
    pub fn clear_acct_crncy_code(&mut self) {
        self.acct_crncy_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_acct_crncy_code(&mut self, v: ::std::string::String) {
        self.acct_crncy_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acct_crncy_code(&mut self) -> &mut ::std::string::String {
        &mut self.acct_crncy_code
    }

    // Take field
    pub fn take_acct_crncy_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acct_crncy_code, ::std::string::String::new())
    }

    // string cust_name = 35;


    pub fn get_cust_name(&self) -> &str {
        &self.cust_name
    }
    pub fn clear_cust_name(&mut self) {
        self.cust_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_name(&mut self, v: ::std::string::String) {
        self.cust_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_name
    }

    // Take field
    pub fn take_cust_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_name, ::std::string::String::new())
    }

    // string gl_sub_head_code = 36;


    pub fn get_gl_sub_head_code(&self) -> &str {
        &self.gl_sub_head_code
    }
    pub fn clear_gl_sub_head_code(&mut self) {
        self.gl_sub_head_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_sub_head_code(&mut self, v: ::std::string::String) {
        self.gl_sub_head_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_sub_head_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_sub_head_code
    }

    // Take field
    pub fn take_gl_sub_head_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_sub_head_code, ::std::string::String::new())
    }

    // string npa_classification = 37;


    pub fn get_npa_classification(&self) -> &str {
        &self.npa_classification
    }
    pub fn clear_npa_classification(&mut self) {
        self.npa_classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_classification(&mut self, v: ::std::string::String) {
        self.npa_classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_classification(&mut self) -> &mut ::std::string::String {
        &mut self.npa_classification
    }

    // Take field
    pub fn take_npa_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_classification, ::std::string::String::new())
    }

    // string cust_hlth_code = 38;


    pub fn get_cust_hlth_code(&self) -> &str {
        &self.cust_hlth_code
    }
    pub fn clear_cust_hlth_code(&mut self) {
        self.cust_hlth_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_hlth_code(&mut self, v: ::std::string::String) {
        self.cust_hlth_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_hlth_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_hlth_code
    }

    // Take field
    pub fn take_cust_hlth_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_hlth_code, ::std::string::String::new())
    }

    // string cust_npa_class = 39;


    pub fn get_cust_npa_class(&self) -> &str {
        &self.cust_npa_class
    }
    pub fn clear_cust_npa_class(&mut self) {
        self.cust_npa_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_npa_class(&mut self, v: ::std::string::String) {
        self.cust_npa_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_npa_class(&mut self) -> &mut ::std::string::String {
        &mut self.cust_npa_class
    }

    // Take field
    pub fn take_cust_npa_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_npa_class, ::std::string::String::new())
    }

    // string final_npa_class = 40;


    pub fn get_final_npa_class(&self) -> &str {
        &self.final_npa_class
    }
    pub fn clear_final_npa_class(&mut self) {
        self.final_npa_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_final_npa_class(&mut self, v: ::std::string::String) {
        self.final_npa_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_final_npa_class(&mut self) -> &mut ::std::string::String {
        &mut self.final_npa_class
    }

    // Take field
    pub fn take_final_npa_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.final_npa_class, ::std::string::String::new())
    }

    // double int_rate = 41;


    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }
    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    // double acct_exch_rt = 42;


    pub fn get_acct_exch_rt(&self) -> f64 {
        self.acct_exch_rt
    }
    pub fn clear_acct_exch_rt(&mut self) {
        self.acct_exch_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_acct_exch_rt(&mut self, v: f64) {
        self.acct_exch_rt = v;
    }

    // string cust_grp_id = 43;


    pub fn get_cust_grp_id(&self) -> &str {
        &self.cust_grp_id
    }
    pub fn clear_cust_grp_id(&mut self) {
        self.cust_grp_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_grp_id(&mut self, v: ::std::string::String) {
        self.cust_grp_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_grp_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_grp_id
    }

    // Take field
    pub fn take_cust_grp_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_grp_id, ::std::string::String::new())
    }

    // string ucif_cust_const = 44;


    pub fn get_ucif_cust_const(&self) -> &str {
        &self.ucif_cust_const
    }
    pub fn clear_ucif_cust_const(&mut self) {
        self.ucif_cust_const.clear();
    }

    // Param is passed by value, moved
    pub fn set_ucif_cust_const(&mut self, v: ::std::string::String) {
        self.ucif_cust_const = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ucif_cust_const(&mut self) -> &mut ::std::string::String {
        &mut self.ucif_cust_const
    }

    // Take field
    pub fn take_ucif_cust_const(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ucif_cust_const, ::std::string::String::new())
    }

    // string exch_rt = 45;


    pub fn get_exch_rt(&self) -> &str {
        &self.exch_rt
    }
    pub fn clear_exch_rt(&mut self) {
        self.exch_rt.clear();
    }

    // Param is passed by value, moved
    pub fn set_exch_rt(&mut self, v: ::std::string::String) {
        self.exch_rt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exch_rt(&mut self) -> &mut ::std::string::String {
        &mut self.exch_rt
    }

    // Take field
    pub fn take_exch_rt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.exch_rt, ::std::string::String::new())
    }

    // string out_bal_amt_con = 46;


    pub fn get_out_bal_amt_con(&self) -> &str {
        &self.out_bal_amt_con
    }
    pub fn clear_out_bal_amt_con(&mut self) {
        self.out_bal_amt_con.clear();
    }

    // Param is passed by value, moved
    pub fn set_out_bal_amt_con(&mut self, v: ::std::string::String) {
        self.out_bal_amt_con = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_out_bal_amt_con(&mut self) -> &mut ::std::string::String {
        &mut self.out_bal_amt_con
    }

    // Take field
    pub fn take_out_bal_amt_con(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.out_bal_amt_con, ::std::string::String::new())
    }

    // string segment_code = 47;


    pub fn get_segment_code(&self) -> &str {
        &self.segment_code
    }
    pub fn clear_segment_code(&mut self) {
        self.segment_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_segment_code(&mut self, v: ::std::string::String) {
        self.segment_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_segment_code(&mut self) -> &mut ::std::string::String {
        &mut self.segment_code
    }

    // Take field
    pub fn take_segment_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.segment_code, ::std::string::String::new())
    }

    // string nfs = 48;


    pub fn get_nfs(&self) -> &str {
        &self.nfs
    }
    pub fn clear_nfs(&mut self) {
        self.nfs.clear();
    }

    // Param is passed by value, moved
    pub fn set_nfs(&mut self, v: ::std::string::String) {
        self.nfs = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nfs(&mut self) -> &mut ::std::string::String {
        &mut self.nfs
    }

    // Take field
    pub fn take_nfs(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nfs, ::std::string::String::new())
    }

    // string overdue_flg = 49;


    pub fn get_overdue_flg(&self) -> &str {
        &self.overdue_flg
    }
    pub fn clear_overdue_flg(&mut self) {
        self.overdue_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_overdue_flg(&mut self, v: ::std::string::String) {
        self.overdue_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_overdue_flg(&mut self) -> &mut ::std::string::String {
        &mut self.overdue_flg
    }

    // Take field
    pub fn take_overdue_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.overdue_flg, ::std::string::String::new())
    }

    // repeated .Cashflow cashflows = 50;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_number)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acid)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.foracid)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bacid)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.solid)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_id)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schm_code)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schm_type)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bill_param_type)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bill_b2k_id)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bill_id)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bill_amt = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bill_amt_inr = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bill_crncy_code)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.due_date = tmp;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bp_acid)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.del_flg)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cls_flg)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reg_type)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reg_sub_type)?;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bp_liab = tmp;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bp_liab_crncy)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bill_liab_inr = tmp;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bill_stat)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bill_func_code)?;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bill_liab = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bill_liab_hc_eq = tmp;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bill_liab_crncy)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bill_liab_crncy_der)?;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.clr_bal_amt = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.un_clr_bal_amt = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.out_bal_amt = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acct_opn_date = tmp;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acct_crncy_code)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_name)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_sub_head_code)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa_classification)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_hlth_code)?;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_npa_class)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.final_npa_class)?;
                },
                41 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.acct_exch_rt = tmp;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_grp_id)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ucif_cust_const)?;
                },
                45 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.exch_rt)?;
                },
                46 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.out_bal_amt_con)?;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.segment_code)?;
                },
                48 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nfs)?;
                },
                49 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.overdue_flg)?;
                },
                50 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.account_number);
        }
        if !self.acid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.acid);
        }
        if !self.foracid.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.foracid);
        }
        if !self.bacid.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.bacid);
        }
        if !self.solid.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.solid);
        }
        if !self.cust_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.cust_id);
        }
        if !self.schm_code.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.schm_code);
        }
        if !self.schm_type.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.schm_type);
        }
        if !self.bill_param_type.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.bill_param_type);
        }
        if !self.bill_b2k_id.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.bill_b2k_id);
        }
        if !self.bill_id.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.bill_id);
        }
        if self.bill_amt != 0. {
            my_size += 9;
        }
        if self.bill_amt_inr != 0. {
            my_size += 9;
        }
        if !self.bill_crncy_code.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.bill_crncy_code);
        }
        if self.due_date != 0 {
            my_size += ::protobuf::rt::value_size(15, self.due_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bp_acid.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.bp_acid);
        }
        if !self.del_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.del_flg);
        }
        if !self.cls_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.cls_flg);
        }
        if !self.reg_type.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.reg_type);
        }
        if !self.reg_sub_type.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.reg_sub_type);
        }
        if self.bp_liab != 0. {
            my_size += 10;
        }
        if !self.bp_liab_crncy.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.bp_liab_crncy);
        }
        if self.bill_liab_inr != 0. {
            my_size += 10;
        }
        if !self.bill_stat.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.bill_stat);
        }
        if !self.bill_func_code.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.bill_func_code);
        }
        if self.bill_liab != 0. {
            my_size += 10;
        }
        if self.bill_liab_hc_eq != 0. {
            my_size += 10;
        }
        if !self.bill_liab_crncy.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.bill_liab_crncy);
        }
        if !self.bill_liab_crncy_der.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.bill_liab_crncy_der);
        }
        if self.clr_bal_amt != 0. {
            my_size += 10;
        }
        if self.un_clr_bal_amt != 0. {
            my_size += 10;
        }
        if self.out_bal_amt != 0. {
            my_size += 10;
        }
        if self.acct_opn_date != 0 {
            my_size += ::protobuf::rt::value_size(33, self.acct_opn_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.acct_crncy_code.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.acct_crncy_code);
        }
        if !self.cust_name.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.cust_name);
        }
        if !self.gl_sub_head_code.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.gl_sub_head_code);
        }
        if !self.npa_classification.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.npa_classification);
        }
        if !self.cust_hlth_code.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.cust_hlth_code);
        }
        if !self.cust_npa_class.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.cust_npa_class);
        }
        if !self.final_npa_class.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.final_npa_class);
        }
        if self.int_rate != 0. {
            my_size += 10;
        }
        if self.acct_exch_rt != 0. {
            my_size += 10;
        }
        if !self.cust_grp_id.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.cust_grp_id);
        }
        if !self.ucif_cust_const.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.ucif_cust_const);
        }
        if !self.exch_rt.is_empty() {
            my_size += ::protobuf::rt::string_size(45, &self.exch_rt);
        }
        if !self.out_bal_amt_con.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.out_bal_amt_con);
        }
        if !self.segment_code.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.segment_code);
        }
        if !self.nfs.is_empty() {
            my_size += ::protobuf::rt::string_size(48, &self.nfs);
        }
        if !self.overdue_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(49, &self.overdue_flg);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.account_number.is_empty() {
            os.write_string(1, &self.account_number)?;
        }
        if !self.acid.is_empty() {
            os.write_string(2, &self.acid)?;
        }
        if !self.foracid.is_empty() {
            os.write_string(3, &self.foracid)?;
        }
        if !self.bacid.is_empty() {
            os.write_string(4, &self.bacid)?;
        }
        if !self.solid.is_empty() {
            os.write_string(5, &self.solid)?;
        }
        if !self.cust_id.is_empty() {
            os.write_string(6, &self.cust_id)?;
        }
        if !self.schm_code.is_empty() {
            os.write_string(7, &self.schm_code)?;
        }
        if !self.schm_type.is_empty() {
            os.write_string(8, &self.schm_type)?;
        }
        if !self.bill_param_type.is_empty() {
            os.write_string(9, &self.bill_param_type)?;
        }
        if !self.bill_b2k_id.is_empty() {
            os.write_string(10, &self.bill_b2k_id)?;
        }
        if !self.bill_id.is_empty() {
            os.write_string(11, &self.bill_id)?;
        }
        if self.bill_amt != 0. {
            os.write_double(12, self.bill_amt)?;
        }
        if self.bill_amt_inr != 0. {
            os.write_double(13, self.bill_amt_inr)?;
        }
        if !self.bill_crncy_code.is_empty() {
            os.write_string(14, &self.bill_crncy_code)?;
        }
        if self.due_date != 0 {
            os.write_int64(15, self.due_date)?;
        }
        if !self.bp_acid.is_empty() {
            os.write_string(16, &self.bp_acid)?;
        }
        if !self.del_flg.is_empty() {
            os.write_string(17, &self.del_flg)?;
        }
        if !self.cls_flg.is_empty() {
            os.write_string(18, &self.cls_flg)?;
        }
        if !self.reg_type.is_empty() {
            os.write_string(19, &self.reg_type)?;
        }
        if !self.reg_sub_type.is_empty() {
            os.write_string(20, &self.reg_sub_type)?;
        }
        if self.bp_liab != 0. {
            os.write_double(21, self.bp_liab)?;
        }
        if !self.bp_liab_crncy.is_empty() {
            os.write_string(22, &self.bp_liab_crncy)?;
        }
        if self.bill_liab_inr != 0. {
            os.write_double(23, self.bill_liab_inr)?;
        }
        if !self.bill_stat.is_empty() {
            os.write_string(24, &self.bill_stat)?;
        }
        if !self.bill_func_code.is_empty() {
            os.write_string(25, &self.bill_func_code)?;
        }
        if self.bill_liab != 0. {
            os.write_double(26, self.bill_liab)?;
        }
        if self.bill_liab_hc_eq != 0. {
            os.write_double(27, self.bill_liab_hc_eq)?;
        }
        if !self.bill_liab_crncy.is_empty() {
            os.write_string(28, &self.bill_liab_crncy)?;
        }
        if !self.bill_liab_crncy_der.is_empty() {
            os.write_string(29, &self.bill_liab_crncy_der)?;
        }
        if self.clr_bal_amt != 0. {
            os.write_double(30, self.clr_bal_amt)?;
        }
        if self.un_clr_bal_amt != 0. {
            os.write_double(31, self.un_clr_bal_amt)?;
        }
        if self.out_bal_amt != 0. {
            os.write_double(32, self.out_bal_amt)?;
        }
        if self.acct_opn_date != 0 {
            os.write_int64(33, self.acct_opn_date)?;
        }
        if !self.acct_crncy_code.is_empty() {
            os.write_string(34, &self.acct_crncy_code)?;
        }
        if !self.cust_name.is_empty() {
            os.write_string(35, &self.cust_name)?;
        }
        if !self.gl_sub_head_code.is_empty() {
            os.write_string(36, &self.gl_sub_head_code)?;
        }
        if !self.npa_classification.is_empty() {
            os.write_string(37, &self.npa_classification)?;
        }
        if !self.cust_hlth_code.is_empty() {
            os.write_string(38, &self.cust_hlth_code)?;
        }
        if !self.cust_npa_class.is_empty() {
            os.write_string(39, &self.cust_npa_class)?;
        }
        if !self.final_npa_class.is_empty() {
            os.write_string(40, &self.final_npa_class)?;
        }
        if self.int_rate != 0. {
            os.write_double(41, self.int_rate)?;
        }
        if self.acct_exch_rt != 0. {
            os.write_double(42, self.acct_exch_rt)?;
        }
        if !self.cust_grp_id.is_empty() {
            os.write_string(43, &self.cust_grp_id)?;
        }
        if !self.ucif_cust_const.is_empty() {
            os.write_string(44, &self.ucif_cust_const)?;
        }
        if !self.exch_rt.is_empty() {
            os.write_string(45, &self.exch_rt)?;
        }
        if !self.out_bal_amt_con.is_empty() {
            os.write_string(46, &self.out_bal_amt_con)?;
        }
        if !self.segment_code.is_empty() {
            os.write_string(47, &self.segment_code)?;
        }
        if !self.nfs.is_empty() {
            os.write_string(48, &self.nfs)?;
        }
        if !self.overdue_flg.is_empty() {
            os.write_string(49, &self.overdue_flg)?;
        }
        for v in &self.cashflows {
            os.write_tag(50, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_number",
                |m: &AccountWithCashflows| { &m.account_number },
                |m: &mut AccountWithCashflows| { &mut m.account_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acid",
                |m: &AccountWithCashflows| { &m.acid },
                |m: &mut AccountWithCashflows| { &mut m.acid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "foracid",
                |m: &AccountWithCashflows| { &m.foracid },
                |m: &mut AccountWithCashflows| { &mut m.foracid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bacid",
                |m: &AccountWithCashflows| { &m.bacid },
                |m: &mut AccountWithCashflows| { &mut m.bacid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "solid",
                |m: &AccountWithCashflows| { &m.solid },
                |m: &mut AccountWithCashflows| { &mut m.solid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_id",
                |m: &AccountWithCashflows| { &m.cust_id },
                |m: &mut AccountWithCashflows| { &mut m.cust_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "schm_code",
                |m: &AccountWithCashflows| { &m.schm_code },
                |m: &mut AccountWithCashflows| { &mut m.schm_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "schm_type",
                |m: &AccountWithCashflows| { &m.schm_type },
                |m: &mut AccountWithCashflows| { &mut m.schm_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bill_param_type",
                |m: &AccountWithCashflows| { &m.bill_param_type },
                |m: &mut AccountWithCashflows| { &mut m.bill_param_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bill_b2k_id",
                |m: &AccountWithCashflows| { &m.bill_b2k_id },
                |m: &mut AccountWithCashflows| { &mut m.bill_b2k_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bill_id",
                |m: &AccountWithCashflows| { &m.bill_id },
                |m: &mut AccountWithCashflows| { &mut m.bill_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bill_amt",
                |m: &AccountWithCashflows| { &m.bill_amt },
                |m: &mut AccountWithCashflows| { &mut m.bill_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bill_amt_inr",
                |m: &AccountWithCashflows| { &m.bill_amt_inr },
                |m: &mut AccountWithCashflows| { &mut m.bill_amt_inr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bill_crncy_code",
                |m: &AccountWithCashflows| { &m.bill_crncy_code },
                |m: &mut AccountWithCashflows| { &mut m.bill_crncy_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "due_date",
                |m: &AccountWithCashflows| { &m.due_date },
                |m: &mut AccountWithCashflows| { &mut m.due_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bp_acid",
                |m: &AccountWithCashflows| { &m.bp_acid },
                |m: &mut AccountWithCashflows| { &mut m.bp_acid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "del_flg",
                |m: &AccountWithCashflows| { &m.del_flg },
                |m: &mut AccountWithCashflows| { &mut m.del_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cls_flg",
                |m: &AccountWithCashflows| { &m.cls_flg },
                |m: &mut AccountWithCashflows| { &mut m.cls_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reg_type",
                |m: &AccountWithCashflows| { &m.reg_type },
                |m: &mut AccountWithCashflows| { &mut m.reg_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reg_sub_type",
                |m: &AccountWithCashflows| { &m.reg_sub_type },
                |m: &mut AccountWithCashflows| { &mut m.reg_sub_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bp_liab",
                |m: &AccountWithCashflows| { &m.bp_liab },
                |m: &mut AccountWithCashflows| { &mut m.bp_liab },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bp_liab_crncy",
                |m: &AccountWithCashflows| { &m.bp_liab_crncy },
                |m: &mut AccountWithCashflows| { &mut m.bp_liab_crncy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bill_liab_inr",
                |m: &AccountWithCashflows| { &m.bill_liab_inr },
                |m: &mut AccountWithCashflows| { &mut m.bill_liab_inr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bill_stat",
                |m: &AccountWithCashflows| { &m.bill_stat },
                |m: &mut AccountWithCashflows| { &mut m.bill_stat },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bill_func_code",
                |m: &AccountWithCashflows| { &m.bill_func_code },
                |m: &mut AccountWithCashflows| { &mut m.bill_func_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bill_liab",
                |m: &AccountWithCashflows| { &m.bill_liab },
                |m: &mut AccountWithCashflows| { &mut m.bill_liab },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bill_liab_hc_eq",
                |m: &AccountWithCashflows| { &m.bill_liab_hc_eq },
                |m: &mut AccountWithCashflows| { &mut m.bill_liab_hc_eq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bill_liab_crncy",
                |m: &AccountWithCashflows| { &m.bill_liab_crncy },
                |m: &mut AccountWithCashflows| { &mut m.bill_liab_crncy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bill_liab_crncy_der",
                |m: &AccountWithCashflows| { &m.bill_liab_crncy_der },
                |m: &mut AccountWithCashflows| { &mut m.bill_liab_crncy_der },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "clr_bal_amt",
                |m: &AccountWithCashflows| { &m.clr_bal_amt },
                |m: &mut AccountWithCashflows| { &mut m.clr_bal_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "un_clr_bal_amt",
                |m: &AccountWithCashflows| { &m.un_clr_bal_amt },
                |m: &mut AccountWithCashflows| { &mut m.un_clr_bal_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "out_bal_amt",
                |m: &AccountWithCashflows| { &m.out_bal_amt },
                |m: &mut AccountWithCashflows| { &mut m.out_bal_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "acct_opn_date",
                |m: &AccountWithCashflows| { &m.acct_opn_date },
                |m: &mut AccountWithCashflows| { &mut m.acct_opn_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acct_crncy_code",
                |m: &AccountWithCashflows| { &m.acct_crncy_code },
                |m: &mut AccountWithCashflows| { &mut m.acct_crncy_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_name",
                |m: &AccountWithCashflows| { &m.cust_name },
                |m: &mut AccountWithCashflows| { &mut m.cust_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_sub_head_code",
                |m: &AccountWithCashflows| { &m.gl_sub_head_code },
                |m: &mut AccountWithCashflows| { &mut m.gl_sub_head_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "npa_classification",
                |m: &AccountWithCashflows| { &m.npa_classification },
                |m: &mut AccountWithCashflows| { &mut m.npa_classification },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_hlth_code",
                |m: &AccountWithCashflows| { &m.cust_hlth_code },
                |m: &mut AccountWithCashflows| { &mut m.cust_hlth_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_npa_class",
                |m: &AccountWithCashflows| { &m.cust_npa_class },
                |m: &mut AccountWithCashflows| { &mut m.cust_npa_class },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "final_npa_class",
                |m: &AccountWithCashflows| { &m.final_npa_class },
                |m: &mut AccountWithCashflows| { &mut m.final_npa_class },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_rate",
                |m: &AccountWithCashflows| { &m.int_rate },
                |m: &mut AccountWithCashflows| { &mut m.int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "acct_exch_rt",
                |m: &AccountWithCashflows| { &m.acct_exch_rt },
                |m: &mut AccountWithCashflows| { &mut m.acct_exch_rt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_grp_id",
                |m: &AccountWithCashflows| { &m.cust_grp_id },
                |m: &mut AccountWithCashflows| { &mut m.cust_grp_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ucif_cust_const",
                |m: &AccountWithCashflows| { &m.ucif_cust_const },
                |m: &mut AccountWithCashflows| { &mut m.ucif_cust_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "exch_rt",
                |m: &AccountWithCashflows| { &m.exch_rt },
                |m: &mut AccountWithCashflows| { &mut m.exch_rt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "out_bal_amt_con",
                |m: &AccountWithCashflows| { &m.out_bal_amt_con },
                |m: &mut AccountWithCashflows| { &mut m.out_bal_amt_con },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "segment_code",
                |m: &AccountWithCashflows| { &m.segment_code },
                |m: &mut AccountWithCashflows| { &mut m.segment_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nfs",
                |m: &AccountWithCashflows| { &m.nfs },
                |m: &mut AccountWithCashflows| { &mut m.nfs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "overdue_flg",
                |m: &AccountWithCashflows| { &m.overdue_flg },
                |m: &mut AccountWithCashflows| { &mut m.overdue_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.account_number.clear();
        self.acid.clear();
        self.foracid.clear();
        self.bacid.clear();
        self.solid.clear();
        self.cust_id.clear();
        self.schm_code.clear();
        self.schm_type.clear();
        self.bill_param_type.clear();
        self.bill_b2k_id.clear();
        self.bill_id.clear();
        self.bill_amt = 0.;
        self.bill_amt_inr = 0.;
        self.bill_crncy_code.clear();
        self.due_date = 0;
        self.bp_acid.clear();
        self.del_flg.clear();
        self.cls_flg.clear();
        self.reg_type.clear();
        self.reg_sub_type.clear();
        self.bp_liab = 0.;
        self.bp_liab_crncy.clear();
        self.bill_liab_inr = 0.;
        self.bill_stat.clear();
        self.bill_func_code.clear();
        self.bill_liab = 0.;
        self.bill_liab_hc_eq = 0.;
        self.bill_liab_crncy.clear();
        self.bill_liab_crncy_der.clear();
        self.clr_bal_amt = 0.;
        self.un_clr_bal_amt = 0.;
        self.out_bal_amt = 0.;
        self.acct_opn_date = 0;
        self.acct_crncy_code.clear();
        self.cust_name.clear();
        self.gl_sub_head_code.clear();
        self.npa_classification.clear();
        self.cust_hlth_code.clear();
        self.cust_npa_class.clear();
        self.final_npa_class.clear();
        self.int_rate = 0.;
        self.acct_exch_rt = 0.;
        self.cust_grp_id.clear();
        self.ucif_cust_const.clear();
        self.exch_rt.clear();
        self.out_bal_amt_con.clear();
        self.segment_code.clear();
        self.nfs.clear();
        self.overdue_flg.clear();
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bbills.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\x20\
    \x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\x01(\
    \x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\
    \"\xe9\x0c\n\rAccountWithCashflows\x12%\n\x0eaccount_number\x18\x01\x20\x01(\tR\
    \raccountNumber\x12\x12\n\x04acid\x18\x02\x20\x01(\tR\x04acid\x12\x18\n\
    \x07foracid\x18\x03\x20\x01(\tR\x07foracid\x12\x14\n\x05bacid\x18\x04\
    \x20\x01(\tR\x05bacid\x12\x14\n\x05solid\x18\x05\x20\x01(\tR\x05solid\
    \x12\x17\n\x07cust_id\x18\x06\x20\x01(\tR\x06custId\x12\x1b\n\tschm_code\
    \x18\x07\x20\x01(\tR\x08schmCode\x12\x1b\n\tschm_type\x18\x08\x20\x01(\t\
    R\x08schmType\x12&\n\x0fbill_param_type\x18\t\x20\x01(\tR\rbillParamType\
    \x12\x1e\n\x0bbill_b2k_id\x18\n\x20\x01(\tR\tbillB2kId\x12\x17\n\x07bill\
    _id\x18\x0b\x20\x01(\tR\x06billId\x12\x19\n\x08bill_amt\x18\x0c\x20\x01(\
    \x01R\x07billAmt\x12\x20\n\x0cbill_amt_inr\x18\r\x20\x01(\x01R\nbillAmtI\
    nr\x12&\n\x0fbill_crncy_code\x18\x0e\x20\x01(\tR\rbillCrncyCode\x12\x19\
    \n\x08due_date\x18\x0f\x20\x01(\x03R\x07dueDate\x12\x17\n\x07bp_acid\x18\
    \x10\x20\x01(\tR\x06bpAcid\x12\x17\n\x07del_flg\x18\x11\x20\x01(\tR\x06d\
    elFlg\x12\x17\n\x07cls_flg\x18\x12\x20\x01(\tR\x06clsFlg\x12\x19\n\x08re\
    g_type\x18\x13\x20\x01(\tR\x07regType\x12\x20\n\x0creg_sub_type\x18\x14\
    \x20\x01(\tR\nregSubType\x12\x17\n\x07bp_liab\x18\x15\x20\x01(\x01R\x06b\
    pLiab\x12\"\n\rbp_liab_crncy\x18\x16\x20\x01(\tR\x0bbpLiabCrncy\x12\"\n\
    \rbill_liab_inr\x18\x17\x20\x01(\x01R\x0bbillLiabInr\x12\x1b\n\tbill_sta\
    t\x18\x18\x20\x01(\tR\x08billStat\x12$\n\x0ebill_func_code\x18\x19\x20\
    \x01(\tR\x0cbillFuncCode\x12\x1b\n\tbill_liab\x18\x1a\x20\x01(\x01R\x08b\
    illLiab\x12%\n\x0fbill_liab_hc_eq\x18\x1b\x20\x01(\x01R\x0cbillLiabHcEq\
    \x12&\n\x0fbill_liab_crncy\x18\x1c\x20\x01(\tR\rbillLiabCrncy\x12-\n\x13\
    bill_liab_crncy_der\x18\x1d\x20\x01(\tR\x10billLiabCrncyDer\x12\x1e\n\
    \x0bclr_bal_amt\x18\x1e\x20\x01(\x01R\tclrBalAmt\x12#\n\x0eun_clr_bal_am\
    t\x18\x1f\x20\x01(\x01R\x0bunClrBalAmt\x12\x1e\n\x0bout_bal_amt\x18\x20\
    \x20\x01(\x01R\toutBalAmt\x12\"\n\racct_opn_date\x18!\x20\x01(\x03R\x0ba\
    cctOpnDate\x12&\n\x0facct_crncy_code\x18\"\x20\x01(\tR\racctCrncyCode\
    \x12\x1b\n\tcust_name\x18#\x20\x01(\tR\x08custName\x12'\n\x10gl_sub_head\
    _code\x18$\x20\x01(\tR\rglSubHeadCode\x12-\n\x12npa_classification\x18%\
    \x20\x01(\tR\x11npaClassification\x12$\n\x0ecust_hlth_code\x18&\x20\x01(\
    \tR\x0ccustHlthCode\x12$\n\x0ecust_npa_class\x18'\x20\x01(\tR\x0ccustNpa\
    Class\x12&\n\x0ffinal_npa_class\x18(\x20\x01(\tR\rfinalNpaClass\x12\x19\
    \n\x08int_rate\x18)\x20\x01(\x01R\x07intRate\x12\x20\n\x0cacct_exch_rt\
    \x18*\x20\x01(\x01R\nacctExchRt\x12\x1e\n\x0bcust_grp_id\x18+\x20\x01(\t\
    R\tcustGrpId\x12&\n\x0fucif_cust_const\x18,\x20\x01(\tR\rucifCustConst\
    \x12\x17\n\x07exch_rt\x18-\x20\x01(\tR\x06exchRt\x12%\n\x0fout_bal_amt_c\
    on\x18.\x20\x01(\tR\x0coutBalAmtCon\x12!\n\x0csegment_code\x18/\x20\x01(\
    \tR\x0bsegmentCode\x12\x10\n\x03nfs\x180\x20\x01(\tR\x03nfs\x12\x1f\n\
    \x0boverdue_flg\x181\x20\x01(\tR\noverdueFlg\x12'\n\tcashflows\x182\x20\
    \x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
