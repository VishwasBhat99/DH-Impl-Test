use rbdate::NaiveDate;
use statics::*;

#[derive(Debug, Serialize, Deserialize, Default)]
pub struct InputAccount {
    pub as_on_month: String,
    pub account_id: String,
    pub currency: String,
    pub balance_ccy: String,
    pub balance_hcy: String,
    pub int_rate: String,
    pub int_amt_ccy: String,
    pub int_amt_hcy: String,
    pub ftp_method: String,
    pub base_rate_curve_id: String,
    pub rate_flag: String,
    pub adj_code_1: String,
    pub adj_code_2: String,
    pub adj_code_3: String,
    pub adj_code_4: String,
    pub adj_code_5: String,
    pub adj_code_6: String,
    pub val_dt: String,
    pub open_dt: String,
    pub mat_dt: String,
    pub lst_repricing_dt: String,
    pub rep_freq: String,
    pub cust_agg_bal: String,
    pub day_count_basis: String,
    pub base_rate: String,
    pub adj_rate_1: String,
    pub adj_rate_2: String,
    pub adj_rate_3: String,
    pub adj_rate_4: String,
    pub adj_rate_5: String,
    pub adj_rate_6: String,
    pub ftp_rate: String,
    pub lock_spread: String,
    pub ftp_amt_ccy: String,
    pub ftp_amt_hcy: String,
    pub a_or_l: String,
    pub dim1: String,
    pub dim2: String,
    pub dim3: String,
    pub dim4: String,
    pub customer_id: String,
    pub rl1: String,
    pub rl2: String,
    pub rl3: String,
}

#[derive(Debug)]
pub struct InputParsedAccount {
    pub as_on_month: NaiveDate,
    pub account_id: String,
    pub currency: String,
    pub balance_ccy: f64,
    pub balance_hcy: f64,
    pub int_rate: f64,
    pub int_amt_ccy: f64,
    pub int_amt_hcy: f64,
    pub ftp_method: String,
    pub base_rate_curve_id: String,
    pub rate_flag: String,
    pub adj_code_1: String,
    pub adj_code_2: String,
    pub adj_code_3: String,
    pub adj_code_4: String,
    pub adj_code_5: String,
    pub adj_code_6: String,
    pub val_dt: NaiveDate,
    pub open_dt: NaiveDate,
    pub mat_dt: NaiveDate,
    pub lst_repricing_dt: NaiveDate,
    pub rep_freq: String,
    pub cust_agg_bal: f64,
    pub day_count_basis: String,
    pub base_rate: f64,
    pub adj_rate_1: f64,
    pub adj_rate_2: f64,
    pub adj_rate_3: f64,
    pub adj_rate_4: f64,
    pub adj_rate_5: f64,
    pub adj_rate_6: f64,
    pub ftp_rate: f64,
    pub lock_spread: f64,
    pub ftp_amt_ccy: f64,
    pub ftp_amt_hcy: f64,
    pub a_or_l: String,
    pub dim1: String,
    pub dim2: String,
    pub dim3: String,
    pub dim4: String,
    pub customer_id: String,
    pub rl1: i32,
    pub rl2: String,
    pub rl3: String,
}

impl InputAccount {
    pub fn parse(&self) -> InputParsedAccount {
        InputParsedAccount {
            as_on_month: NaiveDate::parse_from_str(&self.as_on_month, "%d-%m-%Y")
                .expect("Error getting `as_on_month` while parsing input record."),
            account_id: self.account_id.to_string(),
            currency: self.currency.to_string(),
            balance_ccy: self.balance_ccy.parse().unwrap_or(DEFAULT_FLOAT),
            balance_hcy: self.balance_hcy.parse().unwrap_or(DEFAULT_FLOAT),
            int_rate: self.int_rate.parse().unwrap_or(DEFAULT_FLOAT),
            int_amt_ccy: self.int_amt_ccy.parse().unwrap_or(DEFAULT_FLOAT),
            int_amt_hcy: self.int_amt_hcy.parse().unwrap_or(DEFAULT_FLOAT),
            ftp_method: self.ftp_method.to_string(),
            base_rate_curve_id: self.base_rate_curve_id.to_string(),
            rate_flag: self.rate_flag.to_string(),
            adj_code_1: self.adj_code_1.to_string(),
            adj_code_2: self.adj_code_2.to_string(),
            adj_code_3: self.adj_code_3.to_string(),
            adj_code_4: self.adj_code_4.to_string(),
            adj_code_5: self.adj_code_5.to_string(),
            adj_code_6: self.adj_code_6.to_string(),
            val_dt: NaiveDate::parse_from_str(&self.val_dt, "%d-%m-%Y")
                .expect("Error getting `val_dt` while parsing input record."),
            open_dt: NaiveDate::parse_from_str(&self.open_dt, "%d-%m-%Y")
                .expect("Error getting `open_dt` while parsing input record."),
            mat_dt: NaiveDate::parse_from_str(&self.mat_dt, "%d-%m-%Y")
                .expect("Error getting `mat_dt` while parsing input record."),
            lst_repricing_dt: NaiveDate::parse_from_str(&self.lst_repricing_dt, "%d-%m-%Y")
                .expect("Error getting `lst_repricing_dt` while parsing input record."),
            rep_freq: self.rep_freq.to_string(),
            cust_agg_bal: self.cust_agg_bal.parse().unwrap_or(DEFAULT_FLOAT),
            day_count_basis: self.day_count_basis.to_string(),
            base_rate: self.base_rate.parse().unwrap_or(DEFAULT_FLOAT),
            adj_rate_1: self.adj_rate_1.parse().unwrap_or(DEFAULT_FLOAT),
            adj_rate_2: self.adj_rate_2.parse().unwrap_or(DEFAULT_FLOAT),
            adj_rate_3: self.adj_rate_3.parse().unwrap_or(DEFAULT_FLOAT),
            adj_rate_4: self.adj_rate_4.parse().unwrap_or(DEFAULT_FLOAT),
            adj_rate_5: self.adj_rate_5.parse().unwrap_or(DEFAULT_FLOAT),
            adj_rate_6: self.adj_rate_6.parse().unwrap_or(DEFAULT_FLOAT),
            ftp_rate: self.ftp_rate.parse().unwrap_or(DEFAULT_FLOAT),
            lock_spread: self.lock_spread.parse().unwrap_or(DEFAULT_FLOAT),
            ftp_amt_ccy: self.ftp_amt_ccy.parse().unwrap_or(DEFAULT_FLOAT),
            ftp_amt_hcy: self.ftp_amt_hcy.parse().unwrap_or(DEFAULT_FLOAT),
            a_or_l: self.a_or_l.to_string(),
            dim1: self.dim1.to_string(),
            dim2: self.dim2.to_string(),
            dim3: self.dim3.to_string(),
            dim4: self.dim4.to_string(),
            customer_id: self.customer_id.to_string(),
            rl1: self.rl1.parse().unwrap_or(DEFAULT_INT as i32),
            rl2: self.rl2.to_string(),
            rl3: self.rl3.to_string(),
        }
    }
}
