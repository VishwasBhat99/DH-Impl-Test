// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub acc_no: ::std::string::String,
    pub counter_party: ::std::string::String,
    pub ccy: ::std::string::String,
    pub gl_no: i64,
    pub amt: f64,
    pub int_rt: f64,
    pub st_dt: i64,
    pub mat_dt: i64,
    pub alm_line: ::std::string::String,
    pub div: ::std::string::String,
    pub cust_typ: ::std::string::String,
    pub as_on_dt: i64,
    pub nxt_rep_dt: i64,
    pub compmis1: i64,
    pub compmis2: i64,
    pub compmis3: i64,
    pub prod_category: ::std::string::String,
    pub ia_line: ::std::string::String,
    pub tot_int_amt: f64,
    pub tot_prin_amt: f64,
    pub sma_flag: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string acc_no = 1;


    pub fn get_acc_no(&self) -> &str {
        &self.acc_no
    }
    pub fn clear_acc_no(&mut self) {
        self.acc_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_no(&mut self, v: ::std::string::String) {
        self.acc_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_no(&mut self) -> &mut ::std::string::String {
        &mut self.acc_no
    }

    // Take field
    pub fn take_acc_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_no, ::std::string::String::new())
    }

    // string counter_party = 2;


    pub fn get_counter_party(&self) -> &str {
        &self.counter_party
    }
    pub fn clear_counter_party(&mut self) {
        self.counter_party.clear();
    }

    // Param is passed by value, moved
    pub fn set_counter_party(&mut self, v: ::std::string::String) {
        self.counter_party = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counter_party(&mut self) -> &mut ::std::string::String {
        &mut self.counter_party
    }

    // Take field
    pub fn take_counter_party(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counter_party, ::std::string::String::new())
    }

    // string ccy = 3;


    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }
    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    // int64 gl_no = 4;


    pub fn get_gl_no(&self) -> i64 {
        self.gl_no
    }
    pub fn clear_gl_no(&mut self) {
        self.gl_no = 0;
    }

    // Param is passed by value, moved
    pub fn set_gl_no(&mut self, v: i64) {
        self.gl_no = v;
    }

    // double amt = 5;


    pub fn get_amt(&self) -> f64 {
        self.amt
    }
    pub fn clear_amt(&mut self) {
        self.amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amt(&mut self, v: f64) {
        self.amt = v;
    }

    // double int_rt = 6;


    pub fn get_int_rt(&self) -> f64 {
        self.int_rt
    }
    pub fn clear_int_rt(&mut self) {
        self.int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rt(&mut self, v: f64) {
        self.int_rt = v;
    }

    // int64 st_dt = 7;


    pub fn get_st_dt(&self) -> i64 {
        self.st_dt
    }
    pub fn clear_st_dt(&mut self) {
        self.st_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_st_dt(&mut self, v: i64) {
        self.st_dt = v;
    }

    // int64 mat_dt = 8;


    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }
    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    // string alm_line = 9;


    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }
    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    // string div = 10;


    pub fn get_div(&self) -> &str {
        &self.div
    }
    pub fn clear_div(&mut self) {
        self.div.clear();
    }

    // Param is passed by value, moved
    pub fn set_div(&mut self, v: ::std::string::String) {
        self.div = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_div(&mut self) -> &mut ::std::string::String {
        &mut self.div
    }

    // Take field
    pub fn take_div(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.div, ::std::string::String::new())
    }

    // string cust_typ = 11;


    pub fn get_cust_typ(&self) -> &str {
        &self.cust_typ
    }
    pub fn clear_cust_typ(&mut self) {
        self.cust_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_typ(&mut self, v: ::std::string::String) {
        self.cust_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_typ(&mut self) -> &mut ::std::string::String {
        &mut self.cust_typ
    }

    // Take field
    pub fn take_cust_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_typ, ::std::string::String::new())
    }

    // int64 as_on_dt = 12;


    pub fn get_as_on_dt(&self) -> i64 {
        self.as_on_dt
    }
    pub fn clear_as_on_dt(&mut self) {
        self.as_on_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on_dt(&mut self, v: i64) {
        self.as_on_dt = v;
    }

    // int64 nxt_rep_dt = 13;


    pub fn get_nxt_rep_dt(&self) -> i64 {
        self.nxt_rep_dt
    }
    pub fn clear_nxt_rep_dt(&mut self) {
        self.nxt_rep_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_rep_dt(&mut self, v: i64) {
        self.nxt_rep_dt = v;
    }

    // int64 compmis1 = 14;


    pub fn get_compmis1(&self) -> i64 {
        self.compmis1
    }
    pub fn clear_compmis1(&mut self) {
        self.compmis1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_compmis1(&mut self, v: i64) {
        self.compmis1 = v;
    }

    // int64 compmis2 = 15;


    pub fn get_compmis2(&self) -> i64 {
        self.compmis2
    }
    pub fn clear_compmis2(&mut self) {
        self.compmis2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_compmis2(&mut self, v: i64) {
        self.compmis2 = v;
    }

    // int64 compmis3 = 16;


    pub fn get_compmis3(&self) -> i64 {
        self.compmis3
    }
    pub fn clear_compmis3(&mut self) {
        self.compmis3 = 0;
    }

    // Param is passed by value, moved
    pub fn set_compmis3(&mut self, v: i64) {
        self.compmis3 = v;
    }

    // string prod_category = 17;


    pub fn get_prod_category(&self) -> &str {
        &self.prod_category
    }
    pub fn clear_prod_category(&mut self) {
        self.prod_category.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_category(&mut self, v: ::std::string::String) {
        self.prod_category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_category(&mut self) -> &mut ::std::string::String {
        &mut self.prod_category
    }

    // Take field
    pub fn take_prod_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_category, ::std::string::String::new())
    }

    // string ia_line = 18;


    pub fn get_ia_line(&self) -> &str {
        &self.ia_line
    }
    pub fn clear_ia_line(&mut self) {
        self.ia_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_ia_line(&mut self, v: ::std::string::String) {
        self.ia_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ia_line(&mut self) -> &mut ::std::string::String {
        &mut self.ia_line
    }

    // Take field
    pub fn take_ia_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ia_line, ::std::string::String::new())
    }

    // double tot_int_amt = 19;


    pub fn get_tot_int_amt(&self) -> f64 {
        self.tot_int_amt
    }
    pub fn clear_tot_int_amt(&mut self) {
        self.tot_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_int_amt(&mut self, v: f64) {
        self.tot_int_amt = v;
    }

    // double tot_prin_amt = 20;


    pub fn get_tot_prin_amt(&self) -> f64 {
        self.tot_prin_amt
    }
    pub fn clear_tot_prin_amt(&mut self) {
        self.tot_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_prin_amt(&mut self, v: f64) {
        self.tot_prin_amt = v;
    }

    // string sma_flag = 21;


    pub fn get_sma_flag(&self) -> &str {
        &self.sma_flag
    }
    pub fn clear_sma_flag(&mut self) {
        self.sma_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_sma_flag(&mut self, v: ::std::string::String) {
        self.sma_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sma_flag(&mut self) -> &mut ::std::string::String {
        &mut self.sma_flag
    }

    // Take field
    pub fn take_sma_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sma_flag, ::std::string::String::new())
    }

    // repeated .Cashflow cashflows = 22;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_no)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counter_party)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.gl_no = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amt = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rt = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.st_dt = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alm_line)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.div)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_typ)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on_dt = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_rep_dt = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.compmis1 = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.compmis2 = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.compmis3 = tmp;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_category)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ia_line)?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_int_amt = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_prin_amt = tmp;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sma_flag)?;
                },
                22 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.acc_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.acc_no);
        }
        if !self.counter_party.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.counter_party);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ccy);
        }
        if self.gl_no != 0 {
            my_size += ::protobuf::rt::value_size(4, self.gl_no, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.amt != 0. {
            my_size += 9;
        }
        if self.int_rt != 0. {
            my_size += 9;
        }
        if self.st_dt != 0 {
            my_size += ::protobuf::rt::value_size(7, self.st_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mat_dt != 0 {
            my_size += ::protobuf::rt::value_size(8, self.mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.alm_line);
        }
        if !self.div.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.div);
        }
        if !self.cust_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.cust_typ);
        }
        if self.as_on_dt != 0 {
            my_size += ::protobuf::rt::value_size(12, self.as_on_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.nxt_rep_dt != 0 {
            my_size += ::protobuf::rt::value_size(13, self.nxt_rep_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.compmis1 != 0 {
            my_size += ::protobuf::rt::value_size(14, self.compmis1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.compmis2 != 0 {
            my_size += ::protobuf::rt::value_size(15, self.compmis2, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.compmis3 != 0 {
            my_size += ::protobuf::rt::value_size(16, self.compmis3, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.prod_category.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.prod_category);
        }
        if !self.ia_line.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.ia_line);
        }
        if self.tot_int_amt != 0. {
            my_size += 10;
        }
        if self.tot_prin_amt != 0. {
            my_size += 10;
        }
        if !self.sma_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.sma_flag);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.acc_no.is_empty() {
            os.write_string(1, &self.acc_no)?;
        }
        if !self.counter_party.is_empty() {
            os.write_string(2, &self.counter_party)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(3, &self.ccy)?;
        }
        if self.gl_no != 0 {
            os.write_int64(4, self.gl_no)?;
        }
        if self.amt != 0. {
            os.write_double(5, self.amt)?;
        }
        if self.int_rt != 0. {
            os.write_double(6, self.int_rt)?;
        }
        if self.st_dt != 0 {
            os.write_int64(7, self.st_dt)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(8, self.mat_dt)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(9, &self.alm_line)?;
        }
        if !self.div.is_empty() {
            os.write_string(10, &self.div)?;
        }
        if !self.cust_typ.is_empty() {
            os.write_string(11, &self.cust_typ)?;
        }
        if self.as_on_dt != 0 {
            os.write_int64(12, self.as_on_dt)?;
        }
        if self.nxt_rep_dt != 0 {
            os.write_int64(13, self.nxt_rep_dt)?;
        }
        if self.compmis1 != 0 {
            os.write_int64(14, self.compmis1)?;
        }
        if self.compmis2 != 0 {
            os.write_int64(15, self.compmis2)?;
        }
        if self.compmis3 != 0 {
            os.write_int64(16, self.compmis3)?;
        }
        if !self.prod_category.is_empty() {
            os.write_string(17, &self.prod_category)?;
        }
        if !self.ia_line.is_empty() {
            os.write_string(18, &self.ia_line)?;
        }
        if self.tot_int_amt != 0. {
            os.write_double(19, self.tot_int_amt)?;
        }
        if self.tot_prin_amt != 0. {
            os.write_double(20, self.tot_prin_amt)?;
        }
        if !self.sma_flag.is_empty() {
            os.write_string(21, &self.sma_flag)?;
        }
        for v in &self.cashflows {
            os.write_tag(22, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acc_no",
                |m: &AccountWithCashflows| { &m.acc_no },
                |m: &mut AccountWithCashflows| { &mut m.acc_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "counter_party",
                |m: &AccountWithCashflows| { &m.counter_party },
                |m: &mut AccountWithCashflows| { &mut m.counter_party },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ccy",
                |m: &AccountWithCashflows| { &m.ccy },
                |m: &mut AccountWithCashflows| { &mut m.ccy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "gl_no",
                |m: &AccountWithCashflows| { &m.gl_no },
                |m: &mut AccountWithCashflows| { &mut m.gl_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "amt",
                |m: &AccountWithCashflows| { &m.amt },
                |m: &mut AccountWithCashflows| { &mut m.amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_rt",
                |m: &AccountWithCashflows| { &m.int_rt },
                |m: &mut AccountWithCashflows| { &mut m.int_rt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "st_dt",
                |m: &AccountWithCashflows| { &m.st_dt },
                |m: &mut AccountWithCashflows| { &mut m.st_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "mat_dt",
                |m: &AccountWithCashflows| { &m.mat_dt },
                |m: &mut AccountWithCashflows| { &mut m.mat_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "alm_line",
                |m: &AccountWithCashflows| { &m.alm_line },
                |m: &mut AccountWithCashflows| { &mut m.alm_line },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "div",
                |m: &AccountWithCashflows| { &m.div },
                |m: &mut AccountWithCashflows| { &mut m.div },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_typ",
                |m: &AccountWithCashflows| { &m.cust_typ },
                |m: &mut AccountWithCashflows| { &mut m.cust_typ },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "as_on_dt",
                |m: &AccountWithCashflows| { &m.as_on_dt },
                |m: &mut AccountWithCashflows| { &mut m.as_on_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "nxt_rep_dt",
                |m: &AccountWithCashflows| { &m.nxt_rep_dt },
                |m: &mut AccountWithCashflows| { &mut m.nxt_rep_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "compmis1",
                |m: &AccountWithCashflows| { &m.compmis1 },
                |m: &mut AccountWithCashflows| { &mut m.compmis1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "compmis2",
                |m: &AccountWithCashflows| { &m.compmis2 },
                |m: &mut AccountWithCashflows| { &mut m.compmis2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "compmis3",
                |m: &AccountWithCashflows| { &m.compmis3 },
                |m: &mut AccountWithCashflows| { &mut m.compmis3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prod_category",
                |m: &AccountWithCashflows| { &m.prod_category },
                |m: &mut AccountWithCashflows| { &mut m.prod_category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ia_line",
                |m: &AccountWithCashflows| { &m.ia_line },
                |m: &mut AccountWithCashflows| { &mut m.ia_line },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_int_amt",
                |m: &AccountWithCashflows| { &m.tot_int_amt },
                |m: &mut AccountWithCashflows| { &mut m.tot_int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_prin_amt",
                |m: &AccountWithCashflows| { &m.tot_prin_amt },
                |m: &mut AccountWithCashflows| { &mut m.tot_prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sma_flag",
                |m: &AccountWithCashflows| { &m.sma_flag },
                |m: &mut AccountWithCashflows| { &mut m.sma_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.acc_no.clear();
        self.counter_party.clear();
        self.ccy.clear();
        self.gl_no = 0;
        self.amt = 0.;
        self.int_rt = 0.;
        self.st_dt = 0;
        self.mat_dt = 0;
        self.alm_line.clear();
        self.div.clear();
        self.cust_typ.clear();
        self.as_on_dt = 0;
        self.nxt_rep_dt = 0;
        self.compmis1 = 0;
        self.compmis2 = 0;
        self.compmis3 = 0;
        self.prod_category.clear();
        self.ia_line.clear();
        self.tot_int_amt = 0.;
        self.tot_prin_amt = 0.;
        self.sma_flag.clear();
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\
    \x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\
    \x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\
    \x04date\"\xe6\x04\n\x14AccountWithCashflows\x12\x15\n\x06acc_no\x18\x01\
    \x20\x01(\tR\x05accNo\x12#\n\rcounter_party\x18\x02\x20\x01(\tR\x0ccount\
    erParty\x12\x10\n\x03ccy\x18\x03\x20\x01(\tR\x03ccy\x12\x13\n\x05gl_no\
    \x18\x04\x20\x01(\x03R\x04glNo\x12\x10\n\x03amt\x18\x05\x20\x01(\x01R\
    \x03amt\x12\x15\n\x06int_rt\x18\x06\x20\x01(\x01R\x05intRt\x12\x13\n\x05\
    st_dt\x18\x07\x20\x01(\x03R\x04stDt\x12\x15\n\x06mat_dt\x18\x08\x20\x01(\
    \x03R\x05matDt\x12\x19\n\x08alm_line\x18\t\x20\x01(\tR\x07almLine\x12\
    \x10\n\x03div\x18\n\x20\x01(\tR\x03div\x12\x19\n\x08cust_typ\x18\x0b\x20\
    \x01(\tR\x07custTyp\x12\x18\n\x08as_on_dt\x18\x0c\x20\x01(\x03R\x06asOnD\
    t\x12\x1c\n\nnxt_rep_dt\x18\r\x20\x01(\x03R\x08nxtRepDt\x12\x1a\n\x08com\
    pmis1\x18\x0e\x20\x01(\x03R\x08compmis1\x12\x1a\n\x08compmis2\x18\x0f\
    \x20\x01(\x03R\x08compmis2\x12\x1a\n\x08compmis3\x18\x10\x20\x01(\x03R\
    \x08compmis3\x12#\n\rprod_category\x18\x11\x20\x01(\tR\x0cprodCategory\
    \x12\x17\n\x07ia_line\x18\x12\x20\x01(\tR\x06iaLine\x12\x1e\n\x0btot_int\
    _amt\x18\x13\x20\x01(\x01R\ttotIntAmt\x12\x20\n\x0ctot_prin_amt\x18\x14\
    \x20\x01(\x01R\ntotPrinAmt\x12\x19\n\x08sma_flag\x18\x15\x20\x01(\tR\x07\
    smaFlag\x12'\n\tcashflows\x18\x16\x20\x03(\x0b2\t.CashflowR\tcashflowsb\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}