// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct OutputAccount {
    // message fields
    pub account_id: i64,
    pub currency: ::std::string::String,
    pub outstanding_bal: f64,
    pub funded: f64,
    pub non_funded: f64,
    pub limit_structure: ::std::string::String,
    pub customer_loc: ::std::string::String,
    pub ctp: ::std::string::String,
    pub expiry_date: i64,
    pub rl1: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl OutputAccount {
    pub fn new() -> OutputAccount {
        ::std::default::Default::default()
    }

    // int64 account_id = 1;

    pub fn clear_account_id(&mut self) {
        self.account_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: i64) {
        self.account_id = v;
    }

    pub fn get_account_id(&self) -> i64 {
        self.account_id
    }

    // string currency = 2;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // double outstanding_bal = 3;

    pub fn clear_outstanding_bal(&mut self) {
        self.outstanding_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_outstanding_bal(&mut self, v: f64) {
        self.outstanding_bal = v;
    }

    pub fn get_outstanding_bal(&self) -> f64 {
        self.outstanding_bal
    }

    // double funded = 4;

    pub fn clear_funded(&mut self) {
        self.funded = 0.;
    }

    // Param is passed by value, moved
    pub fn set_funded(&mut self, v: f64) {
        self.funded = v;
    }

    pub fn get_funded(&self) -> f64 {
        self.funded
    }

    // double non_funded = 5;

    pub fn clear_non_funded(&mut self) {
        self.non_funded = 0.;
    }

    // Param is passed by value, moved
    pub fn set_non_funded(&mut self, v: f64) {
        self.non_funded = v;
    }

    pub fn get_non_funded(&self) -> f64 {
        self.non_funded
    }

    // string limit_structure = 6;

    pub fn clear_limit_structure(&mut self) {
        self.limit_structure.clear();
    }

    // Param is passed by value, moved
    pub fn set_limit_structure(&mut self, v: ::std::string::String) {
        self.limit_structure = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_limit_structure(&mut self) -> &mut ::std::string::String {
        &mut self.limit_structure
    }

    // Take field
    pub fn take_limit_structure(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.limit_structure, ::std::string::String::new())
    }

    pub fn get_limit_structure(&self) -> &str {
        &self.limit_structure
    }

    // string customer_loc = 7;

    pub fn clear_customer_loc(&mut self) {
        self.customer_loc.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_loc(&mut self, v: ::std::string::String) {
        self.customer_loc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_loc(&mut self) -> &mut ::std::string::String {
        &mut self.customer_loc
    }

    // Take field
    pub fn take_customer_loc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_loc, ::std::string::String::new())
    }

    pub fn get_customer_loc(&self) -> &str {
        &self.customer_loc
    }

    // string ctp = 8;

    pub fn clear_ctp(&mut self) {
        self.ctp.clear();
    }

    // Param is passed by value, moved
    pub fn set_ctp(&mut self, v: ::std::string::String) {
        self.ctp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ctp(&mut self) -> &mut ::std::string::String {
        &mut self.ctp
    }

    // Take field
    pub fn take_ctp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ctp, ::std::string::String::new())
    }

    pub fn get_ctp(&self) -> &str {
        &self.ctp
    }

    // int64 expiry_date = 9;

    pub fn clear_expiry_date(&mut self) {
        self.expiry_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_expiry_date(&mut self, v: i64) {
        self.expiry_date = v;
    }

    pub fn get_expiry_date(&self) -> i64 {
        self.expiry_date
    }

    // int32 rl1 = 10;

    pub fn clear_rl1(&mut self) {
        self.rl1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_rl1(&mut self, v: i32) {
        self.rl1 = v;
    }

    pub fn get_rl1(&self) -> i32 {
        self.rl1
    }
}

impl ::protobuf::Message for OutputAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.account_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.outstanding_bal = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.funded = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.non_funded = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.limit_structure)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_loc)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ctp)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.expiry_date = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rl1 = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.account_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.account_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.currency);
        }
        if self.outstanding_bal != 0. {
            my_size += 9;
        }
        if self.funded != 0. {
            my_size += 9;
        }
        if self.non_funded != 0. {
            my_size += 9;
        }
        if !self.limit_structure.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.limit_structure);
        }
        if !self.customer_loc.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.customer_loc);
        }
        if !self.ctp.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.ctp);
        }
        if self.expiry_date != 0 {
            my_size += ::protobuf::rt::value_size(9, self.expiry_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rl1 != 0 {
            my_size += ::protobuf::rt::value_size(10, self.rl1, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.account_id != 0 {
            os.write_int64(1, self.account_id)?;
        }
        if !self.currency.is_empty() {
            os.write_string(2, &self.currency)?;
        }
        if self.outstanding_bal != 0. {
            os.write_double(3, self.outstanding_bal)?;
        }
        if self.funded != 0. {
            os.write_double(4, self.funded)?;
        }
        if self.non_funded != 0. {
            os.write_double(5, self.non_funded)?;
        }
        if !self.limit_structure.is_empty() {
            os.write_string(6, &self.limit_structure)?;
        }
        if !self.customer_loc.is_empty() {
            os.write_string(7, &self.customer_loc)?;
        }
        if !self.ctp.is_empty() {
            os.write_string(8, &self.ctp)?;
        }
        if self.expiry_date != 0 {
            os.write_int64(9, self.expiry_date)?;
        }
        if self.rl1 != 0 {
            os.write_int32(10, self.rl1)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputAccount {
        OutputAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "account_id",
                    |m: &OutputAccount| { &m.account_id },
                    |m: &mut OutputAccount| { &mut m.account_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &OutputAccount| { &m.currency },
                    |m: &mut OutputAccount| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "outstanding_bal",
                    |m: &OutputAccount| { &m.outstanding_bal },
                    |m: &mut OutputAccount| { &mut m.outstanding_bal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "funded",
                    |m: &OutputAccount| { &m.funded },
                    |m: &mut OutputAccount| { &mut m.funded },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "non_funded",
                    |m: &OutputAccount| { &m.non_funded },
                    |m: &mut OutputAccount| { &mut m.non_funded },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "limit_structure",
                    |m: &OutputAccount| { &m.limit_structure },
                    |m: &mut OutputAccount| { &mut m.limit_structure },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "customer_loc",
                    |m: &OutputAccount| { &m.customer_loc },
                    |m: &mut OutputAccount| { &mut m.customer_loc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ctp",
                    |m: &OutputAccount| { &m.ctp },
                    |m: &mut OutputAccount| { &mut m.ctp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "expiry_date",
                    |m: &OutputAccount| { &m.expiry_date },
                    |m: &mut OutputAccount| { &mut m.expiry_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "rl1",
                    |m: &OutputAccount| { &m.rl1 },
                    |m: &mut OutputAccount| { &mut m.rl1 },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OutputAccount>(
                    "OutputAccount",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OutputAccount {
        static mut instance: ::protobuf::lazy::Lazy<OutputAccount> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OutputAccount,
        };
        unsafe {
            instance.get(OutputAccount::new)
        }
    }
}

impl ::protobuf::Clear for OutputAccount {
    fn clear(&mut self) {
        self.clear_account_id();
        self.clear_currency();
        self.clear_outstanding_bal();
        self.clear_funded();
        self.clear_non_funded();
        self.clear_limit_structure();
        self.clear_customer_loc();
        self.clear_ctp();
        self.clear_expiry_date();
        self.clear_rl1();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmessage.proto\"\xbb\x02\n\rOutputAccount\x12\x1d\n\naccount_id\x18\
    \x01\x20\x01(\x03R\taccountId\x12\x1a\n\x08currency\x18\x02\x20\x01(\tR\
    \x08currency\x12'\n\x0foutstanding_bal\x18\x03\x20\x01(\x01R\x0eoutstand\
    ingBal\x12\x16\n\x06funded\x18\x04\x20\x01(\x01R\x06funded\x12\x1d\n\nno\
    n_funded\x18\x05\x20\x01(\x01R\tnonFunded\x12'\n\x0flimit_structure\x18\
    \x06\x20\x01(\tR\x0elimitStructure\x12!\n\x0ccustomer_loc\x18\x07\x20\
    \x01(\tR\x0bcustomerLoc\x12\x10\n\x03ctp\x18\x08\x20\x01(\tR\x03ctp\x12\
    \x1f\n\x0bexpiry_date\x18\t\x20\x01(\x03R\nexpiryDate\x12\x10\n\x03rl1\
    \x18\n\x20\x01(\x05R\x03rl1b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}