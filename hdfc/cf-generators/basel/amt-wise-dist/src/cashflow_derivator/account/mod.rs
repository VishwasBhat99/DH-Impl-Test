// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]

#[derive(PartialEq,Clone,Default)]
pub struct OutputAccount {
    // message fields
    pub as_on_date: ::std::string::String,
    pub custid: i64,
    pub classid: i64,
    pub curr: ::std::string::String,
    pub tot_amt: f64,
    pub tot_nwd_amt: f64,
    pub tot_accs: f64,
    pub tot_nwd_accs: f64,
    pub ca_accs: f64,
    pub sa_accs: f64,
    pub td_accs: f64,
    pub rd_accs: f64,
    pub ca_nwd_accs_op: f64,
    pub ca_nwd_accs_nonop: f64,
    pub sa_nwd_accs: f64,
    pub td_nwd_accs: f64,
    pub rd_nwd_accs: f64,
    pub td_amt: f64,
    pub rd_amt: f64,
    pub sa_amt: f64,
    pub ca_amt: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutputAccount {
    fn default() -> &'a OutputAccount {
        <OutputAccount as ::protobuf::Message>::default_instance()
    }
}

impl OutputAccount {
    pub fn new() -> OutputAccount {
        ::std::default::Default::default()
    }

    // string as_on_date = 1;


    pub fn get_as_on_date(&self) -> &str {
        &self.as_on_date
    }
    pub fn clear_as_on_date(&mut self) {
        self.as_on_date.clear();
    }

    // Param is passed by value, moved
    pub fn set_as_on_date(&mut self, v: ::std::string::String) {
        self.as_on_date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_as_on_date(&mut self) -> &mut ::std::string::String {
        &mut self.as_on_date
    }

    // Take field
    pub fn take_as_on_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.as_on_date, ::std::string::String::new())
    }

    // int64 custid = 2;


    pub fn get_custid(&self) -> i64 {
        self.custid
    }
    pub fn clear_custid(&mut self) {
        self.custid = 0;
    }

    // Param is passed by value, moved
    pub fn set_custid(&mut self, v: i64) {
        self.custid = v;
    }

    // int64 classid = 3;


    pub fn get_classid(&self) -> i64 {
        self.classid
    }
    pub fn clear_classid(&mut self) {
        self.classid = 0;
    }

    // Param is passed by value, moved
    pub fn set_classid(&mut self, v: i64) {
        self.classid = v;
    }

    // string curr = 4;


    pub fn get_curr(&self) -> &str {
        &self.curr
    }
    pub fn clear_curr(&mut self) {
        self.curr.clear();
    }

    // Param is passed by value, moved
    pub fn set_curr(&mut self, v: ::std::string::String) {
        self.curr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_curr(&mut self) -> &mut ::std::string::String {
        &mut self.curr
    }

    // Take field
    pub fn take_curr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.curr, ::std::string::String::new())
    }

    // double tot_amt = 5;


    pub fn get_tot_amt(&self) -> f64 {
        self.tot_amt
    }
    pub fn clear_tot_amt(&mut self) {
        self.tot_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_amt(&mut self, v: f64) {
        self.tot_amt = v;
    }

    // double tot_nwd_amt = 6;


    pub fn get_tot_nwd_amt(&self) -> f64 {
        self.tot_nwd_amt
    }
    pub fn clear_tot_nwd_amt(&mut self) {
        self.tot_nwd_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_nwd_amt(&mut self, v: f64) {
        self.tot_nwd_amt = v;
    }

    // double tot_accs = 7;


    pub fn get_tot_accs(&self) -> f64 {
        self.tot_accs
    }
    pub fn clear_tot_accs(&mut self) {
        self.tot_accs = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_accs(&mut self, v: f64) {
        self.tot_accs = v;
    }

    // double tot_nwd_accs = 8;


    pub fn get_tot_nwd_accs(&self) -> f64 {
        self.tot_nwd_accs
    }
    pub fn clear_tot_nwd_accs(&mut self) {
        self.tot_nwd_accs = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_nwd_accs(&mut self, v: f64) {
        self.tot_nwd_accs = v;
    }

    // double ca_accs = 9;


    pub fn get_ca_accs(&self) -> f64 {
        self.ca_accs
    }
    pub fn clear_ca_accs(&mut self) {
        self.ca_accs = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ca_accs(&mut self, v: f64) {
        self.ca_accs = v;
    }

    // double sa_accs = 10;


    pub fn get_sa_accs(&self) -> f64 {
        self.sa_accs
    }
    pub fn clear_sa_accs(&mut self) {
        self.sa_accs = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sa_accs(&mut self, v: f64) {
        self.sa_accs = v;
    }

    // double td_accs = 11;


    pub fn get_td_accs(&self) -> f64 {
        self.td_accs
    }
    pub fn clear_td_accs(&mut self) {
        self.td_accs = 0.;
    }

    // Param is passed by value, moved
    pub fn set_td_accs(&mut self, v: f64) {
        self.td_accs = v;
    }

    // double rd_accs = 12;


    pub fn get_rd_accs(&self) -> f64 {
        self.rd_accs
    }
    pub fn clear_rd_accs(&mut self) {
        self.rd_accs = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rd_accs(&mut self, v: f64) {
        self.rd_accs = v;
    }

    // double ca_nwd_accs_op = 13;


    pub fn get_ca_nwd_accs_op(&self) -> f64 {
        self.ca_nwd_accs_op
    }
    pub fn clear_ca_nwd_accs_op(&mut self) {
        self.ca_nwd_accs_op = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ca_nwd_accs_op(&mut self, v: f64) {
        self.ca_nwd_accs_op = v;
    }

    // double ca_nwd_accs_nonop = 14;


    pub fn get_ca_nwd_accs_nonop(&self) -> f64 {
        self.ca_nwd_accs_nonop
    }
    pub fn clear_ca_nwd_accs_nonop(&mut self) {
        self.ca_nwd_accs_nonop = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ca_nwd_accs_nonop(&mut self, v: f64) {
        self.ca_nwd_accs_nonop = v;
    }

    // double sa_nwd_accs = 15;


    pub fn get_sa_nwd_accs(&self) -> f64 {
        self.sa_nwd_accs
    }
    pub fn clear_sa_nwd_accs(&mut self) {
        self.sa_nwd_accs = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sa_nwd_accs(&mut self, v: f64) {
        self.sa_nwd_accs = v;
    }

    // double td_nwd_accs = 16;


    pub fn get_td_nwd_accs(&self) -> f64 {
        self.td_nwd_accs
    }
    pub fn clear_td_nwd_accs(&mut self) {
        self.td_nwd_accs = 0.;
    }

    // Param is passed by value, moved
    pub fn set_td_nwd_accs(&mut self, v: f64) {
        self.td_nwd_accs = v;
    }

    // double rd_nwd_accs = 17;


    pub fn get_rd_nwd_accs(&self) -> f64 {
        self.rd_nwd_accs
    }
    pub fn clear_rd_nwd_accs(&mut self) {
        self.rd_nwd_accs = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rd_nwd_accs(&mut self, v: f64) {
        self.rd_nwd_accs = v;
    }

    // double td_amt = 18;


    pub fn get_td_amt(&self) -> f64 {
        self.td_amt
    }
    pub fn clear_td_amt(&mut self) {
        self.td_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_td_amt(&mut self, v: f64) {
        self.td_amt = v;
    }

    // double rd_amt = 19;


    pub fn get_rd_amt(&self) -> f64 {
        self.rd_amt
    }
    pub fn clear_rd_amt(&mut self) {
        self.rd_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rd_amt(&mut self, v: f64) {
        self.rd_amt = v;
    }

    // double sa_amt = 20;


    pub fn get_sa_amt(&self) -> f64 {
        self.sa_amt
    }
    pub fn clear_sa_amt(&mut self) {
        self.sa_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sa_amt(&mut self, v: f64) {
        self.sa_amt = v;
    }

    // double ca_amt = 21;


    pub fn get_ca_amt(&self) -> f64 {
        self.ca_amt
    }
    pub fn clear_ca_amt(&mut self) {
        self.ca_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ca_amt(&mut self, v: f64) {
        self.ca_amt = v;
    }
}

impl ::protobuf::Message for OutputAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.as_on_date)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.custid = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.classid = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.curr)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_amt = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_nwd_amt = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_accs = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_nwd_accs = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ca_accs = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.sa_accs = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.td_accs = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rd_accs = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ca_nwd_accs_op = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ca_nwd_accs_nonop = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.sa_nwd_accs = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.td_nwd_accs = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rd_nwd_accs = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.td_amt = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rd_amt = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.sa_amt = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ca_amt = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.as_on_date.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.as_on_date);
        }
        if self.custid != 0 {
            my_size += ::protobuf::rt::value_size(2, self.custid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.classid != 0 {
            my_size += ::protobuf::rt::value_size(3, self.classid, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.curr.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.curr);
        }
        if self.tot_amt != 0. {
            my_size += 9;
        }
        if self.tot_nwd_amt != 0. {
            my_size += 9;
        }
        if self.tot_accs != 0. {
            my_size += 9;
        }
        if self.tot_nwd_accs != 0. {
            my_size += 9;
        }
        if self.ca_accs != 0. {
            my_size += 9;
        }
        if self.sa_accs != 0. {
            my_size += 9;
        }
        if self.td_accs != 0. {
            my_size += 9;
        }
        if self.rd_accs != 0. {
            my_size += 9;
        }
        if self.ca_nwd_accs_op != 0. {
            my_size += 9;
        }
        if self.ca_nwd_accs_nonop != 0. {
            my_size += 9;
        }
        if self.sa_nwd_accs != 0. {
            my_size += 9;
        }
        if self.td_nwd_accs != 0. {
            my_size += 10;
        }
        if self.rd_nwd_accs != 0. {
            my_size += 10;
        }
        if self.td_amt != 0. {
            my_size += 10;
        }
        if self.rd_amt != 0. {
            my_size += 10;
        }
        if self.sa_amt != 0. {
            my_size += 10;
        }
        if self.ca_amt != 0. {
            my_size += 10;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.as_on_date.is_empty() {
            os.write_string(1, &self.as_on_date)?;
        }
        if self.custid != 0 {
            os.write_int64(2, self.custid)?;
        }
        if self.classid != 0 {
            os.write_int64(3, self.classid)?;
        }
        if !self.curr.is_empty() {
            os.write_string(4, &self.curr)?;
        }
        if self.tot_amt != 0. {
            os.write_double(5, self.tot_amt)?;
        }
        if self.tot_nwd_amt != 0. {
            os.write_double(6, self.tot_nwd_amt)?;
        }
        if self.tot_accs != 0. {
            os.write_double(7, self.tot_accs)?;
        }
        if self.tot_nwd_accs != 0. {
            os.write_double(8, self.tot_nwd_accs)?;
        }
        if self.ca_accs != 0. {
            os.write_double(9, self.ca_accs)?;
        }
        if self.sa_accs != 0. {
            os.write_double(10, self.sa_accs)?;
        }
        if self.td_accs != 0. {
            os.write_double(11, self.td_accs)?;
        }
        if self.rd_accs != 0. {
            os.write_double(12, self.rd_accs)?;
        }
        if self.ca_nwd_accs_op != 0. {
            os.write_double(13, self.ca_nwd_accs_op)?;
        }
        if self.ca_nwd_accs_nonop != 0. {
            os.write_double(14, self.ca_nwd_accs_nonop)?;
        }
        if self.sa_nwd_accs != 0. {
            os.write_double(15, self.sa_nwd_accs)?;
        }
        if self.td_nwd_accs != 0. {
            os.write_double(16, self.td_nwd_accs)?;
        }
        if self.rd_nwd_accs != 0. {
            os.write_double(17, self.rd_nwd_accs)?;
        }
        if self.td_amt != 0. {
            os.write_double(18, self.td_amt)?;
        }
        if self.rd_amt != 0. {
            os.write_double(19, self.rd_amt)?;
        }
        if self.sa_amt != 0. {
            os.write_double(20, self.sa_amt)?;
        }
        if self.ca_amt != 0. {
            os.write_double(21, self.ca_amt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputAccount {
        OutputAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "as_on_date",
                |m: &OutputAccount| { &m.as_on_date },
                |m: &mut OutputAccount| { &mut m.as_on_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "custid",
                |m: &OutputAccount| { &m.custid },
                |m: &mut OutputAccount| { &mut m.custid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "classid",
                |m: &OutputAccount| { &m.classid },
                |m: &mut OutputAccount| { &mut m.classid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "curr",
                |m: &OutputAccount| { &m.curr },
                |m: &mut OutputAccount| { &mut m.curr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_amt",
                |m: &OutputAccount| { &m.tot_amt },
                |m: &mut OutputAccount| { &mut m.tot_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_nwd_amt",
                |m: &OutputAccount| { &m.tot_nwd_amt },
                |m: &mut OutputAccount| { &mut m.tot_nwd_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_accs",
                |m: &OutputAccount| { &m.tot_accs },
                |m: &mut OutputAccount| { &mut m.tot_accs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_nwd_accs",
                |m: &OutputAccount| { &m.tot_nwd_accs },
                |m: &mut OutputAccount| { &mut m.tot_nwd_accs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ca_accs",
                |m: &OutputAccount| { &m.ca_accs },
                |m: &mut OutputAccount| { &mut m.ca_accs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "sa_accs",
                |m: &OutputAccount| { &m.sa_accs },
                |m: &mut OutputAccount| { &mut m.sa_accs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "td_accs",
                |m: &OutputAccount| { &m.td_accs },
                |m: &mut OutputAccount| { &mut m.td_accs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "rd_accs",
                |m: &OutputAccount| { &m.rd_accs },
                |m: &mut OutputAccount| { &mut m.rd_accs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ca_nwd_accs_op",
                |m: &OutputAccount| { &m.ca_nwd_accs_op },
                |m: &mut OutputAccount| { &mut m.ca_nwd_accs_op },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ca_nwd_accs_nonop",
                |m: &OutputAccount| { &m.ca_nwd_accs_nonop },
                |m: &mut OutputAccount| { &mut m.ca_nwd_accs_nonop },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "sa_nwd_accs",
                |m: &OutputAccount| { &m.sa_nwd_accs },
                |m: &mut OutputAccount| { &mut m.sa_nwd_accs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "td_nwd_accs",
                |m: &OutputAccount| { &m.td_nwd_accs },
                |m: &mut OutputAccount| { &mut m.td_nwd_accs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "rd_nwd_accs",
                |m: &OutputAccount| { &m.rd_nwd_accs },
                |m: &mut OutputAccount| { &mut m.rd_nwd_accs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "td_amt",
                |m: &OutputAccount| { &m.td_amt },
                |m: &mut OutputAccount| { &mut m.td_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "rd_amt",
                |m: &OutputAccount| { &m.rd_amt },
                |m: &mut OutputAccount| { &mut m.rd_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "sa_amt",
                |m: &OutputAccount| { &m.sa_amt },
                |m: &mut OutputAccount| { &mut m.sa_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ca_amt",
                |m: &OutputAccount| { &m.ca_amt },
                |m: &mut OutputAccount| { &mut m.ca_amt },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OutputAccount>(
                "OutputAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OutputAccount {
        static instance: ::protobuf::rt::LazyV2<OutputAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OutputAccount::new)
    }
}

impl ::protobuf::Clear for OutputAccount {
    fn clear(&mut self) {
        self.as_on_date.clear();
        self.custid = 0;
        self.classid = 0;
        self.curr.clear();
        self.tot_amt = 0.;
        self.tot_nwd_amt = 0.;
        self.tot_accs = 0.;
        self.tot_nwd_accs = 0.;
        self.ca_accs = 0.;
        self.sa_accs = 0.;
        self.td_accs = 0.;
        self.rd_accs = 0.;
        self.ca_nwd_accs_op = 0.;
        self.ca_nwd_accs_nonop = 0.;
        self.sa_nwd_accs = 0.;
        self.td_nwd_accs = 0.;
        self.rd_nwd_accs = 0.;
        self.td_amt = 0.;
        self.rd_amt = 0.;
        self.sa_amt = 0.;
        self.ca_amt = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eamt_wise.proto\"\xd9\x04\n\rOutputAccount\x12\x1c\n\nas_on_date\
    \x18\x01\x20\x01(\tR\x08asOnDate\x12\x16\n\x06custid\x18\x02\x20\x01(\
    \x03R\x06custid\x12\x18\n\x07classid\x18\x03\x20\x01(\x03R\x07classid\
    \x12\x12\n\x04curr\x18\x04\x20\x01(\tR\x04curr\x12\x17\n\x07tot_amt\x18\
    \x05\x20\x01(\x01R\x06totAmt\x12\x1e\n\x0btot_nwd_amt\x18\x06\x20\x01(\
    \x01R\ttotNwdAmt\x12\x19\n\x08tot_accs\x18\x07\x20\x01(\x01R\x07totAccs\
    \x12\x20\n\x0ctot_nwd_accs\x18\x08\x20\x01(\x01R\ntotNwdAccs\x12\x17\n\
    \x07ca_accs\x18\t\x20\x01(\x01R\x06caAccs\x12\x17\n\x07sa_accs\x18\n\x20\
    \x01(\x01R\x06saAccs\x12\x17\n\x07td_accs\x18\x0b\x20\x01(\x01R\x06tdAcc\
    s\x12\x17\n\x07rd_accs\x18\x0c\x20\x01(\x01R\x06rdAccs\x12#\n\x0eca_nwd_\
    accs_op\x18\r\x20\x01(\x01R\x0bcaNwdAccsOp\x12)\n\x11ca_nwd_accs_nonop\
    \x18\x0e\x20\x01(\x01R\x0ecaNwdAccsNonop\x12\x1e\n\x0bsa_nwd_accs\x18\
    \x0f\x20\x01(\x01R\tsaNwdAccs\x12\x1e\n\x0btd_nwd_accs\x18\x10\x20\x01(\
    \x01R\ttdNwdAccs\x12\x1e\n\x0brd_nwd_accs\x18\x11\x20\x01(\x01R\trdNwdAc\
    cs\x12\x15\n\x06td_amt\x18\x12\x20\x01(\x01R\x05tdAmt\x12\x15\n\x06rd_am\
    t\x18\x13\x20\x01(\x01R\x05rdAmt\x12\x15\n\x06sa_amt\x18\x14\x20\x01(\
    \x01R\x05saAmt\x12\x15\n\x06ca_amt\x18\x15\x20\x01(\x01R\x05caAmtb\x06pr\
    oto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
