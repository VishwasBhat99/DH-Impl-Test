// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Account {
    // message fields
    pub key_1: ::std::string::String,
    pub br_no: ::std::string::String,
    pub act_type: ::std::string::String,
    pub purpose_code_a: ::std::string::String,
    pub applic_amount: f64,
    pub repay_count: i32,
    pub repay_day: i32,
    pub repay_freq: i32,
    pub app_amt: f64,
    pub loan_bal: f64,
    pub adv_bal: f64,
    pub theo_loan_bal: f64,
    pub loan_repay: f64,
    pub pend_dues: f64,
    pub apprv_date: i64,
    pub lst_fin_date: i64,
    pub lst_arr_date: i64,
    pub pend_dues_date: i64,
    pub int_rate: f64,
    pub cat: ::std::string::String,
    pub loan_trm: f64,
    pub bad_debt_ind: ::std::string::String,
    pub arr_int_accr: f64,
    pub arr_int_incr: f64,
    pub rt_incr: f64,
    pub customer_no: ::std::string::String,
    pub currency_ind: ::std::string::String,
    pub store_rate: f64,
    pub cr_rating: ::std::string::String,
    pub gl_class_code: ::std::string::String,
    pub theo_unpd_arrs_int: f64,
    pub security_amount: f64,
    pub last_credit_dt: i64,
    pub old_bad_debt_ind: ::std::string::String,
    pub npa_date: i64,
    pub collection_amt: f64,
    pub provision_amount: f64,
    pub last_repriced_date: i64,
    pub next_repriced_date: i64,
    pub repricing_frequency: ::std::string::String,
    pub inca: ::std::string::String,
    pub rating_source: ::std::string::String,
    pub rating_code: ::std::string::String,
    pub benchmark: ::std::string::String,
    pub name: ::std::string::String,
    pub cust_acct_no: ::std::string::String,
    pub prim_acct: ::std::string::String,
    pub segment_code: ::std::string::String,
    pub industry_code: ::std::string::String,
    pub grup_code: ::std::string::String,
    pub bus_sector_code: ::std::string::String,
    pub tier_cust_type: ::std::string::String,
    pub a1: f64,
    pub a2: f64,
    pub a3: f64,
    pub a4: ::std::string::String,
    pub a5: ::std::string::String,
    pub a6: ::std::string::String,
    pub a7: ::std::string::String,
    pub a8: ::std::string::String,
    pub a9: ::std::string::String,
    pub a10: ::std::string::String,
    pub asondate: i64,
    pub mat_dt: i64,
    pub next_rep_date: i64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Account {
    fn default() -> &'a Account {
        <Account as ::protobuf::Message>::default_instance()
    }
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    // string key_1 = 1;


    pub fn get_key_1(&self) -> &str {
        &self.key_1
    }
    pub fn clear_key_1(&mut self) {
        self.key_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_key_1(&mut self, v: ::std::string::String) {
        self.key_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_1(&mut self) -> &mut ::std::string::String {
        &mut self.key_1
    }

    // Take field
    pub fn take_key_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key_1, ::std::string::String::new())
    }

    // string br_no = 2;


    pub fn get_br_no(&self) -> &str {
        &self.br_no
    }
    pub fn clear_br_no(&mut self) {
        self.br_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_br_no(&mut self, v: ::std::string::String) {
        self.br_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_br_no(&mut self) -> &mut ::std::string::String {
        &mut self.br_no
    }

    // Take field
    pub fn take_br_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.br_no, ::std::string::String::new())
    }

    // string act_type = 3;


    pub fn get_act_type(&self) -> &str {
        &self.act_type
    }
    pub fn clear_act_type(&mut self) {
        self.act_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_act_type(&mut self, v: ::std::string::String) {
        self.act_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_act_type(&mut self) -> &mut ::std::string::String {
        &mut self.act_type
    }

    // Take field
    pub fn take_act_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.act_type, ::std::string::String::new())
    }

    // string purpose_code_a = 4;


    pub fn get_purpose_code_a(&self) -> &str {
        &self.purpose_code_a
    }
    pub fn clear_purpose_code_a(&mut self) {
        self.purpose_code_a.clear();
    }

    // Param is passed by value, moved
    pub fn set_purpose_code_a(&mut self, v: ::std::string::String) {
        self.purpose_code_a = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_purpose_code_a(&mut self) -> &mut ::std::string::String {
        &mut self.purpose_code_a
    }

    // Take field
    pub fn take_purpose_code_a(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.purpose_code_a, ::std::string::String::new())
    }

    // double applic_amount = 5;


    pub fn get_applic_amount(&self) -> f64 {
        self.applic_amount
    }
    pub fn clear_applic_amount(&mut self) {
        self.applic_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_applic_amount(&mut self, v: f64) {
        self.applic_amount = v;
    }

    // int32 repay_count = 6;


    pub fn get_repay_count(&self) -> i32 {
        self.repay_count
    }
    pub fn clear_repay_count(&mut self) {
        self.repay_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_repay_count(&mut self, v: i32) {
        self.repay_count = v;
    }

    // int32 repay_day = 7;


    pub fn get_repay_day(&self) -> i32 {
        self.repay_day
    }
    pub fn clear_repay_day(&mut self) {
        self.repay_day = 0;
    }

    // Param is passed by value, moved
    pub fn set_repay_day(&mut self, v: i32) {
        self.repay_day = v;
    }

    // int32 repay_freq = 8;


    pub fn get_repay_freq(&self) -> i32 {
        self.repay_freq
    }
    pub fn clear_repay_freq(&mut self) {
        self.repay_freq = 0;
    }

    // Param is passed by value, moved
    pub fn set_repay_freq(&mut self, v: i32) {
        self.repay_freq = v;
    }

    // double app_amt = 9;


    pub fn get_app_amt(&self) -> f64 {
        self.app_amt
    }
    pub fn clear_app_amt(&mut self) {
        self.app_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_app_amt(&mut self, v: f64) {
        self.app_amt = v;
    }

    // double loan_bal = 10;


    pub fn get_loan_bal(&self) -> f64 {
        self.loan_bal
    }
    pub fn clear_loan_bal(&mut self) {
        self.loan_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_loan_bal(&mut self, v: f64) {
        self.loan_bal = v;
    }

    // double adv_bal = 11;


    pub fn get_adv_bal(&self) -> f64 {
        self.adv_bal
    }
    pub fn clear_adv_bal(&mut self) {
        self.adv_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adv_bal(&mut self, v: f64) {
        self.adv_bal = v;
    }

    // double theo_loan_bal = 12;


    pub fn get_theo_loan_bal(&self) -> f64 {
        self.theo_loan_bal
    }
    pub fn clear_theo_loan_bal(&mut self) {
        self.theo_loan_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_theo_loan_bal(&mut self, v: f64) {
        self.theo_loan_bal = v;
    }

    // double loan_repay = 13;


    pub fn get_loan_repay(&self) -> f64 {
        self.loan_repay
    }
    pub fn clear_loan_repay(&mut self) {
        self.loan_repay = 0.;
    }

    // Param is passed by value, moved
    pub fn set_loan_repay(&mut self, v: f64) {
        self.loan_repay = v;
    }

    // double pend_dues = 14;


    pub fn get_pend_dues(&self) -> f64 {
        self.pend_dues
    }
    pub fn clear_pend_dues(&mut self) {
        self.pend_dues = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pend_dues(&mut self, v: f64) {
        self.pend_dues = v;
    }

    // int64 apprv_date = 15;


    pub fn get_apprv_date(&self) -> i64 {
        self.apprv_date
    }
    pub fn clear_apprv_date(&mut self) {
        self.apprv_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_apprv_date(&mut self, v: i64) {
        self.apprv_date = v;
    }

    // int64 lst_fin_date = 16;


    pub fn get_lst_fin_date(&self) -> i64 {
        self.lst_fin_date
    }
    pub fn clear_lst_fin_date(&mut self) {
        self.lst_fin_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_lst_fin_date(&mut self, v: i64) {
        self.lst_fin_date = v;
    }

    // int64 lst_arr_date = 17;


    pub fn get_lst_arr_date(&self) -> i64 {
        self.lst_arr_date
    }
    pub fn clear_lst_arr_date(&mut self) {
        self.lst_arr_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_lst_arr_date(&mut self, v: i64) {
        self.lst_arr_date = v;
    }

    // int64 pend_dues_date = 18;


    pub fn get_pend_dues_date(&self) -> i64 {
        self.pend_dues_date
    }
    pub fn clear_pend_dues_date(&mut self) {
        self.pend_dues_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_pend_dues_date(&mut self, v: i64) {
        self.pend_dues_date = v;
    }

    // double int_rate = 19;


    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }
    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    // string cat = 20;


    pub fn get_cat(&self) -> &str {
        &self.cat
    }
    pub fn clear_cat(&mut self) {
        self.cat.clear();
    }

    // Param is passed by value, moved
    pub fn set_cat(&mut self, v: ::std::string::String) {
        self.cat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cat(&mut self) -> &mut ::std::string::String {
        &mut self.cat
    }

    // Take field
    pub fn take_cat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cat, ::std::string::String::new())
    }

    // double loan_trm = 21;


    pub fn get_loan_trm(&self) -> f64 {
        self.loan_trm
    }
    pub fn clear_loan_trm(&mut self) {
        self.loan_trm = 0.;
    }

    // Param is passed by value, moved
    pub fn set_loan_trm(&mut self, v: f64) {
        self.loan_trm = v;
    }

    // string bad_debt_ind = 22;


    pub fn get_bad_debt_ind(&self) -> &str {
        &self.bad_debt_ind
    }
    pub fn clear_bad_debt_ind(&mut self) {
        self.bad_debt_ind.clear();
    }

    // Param is passed by value, moved
    pub fn set_bad_debt_ind(&mut self, v: ::std::string::String) {
        self.bad_debt_ind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bad_debt_ind(&mut self) -> &mut ::std::string::String {
        &mut self.bad_debt_ind
    }

    // Take field
    pub fn take_bad_debt_ind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bad_debt_ind, ::std::string::String::new())
    }

    // double arr_int_accr = 23;


    pub fn get_arr_int_accr(&self) -> f64 {
        self.arr_int_accr
    }
    pub fn clear_arr_int_accr(&mut self) {
        self.arr_int_accr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_arr_int_accr(&mut self, v: f64) {
        self.arr_int_accr = v;
    }

    // double arr_int_incr = 24;


    pub fn get_arr_int_incr(&self) -> f64 {
        self.arr_int_incr
    }
    pub fn clear_arr_int_incr(&mut self) {
        self.arr_int_incr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_arr_int_incr(&mut self, v: f64) {
        self.arr_int_incr = v;
    }

    // double rt_incr = 25;


    pub fn get_rt_incr(&self) -> f64 {
        self.rt_incr
    }
    pub fn clear_rt_incr(&mut self) {
        self.rt_incr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rt_incr(&mut self, v: f64) {
        self.rt_incr = v;
    }

    // string customer_no = 26;


    pub fn get_customer_no(&self) -> &str {
        &self.customer_no
    }
    pub fn clear_customer_no(&mut self) {
        self.customer_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_no(&mut self, v: ::std::string::String) {
        self.customer_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_no(&mut self) -> &mut ::std::string::String {
        &mut self.customer_no
    }

    // Take field
    pub fn take_customer_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_no, ::std::string::String::new())
    }

    // string currency_ind = 27;


    pub fn get_currency_ind(&self) -> &str {
        &self.currency_ind
    }
    pub fn clear_currency_ind(&mut self) {
        self.currency_ind.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency_ind(&mut self, v: ::std::string::String) {
        self.currency_ind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency_ind(&mut self) -> &mut ::std::string::String {
        &mut self.currency_ind
    }

    // Take field
    pub fn take_currency_ind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency_ind, ::std::string::String::new())
    }

    // double store_rate = 28;


    pub fn get_store_rate(&self) -> f64 {
        self.store_rate
    }
    pub fn clear_store_rate(&mut self) {
        self.store_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_store_rate(&mut self, v: f64) {
        self.store_rate = v;
    }

    // string cr_rating = 29;


    pub fn get_cr_rating(&self) -> &str {
        &self.cr_rating
    }
    pub fn clear_cr_rating(&mut self) {
        self.cr_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_cr_rating(&mut self, v: ::std::string::String) {
        self.cr_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cr_rating(&mut self) -> &mut ::std::string::String {
        &mut self.cr_rating
    }

    // Take field
    pub fn take_cr_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cr_rating, ::std::string::String::new())
    }

    // string gl_class_code = 30;


    pub fn get_gl_class_code(&self) -> &str {
        &self.gl_class_code
    }
    pub fn clear_gl_class_code(&mut self) {
        self.gl_class_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_class_code(&mut self, v: ::std::string::String) {
        self.gl_class_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_class_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_class_code
    }

    // Take field
    pub fn take_gl_class_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_class_code, ::std::string::String::new())
    }

    // double theo_unpd_arrs_int = 31;


    pub fn get_theo_unpd_arrs_int(&self) -> f64 {
        self.theo_unpd_arrs_int
    }
    pub fn clear_theo_unpd_arrs_int(&mut self) {
        self.theo_unpd_arrs_int = 0.;
    }

    // Param is passed by value, moved
    pub fn set_theo_unpd_arrs_int(&mut self, v: f64) {
        self.theo_unpd_arrs_int = v;
    }

    // double security_amount = 32;


    pub fn get_security_amount(&self) -> f64 {
        self.security_amount
    }
    pub fn clear_security_amount(&mut self) {
        self.security_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_security_amount(&mut self, v: f64) {
        self.security_amount = v;
    }

    // int64 last_credit_dt = 33;


    pub fn get_last_credit_dt(&self) -> i64 {
        self.last_credit_dt
    }
    pub fn clear_last_credit_dt(&mut self) {
        self.last_credit_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_credit_dt(&mut self, v: i64) {
        self.last_credit_dt = v;
    }

    // string old_bad_debt_ind = 34;


    pub fn get_old_bad_debt_ind(&self) -> &str {
        &self.old_bad_debt_ind
    }
    pub fn clear_old_bad_debt_ind(&mut self) {
        self.old_bad_debt_ind.clear();
    }

    // Param is passed by value, moved
    pub fn set_old_bad_debt_ind(&mut self, v: ::std::string::String) {
        self.old_bad_debt_ind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_old_bad_debt_ind(&mut self) -> &mut ::std::string::String {
        &mut self.old_bad_debt_ind
    }

    // Take field
    pub fn take_old_bad_debt_ind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.old_bad_debt_ind, ::std::string::String::new())
    }

    // int64 npa_date = 35;


    pub fn get_npa_date(&self) -> i64 {
        self.npa_date
    }
    pub fn clear_npa_date(&mut self) {
        self.npa_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_npa_date(&mut self, v: i64) {
        self.npa_date = v;
    }

    // double collection_amt = 36;


    pub fn get_collection_amt(&self) -> f64 {
        self.collection_amt
    }
    pub fn clear_collection_amt(&mut self) {
        self.collection_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_collection_amt(&mut self, v: f64) {
        self.collection_amt = v;
    }

    // double provision_amount = 37;


    pub fn get_provision_amount(&self) -> f64 {
        self.provision_amount
    }
    pub fn clear_provision_amount(&mut self) {
        self.provision_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_provision_amount(&mut self, v: f64) {
        self.provision_amount = v;
    }

    // int64 last_repriced_date = 38;


    pub fn get_last_repriced_date(&self) -> i64 {
        self.last_repriced_date
    }
    pub fn clear_last_repriced_date(&mut self) {
        self.last_repriced_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_repriced_date(&mut self, v: i64) {
        self.last_repriced_date = v;
    }

    // int64 next_repriced_date = 39;


    pub fn get_next_repriced_date(&self) -> i64 {
        self.next_repriced_date
    }
    pub fn clear_next_repriced_date(&mut self) {
        self.next_repriced_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_repriced_date(&mut self, v: i64) {
        self.next_repriced_date = v;
    }

    // string repricing_frequency = 40;


    pub fn get_repricing_frequency(&self) -> &str {
        &self.repricing_frequency
    }
    pub fn clear_repricing_frequency(&mut self) {
        self.repricing_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_repricing_frequency(&mut self, v: ::std::string::String) {
        self.repricing_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repricing_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.repricing_frequency
    }

    // Take field
    pub fn take_repricing_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.repricing_frequency, ::std::string::String::new())
    }

    // string inca = 41;


    pub fn get_inca(&self) -> &str {
        &self.inca
    }
    pub fn clear_inca(&mut self) {
        self.inca.clear();
    }

    // Param is passed by value, moved
    pub fn set_inca(&mut self, v: ::std::string::String) {
        self.inca = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inca(&mut self) -> &mut ::std::string::String {
        &mut self.inca
    }

    // Take field
    pub fn take_inca(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.inca, ::std::string::String::new())
    }

    // string rating_source = 42;


    pub fn get_rating_source(&self) -> &str {
        &self.rating_source
    }
    pub fn clear_rating_source(&mut self) {
        self.rating_source.clear();
    }

    // Param is passed by value, moved
    pub fn set_rating_source(&mut self, v: ::std::string::String) {
        self.rating_source = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rating_source(&mut self) -> &mut ::std::string::String {
        &mut self.rating_source
    }

    // Take field
    pub fn take_rating_source(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rating_source, ::std::string::String::new())
    }

    // string rating_code = 43;


    pub fn get_rating_code(&self) -> &str {
        &self.rating_code
    }
    pub fn clear_rating_code(&mut self) {
        self.rating_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_rating_code(&mut self, v: ::std::string::String) {
        self.rating_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rating_code(&mut self) -> &mut ::std::string::String {
        &mut self.rating_code
    }

    // Take field
    pub fn take_rating_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rating_code, ::std::string::String::new())
    }

    // string benchmark = 44;


    pub fn get_benchmark(&self) -> &str {
        &self.benchmark
    }
    pub fn clear_benchmark(&mut self) {
        self.benchmark.clear();
    }

    // Param is passed by value, moved
    pub fn set_benchmark(&mut self, v: ::std::string::String) {
        self.benchmark = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_benchmark(&mut self) -> &mut ::std::string::String {
        &mut self.benchmark
    }

    // Take field
    pub fn take_benchmark(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.benchmark, ::std::string::String::new())
    }

    // string name = 45;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string cust_acct_no = 46;


    pub fn get_cust_acct_no(&self) -> &str {
        &self.cust_acct_no
    }
    pub fn clear_cust_acct_no(&mut self) {
        self.cust_acct_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_acct_no(&mut self, v: ::std::string::String) {
        self.cust_acct_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_acct_no(&mut self) -> &mut ::std::string::String {
        &mut self.cust_acct_no
    }

    // Take field
    pub fn take_cust_acct_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_acct_no, ::std::string::String::new())
    }

    // string prim_acct = 47;


    pub fn get_prim_acct(&self) -> &str {
        &self.prim_acct
    }
    pub fn clear_prim_acct(&mut self) {
        self.prim_acct.clear();
    }

    // Param is passed by value, moved
    pub fn set_prim_acct(&mut self, v: ::std::string::String) {
        self.prim_acct = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prim_acct(&mut self) -> &mut ::std::string::String {
        &mut self.prim_acct
    }

    // Take field
    pub fn take_prim_acct(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prim_acct, ::std::string::String::new())
    }

    // string segment_code = 48;


    pub fn get_segment_code(&self) -> &str {
        &self.segment_code
    }
    pub fn clear_segment_code(&mut self) {
        self.segment_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_segment_code(&mut self, v: ::std::string::String) {
        self.segment_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_segment_code(&mut self) -> &mut ::std::string::String {
        &mut self.segment_code
    }

    // Take field
    pub fn take_segment_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.segment_code, ::std::string::String::new())
    }

    // string industry_code = 49;


    pub fn get_industry_code(&self) -> &str {
        &self.industry_code
    }
    pub fn clear_industry_code(&mut self) {
        self.industry_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_industry_code(&mut self, v: ::std::string::String) {
        self.industry_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_industry_code(&mut self) -> &mut ::std::string::String {
        &mut self.industry_code
    }

    // Take field
    pub fn take_industry_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.industry_code, ::std::string::String::new())
    }

    // string grup_code = 50;


    pub fn get_grup_code(&self) -> &str {
        &self.grup_code
    }
    pub fn clear_grup_code(&mut self) {
        self.grup_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_grup_code(&mut self, v: ::std::string::String) {
        self.grup_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grup_code(&mut self) -> &mut ::std::string::String {
        &mut self.grup_code
    }

    // Take field
    pub fn take_grup_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grup_code, ::std::string::String::new())
    }

    // string bus_sector_code = 51;


    pub fn get_bus_sector_code(&self) -> &str {
        &self.bus_sector_code
    }
    pub fn clear_bus_sector_code(&mut self) {
        self.bus_sector_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_bus_sector_code(&mut self, v: ::std::string::String) {
        self.bus_sector_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bus_sector_code(&mut self) -> &mut ::std::string::String {
        &mut self.bus_sector_code
    }

    // Take field
    pub fn take_bus_sector_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bus_sector_code, ::std::string::String::new())
    }

    // string tier_cust_type = 52;


    pub fn get_tier_cust_type(&self) -> &str {
        &self.tier_cust_type
    }
    pub fn clear_tier_cust_type(&mut self) {
        self.tier_cust_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_tier_cust_type(&mut self, v: ::std::string::String) {
        self.tier_cust_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tier_cust_type(&mut self) -> &mut ::std::string::String {
        &mut self.tier_cust_type
    }

    // Take field
    pub fn take_tier_cust_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tier_cust_type, ::std::string::String::new())
    }

    // double a1 = 53;


    pub fn get_a1(&self) -> f64 {
        self.a1
    }
    pub fn clear_a1(&mut self) {
        self.a1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_a1(&mut self, v: f64) {
        self.a1 = v;
    }

    // double a2 = 54;


    pub fn get_a2(&self) -> f64 {
        self.a2
    }
    pub fn clear_a2(&mut self) {
        self.a2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_a2(&mut self, v: f64) {
        self.a2 = v;
    }

    // double a3 = 55;


    pub fn get_a3(&self) -> f64 {
        self.a3
    }
    pub fn clear_a3(&mut self) {
        self.a3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_a3(&mut self, v: f64) {
        self.a3 = v;
    }

    // string a4 = 56;


    pub fn get_a4(&self) -> &str {
        &self.a4
    }
    pub fn clear_a4(&mut self) {
        self.a4.clear();
    }

    // Param is passed by value, moved
    pub fn set_a4(&mut self, v: ::std::string::String) {
        self.a4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a4(&mut self) -> &mut ::std::string::String {
        &mut self.a4
    }

    // Take field
    pub fn take_a4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a4, ::std::string::String::new())
    }

    // string a5 = 57;


    pub fn get_a5(&self) -> &str {
        &self.a5
    }
    pub fn clear_a5(&mut self) {
        self.a5.clear();
    }

    // Param is passed by value, moved
    pub fn set_a5(&mut self, v: ::std::string::String) {
        self.a5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a5(&mut self) -> &mut ::std::string::String {
        &mut self.a5
    }

    // Take field
    pub fn take_a5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a5, ::std::string::String::new())
    }

    // string a6 = 58;


    pub fn get_a6(&self) -> &str {
        &self.a6
    }
    pub fn clear_a6(&mut self) {
        self.a6.clear();
    }

    // Param is passed by value, moved
    pub fn set_a6(&mut self, v: ::std::string::String) {
        self.a6 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a6(&mut self) -> &mut ::std::string::String {
        &mut self.a6
    }

    // Take field
    pub fn take_a6(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a6, ::std::string::String::new())
    }

    // string a7 = 59;


    pub fn get_a7(&self) -> &str {
        &self.a7
    }
    pub fn clear_a7(&mut self) {
        self.a7.clear();
    }

    // Param is passed by value, moved
    pub fn set_a7(&mut self, v: ::std::string::String) {
        self.a7 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a7(&mut self) -> &mut ::std::string::String {
        &mut self.a7
    }

    // Take field
    pub fn take_a7(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a7, ::std::string::String::new())
    }

    // string a8 = 60;


    pub fn get_a8(&self) -> &str {
        &self.a8
    }
    pub fn clear_a8(&mut self) {
        self.a8.clear();
    }

    // Param is passed by value, moved
    pub fn set_a8(&mut self, v: ::std::string::String) {
        self.a8 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a8(&mut self) -> &mut ::std::string::String {
        &mut self.a8
    }

    // Take field
    pub fn take_a8(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a8, ::std::string::String::new())
    }

    // string a9 = 61;


    pub fn get_a9(&self) -> &str {
        &self.a9
    }
    pub fn clear_a9(&mut self) {
        self.a9.clear();
    }

    // Param is passed by value, moved
    pub fn set_a9(&mut self, v: ::std::string::String) {
        self.a9 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a9(&mut self) -> &mut ::std::string::String {
        &mut self.a9
    }

    // Take field
    pub fn take_a9(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a9, ::std::string::String::new())
    }

    // string a10 = 62;


    pub fn get_a10(&self) -> &str {
        &self.a10
    }
    pub fn clear_a10(&mut self) {
        self.a10.clear();
    }

    // Param is passed by value, moved
    pub fn set_a10(&mut self, v: ::std::string::String) {
        self.a10 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a10(&mut self) -> &mut ::std::string::String {
        &mut self.a10
    }

    // Take field
    pub fn take_a10(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a10, ::std::string::String::new())
    }

    // int64 asondate = 63;


    pub fn get_asondate(&self) -> i64 {
        self.asondate
    }
    pub fn clear_asondate(&mut self) {
        self.asondate = 0;
    }

    // Param is passed by value, moved
    pub fn set_asondate(&mut self, v: i64) {
        self.asondate = v;
    }

    // int64 mat_dt = 64;


    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }
    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    // int64 next_rep_date = 65;


    pub fn get_next_rep_date(&self) -> i64 {
        self.next_rep_date
    }
    pub fn clear_next_rep_date(&mut self) {
        self.next_rep_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_rep_date(&mut self, v: i64) {
        self.next_rep_date = v;
    }

    // repeated .Cashflow cashflows = 66;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Account {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key_1)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.br_no)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.act_type)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.purpose_code_a)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.applic_amount = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.repay_count = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.repay_day = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.repay_freq = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.app_amt = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.loan_bal = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adv_bal = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.theo_loan_bal = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.loan_repay = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pend_dues = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.apprv_date = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lst_fin_date = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lst_arr_date = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pend_dues_date = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cat)?;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.loan_trm = tmp;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bad_debt_ind)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.arr_int_accr = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.arr_int_incr = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rt_incr = tmp;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_no)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency_ind)?;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.store_rate = tmp;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cr_rating)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_class_code)?;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.theo_unpd_arrs_int = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.security_amount = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_credit_dt = tmp;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.old_bad_debt_ind)?;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.npa_date = tmp;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.collection_amt = tmp;
                },
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.provision_amount = tmp;
                },
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_repriced_date = tmp;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_repriced_date = tmp;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.repricing_frequency)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.inca)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rating_source)?;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rating_code)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.benchmark)?;
                },
                45 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                46 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_acct_no)?;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prim_acct)?;
                },
                48 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.segment_code)?;
                },
                49 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.industry_code)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grup_code)?;
                },
                51 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bus_sector_code)?;
                },
                52 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tier_cust_type)?;
                },
                53 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.a1 = tmp;
                },
                54 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.a2 = tmp;
                },
                55 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.a3 = tmp;
                },
                56 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a4)?;
                },
                57 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a5)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a6)?;
                },
                59 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a7)?;
                },
                60 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a8)?;
                },
                61 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a9)?;
                },
                62 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a10)?;
                },
                63 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.asondate = tmp;
                },
                64 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                },
                65 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_rep_date = tmp;
                },
                66 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key_1.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key_1);
        }
        if !self.br_no.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.br_no);
        }
        if !self.act_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.act_type);
        }
        if !self.purpose_code_a.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.purpose_code_a);
        }
        if self.applic_amount != 0. {
            my_size += 9;
        }
        if self.repay_count != 0 {
            my_size += ::protobuf::rt::value_size(6, self.repay_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.repay_day != 0 {
            my_size += ::protobuf::rt::value_size(7, self.repay_day, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.repay_freq != 0 {
            my_size += ::protobuf::rt::value_size(8, self.repay_freq, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.app_amt != 0. {
            my_size += 9;
        }
        if self.loan_bal != 0. {
            my_size += 9;
        }
        if self.adv_bal != 0. {
            my_size += 9;
        }
        if self.theo_loan_bal != 0. {
            my_size += 9;
        }
        if self.loan_repay != 0. {
            my_size += 9;
        }
        if self.pend_dues != 0. {
            my_size += 9;
        }
        if self.apprv_date != 0 {
            my_size += ::protobuf::rt::value_size(15, self.apprv_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lst_fin_date != 0 {
            my_size += ::protobuf::rt::value_size(16, self.lst_fin_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lst_arr_date != 0 {
            my_size += ::protobuf::rt::value_size(17, self.lst_arr_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pend_dues_date != 0 {
            my_size += ::protobuf::rt::value_size(18, self.pend_dues_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_rate != 0. {
            my_size += 10;
        }
        if !self.cat.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.cat);
        }
        if self.loan_trm != 0. {
            my_size += 10;
        }
        if !self.bad_debt_ind.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.bad_debt_ind);
        }
        if self.arr_int_accr != 0. {
            my_size += 10;
        }
        if self.arr_int_incr != 0. {
            my_size += 10;
        }
        if self.rt_incr != 0. {
            my_size += 10;
        }
        if !self.customer_no.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.customer_no);
        }
        if !self.currency_ind.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.currency_ind);
        }
        if self.store_rate != 0. {
            my_size += 10;
        }
        if !self.cr_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.cr_rating);
        }
        if !self.gl_class_code.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.gl_class_code);
        }
        if self.theo_unpd_arrs_int != 0. {
            my_size += 10;
        }
        if self.security_amount != 0. {
            my_size += 10;
        }
        if self.last_credit_dt != 0 {
            my_size += ::protobuf::rt::value_size(33, self.last_credit_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.old_bad_debt_ind.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.old_bad_debt_ind);
        }
        if self.npa_date != 0 {
            my_size += ::protobuf::rt::value_size(35, self.npa_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.collection_amt != 0. {
            my_size += 10;
        }
        if self.provision_amount != 0. {
            my_size += 10;
        }
        if self.last_repriced_date != 0 {
            my_size += ::protobuf::rt::value_size(38, self.last_repriced_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_repriced_date != 0 {
            my_size += ::protobuf::rt::value_size(39, self.next_repriced_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.repricing_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.repricing_frequency);
        }
        if !self.inca.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.inca);
        }
        if !self.rating_source.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.rating_source);
        }
        if !self.rating_code.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.rating_code);
        }
        if !self.benchmark.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.benchmark);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(45, &self.name);
        }
        if !self.cust_acct_no.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.cust_acct_no);
        }
        if !self.prim_acct.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.prim_acct);
        }
        if !self.segment_code.is_empty() {
            my_size += ::protobuf::rt::string_size(48, &self.segment_code);
        }
        if !self.industry_code.is_empty() {
            my_size += ::protobuf::rt::string_size(49, &self.industry_code);
        }
        if !self.grup_code.is_empty() {
            my_size += ::protobuf::rt::string_size(50, &self.grup_code);
        }
        if !self.bus_sector_code.is_empty() {
            my_size += ::protobuf::rt::string_size(51, &self.bus_sector_code);
        }
        if !self.tier_cust_type.is_empty() {
            my_size += ::protobuf::rt::string_size(52, &self.tier_cust_type);
        }
        if self.a1 != 0. {
            my_size += 10;
        }
        if self.a2 != 0. {
            my_size += 10;
        }
        if self.a3 != 0. {
            my_size += 10;
        }
        if !self.a4.is_empty() {
            my_size += ::protobuf::rt::string_size(56, &self.a4);
        }
        if !self.a5.is_empty() {
            my_size += ::protobuf::rt::string_size(57, &self.a5);
        }
        if !self.a6.is_empty() {
            my_size += ::protobuf::rt::string_size(58, &self.a6);
        }
        if !self.a7.is_empty() {
            my_size += ::protobuf::rt::string_size(59, &self.a7);
        }
        if !self.a8.is_empty() {
            my_size += ::protobuf::rt::string_size(60, &self.a8);
        }
        if !self.a9.is_empty() {
            my_size += ::protobuf::rt::string_size(61, &self.a9);
        }
        if !self.a10.is_empty() {
            my_size += ::protobuf::rt::string_size(62, &self.a10);
        }
        if self.asondate != 0 {
            my_size += ::protobuf::rt::value_size(63, self.asondate, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mat_dt != 0 {
            my_size += ::protobuf::rt::value_size(64, self.mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_rep_date != 0 {
            my_size += ::protobuf::rt::value_size(65, self.next_rep_date, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key_1.is_empty() {
            os.write_string(1, &self.key_1)?;
        }
        if !self.br_no.is_empty() {
            os.write_string(2, &self.br_no)?;
        }
        if !self.act_type.is_empty() {
            os.write_string(3, &self.act_type)?;
        }
        if !self.purpose_code_a.is_empty() {
            os.write_string(4, &self.purpose_code_a)?;
        }
        if self.applic_amount != 0. {
            os.write_double(5, self.applic_amount)?;
        }
        if self.repay_count != 0 {
            os.write_int32(6, self.repay_count)?;
        }
        if self.repay_day != 0 {
            os.write_int32(7, self.repay_day)?;
        }
        if self.repay_freq != 0 {
            os.write_int32(8, self.repay_freq)?;
        }
        if self.app_amt != 0. {
            os.write_double(9, self.app_amt)?;
        }
        if self.loan_bal != 0. {
            os.write_double(10, self.loan_bal)?;
        }
        if self.adv_bal != 0. {
            os.write_double(11, self.adv_bal)?;
        }
        if self.theo_loan_bal != 0. {
            os.write_double(12, self.theo_loan_bal)?;
        }
        if self.loan_repay != 0. {
            os.write_double(13, self.loan_repay)?;
        }
        if self.pend_dues != 0. {
            os.write_double(14, self.pend_dues)?;
        }
        if self.apprv_date != 0 {
            os.write_int64(15, self.apprv_date)?;
        }
        if self.lst_fin_date != 0 {
            os.write_int64(16, self.lst_fin_date)?;
        }
        if self.lst_arr_date != 0 {
            os.write_int64(17, self.lst_arr_date)?;
        }
        if self.pend_dues_date != 0 {
            os.write_int64(18, self.pend_dues_date)?;
        }
        if self.int_rate != 0. {
            os.write_double(19, self.int_rate)?;
        }
        if !self.cat.is_empty() {
            os.write_string(20, &self.cat)?;
        }
        if self.loan_trm != 0. {
            os.write_double(21, self.loan_trm)?;
        }
        if !self.bad_debt_ind.is_empty() {
            os.write_string(22, &self.bad_debt_ind)?;
        }
        if self.arr_int_accr != 0. {
            os.write_double(23, self.arr_int_accr)?;
        }
        if self.arr_int_incr != 0. {
            os.write_double(24, self.arr_int_incr)?;
        }
        if self.rt_incr != 0. {
            os.write_double(25, self.rt_incr)?;
        }
        if !self.customer_no.is_empty() {
            os.write_string(26, &self.customer_no)?;
        }
        if !self.currency_ind.is_empty() {
            os.write_string(27, &self.currency_ind)?;
        }
        if self.store_rate != 0. {
            os.write_double(28, self.store_rate)?;
        }
        if !self.cr_rating.is_empty() {
            os.write_string(29, &self.cr_rating)?;
        }
        if !self.gl_class_code.is_empty() {
            os.write_string(30, &self.gl_class_code)?;
        }
        if self.theo_unpd_arrs_int != 0. {
            os.write_double(31, self.theo_unpd_arrs_int)?;
        }
        if self.security_amount != 0. {
            os.write_double(32, self.security_amount)?;
        }
        if self.last_credit_dt != 0 {
            os.write_int64(33, self.last_credit_dt)?;
        }
        if !self.old_bad_debt_ind.is_empty() {
            os.write_string(34, &self.old_bad_debt_ind)?;
        }
        if self.npa_date != 0 {
            os.write_int64(35, self.npa_date)?;
        }
        if self.collection_amt != 0. {
            os.write_double(36, self.collection_amt)?;
        }
        if self.provision_amount != 0. {
            os.write_double(37, self.provision_amount)?;
        }
        if self.last_repriced_date != 0 {
            os.write_int64(38, self.last_repriced_date)?;
        }
        if self.next_repriced_date != 0 {
            os.write_int64(39, self.next_repriced_date)?;
        }
        if !self.repricing_frequency.is_empty() {
            os.write_string(40, &self.repricing_frequency)?;
        }
        if !self.inca.is_empty() {
            os.write_string(41, &self.inca)?;
        }
        if !self.rating_source.is_empty() {
            os.write_string(42, &self.rating_source)?;
        }
        if !self.rating_code.is_empty() {
            os.write_string(43, &self.rating_code)?;
        }
        if !self.benchmark.is_empty() {
            os.write_string(44, &self.benchmark)?;
        }
        if !self.name.is_empty() {
            os.write_string(45, &self.name)?;
        }
        if !self.cust_acct_no.is_empty() {
            os.write_string(46, &self.cust_acct_no)?;
        }
        if !self.prim_acct.is_empty() {
            os.write_string(47, &self.prim_acct)?;
        }
        if !self.segment_code.is_empty() {
            os.write_string(48, &self.segment_code)?;
        }
        if !self.industry_code.is_empty() {
            os.write_string(49, &self.industry_code)?;
        }
        if !self.grup_code.is_empty() {
            os.write_string(50, &self.grup_code)?;
        }
        if !self.bus_sector_code.is_empty() {
            os.write_string(51, &self.bus_sector_code)?;
        }
        if !self.tier_cust_type.is_empty() {
            os.write_string(52, &self.tier_cust_type)?;
        }
        if self.a1 != 0. {
            os.write_double(53, self.a1)?;
        }
        if self.a2 != 0. {
            os.write_double(54, self.a2)?;
        }
        if self.a3 != 0. {
            os.write_double(55, self.a3)?;
        }
        if !self.a4.is_empty() {
            os.write_string(56, &self.a4)?;
        }
        if !self.a5.is_empty() {
            os.write_string(57, &self.a5)?;
        }
        if !self.a6.is_empty() {
            os.write_string(58, &self.a6)?;
        }
        if !self.a7.is_empty() {
            os.write_string(59, &self.a7)?;
        }
        if !self.a8.is_empty() {
            os.write_string(60, &self.a8)?;
        }
        if !self.a9.is_empty() {
            os.write_string(61, &self.a9)?;
        }
        if !self.a10.is_empty() {
            os.write_string(62, &self.a10)?;
        }
        if self.asondate != 0 {
            os.write_int64(63, self.asondate)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(64, self.mat_dt)?;
        }
        if self.next_rep_date != 0 {
            os.write_int64(65, self.next_rep_date)?;
        }
        for v in &self.cashflows {
            os.write_tag(66, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Account {
        Account::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key_1",
                |m: &Account| { &m.key_1 },
                |m: &mut Account| { &mut m.key_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "br_no",
                |m: &Account| { &m.br_no },
                |m: &mut Account| { &mut m.br_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "act_type",
                |m: &Account| { &m.act_type },
                |m: &mut Account| { &mut m.act_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "purpose_code_a",
                |m: &Account| { &m.purpose_code_a },
                |m: &mut Account| { &mut m.purpose_code_a },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "applic_amount",
                |m: &Account| { &m.applic_amount },
                |m: &mut Account| { &mut m.applic_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "repay_count",
                |m: &Account| { &m.repay_count },
                |m: &mut Account| { &mut m.repay_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "repay_day",
                |m: &Account| { &m.repay_day },
                |m: &mut Account| { &mut m.repay_day },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "repay_freq",
                |m: &Account| { &m.repay_freq },
                |m: &mut Account| { &mut m.repay_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "app_amt",
                |m: &Account| { &m.app_amt },
                |m: &mut Account| { &mut m.app_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "loan_bal",
                |m: &Account| { &m.loan_bal },
                |m: &mut Account| { &mut m.loan_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "adv_bal",
                |m: &Account| { &m.adv_bal },
                |m: &mut Account| { &mut m.adv_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "theo_loan_bal",
                |m: &Account| { &m.theo_loan_bal },
                |m: &mut Account| { &mut m.theo_loan_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "loan_repay",
                |m: &Account| { &m.loan_repay },
                |m: &mut Account| { &mut m.loan_repay },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pend_dues",
                |m: &Account| { &m.pend_dues },
                |m: &mut Account| { &mut m.pend_dues },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "apprv_date",
                |m: &Account| { &m.apprv_date },
                |m: &mut Account| { &mut m.apprv_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "lst_fin_date",
                |m: &Account| { &m.lst_fin_date },
                |m: &mut Account| { &mut m.lst_fin_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "lst_arr_date",
                |m: &Account| { &m.lst_arr_date },
                |m: &mut Account| { &mut m.lst_arr_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pend_dues_date",
                |m: &Account| { &m.pend_dues_date },
                |m: &mut Account| { &mut m.pend_dues_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_rate",
                |m: &Account| { &m.int_rate },
                |m: &mut Account| { &mut m.int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cat",
                |m: &Account| { &m.cat },
                |m: &mut Account| { &mut m.cat },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "loan_trm",
                |m: &Account| { &m.loan_trm },
                |m: &mut Account| { &mut m.loan_trm },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bad_debt_ind",
                |m: &Account| { &m.bad_debt_ind },
                |m: &mut Account| { &mut m.bad_debt_ind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "arr_int_accr",
                |m: &Account| { &m.arr_int_accr },
                |m: &mut Account| { &mut m.arr_int_accr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "arr_int_incr",
                |m: &Account| { &m.arr_int_incr },
                |m: &mut Account| { &mut m.arr_int_incr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "rt_incr",
                |m: &Account| { &m.rt_incr },
                |m: &mut Account| { &mut m.rt_incr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_no",
                |m: &Account| { &m.customer_no },
                |m: &mut Account| { &mut m.customer_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency_ind",
                |m: &Account| { &m.currency_ind },
                |m: &mut Account| { &mut m.currency_ind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "store_rate",
                |m: &Account| { &m.store_rate },
                |m: &mut Account| { &mut m.store_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cr_rating",
                |m: &Account| { &m.cr_rating },
                |m: &mut Account| { &mut m.cr_rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_class_code",
                |m: &Account| { &m.gl_class_code },
                |m: &mut Account| { &mut m.gl_class_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "theo_unpd_arrs_int",
                |m: &Account| { &m.theo_unpd_arrs_int },
                |m: &mut Account| { &mut m.theo_unpd_arrs_int },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "security_amount",
                |m: &Account| { &m.security_amount },
                |m: &mut Account| { &mut m.security_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_credit_dt",
                |m: &Account| { &m.last_credit_dt },
                |m: &mut Account| { &mut m.last_credit_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "old_bad_debt_ind",
                |m: &Account| { &m.old_bad_debt_ind },
                |m: &mut Account| { &mut m.old_bad_debt_ind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "npa_date",
                |m: &Account| { &m.npa_date },
                |m: &mut Account| { &mut m.npa_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "collection_amt",
                |m: &Account| { &m.collection_amt },
                |m: &mut Account| { &mut m.collection_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "provision_amount",
                |m: &Account| { &m.provision_amount },
                |m: &mut Account| { &mut m.provision_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_repriced_date",
                |m: &Account| { &m.last_repriced_date },
                |m: &mut Account| { &mut m.last_repriced_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_repriced_date",
                |m: &Account| { &m.next_repriced_date },
                |m: &mut Account| { &mut m.next_repriced_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "repricing_frequency",
                |m: &Account| { &m.repricing_frequency },
                |m: &mut Account| { &mut m.repricing_frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "inca",
                |m: &Account| { &m.inca },
                |m: &mut Account| { &mut m.inca },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rating_source",
                |m: &Account| { &m.rating_source },
                |m: &mut Account| { &mut m.rating_source },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rating_code",
                |m: &Account| { &m.rating_code },
                |m: &mut Account| { &mut m.rating_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "benchmark",
                |m: &Account| { &m.benchmark },
                |m: &mut Account| { &mut m.benchmark },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Account| { &m.name },
                |m: &mut Account| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_acct_no",
                |m: &Account| { &m.cust_acct_no },
                |m: &mut Account| { &mut m.cust_acct_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prim_acct",
                |m: &Account| { &m.prim_acct },
                |m: &mut Account| { &mut m.prim_acct },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "segment_code",
                |m: &Account| { &m.segment_code },
                |m: &mut Account| { &mut m.segment_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "industry_code",
                |m: &Account| { &m.industry_code },
                |m: &mut Account| { &mut m.industry_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grup_code",
                |m: &Account| { &m.grup_code },
                |m: &mut Account| { &mut m.grup_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bus_sector_code",
                |m: &Account| { &m.bus_sector_code },
                |m: &mut Account| { &mut m.bus_sector_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tier_cust_type",
                |m: &Account| { &m.tier_cust_type },
                |m: &mut Account| { &mut m.tier_cust_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "a1",
                |m: &Account| { &m.a1 },
                |m: &mut Account| { &mut m.a1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "a2",
                |m: &Account| { &m.a2 },
                |m: &mut Account| { &mut m.a2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "a3",
                |m: &Account| { &m.a3 },
                |m: &mut Account| { &mut m.a3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a4",
                |m: &Account| { &m.a4 },
                |m: &mut Account| { &mut m.a4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a5",
                |m: &Account| { &m.a5 },
                |m: &mut Account| { &mut m.a5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a6",
                |m: &Account| { &m.a6 },
                |m: &mut Account| { &mut m.a6 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a7",
                |m: &Account| { &m.a7 },
                |m: &mut Account| { &mut m.a7 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a8",
                |m: &Account| { &m.a8 },
                |m: &mut Account| { &mut m.a8 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a9",
                |m: &Account| { &m.a9 },
                |m: &mut Account| { &mut m.a9 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a10",
                |m: &Account| { &m.a10 },
                |m: &mut Account| { &mut m.a10 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "asondate",
                |m: &Account| { &m.asondate },
                |m: &mut Account| { &mut m.asondate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "mat_dt",
                |m: &Account| { &m.mat_dt },
                |m: &mut Account| { &mut m.mat_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_rep_date",
                |m: &Account| { &m.next_rep_date },
                |m: &mut Account| { &mut m.next_rep_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &Account| { &m.cashflows },
                |m: &mut Account| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Account>(
                "Account",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Account {
        static instance: ::protobuf::rt::LazyV2<Account> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Account::new)
    }
}

impl ::protobuf::Clear for Account {
    fn clear(&mut self) {
        self.key_1.clear();
        self.br_no.clear();
        self.act_type.clear();
        self.purpose_code_a.clear();
        self.applic_amount = 0.;
        self.repay_count = 0;
        self.repay_day = 0;
        self.repay_freq = 0;
        self.app_amt = 0.;
        self.loan_bal = 0.;
        self.adv_bal = 0.;
        self.theo_loan_bal = 0.;
        self.loan_repay = 0.;
        self.pend_dues = 0.;
        self.apprv_date = 0;
        self.lst_fin_date = 0;
        self.lst_arr_date = 0;
        self.pend_dues_date = 0;
        self.int_rate = 0.;
        self.cat.clear();
        self.loan_trm = 0.;
        self.bad_debt_ind.clear();
        self.arr_int_accr = 0.;
        self.arr_int_incr = 0.;
        self.rt_incr = 0.;
        self.customer_no.clear();
        self.currency_ind.clear();
        self.store_rate = 0.;
        self.cr_rating.clear();
        self.gl_class_code.clear();
        self.theo_unpd_arrs_int = 0.;
        self.security_amount = 0.;
        self.last_credit_dt = 0;
        self.old_bad_debt_ind.clear();
        self.npa_date = 0;
        self.collection_amt = 0.;
        self.provision_amount = 0.;
        self.last_repriced_date = 0;
        self.next_repriced_date = 0;
        self.repricing_frequency.clear();
        self.inca.clear();
        self.rating_source.clear();
        self.rating_code.clear();
        self.benchmark.clear();
        self.name.clear();
        self.cust_acct_no.clear();
        self.prim_acct.clear();
        self.segment_code.clear();
        self.industry_code.clear();
        self.grup_code.clear();
        self.bus_sector_code.clear();
        self.tier_cust_type.clear();
        self.a1 = 0.;
        self.a2 = 0.;
        self.a3 = 0.;
        self.a4.clear();
        self.a5.clear();
        self.a6.clear();
        self.a7.clear();
        self.a8.clear();
        self.a9.clear();
        self.a10.clear();
        self.asondate = 0;
        self.mat_dt = 0;
        self.next_rep_date = 0;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\
    \x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\
    \x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\
    \x04date\"\xd6\x0f\n\x07Account\x12\x13\n\x05key_1\x18\x01\x20\x01(\tR\
    \x04key1\x12\x13\n\x05br_no\x18\x02\x20\x01(\tR\x04brNo\x12\x19\n\x08act\
    _type\x18\x03\x20\x01(\tR\x07actType\x12$\n\x0epurpose_code_a\x18\x04\
    \x20\x01(\tR\x0cpurposeCodeA\x12#\n\rapplic_amount\x18\x05\x20\x01(\x01R\
    \x0capplicAmount\x12\x1f\n\x0brepay_count\x18\x06\x20\x01(\x05R\nrepayCo\
    unt\x12\x1b\n\trepay_day\x18\x07\x20\x01(\x05R\x08repayDay\x12\x1d\n\nre\
    pay_freq\x18\x08\x20\x01(\x05R\trepayFreq\x12\x17\n\x07app_amt\x18\t\x20\
    \x01(\x01R\x06appAmt\x12\x19\n\x08loan_bal\x18\n\x20\x01(\x01R\x07loanBa\
    l\x12\x17\n\x07adv_bal\x18\x0b\x20\x01(\x01R\x06advBal\x12\"\n\rtheo_loa\
    n_bal\x18\x0c\x20\x01(\x01R\x0btheoLoanBal\x12\x1d\n\nloan_repay\x18\r\
    \x20\x01(\x01R\tloanRepay\x12\x1b\n\tpend_dues\x18\x0e\x20\x01(\x01R\x08\
    pendDues\x12\x1d\n\napprv_date\x18\x0f\x20\x01(\x03R\tapprvDate\x12\x20\
    \n\x0clst_fin_date\x18\x10\x20\x01(\x03R\nlstFinDate\x12\x20\n\x0clst_ar\
    r_date\x18\x11\x20\x01(\x03R\nlstArrDate\x12$\n\x0epend_dues_date\x18\
    \x12\x20\x01(\x03R\x0cpendDuesDate\x12\x19\n\x08int_rate\x18\x13\x20\x01\
    (\x01R\x07intRate\x12\x10\n\x03cat\x18\x14\x20\x01(\tR\x03cat\x12\x19\n\
    \x08loan_trm\x18\x15\x20\x01(\x01R\x07loanTrm\x12\x20\n\x0cbad_debt_ind\
    \x18\x16\x20\x01(\tR\nbadDebtInd\x12\x20\n\x0carr_int_accr\x18\x17\x20\
    \x01(\x01R\narrIntAccr\x12\x20\n\x0carr_int_incr\x18\x18\x20\x01(\x01R\n\
    arrIntIncr\x12\x17\n\x07rt_incr\x18\x19\x20\x01(\x01R\x06rtIncr\x12\x1f\
    \n\x0bcustomer_no\x18\x1a\x20\x01(\tR\ncustomerNo\x12!\n\x0ccurrency_ind\
    \x18\x1b\x20\x01(\tR\x0bcurrencyInd\x12\x1d\n\nstore_rate\x18\x1c\x20\
    \x01(\x01R\tstoreRate\x12\x1b\n\tcr_rating\x18\x1d\x20\x01(\tR\x08crRati\
    ng\x12\"\n\rgl_class_code\x18\x1e\x20\x01(\tR\x0bglClassCode\x12+\n\x12t\
    heo_unpd_arrs_int\x18\x1f\x20\x01(\x01R\x0ftheoUnpdArrsInt\x12'\n\x0fsec\
    urity_amount\x18\x20\x20\x01(\x01R\x0esecurityAmount\x12$\n\x0elast_cred\
    it_dt\x18!\x20\x01(\x03R\x0clastCreditDt\x12'\n\x10old_bad_debt_ind\x18\
    \"\x20\x01(\tR\roldBadDebtInd\x12\x19\n\x08npa_date\x18#\x20\x01(\x03R\
    \x07npaDate\x12%\n\x0ecollection_amt\x18$\x20\x01(\x01R\rcollectionAmt\
    \x12)\n\x10provision_amount\x18%\x20\x01(\x01R\x0fprovisionAmount\x12,\n\
    \x12last_repriced_date\x18&\x20\x01(\x03R\x10lastRepricedDate\x12,\n\x12\
    next_repriced_date\x18'\x20\x01(\x03R\x10nextRepricedDate\x12/\n\x13repr\
    icing_frequency\x18(\x20\x01(\tR\x12repricingFrequency\x12\x12\n\x04inca\
    \x18)\x20\x01(\tR\x04inca\x12#\n\rrating_source\x18*\x20\x01(\tR\x0crati\
    ngSource\x12\x1f\n\x0brating_code\x18+\x20\x01(\tR\nratingCode\x12\x1c\n\
    \tbenchmark\x18,\x20\x01(\tR\tbenchmark\x12\x12\n\x04name\x18-\x20\x01(\
    \tR\x04name\x12\x20\n\x0ccust_acct_no\x18.\x20\x01(\tR\ncustAcctNo\x12\
    \x1b\n\tprim_acct\x18/\x20\x01(\tR\x08primAcct\x12!\n\x0csegment_code\
    \x180\x20\x01(\tR\x0bsegmentCode\x12#\n\rindustry_code\x181\x20\x01(\tR\
    \x0cindustryCode\x12\x1b\n\tgrup_code\x182\x20\x01(\tR\x08grupCode\x12&\
    \n\x0fbus_sector_code\x183\x20\x01(\tR\rbusSectorCode\x12$\n\x0etier_cus\
    t_type\x184\x20\x01(\tR\x0ctierCustType\x12\x0e\n\x02a1\x185\x20\x01(\
    \x01R\x02a1\x12\x0e\n\x02a2\x186\x20\x01(\x01R\x02a2\x12\x0e\n\x02a3\x18\
    7\x20\x01(\x01R\x02a3\x12\x0e\n\x02a4\x188\x20\x01(\tR\x02a4\x12\x0e\n\
    \x02a5\x189\x20\x01(\tR\x02a5\x12\x0e\n\x02a6\x18:\x20\x01(\tR\x02a6\x12\
    \x0e\n\x02a7\x18;\x20\x01(\tR\x02a7\x12\x0e\n\x02a8\x18<\x20\x01(\tR\x02\
    a8\x12\x0e\n\x02a9\x18=\x20\x01(\tR\x02a9\x12\x10\n\x03a10\x18>\x20\x01(\
    \tR\x03a10\x12\x1a\n\x08asondate\x18?\x20\x01(\x03R\x08asondate\x12\x15\
    \n\x06mat_dt\x18@\x20\x01(\x03R\x05matDt\x12\"\n\rnext_rep_date\x18A\x20\
    \x01(\x03R\x0bnextRepDate\x12'\n\tcashflows\x18B\x20\x03(\x0b2\t.Cashflo\
    wR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
