// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    pub base_rate: f64,
    pub base_rate_amount: f64,
    pub adj1_rate: f64,
    pub adj1_rate_amount: f64,
    pub adj2_rate: f64,
    pub adj2_rate_amount: f64,
    pub adj3_rate: f64,
    pub adj3_rate_amount: f64,
    pub adj4_rate: f64,
    pub adj4_rate_amount: f64,
    pub adj5_rate: f64,
    pub adj5_rate_amount: f64,
    pub adj6_rate: f64,
    pub adj6_rate_amount: f64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // double principal_amount = 2;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }

    // double base_rate = 4;

    pub fn clear_base_rate(&mut self) {
        self.base_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_rate(&mut self, v: f64) {
        self.base_rate = v;
    }

    pub fn get_base_rate(&self) -> f64 {
        self.base_rate
    }

    // double base_rate_amount = 5;

    pub fn clear_base_rate_amount(&mut self) {
        self.base_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_rate_amount(&mut self, v: f64) {
        self.base_rate_amount = v;
    }

    pub fn get_base_rate_amount(&self) -> f64 {
        self.base_rate_amount
    }

    // double adj1_rate = 6;

    pub fn clear_adj1_rate(&mut self) {
        self.adj1_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj1_rate(&mut self, v: f64) {
        self.adj1_rate = v;
    }

    pub fn get_adj1_rate(&self) -> f64 {
        self.adj1_rate
    }

    // double adj1_rate_amount = 7;

    pub fn clear_adj1_rate_amount(&mut self) {
        self.adj1_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj1_rate_amount(&mut self, v: f64) {
        self.adj1_rate_amount = v;
    }

    pub fn get_adj1_rate_amount(&self) -> f64 {
        self.adj1_rate_amount
    }

    // double adj2_rate = 8;

    pub fn clear_adj2_rate(&mut self) {
        self.adj2_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj2_rate(&mut self, v: f64) {
        self.adj2_rate = v;
    }

    pub fn get_adj2_rate(&self) -> f64 {
        self.adj2_rate
    }

    // double adj2_rate_amount = 9;

    pub fn clear_adj2_rate_amount(&mut self) {
        self.adj2_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj2_rate_amount(&mut self, v: f64) {
        self.adj2_rate_amount = v;
    }

    pub fn get_adj2_rate_amount(&self) -> f64 {
        self.adj2_rate_amount
    }

    // double adj3_rate = 10;

    pub fn clear_adj3_rate(&mut self) {
        self.adj3_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj3_rate(&mut self, v: f64) {
        self.adj3_rate = v;
    }

    pub fn get_adj3_rate(&self) -> f64 {
        self.adj3_rate
    }

    // double adj3_rate_amount = 11;

    pub fn clear_adj3_rate_amount(&mut self) {
        self.adj3_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj3_rate_amount(&mut self, v: f64) {
        self.adj3_rate_amount = v;
    }

    pub fn get_adj3_rate_amount(&self) -> f64 {
        self.adj3_rate_amount
    }

    // double adj4_rate = 12;

    pub fn clear_adj4_rate(&mut self) {
        self.adj4_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj4_rate(&mut self, v: f64) {
        self.adj4_rate = v;
    }

    pub fn get_adj4_rate(&self) -> f64 {
        self.adj4_rate
    }

    // double adj4_rate_amount = 13;

    pub fn clear_adj4_rate_amount(&mut self) {
        self.adj4_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj4_rate_amount(&mut self, v: f64) {
        self.adj4_rate_amount = v;
    }

    pub fn get_adj4_rate_amount(&self) -> f64 {
        self.adj4_rate_amount
    }

    // double adj5_rate = 14;

    pub fn clear_adj5_rate(&mut self) {
        self.adj5_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj5_rate(&mut self, v: f64) {
        self.adj5_rate = v;
    }

    pub fn get_adj5_rate(&self) -> f64 {
        self.adj5_rate
    }

    // double adj5_rate_amount = 15;

    pub fn clear_adj5_rate_amount(&mut self) {
        self.adj5_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj5_rate_amount(&mut self, v: f64) {
        self.adj5_rate_amount = v;
    }

    pub fn get_adj5_rate_amount(&self) -> f64 {
        self.adj5_rate_amount
    }

    // double adj6_rate = 16;

    pub fn clear_adj6_rate(&mut self) {
        self.adj6_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj6_rate(&mut self, v: f64) {
        self.adj6_rate = v;
    }

    pub fn get_adj6_rate(&self) -> f64 {
        self.adj6_rate
    }

    // double adj6_rate_amount = 17;

    pub fn clear_adj6_rate_amount(&mut self) {
        self.adj6_rate_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj6_rate_amount(&mut self, v: f64) {
        self.adj6_rate_amount = v;
    }

    pub fn get_adj6_rate_amount(&self) -> f64 {
        self.adj6_rate_amount
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.base_rate = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.base_rate_amount = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj1_rate = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj1_rate_amount = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj2_rate = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj2_rate_amount = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj3_rate = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj3_rate_amount = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj4_rate = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj4_rate_amount = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj5_rate = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj5_rate_amount = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj6_rate = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj6_rate_amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.base_rate != 0. {
            my_size += 9;
        }
        if self.base_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj1_rate != 0. {
            my_size += 9;
        }
        if self.adj1_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj2_rate != 0. {
            my_size += 9;
        }
        if self.adj2_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj3_rate != 0. {
            my_size += 9;
        }
        if self.adj3_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj4_rate != 0. {
            my_size += 9;
        }
        if self.adj4_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj5_rate != 0. {
            my_size += 9;
        }
        if self.adj5_rate_amount != 0. {
            my_size += 9;
        }
        if self.adj6_rate != 0. {
            my_size += 10;
        }
        if self.adj6_rate_amount != 0. {
            my_size += 10;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        if self.base_rate != 0. {
            os.write_double(4, self.base_rate)?;
        }
        if self.base_rate_amount != 0. {
            os.write_double(5, self.base_rate_amount)?;
        }
        if self.adj1_rate != 0. {
            os.write_double(6, self.adj1_rate)?;
        }
        if self.adj1_rate_amount != 0. {
            os.write_double(7, self.adj1_rate_amount)?;
        }
        if self.adj2_rate != 0. {
            os.write_double(8, self.adj2_rate)?;
        }
        if self.adj2_rate_amount != 0. {
            os.write_double(9, self.adj2_rate_amount)?;
        }
        if self.adj3_rate != 0. {
            os.write_double(10, self.adj3_rate)?;
        }
        if self.adj3_rate_amount != 0. {
            os.write_double(11, self.adj3_rate_amount)?;
        }
        if self.adj4_rate != 0. {
            os.write_double(12, self.adj4_rate)?;
        }
        if self.adj4_rate_amount != 0. {
            os.write_double(13, self.adj4_rate_amount)?;
        }
        if self.adj5_rate != 0. {
            os.write_double(14, self.adj5_rate)?;
        }
        if self.adj5_rate_amount != 0. {
            os.write_double(15, self.adj5_rate_amount)?;
        }
        if self.adj6_rate != 0. {
            os.write_double(16, self.adj6_rate)?;
        }
        if self.adj6_rate_amount != 0. {
            os.write_double(17, self.adj6_rate_amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_amount",
                    |m: &Cashflow| { &m.interest_amount },
                    |m: &mut Cashflow| { &mut m.interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal_amount",
                    |m: &Cashflow| { &m.principal_amount },
                    |m: &mut Cashflow| { &mut m.principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "base_rate",
                    |m: &Cashflow| { &m.base_rate },
                    |m: &mut Cashflow| { &mut m.base_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "base_rate_amount",
                    |m: &Cashflow| { &m.base_rate_amount },
                    |m: &mut Cashflow| { &mut m.base_rate_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj1_rate",
                    |m: &Cashflow| { &m.adj1_rate },
                    |m: &mut Cashflow| { &mut m.adj1_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj1_rate_amount",
                    |m: &Cashflow| { &m.adj1_rate_amount },
                    |m: &mut Cashflow| { &mut m.adj1_rate_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj2_rate",
                    |m: &Cashflow| { &m.adj2_rate },
                    |m: &mut Cashflow| { &mut m.adj2_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj2_rate_amount",
                    |m: &Cashflow| { &m.adj2_rate_amount },
                    |m: &mut Cashflow| { &mut m.adj2_rate_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj3_rate",
                    |m: &Cashflow| { &m.adj3_rate },
                    |m: &mut Cashflow| { &mut m.adj3_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj3_rate_amount",
                    |m: &Cashflow| { &m.adj3_rate_amount },
                    |m: &mut Cashflow| { &mut m.adj3_rate_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj4_rate",
                    |m: &Cashflow| { &m.adj4_rate },
                    |m: &mut Cashflow| { &mut m.adj4_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj4_rate_amount",
                    |m: &Cashflow| { &m.adj4_rate_amount },
                    |m: &mut Cashflow| { &mut m.adj4_rate_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj5_rate",
                    |m: &Cashflow| { &m.adj5_rate },
                    |m: &mut Cashflow| { &mut m.adj5_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj5_rate_amount",
                    |m: &Cashflow| { &m.adj5_rate_amount },
                    |m: &mut Cashflow| { &mut m.adj5_rate_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj6_rate",
                    |m: &Cashflow| { &m.adj6_rate },
                    |m: &mut Cashflow| { &mut m.adj6_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj6_rate_amount",
                    |m: &Cashflow| { &m.adj6_rate_amount },
                    |m: &mut Cashflow| { &mut m.adj6_rate_amount },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_interest_amount();
        self.clear_principal_amount();
        self.clear_date();
        self.clear_base_rate();
        self.clear_base_rate_amount();
        self.clear_adj1_rate();
        self.clear_adj1_rate_amount();
        self.clear_adj2_rate();
        self.clear_adj2_rate_amount();
        self.clear_adj3_rate();
        self.clear_adj3_rate_amount();
        self.clear_adj4_rate();
        self.clear_adj4_rate_amount();
        self.clear_adj5_rate();
        self.clear_adj5_rate_amount();
        self.clear_adj6_rate();
        self.clear_adj6_rate_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub deal_id: ::std::string::String,
    pub branch: ::std::string::String,
    pub instrument_name: ::std::string::String,
    pub lending_borrowing_type: ::std::string::String,
    pub typology: ::std::string::String,
    pub usage: ::std::string::String,
    pub sub_type_borrowing_lending: ::std::string::String,
    pub counterparty: ::std::string::String,
    pub creation_date: i64,
    pub val_date: i64,
    pub deal_date: i64,
    pub currency: ::std::string::String,
    pub current_deal_amount: f64,
    pub current_conversion_rate_lcy: f64,
    pub current_deal_amount_lcy: f64,
    pub roi: f64,
    pub tenor_days: i64,
    pub maturity_dt: i64,
    pub principal_amount: f64,
    pub interest_amount: f64,
    pub cf_type: ::std::string::String,
    pub flow_type: ::std::string::String,
    pub maturity_amount: f64,
    pub dealer_name: ::std::string::String,
    pub ndsreferenceno: ::std::string::String,
    pub next_fixing_date: i64,
    pub residual_tenor: i64,
    pub next_put_date: i64,
    pub next_call_date: i64,
    pub next_interest_payout_date: i64,
    pub interest_payout_tenor: i64,
    pub aip_air: f64,
    pub downgrade_clause: ::std::string::String,
    pub average_monthly_balance: ::std::string::String,
    pub glcode: ::std::string::String,
    pub counterparty_category_1: ::std::string::String,
    pub counterparty_category_2: ::std::string::String,
    pub counterparty_category_3: ::std::string::String,
    pub counterparty_category_4: ::std::string::String,
    pub interest_payable_receivable_till_the_next_payout_date: ::std::string::String,
    pub bucket_days: i64,
    pub system_gl: ::std::string::String,
    pub alm_concat: ::std::string::String,
    pub division: ::std::string::String,
    pub alm_line: ::std::string::String,
    pub ia_line: ::std::string::String,
    pub total_interest_amount: f64,
    pub total_principal_amount: f64,
    pub Method: i32,
    pub BaseCurve: i32,
    pub ftp_runid: i64,
    pub from_date: i32,
    pub to_date: i32,
    pub total_balance: f64,
    pub total_interest_ftp: f64,
    pub total_ftp: f64,
    pub FTP_Rate: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string deal_id = 1;

    pub fn clear_deal_id(&mut self) {
        self.deal_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_id(&mut self, v: ::std::string::String) {
        self.deal_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_id(&mut self) -> &mut ::std::string::String {
        &mut self.deal_id
    }

    // Take field
    pub fn take_deal_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_id, ::std::string::String::new())
    }

    pub fn get_deal_id(&self) -> &str {
        &self.deal_id
    }

    // string branch = 2;

    pub fn clear_branch(&mut self) {
        self.branch.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch(&mut self, v: ::std::string::String) {
        self.branch = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch(&mut self) -> &mut ::std::string::String {
        &mut self.branch
    }

    // Take field
    pub fn take_branch(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch, ::std::string::String::new())
    }

    pub fn get_branch(&self) -> &str {
        &self.branch
    }

    // string instrument_name = 3;

    pub fn clear_instrument_name(&mut self) {
        self.instrument_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_instrument_name(&mut self, v: ::std::string::String) {
        self.instrument_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instrument_name(&mut self) -> &mut ::std::string::String {
        &mut self.instrument_name
    }

    // Take field
    pub fn take_instrument_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instrument_name, ::std::string::String::new())
    }

    pub fn get_instrument_name(&self) -> &str {
        &self.instrument_name
    }

    // string lending_borrowing_type = 4;

    pub fn clear_lending_borrowing_type(&mut self) {
        self.lending_borrowing_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_lending_borrowing_type(&mut self, v: ::std::string::String) {
        self.lending_borrowing_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lending_borrowing_type(&mut self) -> &mut ::std::string::String {
        &mut self.lending_borrowing_type
    }

    // Take field
    pub fn take_lending_borrowing_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lending_borrowing_type, ::std::string::String::new())
    }

    pub fn get_lending_borrowing_type(&self) -> &str {
        &self.lending_borrowing_type
    }

    // string typology = 5;

    pub fn clear_typology(&mut self) {
        self.typology.clear();
    }

    // Param is passed by value, moved
    pub fn set_typology(&mut self, v: ::std::string::String) {
        self.typology = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_typology(&mut self) -> &mut ::std::string::String {
        &mut self.typology
    }

    // Take field
    pub fn take_typology(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.typology, ::std::string::String::new())
    }

    pub fn get_typology(&self) -> &str {
        &self.typology
    }

    // string usage = 6;

    pub fn clear_usage(&mut self) {
        self.usage.clear();
    }

    // Param is passed by value, moved
    pub fn set_usage(&mut self, v: ::std::string::String) {
        self.usage = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_usage(&mut self) -> &mut ::std::string::String {
        &mut self.usage
    }

    // Take field
    pub fn take_usage(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.usage, ::std::string::String::new())
    }

    pub fn get_usage(&self) -> &str {
        &self.usage
    }

    // string sub_type_borrowing_lending = 7;

    pub fn clear_sub_type_borrowing_lending(&mut self) {
        self.sub_type_borrowing_lending.clear();
    }

    // Param is passed by value, moved
    pub fn set_sub_type_borrowing_lending(&mut self, v: ::std::string::String) {
        self.sub_type_borrowing_lending = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sub_type_borrowing_lending(&mut self) -> &mut ::std::string::String {
        &mut self.sub_type_borrowing_lending
    }

    // Take field
    pub fn take_sub_type_borrowing_lending(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sub_type_borrowing_lending, ::std::string::String::new())
    }

    pub fn get_sub_type_borrowing_lending(&self) -> &str {
        &self.sub_type_borrowing_lending
    }

    // string counterparty = 8;

    pub fn clear_counterparty(&mut self) {
        self.counterparty.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterparty(&mut self, v: ::std::string::String) {
        self.counterparty = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty(&mut self) -> &mut ::std::string::String {
        &mut self.counterparty
    }

    // Take field
    pub fn take_counterparty(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterparty, ::std::string::String::new())
    }

    pub fn get_counterparty(&self) -> &str {
        &self.counterparty
    }

    // int64 creation_date = 9;

    pub fn clear_creation_date(&mut self) {
        self.creation_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_creation_date(&mut self, v: i64) {
        self.creation_date = v;
    }

    pub fn get_creation_date(&self) -> i64 {
        self.creation_date
    }

    // int64 val_date = 10;

    pub fn clear_val_date(&mut self) {
        self.val_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_val_date(&mut self, v: i64) {
        self.val_date = v;
    }

    pub fn get_val_date(&self) -> i64 {
        self.val_date
    }

    // int64 deal_date = 11;

    pub fn clear_deal_date(&mut self) {
        self.deal_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_deal_date(&mut self, v: i64) {
        self.deal_date = v;
    }

    pub fn get_deal_date(&self) -> i64 {
        self.deal_date
    }

    // string currency = 12;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // double current_deal_amount = 13;

    pub fn clear_current_deal_amount(&mut self) {
        self.current_deal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_current_deal_amount(&mut self, v: f64) {
        self.current_deal_amount = v;
    }

    pub fn get_current_deal_amount(&self) -> f64 {
        self.current_deal_amount
    }

    // double current_conversion_rate_lcy = 14;

    pub fn clear_current_conversion_rate_lcy(&mut self) {
        self.current_conversion_rate_lcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_current_conversion_rate_lcy(&mut self, v: f64) {
        self.current_conversion_rate_lcy = v;
    }

    pub fn get_current_conversion_rate_lcy(&self) -> f64 {
        self.current_conversion_rate_lcy
    }

    // double current_deal_amount_lcy = 15;

    pub fn clear_current_deal_amount_lcy(&mut self) {
        self.current_deal_amount_lcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_current_deal_amount_lcy(&mut self, v: f64) {
        self.current_deal_amount_lcy = v;
    }

    pub fn get_current_deal_amount_lcy(&self) -> f64 {
        self.current_deal_amount_lcy
    }

    // double roi = 16;

    pub fn clear_roi(&mut self) {
        self.roi = 0.;
    }

    // Param is passed by value, moved
    pub fn set_roi(&mut self, v: f64) {
        self.roi = v;
    }

    pub fn get_roi(&self) -> f64 {
        self.roi
    }

    // int64 tenor_days = 17;

    pub fn clear_tenor_days(&mut self) {
        self.tenor_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_tenor_days(&mut self, v: i64) {
        self.tenor_days = v;
    }

    pub fn get_tenor_days(&self) -> i64 {
        self.tenor_days
    }

    // int64 maturity_dt = 18;

    pub fn clear_maturity_dt(&mut self) {
        self.maturity_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_dt(&mut self, v: i64) {
        self.maturity_dt = v;
    }

    pub fn get_maturity_dt(&self) -> i64 {
        self.maturity_dt
    }

    // double principal_amount = 19;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // double interest_amount = 20;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // string cf_type = 21;

    pub fn clear_cf_type(&mut self) {
        self.cf_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_cf_type(&mut self, v: ::std::string::String) {
        self.cf_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf_type(&mut self) -> &mut ::std::string::String {
        &mut self.cf_type
    }

    // Take field
    pub fn take_cf_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cf_type, ::std::string::String::new())
    }

    pub fn get_cf_type(&self) -> &str {
        &self.cf_type
    }

    // string flow_type = 22;

    pub fn clear_flow_type(&mut self) {
        self.flow_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_flow_type(&mut self, v: ::std::string::String) {
        self.flow_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flow_type(&mut self) -> &mut ::std::string::String {
        &mut self.flow_type
    }

    // Take field
    pub fn take_flow_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flow_type, ::std::string::String::new())
    }

    pub fn get_flow_type(&self) -> &str {
        &self.flow_type
    }

    // double maturity_amount = 23;

    pub fn clear_maturity_amount(&mut self) {
        self.maturity_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_maturity_amount(&mut self, v: f64) {
        self.maturity_amount = v;
    }

    pub fn get_maturity_amount(&self) -> f64 {
        self.maturity_amount
    }

    // string dealer_name = 24;

    pub fn clear_dealer_name(&mut self) {
        self.dealer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_dealer_name(&mut self, v: ::std::string::String) {
        self.dealer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dealer_name(&mut self) -> &mut ::std::string::String {
        &mut self.dealer_name
    }

    // Take field
    pub fn take_dealer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dealer_name, ::std::string::String::new())
    }

    pub fn get_dealer_name(&self) -> &str {
        &self.dealer_name
    }

    // string ndsreferenceno = 25;

    pub fn clear_ndsreferenceno(&mut self) {
        self.ndsreferenceno.clear();
    }

    // Param is passed by value, moved
    pub fn set_ndsreferenceno(&mut self, v: ::std::string::String) {
        self.ndsreferenceno = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ndsreferenceno(&mut self) -> &mut ::std::string::String {
        &mut self.ndsreferenceno
    }

    // Take field
    pub fn take_ndsreferenceno(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ndsreferenceno, ::std::string::String::new())
    }

    pub fn get_ndsreferenceno(&self) -> &str {
        &self.ndsreferenceno
    }

    // int64 next_fixing_date = 26;

    pub fn clear_next_fixing_date(&mut self) {
        self.next_fixing_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_fixing_date(&mut self, v: i64) {
        self.next_fixing_date = v;
    }

    pub fn get_next_fixing_date(&self) -> i64 {
        self.next_fixing_date
    }

    // int64 residual_tenor = 27;

    pub fn clear_residual_tenor(&mut self) {
        self.residual_tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_residual_tenor(&mut self, v: i64) {
        self.residual_tenor = v;
    }

    pub fn get_residual_tenor(&self) -> i64 {
        self.residual_tenor
    }

    // int64 next_put_date = 28;

    pub fn clear_next_put_date(&mut self) {
        self.next_put_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_put_date(&mut self, v: i64) {
        self.next_put_date = v;
    }

    pub fn get_next_put_date(&self) -> i64 {
        self.next_put_date
    }

    // int64 next_call_date = 29;

    pub fn clear_next_call_date(&mut self) {
        self.next_call_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_call_date(&mut self, v: i64) {
        self.next_call_date = v;
    }

    pub fn get_next_call_date(&self) -> i64 {
        self.next_call_date
    }

    // int64 next_interest_payout_date = 30;

    pub fn clear_next_interest_payout_date(&mut self) {
        self.next_interest_payout_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_interest_payout_date(&mut self, v: i64) {
        self.next_interest_payout_date = v;
    }

    pub fn get_next_interest_payout_date(&self) -> i64 {
        self.next_interest_payout_date
    }

    // int64 interest_payout_tenor = 31;

    pub fn clear_interest_payout_tenor(&mut self) {
        self.interest_payout_tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_interest_payout_tenor(&mut self, v: i64) {
        self.interest_payout_tenor = v;
    }

    pub fn get_interest_payout_tenor(&self) -> i64 {
        self.interest_payout_tenor
    }

    // double aip_air = 32;

    pub fn clear_aip_air(&mut self) {
        self.aip_air = 0.;
    }

    // Param is passed by value, moved
    pub fn set_aip_air(&mut self, v: f64) {
        self.aip_air = v;
    }

    pub fn get_aip_air(&self) -> f64 {
        self.aip_air
    }

    // string downgrade_clause = 33;

    pub fn clear_downgrade_clause(&mut self) {
        self.downgrade_clause.clear();
    }

    // Param is passed by value, moved
    pub fn set_downgrade_clause(&mut self, v: ::std::string::String) {
        self.downgrade_clause = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_downgrade_clause(&mut self) -> &mut ::std::string::String {
        &mut self.downgrade_clause
    }

    // Take field
    pub fn take_downgrade_clause(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.downgrade_clause, ::std::string::String::new())
    }

    pub fn get_downgrade_clause(&self) -> &str {
        &self.downgrade_clause
    }

    // string average_monthly_balance = 34;

    pub fn clear_average_monthly_balance(&mut self) {
        self.average_monthly_balance.clear();
    }

    // Param is passed by value, moved
    pub fn set_average_monthly_balance(&mut self, v: ::std::string::String) {
        self.average_monthly_balance = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_average_monthly_balance(&mut self) -> &mut ::std::string::String {
        &mut self.average_monthly_balance
    }

    // Take field
    pub fn take_average_monthly_balance(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.average_monthly_balance, ::std::string::String::new())
    }

    pub fn get_average_monthly_balance(&self) -> &str {
        &self.average_monthly_balance
    }

    // string glcode = 35;

    pub fn clear_glcode(&mut self) {
        self.glcode.clear();
    }

    // Param is passed by value, moved
    pub fn set_glcode(&mut self, v: ::std::string::String) {
        self.glcode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_glcode(&mut self) -> &mut ::std::string::String {
        &mut self.glcode
    }

    // Take field
    pub fn take_glcode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.glcode, ::std::string::String::new())
    }

    pub fn get_glcode(&self) -> &str {
        &self.glcode
    }

    // string counterparty_category_1 = 36;

    pub fn clear_counterparty_category_1(&mut self) {
        self.counterparty_category_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterparty_category_1(&mut self, v: ::std::string::String) {
        self.counterparty_category_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty_category_1(&mut self) -> &mut ::std::string::String {
        &mut self.counterparty_category_1
    }

    // Take field
    pub fn take_counterparty_category_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterparty_category_1, ::std::string::String::new())
    }

    pub fn get_counterparty_category_1(&self) -> &str {
        &self.counterparty_category_1
    }

    // string counterparty_category_2 = 37;

    pub fn clear_counterparty_category_2(&mut self) {
        self.counterparty_category_2.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterparty_category_2(&mut self, v: ::std::string::String) {
        self.counterparty_category_2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty_category_2(&mut self) -> &mut ::std::string::String {
        &mut self.counterparty_category_2
    }

    // Take field
    pub fn take_counterparty_category_2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterparty_category_2, ::std::string::String::new())
    }

    pub fn get_counterparty_category_2(&self) -> &str {
        &self.counterparty_category_2
    }

    // string counterparty_category_3 = 38;

    pub fn clear_counterparty_category_3(&mut self) {
        self.counterparty_category_3.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterparty_category_3(&mut self, v: ::std::string::String) {
        self.counterparty_category_3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty_category_3(&mut self) -> &mut ::std::string::String {
        &mut self.counterparty_category_3
    }

    // Take field
    pub fn take_counterparty_category_3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterparty_category_3, ::std::string::String::new())
    }

    pub fn get_counterparty_category_3(&self) -> &str {
        &self.counterparty_category_3
    }

    // string counterparty_category_4 = 39;

    pub fn clear_counterparty_category_4(&mut self) {
        self.counterparty_category_4.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterparty_category_4(&mut self, v: ::std::string::String) {
        self.counterparty_category_4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty_category_4(&mut self) -> &mut ::std::string::String {
        &mut self.counterparty_category_4
    }

    // Take field
    pub fn take_counterparty_category_4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterparty_category_4, ::std::string::String::new())
    }

    pub fn get_counterparty_category_4(&self) -> &str {
        &self.counterparty_category_4
    }

    // string interest_payable_receivable_till_the_next_payout_date = 40;

    pub fn clear_interest_payable_receivable_till_the_next_payout_date(&mut self) {
        self.interest_payable_receivable_till_the_next_payout_date.clear();
    }

    // Param is passed by value, moved
    pub fn set_interest_payable_receivable_till_the_next_payout_date(&mut self, v: ::std::string::String) {
        self.interest_payable_receivable_till_the_next_payout_date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interest_payable_receivable_till_the_next_payout_date(&mut self) -> &mut ::std::string::String {
        &mut self.interest_payable_receivable_till_the_next_payout_date
    }

    // Take field
    pub fn take_interest_payable_receivable_till_the_next_payout_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interest_payable_receivable_till_the_next_payout_date, ::std::string::String::new())
    }

    pub fn get_interest_payable_receivable_till_the_next_payout_date(&self) -> &str {
        &self.interest_payable_receivable_till_the_next_payout_date
    }

    // int64 bucket_days = 41;

    pub fn clear_bucket_days(&mut self) {
        self.bucket_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_bucket_days(&mut self, v: i64) {
        self.bucket_days = v;
    }

    pub fn get_bucket_days(&self) -> i64 {
        self.bucket_days
    }

    // string system_gl = 42;

    pub fn clear_system_gl(&mut self) {
        self.system_gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_system_gl(&mut self, v: ::std::string::String) {
        self.system_gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_system_gl(&mut self) -> &mut ::std::string::String {
        &mut self.system_gl
    }

    // Take field
    pub fn take_system_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.system_gl, ::std::string::String::new())
    }

    pub fn get_system_gl(&self) -> &str {
        &self.system_gl
    }

    // string alm_concat = 43;

    pub fn clear_alm_concat(&mut self) {
        self.alm_concat.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_concat(&mut self, v: ::std::string::String) {
        self.alm_concat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_concat(&mut self) -> &mut ::std::string::String {
        &mut self.alm_concat
    }

    // Take field
    pub fn take_alm_concat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_concat, ::std::string::String::new())
    }

    pub fn get_alm_concat(&self) -> &str {
        &self.alm_concat
    }

    // string division = 44;

    pub fn clear_division(&mut self) {
        self.division.clear();
    }

    // Param is passed by value, moved
    pub fn set_division(&mut self, v: ::std::string::String) {
        self.division = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_division(&mut self) -> &mut ::std::string::String {
        &mut self.division
    }

    // Take field
    pub fn take_division(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.division, ::std::string::String::new())
    }

    pub fn get_division(&self) -> &str {
        &self.division
    }

    // string alm_line = 45;

    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }

    // string ia_line = 46;

    pub fn clear_ia_line(&mut self) {
        self.ia_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_ia_line(&mut self, v: ::std::string::String) {
        self.ia_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ia_line(&mut self) -> &mut ::std::string::String {
        &mut self.ia_line
    }

    // Take field
    pub fn take_ia_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ia_line, ::std::string::String::new())
    }

    pub fn get_ia_line(&self) -> &str {
        &self.ia_line
    }

    // double total_interest_amount = 47;

    pub fn clear_total_interest_amount(&mut self) {
        self.total_interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_amount(&mut self, v: f64) {
        self.total_interest_amount = v;
    }

    pub fn get_total_interest_amount(&self) -> f64 {
        self.total_interest_amount
    }

    // double total_principal_amount = 48;

    pub fn clear_total_principal_amount(&mut self) {
        self.total_principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_principal_amount(&mut self, v: f64) {
        self.total_principal_amount = v;
    }

    pub fn get_total_principal_amount(&self) -> f64 {
        self.total_principal_amount
    }

    // int32 Method = 49;

    pub fn clear_Method(&mut self) {
        self.Method = 0;
    }

    // Param is passed by value, moved
    pub fn set_Method(&mut self, v: i32) {
        self.Method = v;
    }

    pub fn get_Method(&self) -> i32 {
        self.Method
    }

    // int32 BaseCurve = 50;

    pub fn clear_BaseCurve(&mut self) {
        self.BaseCurve = 0;
    }

    // Param is passed by value, moved
    pub fn set_BaseCurve(&mut self, v: i32) {
        self.BaseCurve = v;
    }

    pub fn get_BaseCurve(&self) -> i32 {
        self.BaseCurve
    }

    // int64 ftp_runid = 51;

    pub fn clear_ftp_runid(&mut self) {
        self.ftp_runid = 0;
    }

    // Param is passed by value, moved
    pub fn set_ftp_runid(&mut self, v: i64) {
        self.ftp_runid = v;
    }

    pub fn get_ftp_runid(&self) -> i64 {
        self.ftp_runid
    }

    // int32 from_date = 52;

    pub fn clear_from_date(&mut self) {
        self.from_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_from_date(&mut self, v: i32) {
        self.from_date = v;
    }

    pub fn get_from_date(&self) -> i32 {
        self.from_date
    }

    // int32 to_date = 53;

    pub fn clear_to_date(&mut self) {
        self.to_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_to_date(&mut self, v: i32) {
        self.to_date = v;
    }

    pub fn get_to_date(&self) -> i32 {
        self.to_date
    }

    // double total_balance = 54;

    pub fn clear_total_balance(&mut self) {
        self.total_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_balance(&mut self, v: f64) {
        self.total_balance = v;
    }

    pub fn get_total_balance(&self) -> f64 {
        self.total_balance
    }

    // double total_interest_ftp = 55;

    pub fn clear_total_interest_ftp(&mut self) {
        self.total_interest_ftp = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_ftp(&mut self, v: f64) {
        self.total_interest_ftp = v;
    }

    pub fn get_total_interest_ftp(&self) -> f64 {
        self.total_interest_ftp
    }

    // double total_ftp = 56;

    pub fn clear_total_ftp(&mut self) {
        self.total_ftp = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_ftp(&mut self, v: f64) {
        self.total_ftp = v;
    }

    pub fn get_total_ftp(&self) -> f64 {
        self.total_ftp
    }

    // double FTP_Rate = 57;

    pub fn clear_FTP_Rate(&mut self) {
        self.FTP_Rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_FTP_Rate(&mut self, v: f64) {
        self.FTP_Rate = v;
    }

    pub fn get_FTP_Rate(&self) -> f64 {
        self.FTP_Rate
    }

    // repeated .Cashflow cashflows = 58;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instrument_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lending_borrowing_type)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.typology)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.usage)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sub_type_borrowing_lending)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterparty)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.creation_date = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.val_date = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deal_date = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.current_deal_amount = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.current_conversion_rate_lcy = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.current_deal_amount_lcy = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.roi = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tenor_days = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_dt = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cf_type)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flow_type)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.maturity_amount = tmp;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dealer_name)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ndsreferenceno)?;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_fixing_date = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.residual_tenor = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_put_date = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_call_date = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_interest_payout_date = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.interest_payout_tenor = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.aip_air = tmp;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.downgrade_clause)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.average_monthly_balance)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.glcode)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterparty_category_1)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterparty_category_2)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterparty_category_3)?;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterparty_category_4)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interest_payable_receivable_till_the_next_payout_date)?;
                },
                41 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.bucket_days = tmp;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.system_gl)?;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alm_concat)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.division)?;
                },
                45 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alm_line)?;
                },
                46 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ia_line)?;
                },
                47 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_amount = tmp;
                },
                48 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_principal_amount = tmp;
                },
                49 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.Method = tmp;
                },
                50 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.BaseCurve = tmp;
                },
                51 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ftp_runid = tmp;
                },
                52 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.from_date = tmp;
                },
                53 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.to_date = tmp;
                },
                54 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_balance = tmp;
                },
                55 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_ftp = tmp;
                },
                56 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_ftp = tmp;
                },
                57 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.FTP_Rate = tmp;
                },
                58 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.deal_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.deal_id);
        }
        if !self.branch.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.branch);
        }
        if !self.instrument_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.instrument_name);
        }
        if !self.lending_borrowing_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.lending_borrowing_type);
        }
        if !self.typology.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.typology);
        }
        if !self.usage.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.usage);
        }
        if !self.sub_type_borrowing_lending.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.sub_type_borrowing_lending);
        }
        if !self.counterparty.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.counterparty);
        }
        if self.creation_date != 0 {
            my_size += ::protobuf::rt::value_size(9, self.creation_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.val_date != 0 {
            my_size += ::protobuf::rt::value_size(10, self.val_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.deal_date != 0 {
            my_size += ::protobuf::rt::value_size(11, self.deal_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.currency);
        }
        if self.current_deal_amount != 0. {
            my_size += 9;
        }
        if self.current_conversion_rate_lcy != 0. {
            my_size += 9;
        }
        if self.current_deal_amount_lcy != 0. {
            my_size += 9;
        }
        if self.roi != 0. {
            my_size += 10;
        }
        if self.tenor_days != 0 {
            my_size += ::protobuf::rt::value_size(17, self.tenor_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_dt != 0 {
            my_size += ::protobuf::rt::value_size(18, self.maturity_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.principal_amount != 0. {
            my_size += 10;
        }
        if self.interest_amount != 0. {
            my_size += 10;
        }
        if !self.cf_type.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.cf_type);
        }
        if !self.flow_type.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.flow_type);
        }
        if self.maturity_amount != 0. {
            my_size += 10;
        }
        if !self.dealer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.dealer_name);
        }
        if !self.ndsreferenceno.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.ndsreferenceno);
        }
        if self.next_fixing_date != 0 {
            my_size += ::protobuf::rt::value_size(26, self.next_fixing_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.residual_tenor != 0 {
            my_size += ::protobuf::rt::value_size(27, self.residual_tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_put_date != 0 {
            my_size += ::protobuf::rt::value_size(28, self.next_put_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_call_date != 0 {
            my_size += ::protobuf::rt::value_size(29, self.next_call_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_interest_payout_date != 0 {
            my_size += ::protobuf::rt::value_size(30, self.next_interest_payout_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.interest_payout_tenor != 0 {
            my_size += ::protobuf::rt::value_size(31, self.interest_payout_tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.aip_air != 0. {
            my_size += 10;
        }
        if !self.downgrade_clause.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.downgrade_clause);
        }
        if !self.average_monthly_balance.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.average_monthly_balance);
        }
        if !self.glcode.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.glcode);
        }
        if !self.counterparty_category_1.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.counterparty_category_1);
        }
        if !self.counterparty_category_2.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.counterparty_category_2);
        }
        if !self.counterparty_category_3.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.counterparty_category_3);
        }
        if !self.counterparty_category_4.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.counterparty_category_4);
        }
        if !self.interest_payable_receivable_till_the_next_payout_date.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.interest_payable_receivable_till_the_next_payout_date);
        }
        if self.bucket_days != 0 {
            my_size += ::protobuf::rt::value_size(41, self.bucket_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.system_gl.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.system_gl);
        }
        if !self.alm_concat.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.alm_concat);
        }
        if !self.division.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.division);
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(45, &self.alm_line);
        }
        if !self.ia_line.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.ia_line);
        }
        if self.total_interest_amount != 0. {
            my_size += 10;
        }
        if self.total_principal_amount != 0. {
            my_size += 10;
        }
        if self.Method != 0 {
            my_size += ::protobuf::rt::value_size(49, self.Method, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.BaseCurve != 0 {
            my_size += ::protobuf::rt::value_size(50, self.BaseCurve, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ftp_runid != 0 {
            my_size += ::protobuf::rt::value_size(51, self.ftp_runid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.from_date != 0 {
            my_size += ::protobuf::rt::value_size(52, self.from_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.to_date != 0 {
            my_size += ::protobuf::rt::value_size(53, self.to_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_balance != 0. {
            my_size += 10;
        }
        if self.total_interest_ftp != 0. {
            my_size += 10;
        }
        if self.total_ftp != 0. {
            my_size += 10;
        }
        if self.FTP_Rate != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.deal_id.is_empty() {
            os.write_string(1, &self.deal_id)?;
        }
        if !self.branch.is_empty() {
            os.write_string(2, &self.branch)?;
        }
        if !self.instrument_name.is_empty() {
            os.write_string(3, &self.instrument_name)?;
        }
        if !self.lending_borrowing_type.is_empty() {
            os.write_string(4, &self.lending_borrowing_type)?;
        }
        if !self.typology.is_empty() {
            os.write_string(5, &self.typology)?;
        }
        if !self.usage.is_empty() {
            os.write_string(6, &self.usage)?;
        }
        if !self.sub_type_borrowing_lending.is_empty() {
            os.write_string(7, &self.sub_type_borrowing_lending)?;
        }
        if !self.counterparty.is_empty() {
            os.write_string(8, &self.counterparty)?;
        }
        if self.creation_date != 0 {
            os.write_int64(9, self.creation_date)?;
        }
        if self.val_date != 0 {
            os.write_int64(10, self.val_date)?;
        }
        if self.deal_date != 0 {
            os.write_int64(11, self.deal_date)?;
        }
        if !self.currency.is_empty() {
            os.write_string(12, &self.currency)?;
        }
        if self.current_deal_amount != 0. {
            os.write_double(13, self.current_deal_amount)?;
        }
        if self.current_conversion_rate_lcy != 0. {
            os.write_double(14, self.current_conversion_rate_lcy)?;
        }
        if self.current_deal_amount_lcy != 0. {
            os.write_double(15, self.current_deal_amount_lcy)?;
        }
        if self.roi != 0. {
            os.write_double(16, self.roi)?;
        }
        if self.tenor_days != 0 {
            os.write_int64(17, self.tenor_days)?;
        }
        if self.maturity_dt != 0 {
            os.write_int64(18, self.maturity_dt)?;
        }
        if self.principal_amount != 0. {
            os.write_double(19, self.principal_amount)?;
        }
        if self.interest_amount != 0. {
            os.write_double(20, self.interest_amount)?;
        }
        if !self.cf_type.is_empty() {
            os.write_string(21, &self.cf_type)?;
        }
        if !self.flow_type.is_empty() {
            os.write_string(22, &self.flow_type)?;
        }
        if self.maturity_amount != 0. {
            os.write_double(23, self.maturity_amount)?;
        }
        if !self.dealer_name.is_empty() {
            os.write_string(24, &self.dealer_name)?;
        }
        if !self.ndsreferenceno.is_empty() {
            os.write_string(25, &self.ndsreferenceno)?;
        }
        if self.next_fixing_date != 0 {
            os.write_int64(26, self.next_fixing_date)?;
        }
        if self.residual_tenor != 0 {
            os.write_int64(27, self.residual_tenor)?;
        }
        if self.next_put_date != 0 {
            os.write_int64(28, self.next_put_date)?;
        }
        if self.next_call_date != 0 {
            os.write_int64(29, self.next_call_date)?;
        }
        if self.next_interest_payout_date != 0 {
            os.write_int64(30, self.next_interest_payout_date)?;
        }
        if self.interest_payout_tenor != 0 {
            os.write_int64(31, self.interest_payout_tenor)?;
        }
        if self.aip_air != 0. {
            os.write_double(32, self.aip_air)?;
        }
        if !self.downgrade_clause.is_empty() {
            os.write_string(33, &self.downgrade_clause)?;
        }
        if !self.average_monthly_balance.is_empty() {
            os.write_string(34, &self.average_monthly_balance)?;
        }
        if !self.glcode.is_empty() {
            os.write_string(35, &self.glcode)?;
        }
        if !self.counterparty_category_1.is_empty() {
            os.write_string(36, &self.counterparty_category_1)?;
        }
        if !self.counterparty_category_2.is_empty() {
            os.write_string(37, &self.counterparty_category_2)?;
        }
        if !self.counterparty_category_3.is_empty() {
            os.write_string(38, &self.counterparty_category_3)?;
        }
        if !self.counterparty_category_4.is_empty() {
            os.write_string(39, &self.counterparty_category_4)?;
        }
        if !self.interest_payable_receivable_till_the_next_payout_date.is_empty() {
            os.write_string(40, &self.interest_payable_receivable_till_the_next_payout_date)?;
        }
        if self.bucket_days != 0 {
            os.write_int64(41, self.bucket_days)?;
        }
        if !self.system_gl.is_empty() {
            os.write_string(42, &self.system_gl)?;
        }
        if !self.alm_concat.is_empty() {
            os.write_string(43, &self.alm_concat)?;
        }
        if !self.division.is_empty() {
            os.write_string(44, &self.division)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(45, &self.alm_line)?;
        }
        if !self.ia_line.is_empty() {
            os.write_string(46, &self.ia_line)?;
        }
        if self.total_interest_amount != 0. {
            os.write_double(47, self.total_interest_amount)?;
        }
        if self.total_principal_amount != 0. {
            os.write_double(48, self.total_principal_amount)?;
        }
        if self.Method != 0 {
            os.write_int32(49, self.Method)?;
        }
        if self.BaseCurve != 0 {
            os.write_int32(50, self.BaseCurve)?;
        }
        if self.ftp_runid != 0 {
            os.write_int64(51, self.ftp_runid)?;
        }
        if self.from_date != 0 {
            os.write_int32(52, self.from_date)?;
        }
        if self.to_date != 0 {
            os.write_int32(53, self.to_date)?;
        }
        if self.total_balance != 0. {
            os.write_double(54, self.total_balance)?;
        }
        if self.total_interest_ftp != 0. {
            os.write_double(55, self.total_interest_ftp)?;
        }
        if self.total_ftp != 0. {
            os.write_double(56, self.total_ftp)?;
        }
        if self.FTP_Rate != 0. {
            os.write_double(57, self.FTP_Rate)?;
        }
        for v in &self.cashflows {
            os.write_tag(58, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_id",
                    |m: &AccountWithCashflows| { &m.deal_id },
                    |m: &mut AccountWithCashflows| { &mut m.deal_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "branch",
                    |m: &AccountWithCashflows| { &m.branch },
                    |m: &mut AccountWithCashflows| { &mut m.branch },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "instrument_name",
                    |m: &AccountWithCashflows| { &m.instrument_name },
                    |m: &mut AccountWithCashflows| { &mut m.instrument_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "lending_borrowing_type",
                    |m: &AccountWithCashflows| { &m.lending_borrowing_type },
                    |m: &mut AccountWithCashflows| { &mut m.lending_borrowing_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "typology",
                    |m: &AccountWithCashflows| { &m.typology },
                    |m: &mut AccountWithCashflows| { &mut m.typology },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "usage",
                    |m: &AccountWithCashflows| { &m.usage },
                    |m: &mut AccountWithCashflows| { &mut m.usage },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sub_type_borrowing_lending",
                    |m: &AccountWithCashflows| { &m.sub_type_borrowing_lending },
                    |m: &mut AccountWithCashflows| { &mut m.sub_type_borrowing_lending },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counterparty",
                    |m: &AccountWithCashflows| { &m.counterparty },
                    |m: &mut AccountWithCashflows| { &mut m.counterparty },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "creation_date",
                    |m: &AccountWithCashflows| { &m.creation_date },
                    |m: &mut AccountWithCashflows| { &mut m.creation_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "val_date",
                    |m: &AccountWithCashflows| { &m.val_date },
                    |m: &mut AccountWithCashflows| { &mut m.val_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "deal_date",
                    |m: &AccountWithCashflows| { &m.deal_date },
                    |m: &mut AccountWithCashflows| { &mut m.deal_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &AccountWithCashflows| { &m.currency },
                    |m: &mut AccountWithCashflows| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "current_deal_amount",
                    |m: &AccountWithCashflows| { &m.current_deal_amount },
                    |m: &mut AccountWithCashflows| { &mut m.current_deal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "current_conversion_rate_lcy",
                    |m: &AccountWithCashflows| { &m.current_conversion_rate_lcy },
                    |m: &mut AccountWithCashflows| { &mut m.current_conversion_rate_lcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "current_deal_amount_lcy",
                    |m: &AccountWithCashflows| { &m.current_deal_amount_lcy },
                    |m: &mut AccountWithCashflows| { &mut m.current_deal_amount_lcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "roi",
                    |m: &AccountWithCashflows| { &m.roi },
                    |m: &mut AccountWithCashflows| { &mut m.roi },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tenor_days",
                    |m: &AccountWithCashflows| { &m.tenor_days },
                    |m: &mut AccountWithCashflows| { &mut m.tenor_days },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "maturity_dt",
                    |m: &AccountWithCashflows| { &m.maturity_dt },
                    |m: &mut AccountWithCashflows| { &mut m.maturity_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal_amount",
                    |m: &AccountWithCashflows| { &m.principal_amount },
                    |m: &mut AccountWithCashflows| { &mut m.principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_amount",
                    |m: &AccountWithCashflows| { &m.interest_amount },
                    |m: &mut AccountWithCashflows| { &mut m.interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cf_type",
                    |m: &AccountWithCashflows| { &m.cf_type },
                    |m: &mut AccountWithCashflows| { &mut m.cf_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "flow_type",
                    |m: &AccountWithCashflows| { &m.flow_type },
                    |m: &mut AccountWithCashflows| { &mut m.flow_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "maturity_amount",
                    |m: &AccountWithCashflows| { &m.maturity_amount },
                    |m: &mut AccountWithCashflows| { &mut m.maturity_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dealer_name",
                    |m: &AccountWithCashflows| { &m.dealer_name },
                    |m: &mut AccountWithCashflows| { &mut m.dealer_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ndsreferenceno",
                    |m: &AccountWithCashflows| { &m.ndsreferenceno },
                    |m: &mut AccountWithCashflows| { &mut m.ndsreferenceno },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "next_fixing_date",
                    |m: &AccountWithCashflows| { &m.next_fixing_date },
                    |m: &mut AccountWithCashflows| { &mut m.next_fixing_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "residual_tenor",
                    |m: &AccountWithCashflows| { &m.residual_tenor },
                    |m: &mut AccountWithCashflows| { &mut m.residual_tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "next_put_date",
                    |m: &AccountWithCashflows| { &m.next_put_date },
                    |m: &mut AccountWithCashflows| { &mut m.next_put_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "next_call_date",
                    |m: &AccountWithCashflows| { &m.next_call_date },
                    |m: &mut AccountWithCashflows| { &mut m.next_call_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "next_interest_payout_date",
                    |m: &AccountWithCashflows| { &m.next_interest_payout_date },
                    |m: &mut AccountWithCashflows| { &mut m.next_interest_payout_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "interest_payout_tenor",
                    |m: &AccountWithCashflows| { &m.interest_payout_tenor },
                    |m: &mut AccountWithCashflows| { &mut m.interest_payout_tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "aip_air",
                    |m: &AccountWithCashflows| { &m.aip_air },
                    |m: &mut AccountWithCashflows| { &mut m.aip_air },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "downgrade_clause",
                    |m: &AccountWithCashflows| { &m.downgrade_clause },
                    |m: &mut AccountWithCashflows| { &mut m.downgrade_clause },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "average_monthly_balance",
                    |m: &AccountWithCashflows| { &m.average_monthly_balance },
                    |m: &mut AccountWithCashflows| { &mut m.average_monthly_balance },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "glcode",
                    |m: &AccountWithCashflows| { &m.glcode },
                    |m: &mut AccountWithCashflows| { &mut m.glcode },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counterparty_category_1",
                    |m: &AccountWithCashflows| { &m.counterparty_category_1 },
                    |m: &mut AccountWithCashflows| { &mut m.counterparty_category_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counterparty_category_2",
                    |m: &AccountWithCashflows| { &m.counterparty_category_2 },
                    |m: &mut AccountWithCashflows| { &mut m.counterparty_category_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counterparty_category_3",
                    |m: &AccountWithCashflows| { &m.counterparty_category_3 },
                    |m: &mut AccountWithCashflows| { &mut m.counterparty_category_3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counterparty_category_4",
                    |m: &AccountWithCashflows| { &m.counterparty_category_4 },
                    |m: &mut AccountWithCashflows| { &mut m.counterparty_category_4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "interest_payable_receivable_till_the_next_payout_date",
                    |m: &AccountWithCashflows| { &m.interest_payable_receivable_till_the_next_payout_date },
                    |m: &mut AccountWithCashflows| { &mut m.interest_payable_receivable_till_the_next_payout_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "bucket_days",
                    |m: &AccountWithCashflows| { &m.bucket_days },
                    |m: &mut AccountWithCashflows| { &mut m.bucket_days },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "system_gl",
                    |m: &AccountWithCashflows| { &m.system_gl },
                    |m: &mut AccountWithCashflows| { &mut m.system_gl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "alm_concat",
                    |m: &AccountWithCashflows| { &m.alm_concat },
                    |m: &mut AccountWithCashflows| { &mut m.alm_concat },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "division",
                    |m: &AccountWithCashflows| { &m.division },
                    |m: &mut AccountWithCashflows| { &mut m.division },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "alm_line",
                    |m: &AccountWithCashflows| { &m.alm_line },
                    |m: &mut AccountWithCashflows| { &mut m.alm_line },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ia_line",
                    |m: &AccountWithCashflows| { &m.ia_line },
                    |m: &mut AccountWithCashflows| { &mut m.ia_line },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_interest_amount",
                    |m: &AccountWithCashflows| { &m.total_interest_amount },
                    |m: &mut AccountWithCashflows| { &mut m.total_interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_principal_amount",
                    |m: &AccountWithCashflows| { &m.total_principal_amount },
                    |m: &mut AccountWithCashflows| { &mut m.total_principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "Method",
                    |m: &AccountWithCashflows| { &m.Method },
                    |m: &mut AccountWithCashflows| { &mut m.Method },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "BaseCurve",
                    |m: &AccountWithCashflows| { &m.BaseCurve },
                    |m: &mut AccountWithCashflows| { &mut m.BaseCurve },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "ftp_runid",
                    |m: &AccountWithCashflows| { &m.ftp_runid },
                    |m: &mut AccountWithCashflows| { &mut m.ftp_runid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "from_date",
                    |m: &AccountWithCashflows| { &m.from_date },
                    |m: &mut AccountWithCashflows| { &mut m.from_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "to_date",
                    |m: &AccountWithCashflows| { &m.to_date },
                    |m: &mut AccountWithCashflows| { &mut m.to_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_balance",
                    |m: &AccountWithCashflows| { &m.total_balance },
                    |m: &mut AccountWithCashflows| { &mut m.total_balance },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_interest_ftp",
                    |m: &AccountWithCashflows| { &m.total_interest_ftp },
                    |m: &mut AccountWithCashflows| { &mut m.total_interest_ftp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_ftp",
                    |m: &AccountWithCashflows| { &m.total_ftp },
                    |m: &mut AccountWithCashflows| { &mut m.total_ftp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "FTP_Rate",
                    |m: &AccountWithCashflows| { &m.FTP_Rate },
                    |m: &mut AccountWithCashflows| { &mut m.FTP_Rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_deal_id();
        self.clear_branch();
        self.clear_instrument_name();
        self.clear_lending_borrowing_type();
        self.clear_typology();
        self.clear_usage();
        self.clear_sub_type_borrowing_lending();
        self.clear_counterparty();
        self.clear_creation_date();
        self.clear_val_date();
        self.clear_deal_date();
        self.clear_currency();
        self.clear_current_deal_amount();
        self.clear_current_conversion_rate_lcy();
        self.clear_current_deal_amount_lcy();
        self.clear_roi();
        self.clear_tenor_days();
        self.clear_maturity_dt();
        self.clear_principal_amount();
        self.clear_interest_amount();
        self.clear_cf_type();
        self.clear_flow_type();
        self.clear_maturity_amount();
        self.clear_dealer_name();
        self.clear_ndsreferenceno();
        self.clear_next_fixing_date();
        self.clear_residual_tenor();
        self.clear_next_put_date();
        self.clear_next_call_date();
        self.clear_next_interest_payout_date();
        self.clear_interest_payout_tenor();
        self.clear_aip_air();
        self.clear_downgrade_clause();
        self.clear_average_monthly_balance();
        self.clear_glcode();
        self.clear_counterparty_category_1();
        self.clear_counterparty_category_2();
        self.clear_counterparty_category_3();
        self.clear_counterparty_category_4();
        self.clear_interest_payable_receivable_till_the_next_payout_date();
        self.clear_bucket_days();
        self.clear_system_gl();
        self.clear_alm_concat();
        self.clear_division();
        self.clear_alm_line();
        self.clear_ia_line();
        self.clear_total_interest_amount();
        self.clear_total_principal_amount();
        self.clear_Method();
        self.clear_BaseCurve();
        self.clear_ftp_runid();
        self.clear_from_date();
        self.clear_to_date();
        self.clear_total_balance();
        self.clear_total_interest_ftp();
        self.clear_total_ftp();
        self.clear_FTP_Rate();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$AccountWithCashflows_bills_ftp.proto\"\xe3\x04\n\x08Cashflow\x12'\n\
    \x0finterest_amount\x18\x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10pr\
    incipal_amount\x18\x02\x20\x01(\x01R\x0fprincipalAmount\x12\x12\n\x04dat\
    e\x18\x03\x20\x01(\x03R\x04date\x12\x1b\n\tbase_rate\x18\x04\x20\x01(\
    \x01R\x08baseRate\x12(\n\x10base_rate_amount\x18\x05\x20\x01(\x01R\x0eba\
    seRateAmount\x12\x1b\n\tadj1_rate\x18\x06\x20\x01(\x01R\x08adj1Rate\x12(\
    \n\x10adj1_rate_amount\x18\x07\x20\x01(\x01R\x0eadj1RateAmount\x12\x1b\n\
    \tadj2_rate\x18\x08\x20\x01(\x01R\x08adj2Rate\x12(\n\x10adj2_rate_amount\
    \x18\t\x20\x01(\x01R\x0eadj2RateAmount\x12\x1b\n\tadj3_rate\x18\n\x20\
    \x01(\x01R\x08adj3Rate\x12(\n\x10adj3_rate_amount\x18\x0b\x20\x01(\x01R\
    \x0eadj3RateAmount\x12\x1b\n\tadj4_rate\x18\x0c\x20\x01(\x01R\x08adj4Rat\
    e\x12(\n\x10adj4_rate_amount\x18\r\x20\x01(\x01R\x0eadj4RateAmount\x12\
    \x1b\n\tadj5_rate\x18\x0e\x20\x01(\x01R\x08adj5Rate\x12(\n\x10adj5_rate_\
    amount\x18\x0f\x20\x01(\x01R\x0eadj5RateAmount\x12\x1b\n\tadj6_rate\x18\
    \x10\x20\x01(\x01R\x08adj6Rate\x12(\n\x10adj6_rate_amount\x18\x11\x20\
    \x01(\x01R\x0eadj6RateAmount\"\xe7\x11\n\x14AccountWithCashflows\x12\x17\
    \n\x07deal_id\x18\x01\x20\x01(\tR\x06dealId\x12\x16\n\x06branch\x18\x02\
    \x20\x01(\tR\x06branch\x12'\n\x0finstrument_name\x18\x03\x20\x01(\tR\x0e\
    instrumentName\x124\n\x16lending_borrowing_type\x18\x04\x20\x01(\tR\x14l\
    endingBorrowingType\x12\x1a\n\x08typology\x18\x05\x20\x01(\tR\x08typolog\
    y\x12\x14\n\x05usage\x18\x06\x20\x01(\tR\x05usage\x12;\n\x1asub_type_bor\
    rowing_lending\x18\x07\x20\x01(\tR\x17subTypeBorrowingLending\x12\"\n\
    \x0ccounterparty\x18\x08\x20\x01(\tR\x0ccounterparty\x12#\n\rcreation_da\
    te\x18\t\x20\x01(\x03R\x0ccreationDate\x12\x19\n\x08val_date\x18\n\x20\
    \x01(\x03R\x07valDate\x12\x1b\n\tdeal_date\x18\x0b\x20\x01(\x03R\x08deal\
    Date\x12\x1a\n\x08currency\x18\x0c\x20\x01(\tR\x08currency\x12.\n\x13cur\
    rent_deal_amount\x18\r\x20\x01(\x01R\x11currentDealAmount\x12=\n\x1bcurr\
    ent_conversion_rate_lcy\x18\x0e\x20\x01(\x01R\x18currentConversionRateLc\
    y\x125\n\x17current_deal_amount_lcy\x18\x0f\x20\x01(\x01R\x14currentDeal\
    AmountLcy\x12\x10\n\x03roi\x18\x10\x20\x01(\x01R\x03roi\x12\x1d\n\ntenor\
    _days\x18\x11\x20\x01(\x03R\ttenorDays\x12\x1f\n\x0bmaturity_dt\x18\x12\
    \x20\x01(\x03R\nmaturityDt\x12)\n\x10principal_amount\x18\x13\x20\x01(\
    \x01R\x0fprincipalAmount\x12'\n\x0finterest_amount\x18\x14\x20\x01(\x01R\
    \x0einterestAmount\x12\x17\n\x07cf_type\x18\x15\x20\x01(\tR\x06cfType\
    \x12\x1b\n\tflow_type\x18\x16\x20\x01(\tR\x08flowType\x12'\n\x0fmaturity\
    _amount\x18\x17\x20\x01(\x01R\x0ematurityAmount\x12\x1f\n\x0bdealer_name\
    \x18\x18\x20\x01(\tR\ndealerName\x12&\n\x0endsreferenceno\x18\x19\x20\
    \x01(\tR\x0endsreferenceno\x12(\n\x10next_fixing_date\x18\x1a\x20\x01(\
    \x03R\x0enextFixingDate\x12%\n\x0eresidual_tenor\x18\x1b\x20\x01(\x03R\r\
    residualTenor\x12\"\n\rnext_put_date\x18\x1c\x20\x01(\x03R\x0bnextPutDat\
    e\x12$\n\x0enext_call_date\x18\x1d\x20\x01(\x03R\x0cnextCallDate\x129\n\
    \x19next_interest_payout_date\x18\x1e\x20\x01(\x03R\x16nextInterestPayou\
    tDate\x122\n\x15interest_payout_tenor\x18\x1f\x20\x01(\x03R\x13interestP\
    ayoutTenor\x12\x17\n\x07aip_air\x18\x20\x20\x01(\x01R\x06aipAir\x12)\n\
    \x10downgrade_clause\x18!\x20\x01(\tR\x0fdowngradeClause\x126\n\x17avera\
    ge_monthly_balance\x18\"\x20\x01(\tR\x15averageMonthlyBalance\x12\x16\n\
    \x06glcode\x18#\x20\x01(\tR\x06glcode\x126\n\x17counterparty_category_1\
    \x18$\x20\x01(\tR\x15counterpartyCategory1\x126\n\x17counterparty_catego\
    ry_2\x18%\x20\x01(\tR\x15counterpartyCategory2\x126\n\x17counterparty_ca\
    tegory_3\x18&\x20\x01(\tR\x15counterpartyCategory3\x126\n\x17counterpart\
    y_category_4\x18'\x20\x01(\tR\x15counterpartyCategory4\x12m\n5interest_p\
    ayable_receivable_till_the_next_payout_date\x18(\x20\x01(\tR.interestPay\
    ableReceivableTillTheNextPayoutDate\x12\x1f\n\x0bbucket_days\x18)\x20\
    \x01(\x03R\nbucketDays\x12\x1b\n\tsystem_gl\x18*\x20\x01(\tR\x08systemGl\
    \x12\x1d\n\nalm_concat\x18+\x20\x01(\tR\talmConcat\x12\x1a\n\x08division\
    \x18,\x20\x01(\tR\x08division\x12\x19\n\x08alm_line\x18-\x20\x01(\tR\x07\
    almLine\x12\x17\n\x07ia_line\x18.\x20\x01(\tR\x06iaLine\x122\n\x15total_\
    interest_amount\x18/\x20\x01(\x01R\x13totalInterestAmount\x124\n\x16tota\
    l_principal_amount\x180\x20\x01(\x01R\x14totalPrincipalAmount\x12\x16\n\
    \x06Method\x181\x20\x01(\x05R\x06Method\x12\x1c\n\tBaseCurve\x182\x20\
    \x01(\x05R\tBaseCurve\x12\x1b\n\tftp_runid\x183\x20\x01(\x03R\x08ftpRuni\
    d\x12\x1b\n\tfrom_date\x184\x20\x01(\x05R\x08fromDate\x12\x17\n\x07to_da\
    te\x185\x20\x01(\x05R\x06toDate\x12#\n\rtotal_balance\x186\x20\x01(\x01R\
    \x0ctotalBalance\x12,\n\x12total_interest_ftp\x187\x20\x01(\x01R\x10tota\
    lInterestFtp\x12\x1b\n\ttotal_ftp\x188\x20\x01(\x01R\x08totalFtp\x12\x19\
    \n\x08FTP_Rate\x189\x20\x01(\x01R\x07FTPRate\x12'\n\tcashflows\x18:\x20\
    \x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}