// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cf_investments.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_amt",
                |m: &Cashflow| { &m.int_amt },
                |m: &mut Cashflow| { &mut m.int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "prin_amt",
                |m: &Cashflow| { &m.prin_amt },
                |m: &mut Cashflow| { &mut m.prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub as_on_date: i64,
    pub deal_number: ::std::string::String,
    pub portfolio: ::std::string::String,
    pub instrument_id: ::std::string::String,
    pub concat_id: ::std::string::String,
    pub instrument_type: ::std::string::String,
    pub branch_code: ::std::string::String,
    pub category: ::std::string::String,
    pub isin_code: ::std::string::String,
    pub security_name: ::std::string::String,
    pub face_value: f64,
    pub book_value: f64,
    pub appreciation_value: f64,
    pub depreciation_value: f64,
    pub wap: f64,
    pub market_value: f64,
    pub currency: ::std::string::String,
    pub acc_yield: f64,
    pub maturity_date: i64,
    pub coupon_classification: ::std::string::String,
    pub coupon_rate: f64,
    pub face_value_per_unit: f64,
    pub outstanding_quantity: f64,
    pub accrued_interest: f64,
    pub coupon_frequency: ::std::string::String,
    pub coupon_basis: ::std::string::String,
    pub put_date: i64,
    pub call_date: i64,
    pub last_coupon: i64,
    pub next_coupon: i64,
    pub issue_date: i64,
    pub last_repricing_date: i64,
    pub next_repricing_date: i64,
    pub place: ::std::string::String,
    pub country: ::std::string::String,
    pub slr_non_slr: ::std::string::String,
    pub listed_unlisted: ::std::string::String,
    pub secured_unsecured: ::std::string::String,
    pub issuer_id: i64,
    pub issuer_name: ::std::string::String,
    pub issuer_type: ::std::string::String,
    pub sub_issuer_type: ::std::string::String,
    pub external_rating_agency: ::std::string::String,
    pub rating: ::std::string::String,
    pub issuer_guaranteed_by: ::std::string::String,
    pub industry: ::std::string::String,
    pub sub_industry: ::std::string::String,
    pub npa_classification: ::std::string::String,
    pub deal_value_date: i64,
    pub duration: f64,
    pub mduration: f64,
    pub benchmark_mark: f64,
    pub spread_rate: f64,
    pub treasury_glcode: f64,
    pub avg_mon_balance: f64,
    pub deal_date: i64,
    pub cdr_flg: ::std::string::String,
    pub gl_sub_head_code: i64,
    pub group: ::std::string::String,
    pub llg: ::std::string::String,
    pub other_llg_classification: ::std::string::String,
    pub cashflow_type: ::std::string::String,
    pub cashflow_amount: f64,
    pub cashflow_currency: ::std::string::String,
    pub cashflow_date: i64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // int64 as_on_date = 1;


    pub fn get_as_on_date(&self) -> i64 {
        self.as_on_date
    }
    pub fn clear_as_on_date(&mut self) {
        self.as_on_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on_date(&mut self, v: i64) {
        self.as_on_date = v;
    }

    // string deal_number = 2;


    pub fn get_deal_number(&self) -> &str {
        &self.deal_number
    }
    pub fn clear_deal_number(&mut self) {
        self.deal_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_number(&mut self, v: ::std::string::String) {
        self.deal_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_number(&mut self) -> &mut ::std::string::String {
        &mut self.deal_number
    }

    // Take field
    pub fn take_deal_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_number, ::std::string::String::new())
    }

    // string portfolio = 3;


    pub fn get_portfolio(&self) -> &str {
        &self.portfolio
    }
    pub fn clear_portfolio(&mut self) {
        self.portfolio.clear();
    }

    // Param is passed by value, moved
    pub fn set_portfolio(&mut self, v: ::std::string::String) {
        self.portfolio = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_portfolio(&mut self) -> &mut ::std::string::String {
        &mut self.portfolio
    }

    // Take field
    pub fn take_portfolio(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.portfolio, ::std::string::String::new())
    }

    // string instrument_id = 4;


    pub fn get_instrument_id(&self) -> &str {
        &self.instrument_id
    }
    pub fn clear_instrument_id(&mut self) {
        self.instrument_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_instrument_id(&mut self, v: ::std::string::String) {
        self.instrument_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instrument_id(&mut self) -> &mut ::std::string::String {
        &mut self.instrument_id
    }

    // Take field
    pub fn take_instrument_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instrument_id, ::std::string::String::new())
    }

    // string concat_id = 5;


    pub fn get_concat_id(&self) -> &str {
        &self.concat_id
    }
    pub fn clear_concat_id(&mut self) {
        self.concat_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_concat_id(&mut self, v: ::std::string::String) {
        self.concat_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_concat_id(&mut self) -> &mut ::std::string::String {
        &mut self.concat_id
    }

    // Take field
    pub fn take_concat_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.concat_id, ::std::string::String::new())
    }

    // string instrument_type = 6;


    pub fn get_instrument_type(&self) -> &str {
        &self.instrument_type
    }
    pub fn clear_instrument_type(&mut self) {
        self.instrument_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_instrument_type(&mut self, v: ::std::string::String) {
        self.instrument_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instrument_type(&mut self) -> &mut ::std::string::String {
        &mut self.instrument_type
    }

    // Take field
    pub fn take_instrument_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instrument_type, ::std::string::String::new())
    }

    // string branch_code = 7;


    pub fn get_branch_code(&self) -> &str {
        &self.branch_code
    }
    pub fn clear_branch_code(&mut self) {
        self.branch_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch_code(&mut self, v: ::std::string::String) {
        self.branch_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch_code(&mut self) -> &mut ::std::string::String {
        &mut self.branch_code
    }

    // Take field
    pub fn take_branch_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch_code, ::std::string::String::new())
    }

    // string category = 8;


    pub fn get_category(&self) -> &str {
        &self.category
    }
    pub fn clear_category(&mut self) {
        self.category.clear();
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        &mut self.category
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category, ::std::string::String::new())
    }

    // string isin_code = 9;


    pub fn get_isin_code(&self) -> &str {
        &self.isin_code
    }
    pub fn clear_isin_code(&mut self) {
        self.isin_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_isin_code(&mut self, v: ::std::string::String) {
        self.isin_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_isin_code(&mut self) -> &mut ::std::string::String {
        &mut self.isin_code
    }

    // Take field
    pub fn take_isin_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.isin_code, ::std::string::String::new())
    }

    // string security_name = 10;


    pub fn get_security_name(&self) -> &str {
        &self.security_name
    }
    pub fn clear_security_name(&mut self) {
        self.security_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_security_name(&mut self, v: ::std::string::String) {
        self.security_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_security_name(&mut self) -> &mut ::std::string::String {
        &mut self.security_name
    }

    // Take field
    pub fn take_security_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.security_name, ::std::string::String::new())
    }

    // double face_value = 11;


    pub fn get_face_value(&self) -> f64 {
        self.face_value
    }
    pub fn clear_face_value(&mut self) {
        self.face_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_face_value(&mut self, v: f64) {
        self.face_value = v;
    }

    // double book_value = 12;


    pub fn get_book_value(&self) -> f64 {
        self.book_value
    }
    pub fn clear_book_value(&mut self) {
        self.book_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_book_value(&mut self, v: f64) {
        self.book_value = v;
    }

    // double appreciation_value = 13;


    pub fn get_appreciation_value(&self) -> f64 {
        self.appreciation_value
    }
    pub fn clear_appreciation_value(&mut self) {
        self.appreciation_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_appreciation_value(&mut self, v: f64) {
        self.appreciation_value = v;
    }

    // double depreciation_value = 14;


    pub fn get_depreciation_value(&self) -> f64 {
        self.depreciation_value
    }
    pub fn clear_depreciation_value(&mut self) {
        self.depreciation_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_depreciation_value(&mut self, v: f64) {
        self.depreciation_value = v;
    }

    // double wap = 15;


    pub fn get_wap(&self) -> f64 {
        self.wap
    }
    pub fn clear_wap(&mut self) {
        self.wap = 0.;
    }

    // Param is passed by value, moved
    pub fn set_wap(&mut self, v: f64) {
        self.wap = v;
    }

    // double market_value = 16;


    pub fn get_market_value(&self) -> f64 {
        self.market_value
    }
    pub fn clear_market_value(&mut self) {
        self.market_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_market_value(&mut self, v: f64) {
        self.market_value = v;
    }

    // string currency = 17;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // double acc_yield = 18;


    pub fn get_acc_yield(&self) -> f64 {
        self.acc_yield
    }
    pub fn clear_acc_yield(&mut self) {
        self.acc_yield = 0.;
    }

    // Param is passed by value, moved
    pub fn set_acc_yield(&mut self, v: f64) {
        self.acc_yield = v;
    }

    // int64 maturity_date = 19;


    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }
    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    // string coupon_classification = 20;


    pub fn get_coupon_classification(&self) -> &str {
        &self.coupon_classification
    }
    pub fn clear_coupon_classification(&mut self) {
        self.coupon_classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_coupon_classification(&mut self, v: ::std::string::String) {
        self.coupon_classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coupon_classification(&mut self) -> &mut ::std::string::String {
        &mut self.coupon_classification
    }

    // Take field
    pub fn take_coupon_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coupon_classification, ::std::string::String::new())
    }

    // double coupon_rate = 21;


    pub fn get_coupon_rate(&self) -> f64 {
        self.coupon_rate
    }
    pub fn clear_coupon_rate(&mut self) {
        self.coupon_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_coupon_rate(&mut self, v: f64) {
        self.coupon_rate = v;
    }

    // double face_value_per_unit = 22;


    pub fn get_face_value_per_unit(&self) -> f64 {
        self.face_value_per_unit
    }
    pub fn clear_face_value_per_unit(&mut self) {
        self.face_value_per_unit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_face_value_per_unit(&mut self, v: f64) {
        self.face_value_per_unit = v;
    }

    // double outstanding_quantity = 23;


    pub fn get_outstanding_quantity(&self) -> f64 {
        self.outstanding_quantity
    }
    pub fn clear_outstanding_quantity(&mut self) {
        self.outstanding_quantity = 0.;
    }

    // Param is passed by value, moved
    pub fn set_outstanding_quantity(&mut self, v: f64) {
        self.outstanding_quantity = v;
    }

    // double accrued_interest = 24;


    pub fn get_accrued_interest(&self) -> f64 {
        self.accrued_interest
    }
    pub fn clear_accrued_interest(&mut self) {
        self.accrued_interest = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accrued_interest(&mut self, v: f64) {
        self.accrued_interest = v;
    }

    // string coupon_frequency = 25;


    pub fn get_coupon_frequency(&self) -> &str {
        &self.coupon_frequency
    }
    pub fn clear_coupon_frequency(&mut self) {
        self.coupon_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_coupon_frequency(&mut self, v: ::std::string::String) {
        self.coupon_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coupon_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.coupon_frequency
    }

    // Take field
    pub fn take_coupon_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coupon_frequency, ::std::string::String::new())
    }

    // string coupon_basis = 26;


    pub fn get_coupon_basis(&self) -> &str {
        &self.coupon_basis
    }
    pub fn clear_coupon_basis(&mut self) {
        self.coupon_basis.clear();
    }

    // Param is passed by value, moved
    pub fn set_coupon_basis(&mut self, v: ::std::string::String) {
        self.coupon_basis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coupon_basis(&mut self) -> &mut ::std::string::String {
        &mut self.coupon_basis
    }

    // Take field
    pub fn take_coupon_basis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coupon_basis, ::std::string::String::new())
    }

    // int64 put_date = 27;


    pub fn get_put_date(&self) -> i64 {
        self.put_date
    }
    pub fn clear_put_date(&mut self) {
        self.put_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_put_date(&mut self, v: i64) {
        self.put_date = v;
    }

    // int64 call_date = 28;


    pub fn get_call_date(&self) -> i64 {
        self.call_date
    }
    pub fn clear_call_date(&mut self) {
        self.call_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_call_date(&mut self, v: i64) {
        self.call_date = v;
    }

    // int64 last_coupon = 29;


    pub fn get_last_coupon(&self) -> i64 {
        self.last_coupon
    }
    pub fn clear_last_coupon(&mut self) {
        self.last_coupon = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_coupon(&mut self, v: i64) {
        self.last_coupon = v;
    }

    // int64 next_coupon = 30;


    pub fn get_next_coupon(&self) -> i64 {
        self.next_coupon
    }
    pub fn clear_next_coupon(&mut self) {
        self.next_coupon = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_coupon(&mut self, v: i64) {
        self.next_coupon = v;
    }

    // int64 issue_date = 31;


    pub fn get_issue_date(&self) -> i64 {
        self.issue_date
    }
    pub fn clear_issue_date(&mut self) {
        self.issue_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_issue_date(&mut self, v: i64) {
        self.issue_date = v;
    }

    // int64 last_repricing_date = 32;


    pub fn get_last_repricing_date(&self) -> i64 {
        self.last_repricing_date
    }
    pub fn clear_last_repricing_date(&mut self) {
        self.last_repricing_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_repricing_date(&mut self, v: i64) {
        self.last_repricing_date = v;
    }

    // int64 next_repricing_date = 33;


    pub fn get_next_repricing_date(&self) -> i64 {
        self.next_repricing_date
    }
    pub fn clear_next_repricing_date(&mut self) {
        self.next_repricing_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_repricing_date(&mut self, v: i64) {
        self.next_repricing_date = v;
    }

    // string place = 34;


    pub fn get_place(&self) -> &str {
        &self.place
    }
    pub fn clear_place(&mut self) {
        self.place.clear();
    }

    // Param is passed by value, moved
    pub fn set_place(&mut self, v: ::std::string::String) {
        self.place = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_place(&mut self) -> &mut ::std::string::String {
        &mut self.place
    }

    // Take field
    pub fn take_place(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.place, ::std::string::String::new())
    }

    // string country = 35;


    pub fn get_country(&self) -> &str {
        &self.country
    }
    pub fn clear_country(&mut self) {
        self.country.clear();
    }

    // Param is passed by value, moved
    pub fn set_country(&mut self, v: ::std::string::String) {
        self.country = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country(&mut self) -> &mut ::std::string::String {
        &mut self.country
    }

    // Take field
    pub fn take_country(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.country, ::std::string::String::new())
    }

    // string slr_non_slr = 36;


    pub fn get_slr_non_slr(&self) -> &str {
        &self.slr_non_slr
    }
    pub fn clear_slr_non_slr(&mut self) {
        self.slr_non_slr.clear();
    }

    // Param is passed by value, moved
    pub fn set_slr_non_slr(&mut self, v: ::std::string::String) {
        self.slr_non_slr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slr_non_slr(&mut self) -> &mut ::std::string::String {
        &mut self.slr_non_slr
    }

    // Take field
    pub fn take_slr_non_slr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.slr_non_slr, ::std::string::String::new())
    }

    // string listed_unlisted = 37;


    pub fn get_listed_unlisted(&self) -> &str {
        &self.listed_unlisted
    }
    pub fn clear_listed_unlisted(&mut self) {
        self.listed_unlisted.clear();
    }

    // Param is passed by value, moved
    pub fn set_listed_unlisted(&mut self, v: ::std::string::String) {
        self.listed_unlisted = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_listed_unlisted(&mut self) -> &mut ::std::string::String {
        &mut self.listed_unlisted
    }

    // Take field
    pub fn take_listed_unlisted(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.listed_unlisted, ::std::string::String::new())
    }

    // string secured_unsecured = 38;


    pub fn get_secured_unsecured(&self) -> &str {
        &self.secured_unsecured
    }
    pub fn clear_secured_unsecured(&mut self) {
        self.secured_unsecured.clear();
    }

    // Param is passed by value, moved
    pub fn set_secured_unsecured(&mut self, v: ::std::string::String) {
        self.secured_unsecured = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secured_unsecured(&mut self) -> &mut ::std::string::String {
        &mut self.secured_unsecured
    }

    // Take field
    pub fn take_secured_unsecured(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.secured_unsecured, ::std::string::String::new())
    }

    // int64 issuer_id = 39;


    pub fn get_issuer_id(&self) -> i64 {
        self.issuer_id
    }
    pub fn clear_issuer_id(&mut self) {
        self.issuer_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_issuer_id(&mut self, v: i64) {
        self.issuer_id = v;
    }

    // string issuer_name = 40;


    pub fn get_issuer_name(&self) -> &str {
        &self.issuer_name
    }
    pub fn clear_issuer_name(&mut self) {
        self.issuer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer_name(&mut self, v: ::std::string::String) {
        self.issuer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer_name(&mut self) -> &mut ::std::string::String {
        &mut self.issuer_name
    }

    // Take field
    pub fn take_issuer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer_name, ::std::string::String::new())
    }

    // string issuer_type = 41;


    pub fn get_issuer_type(&self) -> &str {
        &self.issuer_type
    }
    pub fn clear_issuer_type(&mut self) {
        self.issuer_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer_type(&mut self, v: ::std::string::String) {
        self.issuer_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer_type(&mut self) -> &mut ::std::string::String {
        &mut self.issuer_type
    }

    // Take field
    pub fn take_issuer_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer_type, ::std::string::String::new())
    }

    // string sub_issuer_type = 42;


    pub fn get_sub_issuer_type(&self) -> &str {
        &self.sub_issuer_type
    }
    pub fn clear_sub_issuer_type(&mut self) {
        self.sub_issuer_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_sub_issuer_type(&mut self, v: ::std::string::String) {
        self.sub_issuer_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sub_issuer_type(&mut self) -> &mut ::std::string::String {
        &mut self.sub_issuer_type
    }

    // Take field
    pub fn take_sub_issuer_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sub_issuer_type, ::std::string::String::new())
    }

    // string external_rating_agency = 43;


    pub fn get_external_rating_agency(&self) -> &str {
        &self.external_rating_agency
    }
    pub fn clear_external_rating_agency(&mut self) {
        self.external_rating_agency.clear();
    }

    // Param is passed by value, moved
    pub fn set_external_rating_agency(&mut self, v: ::std::string::String) {
        self.external_rating_agency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_external_rating_agency(&mut self) -> &mut ::std::string::String {
        &mut self.external_rating_agency
    }

    // Take field
    pub fn take_external_rating_agency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.external_rating_agency, ::std::string::String::new())
    }

    // string rating = 44;


    pub fn get_rating(&self) -> &str {
        &self.rating
    }
    pub fn clear_rating(&mut self) {
        self.rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_rating(&mut self, v: ::std::string::String) {
        self.rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rating(&mut self) -> &mut ::std::string::String {
        &mut self.rating
    }

    // Take field
    pub fn take_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rating, ::std::string::String::new())
    }

    // string issuer_guaranteed_by = 45;


    pub fn get_issuer_guaranteed_by(&self) -> &str {
        &self.issuer_guaranteed_by
    }
    pub fn clear_issuer_guaranteed_by(&mut self) {
        self.issuer_guaranteed_by.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer_guaranteed_by(&mut self, v: ::std::string::String) {
        self.issuer_guaranteed_by = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer_guaranteed_by(&mut self) -> &mut ::std::string::String {
        &mut self.issuer_guaranteed_by
    }

    // Take field
    pub fn take_issuer_guaranteed_by(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer_guaranteed_by, ::std::string::String::new())
    }

    // string industry = 46;


    pub fn get_industry(&self) -> &str {
        &self.industry
    }
    pub fn clear_industry(&mut self) {
        self.industry.clear();
    }

    // Param is passed by value, moved
    pub fn set_industry(&mut self, v: ::std::string::String) {
        self.industry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_industry(&mut self) -> &mut ::std::string::String {
        &mut self.industry
    }

    // Take field
    pub fn take_industry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.industry, ::std::string::String::new())
    }

    // string sub_industry = 47;


    pub fn get_sub_industry(&self) -> &str {
        &self.sub_industry
    }
    pub fn clear_sub_industry(&mut self) {
        self.sub_industry.clear();
    }

    // Param is passed by value, moved
    pub fn set_sub_industry(&mut self, v: ::std::string::String) {
        self.sub_industry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sub_industry(&mut self) -> &mut ::std::string::String {
        &mut self.sub_industry
    }

    // Take field
    pub fn take_sub_industry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sub_industry, ::std::string::String::new())
    }

    // string npa_classification = 48;


    pub fn get_npa_classification(&self) -> &str {
        &self.npa_classification
    }
    pub fn clear_npa_classification(&mut self) {
        self.npa_classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_classification(&mut self, v: ::std::string::String) {
        self.npa_classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_classification(&mut self) -> &mut ::std::string::String {
        &mut self.npa_classification
    }

    // Take field
    pub fn take_npa_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_classification, ::std::string::String::new())
    }

    // int64 deal_value_date = 49;


    pub fn get_deal_value_date(&self) -> i64 {
        self.deal_value_date
    }
    pub fn clear_deal_value_date(&mut self) {
        self.deal_value_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_deal_value_date(&mut self, v: i64) {
        self.deal_value_date = v;
    }

    // double duration = 50;


    pub fn get_duration(&self) -> f64 {
        self.duration
    }
    pub fn clear_duration(&mut self) {
        self.duration = 0.;
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: f64) {
        self.duration = v;
    }

    // double mduration = 51;


    pub fn get_mduration(&self) -> f64 {
        self.mduration
    }
    pub fn clear_mduration(&mut self) {
        self.mduration = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mduration(&mut self, v: f64) {
        self.mduration = v;
    }

    // double benchmark_mark = 52;


    pub fn get_benchmark_mark(&self) -> f64 {
        self.benchmark_mark
    }
    pub fn clear_benchmark_mark(&mut self) {
        self.benchmark_mark = 0.;
    }

    // Param is passed by value, moved
    pub fn set_benchmark_mark(&mut self, v: f64) {
        self.benchmark_mark = v;
    }

    // double spread_rate = 53;


    pub fn get_spread_rate(&self) -> f64 {
        self.spread_rate
    }
    pub fn clear_spread_rate(&mut self) {
        self.spread_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_spread_rate(&mut self, v: f64) {
        self.spread_rate = v;
    }

    // double treasury_glcode = 54;


    pub fn get_treasury_glcode(&self) -> f64 {
        self.treasury_glcode
    }
    pub fn clear_treasury_glcode(&mut self) {
        self.treasury_glcode = 0.;
    }

    // Param is passed by value, moved
    pub fn set_treasury_glcode(&mut self, v: f64) {
        self.treasury_glcode = v;
    }

    // double avg_mon_balance = 55;


    pub fn get_avg_mon_balance(&self) -> f64 {
        self.avg_mon_balance
    }
    pub fn clear_avg_mon_balance(&mut self) {
        self.avg_mon_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_avg_mon_balance(&mut self, v: f64) {
        self.avg_mon_balance = v;
    }

    // int64 deal_date = 56;


    pub fn get_deal_date(&self) -> i64 {
        self.deal_date
    }
    pub fn clear_deal_date(&mut self) {
        self.deal_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_deal_date(&mut self, v: i64) {
        self.deal_date = v;
    }

    // string cdr_flg = 57;


    pub fn get_cdr_flg(&self) -> &str {
        &self.cdr_flg
    }
    pub fn clear_cdr_flg(&mut self) {
        self.cdr_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_cdr_flg(&mut self, v: ::std::string::String) {
        self.cdr_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cdr_flg(&mut self) -> &mut ::std::string::String {
        &mut self.cdr_flg
    }

    // Take field
    pub fn take_cdr_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cdr_flg, ::std::string::String::new())
    }

    // int64 gl_sub_head_code = 58;


    pub fn get_gl_sub_head_code(&self) -> i64 {
        self.gl_sub_head_code
    }
    pub fn clear_gl_sub_head_code(&mut self) {
        self.gl_sub_head_code = 0;
    }

    // Param is passed by value, moved
    pub fn set_gl_sub_head_code(&mut self, v: i64) {
        self.gl_sub_head_code = v;
    }

    // string group = 59;


    pub fn get_group(&self) -> &str {
        &self.group
    }
    pub fn clear_group(&mut self) {
        self.group.clear();
    }

    // Param is passed by value, moved
    pub fn set_group(&mut self, v: ::std::string::String) {
        self.group = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group(&mut self) -> &mut ::std::string::String {
        &mut self.group
    }

    // Take field
    pub fn take_group(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group, ::std::string::String::new())
    }

    // string llg = 60;


    pub fn get_llg(&self) -> &str {
        &self.llg
    }
    pub fn clear_llg(&mut self) {
        self.llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_llg(&mut self, v: ::std::string::String) {
        self.llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_llg(&mut self) -> &mut ::std::string::String {
        &mut self.llg
    }

    // Take field
    pub fn take_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.llg, ::std::string::String::new())
    }

    // string other_llg_classification = 61;


    pub fn get_other_llg_classification(&self) -> &str {
        &self.other_llg_classification
    }
    pub fn clear_other_llg_classification(&mut self) {
        self.other_llg_classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_other_llg_classification(&mut self, v: ::std::string::String) {
        self.other_llg_classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_other_llg_classification(&mut self) -> &mut ::std::string::String {
        &mut self.other_llg_classification
    }

    // Take field
    pub fn take_other_llg_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.other_llg_classification, ::std::string::String::new())
    }

    // string cashflow_type = 62;


    pub fn get_cashflow_type(&self) -> &str {
        &self.cashflow_type
    }
    pub fn clear_cashflow_type(&mut self) {
        self.cashflow_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflow_type(&mut self, v: ::std::string::String) {
        self.cashflow_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cashflow_type(&mut self) -> &mut ::std::string::String {
        &mut self.cashflow_type
    }

    // Take field
    pub fn take_cashflow_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cashflow_type, ::std::string::String::new())
    }

    // double cashflow_amount = 63;


    pub fn get_cashflow_amount(&self) -> f64 {
        self.cashflow_amount
    }
    pub fn clear_cashflow_amount(&mut self) {
        self.cashflow_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cashflow_amount(&mut self, v: f64) {
        self.cashflow_amount = v;
    }

    // string cashflow_currency = 64;


    pub fn get_cashflow_currency(&self) -> &str {
        &self.cashflow_currency
    }
    pub fn clear_cashflow_currency(&mut self) {
        self.cashflow_currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflow_currency(&mut self, v: ::std::string::String) {
        self.cashflow_currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cashflow_currency(&mut self) -> &mut ::std::string::String {
        &mut self.cashflow_currency
    }

    // Take field
    pub fn take_cashflow_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cashflow_currency, ::std::string::String::new())
    }

    // int64 cashflow_date = 65;


    pub fn get_cashflow_date(&self) -> i64 {
        self.cashflow_date
    }
    pub fn clear_cashflow_date(&mut self) {
        self.cashflow_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_cashflow_date(&mut self, v: i64) {
        self.cashflow_date = v;
    }

    // repeated .Cashflow cashflows = 66;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on_date = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_number)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.portfolio)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instrument_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.concat_id)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instrument_type)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch_code)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.isin_code)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.security_name)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.face_value = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.book_value = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.appreciation_value = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.depreciation_value = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.wap = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.market_value = tmp;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.acc_yield = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coupon_classification)?;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.coupon_rate = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.face_value_per_unit = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.outstanding_quantity = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.accrued_interest = tmp;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coupon_frequency)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coupon_basis)?;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.put_date = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.call_date = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_coupon = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_coupon = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.issue_date = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_repricing_date = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_repricing_date = tmp;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.place)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.country)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.slr_non_slr)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.listed_unlisted)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.secured_unsecured)?;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.issuer_id = tmp;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer_name)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer_type)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sub_issuer_type)?;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.external_rating_agency)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rating)?;
                },
                45 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer_guaranteed_by)?;
                },
                46 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.industry)?;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sub_industry)?;
                },
                48 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa_classification)?;
                },
                49 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deal_value_date = tmp;
                },
                50 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.duration = tmp;
                },
                51 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.mduration = tmp;
                },
                52 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.benchmark_mark = tmp;
                },
                53 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.spread_rate = tmp;
                },
                54 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.treasury_glcode = tmp;
                },
                55 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.avg_mon_balance = tmp;
                },
                56 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deal_date = tmp;
                },
                57 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cdr_flg)?;
                },
                58 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.gl_sub_head_code = tmp;
                },
                59 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group)?;
                },
                60 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.llg)?;
                },
                61 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.other_llg_classification)?;
                },
                62 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cashflow_type)?;
                },
                63 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.cashflow_amount = tmp;
                },
                64 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cashflow_currency)?;
                },
                65 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cashflow_date = tmp;
                },
                66 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.as_on_date != 0 {
            my_size += ::protobuf::rt::value_size(1, self.as_on_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.deal_number.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.deal_number);
        }
        if !self.portfolio.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.portfolio);
        }
        if !self.instrument_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.instrument_id);
        }
        if !self.concat_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.concat_id);
        }
        if !self.instrument_type.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.instrument_type);
        }
        if !self.branch_code.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.branch_code);
        }
        if !self.category.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.category);
        }
        if !self.isin_code.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.isin_code);
        }
        if !self.security_name.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.security_name);
        }
        if self.face_value != 0. {
            my_size += 9;
        }
        if self.book_value != 0. {
            my_size += 9;
        }
        if self.appreciation_value != 0. {
            my_size += 9;
        }
        if self.depreciation_value != 0. {
            my_size += 9;
        }
        if self.wap != 0. {
            my_size += 9;
        }
        if self.market_value != 0. {
            my_size += 10;
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.currency);
        }
        if self.acc_yield != 0. {
            my_size += 10;
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(19, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.coupon_classification.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.coupon_classification);
        }
        if self.coupon_rate != 0. {
            my_size += 10;
        }
        if self.face_value_per_unit != 0. {
            my_size += 10;
        }
        if self.outstanding_quantity != 0. {
            my_size += 10;
        }
        if self.accrued_interest != 0. {
            my_size += 10;
        }
        if !self.coupon_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.coupon_frequency);
        }
        if !self.coupon_basis.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.coupon_basis);
        }
        if self.put_date != 0 {
            my_size += ::protobuf::rt::value_size(27, self.put_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.call_date != 0 {
            my_size += ::protobuf::rt::value_size(28, self.call_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_coupon != 0 {
            my_size += ::protobuf::rt::value_size(29, self.last_coupon, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_coupon != 0 {
            my_size += ::protobuf::rt::value_size(30, self.next_coupon, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.issue_date != 0 {
            my_size += ::protobuf::rt::value_size(31, self.issue_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_repricing_date != 0 {
            my_size += ::protobuf::rt::value_size(32, self.last_repricing_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_repricing_date != 0 {
            my_size += ::protobuf::rt::value_size(33, self.next_repricing_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.place.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.place);
        }
        if !self.country.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.country);
        }
        if !self.slr_non_slr.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.slr_non_slr);
        }
        if !self.listed_unlisted.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.listed_unlisted);
        }
        if !self.secured_unsecured.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.secured_unsecured);
        }
        if self.issuer_id != 0 {
            my_size += ::protobuf::rt::value_size(39, self.issuer_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.issuer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.issuer_name);
        }
        if !self.issuer_type.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.issuer_type);
        }
        if !self.sub_issuer_type.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.sub_issuer_type);
        }
        if !self.external_rating_agency.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.external_rating_agency);
        }
        if !self.rating.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.rating);
        }
        if !self.issuer_guaranteed_by.is_empty() {
            my_size += ::protobuf::rt::string_size(45, &self.issuer_guaranteed_by);
        }
        if !self.industry.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.industry);
        }
        if !self.sub_industry.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.sub_industry);
        }
        if !self.npa_classification.is_empty() {
            my_size += ::protobuf::rt::string_size(48, &self.npa_classification);
        }
        if self.deal_value_date != 0 {
            my_size += ::protobuf::rt::value_size(49, self.deal_value_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.duration != 0. {
            my_size += 10;
        }
        if self.mduration != 0. {
            my_size += 10;
        }
        if self.benchmark_mark != 0. {
            my_size += 10;
        }
        if self.spread_rate != 0. {
            my_size += 10;
        }
        if self.treasury_glcode != 0. {
            my_size += 10;
        }
        if self.avg_mon_balance != 0. {
            my_size += 10;
        }
        if self.deal_date != 0 {
            my_size += ::protobuf::rt::value_size(56, self.deal_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.cdr_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(57, &self.cdr_flg);
        }
        if self.gl_sub_head_code != 0 {
            my_size += ::protobuf::rt::value_size(58, self.gl_sub_head_code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.group.is_empty() {
            my_size += ::protobuf::rt::string_size(59, &self.group);
        }
        if !self.llg.is_empty() {
            my_size += ::protobuf::rt::string_size(60, &self.llg);
        }
        if !self.other_llg_classification.is_empty() {
            my_size += ::protobuf::rt::string_size(61, &self.other_llg_classification);
        }
        if !self.cashflow_type.is_empty() {
            my_size += ::protobuf::rt::string_size(62, &self.cashflow_type);
        }
        if self.cashflow_amount != 0. {
            my_size += 10;
        }
        if !self.cashflow_currency.is_empty() {
            my_size += ::protobuf::rt::string_size(64, &self.cashflow_currency);
        }
        if self.cashflow_date != 0 {
            my_size += ::protobuf::rt::value_size(65, self.cashflow_date, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.as_on_date != 0 {
            os.write_int64(1, self.as_on_date)?;
        }
        if !self.deal_number.is_empty() {
            os.write_string(2, &self.deal_number)?;
        }
        if !self.portfolio.is_empty() {
            os.write_string(3, &self.portfolio)?;
        }
        if !self.instrument_id.is_empty() {
            os.write_string(4, &self.instrument_id)?;
        }
        if !self.concat_id.is_empty() {
            os.write_string(5, &self.concat_id)?;
        }
        if !self.instrument_type.is_empty() {
            os.write_string(6, &self.instrument_type)?;
        }
        if !self.branch_code.is_empty() {
            os.write_string(7, &self.branch_code)?;
        }
        if !self.category.is_empty() {
            os.write_string(8, &self.category)?;
        }
        if !self.isin_code.is_empty() {
            os.write_string(9, &self.isin_code)?;
        }
        if !self.security_name.is_empty() {
            os.write_string(10, &self.security_name)?;
        }
        if self.face_value != 0. {
            os.write_double(11, self.face_value)?;
        }
        if self.book_value != 0. {
            os.write_double(12, self.book_value)?;
        }
        if self.appreciation_value != 0. {
            os.write_double(13, self.appreciation_value)?;
        }
        if self.depreciation_value != 0. {
            os.write_double(14, self.depreciation_value)?;
        }
        if self.wap != 0. {
            os.write_double(15, self.wap)?;
        }
        if self.market_value != 0. {
            os.write_double(16, self.market_value)?;
        }
        if !self.currency.is_empty() {
            os.write_string(17, &self.currency)?;
        }
        if self.acc_yield != 0. {
            os.write_double(18, self.acc_yield)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(19, self.maturity_date)?;
        }
        if !self.coupon_classification.is_empty() {
            os.write_string(20, &self.coupon_classification)?;
        }
        if self.coupon_rate != 0. {
            os.write_double(21, self.coupon_rate)?;
        }
        if self.face_value_per_unit != 0. {
            os.write_double(22, self.face_value_per_unit)?;
        }
        if self.outstanding_quantity != 0. {
            os.write_double(23, self.outstanding_quantity)?;
        }
        if self.accrued_interest != 0. {
            os.write_double(24, self.accrued_interest)?;
        }
        if !self.coupon_frequency.is_empty() {
            os.write_string(25, &self.coupon_frequency)?;
        }
        if !self.coupon_basis.is_empty() {
            os.write_string(26, &self.coupon_basis)?;
        }
        if self.put_date != 0 {
            os.write_int64(27, self.put_date)?;
        }
        if self.call_date != 0 {
            os.write_int64(28, self.call_date)?;
        }
        if self.last_coupon != 0 {
            os.write_int64(29, self.last_coupon)?;
        }
        if self.next_coupon != 0 {
            os.write_int64(30, self.next_coupon)?;
        }
        if self.issue_date != 0 {
            os.write_int64(31, self.issue_date)?;
        }
        if self.last_repricing_date != 0 {
            os.write_int64(32, self.last_repricing_date)?;
        }
        if self.next_repricing_date != 0 {
            os.write_int64(33, self.next_repricing_date)?;
        }
        if !self.place.is_empty() {
            os.write_string(34, &self.place)?;
        }
        if !self.country.is_empty() {
            os.write_string(35, &self.country)?;
        }
        if !self.slr_non_slr.is_empty() {
            os.write_string(36, &self.slr_non_slr)?;
        }
        if !self.listed_unlisted.is_empty() {
            os.write_string(37, &self.listed_unlisted)?;
        }
        if !self.secured_unsecured.is_empty() {
            os.write_string(38, &self.secured_unsecured)?;
        }
        if self.issuer_id != 0 {
            os.write_int64(39, self.issuer_id)?;
        }
        if !self.issuer_name.is_empty() {
            os.write_string(40, &self.issuer_name)?;
        }
        if !self.issuer_type.is_empty() {
            os.write_string(41, &self.issuer_type)?;
        }
        if !self.sub_issuer_type.is_empty() {
            os.write_string(42, &self.sub_issuer_type)?;
        }
        if !self.external_rating_agency.is_empty() {
            os.write_string(43, &self.external_rating_agency)?;
        }
        if !self.rating.is_empty() {
            os.write_string(44, &self.rating)?;
        }
        if !self.issuer_guaranteed_by.is_empty() {
            os.write_string(45, &self.issuer_guaranteed_by)?;
        }
        if !self.industry.is_empty() {
            os.write_string(46, &self.industry)?;
        }
        if !self.sub_industry.is_empty() {
            os.write_string(47, &self.sub_industry)?;
        }
        if !self.npa_classification.is_empty() {
            os.write_string(48, &self.npa_classification)?;
        }
        if self.deal_value_date != 0 {
            os.write_int64(49, self.deal_value_date)?;
        }
        if self.duration != 0. {
            os.write_double(50, self.duration)?;
        }
        if self.mduration != 0. {
            os.write_double(51, self.mduration)?;
        }
        if self.benchmark_mark != 0. {
            os.write_double(52, self.benchmark_mark)?;
        }
        if self.spread_rate != 0. {
            os.write_double(53, self.spread_rate)?;
        }
        if self.treasury_glcode != 0. {
            os.write_double(54, self.treasury_glcode)?;
        }
        if self.avg_mon_balance != 0. {
            os.write_double(55, self.avg_mon_balance)?;
        }
        if self.deal_date != 0 {
            os.write_int64(56, self.deal_date)?;
        }
        if !self.cdr_flg.is_empty() {
            os.write_string(57, &self.cdr_flg)?;
        }
        if self.gl_sub_head_code != 0 {
            os.write_int64(58, self.gl_sub_head_code)?;
        }
        if !self.group.is_empty() {
            os.write_string(59, &self.group)?;
        }
        if !self.llg.is_empty() {
            os.write_string(60, &self.llg)?;
        }
        if !self.other_llg_classification.is_empty() {
            os.write_string(61, &self.other_llg_classification)?;
        }
        if !self.cashflow_type.is_empty() {
            os.write_string(62, &self.cashflow_type)?;
        }
        if self.cashflow_amount != 0. {
            os.write_double(63, self.cashflow_amount)?;
        }
        if !self.cashflow_currency.is_empty() {
            os.write_string(64, &self.cashflow_currency)?;
        }
        if self.cashflow_date != 0 {
            os.write_int64(65, self.cashflow_date)?;
        }
        for v in &self.cashflows {
            os.write_tag(66, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "as_on_date",
                |m: &AccountWithCashflows| { &m.as_on_date },
                |m: &mut AccountWithCashflows| { &mut m.as_on_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "deal_number",
                |m: &AccountWithCashflows| { &m.deal_number },
                |m: &mut AccountWithCashflows| { &mut m.deal_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "portfolio",
                |m: &AccountWithCashflows| { &m.portfolio },
                |m: &mut AccountWithCashflows| { &mut m.portfolio },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instrument_id",
                |m: &AccountWithCashflows| { &m.instrument_id },
                |m: &mut AccountWithCashflows| { &mut m.instrument_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "concat_id",
                |m: &AccountWithCashflows| { &m.concat_id },
                |m: &mut AccountWithCashflows| { &mut m.concat_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instrument_type",
                |m: &AccountWithCashflows| { &m.instrument_type },
                |m: &mut AccountWithCashflows| { &mut m.instrument_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "branch_code",
                |m: &AccountWithCashflows| { &m.branch_code },
                |m: &mut AccountWithCashflows| { &mut m.branch_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "category",
                |m: &AccountWithCashflows| { &m.category },
                |m: &mut AccountWithCashflows| { &mut m.category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "isin_code",
                |m: &AccountWithCashflows| { &m.isin_code },
                |m: &mut AccountWithCashflows| { &mut m.isin_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "security_name",
                |m: &AccountWithCashflows| { &m.security_name },
                |m: &mut AccountWithCashflows| { &mut m.security_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "face_value",
                |m: &AccountWithCashflows| { &m.face_value },
                |m: &mut AccountWithCashflows| { &mut m.face_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "book_value",
                |m: &AccountWithCashflows| { &m.book_value },
                |m: &mut AccountWithCashflows| { &mut m.book_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "appreciation_value",
                |m: &AccountWithCashflows| { &m.appreciation_value },
                |m: &mut AccountWithCashflows| { &mut m.appreciation_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "depreciation_value",
                |m: &AccountWithCashflows| { &m.depreciation_value },
                |m: &mut AccountWithCashflows| { &mut m.depreciation_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "wap",
                |m: &AccountWithCashflows| { &m.wap },
                |m: &mut AccountWithCashflows| { &mut m.wap },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "market_value",
                |m: &AccountWithCashflows| { &m.market_value },
                |m: &mut AccountWithCashflows| { &mut m.market_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &AccountWithCashflows| { &m.currency },
                |m: &mut AccountWithCashflows| { &mut m.currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "acc_yield",
                |m: &AccountWithCashflows| { &m.acc_yield },
                |m: &mut AccountWithCashflows| { &mut m.acc_yield },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "maturity_date",
                |m: &AccountWithCashflows| { &m.maturity_date },
                |m: &mut AccountWithCashflows| { &mut m.maturity_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "coupon_classification",
                |m: &AccountWithCashflows| { &m.coupon_classification },
                |m: &mut AccountWithCashflows| { &mut m.coupon_classification },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "coupon_rate",
                |m: &AccountWithCashflows| { &m.coupon_rate },
                |m: &mut AccountWithCashflows| { &mut m.coupon_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "face_value_per_unit",
                |m: &AccountWithCashflows| { &m.face_value_per_unit },
                |m: &mut AccountWithCashflows| { &mut m.face_value_per_unit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "outstanding_quantity",
                |m: &AccountWithCashflows| { &m.outstanding_quantity },
                |m: &mut AccountWithCashflows| { &mut m.outstanding_quantity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "accrued_interest",
                |m: &AccountWithCashflows| { &m.accrued_interest },
                |m: &mut AccountWithCashflows| { &mut m.accrued_interest },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "coupon_frequency",
                |m: &AccountWithCashflows| { &m.coupon_frequency },
                |m: &mut AccountWithCashflows| { &mut m.coupon_frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "coupon_basis",
                |m: &AccountWithCashflows| { &m.coupon_basis },
                |m: &mut AccountWithCashflows| { &mut m.coupon_basis },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "put_date",
                |m: &AccountWithCashflows| { &m.put_date },
                |m: &mut AccountWithCashflows| { &mut m.put_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "call_date",
                |m: &AccountWithCashflows| { &m.call_date },
                |m: &mut AccountWithCashflows| { &mut m.call_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_coupon",
                |m: &AccountWithCashflows| { &m.last_coupon },
                |m: &mut AccountWithCashflows| { &mut m.last_coupon },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_coupon",
                |m: &AccountWithCashflows| { &m.next_coupon },
                |m: &mut AccountWithCashflows| { &mut m.next_coupon },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "issue_date",
                |m: &AccountWithCashflows| { &m.issue_date },
                |m: &mut AccountWithCashflows| { &mut m.issue_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_repricing_date",
                |m: &AccountWithCashflows| { &m.last_repricing_date },
                |m: &mut AccountWithCashflows| { &mut m.last_repricing_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_repricing_date",
                |m: &AccountWithCashflows| { &m.next_repricing_date },
                |m: &mut AccountWithCashflows| { &mut m.next_repricing_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "place",
                |m: &AccountWithCashflows| { &m.place },
                |m: &mut AccountWithCashflows| { &mut m.place },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "country",
                |m: &AccountWithCashflows| { &m.country },
                |m: &mut AccountWithCashflows| { &mut m.country },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "slr_non_slr",
                |m: &AccountWithCashflows| { &m.slr_non_slr },
                |m: &mut AccountWithCashflows| { &mut m.slr_non_slr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "listed_unlisted",
                |m: &AccountWithCashflows| { &m.listed_unlisted },
                |m: &mut AccountWithCashflows| { &mut m.listed_unlisted },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "secured_unsecured",
                |m: &AccountWithCashflows| { &m.secured_unsecured },
                |m: &mut AccountWithCashflows| { &mut m.secured_unsecured },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "issuer_id",
                |m: &AccountWithCashflows| { &m.issuer_id },
                |m: &mut AccountWithCashflows| { &mut m.issuer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "issuer_name",
                |m: &AccountWithCashflows| { &m.issuer_name },
                |m: &mut AccountWithCashflows| { &mut m.issuer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "issuer_type",
                |m: &AccountWithCashflows| { &m.issuer_type },
                |m: &mut AccountWithCashflows| { &mut m.issuer_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sub_issuer_type",
                |m: &AccountWithCashflows| { &m.sub_issuer_type },
                |m: &mut AccountWithCashflows| { &mut m.sub_issuer_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "external_rating_agency",
                |m: &AccountWithCashflows| { &m.external_rating_agency },
                |m: &mut AccountWithCashflows| { &mut m.external_rating_agency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rating",
                |m: &AccountWithCashflows| { &m.rating },
                |m: &mut AccountWithCashflows| { &mut m.rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "issuer_guaranteed_by",
                |m: &AccountWithCashflows| { &m.issuer_guaranteed_by },
                |m: &mut AccountWithCashflows| { &mut m.issuer_guaranteed_by },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "industry",
                |m: &AccountWithCashflows| { &m.industry },
                |m: &mut AccountWithCashflows| { &mut m.industry },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sub_industry",
                |m: &AccountWithCashflows| { &m.sub_industry },
                |m: &mut AccountWithCashflows| { &mut m.sub_industry },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "npa_classification",
                |m: &AccountWithCashflows| { &m.npa_classification },
                |m: &mut AccountWithCashflows| { &mut m.npa_classification },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "deal_value_date",
                |m: &AccountWithCashflows| { &m.deal_value_date },
                |m: &mut AccountWithCashflows| { &mut m.deal_value_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "duration",
                |m: &AccountWithCashflows| { &m.duration },
                |m: &mut AccountWithCashflows| { &mut m.duration },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "mduration",
                |m: &AccountWithCashflows| { &m.mduration },
                |m: &mut AccountWithCashflows| { &mut m.mduration },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "benchmark_mark",
                |m: &AccountWithCashflows| { &m.benchmark_mark },
                |m: &mut AccountWithCashflows| { &mut m.benchmark_mark },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "spread_rate",
                |m: &AccountWithCashflows| { &m.spread_rate },
                |m: &mut AccountWithCashflows| { &mut m.spread_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "treasury_glcode",
                |m: &AccountWithCashflows| { &m.treasury_glcode },
                |m: &mut AccountWithCashflows| { &mut m.treasury_glcode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "avg_mon_balance",
                |m: &AccountWithCashflows| { &m.avg_mon_balance },
                |m: &mut AccountWithCashflows| { &mut m.avg_mon_balance },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "deal_date",
                |m: &AccountWithCashflows| { &m.deal_date },
                |m: &mut AccountWithCashflows| { &mut m.deal_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cdr_flg",
                |m: &AccountWithCashflows| { &m.cdr_flg },
                |m: &mut AccountWithCashflows| { &mut m.cdr_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "gl_sub_head_code",
                |m: &AccountWithCashflows| { &m.gl_sub_head_code },
                |m: &mut AccountWithCashflows| { &mut m.gl_sub_head_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group",
                |m: &AccountWithCashflows| { &m.group },
                |m: &mut AccountWithCashflows| { &mut m.group },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "llg",
                |m: &AccountWithCashflows| { &m.llg },
                |m: &mut AccountWithCashflows| { &mut m.llg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "other_llg_classification",
                |m: &AccountWithCashflows| { &m.other_llg_classification },
                |m: &mut AccountWithCashflows| { &mut m.other_llg_classification },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cashflow_type",
                |m: &AccountWithCashflows| { &m.cashflow_type },
                |m: &mut AccountWithCashflows| { &mut m.cashflow_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "cashflow_amount",
                |m: &AccountWithCashflows| { &m.cashflow_amount },
                |m: &mut AccountWithCashflows| { &mut m.cashflow_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cashflow_currency",
                |m: &AccountWithCashflows| { &m.cashflow_currency },
                |m: &mut AccountWithCashflows| { &mut m.cashflow_currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cashflow_date",
                |m: &AccountWithCashflows| { &m.cashflow_date },
                |m: &mut AccountWithCashflows| { &mut m.cashflow_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.as_on_date = 0;
        self.deal_number.clear();
        self.portfolio.clear();
        self.instrument_id.clear();
        self.concat_id.clear();
        self.instrument_type.clear();
        self.branch_code.clear();
        self.category.clear();
        self.isin_code.clear();
        self.security_name.clear();
        self.face_value = 0.;
        self.book_value = 0.;
        self.appreciation_value = 0.;
        self.depreciation_value = 0.;
        self.wap = 0.;
        self.market_value = 0.;
        self.currency.clear();
        self.acc_yield = 0.;
        self.maturity_date = 0;
        self.coupon_classification.clear();
        self.coupon_rate = 0.;
        self.face_value_per_unit = 0.;
        self.outstanding_quantity = 0.;
        self.accrued_interest = 0.;
        self.coupon_frequency.clear();
        self.coupon_basis.clear();
        self.put_date = 0;
        self.call_date = 0;
        self.last_coupon = 0;
        self.next_coupon = 0;
        self.issue_date = 0;
        self.last_repricing_date = 0;
        self.next_repricing_date = 0;
        self.place.clear();
        self.country.clear();
        self.slr_non_slr.clear();
        self.listed_unlisted.clear();
        self.secured_unsecured.clear();
        self.issuer_id = 0;
        self.issuer_name.clear();
        self.issuer_type.clear();
        self.sub_issuer_type.clear();
        self.external_rating_agency.clear();
        self.rating.clear();
        self.issuer_guaranteed_by.clear();
        self.industry.clear();
        self.sub_industry.clear();
        self.npa_classification.clear();
        self.deal_value_date = 0;
        self.duration = 0.;
        self.mduration = 0.;
        self.benchmark_mark = 0.;
        self.spread_rate = 0.;
        self.treasury_glcode = 0.;
        self.avg_mon_balance = 0.;
        self.deal_date = 0;
        self.cdr_flg.clear();
        self.gl_sub_head_code = 0;
        self.group.clear();
        self.llg.clear();
        self.other_llg_classification.clear();
        self.cashflow_type.clear();
        self.cashflow_amount = 0.;
        self.cashflow_currency.clear();
        self.cashflow_date = 0;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14cf_investments.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\
    \x20\x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07\
    prinAmt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xd6\x12\n\x14A\
    ccountWithCashflows\x12\x1c\n\nas_on_date\x18\x01\x20\x01(\x03R\x08asOnD\
    ate\x12\x1f\n\x0bdeal_number\x18\x02\x20\x01(\tR\ndealNumber\x12\x1c\n\t\
    portfolio\x18\x03\x20\x01(\tR\tportfolio\x12#\n\rinstrument_id\x18\x04\
    \x20\x01(\tR\x0cinstrumentId\x12\x1b\n\tconcat_id\x18\x05\x20\x01(\tR\
    \x08concatId\x12'\n\x0finstrument_type\x18\x06\x20\x01(\tR\x0einstrument\
    Type\x12\x1f\n\x0bbranch_code\x18\x07\x20\x01(\tR\nbranchCode\x12\x1a\n\
    \x08category\x18\x08\x20\x01(\tR\x08category\x12\x1b\n\tisin_code\x18\t\
    \x20\x01(\tR\x08isinCode\x12#\n\rsecurity_name\x18\n\x20\x01(\tR\x0csecu\
    rityName\x12\x1d\n\nface_value\x18\x0b\x20\x01(\x01R\tfaceValue\x12\x1d\
    \n\nbook_value\x18\x0c\x20\x01(\x01R\tbookValue\x12-\n\x12appreciation_v\
    alue\x18\r\x20\x01(\x01R\x11appreciationValue\x12-\n\x12depreciation_val\
    ue\x18\x0e\x20\x01(\x01R\x11depreciationValue\x12\x10\n\x03wap\x18\x0f\
    \x20\x01(\x01R\x03wap\x12!\n\x0cmarket_value\x18\x10\x20\x01(\x01R\x0bma\
    rketValue\x12\x1a\n\x08currency\x18\x11\x20\x01(\tR\x08currency\x12\x1b\
    \n\tacc_yield\x18\x12\x20\x01(\x01R\x08accYield\x12#\n\rmaturity_date\
    \x18\x13\x20\x01(\x03R\x0cmaturityDate\x123\n\x15coupon_classification\
    \x18\x14\x20\x01(\tR\x14couponClassification\x12\x1f\n\x0bcoupon_rate\
    \x18\x15\x20\x01(\x01R\ncouponRate\x12-\n\x13face_value_per_unit\x18\x16\
    \x20\x01(\x01R\x10faceValuePerUnit\x121\n\x14outstanding_quantity\x18\
    \x17\x20\x01(\x01R\x13outstandingQuantity\x12)\n\x10accrued_interest\x18\
    \x18\x20\x01(\x01R\x0faccruedInterest\x12)\n\x10coupon_frequency\x18\x19\
    \x20\x01(\tR\x0fcouponFrequency\x12!\n\x0ccoupon_basis\x18\x1a\x20\x01(\
    \tR\x0bcouponBasis\x12\x19\n\x08put_date\x18\x1b\x20\x01(\x03R\x07putDat\
    e\x12\x1b\n\tcall_date\x18\x1c\x20\x01(\x03R\x08callDate\x12\x1f\n\x0bla\
    st_coupon\x18\x1d\x20\x01(\x03R\nlastCoupon\x12\x1f\n\x0bnext_coupon\x18\
    \x1e\x20\x01(\x03R\nnextCoupon\x12\x1d\n\nissue_date\x18\x1f\x20\x01(\
    \x03R\tissueDate\x12.\n\x13last_repricing_date\x18\x20\x20\x01(\x03R\x11\
    lastRepricingDate\x12.\n\x13next_repricing_date\x18!\x20\x01(\x03R\x11ne\
    xtRepricingDate\x12\x14\n\x05place\x18\"\x20\x01(\tR\x05place\x12\x18\n\
    \x07country\x18#\x20\x01(\tR\x07country\x12\x1e\n\x0bslr_non_slr\x18$\
    \x20\x01(\tR\tslrNonSlr\x12'\n\x0flisted_unlisted\x18%\x20\x01(\tR\x0eli\
    stedUnlisted\x12+\n\x11secured_unsecured\x18&\x20\x01(\tR\x10securedUnse\
    cured\x12\x1b\n\tissuer_id\x18'\x20\x01(\x03R\x08issuerId\x12\x1f\n\x0bi\
    ssuer_name\x18(\x20\x01(\tR\nissuerName\x12\x1f\n\x0bissuer_type\x18)\
    \x20\x01(\tR\nissuerType\x12&\n\x0fsub_issuer_type\x18*\x20\x01(\tR\rsub\
    IssuerType\x124\n\x16external_rating_agency\x18+\x20\x01(\tR\x14external\
    RatingAgency\x12\x16\n\x06rating\x18,\x20\x01(\tR\x06rating\x120\n\x14is\
    suer_guaranteed_by\x18-\x20\x01(\tR\x12issuerGuaranteedBy\x12\x1a\n\x08i\
    ndustry\x18.\x20\x01(\tR\x08industry\x12!\n\x0csub_industry\x18/\x20\x01\
    (\tR\x0bsubIndustry\x12-\n\x12npa_classification\x180\x20\x01(\tR\x11npa\
    Classification\x12&\n\x0fdeal_value_date\x181\x20\x01(\x03R\rdealValueDa\
    te\x12\x1a\n\x08duration\x182\x20\x01(\x01R\x08duration\x12\x1c\n\tmdura\
    tion\x183\x20\x01(\x01R\tmduration\x12%\n\x0ebenchmark_mark\x184\x20\x01\
    (\x01R\rbenchmarkMark\x12\x1f\n\x0bspread_rate\x185\x20\x01(\x01R\nsprea\
    dRate\x12'\n\x0ftreasury_glcode\x186\x20\x01(\x01R\x0etreasuryGlcode\x12\
    &\n\x0favg_mon_balance\x187\x20\x01(\x01R\ravgMonBalance\x12\x1b\n\tdeal\
    _date\x188\x20\x01(\x03R\x08dealDate\x12\x17\n\x07cdr_flg\x189\x20\x01(\
    \tR\x06cdrFlg\x12'\n\x10gl_sub_head_code\x18:\x20\x01(\x03R\rglSubHeadCo\
    de\x12\x14\n\x05group\x18;\x20\x01(\tR\x05group\x12\x10\n\x03llg\x18<\
    \x20\x01(\tR\x03llg\x128\n\x18other_llg_classification\x18=\x20\x01(\tR\
    \x16otherLlgClassification\x12#\n\rcashflow_type\x18>\x20\x01(\tR\x0ccas\
    hflowType\x12'\n\x0fcashflow_amount\x18?\x20\x01(\x01R\x0ecashflowAmount\
    \x12+\n\x11cashflow_currency\x18@\x20\x01(\tR\x10cashflowCurrency\x12#\n\
    \rcashflow_date\x18A\x20\x01(\x03R\x0ccashflowDate\x12'\n\tcashflows\x18\
    B\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
