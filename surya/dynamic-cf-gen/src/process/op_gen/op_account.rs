// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Account {
    // message fields
    pub coa: ::std::string::String,
    pub acc_id: ::std::string::String,
    pub acc_open_date: i64,
    pub tenor: ::std::string::String,
    pub payout_freq: ::std::string::String,
    pub int_pay_freq: ::std::string::String,
    pub maturity_date: i64,
    pub os_amount: f64,
    pub currency: ::std::string::String,
    pub cf_type: ::std::string::String,
    pub int_basis: ::std::string::String,
    pub int_rate: f64,
    pub bm: ::std::string::String,
    pub bm_freq: ::std::string::String,
    pub bm_res_days: i32,
    pub next_rep_date: i64,
    pub bm_rate: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Account {
    fn default() -> &'a Account {
        <Account as ::protobuf::Message>::default_instance()
    }
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    // string coa = 1;


    pub fn get_coa(&self) -> &str {
        &self.coa
    }
    pub fn clear_coa(&mut self) {
        self.coa.clear();
    }

    // Param is passed by value, moved
    pub fn set_coa(&mut self, v: ::std::string::String) {
        self.coa = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coa(&mut self) -> &mut ::std::string::String {
        &mut self.coa
    }

    // Take field
    pub fn take_coa(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coa, ::std::string::String::new())
    }

    // string acc_id = 2;


    pub fn get_acc_id(&self) -> &str {
        &self.acc_id
    }
    pub fn clear_acc_id(&mut self) {
        self.acc_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_id(&mut self, v: ::std::string::String) {
        self.acc_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_id(&mut self) -> &mut ::std::string::String {
        &mut self.acc_id
    }

    // Take field
    pub fn take_acc_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_id, ::std::string::String::new())
    }

    // int64 acc_open_date = 3;


    pub fn get_acc_open_date(&self) -> i64 {
        self.acc_open_date
    }
    pub fn clear_acc_open_date(&mut self) {
        self.acc_open_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_acc_open_date(&mut self, v: i64) {
        self.acc_open_date = v;
    }

    // string tenor = 4;


    pub fn get_tenor(&self) -> &str {
        &self.tenor
    }
    pub fn clear_tenor(&mut self) {
        self.tenor.clear();
    }

    // Param is passed by value, moved
    pub fn set_tenor(&mut self, v: ::std::string::String) {
        self.tenor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tenor(&mut self) -> &mut ::std::string::String {
        &mut self.tenor
    }

    // Take field
    pub fn take_tenor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tenor, ::std::string::String::new())
    }

    // string payout_freq = 5;


    pub fn get_payout_freq(&self) -> &str {
        &self.payout_freq
    }
    pub fn clear_payout_freq(&mut self) {
        self.payout_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_payout_freq(&mut self, v: ::std::string::String) {
        self.payout_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payout_freq(&mut self) -> &mut ::std::string::String {
        &mut self.payout_freq
    }

    // Take field
    pub fn take_payout_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.payout_freq, ::std::string::String::new())
    }

    // string int_pay_freq = 6;


    pub fn get_int_pay_freq(&self) -> &str {
        &self.int_pay_freq
    }
    pub fn clear_int_pay_freq(&mut self) {
        self.int_pay_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_pay_freq(&mut self, v: ::std::string::String) {
        self.int_pay_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_pay_freq(&mut self) -> &mut ::std::string::String {
        &mut self.int_pay_freq
    }

    // Take field
    pub fn take_int_pay_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_pay_freq, ::std::string::String::new())
    }

    // int64 maturity_date = 7;


    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }
    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    // double os_amount = 8;


    pub fn get_os_amount(&self) -> f64 {
        self.os_amount
    }
    pub fn clear_os_amount(&mut self) {
        self.os_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_os_amount(&mut self, v: f64) {
        self.os_amount = v;
    }

    // string currency = 9;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // string cf_type = 10;


    pub fn get_cf_type(&self) -> &str {
        &self.cf_type
    }
    pub fn clear_cf_type(&mut self) {
        self.cf_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_cf_type(&mut self, v: ::std::string::String) {
        self.cf_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf_type(&mut self) -> &mut ::std::string::String {
        &mut self.cf_type
    }

    // Take field
    pub fn take_cf_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cf_type, ::std::string::String::new())
    }

    // string int_basis = 11;


    pub fn get_int_basis(&self) -> &str {
        &self.int_basis
    }
    pub fn clear_int_basis(&mut self) {
        self.int_basis.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_basis(&mut self, v: ::std::string::String) {
        self.int_basis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_basis(&mut self) -> &mut ::std::string::String {
        &mut self.int_basis
    }

    // Take field
    pub fn take_int_basis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_basis, ::std::string::String::new())
    }

    // double int_rate = 12;


    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }
    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    // string bm = 13;


    pub fn get_bm(&self) -> &str {
        &self.bm
    }
    pub fn clear_bm(&mut self) {
        self.bm.clear();
    }

    // Param is passed by value, moved
    pub fn set_bm(&mut self, v: ::std::string::String) {
        self.bm = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bm(&mut self) -> &mut ::std::string::String {
        &mut self.bm
    }

    // Take field
    pub fn take_bm(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bm, ::std::string::String::new())
    }

    // string bm_freq = 14;


    pub fn get_bm_freq(&self) -> &str {
        &self.bm_freq
    }
    pub fn clear_bm_freq(&mut self) {
        self.bm_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_bm_freq(&mut self, v: ::std::string::String) {
        self.bm_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bm_freq(&mut self) -> &mut ::std::string::String {
        &mut self.bm_freq
    }

    // Take field
    pub fn take_bm_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bm_freq, ::std::string::String::new())
    }

    // int32 bm_res_days = 15;


    pub fn get_bm_res_days(&self) -> i32 {
        self.bm_res_days
    }
    pub fn clear_bm_res_days(&mut self) {
        self.bm_res_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_bm_res_days(&mut self, v: i32) {
        self.bm_res_days = v;
    }

    // int64 next_rep_date = 16;


    pub fn get_next_rep_date(&self) -> i64 {
        self.next_rep_date
    }
    pub fn clear_next_rep_date(&mut self) {
        self.next_rep_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_rep_date(&mut self, v: i64) {
        self.next_rep_date = v;
    }

    // double bm_rate = 17;


    pub fn get_bm_rate(&self) -> f64 {
        self.bm_rate
    }
    pub fn clear_bm_rate(&mut self) {
        self.bm_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bm_rate(&mut self, v: f64) {
        self.bm_rate = v;
    }

    // repeated .Cashflow cashflows = 18;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Account {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coa)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acc_open_date = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tenor)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.payout_freq)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_pay_freq)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.os_amount = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cf_type)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_basis)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bm)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bm_freq)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.bm_res_days = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_rep_date = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bm_rate = tmp;
                },
                18 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.coa.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.coa);
        }
        if !self.acc_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.acc_id);
        }
        if self.acc_open_date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.acc_open_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.tenor.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.tenor);
        }
        if !self.payout_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.payout_freq);
        }
        if !self.int_pay_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.int_pay_freq);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(7, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.os_amount != 0. {
            my_size += 9;
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.currency);
        }
        if !self.cf_type.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.cf_type);
        }
        if !self.int_basis.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.int_basis);
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if !self.bm.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.bm);
        }
        if !self.bm_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.bm_freq);
        }
        if self.bm_res_days != 0 {
            my_size += ::protobuf::rt::value_size(15, self.bm_res_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_rep_date != 0 {
            my_size += ::protobuf::rt::value_size(16, self.next_rep_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bm_rate != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.coa.is_empty() {
            os.write_string(1, &self.coa)?;
        }
        if !self.acc_id.is_empty() {
            os.write_string(2, &self.acc_id)?;
        }
        if self.acc_open_date != 0 {
            os.write_int64(3, self.acc_open_date)?;
        }
        if !self.tenor.is_empty() {
            os.write_string(4, &self.tenor)?;
        }
        if !self.payout_freq.is_empty() {
            os.write_string(5, &self.payout_freq)?;
        }
        if !self.int_pay_freq.is_empty() {
            os.write_string(6, &self.int_pay_freq)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(7, self.maturity_date)?;
        }
        if self.os_amount != 0. {
            os.write_double(8, self.os_amount)?;
        }
        if !self.currency.is_empty() {
            os.write_string(9, &self.currency)?;
        }
        if !self.cf_type.is_empty() {
            os.write_string(10, &self.cf_type)?;
        }
        if !self.int_basis.is_empty() {
            os.write_string(11, &self.int_basis)?;
        }
        if self.int_rate != 0. {
            os.write_double(12, self.int_rate)?;
        }
        if !self.bm.is_empty() {
            os.write_string(13, &self.bm)?;
        }
        if !self.bm_freq.is_empty() {
            os.write_string(14, &self.bm_freq)?;
        }
        if self.bm_res_days != 0 {
            os.write_int32(15, self.bm_res_days)?;
        }
        if self.next_rep_date != 0 {
            os.write_int64(16, self.next_rep_date)?;
        }
        if self.bm_rate != 0. {
            os.write_double(17, self.bm_rate)?;
        }
        for v in &self.cashflows {
            os.write_tag(18, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Account {
        Account::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "coa",
                |m: &Account| { &m.coa },
                |m: &mut Account| { &mut m.coa },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acc_id",
                |m: &Account| { &m.acc_id },
                |m: &mut Account| { &mut m.acc_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "acc_open_date",
                |m: &Account| { &m.acc_open_date },
                |m: &mut Account| { &mut m.acc_open_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tenor",
                |m: &Account| { &m.tenor },
                |m: &mut Account| { &mut m.tenor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "payout_freq",
                |m: &Account| { &m.payout_freq },
                |m: &mut Account| { &mut m.payout_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_pay_freq",
                |m: &Account| { &m.int_pay_freq },
                |m: &mut Account| { &mut m.int_pay_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "maturity_date",
                |m: &Account| { &m.maturity_date },
                |m: &mut Account| { &mut m.maturity_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "os_amount",
                |m: &Account| { &m.os_amount },
                |m: &mut Account| { &mut m.os_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &Account| { &m.currency },
                |m: &mut Account| { &mut m.currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cf_type",
                |m: &Account| { &m.cf_type },
                |m: &mut Account| { &mut m.cf_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_basis",
                |m: &Account| { &m.int_basis },
                |m: &mut Account| { &mut m.int_basis },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_rate",
                |m: &Account| { &m.int_rate },
                |m: &mut Account| { &mut m.int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bm",
                |m: &Account| { &m.bm },
                |m: &mut Account| { &mut m.bm },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bm_freq",
                |m: &Account| { &m.bm_freq },
                |m: &mut Account| { &mut m.bm_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "bm_res_days",
                |m: &Account| { &m.bm_res_days },
                |m: &mut Account| { &mut m.bm_res_days },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_rep_date",
                |m: &Account| { &m.next_rep_date },
                |m: &mut Account| { &mut m.next_rep_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bm_rate",
                |m: &Account| { &m.bm_rate },
                |m: &mut Account| { &mut m.bm_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &Account| { &m.cashflows },
                |m: &mut Account| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Account>(
                "Account",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Account {
        static instance: ::protobuf::rt::LazyV2<Account> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Account::new)
    }
}

impl ::protobuf::Clear for Account {
    fn clear(&mut self) {
        self.coa.clear();
        self.acc_id.clear();
        self.acc_open_date = 0;
        self.tenor.clear();
        self.payout_freq.clear();
        self.int_pay_freq.clear();
        self.maturity_date = 0;
        self.os_amount = 0.;
        self.currency.clear();
        self.cf_type.clear();
        self.int_basis.clear();
        self.int_rate = 0.;
        self.bm.clear();
        self.bm_freq.clear();
        self.bm_res_days = 0;
        self.next_rep_date = 0;
        self.bm_rate = 0.;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\
    \x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\
    \x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\
    \x04date\"\x8d\x04\n\x07Account\x12\x10\n\x03coa\x18\x01\x20\x01(\tR\x03\
    coa\x12\x15\n\x06acc_id\x18\x02\x20\x01(\tR\x05accId\x12\"\n\racc_open_d\
    ate\x18\x03\x20\x01(\x03R\x0baccOpenDate\x12\x14\n\x05tenor\x18\x04\x20\
    \x01(\tR\x05tenor\x12\x1f\n\x0bpayout_freq\x18\x05\x20\x01(\tR\npayoutFr\
    eq\x12\x20\n\x0cint_pay_freq\x18\x06\x20\x01(\tR\nintPayFreq\x12#\n\rmat\
    urity_date\x18\x07\x20\x01(\x03R\x0cmaturityDate\x12\x1b\n\tos_amount\
    \x18\x08\x20\x01(\x01R\x08osAmount\x12\x1a\n\x08currency\x18\t\x20\x01(\
    \tR\x08currency\x12\x17\n\x07cf_type\x18\n\x20\x01(\tR\x06cfType\x12\x1b\
    \n\tint_basis\x18\x0b\x20\x01(\tR\x08intBasis\x12\x19\n\x08int_rate\x18\
    \x0c\x20\x01(\x01R\x07intRate\x12\x0e\n\x02bm\x18\r\x20\x01(\tR\x02bm\
    \x12\x17\n\x07bm_freq\x18\x0e\x20\x01(\tR\x06bmFreq\x12\x1e\n\x0bbm_res_\
    days\x18\x0f\x20\x01(\x05R\tbmResDays\x12\"\n\rnext_rep_date\x18\x10\x20\
    \x01(\x03R\x0bnextRepDate\x12\x17\n\x07bm_rate\x18\x11\x20\x01(\x01R\x06\
    bmRate\x12'\n\tcashflows\x18\x12\x20\x03(\x0b2\t.CashflowR\tcashflowsb\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
