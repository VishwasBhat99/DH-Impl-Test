// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Account {
    // message fields
    pub branch: ::std::string::String,
    pub product: ::std::string::String,
    pub reference: ::std::string::String,
    pub ussr_ref_no: ::std::string::String,
    pub applicant: ::std::string::String,
    pub beneficiary: ::std::string::String,
    pub ccy: ::std::string::String,
    pub contract_amt: f64,
    pub amt: f64,
    pub curr_avail: f64,
    pub laib_oust_amt: f64,
    pub issue_dt: ::std::string::String,
    pub exp_dt: ::std::string::String,
    pub closure: ::std::string::String,
    pub tenor: ::std::string::String,
    pub credit_line: ::std::string::String,
    pub status: ::std::string::String,
    pub fwd_cover: ::std::string::String,
    pub customer: ::std::string::String,
    pub last_res_dt: ::std::string::String,
    pub lc_code: ::std::string::String,
    pub lg_code: ::std::string::String,
    pub comm_earned: ::std::string::String,
    pub cust_no: ::std::string::String,
    pub cust_name: ::std::string::String,
    pub sec_unsec: ::std::string::String,
    pub bank_non_bank: ::std::string::String,
    pub rpt_dt: ::std::string::String,
    pub pay_on_demand: ::std::string::String,
    pub backed_by_td: ::std::string::String,
    pub trade_non_trade: ::std::string::String,
    pub td_exp_dt: ::std::string::String,
    pub td_tenor: i64,
    pub as_on_dt: ::std::string::String,
    pub deal_type: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    // string branch = 1;

    pub fn clear_branch(&mut self) {
        self.branch.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch(&mut self, v: ::std::string::String) {
        self.branch = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch(&mut self) -> &mut ::std::string::String {
        &mut self.branch
    }

    // Take field
    pub fn take_branch(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch, ::std::string::String::new())
    }

    pub fn get_branch(&self) -> &str {
        &self.branch
    }

    // string product = 2;

    pub fn clear_product(&mut self) {
        self.product.clear();
    }

    // Param is passed by value, moved
    pub fn set_product(&mut self, v: ::std::string::String) {
        self.product = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product(&mut self) -> &mut ::std::string::String {
        &mut self.product
    }

    // Take field
    pub fn take_product(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product, ::std::string::String::new())
    }

    pub fn get_product(&self) -> &str {
        &self.product
    }

    // string reference = 3;

    pub fn clear_reference(&mut self) {
        self.reference.clear();
    }

    // Param is passed by value, moved
    pub fn set_reference(&mut self, v: ::std::string::String) {
        self.reference = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reference(&mut self) -> &mut ::std::string::String {
        &mut self.reference
    }

    // Take field
    pub fn take_reference(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reference, ::std::string::String::new())
    }

    pub fn get_reference(&self) -> &str {
        &self.reference
    }

    // string ussr_ref_no = 4;

    pub fn clear_ussr_ref_no(&mut self) {
        self.ussr_ref_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_ussr_ref_no(&mut self, v: ::std::string::String) {
        self.ussr_ref_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ussr_ref_no(&mut self) -> &mut ::std::string::String {
        &mut self.ussr_ref_no
    }

    // Take field
    pub fn take_ussr_ref_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ussr_ref_no, ::std::string::String::new())
    }

    pub fn get_ussr_ref_no(&self) -> &str {
        &self.ussr_ref_no
    }

    // string applicant = 5;

    pub fn clear_applicant(&mut self) {
        self.applicant.clear();
    }

    // Param is passed by value, moved
    pub fn set_applicant(&mut self, v: ::std::string::String) {
        self.applicant = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_applicant(&mut self) -> &mut ::std::string::String {
        &mut self.applicant
    }

    // Take field
    pub fn take_applicant(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.applicant, ::std::string::String::new())
    }

    pub fn get_applicant(&self) -> &str {
        &self.applicant
    }

    // string beneficiary = 6;

    pub fn clear_beneficiary(&mut self) {
        self.beneficiary.clear();
    }

    // Param is passed by value, moved
    pub fn set_beneficiary(&mut self, v: ::std::string::String) {
        self.beneficiary = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_beneficiary(&mut self) -> &mut ::std::string::String {
        &mut self.beneficiary
    }

    // Take field
    pub fn take_beneficiary(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.beneficiary, ::std::string::String::new())
    }

    pub fn get_beneficiary(&self) -> &str {
        &self.beneficiary
    }

    // string ccy = 7;

    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }

    // double contract_amt = 8;

    pub fn clear_contract_amt(&mut self) {
        self.contract_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_contract_amt(&mut self, v: f64) {
        self.contract_amt = v;
    }

    pub fn get_contract_amt(&self) -> f64 {
        self.contract_amt
    }

    // double amt = 9;

    pub fn clear_amt(&mut self) {
        self.amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amt(&mut self, v: f64) {
        self.amt = v;
    }

    pub fn get_amt(&self) -> f64 {
        self.amt
    }

    // double curr_avail = 10;

    pub fn clear_curr_avail(&mut self) {
        self.curr_avail = 0.;
    }

    // Param is passed by value, moved
    pub fn set_curr_avail(&mut self, v: f64) {
        self.curr_avail = v;
    }

    pub fn get_curr_avail(&self) -> f64 {
        self.curr_avail
    }

    // double laib_oust_amt = 11;

    pub fn clear_laib_oust_amt(&mut self) {
        self.laib_oust_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_laib_oust_amt(&mut self, v: f64) {
        self.laib_oust_amt = v;
    }

    pub fn get_laib_oust_amt(&self) -> f64 {
        self.laib_oust_amt
    }

    // string issue_dt = 12;

    pub fn clear_issue_dt(&mut self) {
        self.issue_dt.clear();
    }

    // Param is passed by value, moved
    pub fn set_issue_dt(&mut self, v: ::std::string::String) {
        self.issue_dt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issue_dt(&mut self) -> &mut ::std::string::String {
        &mut self.issue_dt
    }

    // Take field
    pub fn take_issue_dt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issue_dt, ::std::string::String::new())
    }

    pub fn get_issue_dt(&self) -> &str {
        &self.issue_dt
    }

    // string exp_dt = 13;

    pub fn clear_exp_dt(&mut self) {
        self.exp_dt.clear();
    }

    // Param is passed by value, moved
    pub fn set_exp_dt(&mut self, v: ::std::string::String) {
        self.exp_dt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exp_dt(&mut self) -> &mut ::std::string::String {
        &mut self.exp_dt
    }

    // Take field
    pub fn take_exp_dt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.exp_dt, ::std::string::String::new())
    }

    pub fn get_exp_dt(&self) -> &str {
        &self.exp_dt
    }

    // string closure = 14;

    pub fn clear_closure(&mut self) {
        self.closure.clear();
    }

    // Param is passed by value, moved
    pub fn set_closure(&mut self, v: ::std::string::String) {
        self.closure = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_closure(&mut self) -> &mut ::std::string::String {
        &mut self.closure
    }

    // Take field
    pub fn take_closure(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.closure, ::std::string::String::new())
    }

    pub fn get_closure(&self) -> &str {
        &self.closure
    }

    // string tenor = 15;

    pub fn clear_tenor(&mut self) {
        self.tenor.clear();
    }

    // Param is passed by value, moved
    pub fn set_tenor(&mut self, v: ::std::string::String) {
        self.tenor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tenor(&mut self) -> &mut ::std::string::String {
        &mut self.tenor
    }

    // Take field
    pub fn take_tenor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tenor, ::std::string::String::new())
    }

    pub fn get_tenor(&self) -> &str {
        &self.tenor
    }

    // string credit_line = 16;

    pub fn clear_credit_line(&mut self) {
        self.credit_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_credit_line(&mut self, v: ::std::string::String) {
        self.credit_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_credit_line(&mut self) -> &mut ::std::string::String {
        &mut self.credit_line
    }

    // Take field
    pub fn take_credit_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.credit_line, ::std::string::String::new())
    }

    pub fn get_credit_line(&self) -> &str {
        &self.credit_line
    }

    // string status = 17;

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }

    pub fn get_status(&self) -> &str {
        &self.status
    }

    // string fwd_cover = 18;

    pub fn clear_fwd_cover(&mut self) {
        self.fwd_cover.clear();
    }

    // Param is passed by value, moved
    pub fn set_fwd_cover(&mut self, v: ::std::string::String) {
        self.fwd_cover = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fwd_cover(&mut self) -> &mut ::std::string::String {
        &mut self.fwd_cover
    }

    // Take field
    pub fn take_fwd_cover(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fwd_cover, ::std::string::String::new())
    }

    pub fn get_fwd_cover(&self) -> &str {
        &self.fwd_cover
    }

    // string customer = 19;

    pub fn clear_customer(&mut self) {
        self.customer.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer(&mut self, v: ::std::string::String) {
        self.customer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer(&mut self) -> &mut ::std::string::String {
        &mut self.customer
    }

    // Take field
    pub fn take_customer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer, ::std::string::String::new())
    }

    pub fn get_customer(&self) -> &str {
        &self.customer
    }

    // string last_res_dt = 20;

    pub fn clear_last_res_dt(&mut self) {
        self.last_res_dt.clear();
    }

    // Param is passed by value, moved
    pub fn set_last_res_dt(&mut self, v: ::std::string::String) {
        self.last_res_dt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_res_dt(&mut self) -> &mut ::std::string::String {
        &mut self.last_res_dt
    }

    // Take field
    pub fn take_last_res_dt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.last_res_dt, ::std::string::String::new())
    }

    pub fn get_last_res_dt(&self) -> &str {
        &self.last_res_dt
    }

    // string lc_code = 21;

    pub fn clear_lc_code(&mut self) {
        self.lc_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_lc_code(&mut self, v: ::std::string::String) {
        self.lc_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lc_code(&mut self) -> &mut ::std::string::String {
        &mut self.lc_code
    }

    // Take field
    pub fn take_lc_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lc_code, ::std::string::String::new())
    }

    pub fn get_lc_code(&self) -> &str {
        &self.lc_code
    }

    // string lg_code = 22;

    pub fn clear_lg_code(&mut self) {
        self.lg_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_lg_code(&mut self, v: ::std::string::String) {
        self.lg_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lg_code(&mut self) -> &mut ::std::string::String {
        &mut self.lg_code
    }

    // Take field
    pub fn take_lg_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lg_code, ::std::string::String::new())
    }

    pub fn get_lg_code(&self) -> &str {
        &self.lg_code
    }

    // string comm_earned = 23;

    pub fn clear_comm_earned(&mut self) {
        self.comm_earned.clear();
    }

    // Param is passed by value, moved
    pub fn set_comm_earned(&mut self, v: ::std::string::String) {
        self.comm_earned = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_comm_earned(&mut self) -> &mut ::std::string::String {
        &mut self.comm_earned
    }

    // Take field
    pub fn take_comm_earned(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.comm_earned, ::std::string::String::new())
    }

    pub fn get_comm_earned(&self) -> &str {
        &self.comm_earned
    }

    // string cust_no = 24;

    pub fn clear_cust_no(&mut self) {
        self.cust_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_no(&mut self, v: ::std::string::String) {
        self.cust_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_no(&mut self) -> &mut ::std::string::String {
        &mut self.cust_no
    }

    // Take field
    pub fn take_cust_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_no, ::std::string::String::new())
    }

    pub fn get_cust_no(&self) -> &str {
        &self.cust_no
    }

    // string cust_name = 25;

    pub fn clear_cust_name(&mut self) {
        self.cust_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_name(&mut self, v: ::std::string::String) {
        self.cust_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_name
    }

    // Take field
    pub fn take_cust_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_name, ::std::string::String::new())
    }

    pub fn get_cust_name(&self) -> &str {
        &self.cust_name
    }

    // string sec_unsec = 26;

    pub fn clear_sec_unsec(&mut self) {
        self.sec_unsec.clear();
    }

    // Param is passed by value, moved
    pub fn set_sec_unsec(&mut self, v: ::std::string::String) {
        self.sec_unsec = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sec_unsec(&mut self) -> &mut ::std::string::String {
        &mut self.sec_unsec
    }

    // Take field
    pub fn take_sec_unsec(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sec_unsec, ::std::string::String::new())
    }

    pub fn get_sec_unsec(&self) -> &str {
        &self.sec_unsec
    }

    // string bank_non_bank = 27;

    pub fn clear_bank_non_bank(&mut self) {
        self.bank_non_bank.clear();
    }

    // Param is passed by value, moved
    pub fn set_bank_non_bank(&mut self, v: ::std::string::String) {
        self.bank_non_bank = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bank_non_bank(&mut self) -> &mut ::std::string::String {
        &mut self.bank_non_bank
    }

    // Take field
    pub fn take_bank_non_bank(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bank_non_bank, ::std::string::String::new())
    }

    pub fn get_bank_non_bank(&self) -> &str {
        &self.bank_non_bank
    }

    // string rpt_dt = 28;

    pub fn clear_rpt_dt(&mut self) {
        self.rpt_dt.clear();
    }

    // Param is passed by value, moved
    pub fn set_rpt_dt(&mut self, v: ::std::string::String) {
        self.rpt_dt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rpt_dt(&mut self) -> &mut ::std::string::String {
        &mut self.rpt_dt
    }

    // Take field
    pub fn take_rpt_dt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rpt_dt, ::std::string::String::new())
    }

    pub fn get_rpt_dt(&self) -> &str {
        &self.rpt_dt
    }

    // string pay_on_demand = 29;

    pub fn clear_pay_on_demand(&mut self) {
        self.pay_on_demand.clear();
    }

    // Param is passed by value, moved
    pub fn set_pay_on_demand(&mut self, v: ::std::string::String) {
        self.pay_on_demand = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pay_on_demand(&mut self) -> &mut ::std::string::String {
        &mut self.pay_on_demand
    }

    // Take field
    pub fn take_pay_on_demand(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pay_on_demand, ::std::string::String::new())
    }

    pub fn get_pay_on_demand(&self) -> &str {
        &self.pay_on_demand
    }

    // string backed_by_td = 30;

    pub fn clear_backed_by_td(&mut self) {
        self.backed_by_td.clear();
    }

    // Param is passed by value, moved
    pub fn set_backed_by_td(&mut self, v: ::std::string::String) {
        self.backed_by_td = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_backed_by_td(&mut self) -> &mut ::std::string::String {
        &mut self.backed_by_td
    }

    // Take field
    pub fn take_backed_by_td(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.backed_by_td, ::std::string::String::new())
    }

    pub fn get_backed_by_td(&self) -> &str {
        &self.backed_by_td
    }

    // string trade_non_trade = 31;

    pub fn clear_trade_non_trade(&mut self) {
        self.trade_non_trade.clear();
    }

    // Param is passed by value, moved
    pub fn set_trade_non_trade(&mut self, v: ::std::string::String) {
        self.trade_non_trade = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trade_non_trade(&mut self) -> &mut ::std::string::String {
        &mut self.trade_non_trade
    }

    // Take field
    pub fn take_trade_non_trade(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trade_non_trade, ::std::string::String::new())
    }

    pub fn get_trade_non_trade(&self) -> &str {
        &self.trade_non_trade
    }

    // string td_exp_dt = 32;

    pub fn clear_td_exp_dt(&mut self) {
        self.td_exp_dt.clear();
    }

    // Param is passed by value, moved
    pub fn set_td_exp_dt(&mut self, v: ::std::string::String) {
        self.td_exp_dt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_td_exp_dt(&mut self) -> &mut ::std::string::String {
        &mut self.td_exp_dt
    }

    // Take field
    pub fn take_td_exp_dt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.td_exp_dt, ::std::string::String::new())
    }

    pub fn get_td_exp_dt(&self) -> &str {
        &self.td_exp_dt
    }

    // int64 td_tenor = 33;

    pub fn clear_td_tenor(&mut self) {
        self.td_tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_td_tenor(&mut self, v: i64) {
        self.td_tenor = v;
    }

    pub fn get_td_tenor(&self) -> i64 {
        self.td_tenor
    }

    // string as_on_dt = 34;

    pub fn clear_as_on_dt(&mut self) {
        self.as_on_dt.clear();
    }

    // Param is passed by value, moved
    pub fn set_as_on_dt(&mut self, v: ::std::string::String) {
        self.as_on_dt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_as_on_dt(&mut self) -> &mut ::std::string::String {
        &mut self.as_on_dt
    }

    // Take field
    pub fn take_as_on_dt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.as_on_dt, ::std::string::String::new())
    }

    pub fn get_as_on_dt(&self) -> &str {
        &self.as_on_dt
    }

    // string deal_type = 35;

    pub fn clear_deal_type(&mut self) {
        self.deal_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_type(&mut self, v: ::std::string::String) {
        self.deal_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_type(&mut self) -> &mut ::std::string::String {
        &mut self.deal_type
    }

    // Take field
    pub fn take_deal_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_type, ::std::string::String::new())
    }

    pub fn get_deal_type(&self) -> &str {
        &self.deal_type
    }
}

impl ::protobuf::Message for Account {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reference)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ussr_ref_no)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.applicant)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.beneficiary)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.contract_amt = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amt = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.curr_avail = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.laib_oust_amt = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issue_dt)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.exp_dt)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.closure)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tenor)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.credit_line)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fwd_cover)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.last_res_dt)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lc_code)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lg_code)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.comm_earned)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_no)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_name)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sec_unsec)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bank_non_bank)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rpt_dt)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pay_on_demand)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.backed_by_td)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trade_non_trade)?;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.td_exp_dt)?;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.td_tenor = tmp;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.as_on_dt)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_type)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.branch.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.branch);
        }
        if !self.product.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.product);
        }
        if !self.reference.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.reference);
        }
        if !self.ussr_ref_no.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.ussr_ref_no);
        }
        if !self.applicant.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.applicant);
        }
        if !self.beneficiary.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.beneficiary);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.ccy);
        }
        if self.contract_amt != 0. {
            my_size += 9;
        }
        if self.amt != 0. {
            my_size += 9;
        }
        if self.curr_avail != 0. {
            my_size += 9;
        }
        if self.laib_oust_amt != 0. {
            my_size += 9;
        }
        if !self.issue_dt.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.issue_dt);
        }
        if !self.exp_dt.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.exp_dt);
        }
        if !self.closure.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.closure);
        }
        if !self.tenor.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.tenor);
        }
        if !self.credit_line.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.credit_line);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.status);
        }
        if !self.fwd_cover.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.fwd_cover);
        }
        if !self.customer.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.customer);
        }
        if !self.last_res_dt.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.last_res_dt);
        }
        if !self.lc_code.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.lc_code);
        }
        if !self.lg_code.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.lg_code);
        }
        if !self.comm_earned.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.comm_earned);
        }
        if !self.cust_no.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.cust_no);
        }
        if !self.cust_name.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.cust_name);
        }
        if !self.sec_unsec.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.sec_unsec);
        }
        if !self.bank_non_bank.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.bank_non_bank);
        }
        if !self.rpt_dt.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.rpt_dt);
        }
        if !self.pay_on_demand.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.pay_on_demand);
        }
        if !self.backed_by_td.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.backed_by_td);
        }
        if !self.trade_non_trade.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.trade_non_trade);
        }
        if !self.td_exp_dt.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.td_exp_dt);
        }
        if self.td_tenor != 0 {
            my_size += ::protobuf::rt::value_size(33, self.td_tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.as_on_dt.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.as_on_dt);
        }
        if !self.deal_type.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.deal_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.branch.is_empty() {
            os.write_string(1, &self.branch)?;
        }
        if !self.product.is_empty() {
            os.write_string(2, &self.product)?;
        }
        if !self.reference.is_empty() {
            os.write_string(3, &self.reference)?;
        }
        if !self.ussr_ref_no.is_empty() {
            os.write_string(4, &self.ussr_ref_no)?;
        }
        if !self.applicant.is_empty() {
            os.write_string(5, &self.applicant)?;
        }
        if !self.beneficiary.is_empty() {
            os.write_string(6, &self.beneficiary)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(7, &self.ccy)?;
        }
        if self.contract_amt != 0. {
            os.write_double(8, self.contract_amt)?;
        }
        if self.amt != 0. {
            os.write_double(9, self.amt)?;
        }
        if self.curr_avail != 0. {
            os.write_double(10, self.curr_avail)?;
        }
        if self.laib_oust_amt != 0. {
            os.write_double(11, self.laib_oust_amt)?;
        }
        if !self.issue_dt.is_empty() {
            os.write_string(12, &self.issue_dt)?;
        }
        if !self.exp_dt.is_empty() {
            os.write_string(13, &self.exp_dt)?;
        }
        if !self.closure.is_empty() {
            os.write_string(14, &self.closure)?;
        }
        if !self.tenor.is_empty() {
            os.write_string(15, &self.tenor)?;
        }
        if !self.credit_line.is_empty() {
            os.write_string(16, &self.credit_line)?;
        }
        if !self.status.is_empty() {
            os.write_string(17, &self.status)?;
        }
        if !self.fwd_cover.is_empty() {
            os.write_string(18, &self.fwd_cover)?;
        }
        if !self.customer.is_empty() {
            os.write_string(19, &self.customer)?;
        }
        if !self.last_res_dt.is_empty() {
            os.write_string(20, &self.last_res_dt)?;
        }
        if !self.lc_code.is_empty() {
            os.write_string(21, &self.lc_code)?;
        }
        if !self.lg_code.is_empty() {
            os.write_string(22, &self.lg_code)?;
        }
        if !self.comm_earned.is_empty() {
            os.write_string(23, &self.comm_earned)?;
        }
        if !self.cust_no.is_empty() {
            os.write_string(24, &self.cust_no)?;
        }
        if !self.cust_name.is_empty() {
            os.write_string(25, &self.cust_name)?;
        }
        if !self.sec_unsec.is_empty() {
            os.write_string(26, &self.sec_unsec)?;
        }
        if !self.bank_non_bank.is_empty() {
            os.write_string(27, &self.bank_non_bank)?;
        }
        if !self.rpt_dt.is_empty() {
            os.write_string(28, &self.rpt_dt)?;
        }
        if !self.pay_on_demand.is_empty() {
            os.write_string(29, &self.pay_on_demand)?;
        }
        if !self.backed_by_td.is_empty() {
            os.write_string(30, &self.backed_by_td)?;
        }
        if !self.trade_non_trade.is_empty() {
            os.write_string(31, &self.trade_non_trade)?;
        }
        if !self.td_exp_dt.is_empty() {
            os.write_string(32, &self.td_exp_dt)?;
        }
        if self.td_tenor != 0 {
            os.write_int64(33, self.td_tenor)?;
        }
        if !self.as_on_dt.is_empty() {
            os.write_string(34, &self.as_on_dt)?;
        }
        if !self.deal_type.is_empty() {
            os.write_string(35, &self.deal_type)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Account {
        Account::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "branch",
                    |m: &Account| { &m.branch },
                    |m: &mut Account| { &mut m.branch },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "product",
                    |m: &Account| { &m.product },
                    |m: &mut Account| { &mut m.product },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "reference",
                    |m: &Account| { &m.reference },
                    |m: &mut Account| { &mut m.reference },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ussr_ref_no",
                    |m: &Account| { &m.ussr_ref_no },
                    |m: &mut Account| { &mut m.ussr_ref_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "applicant",
                    |m: &Account| { &m.applicant },
                    |m: &mut Account| { &mut m.applicant },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "beneficiary",
                    |m: &Account| { &m.beneficiary },
                    |m: &mut Account| { &mut m.beneficiary },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy",
                    |m: &Account| { &m.ccy },
                    |m: &mut Account| { &mut m.ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "contract_amt",
                    |m: &Account| { &m.contract_amt },
                    |m: &mut Account| { &mut m.contract_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "amt",
                    |m: &Account| { &m.amt },
                    |m: &mut Account| { &mut m.amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "curr_avail",
                    |m: &Account| { &m.curr_avail },
                    |m: &mut Account| { &mut m.curr_avail },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "laib_oust_amt",
                    |m: &Account| { &m.laib_oust_amt },
                    |m: &mut Account| { &mut m.laib_oust_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "issue_dt",
                    |m: &Account| { &m.issue_dt },
                    |m: &mut Account| { &mut m.issue_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "exp_dt",
                    |m: &Account| { &m.exp_dt },
                    |m: &mut Account| { &mut m.exp_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "closure",
                    |m: &Account| { &m.closure },
                    |m: &mut Account| { &mut m.closure },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "tenor",
                    |m: &Account| { &m.tenor },
                    |m: &mut Account| { &mut m.tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "credit_line",
                    |m: &Account| { &m.credit_line },
                    |m: &mut Account| { &mut m.credit_line },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "status",
                    |m: &Account| { &m.status },
                    |m: &mut Account| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "fwd_cover",
                    |m: &Account| { &m.fwd_cover },
                    |m: &mut Account| { &mut m.fwd_cover },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "customer",
                    |m: &Account| { &m.customer },
                    |m: &mut Account| { &mut m.customer },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "last_res_dt",
                    |m: &Account| { &m.last_res_dt },
                    |m: &mut Account| { &mut m.last_res_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "lc_code",
                    |m: &Account| { &m.lc_code },
                    |m: &mut Account| { &mut m.lc_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "lg_code",
                    |m: &Account| { &m.lg_code },
                    |m: &mut Account| { &mut m.lg_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "comm_earned",
                    |m: &Account| { &m.comm_earned },
                    |m: &mut Account| { &mut m.comm_earned },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_no",
                    |m: &Account| { &m.cust_no },
                    |m: &mut Account| { &mut m.cust_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_name",
                    |m: &Account| { &m.cust_name },
                    |m: &mut Account| { &mut m.cust_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sec_unsec",
                    |m: &Account| { &m.sec_unsec },
                    |m: &mut Account| { &mut m.sec_unsec },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bank_non_bank",
                    |m: &Account| { &m.bank_non_bank },
                    |m: &mut Account| { &mut m.bank_non_bank },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rpt_dt",
                    |m: &Account| { &m.rpt_dt },
                    |m: &mut Account| { &mut m.rpt_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pay_on_demand",
                    |m: &Account| { &m.pay_on_demand },
                    |m: &mut Account| { &mut m.pay_on_demand },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "backed_by_td",
                    |m: &Account| { &m.backed_by_td },
                    |m: &mut Account| { &mut m.backed_by_td },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "trade_non_trade",
                    |m: &Account| { &m.trade_non_trade },
                    |m: &mut Account| { &mut m.trade_non_trade },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "td_exp_dt",
                    |m: &Account| { &m.td_exp_dt },
                    |m: &mut Account| { &mut m.td_exp_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "td_tenor",
                    |m: &Account| { &m.td_tenor },
                    |m: &mut Account| { &mut m.td_tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "as_on_dt",
                    |m: &Account| { &m.as_on_dt },
                    |m: &mut Account| { &mut m.as_on_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_type",
                    |m: &Account| { &m.deal_type },
                    |m: &mut Account| { &mut m.deal_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Account>(
                    "Account",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Account {
        static mut instance: ::protobuf::lazy::Lazy<Account> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Account,
        };
        unsafe {
            instance.get(Account::new)
        }
    }
}

impl ::protobuf::Clear for Account {
    fn clear(&mut self) {
        self.clear_branch();
        self.clear_product();
        self.clear_reference();
        self.clear_ussr_ref_no();
        self.clear_applicant();
        self.clear_beneficiary();
        self.clear_ccy();
        self.clear_contract_amt();
        self.clear_amt();
        self.clear_curr_avail();
        self.clear_laib_oust_amt();
        self.clear_issue_dt();
        self.clear_exp_dt();
        self.clear_closure();
        self.clear_tenor();
        self.clear_credit_line();
        self.clear_status();
        self.clear_fwd_cover();
        self.clear_customer();
        self.clear_last_res_dt();
        self.clear_lc_code();
        self.clear_lg_code();
        self.clear_comm_earned();
        self.clear_cust_no();
        self.clear_cust_name();
        self.clear_sec_unsec();
        self.clear_bank_non_bank();
        self.clear_rpt_dt();
        self.clear_pay_on_demand();
        self.clear_backed_by_td();
        self.clear_trade_non_trade();
        self.clear_td_exp_dt();
        self.clear_td_tenor();
        self.clear_as_on_dt();
        self.clear_deal_type();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10proto/lcbg.proto\"\xf4\x07\n\x07Account\x12\x16\n\x06branch\x18\
    \x01\x20\x01(\tR\x06branch\x12\x18\n\x07product\x18\x02\x20\x01(\tR\x07p\
    roduct\x12\x1c\n\treference\x18\x03\x20\x01(\tR\treference\x12\x1e\n\x0b\
    ussr_ref_no\x18\x04\x20\x01(\tR\tussrRefNo\x12\x1c\n\tapplicant\x18\x05\
    \x20\x01(\tR\tapplicant\x12\x20\n\x0bbeneficiary\x18\x06\x20\x01(\tR\x0b\
    beneficiary\x12\x10\n\x03ccy\x18\x07\x20\x01(\tR\x03ccy\x12!\n\x0ccontra\
    ct_amt\x18\x08\x20\x01(\x01R\x0bcontractAmt\x12\x10\n\x03amt\x18\t\x20\
    \x01(\x01R\x03amt\x12\x1d\n\ncurr_avail\x18\n\x20\x01(\x01R\tcurrAvail\
    \x12\"\n\rlaib_oust_amt\x18\x0b\x20\x01(\x01R\x0blaibOustAmt\x12\x19\n\
    \x08issue_dt\x18\x0c\x20\x01(\tR\x07issueDt\x12\x15\n\x06exp_dt\x18\r\
    \x20\x01(\tR\x05expDt\x12\x18\n\x07closure\x18\x0e\x20\x01(\tR\x07closur\
    e\x12\x14\n\x05tenor\x18\x0f\x20\x01(\tR\x05tenor\x12\x1f\n\x0bcredit_li\
    ne\x18\x10\x20\x01(\tR\ncreditLine\x12\x16\n\x06status\x18\x11\x20\x01(\
    \tR\x06status\x12\x1b\n\tfwd_cover\x18\x12\x20\x01(\tR\x08fwdCover\x12\
    \x1a\n\x08customer\x18\x13\x20\x01(\tR\x08customer\x12\x1e\n\x0blast_res\
    _dt\x18\x14\x20\x01(\tR\tlastResDt\x12\x17\n\x07lc_code\x18\x15\x20\x01(\
    \tR\x06lcCode\x12\x17\n\x07lg_code\x18\x16\x20\x01(\tR\x06lgCode\x12\x1f\
    \n\x0bcomm_earned\x18\x17\x20\x01(\tR\ncommEarned\x12\x17\n\x07cust_no\
    \x18\x18\x20\x01(\tR\x06custNo\x12\x1b\n\tcust_name\x18\x19\x20\x01(\tR\
    \x08custName\x12\x1b\n\tsec_unsec\x18\x1a\x20\x01(\tR\x08secUnsec\x12\"\
    \n\rbank_non_bank\x18\x1b\x20\x01(\tR\x0bbankNonBank\x12\x15\n\x06rpt_dt\
    \x18\x1c\x20\x01(\tR\x05rptDt\x12\"\n\rpay_on_demand\x18\x1d\x20\x01(\tR\
    \x0bpayOnDemand\x12\x20\n\x0cbacked_by_td\x18\x1e\x20\x01(\tR\nbackedByT\
    d\x12&\n\x0ftrade_non_trade\x18\x1f\x20\x01(\tR\rtradeNonTrade\x12\x1a\n\
    \ttd_exp_dt\x18\x20\x20\x01(\tR\x07tdExpDt\x12\x19\n\x08td_tenor\x18!\
    \x20\x01(\x03R\x07tdTenor\x12\x18\n\x08as_on_dt\x18\"\x20\x01(\tR\x06asO\
    nDt\x12\x1b\n\tdeal_type\x18#\x20\x01(\tR\x08dealTypeb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
