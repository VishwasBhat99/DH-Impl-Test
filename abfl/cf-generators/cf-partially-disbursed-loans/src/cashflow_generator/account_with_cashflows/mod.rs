// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `contractual_outflow.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_amt",
                |m: &Cashflow| { &m.int_amt },
                |m: &mut Cashflow| { &mut m.int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "prin_amt",
                |m: &Cashflow| { &m.prin_amt },
                |m: &mut Cashflow| { &mut m.prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub account_id: ::std::string::String,
    pub customername: ::std::string::String,
    pub branch_name: ::std::string::String,
    pub customer_no: ::std::string::String,
    pub commonclientcode: ::std::string::String,
    pub productcode: ::std::string::String,
    pub loan_start_date: i64,
    pub maturity_date: i64,
    pub balance_term: f64,
    pub sanctionamount: f64,
    pub disbursed_amount: f64,
    pub currency: ::std::string::String,
    pub principal_ouststanding_amount: f64,
    pub overdue_interest: f64,
    pub overdue_principal: f64,
    pub pre_emi_outstanding_amount: f64,
    pub pre_emi_remaining: f64,
    pub interest_type: ::std::string::String,
    pub interestrate: f64,
    pub interest_calulation_method: ::std::string::String,
    pub number_of_total_emi: i64,
    pub emi_frequency: f64,
    pub installment_type: ::std::string::String,
    pub revised_lob: ::std::string::String,
    pub revised_vertical: ::std::string::String,
    pub accountstatus: ::std::string::String,
    pub weightedtenor: f64,
    pub sumprinout: f64,
    pub avgtenor: f64,
    pub factor: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string account_id = 1;


    pub fn get_account_id(&self) -> &str {
        &self.account_id
    }
    pub fn clear_account_id(&mut self) {
        self.account_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: ::std::string::String) {
        self.account_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_id(&mut self) -> &mut ::std::string::String {
        &mut self.account_id
    }

    // Take field
    pub fn take_account_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_id, ::std::string::String::new())
    }

    // string customername = 2;


    pub fn get_customername(&self) -> &str {
        &self.customername
    }
    pub fn clear_customername(&mut self) {
        self.customername.clear();
    }

    // Param is passed by value, moved
    pub fn set_customername(&mut self, v: ::std::string::String) {
        self.customername = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customername(&mut self) -> &mut ::std::string::String {
        &mut self.customername
    }

    // Take field
    pub fn take_customername(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customername, ::std::string::String::new())
    }

    // string branch_name = 3;


    pub fn get_branch_name(&self) -> &str {
        &self.branch_name
    }
    pub fn clear_branch_name(&mut self) {
        self.branch_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch_name(&mut self, v: ::std::string::String) {
        self.branch_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch_name(&mut self) -> &mut ::std::string::String {
        &mut self.branch_name
    }

    // Take field
    pub fn take_branch_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch_name, ::std::string::String::new())
    }

    // string customer_no = 4;


    pub fn get_customer_no(&self) -> &str {
        &self.customer_no
    }
    pub fn clear_customer_no(&mut self) {
        self.customer_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_no(&mut self, v: ::std::string::String) {
        self.customer_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_no(&mut self) -> &mut ::std::string::String {
        &mut self.customer_no
    }

    // Take field
    pub fn take_customer_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_no, ::std::string::String::new())
    }

    // string commonclientcode = 5;


    pub fn get_commonclientcode(&self) -> &str {
        &self.commonclientcode
    }
    pub fn clear_commonclientcode(&mut self) {
        self.commonclientcode.clear();
    }

    // Param is passed by value, moved
    pub fn set_commonclientcode(&mut self, v: ::std::string::String) {
        self.commonclientcode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commonclientcode(&mut self) -> &mut ::std::string::String {
        &mut self.commonclientcode
    }

    // Take field
    pub fn take_commonclientcode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.commonclientcode, ::std::string::String::new())
    }

    // string productcode = 6;


    pub fn get_productcode(&self) -> &str {
        &self.productcode
    }
    pub fn clear_productcode(&mut self) {
        self.productcode.clear();
    }

    // Param is passed by value, moved
    pub fn set_productcode(&mut self, v: ::std::string::String) {
        self.productcode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_productcode(&mut self) -> &mut ::std::string::String {
        &mut self.productcode
    }

    // Take field
    pub fn take_productcode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.productcode, ::std::string::String::new())
    }

    // int64 loan_start_date = 7;


    pub fn get_loan_start_date(&self) -> i64 {
        self.loan_start_date
    }
    pub fn clear_loan_start_date(&mut self) {
        self.loan_start_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_loan_start_date(&mut self, v: i64) {
        self.loan_start_date = v;
    }

    // int64 maturity_date = 8;


    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }
    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    // double balance_term = 9;


    pub fn get_balance_term(&self) -> f64 {
        self.balance_term
    }
    pub fn clear_balance_term(&mut self) {
        self.balance_term = 0.;
    }

    // Param is passed by value, moved
    pub fn set_balance_term(&mut self, v: f64) {
        self.balance_term = v;
    }

    // double sanctionamount = 10;


    pub fn get_sanctionamount(&self) -> f64 {
        self.sanctionamount
    }
    pub fn clear_sanctionamount(&mut self) {
        self.sanctionamount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sanctionamount(&mut self, v: f64) {
        self.sanctionamount = v;
    }

    // double disbursed_amount = 11;


    pub fn get_disbursed_amount(&self) -> f64 {
        self.disbursed_amount
    }
    pub fn clear_disbursed_amount(&mut self) {
        self.disbursed_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_disbursed_amount(&mut self, v: f64) {
        self.disbursed_amount = v;
    }

    // string currency = 12;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // double principal_ouststanding_amount = 13;


    pub fn get_principal_ouststanding_amount(&self) -> f64 {
        self.principal_ouststanding_amount
    }
    pub fn clear_principal_ouststanding_amount(&mut self) {
        self.principal_ouststanding_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_ouststanding_amount(&mut self, v: f64) {
        self.principal_ouststanding_amount = v;
    }

    // double overdue_interest = 14;


    pub fn get_overdue_interest(&self) -> f64 {
        self.overdue_interest
    }
    pub fn clear_overdue_interest(&mut self) {
        self.overdue_interest = 0.;
    }

    // Param is passed by value, moved
    pub fn set_overdue_interest(&mut self, v: f64) {
        self.overdue_interest = v;
    }

    // double overdue_principal = 15;


    pub fn get_overdue_principal(&self) -> f64 {
        self.overdue_principal
    }
    pub fn clear_overdue_principal(&mut self) {
        self.overdue_principal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_overdue_principal(&mut self, v: f64) {
        self.overdue_principal = v;
    }

    // double pre_emi_outstanding_amount = 16;


    pub fn get_pre_emi_outstanding_amount(&self) -> f64 {
        self.pre_emi_outstanding_amount
    }
    pub fn clear_pre_emi_outstanding_amount(&mut self) {
        self.pre_emi_outstanding_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pre_emi_outstanding_amount(&mut self, v: f64) {
        self.pre_emi_outstanding_amount = v;
    }

    // double pre_emi_remaining = 17;


    pub fn get_pre_emi_remaining(&self) -> f64 {
        self.pre_emi_remaining
    }
    pub fn clear_pre_emi_remaining(&mut self) {
        self.pre_emi_remaining = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pre_emi_remaining(&mut self, v: f64) {
        self.pre_emi_remaining = v;
    }

    // string interest_type = 18;


    pub fn get_interest_type(&self) -> &str {
        &self.interest_type
    }
    pub fn clear_interest_type(&mut self) {
        self.interest_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_interest_type(&mut self, v: ::std::string::String) {
        self.interest_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interest_type(&mut self) -> &mut ::std::string::String {
        &mut self.interest_type
    }

    // Take field
    pub fn take_interest_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interest_type, ::std::string::String::new())
    }

    // double interestrate = 19;


    pub fn get_interestrate(&self) -> f64 {
        self.interestrate
    }
    pub fn clear_interestrate(&mut self) {
        self.interestrate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interestrate(&mut self, v: f64) {
        self.interestrate = v;
    }

    // string interest_calulation_method = 20;


    pub fn get_interest_calulation_method(&self) -> &str {
        &self.interest_calulation_method
    }
    pub fn clear_interest_calulation_method(&mut self) {
        self.interest_calulation_method.clear();
    }

    // Param is passed by value, moved
    pub fn set_interest_calulation_method(&mut self, v: ::std::string::String) {
        self.interest_calulation_method = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interest_calulation_method(&mut self) -> &mut ::std::string::String {
        &mut self.interest_calulation_method
    }

    // Take field
    pub fn take_interest_calulation_method(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interest_calulation_method, ::std::string::String::new())
    }

    // int64 number_of_total_emi = 21;


    pub fn get_number_of_total_emi(&self) -> i64 {
        self.number_of_total_emi
    }
    pub fn clear_number_of_total_emi(&mut self) {
        self.number_of_total_emi = 0;
    }

    // Param is passed by value, moved
    pub fn set_number_of_total_emi(&mut self, v: i64) {
        self.number_of_total_emi = v;
    }

    // double emi_frequency = 22;


    pub fn get_emi_frequency(&self) -> f64 {
        self.emi_frequency
    }
    pub fn clear_emi_frequency(&mut self) {
        self.emi_frequency = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_frequency(&mut self, v: f64) {
        self.emi_frequency = v;
    }

    // string installment_type = 23;


    pub fn get_installment_type(&self) -> &str {
        &self.installment_type
    }
    pub fn clear_installment_type(&mut self) {
        self.installment_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_installment_type(&mut self, v: ::std::string::String) {
        self.installment_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_installment_type(&mut self) -> &mut ::std::string::String {
        &mut self.installment_type
    }

    // Take field
    pub fn take_installment_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.installment_type, ::std::string::String::new())
    }

    // string revised_lob = 24;


    pub fn get_revised_lob(&self) -> &str {
        &self.revised_lob
    }
    pub fn clear_revised_lob(&mut self) {
        self.revised_lob.clear();
    }

    // Param is passed by value, moved
    pub fn set_revised_lob(&mut self, v: ::std::string::String) {
        self.revised_lob = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_revised_lob(&mut self) -> &mut ::std::string::String {
        &mut self.revised_lob
    }

    // Take field
    pub fn take_revised_lob(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.revised_lob, ::std::string::String::new())
    }

    // string revised_vertical = 25;


    pub fn get_revised_vertical(&self) -> &str {
        &self.revised_vertical
    }
    pub fn clear_revised_vertical(&mut self) {
        self.revised_vertical.clear();
    }

    // Param is passed by value, moved
    pub fn set_revised_vertical(&mut self, v: ::std::string::String) {
        self.revised_vertical = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_revised_vertical(&mut self) -> &mut ::std::string::String {
        &mut self.revised_vertical
    }

    // Take field
    pub fn take_revised_vertical(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.revised_vertical, ::std::string::String::new())
    }

    // string accountstatus = 26;


    pub fn get_accountstatus(&self) -> &str {
        &self.accountstatus
    }
    pub fn clear_accountstatus(&mut self) {
        self.accountstatus.clear();
    }

    // Param is passed by value, moved
    pub fn set_accountstatus(&mut self, v: ::std::string::String) {
        self.accountstatus = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accountstatus(&mut self) -> &mut ::std::string::String {
        &mut self.accountstatus
    }

    // Take field
    pub fn take_accountstatus(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.accountstatus, ::std::string::String::new())
    }

    // double weightedtenor = 27;


    pub fn get_weightedtenor(&self) -> f64 {
        self.weightedtenor
    }
    pub fn clear_weightedtenor(&mut self) {
        self.weightedtenor = 0.;
    }

    // Param is passed by value, moved
    pub fn set_weightedtenor(&mut self, v: f64) {
        self.weightedtenor = v;
    }

    // double sumprinout = 28;


    pub fn get_sumprinout(&self) -> f64 {
        self.sumprinout
    }
    pub fn clear_sumprinout(&mut self) {
        self.sumprinout = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sumprinout(&mut self, v: f64) {
        self.sumprinout = v;
    }

    // double avgtenor = 29;


    pub fn get_avgtenor(&self) -> f64 {
        self.avgtenor
    }
    pub fn clear_avgtenor(&mut self) {
        self.avgtenor = 0.;
    }

    // Param is passed by value, moved
    pub fn set_avgtenor(&mut self, v: f64) {
        self.avgtenor = v;
    }

    // double factor = 30;


    pub fn get_factor(&self) -> f64 {
        self.factor
    }
    pub fn clear_factor(&mut self) {
        self.factor = 0.;
    }

    // Param is passed by value, moved
    pub fn set_factor(&mut self, v: f64) {
        self.factor = v;
    }

    // repeated .Cashflow cashflows = 31;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customername)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_no)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.commonclientcode)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.productcode)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.loan_start_date = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.balance_term = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.sanctionamount = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.disbursed_amount = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_ouststanding_amount = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.overdue_interest = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.overdue_principal = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pre_emi_outstanding_amount = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pre_emi_remaining = tmp;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interest_type)?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interestrate = tmp;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interest_calulation_method)?;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.number_of_total_emi = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_frequency = tmp;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.installment_type)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.revised_lob)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.revised_vertical)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.accountstatus)?;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.weightedtenor = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.sumprinout = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.avgtenor = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.factor = tmp;
                },
                31 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.account_id);
        }
        if !self.customername.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.customername);
        }
        if !self.branch_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.branch_name);
        }
        if !self.customer_no.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.customer_no);
        }
        if !self.commonclientcode.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.commonclientcode);
        }
        if !self.productcode.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.productcode);
        }
        if self.loan_start_date != 0 {
            my_size += ::protobuf::rt::value_size(7, self.loan_start_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(8, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.balance_term != 0. {
            my_size += 9;
        }
        if self.sanctionamount != 0. {
            my_size += 9;
        }
        if self.disbursed_amount != 0. {
            my_size += 9;
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.currency);
        }
        if self.principal_ouststanding_amount != 0. {
            my_size += 9;
        }
        if self.overdue_interest != 0. {
            my_size += 9;
        }
        if self.overdue_principal != 0. {
            my_size += 9;
        }
        if self.pre_emi_outstanding_amount != 0. {
            my_size += 10;
        }
        if self.pre_emi_remaining != 0. {
            my_size += 10;
        }
        if !self.interest_type.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.interest_type);
        }
        if self.interestrate != 0. {
            my_size += 10;
        }
        if !self.interest_calulation_method.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.interest_calulation_method);
        }
        if self.number_of_total_emi != 0 {
            my_size += ::protobuf::rt::value_size(21, self.number_of_total_emi, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.emi_frequency != 0. {
            my_size += 10;
        }
        if !self.installment_type.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.installment_type);
        }
        if !self.revised_lob.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.revised_lob);
        }
        if !self.revised_vertical.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.revised_vertical);
        }
        if !self.accountstatus.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.accountstatus);
        }
        if self.weightedtenor != 0. {
            my_size += 10;
        }
        if self.sumprinout != 0. {
            my_size += 10;
        }
        if self.avgtenor != 0. {
            my_size += 10;
        }
        if self.factor != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.account_id.is_empty() {
            os.write_string(1, &self.account_id)?;
        }
        if !self.customername.is_empty() {
            os.write_string(2, &self.customername)?;
        }
        if !self.branch_name.is_empty() {
            os.write_string(3, &self.branch_name)?;
        }
        if !self.customer_no.is_empty() {
            os.write_string(4, &self.customer_no)?;
        }
        if !self.commonclientcode.is_empty() {
            os.write_string(5, &self.commonclientcode)?;
        }
        if !self.productcode.is_empty() {
            os.write_string(6, &self.productcode)?;
        }
        if self.loan_start_date != 0 {
            os.write_int64(7, self.loan_start_date)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(8, self.maturity_date)?;
        }
        if self.balance_term != 0. {
            os.write_double(9, self.balance_term)?;
        }
        if self.sanctionamount != 0. {
            os.write_double(10, self.sanctionamount)?;
        }
        if self.disbursed_amount != 0. {
            os.write_double(11, self.disbursed_amount)?;
        }
        if !self.currency.is_empty() {
            os.write_string(12, &self.currency)?;
        }
        if self.principal_ouststanding_amount != 0. {
            os.write_double(13, self.principal_ouststanding_amount)?;
        }
        if self.overdue_interest != 0. {
            os.write_double(14, self.overdue_interest)?;
        }
        if self.overdue_principal != 0. {
            os.write_double(15, self.overdue_principal)?;
        }
        if self.pre_emi_outstanding_amount != 0. {
            os.write_double(16, self.pre_emi_outstanding_amount)?;
        }
        if self.pre_emi_remaining != 0. {
            os.write_double(17, self.pre_emi_remaining)?;
        }
        if !self.interest_type.is_empty() {
            os.write_string(18, &self.interest_type)?;
        }
        if self.interestrate != 0. {
            os.write_double(19, self.interestrate)?;
        }
        if !self.interest_calulation_method.is_empty() {
            os.write_string(20, &self.interest_calulation_method)?;
        }
        if self.number_of_total_emi != 0 {
            os.write_int64(21, self.number_of_total_emi)?;
        }
        if self.emi_frequency != 0. {
            os.write_double(22, self.emi_frequency)?;
        }
        if !self.installment_type.is_empty() {
            os.write_string(23, &self.installment_type)?;
        }
        if !self.revised_lob.is_empty() {
            os.write_string(24, &self.revised_lob)?;
        }
        if !self.revised_vertical.is_empty() {
            os.write_string(25, &self.revised_vertical)?;
        }
        if !self.accountstatus.is_empty() {
            os.write_string(26, &self.accountstatus)?;
        }
        if self.weightedtenor != 0. {
            os.write_double(27, self.weightedtenor)?;
        }
        if self.sumprinout != 0. {
            os.write_double(28, self.sumprinout)?;
        }
        if self.avgtenor != 0. {
            os.write_double(29, self.avgtenor)?;
        }
        if self.factor != 0. {
            os.write_double(30, self.factor)?;
        }
        for v in &self.cashflows {
            os.write_tag(31, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_id",
                |m: &AccountWithCashflows| { &m.account_id },
                |m: &mut AccountWithCashflows| { &mut m.account_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customername",
                |m: &AccountWithCashflows| { &m.customername },
                |m: &mut AccountWithCashflows| { &mut m.customername },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "branch_name",
                |m: &AccountWithCashflows| { &m.branch_name },
                |m: &mut AccountWithCashflows| { &mut m.branch_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_no",
                |m: &AccountWithCashflows| { &m.customer_no },
                |m: &mut AccountWithCashflows| { &mut m.customer_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "commonclientcode",
                |m: &AccountWithCashflows| { &m.commonclientcode },
                |m: &mut AccountWithCashflows| { &mut m.commonclientcode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "productcode",
                |m: &AccountWithCashflows| { &m.productcode },
                |m: &mut AccountWithCashflows| { &mut m.productcode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "loan_start_date",
                |m: &AccountWithCashflows| { &m.loan_start_date },
                |m: &mut AccountWithCashflows| { &mut m.loan_start_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "maturity_date",
                |m: &AccountWithCashflows| { &m.maturity_date },
                |m: &mut AccountWithCashflows| { &mut m.maturity_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "balance_term",
                |m: &AccountWithCashflows| { &m.balance_term },
                |m: &mut AccountWithCashflows| { &mut m.balance_term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "sanctionamount",
                |m: &AccountWithCashflows| { &m.sanctionamount },
                |m: &mut AccountWithCashflows| { &mut m.sanctionamount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "disbursed_amount",
                |m: &AccountWithCashflows| { &m.disbursed_amount },
                |m: &mut AccountWithCashflows| { &mut m.disbursed_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &AccountWithCashflows| { &m.currency },
                |m: &mut AccountWithCashflows| { &mut m.currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_ouststanding_amount",
                |m: &AccountWithCashflows| { &m.principal_ouststanding_amount },
                |m: &mut AccountWithCashflows| { &mut m.principal_ouststanding_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "overdue_interest",
                |m: &AccountWithCashflows| { &m.overdue_interest },
                |m: &mut AccountWithCashflows| { &mut m.overdue_interest },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "overdue_principal",
                |m: &AccountWithCashflows| { &m.overdue_principal },
                |m: &mut AccountWithCashflows| { &mut m.overdue_principal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pre_emi_outstanding_amount",
                |m: &AccountWithCashflows| { &m.pre_emi_outstanding_amount },
                |m: &mut AccountWithCashflows| { &mut m.pre_emi_outstanding_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pre_emi_remaining",
                |m: &AccountWithCashflows| { &m.pre_emi_remaining },
                |m: &mut AccountWithCashflows| { &mut m.pre_emi_remaining },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "interest_type",
                |m: &AccountWithCashflows| { &m.interest_type },
                |m: &mut AccountWithCashflows| { &mut m.interest_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interestrate",
                |m: &AccountWithCashflows| { &m.interestrate },
                |m: &mut AccountWithCashflows| { &mut m.interestrate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "interest_calulation_method",
                |m: &AccountWithCashflows| { &m.interest_calulation_method },
                |m: &mut AccountWithCashflows| { &mut m.interest_calulation_method },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "number_of_total_emi",
                |m: &AccountWithCashflows| { &m.number_of_total_emi },
                |m: &mut AccountWithCashflows| { &mut m.number_of_total_emi },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "emi_frequency",
                |m: &AccountWithCashflows| { &m.emi_frequency },
                |m: &mut AccountWithCashflows| { &mut m.emi_frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "installment_type",
                |m: &AccountWithCashflows| { &m.installment_type },
                |m: &mut AccountWithCashflows| { &mut m.installment_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "revised_lob",
                |m: &AccountWithCashflows| { &m.revised_lob },
                |m: &mut AccountWithCashflows| { &mut m.revised_lob },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "revised_vertical",
                |m: &AccountWithCashflows| { &m.revised_vertical },
                |m: &mut AccountWithCashflows| { &mut m.revised_vertical },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "accountstatus",
                |m: &AccountWithCashflows| { &m.accountstatus },
                |m: &mut AccountWithCashflows| { &mut m.accountstatus },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "weightedtenor",
                |m: &AccountWithCashflows| { &m.weightedtenor },
                |m: &mut AccountWithCashflows| { &mut m.weightedtenor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "sumprinout",
                |m: &AccountWithCashflows| { &m.sumprinout },
                |m: &mut AccountWithCashflows| { &mut m.sumprinout },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "avgtenor",
                |m: &AccountWithCashflows| { &m.avgtenor },
                |m: &mut AccountWithCashflows| { &mut m.avgtenor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "factor",
                |m: &AccountWithCashflows| { &m.factor },
                |m: &mut AccountWithCashflows| { &mut m.factor },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.account_id.clear();
        self.customername.clear();
        self.branch_name.clear();
        self.customer_no.clear();
        self.commonclientcode.clear();
        self.productcode.clear();
        self.loan_start_date = 0;
        self.maturity_date = 0;
        self.balance_term = 0.;
        self.sanctionamount = 0.;
        self.disbursed_amount = 0.;
        self.currency.clear();
        self.principal_ouststanding_amount = 0.;
        self.overdue_interest = 0.;
        self.overdue_principal = 0.;
        self.pre_emi_outstanding_amount = 0.;
        self.pre_emi_remaining = 0.;
        self.interest_type.clear();
        self.interestrate = 0.;
        self.interest_calulation_method.clear();
        self.number_of_total_emi = 0;
        self.emi_frequency = 0.;
        self.installment_type.clear();
        self.revised_lob.clear();
        self.revised_vertical.clear();
        self.accountstatus.clear();
        self.weightedtenor = 0.;
        self.sumprinout = 0.;
        self.avgtenor = 0.;
        self.factor = 0.;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19contractual_outflow.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\
    \x18\x01\x20\x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\
    \x01R\x07prinAmt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xe8\t\
    \n\x14AccountWithCashflows\x12\x1d\n\naccount_id\x18\x01\x20\x01(\tR\tac\
    countId\x12\"\n\x0ccustomername\x18\x02\x20\x01(\tR\x0ccustomername\x12\
    \x1f\n\x0bbranch_name\x18\x03\x20\x01(\tR\nbranchName\x12\x1f\n\x0bcusto\
    mer_no\x18\x04\x20\x01(\tR\ncustomerNo\x12*\n\x10commonclientcode\x18\
    \x05\x20\x01(\tR\x10commonclientcode\x12\x20\n\x0bproductcode\x18\x06\
    \x20\x01(\tR\x0bproductcode\x12&\n\x0floan_start_date\x18\x07\x20\x01(\
    \x03R\rloanStartDate\x12#\n\rmaturity_date\x18\x08\x20\x01(\x03R\x0cmatu\
    rityDate\x12!\n\x0cbalance_term\x18\t\x20\x01(\x01R\x0bbalanceTerm\x12&\
    \n\x0esanctionamount\x18\n\x20\x01(\x01R\x0esanctionamount\x12)\n\x10dis\
    bursed_amount\x18\x0b\x20\x01(\x01R\x0fdisbursedAmount\x12\x1a\n\x08curr\
    ency\x18\x0c\x20\x01(\tR\x08currency\x12B\n\x1dprincipal_ouststanding_am\
    ount\x18\r\x20\x01(\x01R\x1bprincipalOuststandingAmount\x12)\n\x10overdu\
    e_interest\x18\x0e\x20\x01(\x01R\x0foverdueInterest\x12+\n\x11overdue_pr\
    incipal\x18\x0f\x20\x01(\x01R\x10overduePrincipal\x12;\n\x1apre_emi_outs\
    tanding_amount\x18\x10\x20\x01(\x01R\x17preEmiOutstandingAmount\x12*\n\
    \x11pre_emi_remaining\x18\x11\x20\x01(\x01R\x0fpreEmiRemaining\x12#\n\ri\
    nterest_type\x18\x12\x20\x01(\tR\x0cinterestType\x12\"\n\x0cinterestrate\
    \x18\x13\x20\x01(\x01R\x0cinterestrate\x12<\n\x1ainterest_calulation_met\
    hod\x18\x14\x20\x01(\tR\x18interestCalulationMethod\x12-\n\x13number_of_\
    total_emi\x18\x15\x20\x01(\x03R\x10numberOfTotalEmi\x12#\n\remi_frequenc\
    y\x18\x16\x20\x01(\x01R\x0cemiFrequency\x12)\n\x10installment_type\x18\
    \x17\x20\x01(\tR\x0finstallmentType\x12\x1f\n\x0brevised_lob\x18\x18\x20\
    \x01(\tR\nrevisedLob\x12)\n\x10revised_vertical\x18\x19\x20\x01(\tR\x0fr\
    evisedVertical\x12$\n\raccountstatus\x18\x1a\x20\x01(\tR\raccountstatus\
    \x12$\n\rweightedtenor\x18\x1b\x20\x01(\x01R\rweightedtenor\x12\x1e\n\ns\
    umprinout\x18\x1c\x20\x01(\x01R\nsumprinout\x12\x1a\n\x08avgtenor\x18\
    \x1d\x20\x01(\x01R\x08avgtenor\x12\x16\n\x06factor\x18\x1e\x20\x01(\x01R\
    \x06factor\x12'\n\tcashflows\x18\x1f\x20\x03(\x0b2\t.CashflowR\tcashflow\
    sb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}