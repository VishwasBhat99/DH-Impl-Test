// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub as_on: i64,
    pub acc_no: ::std::string::String,
    pub cust_name: ::std::string::String,
    pub client_id: ::std::string::String,
    pub tl_limit: f64,
    pub ccod_limit: f64,
    pub pbg_limit: f64,
    pub fbg_limit: f64,
    pub loc_limit: f64,
    pub bliab_bill_limit: f64,
    pub tl_blnc: f64,
    pub ccod_blnc: f64,
    pub pbg_blnc: f64,
    pub fbg_blnc: f64,
    pub loc_blnc: f64,
    pub bliab_bill_blnc: f64,
    pub tl_ualimit: f64,
    pub ccod_ualimit: f64,
    pub pbg_ualimit: f64,
    pub fbg_ualimit: f64,
    pub loc_ualimit: f64,
    pub bliab_bill_ualimit: f64,
    pub tl_dep: f64,
    pub ccod_dep: f64,
    pub pbg_dep: f64,
    pub fbg_dep: f64,
    pub loc_dep: f64,
    pub bliab_bill_dep: f64,
    pub tl_cr_eq: f64,
    pub ccod_cr_eq: f64,
    pub pbg_cr_eq: f64,
    pub fbg_cr_eq: f64,
    pub loc_cr_eq: f64,
    pub bliab_bill_cr_eq: f64,
    pub client_type_ip: ::std::string::String,
    pub ext_rating: ::std::string::String,
    pub asset_code: ::std::string::String,
    pub bsr: i64,
    pub ccy: ::std::string::String,
    pub client_type: ::std::string::String,
    pub clients_name: ::std::string::String,
    pub clients_bsr_type_flg: ::std::string::String,
    pub clients_busdivn_code: ::std::string::String,
    pub clients_const_code: ::std::string::String,
    pub clients_pan_gir_num: ::std::string::String,
    pub clients_risk_categorization: ::std::string::String,
    pub clients_risk_cntry: ::std::string::String,
    pub clients_segment_code: ::std::string::String,
    pub corpcl_orgn_qualifier: ::std::string::String,
    pub corpcl_indus_code: ::std::string::String,
    pub corpcl_nature_of_bus1: ::std::string::String,
    pub corpcl_nature_of_bus2: ::std::string::String,
    pub corpcl_nature_of_bus3: ::std::string::String,
    pub corpcl_central_state_flg: ::std::string::String,
    pub corpcl_public_sector_flg: ::std::string::String,
    pub corpcl_primary_dlr_flg: ::std::string::String,
    pub corpcl_multilateral_bank: ::std::string::String,
    pub corpcl_connp_inv_num: ::std::string::String,
    pub corpcl_bc_gross_turnover: f64,
    pub ccod_undrawn_lcr: f64,
    pub ccod_und_nsfr: f64,
    pub care_funded: f64,
    pub care_lcbg: f64,
    pub sanc_dt: i64,
    pub occp_cd: ::std::string::String,
    pub sens_sec: ::std::string::String,
    pub prior_subtype: ::std::string::String,
    pub restruct_flag: ::std::string::String,
    pub restruct_dt: i64,
    pub mor_prd: ::std::string::String,
    pub rating: ::std::string::String,
    pub consitin: ::std::string::String,
    pub pan: ::std::string::String,
    pub limit_amt: f64,
    pub gross_adv: f64,
    pub exp_amt: f64,
    pub unvail_amt: f64,
    pub gold_gram: f64,
    pub fund_flag: ::std::string::String,
    pub ltv_value: f64,
    pub pt_i64_1: i64,
    pub pt_i64_2: i64,
    pub pt_i64_3: i64,
    pub pt_i64_4: i64,
    pub pt_i64_5: i64,
    pub pt_f64_1: f64,
    pub pt_f64_2: f64,
    pub pt_f64_3: f64,
    pub pt_f64_4: f64,
    pub pt_f64_5: f64,
    pub pt_str_1: ::std::string::String,
    pub pt_str_2: ::std::string::String,
    pub pt_str_3: ::std::string::String,
    pub pt_str_4: ::std::string::String,
    pub pt_str_5: ::std::string::String,
    pub maturity_dt: i64,
    pub ccod_tl_limit: f64,
    pub total_principal_amount: f64,
    pub total_interest_amount: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // int64 as_on = 1;


    pub fn get_as_on(&self) -> i64 {
        self.as_on
    }
    pub fn clear_as_on(&mut self) {
        self.as_on = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on(&mut self, v: i64) {
        self.as_on = v;
    }

    // string acc_no = 2;


    pub fn get_acc_no(&self) -> &str {
        &self.acc_no
    }
    pub fn clear_acc_no(&mut self) {
        self.acc_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_no(&mut self, v: ::std::string::String) {
        self.acc_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_no(&mut self) -> &mut ::std::string::String {
        &mut self.acc_no
    }

    // Take field
    pub fn take_acc_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_no, ::std::string::String::new())
    }

    // string cust_name = 3;


    pub fn get_cust_name(&self) -> &str {
        &self.cust_name
    }
    pub fn clear_cust_name(&mut self) {
        self.cust_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_name(&mut self, v: ::std::string::String) {
        self.cust_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_name
    }

    // Take field
    pub fn take_cust_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_name, ::std::string::String::new())
    }

    // string client_id = 4;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // double tl_limit = 5;


    pub fn get_tl_limit(&self) -> f64 {
        self.tl_limit
    }
    pub fn clear_tl_limit(&mut self) {
        self.tl_limit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tl_limit(&mut self, v: f64) {
        self.tl_limit = v;
    }

    // double ccod_limit = 6;


    pub fn get_ccod_limit(&self) -> f64 {
        self.ccod_limit
    }
    pub fn clear_ccod_limit(&mut self) {
        self.ccod_limit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ccod_limit(&mut self, v: f64) {
        self.ccod_limit = v;
    }

    // double pbg_limit = 7;


    pub fn get_pbg_limit(&self) -> f64 {
        self.pbg_limit
    }
    pub fn clear_pbg_limit(&mut self) {
        self.pbg_limit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pbg_limit(&mut self, v: f64) {
        self.pbg_limit = v;
    }

    // double fbg_limit = 8;


    pub fn get_fbg_limit(&self) -> f64 {
        self.fbg_limit
    }
    pub fn clear_fbg_limit(&mut self) {
        self.fbg_limit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_fbg_limit(&mut self, v: f64) {
        self.fbg_limit = v;
    }

    // double loc_limit = 9;


    pub fn get_loc_limit(&self) -> f64 {
        self.loc_limit
    }
    pub fn clear_loc_limit(&mut self) {
        self.loc_limit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_loc_limit(&mut self, v: f64) {
        self.loc_limit = v;
    }

    // double bliab_bill_limit = 10;


    pub fn get_bliab_bill_limit(&self) -> f64 {
        self.bliab_bill_limit
    }
    pub fn clear_bliab_bill_limit(&mut self) {
        self.bliab_bill_limit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bliab_bill_limit(&mut self, v: f64) {
        self.bliab_bill_limit = v;
    }

    // double tl_blnc = 11;


    pub fn get_tl_blnc(&self) -> f64 {
        self.tl_blnc
    }
    pub fn clear_tl_blnc(&mut self) {
        self.tl_blnc = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tl_blnc(&mut self, v: f64) {
        self.tl_blnc = v;
    }

    // double ccod_blnc = 12;


    pub fn get_ccod_blnc(&self) -> f64 {
        self.ccod_blnc
    }
    pub fn clear_ccod_blnc(&mut self) {
        self.ccod_blnc = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ccod_blnc(&mut self, v: f64) {
        self.ccod_blnc = v;
    }

    // double pbg_blnc = 13;


    pub fn get_pbg_blnc(&self) -> f64 {
        self.pbg_blnc
    }
    pub fn clear_pbg_blnc(&mut self) {
        self.pbg_blnc = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pbg_blnc(&mut self, v: f64) {
        self.pbg_blnc = v;
    }

    // double fbg_blnc = 14;


    pub fn get_fbg_blnc(&self) -> f64 {
        self.fbg_blnc
    }
    pub fn clear_fbg_blnc(&mut self) {
        self.fbg_blnc = 0.;
    }

    // Param is passed by value, moved
    pub fn set_fbg_blnc(&mut self, v: f64) {
        self.fbg_blnc = v;
    }

    // double loc_blnc = 15;


    pub fn get_loc_blnc(&self) -> f64 {
        self.loc_blnc
    }
    pub fn clear_loc_blnc(&mut self) {
        self.loc_blnc = 0.;
    }

    // Param is passed by value, moved
    pub fn set_loc_blnc(&mut self, v: f64) {
        self.loc_blnc = v;
    }

    // double bliab_bill_blnc = 16;


    pub fn get_bliab_bill_blnc(&self) -> f64 {
        self.bliab_bill_blnc
    }
    pub fn clear_bliab_bill_blnc(&mut self) {
        self.bliab_bill_blnc = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bliab_bill_blnc(&mut self, v: f64) {
        self.bliab_bill_blnc = v;
    }

    // double tl_ualimit = 17;


    pub fn get_tl_ualimit(&self) -> f64 {
        self.tl_ualimit
    }
    pub fn clear_tl_ualimit(&mut self) {
        self.tl_ualimit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tl_ualimit(&mut self, v: f64) {
        self.tl_ualimit = v;
    }

    // double ccod_ualimit = 18;


    pub fn get_ccod_ualimit(&self) -> f64 {
        self.ccod_ualimit
    }
    pub fn clear_ccod_ualimit(&mut self) {
        self.ccod_ualimit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ccod_ualimit(&mut self, v: f64) {
        self.ccod_ualimit = v;
    }

    // double pbg_ualimit = 19;


    pub fn get_pbg_ualimit(&self) -> f64 {
        self.pbg_ualimit
    }
    pub fn clear_pbg_ualimit(&mut self) {
        self.pbg_ualimit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pbg_ualimit(&mut self, v: f64) {
        self.pbg_ualimit = v;
    }

    // double fbg_ualimit = 20;


    pub fn get_fbg_ualimit(&self) -> f64 {
        self.fbg_ualimit
    }
    pub fn clear_fbg_ualimit(&mut self) {
        self.fbg_ualimit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_fbg_ualimit(&mut self, v: f64) {
        self.fbg_ualimit = v;
    }

    // double loc_ualimit = 21;


    pub fn get_loc_ualimit(&self) -> f64 {
        self.loc_ualimit
    }
    pub fn clear_loc_ualimit(&mut self) {
        self.loc_ualimit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_loc_ualimit(&mut self, v: f64) {
        self.loc_ualimit = v;
    }

    // double bliab_bill_ualimit = 22;


    pub fn get_bliab_bill_ualimit(&self) -> f64 {
        self.bliab_bill_ualimit
    }
    pub fn clear_bliab_bill_ualimit(&mut self) {
        self.bliab_bill_ualimit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bliab_bill_ualimit(&mut self, v: f64) {
        self.bliab_bill_ualimit = v;
    }

    // double tl_dep = 23;


    pub fn get_tl_dep(&self) -> f64 {
        self.tl_dep
    }
    pub fn clear_tl_dep(&mut self) {
        self.tl_dep = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tl_dep(&mut self, v: f64) {
        self.tl_dep = v;
    }

    // double ccod_dep = 24;


    pub fn get_ccod_dep(&self) -> f64 {
        self.ccod_dep
    }
    pub fn clear_ccod_dep(&mut self) {
        self.ccod_dep = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ccod_dep(&mut self, v: f64) {
        self.ccod_dep = v;
    }

    // double pbg_dep = 25;


    pub fn get_pbg_dep(&self) -> f64 {
        self.pbg_dep
    }
    pub fn clear_pbg_dep(&mut self) {
        self.pbg_dep = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pbg_dep(&mut self, v: f64) {
        self.pbg_dep = v;
    }

    // double fbg_dep = 26;


    pub fn get_fbg_dep(&self) -> f64 {
        self.fbg_dep
    }
    pub fn clear_fbg_dep(&mut self) {
        self.fbg_dep = 0.;
    }

    // Param is passed by value, moved
    pub fn set_fbg_dep(&mut self, v: f64) {
        self.fbg_dep = v;
    }

    // double loc_dep = 27;


    pub fn get_loc_dep(&self) -> f64 {
        self.loc_dep
    }
    pub fn clear_loc_dep(&mut self) {
        self.loc_dep = 0.;
    }

    // Param is passed by value, moved
    pub fn set_loc_dep(&mut self, v: f64) {
        self.loc_dep = v;
    }

    // double bliab_bill_dep = 28;


    pub fn get_bliab_bill_dep(&self) -> f64 {
        self.bliab_bill_dep
    }
    pub fn clear_bliab_bill_dep(&mut self) {
        self.bliab_bill_dep = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bliab_bill_dep(&mut self, v: f64) {
        self.bliab_bill_dep = v;
    }

    // double tl_cr_eq = 29;


    pub fn get_tl_cr_eq(&self) -> f64 {
        self.tl_cr_eq
    }
    pub fn clear_tl_cr_eq(&mut self) {
        self.tl_cr_eq = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tl_cr_eq(&mut self, v: f64) {
        self.tl_cr_eq = v;
    }

    // double ccod_cr_eq = 30;


    pub fn get_ccod_cr_eq(&self) -> f64 {
        self.ccod_cr_eq
    }
    pub fn clear_ccod_cr_eq(&mut self) {
        self.ccod_cr_eq = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ccod_cr_eq(&mut self, v: f64) {
        self.ccod_cr_eq = v;
    }

    // double pbg_cr_eq = 31;


    pub fn get_pbg_cr_eq(&self) -> f64 {
        self.pbg_cr_eq
    }
    pub fn clear_pbg_cr_eq(&mut self) {
        self.pbg_cr_eq = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pbg_cr_eq(&mut self, v: f64) {
        self.pbg_cr_eq = v;
    }

    // double fbg_cr_eq = 32;


    pub fn get_fbg_cr_eq(&self) -> f64 {
        self.fbg_cr_eq
    }
    pub fn clear_fbg_cr_eq(&mut self) {
        self.fbg_cr_eq = 0.;
    }

    // Param is passed by value, moved
    pub fn set_fbg_cr_eq(&mut self, v: f64) {
        self.fbg_cr_eq = v;
    }

    // double loc_cr_eq = 33;


    pub fn get_loc_cr_eq(&self) -> f64 {
        self.loc_cr_eq
    }
    pub fn clear_loc_cr_eq(&mut self) {
        self.loc_cr_eq = 0.;
    }

    // Param is passed by value, moved
    pub fn set_loc_cr_eq(&mut self, v: f64) {
        self.loc_cr_eq = v;
    }

    // double bliab_bill_cr_eq = 34;


    pub fn get_bliab_bill_cr_eq(&self) -> f64 {
        self.bliab_bill_cr_eq
    }
    pub fn clear_bliab_bill_cr_eq(&mut self) {
        self.bliab_bill_cr_eq = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bliab_bill_cr_eq(&mut self, v: f64) {
        self.bliab_bill_cr_eq = v;
    }

    // string client_type_ip = 35;


    pub fn get_client_type_ip(&self) -> &str {
        &self.client_type_ip
    }
    pub fn clear_client_type_ip(&mut self) {
        self.client_type_ip.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_type_ip(&mut self, v: ::std::string::String) {
        self.client_type_ip = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_type_ip(&mut self) -> &mut ::std::string::String {
        &mut self.client_type_ip
    }

    // Take field
    pub fn take_client_type_ip(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_type_ip, ::std::string::String::new())
    }

    // string ext_rating = 36;


    pub fn get_ext_rating(&self) -> &str {
        &self.ext_rating
    }
    pub fn clear_ext_rating(&mut self) {
        self.ext_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_ext_rating(&mut self, v: ::std::string::String) {
        self.ext_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ext_rating(&mut self) -> &mut ::std::string::String {
        &mut self.ext_rating
    }

    // Take field
    pub fn take_ext_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ext_rating, ::std::string::String::new())
    }

    // string asset_code = 37;


    pub fn get_asset_code(&self) -> &str {
        &self.asset_code
    }
    pub fn clear_asset_code(&mut self) {
        self.asset_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_code(&mut self, v: ::std::string::String) {
        self.asset_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_code(&mut self) -> &mut ::std::string::String {
        &mut self.asset_code
    }

    // Take field
    pub fn take_asset_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_code, ::std::string::String::new())
    }

    // int64 bsr = 38;


    pub fn get_bsr(&self) -> i64 {
        self.bsr
    }
    pub fn clear_bsr(&mut self) {
        self.bsr = 0;
    }

    // Param is passed by value, moved
    pub fn set_bsr(&mut self, v: i64) {
        self.bsr = v;
    }

    // string ccy = 39;


    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }
    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    // string client_type = 40;


    pub fn get_client_type(&self) -> &str {
        &self.client_type
    }
    pub fn clear_client_type(&mut self) {
        self.client_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_type(&mut self, v: ::std::string::String) {
        self.client_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_type(&mut self) -> &mut ::std::string::String {
        &mut self.client_type
    }

    // Take field
    pub fn take_client_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_type, ::std::string::String::new())
    }

    // string clients_name = 41;


    pub fn get_clients_name(&self) -> &str {
        &self.clients_name
    }
    pub fn clear_clients_name(&mut self) {
        self.clients_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_name(&mut self, v: ::std::string::String) {
        self.clients_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_name(&mut self) -> &mut ::std::string::String {
        &mut self.clients_name
    }

    // Take field
    pub fn take_clients_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_name, ::std::string::String::new())
    }

    // string clients_bsr_type_flg = 42;


    pub fn get_clients_bsr_type_flg(&self) -> &str {
        &self.clients_bsr_type_flg
    }
    pub fn clear_clients_bsr_type_flg(&mut self) {
        self.clients_bsr_type_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_bsr_type_flg(&mut self, v: ::std::string::String) {
        self.clients_bsr_type_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_bsr_type_flg(&mut self) -> &mut ::std::string::String {
        &mut self.clients_bsr_type_flg
    }

    // Take field
    pub fn take_clients_bsr_type_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_bsr_type_flg, ::std::string::String::new())
    }

    // string clients_busdivn_code = 43;


    pub fn get_clients_busdivn_code(&self) -> &str {
        &self.clients_busdivn_code
    }
    pub fn clear_clients_busdivn_code(&mut self) {
        self.clients_busdivn_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_busdivn_code(&mut self, v: ::std::string::String) {
        self.clients_busdivn_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_busdivn_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_busdivn_code
    }

    // Take field
    pub fn take_clients_busdivn_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_busdivn_code, ::std::string::String::new())
    }

    // string clients_const_code = 44;


    pub fn get_clients_const_code(&self) -> &str {
        &self.clients_const_code
    }
    pub fn clear_clients_const_code(&mut self) {
        self.clients_const_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_const_code(&mut self, v: ::std::string::String) {
        self.clients_const_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_const_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_const_code
    }

    // Take field
    pub fn take_clients_const_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_const_code, ::std::string::String::new())
    }

    // string clients_pan_gir_num = 45;


    pub fn get_clients_pan_gir_num(&self) -> &str {
        &self.clients_pan_gir_num
    }
    pub fn clear_clients_pan_gir_num(&mut self) {
        self.clients_pan_gir_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_pan_gir_num(&mut self, v: ::std::string::String) {
        self.clients_pan_gir_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_pan_gir_num(&mut self) -> &mut ::std::string::String {
        &mut self.clients_pan_gir_num
    }

    // Take field
    pub fn take_clients_pan_gir_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_pan_gir_num, ::std::string::String::new())
    }

    // string clients_risk_categorization = 46;


    pub fn get_clients_risk_categorization(&self) -> &str {
        &self.clients_risk_categorization
    }
    pub fn clear_clients_risk_categorization(&mut self) {
        self.clients_risk_categorization.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_risk_categorization(&mut self, v: ::std::string::String) {
        self.clients_risk_categorization = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_risk_categorization(&mut self) -> &mut ::std::string::String {
        &mut self.clients_risk_categorization
    }

    // Take field
    pub fn take_clients_risk_categorization(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_risk_categorization, ::std::string::String::new())
    }

    // string clients_risk_cntry = 47;


    pub fn get_clients_risk_cntry(&self) -> &str {
        &self.clients_risk_cntry
    }
    pub fn clear_clients_risk_cntry(&mut self) {
        self.clients_risk_cntry.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_risk_cntry(&mut self, v: ::std::string::String) {
        self.clients_risk_cntry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_risk_cntry(&mut self) -> &mut ::std::string::String {
        &mut self.clients_risk_cntry
    }

    // Take field
    pub fn take_clients_risk_cntry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_risk_cntry, ::std::string::String::new())
    }

    // string clients_segment_code = 48;


    pub fn get_clients_segment_code(&self) -> &str {
        &self.clients_segment_code
    }
    pub fn clear_clients_segment_code(&mut self) {
        self.clients_segment_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_segment_code(&mut self, v: ::std::string::String) {
        self.clients_segment_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_segment_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_segment_code
    }

    // Take field
    pub fn take_clients_segment_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_segment_code, ::std::string::String::new())
    }

    // string corpcl_orgn_qualifier = 49;


    pub fn get_corpcl_orgn_qualifier(&self) -> &str {
        &self.corpcl_orgn_qualifier
    }
    pub fn clear_corpcl_orgn_qualifier(&mut self) {
        self.corpcl_orgn_qualifier.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_orgn_qualifier(&mut self, v: ::std::string::String) {
        self.corpcl_orgn_qualifier = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_orgn_qualifier(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_orgn_qualifier
    }

    // Take field
    pub fn take_corpcl_orgn_qualifier(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_orgn_qualifier, ::std::string::String::new())
    }

    // string corpcl_indus_code = 50;


    pub fn get_corpcl_indus_code(&self) -> &str {
        &self.corpcl_indus_code
    }
    pub fn clear_corpcl_indus_code(&mut self) {
        self.corpcl_indus_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_indus_code(&mut self, v: ::std::string::String) {
        self.corpcl_indus_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_indus_code(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_indus_code
    }

    // Take field
    pub fn take_corpcl_indus_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_indus_code, ::std::string::String::new())
    }

    // string corpcl_nature_of_bus1 = 51;


    pub fn get_corpcl_nature_of_bus1(&self) -> &str {
        &self.corpcl_nature_of_bus1
    }
    pub fn clear_corpcl_nature_of_bus1(&mut self) {
        self.corpcl_nature_of_bus1.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_nature_of_bus1(&mut self, v: ::std::string::String) {
        self.corpcl_nature_of_bus1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_nature_of_bus1(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_nature_of_bus1
    }

    // Take field
    pub fn take_corpcl_nature_of_bus1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_nature_of_bus1, ::std::string::String::new())
    }

    // string corpcl_nature_of_bus2 = 52;


    pub fn get_corpcl_nature_of_bus2(&self) -> &str {
        &self.corpcl_nature_of_bus2
    }
    pub fn clear_corpcl_nature_of_bus2(&mut self) {
        self.corpcl_nature_of_bus2.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_nature_of_bus2(&mut self, v: ::std::string::String) {
        self.corpcl_nature_of_bus2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_nature_of_bus2(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_nature_of_bus2
    }

    // Take field
    pub fn take_corpcl_nature_of_bus2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_nature_of_bus2, ::std::string::String::new())
    }

    // string corpcl_nature_of_bus3 = 53;


    pub fn get_corpcl_nature_of_bus3(&self) -> &str {
        &self.corpcl_nature_of_bus3
    }
    pub fn clear_corpcl_nature_of_bus3(&mut self) {
        self.corpcl_nature_of_bus3.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_nature_of_bus3(&mut self, v: ::std::string::String) {
        self.corpcl_nature_of_bus3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_nature_of_bus3(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_nature_of_bus3
    }

    // Take field
    pub fn take_corpcl_nature_of_bus3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_nature_of_bus3, ::std::string::String::new())
    }

    // string corpcl_central_state_flg = 54;


    pub fn get_corpcl_central_state_flg(&self) -> &str {
        &self.corpcl_central_state_flg
    }
    pub fn clear_corpcl_central_state_flg(&mut self) {
        self.corpcl_central_state_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_central_state_flg(&mut self, v: ::std::string::String) {
        self.corpcl_central_state_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_central_state_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_central_state_flg
    }

    // Take field
    pub fn take_corpcl_central_state_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_central_state_flg, ::std::string::String::new())
    }

    // string corpcl_public_sector_flg = 55;


    pub fn get_corpcl_public_sector_flg(&self) -> &str {
        &self.corpcl_public_sector_flg
    }
    pub fn clear_corpcl_public_sector_flg(&mut self) {
        self.corpcl_public_sector_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_public_sector_flg(&mut self, v: ::std::string::String) {
        self.corpcl_public_sector_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_public_sector_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_public_sector_flg
    }

    // Take field
    pub fn take_corpcl_public_sector_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_public_sector_flg, ::std::string::String::new())
    }

    // string corpcl_primary_dlr_flg = 56;


    pub fn get_corpcl_primary_dlr_flg(&self) -> &str {
        &self.corpcl_primary_dlr_flg
    }
    pub fn clear_corpcl_primary_dlr_flg(&mut self) {
        self.corpcl_primary_dlr_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_primary_dlr_flg(&mut self, v: ::std::string::String) {
        self.corpcl_primary_dlr_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_primary_dlr_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_primary_dlr_flg
    }

    // Take field
    pub fn take_corpcl_primary_dlr_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_primary_dlr_flg, ::std::string::String::new())
    }

    // string corpcl_multilateral_bank = 57;


    pub fn get_corpcl_multilateral_bank(&self) -> &str {
        &self.corpcl_multilateral_bank
    }
    pub fn clear_corpcl_multilateral_bank(&mut self) {
        self.corpcl_multilateral_bank.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_multilateral_bank(&mut self, v: ::std::string::String) {
        self.corpcl_multilateral_bank = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_multilateral_bank(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_multilateral_bank
    }

    // Take field
    pub fn take_corpcl_multilateral_bank(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_multilateral_bank, ::std::string::String::new())
    }

    // string corpcl_connp_inv_num = 58;


    pub fn get_corpcl_connp_inv_num(&self) -> &str {
        &self.corpcl_connp_inv_num
    }
    pub fn clear_corpcl_connp_inv_num(&mut self) {
        self.corpcl_connp_inv_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_connp_inv_num(&mut self, v: ::std::string::String) {
        self.corpcl_connp_inv_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_connp_inv_num(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_connp_inv_num
    }

    // Take field
    pub fn take_corpcl_connp_inv_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_connp_inv_num, ::std::string::String::new())
    }

    // double corpcl_bc_gross_turnover = 59;


    pub fn get_corpcl_bc_gross_turnover(&self) -> f64 {
        self.corpcl_bc_gross_turnover
    }
    pub fn clear_corpcl_bc_gross_turnover(&mut self) {
        self.corpcl_bc_gross_turnover = 0.;
    }

    // Param is passed by value, moved
    pub fn set_corpcl_bc_gross_turnover(&mut self, v: f64) {
        self.corpcl_bc_gross_turnover = v;
    }

    // double ccod_undrawn_lcr = 60;


    pub fn get_ccod_undrawn_lcr(&self) -> f64 {
        self.ccod_undrawn_lcr
    }
    pub fn clear_ccod_undrawn_lcr(&mut self) {
        self.ccod_undrawn_lcr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ccod_undrawn_lcr(&mut self, v: f64) {
        self.ccod_undrawn_lcr = v;
    }

    // double ccod_und_nsfr = 61;


    pub fn get_ccod_und_nsfr(&self) -> f64 {
        self.ccod_und_nsfr
    }
    pub fn clear_ccod_und_nsfr(&mut self) {
        self.ccod_und_nsfr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ccod_und_nsfr(&mut self, v: f64) {
        self.ccod_und_nsfr = v;
    }

    // double care_funded = 62;


    pub fn get_care_funded(&self) -> f64 {
        self.care_funded
    }
    pub fn clear_care_funded(&mut self) {
        self.care_funded = 0.;
    }

    // Param is passed by value, moved
    pub fn set_care_funded(&mut self, v: f64) {
        self.care_funded = v;
    }

    // double care_lcbg = 63;


    pub fn get_care_lcbg(&self) -> f64 {
        self.care_lcbg
    }
    pub fn clear_care_lcbg(&mut self) {
        self.care_lcbg = 0.;
    }

    // Param is passed by value, moved
    pub fn set_care_lcbg(&mut self, v: f64) {
        self.care_lcbg = v;
    }

    // int64 sanc_dt = 64;


    pub fn get_sanc_dt(&self) -> i64 {
        self.sanc_dt
    }
    pub fn clear_sanc_dt(&mut self) {
        self.sanc_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_sanc_dt(&mut self, v: i64) {
        self.sanc_dt = v;
    }

    // string occp_cd = 65;


    pub fn get_occp_cd(&self) -> &str {
        &self.occp_cd
    }
    pub fn clear_occp_cd(&mut self) {
        self.occp_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_occp_cd(&mut self, v: ::std::string::String) {
        self.occp_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_occp_cd(&mut self) -> &mut ::std::string::String {
        &mut self.occp_cd
    }

    // Take field
    pub fn take_occp_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.occp_cd, ::std::string::String::new())
    }

    // string sens_sec = 66;


    pub fn get_sens_sec(&self) -> &str {
        &self.sens_sec
    }
    pub fn clear_sens_sec(&mut self) {
        self.sens_sec.clear();
    }

    // Param is passed by value, moved
    pub fn set_sens_sec(&mut self, v: ::std::string::String) {
        self.sens_sec = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sens_sec(&mut self) -> &mut ::std::string::String {
        &mut self.sens_sec
    }

    // Take field
    pub fn take_sens_sec(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sens_sec, ::std::string::String::new())
    }

    // string prior_subtype = 67;


    pub fn get_prior_subtype(&self) -> &str {
        &self.prior_subtype
    }
    pub fn clear_prior_subtype(&mut self) {
        self.prior_subtype.clear();
    }

    // Param is passed by value, moved
    pub fn set_prior_subtype(&mut self, v: ::std::string::String) {
        self.prior_subtype = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prior_subtype(&mut self) -> &mut ::std::string::String {
        &mut self.prior_subtype
    }

    // Take field
    pub fn take_prior_subtype(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prior_subtype, ::std::string::String::new())
    }

    // string restruct_flag = 68;


    pub fn get_restruct_flag(&self) -> &str {
        &self.restruct_flag
    }
    pub fn clear_restruct_flag(&mut self) {
        self.restruct_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_restruct_flag(&mut self, v: ::std::string::String) {
        self.restruct_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_restruct_flag(&mut self) -> &mut ::std::string::String {
        &mut self.restruct_flag
    }

    // Take field
    pub fn take_restruct_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.restruct_flag, ::std::string::String::new())
    }

    // int64 restruct_dt = 69;


    pub fn get_restruct_dt(&self) -> i64 {
        self.restruct_dt
    }
    pub fn clear_restruct_dt(&mut self) {
        self.restruct_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_restruct_dt(&mut self, v: i64) {
        self.restruct_dt = v;
    }

    // string mor_prd = 70;


    pub fn get_mor_prd(&self) -> &str {
        &self.mor_prd
    }
    pub fn clear_mor_prd(&mut self) {
        self.mor_prd.clear();
    }

    // Param is passed by value, moved
    pub fn set_mor_prd(&mut self, v: ::std::string::String) {
        self.mor_prd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mor_prd(&mut self) -> &mut ::std::string::String {
        &mut self.mor_prd
    }

    // Take field
    pub fn take_mor_prd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mor_prd, ::std::string::String::new())
    }

    // string rating = 71;


    pub fn get_rating(&self) -> &str {
        &self.rating
    }
    pub fn clear_rating(&mut self) {
        self.rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_rating(&mut self, v: ::std::string::String) {
        self.rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rating(&mut self) -> &mut ::std::string::String {
        &mut self.rating
    }

    // Take field
    pub fn take_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rating, ::std::string::String::new())
    }

    // string consitin = 72;


    pub fn get_consitin(&self) -> &str {
        &self.consitin
    }
    pub fn clear_consitin(&mut self) {
        self.consitin.clear();
    }

    // Param is passed by value, moved
    pub fn set_consitin(&mut self, v: ::std::string::String) {
        self.consitin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consitin(&mut self) -> &mut ::std::string::String {
        &mut self.consitin
    }

    // Take field
    pub fn take_consitin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.consitin, ::std::string::String::new())
    }

    // string pan = 73;


    pub fn get_pan(&self) -> &str {
        &self.pan
    }
    pub fn clear_pan(&mut self) {
        self.pan.clear();
    }

    // Param is passed by value, moved
    pub fn set_pan(&mut self, v: ::std::string::String) {
        self.pan = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pan(&mut self) -> &mut ::std::string::String {
        &mut self.pan
    }

    // Take field
    pub fn take_pan(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pan, ::std::string::String::new())
    }

    // double limit_amt = 74;


    pub fn get_limit_amt(&self) -> f64 {
        self.limit_amt
    }
    pub fn clear_limit_amt(&mut self) {
        self.limit_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_limit_amt(&mut self, v: f64) {
        self.limit_amt = v;
    }

    // double gross_adv = 75;


    pub fn get_gross_adv(&self) -> f64 {
        self.gross_adv
    }
    pub fn clear_gross_adv(&mut self) {
        self.gross_adv = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gross_adv(&mut self, v: f64) {
        self.gross_adv = v;
    }

    // double exp_amt = 76;


    pub fn get_exp_amt(&self) -> f64 {
        self.exp_amt
    }
    pub fn clear_exp_amt(&mut self) {
        self.exp_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_exp_amt(&mut self, v: f64) {
        self.exp_amt = v;
    }

    // double unvail_amt = 77;


    pub fn get_unvail_amt(&self) -> f64 {
        self.unvail_amt
    }
    pub fn clear_unvail_amt(&mut self) {
        self.unvail_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_unvail_amt(&mut self, v: f64) {
        self.unvail_amt = v;
    }

    // double gold_gram = 78;


    pub fn get_gold_gram(&self) -> f64 {
        self.gold_gram
    }
    pub fn clear_gold_gram(&mut self) {
        self.gold_gram = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gold_gram(&mut self, v: f64) {
        self.gold_gram = v;
    }

    // string fund_flag = 79;


    pub fn get_fund_flag(&self) -> &str {
        &self.fund_flag
    }
    pub fn clear_fund_flag(&mut self) {
        self.fund_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_fund_flag(&mut self, v: ::std::string::String) {
        self.fund_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fund_flag(&mut self) -> &mut ::std::string::String {
        &mut self.fund_flag
    }

    // Take field
    pub fn take_fund_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fund_flag, ::std::string::String::new())
    }

    // double ltv_value = 80;


    pub fn get_ltv_value(&self) -> f64 {
        self.ltv_value
    }
    pub fn clear_ltv_value(&mut self) {
        self.ltv_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ltv_value(&mut self, v: f64) {
        self.ltv_value = v;
    }

    // int64 pt_i64_1 = 81;


    pub fn get_pt_i64_1(&self) -> i64 {
        self.pt_i64_1
    }
    pub fn clear_pt_i64_1(&mut self) {
        self.pt_i64_1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_1(&mut self, v: i64) {
        self.pt_i64_1 = v;
    }

    // int64 pt_i64_2 = 82;


    pub fn get_pt_i64_2(&self) -> i64 {
        self.pt_i64_2
    }
    pub fn clear_pt_i64_2(&mut self) {
        self.pt_i64_2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_2(&mut self, v: i64) {
        self.pt_i64_2 = v;
    }

    // int64 pt_i64_3 = 83;


    pub fn get_pt_i64_3(&self) -> i64 {
        self.pt_i64_3
    }
    pub fn clear_pt_i64_3(&mut self) {
        self.pt_i64_3 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_3(&mut self, v: i64) {
        self.pt_i64_3 = v;
    }

    // int64 pt_i64_4 = 84;


    pub fn get_pt_i64_4(&self) -> i64 {
        self.pt_i64_4
    }
    pub fn clear_pt_i64_4(&mut self) {
        self.pt_i64_4 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_4(&mut self, v: i64) {
        self.pt_i64_4 = v;
    }

    // int64 pt_i64_5 = 85;


    pub fn get_pt_i64_5(&self) -> i64 {
        self.pt_i64_5
    }
    pub fn clear_pt_i64_5(&mut self) {
        self.pt_i64_5 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_5(&mut self, v: i64) {
        self.pt_i64_5 = v;
    }

    // double pt_f64_1 = 86;


    pub fn get_pt_f64_1(&self) -> f64 {
        self.pt_f64_1
    }
    pub fn clear_pt_f64_1(&mut self) {
        self.pt_f64_1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_1(&mut self, v: f64) {
        self.pt_f64_1 = v;
    }

    // double pt_f64_2 = 87;


    pub fn get_pt_f64_2(&self) -> f64 {
        self.pt_f64_2
    }
    pub fn clear_pt_f64_2(&mut self) {
        self.pt_f64_2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_2(&mut self, v: f64) {
        self.pt_f64_2 = v;
    }

    // double pt_f64_3 = 88;


    pub fn get_pt_f64_3(&self) -> f64 {
        self.pt_f64_3
    }
    pub fn clear_pt_f64_3(&mut self) {
        self.pt_f64_3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_3(&mut self, v: f64) {
        self.pt_f64_3 = v;
    }

    // double pt_f64_4 = 89;


    pub fn get_pt_f64_4(&self) -> f64 {
        self.pt_f64_4
    }
    pub fn clear_pt_f64_4(&mut self) {
        self.pt_f64_4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_4(&mut self, v: f64) {
        self.pt_f64_4 = v;
    }

    // double pt_f64_5 = 90;


    pub fn get_pt_f64_5(&self) -> f64 {
        self.pt_f64_5
    }
    pub fn clear_pt_f64_5(&mut self) {
        self.pt_f64_5 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_5(&mut self, v: f64) {
        self.pt_f64_5 = v;
    }

    // string pt_str_1 = 91;


    pub fn get_pt_str_1(&self) -> &str {
        &self.pt_str_1
    }
    pub fn clear_pt_str_1(&mut self) {
        self.pt_str_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_1(&mut self, v: ::std::string::String) {
        self.pt_str_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_1(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_1
    }

    // Take field
    pub fn take_pt_str_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_1, ::std::string::String::new())
    }

    // string pt_str_2 = 92;


    pub fn get_pt_str_2(&self) -> &str {
        &self.pt_str_2
    }
    pub fn clear_pt_str_2(&mut self) {
        self.pt_str_2.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_2(&mut self, v: ::std::string::String) {
        self.pt_str_2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_2(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_2
    }

    // Take field
    pub fn take_pt_str_2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_2, ::std::string::String::new())
    }

    // string pt_str_3 = 93;


    pub fn get_pt_str_3(&self) -> &str {
        &self.pt_str_3
    }
    pub fn clear_pt_str_3(&mut self) {
        self.pt_str_3.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_3(&mut self, v: ::std::string::String) {
        self.pt_str_3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_3(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_3
    }

    // Take field
    pub fn take_pt_str_3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_3, ::std::string::String::new())
    }

    // string pt_str_4 = 94;


    pub fn get_pt_str_4(&self) -> &str {
        &self.pt_str_4
    }
    pub fn clear_pt_str_4(&mut self) {
        self.pt_str_4.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_4(&mut self, v: ::std::string::String) {
        self.pt_str_4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_4(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_4
    }

    // Take field
    pub fn take_pt_str_4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_4, ::std::string::String::new())
    }

    // string pt_str_5 = 95;


    pub fn get_pt_str_5(&self) -> &str {
        &self.pt_str_5
    }
    pub fn clear_pt_str_5(&mut self) {
        self.pt_str_5.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_5(&mut self, v: ::std::string::String) {
        self.pt_str_5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_5(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_5
    }

    // Take field
    pub fn take_pt_str_5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_5, ::std::string::String::new())
    }

    // int64 maturity_dt = 96;


    pub fn get_maturity_dt(&self) -> i64 {
        self.maturity_dt
    }
    pub fn clear_maturity_dt(&mut self) {
        self.maturity_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_dt(&mut self, v: i64) {
        self.maturity_dt = v;
    }

    // double ccod_tl_limit = 97;


    pub fn get_ccod_tl_limit(&self) -> f64 {
        self.ccod_tl_limit
    }
    pub fn clear_ccod_tl_limit(&mut self) {
        self.ccod_tl_limit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ccod_tl_limit(&mut self, v: f64) {
        self.ccod_tl_limit = v;
    }

    // double total_principal_amount = 98;


    pub fn get_total_principal_amount(&self) -> f64 {
        self.total_principal_amount
    }
    pub fn clear_total_principal_amount(&mut self) {
        self.total_principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_principal_amount(&mut self, v: f64) {
        self.total_principal_amount = v;
    }

    // double total_interest_amount = 99;


    pub fn get_total_interest_amount(&self) -> f64 {
        self.total_interest_amount
    }
    pub fn clear_total_interest_amount(&mut self) {
        self.total_interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_amount(&mut self, v: f64) {
        self.total_interest_amount = v;
    }

    // repeated .Cashflow cashflows = 100;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_no)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tl_limit = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ccod_limit = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pbg_limit = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.fbg_limit = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.loc_limit = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bliab_bill_limit = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tl_blnc = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ccod_blnc = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pbg_blnc = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.fbg_blnc = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.loc_blnc = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bliab_bill_blnc = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tl_ualimit = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ccod_ualimit = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pbg_ualimit = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.fbg_ualimit = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.loc_ualimit = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bliab_bill_ualimit = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tl_dep = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ccod_dep = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pbg_dep = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.fbg_dep = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.loc_dep = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bliab_bill_dep = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tl_cr_eq = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ccod_cr_eq = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pbg_cr_eq = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.fbg_cr_eq = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.loc_cr_eq = tmp;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bliab_bill_cr_eq = tmp;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_type_ip)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ext_rating)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_code)?;
                },
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.bsr = tmp;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_type)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_name)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_bsr_type_flg)?;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_busdivn_code)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_const_code)?;
                },
                45 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_pan_gir_num)?;
                },
                46 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_risk_categorization)?;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_risk_cntry)?;
                },
                48 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_segment_code)?;
                },
                49 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_orgn_qualifier)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_indus_code)?;
                },
                51 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_nature_of_bus1)?;
                },
                52 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_nature_of_bus2)?;
                },
                53 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_nature_of_bus3)?;
                },
                54 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_central_state_flg)?;
                },
                55 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_public_sector_flg)?;
                },
                56 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_primary_dlr_flg)?;
                },
                57 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_multilateral_bank)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_connp_inv_num)?;
                },
                59 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.corpcl_bc_gross_turnover = tmp;
                },
                60 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ccod_undrawn_lcr = tmp;
                },
                61 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ccod_und_nsfr = tmp;
                },
                62 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.care_funded = tmp;
                },
                63 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.care_lcbg = tmp;
                },
                64 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.sanc_dt = tmp;
                },
                65 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.occp_cd)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sens_sec)?;
                },
                67 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prior_subtype)?;
                },
                68 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.restruct_flag)?;
                },
                69 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.restruct_dt = tmp;
                },
                70 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mor_prd)?;
                },
                71 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rating)?;
                },
                72 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.consitin)?;
                },
                73 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pan)?;
                },
                74 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.limit_amt = tmp;
                },
                75 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.gross_adv = tmp;
                },
                76 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.exp_amt = tmp;
                },
                77 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.unvail_amt = tmp;
                },
                78 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.gold_gram = tmp;
                },
                79 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fund_flag)?;
                },
                80 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ltv_value = tmp;
                },
                81 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_1 = tmp;
                },
                82 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_2 = tmp;
                },
                83 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_3 = tmp;
                },
                84 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_4 = tmp;
                },
                85 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_5 = tmp;
                },
                86 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_1 = tmp;
                },
                87 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_2 = tmp;
                },
                88 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_3 = tmp;
                },
                89 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_4 = tmp;
                },
                90 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_5 = tmp;
                },
                91 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_1)?;
                },
                92 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_2)?;
                },
                93 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_3)?;
                },
                94 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_4)?;
                },
                95 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_5)?;
                },
                96 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_dt = tmp;
                },
                97 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ccod_tl_limit = tmp;
                },
                98 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_principal_amount = tmp;
                },
                99 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_amount = tmp;
                },
                100 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.as_on != 0 {
            my_size += ::protobuf::rt::value_size(1, self.as_on, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.acc_no.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.acc_no);
        }
        if !self.cust_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.cust_name);
        }
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.client_id);
        }
        if self.tl_limit != 0. {
            my_size += 9;
        }
        if self.ccod_limit != 0. {
            my_size += 9;
        }
        if self.pbg_limit != 0. {
            my_size += 9;
        }
        if self.fbg_limit != 0. {
            my_size += 9;
        }
        if self.loc_limit != 0. {
            my_size += 9;
        }
        if self.bliab_bill_limit != 0. {
            my_size += 9;
        }
        if self.tl_blnc != 0. {
            my_size += 9;
        }
        if self.ccod_blnc != 0. {
            my_size += 9;
        }
        if self.pbg_blnc != 0. {
            my_size += 9;
        }
        if self.fbg_blnc != 0. {
            my_size += 9;
        }
        if self.loc_blnc != 0. {
            my_size += 9;
        }
        if self.bliab_bill_blnc != 0. {
            my_size += 10;
        }
        if self.tl_ualimit != 0. {
            my_size += 10;
        }
        if self.ccod_ualimit != 0. {
            my_size += 10;
        }
        if self.pbg_ualimit != 0. {
            my_size += 10;
        }
        if self.fbg_ualimit != 0. {
            my_size += 10;
        }
        if self.loc_ualimit != 0. {
            my_size += 10;
        }
        if self.bliab_bill_ualimit != 0. {
            my_size += 10;
        }
        if self.tl_dep != 0. {
            my_size += 10;
        }
        if self.ccod_dep != 0. {
            my_size += 10;
        }
        if self.pbg_dep != 0. {
            my_size += 10;
        }
        if self.fbg_dep != 0. {
            my_size += 10;
        }
        if self.loc_dep != 0. {
            my_size += 10;
        }
        if self.bliab_bill_dep != 0. {
            my_size += 10;
        }
        if self.tl_cr_eq != 0. {
            my_size += 10;
        }
        if self.ccod_cr_eq != 0. {
            my_size += 10;
        }
        if self.pbg_cr_eq != 0. {
            my_size += 10;
        }
        if self.fbg_cr_eq != 0. {
            my_size += 10;
        }
        if self.loc_cr_eq != 0. {
            my_size += 10;
        }
        if self.bliab_bill_cr_eq != 0. {
            my_size += 10;
        }
        if !self.client_type_ip.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.client_type_ip);
        }
        if !self.ext_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.ext_rating);
        }
        if !self.asset_code.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.asset_code);
        }
        if self.bsr != 0 {
            my_size += ::protobuf::rt::value_size(38, self.bsr, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.ccy);
        }
        if !self.client_type.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.client_type);
        }
        if !self.clients_name.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.clients_name);
        }
        if !self.clients_bsr_type_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.clients_bsr_type_flg);
        }
        if !self.clients_busdivn_code.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.clients_busdivn_code);
        }
        if !self.clients_const_code.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.clients_const_code);
        }
        if !self.clients_pan_gir_num.is_empty() {
            my_size += ::protobuf::rt::string_size(45, &self.clients_pan_gir_num);
        }
        if !self.clients_risk_categorization.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.clients_risk_categorization);
        }
        if !self.clients_risk_cntry.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.clients_risk_cntry);
        }
        if !self.clients_segment_code.is_empty() {
            my_size += ::protobuf::rt::string_size(48, &self.clients_segment_code);
        }
        if !self.corpcl_orgn_qualifier.is_empty() {
            my_size += ::protobuf::rt::string_size(49, &self.corpcl_orgn_qualifier);
        }
        if !self.corpcl_indus_code.is_empty() {
            my_size += ::protobuf::rt::string_size(50, &self.corpcl_indus_code);
        }
        if !self.corpcl_nature_of_bus1.is_empty() {
            my_size += ::protobuf::rt::string_size(51, &self.corpcl_nature_of_bus1);
        }
        if !self.corpcl_nature_of_bus2.is_empty() {
            my_size += ::protobuf::rt::string_size(52, &self.corpcl_nature_of_bus2);
        }
        if !self.corpcl_nature_of_bus3.is_empty() {
            my_size += ::protobuf::rt::string_size(53, &self.corpcl_nature_of_bus3);
        }
        if !self.corpcl_central_state_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(54, &self.corpcl_central_state_flg);
        }
        if !self.corpcl_public_sector_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(55, &self.corpcl_public_sector_flg);
        }
        if !self.corpcl_primary_dlr_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(56, &self.corpcl_primary_dlr_flg);
        }
        if !self.corpcl_multilateral_bank.is_empty() {
            my_size += ::protobuf::rt::string_size(57, &self.corpcl_multilateral_bank);
        }
        if !self.corpcl_connp_inv_num.is_empty() {
            my_size += ::protobuf::rt::string_size(58, &self.corpcl_connp_inv_num);
        }
        if self.corpcl_bc_gross_turnover != 0. {
            my_size += 10;
        }
        if self.ccod_undrawn_lcr != 0. {
            my_size += 10;
        }
        if self.ccod_und_nsfr != 0. {
            my_size += 10;
        }
        if self.care_funded != 0. {
            my_size += 10;
        }
        if self.care_lcbg != 0. {
            my_size += 10;
        }
        if self.sanc_dt != 0 {
            my_size += ::protobuf::rt::value_size(64, self.sanc_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.occp_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(65, &self.occp_cd);
        }
        if !self.sens_sec.is_empty() {
            my_size += ::protobuf::rt::string_size(66, &self.sens_sec);
        }
        if !self.prior_subtype.is_empty() {
            my_size += ::protobuf::rt::string_size(67, &self.prior_subtype);
        }
        if !self.restruct_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(68, &self.restruct_flag);
        }
        if self.restruct_dt != 0 {
            my_size += ::protobuf::rt::value_size(69, self.restruct_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.mor_prd.is_empty() {
            my_size += ::protobuf::rt::string_size(70, &self.mor_prd);
        }
        if !self.rating.is_empty() {
            my_size += ::protobuf::rt::string_size(71, &self.rating);
        }
        if !self.consitin.is_empty() {
            my_size += ::protobuf::rt::string_size(72, &self.consitin);
        }
        if !self.pan.is_empty() {
            my_size += ::protobuf::rt::string_size(73, &self.pan);
        }
        if self.limit_amt != 0. {
            my_size += 10;
        }
        if self.gross_adv != 0. {
            my_size += 10;
        }
        if self.exp_amt != 0. {
            my_size += 10;
        }
        if self.unvail_amt != 0. {
            my_size += 10;
        }
        if self.gold_gram != 0. {
            my_size += 10;
        }
        if !self.fund_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(79, &self.fund_flag);
        }
        if self.ltv_value != 0. {
            my_size += 10;
        }
        if self.pt_i64_1 != 0 {
            my_size += ::protobuf::rt::value_size(81, self.pt_i64_1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_i64_2 != 0 {
            my_size += ::protobuf::rt::value_size(82, self.pt_i64_2, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_i64_3 != 0 {
            my_size += ::protobuf::rt::value_size(83, self.pt_i64_3, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_i64_4 != 0 {
            my_size += ::protobuf::rt::value_size(84, self.pt_i64_4, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_i64_5 != 0 {
            my_size += ::protobuf::rt::value_size(85, self.pt_i64_5, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_f64_1 != 0. {
            my_size += 10;
        }
        if self.pt_f64_2 != 0. {
            my_size += 10;
        }
        if self.pt_f64_3 != 0. {
            my_size += 10;
        }
        if self.pt_f64_4 != 0. {
            my_size += 10;
        }
        if self.pt_f64_5 != 0. {
            my_size += 10;
        }
        if !self.pt_str_1.is_empty() {
            my_size += ::protobuf::rt::string_size(91, &self.pt_str_1);
        }
        if !self.pt_str_2.is_empty() {
            my_size += ::protobuf::rt::string_size(92, &self.pt_str_2);
        }
        if !self.pt_str_3.is_empty() {
            my_size += ::protobuf::rt::string_size(93, &self.pt_str_3);
        }
        if !self.pt_str_4.is_empty() {
            my_size += ::protobuf::rt::string_size(94, &self.pt_str_4);
        }
        if !self.pt_str_5.is_empty() {
            my_size += ::protobuf::rt::string_size(95, &self.pt_str_5);
        }
        if self.maturity_dt != 0 {
            my_size += ::protobuf::rt::value_size(96, self.maturity_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ccod_tl_limit != 0. {
            my_size += 10;
        }
        if self.total_principal_amount != 0. {
            my_size += 10;
        }
        if self.total_interest_amount != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.as_on != 0 {
            os.write_int64(1, self.as_on)?;
        }
        if !self.acc_no.is_empty() {
            os.write_string(2, &self.acc_no)?;
        }
        if !self.cust_name.is_empty() {
            os.write_string(3, &self.cust_name)?;
        }
        if !self.client_id.is_empty() {
            os.write_string(4, &self.client_id)?;
        }
        if self.tl_limit != 0. {
            os.write_double(5, self.tl_limit)?;
        }
        if self.ccod_limit != 0. {
            os.write_double(6, self.ccod_limit)?;
        }
        if self.pbg_limit != 0. {
            os.write_double(7, self.pbg_limit)?;
        }
        if self.fbg_limit != 0. {
            os.write_double(8, self.fbg_limit)?;
        }
        if self.loc_limit != 0. {
            os.write_double(9, self.loc_limit)?;
        }
        if self.bliab_bill_limit != 0. {
            os.write_double(10, self.bliab_bill_limit)?;
        }
        if self.tl_blnc != 0. {
            os.write_double(11, self.tl_blnc)?;
        }
        if self.ccod_blnc != 0. {
            os.write_double(12, self.ccod_blnc)?;
        }
        if self.pbg_blnc != 0. {
            os.write_double(13, self.pbg_blnc)?;
        }
        if self.fbg_blnc != 0. {
            os.write_double(14, self.fbg_blnc)?;
        }
        if self.loc_blnc != 0. {
            os.write_double(15, self.loc_blnc)?;
        }
        if self.bliab_bill_blnc != 0. {
            os.write_double(16, self.bliab_bill_blnc)?;
        }
        if self.tl_ualimit != 0. {
            os.write_double(17, self.tl_ualimit)?;
        }
        if self.ccod_ualimit != 0. {
            os.write_double(18, self.ccod_ualimit)?;
        }
        if self.pbg_ualimit != 0. {
            os.write_double(19, self.pbg_ualimit)?;
        }
        if self.fbg_ualimit != 0. {
            os.write_double(20, self.fbg_ualimit)?;
        }
        if self.loc_ualimit != 0. {
            os.write_double(21, self.loc_ualimit)?;
        }
        if self.bliab_bill_ualimit != 0. {
            os.write_double(22, self.bliab_bill_ualimit)?;
        }
        if self.tl_dep != 0. {
            os.write_double(23, self.tl_dep)?;
        }
        if self.ccod_dep != 0. {
            os.write_double(24, self.ccod_dep)?;
        }
        if self.pbg_dep != 0. {
            os.write_double(25, self.pbg_dep)?;
        }
        if self.fbg_dep != 0. {
            os.write_double(26, self.fbg_dep)?;
        }
        if self.loc_dep != 0. {
            os.write_double(27, self.loc_dep)?;
        }
        if self.bliab_bill_dep != 0. {
            os.write_double(28, self.bliab_bill_dep)?;
        }
        if self.tl_cr_eq != 0. {
            os.write_double(29, self.tl_cr_eq)?;
        }
        if self.ccod_cr_eq != 0. {
            os.write_double(30, self.ccod_cr_eq)?;
        }
        if self.pbg_cr_eq != 0. {
            os.write_double(31, self.pbg_cr_eq)?;
        }
        if self.fbg_cr_eq != 0. {
            os.write_double(32, self.fbg_cr_eq)?;
        }
        if self.loc_cr_eq != 0. {
            os.write_double(33, self.loc_cr_eq)?;
        }
        if self.bliab_bill_cr_eq != 0. {
            os.write_double(34, self.bliab_bill_cr_eq)?;
        }
        if !self.client_type_ip.is_empty() {
            os.write_string(35, &self.client_type_ip)?;
        }
        if !self.ext_rating.is_empty() {
            os.write_string(36, &self.ext_rating)?;
        }
        if !self.asset_code.is_empty() {
            os.write_string(37, &self.asset_code)?;
        }
        if self.bsr != 0 {
            os.write_int64(38, self.bsr)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(39, &self.ccy)?;
        }
        if !self.client_type.is_empty() {
            os.write_string(40, &self.client_type)?;
        }
        if !self.clients_name.is_empty() {
            os.write_string(41, &self.clients_name)?;
        }
        if !self.clients_bsr_type_flg.is_empty() {
            os.write_string(42, &self.clients_bsr_type_flg)?;
        }
        if !self.clients_busdivn_code.is_empty() {
            os.write_string(43, &self.clients_busdivn_code)?;
        }
        if !self.clients_const_code.is_empty() {
            os.write_string(44, &self.clients_const_code)?;
        }
        if !self.clients_pan_gir_num.is_empty() {
            os.write_string(45, &self.clients_pan_gir_num)?;
        }
        if !self.clients_risk_categorization.is_empty() {
            os.write_string(46, &self.clients_risk_categorization)?;
        }
        if !self.clients_risk_cntry.is_empty() {
            os.write_string(47, &self.clients_risk_cntry)?;
        }
        if !self.clients_segment_code.is_empty() {
            os.write_string(48, &self.clients_segment_code)?;
        }
        if !self.corpcl_orgn_qualifier.is_empty() {
            os.write_string(49, &self.corpcl_orgn_qualifier)?;
        }
        if !self.corpcl_indus_code.is_empty() {
            os.write_string(50, &self.corpcl_indus_code)?;
        }
        if !self.corpcl_nature_of_bus1.is_empty() {
            os.write_string(51, &self.corpcl_nature_of_bus1)?;
        }
        if !self.corpcl_nature_of_bus2.is_empty() {
            os.write_string(52, &self.corpcl_nature_of_bus2)?;
        }
        if !self.corpcl_nature_of_bus3.is_empty() {
            os.write_string(53, &self.corpcl_nature_of_bus3)?;
        }
        if !self.corpcl_central_state_flg.is_empty() {
            os.write_string(54, &self.corpcl_central_state_flg)?;
        }
        if !self.corpcl_public_sector_flg.is_empty() {
            os.write_string(55, &self.corpcl_public_sector_flg)?;
        }
        if !self.corpcl_primary_dlr_flg.is_empty() {
            os.write_string(56, &self.corpcl_primary_dlr_flg)?;
        }
        if !self.corpcl_multilateral_bank.is_empty() {
            os.write_string(57, &self.corpcl_multilateral_bank)?;
        }
        if !self.corpcl_connp_inv_num.is_empty() {
            os.write_string(58, &self.corpcl_connp_inv_num)?;
        }
        if self.corpcl_bc_gross_turnover != 0. {
            os.write_double(59, self.corpcl_bc_gross_turnover)?;
        }
        if self.ccod_undrawn_lcr != 0. {
            os.write_double(60, self.ccod_undrawn_lcr)?;
        }
        if self.ccod_und_nsfr != 0. {
            os.write_double(61, self.ccod_und_nsfr)?;
        }
        if self.care_funded != 0. {
            os.write_double(62, self.care_funded)?;
        }
        if self.care_lcbg != 0. {
            os.write_double(63, self.care_lcbg)?;
        }
        if self.sanc_dt != 0 {
            os.write_int64(64, self.sanc_dt)?;
        }
        if !self.occp_cd.is_empty() {
            os.write_string(65, &self.occp_cd)?;
        }
        if !self.sens_sec.is_empty() {
            os.write_string(66, &self.sens_sec)?;
        }
        if !self.prior_subtype.is_empty() {
            os.write_string(67, &self.prior_subtype)?;
        }
        if !self.restruct_flag.is_empty() {
            os.write_string(68, &self.restruct_flag)?;
        }
        if self.restruct_dt != 0 {
            os.write_int64(69, self.restruct_dt)?;
        }
        if !self.mor_prd.is_empty() {
            os.write_string(70, &self.mor_prd)?;
        }
        if !self.rating.is_empty() {
            os.write_string(71, &self.rating)?;
        }
        if !self.consitin.is_empty() {
            os.write_string(72, &self.consitin)?;
        }
        if !self.pan.is_empty() {
            os.write_string(73, &self.pan)?;
        }
        if self.limit_amt != 0. {
            os.write_double(74, self.limit_amt)?;
        }
        if self.gross_adv != 0. {
            os.write_double(75, self.gross_adv)?;
        }
        if self.exp_amt != 0. {
            os.write_double(76, self.exp_amt)?;
        }
        if self.unvail_amt != 0. {
            os.write_double(77, self.unvail_amt)?;
        }
        if self.gold_gram != 0. {
            os.write_double(78, self.gold_gram)?;
        }
        if !self.fund_flag.is_empty() {
            os.write_string(79, &self.fund_flag)?;
        }
        if self.ltv_value != 0. {
            os.write_double(80, self.ltv_value)?;
        }
        if self.pt_i64_1 != 0 {
            os.write_int64(81, self.pt_i64_1)?;
        }
        if self.pt_i64_2 != 0 {
            os.write_int64(82, self.pt_i64_2)?;
        }
        if self.pt_i64_3 != 0 {
            os.write_int64(83, self.pt_i64_3)?;
        }
        if self.pt_i64_4 != 0 {
            os.write_int64(84, self.pt_i64_4)?;
        }
        if self.pt_i64_5 != 0 {
            os.write_int64(85, self.pt_i64_5)?;
        }
        if self.pt_f64_1 != 0. {
            os.write_double(86, self.pt_f64_1)?;
        }
        if self.pt_f64_2 != 0. {
            os.write_double(87, self.pt_f64_2)?;
        }
        if self.pt_f64_3 != 0. {
            os.write_double(88, self.pt_f64_3)?;
        }
        if self.pt_f64_4 != 0. {
            os.write_double(89, self.pt_f64_4)?;
        }
        if self.pt_f64_5 != 0. {
            os.write_double(90, self.pt_f64_5)?;
        }
        if !self.pt_str_1.is_empty() {
            os.write_string(91, &self.pt_str_1)?;
        }
        if !self.pt_str_2.is_empty() {
            os.write_string(92, &self.pt_str_2)?;
        }
        if !self.pt_str_3.is_empty() {
            os.write_string(93, &self.pt_str_3)?;
        }
        if !self.pt_str_4.is_empty() {
            os.write_string(94, &self.pt_str_4)?;
        }
        if !self.pt_str_5.is_empty() {
            os.write_string(95, &self.pt_str_5)?;
        }
        if self.maturity_dt != 0 {
            os.write_int64(96, self.maturity_dt)?;
        }
        if self.ccod_tl_limit != 0. {
            os.write_double(97, self.ccod_tl_limit)?;
        }
        if self.total_principal_amount != 0. {
            os.write_double(98, self.total_principal_amount)?;
        }
        if self.total_interest_amount != 0. {
            os.write_double(99, self.total_interest_amount)?;
        }
        for v in &self.cashflows {
            os.write_tag(100, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "as_on",
                |m: &AccountWithCashflows| { &m.as_on },
                |m: &mut AccountWithCashflows| { &mut m.as_on },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acc_no",
                |m: &AccountWithCashflows| { &m.acc_no },
                |m: &mut AccountWithCashflows| { &mut m.acc_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_name",
                |m: &AccountWithCashflows| { &m.cust_name },
                |m: &mut AccountWithCashflows| { &mut m.cust_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &AccountWithCashflows| { &m.client_id },
                |m: &mut AccountWithCashflows| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tl_limit",
                |m: &AccountWithCashflows| { &m.tl_limit },
                |m: &mut AccountWithCashflows| { &mut m.tl_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ccod_limit",
                |m: &AccountWithCashflows| { &m.ccod_limit },
                |m: &mut AccountWithCashflows| { &mut m.ccod_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pbg_limit",
                |m: &AccountWithCashflows| { &m.pbg_limit },
                |m: &mut AccountWithCashflows| { &mut m.pbg_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "fbg_limit",
                |m: &AccountWithCashflows| { &m.fbg_limit },
                |m: &mut AccountWithCashflows| { &mut m.fbg_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "loc_limit",
                |m: &AccountWithCashflows| { &m.loc_limit },
                |m: &mut AccountWithCashflows| { &mut m.loc_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bliab_bill_limit",
                |m: &AccountWithCashflows| { &m.bliab_bill_limit },
                |m: &mut AccountWithCashflows| { &mut m.bliab_bill_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tl_blnc",
                |m: &AccountWithCashflows| { &m.tl_blnc },
                |m: &mut AccountWithCashflows| { &mut m.tl_blnc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ccod_blnc",
                |m: &AccountWithCashflows| { &m.ccod_blnc },
                |m: &mut AccountWithCashflows| { &mut m.ccod_blnc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pbg_blnc",
                |m: &AccountWithCashflows| { &m.pbg_blnc },
                |m: &mut AccountWithCashflows| { &mut m.pbg_blnc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "fbg_blnc",
                |m: &AccountWithCashflows| { &m.fbg_blnc },
                |m: &mut AccountWithCashflows| { &mut m.fbg_blnc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "loc_blnc",
                |m: &AccountWithCashflows| { &m.loc_blnc },
                |m: &mut AccountWithCashflows| { &mut m.loc_blnc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bliab_bill_blnc",
                |m: &AccountWithCashflows| { &m.bliab_bill_blnc },
                |m: &mut AccountWithCashflows| { &mut m.bliab_bill_blnc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tl_ualimit",
                |m: &AccountWithCashflows| { &m.tl_ualimit },
                |m: &mut AccountWithCashflows| { &mut m.tl_ualimit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ccod_ualimit",
                |m: &AccountWithCashflows| { &m.ccod_ualimit },
                |m: &mut AccountWithCashflows| { &mut m.ccod_ualimit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pbg_ualimit",
                |m: &AccountWithCashflows| { &m.pbg_ualimit },
                |m: &mut AccountWithCashflows| { &mut m.pbg_ualimit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "fbg_ualimit",
                |m: &AccountWithCashflows| { &m.fbg_ualimit },
                |m: &mut AccountWithCashflows| { &mut m.fbg_ualimit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "loc_ualimit",
                |m: &AccountWithCashflows| { &m.loc_ualimit },
                |m: &mut AccountWithCashflows| { &mut m.loc_ualimit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bliab_bill_ualimit",
                |m: &AccountWithCashflows| { &m.bliab_bill_ualimit },
                |m: &mut AccountWithCashflows| { &mut m.bliab_bill_ualimit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tl_dep",
                |m: &AccountWithCashflows| { &m.tl_dep },
                |m: &mut AccountWithCashflows| { &mut m.tl_dep },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ccod_dep",
                |m: &AccountWithCashflows| { &m.ccod_dep },
                |m: &mut AccountWithCashflows| { &mut m.ccod_dep },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pbg_dep",
                |m: &AccountWithCashflows| { &m.pbg_dep },
                |m: &mut AccountWithCashflows| { &mut m.pbg_dep },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "fbg_dep",
                |m: &AccountWithCashflows| { &m.fbg_dep },
                |m: &mut AccountWithCashflows| { &mut m.fbg_dep },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "loc_dep",
                |m: &AccountWithCashflows| { &m.loc_dep },
                |m: &mut AccountWithCashflows| { &mut m.loc_dep },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bliab_bill_dep",
                |m: &AccountWithCashflows| { &m.bliab_bill_dep },
                |m: &mut AccountWithCashflows| { &mut m.bliab_bill_dep },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tl_cr_eq",
                |m: &AccountWithCashflows| { &m.tl_cr_eq },
                |m: &mut AccountWithCashflows| { &mut m.tl_cr_eq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ccod_cr_eq",
                |m: &AccountWithCashflows| { &m.ccod_cr_eq },
                |m: &mut AccountWithCashflows| { &mut m.ccod_cr_eq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pbg_cr_eq",
                |m: &AccountWithCashflows| { &m.pbg_cr_eq },
                |m: &mut AccountWithCashflows| { &mut m.pbg_cr_eq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "fbg_cr_eq",
                |m: &AccountWithCashflows| { &m.fbg_cr_eq },
                |m: &mut AccountWithCashflows| { &mut m.fbg_cr_eq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "loc_cr_eq",
                |m: &AccountWithCashflows| { &m.loc_cr_eq },
                |m: &mut AccountWithCashflows| { &mut m.loc_cr_eq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bliab_bill_cr_eq",
                |m: &AccountWithCashflows| { &m.bliab_bill_cr_eq },
                |m: &mut AccountWithCashflows| { &mut m.bliab_bill_cr_eq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_type_ip",
                |m: &AccountWithCashflows| { &m.client_type_ip },
                |m: &mut AccountWithCashflows| { &mut m.client_type_ip },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ext_rating",
                |m: &AccountWithCashflows| { &m.ext_rating },
                |m: &mut AccountWithCashflows| { &mut m.ext_rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_code",
                |m: &AccountWithCashflows| { &m.asset_code },
                |m: &mut AccountWithCashflows| { &mut m.asset_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "bsr",
                |m: &AccountWithCashflows| { &m.bsr },
                |m: &mut AccountWithCashflows| { &mut m.bsr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ccy",
                |m: &AccountWithCashflows| { &m.ccy },
                |m: &mut AccountWithCashflows| { &mut m.ccy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_type",
                |m: &AccountWithCashflows| { &m.client_type },
                |m: &mut AccountWithCashflows| { &mut m.client_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_name",
                |m: &AccountWithCashflows| { &m.clients_name },
                |m: &mut AccountWithCashflows| { &mut m.clients_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_bsr_type_flg",
                |m: &AccountWithCashflows| { &m.clients_bsr_type_flg },
                |m: &mut AccountWithCashflows| { &mut m.clients_bsr_type_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_busdivn_code",
                |m: &AccountWithCashflows| { &m.clients_busdivn_code },
                |m: &mut AccountWithCashflows| { &mut m.clients_busdivn_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_const_code",
                |m: &AccountWithCashflows| { &m.clients_const_code },
                |m: &mut AccountWithCashflows| { &mut m.clients_const_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_pan_gir_num",
                |m: &AccountWithCashflows| { &m.clients_pan_gir_num },
                |m: &mut AccountWithCashflows| { &mut m.clients_pan_gir_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_risk_categorization",
                |m: &AccountWithCashflows| { &m.clients_risk_categorization },
                |m: &mut AccountWithCashflows| { &mut m.clients_risk_categorization },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_risk_cntry",
                |m: &AccountWithCashflows| { &m.clients_risk_cntry },
                |m: &mut AccountWithCashflows| { &mut m.clients_risk_cntry },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_segment_code",
                |m: &AccountWithCashflows| { &m.clients_segment_code },
                |m: &mut AccountWithCashflows| { &mut m.clients_segment_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_orgn_qualifier",
                |m: &AccountWithCashflows| { &m.corpcl_orgn_qualifier },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_orgn_qualifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_indus_code",
                |m: &AccountWithCashflows| { &m.corpcl_indus_code },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_indus_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_nature_of_bus1",
                |m: &AccountWithCashflows| { &m.corpcl_nature_of_bus1 },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_nature_of_bus1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_nature_of_bus2",
                |m: &AccountWithCashflows| { &m.corpcl_nature_of_bus2 },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_nature_of_bus2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_nature_of_bus3",
                |m: &AccountWithCashflows| { &m.corpcl_nature_of_bus3 },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_nature_of_bus3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_central_state_flg",
                |m: &AccountWithCashflows| { &m.corpcl_central_state_flg },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_central_state_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_public_sector_flg",
                |m: &AccountWithCashflows| { &m.corpcl_public_sector_flg },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_public_sector_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_primary_dlr_flg",
                |m: &AccountWithCashflows| { &m.corpcl_primary_dlr_flg },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_primary_dlr_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_multilateral_bank",
                |m: &AccountWithCashflows| { &m.corpcl_multilateral_bank },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_multilateral_bank },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_connp_inv_num",
                |m: &AccountWithCashflows| { &m.corpcl_connp_inv_num },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_connp_inv_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "corpcl_bc_gross_turnover",
                |m: &AccountWithCashflows| { &m.corpcl_bc_gross_turnover },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_bc_gross_turnover },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ccod_undrawn_lcr",
                |m: &AccountWithCashflows| { &m.ccod_undrawn_lcr },
                |m: &mut AccountWithCashflows| { &mut m.ccod_undrawn_lcr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ccod_und_nsfr",
                |m: &AccountWithCashflows| { &m.ccod_und_nsfr },
                |m: &mut AccountWithCashflows| { &mut m.ccod_und_nsfr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "care_funded",
                |m: &AccountWithCashflows| { &m.care_funded },
                |m: &mut AccountWithCashflows| { &mut m.care_funded },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "care_lcbg",
                |m: &AccountWithCashflows| { &m.care_lcbg },
                |m: &mut AccountWithCashflows| { &mut m.care_lcbg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "sanc_dt",
                |m: &AccountWithCashflows| { &m.sanc_dt },
                |m: &mut AccountWithCashflows| { &mut m.sanc_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "occp_cd",
                |m: &AccountWithCashflows| { &m.occp_cd },
                |m: &mut AccountWithCashflows| { &mut m.occp_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sens_sec",
                |m: &AccountWithCashflows| { &m.sens_sec },
                |m: &mut AccountWithCashflows| { &mut m.sens_sec },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prior_subtype",
                |m: &AccountWithCashflows| { &m.prior_subtype },
                |m: &mut AccountWithCashflows| { &mut m.prior_subtype },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "restruct_flag",
                |m: &AccountWithCashflows| { &m.restruct_flag },
                |m: &mut AccountWithCashflows| { &mut m.restruct_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "restruct_dt",
                |m: &AccountWithCashflows| { &m.restruct_dt },
                |m: &mut AccountWithCashflows| { &mut m.restruct_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mor_prd",
                |m: &AccountWithCashflows| { &m.mor_prd },
                |m: &mut AccountWithCashflows| { &mut m.mor_prd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rating",
                |m: &AccountWithCashflows| { &m.rating },
                |m: &mut AccountWithCashflows| { &mut m.rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "consitin",
                |m: &AccountWithCashflows| { &m.consitin },
                |m: &mut AccountWithCashflows| { &mut m.consitin },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pan",
                |m: &AccountWithCashflows| { &m.pan },
                |m: &mut AccountWithCashflows| { &mut m.pan },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "limit_amt",
                |m: &AccountWithCashflows| { &m.limit_amt },
                |m: &mut AccountWithCashflows| { &mut m.limit_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "gross_adv",
                |m: &AccountWithCashflows| { &m.gross_adv },
                |m: &mut AccountWithCashflows| { &mut m.gross_adv },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "exp_amt",
                |m: &AccountWithCashflows| { &m.exp_amt },
                |m: &mut AccountWithCashflows| { &mut m.exp_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "unvail_amt",
                |m: &AccountWithCashflows| { &m.unvail_amt },
                |m: &mut AccountWithCashflows| { &mut m.unvail_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "gold_gram",
                |m: &AccountWithCashflows| { &m.gold_gram },
                |m: &mut AccountWithCashflows| { &mut m.gold_gram },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fund_flag",
                |m: &AccountWithCashflows| { &m.fund_flag },
                |m: &mut AccountWithCashflows| { &mut m.fund_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ltv_value",
                |m: &AccountWithCashflows| { &m.ltv_value },
                |m: &mut AccountWithCashflows| { &mut m.ltv_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_1",
                |m: &AccountWithCashflows| { &m.pt_i64_1 },
                |m: &mut AccountWithCashflows| { &mut m.pt_i64_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_2",
                |m: &AccountWithCashflows| { &m.pt_i64_2 },
                |m: &mut AccountWithCashflows| { &mut m.pt_i64_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_3",
                |m: &AccountWithCashflows| { &m.pt_i64_3 },
                |m: &mut AccountWithCashflows| { &mut m.pt_i64_3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_4",
                |m: &AccountWithCashflows| { &m.pt_i64_4 },
                |m: &mut AccountWithCashflows| { &mut m.pt_i64_4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_5",
                |m: &AccountWithCashflows| { &m.pt_i64_5 },
                |m: &mut AccountWithCashflows| { &mut m.pt_i64_5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_1",
                |m: &AccountWithCashflows| { &m.pt_f64_1 },
                |m: &mut AccountWithCashflows| { &mut m.pt_f64_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_2",
                |m: &AccountWithCashflows| { &m.pt_f64_2 },
                |m: &mut AccountWithCashflows| { &mut m.pt_f64_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_3",
                |m: &AccountWithCashflows| { &m.pt_f64_3 },
                |m: &mut AccountWithCashflows| { &mut m.pt_f64_3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_4",
                |m: &AccountWithCashflows| { &m.pt_f64_4 },
                |m: &mut AccountWithCashflows| { &mut m.pt_f64_4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_5",
                |m: &AccountWithCashflows| { &m.pt_f64_5 },
                |m: &mut AccountWithCashflows| { &mut m.pt_f64_5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pt_str_1",
                |m: &AccountWithCashflows| { &m.pt_str_1 },
                |m: &mut AccountWithCashflows| { &mut m.pt_str_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pt_str_2",
                |m: &AccountWithCashflows| { &m.pt_str_2 },
                |m: &mut AccountWithCashflows| { &mut m.pt_str_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pt_str_3",
                |m: &AccountWithCashflows| { &m.pt_str_3 },
                |m: &mut AccountWithCashflows| { &mut m.pt_str_3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pt_str_4",
                |m: &AccountWithCashflows| { &m.pt_str_4 },
                |m: &mut AccountWithCashflows| { &mut m.pt_str_4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pt_str_5",
                |m: &AccountWithCashflows| { &m.pt_str_5 },
                |m: &mut AccountWithCashflows| { &mut m.pt_str_5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "maturity_dt",
                |m: &AccountWithCashflows| { &m.maturity_dt },
                |m: &mut AccountWithCashflows| { &mut m.maturity_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ccod_tl_limit",
                |m: &AccountWithCashflows| { &m.ccod_tl_limit },
                |m: &mut AccountWithCashflows| { &mut m.ccod_tl_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "total_principal_amount",
                |m: &AccountWithCashflows| { &m.total_principal_amount },
                |m: &mut AccountWithCashflows| { &mut m.total_principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "total_interest_amount",
                |m: &AccountWithCashflows| { &m.total_interest_amount },
                |m: &mut AccountWithCashflows| { &mut m.total_interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.as_on = 0;
        self.acc_no.clear();
        self.cust_name.clear();
        self.client_id.clear();
        self.tl_limit = 0.;
        self.ccod_limit = 0.;
        self.pbg_limit = 0.;
        self.fbg_limit = 0.;
        self.loc_limit = 0.;
        self.bliab_bill_limit = 0.;
        self.tl_blnc = 0.;
        self.ccod_blnc = 0.;
        self.pbg_blnc = 0.;
        self.fbg_blnc = 0.;
        self.loc_blnc = 0.;
        self.bliab_bill_blnc = 0.;
        self.tl_ualimit = 0.;
        self.ccod_ualimit = 0.;
        self.pbg_ualimit = 0.;
        self.fbg_ualimit = 0.;
        self.loc_ualimit = 0.;
        self.bliab_bill_ualimit = 0.;
        self.tl_dep = 0.;
        self.ccod_dep = 0.;
        self.pbg_dep = 0.;
        self.fbg_dep = 0.;
        self.loc_dep = 0.;
        self.bliab_bill_dep = 0.;
        self.tl_cr_eq = 0.;
        self.ccod_cr_eq = 0.;
        self.pbg_cr_eq = 0.;
        self.fbg_cr_eq = 0.;
        self.loc_cr_eq = 0.;
        self.bliab_bill_cr_eq = 0.;
        self.client_type_ip.clear();
        self.ext_rating.clear();
        self.asset_code.clear();
        self.bsr = 0;
        self.ccy.clear();
        self.client_type.clear();
        self.clients_name.clear();
        self.clients_bsr_type_flg.clear();
        self.clients_busdivn_code.clear();
        self.clients_const_code.clear();
        self.clients_pan_gir_num.clear();
        self.clients_risk_categorization.clear();
        self.clients_risk_cntry.clear();
        self.clients_segment_code.clear();
        self.corpcl_orgn_qualifier.clear();
        self.corpcl_indus_code.clear();
        self.corpcl_nature_of_bus1.clear();
        self.corpcl_nature_of_bus2.clear();
        self.corpcl_nature_of_bus3.clear();
        self.corpcl_central_state_flg.clear();
        self.corpcl_public_sector_flg.clear();
        self.corpcl_primary_dlr_flg.clear();
        self.corpcl_multilateral_bank.clear();
        self.corpcl_connp_inv_num.clear();
        self.corpcl_bc_gross_turnover = 0.;
        self.ccod_undrawn_lcr = 0.;
        self.ccod_und_nsfr = 0.;
        self.care_funded = 0.;
        self.care_lcbg = 0.;
        self.sanc_dt = 0;
        self.occp_cd.clear();
        self.sens_sec.clear();
        self.prior_subtype.clear();
        self.restruct_flag.clear();
        self.restruct_dt = 0;
        self.mor_prd.clear();
        self.rating.clear();
        self.consitin.clear();
        self.pan.clear();
        self.limit_amt = 0.;
        self.gross_adv = 0.;
        self.exp_amt = 0.;
        self.unvail_amt = 0.;
        self.gold_gram = 0.;
        self.fund_flag.clear();
        self.ltv_value = 0.;
        self.pt_i64_1 = 0;
        self.pt_i64_2 = 0;
        self.pt_i64_3 = 0;
        self.pt_i64_4 = 0;
        self.pt_i64_5 = 0;
        self.pt_f64_1 = 0.;
        self.pt_f64_2 = 0.;
        self.pt_f64_3 = 0.;
        self.pt_f64_4 = 0.;
        self.pt_f64_5 = 0.;
        self.pt_str_1.clear();
        self.pt_str_2.clear();
        self.pt_str_3.clear();
        self.pt_str_4.clear();
        self.pt_str_5.clear();
        self.maturity_dt = 0;
        self.ccod_tl_limit = 0.;
        self.total_principal_amount = 0.;
        self.total_interest_amount = 0.;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\
    \x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\
    \x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\
    \x04date\"\xcb\x1a\n\x14AccountWithCashflows\x12\x13\n\x05as_on\x18\x01\
    \x20\x01(\x03R\x04asOn\x12\x15\n\x06acc_no\x18\x02\x20\x01(\tR\x05accNo\
    \x12\x1b\n\tcust_name\x18\x03\x20\x01(\tR\x08custName\x12\x1b\n\tclient_\
    id\x18\x04\x20\x01(\tR\x08clientId\x12\x19\n\x08tl_limit\x18\x05\x20\x01\
    (\x01R\x07tlLimit\x12\x1d\n\nccod_limit\x18\x06\x20\x01(\x01R\tccodLimit\
    \x12\x1b\n\tpbg_limit\x18\x07\x20\x01(\x01R\x08pbgLimit\x12\x1b\n\tfbg_l\
    imit\x18\x08\x20\x01(\x01R\x08fbgLimit\x12\x1b\n\tloc_limit\x18\t\x20\
    \x01(\x01R\x08locLimit\x12(\n\x10bliab_bill_limit\x18\n\x20\x01(\x01R\
    \x0ebliabBillLimit\x12\x17\n\x07tl_blnc\x18\x0b\x20\x01(\x01R\x06tlBlnc\
    \x12\x1b\n\tccod_blnc\x18\x0c\x20\x01(\x01R\x08ccodBlnc\x12\x19\n\x08pbg\
    _blnc\x18\r\x20\x01(\x01R\x07pbgBlnc\x12\x19\n\x08fbg_blnc\x18\x0e\x20\
    \x01(\x01R\x07fbgBlnc\x12\x19\n\x08loc_blnc\x18\x0f\x20\x01(\x01R\x07loc\
    Blnc\x12&\n\x0fbliab_bill_blnc\x18\x10\x20\x01(\x01R\rbliabBillBlnc\x12\
    \x1d\n\ntl_ualimit\x18\x11\x20\x01(\x01R\ttlUalimit\x12!\n\x0cccod_ualim\
    it\x18\x12\x20\x01(\x01R\x0bccodUalimit\x12\x1f\n\x0bpbg_ualimit\x18\x13\
    \x20\x01(\x01R\npbgUalimit\x12\x1f\n\x0bfbg_ualimit\x18\x14\x20\x01(\x01\
    R\nfbgUalimit\x12\x1f\n\x0bloc_ualimit\x18\x15\x20\x01(\x01R\nlocUalimit\
    \x12,\n\x12bliab_bill_ualimit\x18\x16\x20\x01(\x01R\x10bliabBillUalimit\
    \x12\x15\n\x06tl_dep\x18\x17\x20\x01(\x01R\x05tlDep\x12\x19\n\x08ccod_de\
    p\x18\x18\x20\x01(\x01R\x07ccodDep\x12\x17\n\x07pbg_dep\x18\x19\x20\x01(\
    \x01R\x06pbgDep\x12\x17\n\x07fbg_dep\x18\x1a\x20\x01(\x01R\x06fbgDep\x12\
    \x17\n\x07loc_dep\x18\x1b\x20\x01(\x01R\x06locDep\x12$\n\x0ebliab_bill_d\
    ep\x18\x1c\x20\x01(\x01R\x0cbliabBillDep\x12\x18\n\x08tl_cr_eq\x18\x1d\
    \x20\x01(\x01R\x06tlCrEq\x12\x1c\n\nccod_cr_eq\x18\x1e\x20\x01(\x01R\x08\
    ccodCrEq\x12\x1a\n\tpbg_cr_eq\x18\x1f\x20\x01(\x01R\x07pbgCrEq\x12\x1a\n\
    \tfbg_cr_eq\x18\x20\x20\x01(\x01R\x07fbgCrEq\x12\x1a\n\tloc_cr_eq\x18!\
    \x20\x01(\x01R\x07locCrEq\x12'\n\x10bliab_bill_cr_eq\x18\"\x20\x01(\x01R\
    \rbliabBillCrEq\x12$\n\x0eclient_type_ip\x18#\x20\x01(\tR\x0cclientTypeI\
    p\x12\x1d\n\next_rating\x18$\x20\x01(\tR\textRating\x12\x1d\n\nasset_cod\
    e\x18%\x20\x01(\tR\tassetCode\x12\x10\n\x03bsr\x18&\x20\x01(\x03R\x03bsr\
    \x12\x10\n\x03ccy\x18'\x20\x01(\tR\x03ccy\x12\x1f\n\x0bclient_type\x18(\
    \x20\x01(\tR\nclientType\x12!\n\x0cclients_name\x18)\x20\x01(\tR\x0bclie\
    ntsName\x12/\n\x14clients_bsr_type_flg\x18*\x20\x01(\tR\x11clientsBsrTyp\
    eFlg\x120\n\x14clients_busdivn_code\x18+\x20\x01(\tR\x12clientsBusdivnCo\
    de\x12,\n\x12clients_const_code\x18,\x20\x01(\tR\x10clientsConstCode\x12\
    -\n\x13clients_pan_gir_num\x18-\x20\x01(\tR\x10clientsPanGirNum\x12>\n\
    \x1bclients_risk_categorization\x18.\x20\x01(\tR\x19clientsRiskCategoriz\
    ation\x12,\n\x12clients_risk_cntry\x18/\x20\x01(\tR\x10clientsRiskCntry\
    \x120\n\x14clients_segment_code\x180\x20\x01(\tR\x12clientsSegmentCode\
    \x122\n\x15corpcl_orgn_qualifier\x181\x20\x01(\tR\x13corpclOrgnQualifier\
    \x12*\n\x11corpcl_indus_code\x182\x20\x01(\tR\x0fcorpclIndusCode\x121\n\
    \x15corpcl_nature_of_bus1\x183\x20\x01(\tR\x12corpclNatureOfBus1\x121\n\
    \x15corpcl_nature_of_bus2\x184\x20\x01(\tR\x12corpclNatureOfBus2\x121\n\
    \x15corpcl_nature_of_bus3\x185\x20\x01(\tR\x12corpclNatureOfBus3\x127\n\
    \x18corpcl_central_state_flg\x186\x20\x01(\tR\x15corpclCentralStateFlg\
    \x127\n\x18corpcl_public_sector_flg\x187\x20\x01(\tR\x15corpclPublicSect\
    orFlg\x123\n\x16corpcl_primary_dlr_flg\x188\x20\x01(\tR\x13corpclPrimary\
    DlrFlg\x128\n\x18corpcl_multilateral_bank\x189\x20\x01(\tR\x16corpclMult\
    ilateralBank\x12/\n\x14corpcl_connp_inv_num\x18:\x20\x01(\tR\x11corpclCo\
    nnpInvNum\x127\n\x18corpcl_bc_gross_turnover\x18;\x20\x01(\x01R\x15corpc\
    lBcGrossTurnover\x12(\n\x10ccod_undrawn_lcr\x18<\x20\x01(\x01R\x0eccodUn\
    drawnLcr\x12\"\n\rccod_und_nsfr\x18=\x20\x01(\x01R\x0bccodUndNsfr\x12\
    \x1f\n\x0bcare_funded\x18>\x20\x01(\x01R\ncareFunded\x12\x1b\n\tcare_lcb\
    g\x18?\x20\x01(\x01R\x08careLcbg\x12\x17\n\x07sanc_dt\x18@\x20\x01(\x03R\
    \x06sancDt\x12\x17\n\x07occp_cd\x18A\x20\x01(\tR\x06occpCd\x12\x19\n\x08\
    sens_sec\x18B\x20\x01(\tR\x07sensSec\x12#\n\rprior_subtype\x18C\x20\x01(\
    \tR\x0cpriorSubtype\x12#\n\rrestruct_flag\x18D\x20\x01(\tR\x0crestructFl\
    ag\x12\x1f\n\x0brestruct_dt\x18E\x20\x01(\x03R\nrestructDt\x12\x17\n\x07\
    mor_prd\x18F\x20\x01(\tR\x06morPrd\x12\x16\n\x06rating\x18G\x20\x01(\tR\
    \x06rating\x12\x1a\n\x08consitin\x18H\x20\x01(\tR\x08consitin\x12\x10\n\
    \x03pan\x18I\x20\x01(\tR\x03pan\x12\x1b\n\tlimit_amt\x18J\x20\x01(\x01R\
    \x08limitAmt\x12\x1b\n\tgross_adv\x18K\x20\x01(\x01R\x08grossAdv\x12\x17\
    \n\x07exp_amt\x18L\x20\x01(\x01R\x06expAmt\x12\x1d\n\nunvail_amt\x18M\
    \x20\x01(\x01R\tunvailAmt\x12\x1b\n\tgold_gram\x18N\x20\x01(\x01R\x08gol\
    dGram\x12\x1b\n\tfund_flag\x18O\x20\x01(\tR\x08fundFlag\x12\x1b\n\tltv_v\
    alue\x18P\x20\x01(\x01R\x08ltvValue\x12\x18\n\x08pt_i64_1\x18Q\x20\x01(\
    \x03R\x06ptI641\x12\x18\n\x08pt_i64_2\x18R\x20\x01(\x03R\x06ptI642\x12\
    \x18\n\x08pt_i64_3\x18S\x20\x01(\x03R\x06ptI643\x12\x18\n\x08pt_i64_4\
    \x18T\x20\x01(\x03R\x06ptI644\x12\x18\n\x08pt_i64_5\x18U\x20\x01(\x03R\
    \x06ptI645\x12\x18\n\x08pt_f64_1\x18V\x20\x01(\x01R\x06ptF641\x12\x18\n\
    \x08pt_f64_2\x18W\x20\x01(\x01R\x06ptF642\x12\x18\n\x08pt_f64_3\x18X\x20\
    \x01(\x01R\x06ptF643\x12\x18\n\x08pt_f64_4\x18Y\x20\x01(\x01R\x06ptF644\
    \x12\x18\n\x08pt_f64_5\x18Z\x20\x01(\x01R\x06ptF645\x12\x18\n\x08pt_str_\
    1\x18[\x20\x01(\tR\x06ptStr1\x12\x18\n\x08pt_str_2\x18\\\x20\x01(\tR\x06\
    ptStr2\x12\x18\n\x08pt_str_3\x18]\x20\x01(\tR\x06ptStr3\x12\x18\n\x08pt_\
    str_4\x18^\x20\x01(\tR\x06ptStr4\x12\x18\n\x08pt_str_5\x18_\x20\x01(\tR\
    \x06ptStr5\x12\x1f\n\x0bmaturity_dt\x18`\x20\x01(\x03R\nmaturityDt\x12\"\
    \n\rccod_tl_limit\x18a\x20\x01(\x01R\x0bccodTlLimit\x124\n\x16total_prin\
    cipal_amount\x18b\x20\x01(\x01R\x14totalPrincipalAmount\x122\n\x15total_\
    interest_amount\x18c\x20\x01(\x01R\x13totalInterestAmount\x12'\n\tcashfl\
    ows\x18d\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
