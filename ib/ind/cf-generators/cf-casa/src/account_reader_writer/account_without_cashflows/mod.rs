// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cf-casa.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct OutputAccount {
    // message fields
    pub key_1: ::std::string::String,
    pub branch_no: ::std::string::String,
    pub curr_status: ::std::string::String,
    pub acct_type: ::std::string::String,
    pub int_cat: ::std::string::String,
    pub inv_type: ::std::string::String,
    pub currency: ::std::string::String,
    pub customer_no: ::std::string::String,
    pub cr_limit: i32,
    pub curr_bal: f64,
    pub wdl_flag: i32,
    pub int_available: i32,
    pub acc_open_dt: i64,
    pub int_frm_dt: i64,
    pub int_to_dt: i64,
    pub no_dues: i32,
    pub var_int_rate: i32,
    pub rval_ind: ::std::string::String,
    pub od_visa_area: ::std::string::String,
    pub lst_ovr_limit_date: i64,
    pub cr_store_rate: i32,
    pub dr_store_rate: i32,
    pub gl_class_code: ::std::string::String,
    pub mop_type: ::std::string::String,
    pub instl_due_day: i32,
    pub term_int_comp_freq: ::std::string::String,
    pub term_int_cmp_sop_dt: i64,
    pub term_int_cmp_eop_dt: i64,
    pub term_int_comp_amt: f64,
    pub lending_status: ::std::string::String,
    pub name: ::std::string::String,
    pub cust_acct_no: ::std::string::String,
    pub prim_acct: ::std::string::String,
    pub segment_code: ::std::string::String,
    pub industry_code: ::std::string::String,
    pub grup_code: ::std::string::String,
    pub bus_sector_code: ::std::string::String,
    pub tier_cust_type: ::std::string::String,
    pub a1: ::std::string::String,
    pub a2: ::std::string::String,
    pub a3: ::std::string::String,
    pub a4: ::std::string::String,
    pub a5: i64,
    pub a6: i64,
    pub a7: f64,
    pub a8: f64,
    pub a9: i64,
    pub a10: i64,
    pub gl_code: ::std::string::String,
    pub int_rate: f64,
    pub curr_bal_lcy: f64,
    pub as_on_date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutputAccount {
    fn default() -> &'a OutputAccount {
        <OutputAccount as ::protobuf::Message>::default_instance()
    }
}

impl OutputAccount {
    pub fn new() -> OutputAccount {
        ::std::default::Default::default()
    }

    // string key_1 = 1;


    pub fn get_key_1(&self) -> &str {
        &self.key_1
    }
    pub fn clear_key_1(&mut self) {
        self.key_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_key_1(&mut self, v: ::std::string::String) {
        self.key_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_1(&mut self) -> &mut ::std::string::String {
        &mut self.key_1
    }

    // Take field
    pub fn take_key_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key_1, ::std::string::String::new())
    }

    // string branch_no = 2;


    pub fn get_branch_no(&self) -> &str {
        &self.branch_no
    }
    pub fn clear_branch_no(&mut self) {
        self.branch_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch_no(&mut self, v: ::std::string::String) {
        self.branch_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch_no(&mut self) -> &mut ::std::string::String {
        &mut self.branch_no
    }

    // Take field
    pub fn take_branch_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch_no, ::std::string::String::new())
    }

    // string curr_status = 3;


    pub fn get_curr_status(&self) -> &str {
        &self.curr_status
    }
    pub fn clear_curr_status(&mut self) {
        self.curr_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_curr_status(&mut self, v: ::std::string::String) {
        self.curr_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_curr_status(&mut self) -> &mut ::std::string::String {
        &mut self.curr_status
    }

    // Take field
    pub fn take_curr_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.curr_status, ::std::string::String::new())
    }

    // string acct_type = 4;


    pub fn get_acct_type(&self) -> &str {
        &self.acct_type
    }
    pub fn clear_acct_type(&mut self) {
        self.acct_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_acct_type(&mut self, v: ::std::string::String) {
        self.acct_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acct_type(&mut self) -> &mut ::std::string::String {
        &mut self.acct_type
    }

    // Take field
    pub fn take_acct_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acct_type, ::std::string::String::new())
    }

    // string int_cat = 5;


    pub fn get_int_cat(&self) -> &str {
        &self.int_cat
    }
    pub fn clear_int_cat(&mut self) {
        self.int_cat.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_cat(&mut self, v: ::std::string::String) {
        self.int_cat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_cat(&mut self) -> &mut ::std::string::String {
        &mut self.int_cat
    }

    // Take field
    pub fn take_int_cat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_cat, ::std::string::String::new())
    }

    // string inv_type = 6;


    pub fn get_inv_type(&self) -> &str {
        &self.inv_type
    }
    pub fn clear_inv_type(&mut self) {
        self.inv_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_inv_type(&mut self, v: ::std::string::String) {
        self.inv_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inv_type(&mut self) -> &mut ::std::string::String {
        &mut self.inv_type
    }

    // Take field
    pub fn take_inv_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.inv_type, ::std::string::String::new())
    }

    // string currency = 7;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // string customer_no = 8;


    pub fn get_customer_no(&self) -> &str {
        &self.customer_no
    }
    pub fn clear_customer_no(&mut self) {
        self.customer_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_no(&mut self, v: ::std::string::String) {
        self.customer_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_no(&mut self) -> &mut ::std::string::String {
        &mut self.customer_no
    }

    // Take field
    pub fn take_customer_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_no, ::std::string::String::new())
    }

    // int32 cr_limit = 9;


    pub fn get_cr_limit(&self) -> i32 {
        self.cr_limit
    }
    pub fn clear_cr_limit(&mut self) {
        self.cr_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_cr_limit(&mut self, v: i32) {
        self.cr_limit = v;
    }

    // double curr_bal = 10;


    pub fn get_curr_bal(&self) -> f64 {
        self.curr_bal
    }
    pub fn clear_curr_bal(&mut self) {
        self.curr_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_curr_bal(&mut self, v: f64) {
        self.curr_bal = v;
    }

    // int32 wdl_flag = 11;


    pub fn get_wdl_flag(&self) -> i32 {
        self.wdl_flag
    }
    pub fn clear_wdl_flag(&mut self) {
        self.wdl_flag = 0;
    }

    // Param is passed by value, moved
    pub fn set_wdl_flag(&mut self, v: i32) {
        self.wdl_flag = v;
    }

    // int32 int_available = 12;


    pub fn get_int_available(&self) -> i32 {
        self.int_available
    }
    pub fn clear_int_available(&mut self) {
        self.int_available = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_available(&mut self, v: i32) {
        self.int_available = v;
    }

    // int64 acc_open_dt = 13;


    pub fn get_acc_open_dt(&self) -> i64 {
        self.acc_open_dt
    }
    pub fn clear_acc_open_dt(&mut self) {
        self.acc_open_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_acc_open_dt(&mut self, v: i64) {
        self.acc_open_dt = v;
    }

    // int64 int_frm_dt = 14;


    pub fn get_int_frm_dt(&self) -> i64 {
        self.int_frm_dt
    }
    pub fn clear_int_frm_dt(&mut self) {
        self.int_frm_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_frm_dt(&mut self, v: i64) {
        self.int_frm_dt = v;
    }

    // int64 int_to_dt = 15;


    pub fn get_int_to_dt(&self) -> i64 {
        self.int_to_dt
    }
    pub fn clear_int_to_dt(&mut self) {
        self.int_to_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_to_dt(&mut self, v: i64) {
        self.int_to_dt = v;
    }

    // int32 no_dues = 16;


    pub fn get_no_dues(&self) -> i32 {
        self.no_dues
    }
    pub fn clear_no_dues(&mut self) {
        self.no_dues = 0;
    }

    // Param is passed by value, moved
    pub fn set_no_dues(&mut self, v: i32) {
        self.no_dues = v;
    }

    // int32 var_int_rate = 17;


    pub fn get_var_int_rate(&self) -> i32 {
        self.var_int_rate
    }
    pub fn clear_var_int_rate(&mut self) {
        self.var_int_rate = 0;
    }

    // Param is passed by value, moved
    pub fn set_var_int_rate(&mut self, v: i32) {
        self.var_int_rate = v;
    }

    // string rval_ind = 18;


    pub fn get_rval_ind(&self) -> &str {
        &self.rval_ind
    }
    pub fn clear_rval_ind(&mut self) {
        self.rval_ind.clear();
    }

    // Param is passed by value, moved
    pub fn set_rval_ind(&mut self, v: ::std::string::String) {
        self.rval_ind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rval_ind(&mut self) -> &mut ::std::string::String {
        &mut self.rval_ind
    }

    // Take field
    pub fn take_rval_ind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rval_ind, ::std::string::String::new())
    }

    // string od_visa_area = 19;


    pub fn get_od_visa_area(&self) -> &str {
        &self.od_visa_area
    }
    pub fn clear_od_visa_area(&mut self) {
        self.od_visa_area.clear();
    }

    // Param is passed by value, moved
    pub fn set_od_visa_area(&mut self, v: ::std::string::String) {
        self.od_visa_area = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_od_visa_area(&mut self) -> &mut ::std::string::String {
        &mut self.od_visa_area
    }

    // Take field
    pub fn take_od_visa_area(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.od_visa_area, ::std::string::String::new())
    }

    // int64 lst_ovr_limit_date = 20;


    pub fn get_lst_ovr_limit_date(&self) -> i64 {
        self.lst_ovr_limit_date
    }
    pub fn clear_lst_ovr_limit_date(&mut self) {
        self.lst_ovr_limit_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_lst_ovr_limit_date(&mut self, v: i64) {
        self.lst_ovr_limit_date = v;
    }

    // int32 cr_store_rate = 21;


    pub fn get_cr_store_rate(&self) -> i32 {
        self.cr_store_rate
    }
    pub fn clear_cr_store_rate(&mut self) {
        self.cr_store_rate = 0;
    }

    // Param is passed by value, moved
    pub fn set_cr_store_rate(&mut self, v: i32) {
        self.cr_store_rate = v;
    }

    // int32 dr_store_rate = 22;


    pub fn get_dr_store_rate(&self) -> i32 {
        self.dr_store_rate
    }
    pub fn clear_dr_store_rate(&mut self) {
        self.dr_store_rate = 0;
    }

    // Param is passed by value, moved
    pub fn set_dr_store_rate(&mut self, v: i32) {
        self.dr_store_rate = v;
    }

    // string gl_class_code = 23;


    pub fn get_gl_class_code(&self) -> &str {
        &self.gl_class_code
    }
    pub fn clear_gl_class_code(&mut self) {
        self.gl_class_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_class_code(&mut self, v: ::std::string::String) {
        self.gl_class_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_class_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_class_code
    }

    // Take field
    pub fn take_gl_class_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_class_code, ::std::string::String::new())
    }

    // string mop_type = 24;


    pub fn get_mop_type(&self) -> &str {
        &self.mop_type
    }
    pub fn clear_mop_type(&mut self) {
        self.mop_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_mop_type(&mut self, v: ::std::string::String) {
        self.mop_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mop_type(&mut self) -> &mut ::std::string::String {
        &mut self.mop_type
    }

    // Take field
    pub fn take_mop_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mop_type, ::std::string::String::new())
    }

    // int32 instl_due_day = 25;


    pub fn get_instl_due_day(&self) -> i32 {
        self.instl_due_day
    }
    pub fn clear_instl_due_day(&mut self) {
        self.instl_due_day = 0;
    }

    // Param is passed by value, moved
    pub fn set_instl_due_day(&mut self, v: i32) {
        self.instl_due_day = v;
    }

    // string term_int_comp_freq = 26;


    pub fn get_term_int_comp_freq(&self) -> &str {
        &self.term_int_comp_freq
    }
    pub fn clear_term_int_comp_freq(&mut self) {
        self.term_int_comp_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_term_int_comp_freq(&mut self, v: ::std::string::String) {
        self.term_int_comp_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_term_int_comp_freq(&mut self) -> &mut ::std::string::String {
        &mut self.term_int_comp_freq
    }

    // Take field
    pub fn take_term_int_comp_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.term_int_comp_freq, ::std::string::String::new())
    }

    // int64 term_int_cmp_sop_dt = 27;


    pub fn get_term_int_cmp_sop_dt(&self) -> i64 {
        self.term_int_cmp_sop_dt
    }
    pub fn clear_term_int_cmp_sop_dt(&mut self) {
        self.term_int_cmp_sop_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_term_int_cmp_sop_dt(&mut self, v: i64) {
        self.term_int_cmp_sop_dt = v;
    }

    // int64 term_int_cmp_eop_dt = 28;


    pub fn get_term_int_cmp_eop_dt(&self) -> i64 {
        self.term_int_cmp_eop_dt
    }
    pub fn clear_term_int_cmp_eop_dt(&mut self) {
        self.term_int_cmp_eop_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_term_int_cmp_eop_dt(&mut self, v: i64) {
        self.term_int_cmp_eop_dt = v;
    }

    // double term_int_comp_amt = 29;


    pub fn get_term_int_comp_amt(&self) -> f64 {
        self.term_int_comp_amt
    }
    pub fn clear_term_int_comp_amt(&mut self) {
        self.term_int_comp_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_term_int_comp_amt(&mut self, v: f64) {
        self.term_int_comp_amt = v;
    }

    // string lending_status = 30;


    pub fn get_lending_status(&self) -> &str {
        &self.lending_status
    }
    pub fn clear_lending_status(&mut self) {
        self.lending_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_lending_status(&mut self, v: ::std::string::String) {
        self.lending_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lending_status(&mut self) -> &mut ::std::string::String {
        &mut self.lending_status
    }

    // Take field
    pub fn take_lending_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lending_status, ::std::string::String::new())
    }

    // string name = 31;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string cust_acct_no = 32;


    pub fn get_cust_acct_no(&self) -> &str {
        &self.cust_acct_no
    }
    pub fn clear_cust_acct_no(&mut self) {
        self.cust_acct_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_acct_no(&mut self, v: ::std::string::String) {
        self.cust_acct_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_acct_no(&mut self) -> &mut ::std::string::String {
        &mut self.cust_acct_no
    }

    // Take field
    pub fn take_cust_acct_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_acct_no, ::std::string::String::new())
    }

    // string prim_acct = 33;


    pub fn get_prim_acct(&self) -> &str {
        &self.prim_acct
    }
    pub fn clear_prim_acct(&mut self) {
        self.prim_acct.clear();
    }

    // Param is passed by value, moved
    pub fn set_prim_acct(&mut self, v: ::std::string::String) {
        self.prim_acct = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prim_acct(&mut self) -> &mut ::std::string::String {
        &mut self.prim_acct
    }

    // Take field
    pub fn take_prim_acct(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prim_acct, ::std::string::String::new())
    }

    // string segment_code = 34;


    pub fn get_segment_code(&self) -> &str {
        &self.segment_code
    }
    pub fn clear_segment_code(&mut self) {
        self.segment_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_segment_code(&mut self, v: ::std::string::String) {
        self.segment_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_segment_code(&mut self) -> &mut ::std::string::String {
        &mut self.segment_code
    }

    // Take field
    pub fn take_segment_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.segment_code, ::std::string::String::new())
    }

    // string industry_code = 35;


    pub fn get_industry_code(&self) -> &str {
        &self.industry_code
    }
    pub fn clear_industry_code(&mut self) {
        self.industry_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_industry_code(&mut self, v: ::std::string::String) {
        self.industry_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_industry_code(&mut self) -> &mut ::std::string::String {
        &mut self.industry_code
    }

    // Take field
    pub fn take_industry_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.industry_code, ::std::string::String::new())
    }

    // string grup_code = 36;


    pub fn get_grup_code(&self) -> &str {
        &self.grup_code
    }
    pub fn clear_grup_code(&mut self) {
        self.grup_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_grup_code(&mut self, v: ::std::string::String) {
        self.grup_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grup_code(&mut self) -> &mut ::std::string::String {
        &mut self.grup_code
    }

    // Take field
    pub fn take_grup_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grup_code, ::std::string::String::new())
    }

    // string bus_sector_code = 37;


    pub fn get_bus_sector_code(&self) -> &str {
        &self.bus_sector_code
    }
    pub fn clear_bus_sector_code(&mut self) {
        self.bus_sector_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_bus_sector_code(&mut self, v: ::std::string::String) {
        self.bus_sector_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bus_sector_code(&mut self) -> &mut ::std::string::String {
        &mut self.bus_sector_code
    }

    // Take field
    pub fn take_bus_sector_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bus_sector_code, ::std::string::String::new())
    }

    // string tier_cust_type = 38;


    pub fn get_tier_cust_type(&self) -> &str {
        &self.tier_cust_type
    }
    pub fn clear_tier_cust_type(&mut self) {
        self.tier_cust_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_tier_cust_type(&mut self, v: ::std::string::String) {
        self.tier_cust_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tier_cust_type(&mut self) -> &mut ::std::string::String {
        &mut self.tier_cust_type
    }

    // Take field
    pub fn take_tier_cust_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tier_cust_type, ::std::string::String::new())
    }

    // string a1 = 39;


    pub fn get_a1(&self) -> &str {
        &self.a1
    }
    pub fn clear_a1(&mut self) {
        self.a1.clear();
    }

    // Param is passed by value, moved
    pub fn set_a1(&mut self, v: ::std::string::String) {
        self.a1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a1(&mut self) -> &mut ::std::string::String {
        &mut self.a1
    }

    // Take field
    pub fn take_a1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a1, ::std::string::String::new())
    }

    // string a2 = 40;


    pub fn get_a2(&self) -> &str {
        &self.a2
    }
    pub fn clear_a2(&mut self) {
        self.a2.clear();
    }

    // Param is passed by value, moved
    pub fn set_a2(&mut self, v: ::std::string::String) {
        self.a2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a2(&mut self) -> &mut ::std::string::String {
        &mut self.a2
    }

    // Take field
    pub fn take_a2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a2, ::std::string::String::new())
    }

    // string a3 = 41;


    pub fn get_a3(&self) -> &str {
        &self.a3
    }
    pub fn clear_a3(&mut self) {
        self.a3.clear();
    }

    // Param is passed by value, moved
    pub fn set_a3(&mut self, v: ::std::string::String) {
        self.a3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a3(&mut self) -> &mut ::std::string::String {
        &mut self.a3
    }

    // Take field
    pub fn take_a3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a3, ::std::string::String::new())
    }

    // string a4 = 42;


    pub fn get_a4(&self) -> &str {
        &self.a4
    }
    pub fn clear_a4(&mut self) {
        self.a4.clear();
    }

    // Param is passed by value, moved
    pub fn set_a4(&mut self, v: ::std::string::String) {
        self.a4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_a4(&mut self) -> &mut ::std::string::String {
        &mut self.a4
    }

    // Take field
    pub fn take_a4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.a4, ::std::string::String::new())
    }

    // int64 a5 = 43;


    pub fn get_a5(&self) -> i64 {
        self.a5
    }
    pub fn clear_a5(&mut self) {
        self.a5 = 0;
    }

    // Param is passed by value, moved
    pub fn set_a5(&mut self, v: i64) {
        self.a5 = v;
    }

    // int64 a6 = 44;


    pub fn get_a6(&self) -> i64 {
        self.a6
    }
    pub fn clear_a6(&mut self) {
        self.a6 = 0;
    }

    // Param is passed by value, moved
    pub fn set_a6(&mut self, v: i64) {
        self.a6 = v;
    }

    // double a7 = 45;


    pub fn get_a7(&self) -> f64 {
        self.a7
    }
    pub fn clear_a7(&mut self) {
        self.a7 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_a7(&mut self, v: f64) {
        self.a7 = v;
    }

    // double a8 = 46;


    pub fn get_a8(&self) -> f64 {
        self.a8
    }
    pub fn clear_a8(&mut self) {
        self.a8 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_a8(&mut self, v: f64) {
        self.a8 = v;
    }

    // int64 a9 = 47;


    pub fn get_a9(&self) -> i64 {
        self.a9
    }
    pub fn clear_a9(&mut self) {
        self.a9 = 0;
    }

    // Param is passed by value, moved
    pub fn set_a9(&mut self, v: i64) {
        self.a9 = v;
    }

    // int64 a10 = 48;


    pub fn get_a10(&self) -> i64 {
        self.a10
    }
    pub fn clear_a10(&mut self) {
        self.a10 = 0;
    }

    // Param is passed by value, moved
    pub fn set_a10(&mut self, v: i64) {
        self.a10 = v;
    }

    // string gl_code = 49;


    pub fn get_gl_code(&self) -> &str {
        &self.gl_code
    }
    pub fn clear_gl_code(&mut self) {
        self.gl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_code(&mut self, v: ::std::string::String) {
        self.gl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_code
    }

    // Take field
    pub fn take_gl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_code, ::std::string::String::new())
    }

    // double int_rate = 50;


    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }
    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    // double curr_bal_lcy = 51;


    pub fn get_curr_bal_lcy(&self) -> f64 {
        self.curr_bal_lcy
    }
    pub fn clear_curr_bal_lcy(&mut self) {
        self.curr_bal_lcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_curr_bal_lcy(&mut self, v: f64) {
        self.curr_bal_lcy = v;
    }

    // int64 as_on_date = 52;


    pub fn get_as_on_date(&self) -> i64 {
        self.as_on_date
    }
    pub fn clear_as_on_date(&mut self) {
        self.as_on_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on_date(&mut self, v: i64) {
        self.as_on_date = v;
    }
}

impl ::protobuf::Message for OutputAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key_1)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch_no)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.curr_status)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acct_type)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_cat)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.inv_type)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_no)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.cr_limit = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.curr_bal = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.wdl_flag = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.int_available = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acc_open_dt = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int_frm_dt = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int_to_dt = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.no_dues = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.var_int_rate = tmp;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rval_ind)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.od_visa_area)?;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lst_ovr_limit_date = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.cr_store_rate = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.dr_store_rate = tmp;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_class_code)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mop_type)?;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.instl_due_day = tmp;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.term_int_comp_freq)?;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.term_int_cmp_sop_dt = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.term_int_cmp_eop_dt = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.term_int_comp_amt = tmp;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lending_status)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_acct_no)?;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prim_acct)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.segment_code)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.industry_code)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grup_code)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bus_sector_code)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tier_cust_type)?;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a1)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a2)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a3)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.a4)?;
                },
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.a5 = tmp;
                },
                44 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.a6 = tmp;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.a7 = tmp;
                },
                46 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.a8 = tmp;
                },
                47 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.a9 = tmp;
                },
                48 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.a10 = tmp;
                },
                49 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_code)?;
                },
                50 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                51 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.curr_bal_lcy = tmp;
                },
                52 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on_date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key_1.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key_1);
        }
        if !self.branch_no.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.branch_no);
        }
        if !self.curr_status.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.curr_status);
        }
        if !self.acct_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.acct_type);
        }
        if !self.int_cat.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.int_cat);
        }
        if !self.inv_type.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.inv_type);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.currency);
        }
        if !self.customer_no.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.customer_no);
        }
        if self.cr_limit != 0 {
            my_size += ::protobuf::rt::value_size(9, self.cr_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.curr_bal != 0. {
            my_size += 9;
        }
        if self.wdl_flag != 0 {
            my_size += ::protobuf::rt::value_size(11, self.wdl_flag, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_available != 0 {
            my_size += ::protobuf::rt::value_size(12, self.int_available, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.acc_open_dt != 0 {
            my_size += ::protobuf::rt::value_size(13, self.acc_open_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_frm_dt != 0 {
            my_size += ::protobuf::rt::value_size(14, self.int_frm_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_to_dt != 0 {
            my_size += ::protobuf::rt::value_size(15, self.int_to_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.no_dues != 0 {
            my_size += ::protobuf::rt::value_size(16, self.no_dues, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.var_int_rate != 0 {
            my_size += ::protobuf::rt::value_size(17, self.var_int_rate, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.rval_ind.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.rval_ind);
        }
        if !self.od_visa_area.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.od_visa_area);
        }
        if self.lst_ovr_limit_date != 0 {
            my_size += ::protobuf::rt::value_size(20, self.lst_ovr_limit_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cr_store_rate != 0 {
            my_size += ::protobuf::rt::value_size(21, self.cr_store_rate, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dr_store_rate != 0 {
            my_size += ::protobuf::rt::value_size(22, self.dr_store_rate, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.gl_class_code.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.gl_class_code);
        }
        if !self.mop_type.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.mop_type);
        }
        if self.instl_due_day != 0 {
            my_size += ::protobuf::rt::value_size(25, self.instl_due_day, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.term_int_comp_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.term_int_comp_freq);
        }
        if self.term_int_cmp_sop_dt != 0 {
            my_size += ::protobuf::rt::value_size(27, self.term_int_cmp_sop_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.term_int_cmp_eop_dt != 0 {
            my_size += ::protobuf::rt::value_size(28, self.term_int_cmp_eop_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.term_int_comp_amt != 0. {
            my_size += 10;
        }
        if !self.lending_status.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.lending_status);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.name);
        }
        if !self.cust_acct_no.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.cust_acct_no);
        }
        if !self.prim_acct.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.prim_acct);
        }
        if !self.segment_code.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.segment_code);
        }
        if !self.industry_code.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.industry_code);
        }
        if !self.grup_code.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.grup_code);
        }
        if !self.bus_sector_code.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.bus_sector_code);
        }
        if !self.tier_cust_type.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.tier_cust_type);
        }
        if !self.a1.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.a1);
        }
        if !self.a2.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.a2);
        }
        if !self.a3.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.a3);
        }
        if !self.a4.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.a4);
        }
        if self.a5 != 0 {
            my_size += ::protobuf::rt::value_size(43, self.a5, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.a6 != 0 {
            my_size += ::protobuf::rt::value_size(44, self.a6, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.a7 != 0. {
            my_size += 10;
        }
        if self.a8 != 0. {
            my_size += 10;
        }
        if self.a9 != 0 {
            my_size += ::protobuf::rt::value_size(47, self.a9, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.a10 != 0 {
            my_size += ::protobuf::rt::value_size(48, self.a10, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.gl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(49, &self.gl_code);
        }
        if self.int_rate != 0. {
            my_size += 10;
        }
        if self.curr_bal_lcy != 0. {
            my_size += 10;
        }
        if self.as_on_date != 0 {
            my_size += ::protobuf::rt::value_size(52, self.as_on_date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key_1.is_empty() {
            os.write_string(1, &self.key_1)?;
        }
        if !self.branch_no.is_empty() {
            os.write_string(2, &self.branch_no)?;
        }
        if !self.curr_status.is_empty() {
            os.write_string(3, &self.curr_status)?;
        }
        if !self.acct_type.is_empty() {
            os.write_string(4, &self.acct_type)?;
        }
        if !self.int_cat.is_empty() {
            os.write_string(5, &self.int_cat)?;
        }
        if !self.inv_type.is_empty() {
            os.write_string(6, &self.inv_type)?;
        }
        if !self.currency.is_empty() {
            os.write_string(7, &self.currency)?;
        }
        if !self.customer_no.is_empty() {
            os.write_string(8, &self.customer_no)?;
        }
        if self.cr_limit != 0 {
            os.write_int32(9, self.cr_limit)?;
        }
        if self.curr_bal != 0. {
            os.write_double(10, self.curr_bal)?;
        }
        if self.wdl_flag != 0 {
            os.write_int32(11, self.wdl_flag)?;
        }
        if self.int_available != 0 {
            os.write_int32(12, self.int_available)?;
        }
        if self.acc_open_dt != 0 {
            os.write_int64(13, self.acc_open_dt)?;
        }
        if self.int_frm_dt != 0 {
            os.write_int64(14, self.int_frm_dt)?;
        }
        if self.int_to_dt != 0 {
            os.write_int64(15, self.int_to_dt)?;
        }
        if self.no_dues != 0 {
            os.write_int32(16, self.no_dues)?;
        }
        if self.var_int_rate != 0 {
            os.write_int32(17, self.var_int_rate)?;
        }
        if !self.rval_ind.is_empty() {
            os.write_string(18, &self.rval_ind)?;
        }
        if !self.od_visa_area.is_empty() {
            os.write_string(19, &self.od_visa_area)?;
        }
        if self.lst_ovr_limit_date != 0 {
            os.write_int64(20, self.lst_ovr_limit_date)?;
        }
        if self.cr_store_rate != 0 {
            os.write_int32(21, self.cr_store_rate)?;
        }
        if self.dr_store_rate != 0 {
            os.write_int32(22, self.dr_store_rate)?;
        }
        if !self.gl_class_code.is_empty() {
            os.write_string(23, &self.gl_class_code)?;
        }
        if !self.mop_type.is_empty() {
            os.write_string(24, &self.mop_type)?;
        }
        if self.instl_due_day != 0 {
            os.write_int32(25, self.instl_due_day)?;
        }
        if !self.term_int_comp_freq.is_empty() {
            os.write_string(26, &self.term_int_comp_freq)?;
        }
        if self.term_int_cmp_sop_dt != 0 {
            os.write_int64(27, self.term_int_cmp_sop_dt)?;
        }
        if self.term_int_cmp_eop_dt != 0 {
            os.write_int64(28, self.term_int_cmp_eop_dt)?;
        }
        if self.term_int_comp_amt != 0. {
            os.write_double(29, self.term_int_comp_amt)?;
        }
        if !self.lending_status.is_empty() {
            os.write_string(30, &self.lending_status)?;
        }
        if !self.name.is_empty() {
            os.write_string(31, &self.name)?;
        }
        if !self.cust_acct_no.is_empty() {
            os.write_string(32, &self.cust_acct_no)?;
        }
        if !self.prim_acct.is_empty() {
            os.write_string(33, &self.prim_acct)?;
        }
        if !self.segment_code.is_empty() {
            os.write_string(34, &self.segment_code)?;
        }
        if !self.industry_code.is_empty() {
            os.write_string(35, &self.industry_code)?;
        }
        if !self.grup_code.is_empty() {
            os.write_string(36, &self.grup_code)?;
        }
        if !self.bus_sector_code.is_empty() {
            os.write_string(37, &self.bus_sector_code)?;
        }
        if !self.tier_cust_type.is_empty() {
            os.write_string(38, &self.tier_cust_type)?;
        }
        if !self.a1.is_empty() {
            os.write_string(39, &self.a1)?;
        }
        if !self.a2.is_empty() {
            os.write_string(40, &self.a2)?;
        }
        if !self.a3.is_empty() {
            os.write_string(41, &self.a3)?;
        }
        if !self.a4.is_empty() {
            os.write_string(42, &self.a4)?;
        }
        if self.a5 != 0 {
            os.write_int64(43, self.a5)?;
        }
        if self.a6 != 0 {
            os.write_int64(44, self.a6)?;
        }
        if self.a7 != 0. {
            os.write_double(45, self.a7)?;
        }
        if self.a8 != 0. {
            os.write_double(46, self.a8)?;
        }
        if self.a9 != 0 {
            os.write_int64(47, self.a9)?;
        }
        if self.a10 != 0 {
            os.write_int64(48, self.a10)?;
        }
        if !self.gl_code.is_empty() {
            os.write_string(49, &self.gl_code)?;
        }
        if self.int_rate != 0. {
            os.write_double(50, self.int_rate)?;
        }
        if self.curr_bal_lcy != 0. {
            os.write_double(51, self.curr_bal_lcy)?;
        }
        if self.as_on_date != 0 {
            os.write_int64(52, self.as_on_date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputAccount {
        OutputAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key_1",
                |m: &OutputAccount| { &m.key_1 },
                |m: &mut OutputAccount| { &mut m.key_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "branch_no",
                |m: &OutputAccount| { &m.branch_no },
                |m: &mut OutputAccount| { &mut m.branch_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "curr_status",
                |m: &OutputAccount| { &m.curr_status },
                |m: &mut OutputAccount| { &mut m.curr_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acct_type",
                |m: &OutputAccount| { &m.acct_type },
                |m: &mut OutputAccount| { &mut m.acct_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_cat",
                |m: &OutputAccount| { &m.int_cat },
                |m: &mut OutputAccount| { &mut m.int_cat },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "inv_type",
                |m: &OutputAccount| { &m.inv_type },
                |m: &mut OutputAccount| { &mut m.inv_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &OutputAccount| { &m.currency },
                |m: &mut OutputAccount| { &mut m.currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_no",
                |m: &OutputAccount| { &m.customer_no },
                |m: &mut OutputAccount| { &mut m.customer_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "cr_limit",
                |m: &OutputAccount| { &m.cr_limit },
                |m: &mut OutputAccount| { &mut m.cr_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "curr_bal",
                |m: &OutputAccount| { &m.curr_bal },
                |m: &mut OutputAccount| { &mut m.curr_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "wdl_flag",
                |m: &OutputAccount| { &m.wdl_flag },
                |m: &mut OutputAccount| { &mut m.wdl_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "int_available",
                |m: &OutputAccount| { &m.int_available },
                |m: &mut OutputAccount| { &mut m.int_available },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "acc_open_dt",
                |m: &OutputAccount| { &m.acc_open_dt },
                |m: &mut OutputAccount| { &mut m.acc_open_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "int_frm_dt",
                |m: &OutputAccount| { &m.int_frm_dt },
                |m: &mut OutputAccount| { &mut m.int_frm_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "int_to_dt",
                |m: &OutputAccount| { &m.int_to_dt },
                |m: &mut OutputAccount| { &mut m.int_to_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "no_dues",
                |m: &OutputAccount| { &m.no_dues },
                |m: &mut OutputAccount| { &mut m.no_dues },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "var_int_rate",
                |m: &OutputAccount| { &m.var_int_rate },
                |m: &mut OutputAccount| { &mut m.var_int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rval_ind",
                |m: &OutputAccount| { &m.rval_ind },
                |m: &mut OutputAccount| { &mut m.rval_ind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "od_visa_area",
                |m: &OutputAccount| { &m.od_visa_area },
                |m: &mut OutputAccount| { &mut m.od_visa_area },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "lst_ovr_limit_date",
                |m: &OutputAccount| { &m.lst_ovr_limit_date },
                |m: &mut OutputAccount| { &mut m.lst_ovr_limit_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "cr_store_rate",
                |m: &OutputAccount| { &m.cr_store_rate },
                |m: &mut OutputAccount| { &mut m.cr_store_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "dr_store_rate",
                |m: &OutputAccount| { &m.dr_store_rate },
                |m: &mut OutputAccount| { &mut m.dr_store_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_class_code",
                |m: &OutputAccount| { &m.gl_class_code },
                |m: &mut OutputAccount| { &mut m.gl_class_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mop_type",
                |m: &OutputAccount| { &m.mop_type },
                |m: &mut OutputAccount| { &mut m.mop_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "instl_due_day",
                |m: &OutputAccount| { &m.instl_due_day },
                |m: &mut OutputAccount| { &mut m.instl_due_day },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "term_int_comp_freq",
                |m: &OutputAccount| { &m.term_int_comp_freq },
                |m: &mut OutputAccount| { &mut m.term_int_comp_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "term_int_cmp_sop_dt",
                |m: &OutputAccount| { &m.term_int_cmp_sop_dt },
                |m: &mut OutputAccount| { &mut m.term_int_cmp_sop_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "term_int_cmp_eop_dt",
                |m: &OutputAccount| { &m.term_int_cmp_eop_dt },
                |m: &mut OutputAccount| { &mut m.term_int_cmp_eop_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "term_int_comp_amt",
                |m: &OutputAccount| { &m.term_int_comp_amt },
                |m: &mut OutputAccount| { &mut m.term_int_comp_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "lending_status",
                |m: &OutputAccount| { &m.lending_status },
                |m: &mut OutputAccount| { &mut m.lending_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &OutputAccount| { &m.name },
                |m: &mut OutputAccount| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_acct_no",
                |m: &OutputAccount| { &m.cust_acct_no },
                |m: &mut OutputAccount| { &mut m.cust_acct_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prim_acct",
                |m: &OutputAccount| { &m.prim_acct },
                |m: &mut OutputAccount| { &mut m.prim_acct },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "segment_code",
                |m: &OutputAccount| { &m.segment_code },
                |m: &mut OutputAccount| { &mut m.segment_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "industry_code",
                |m: &OutputAccount| { &m.industry_code },
                |m: &mut OutputAccount| { &mut m.industry_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grup_code",
                |m: &OutputAccount| { &m.grup_code },
                |m: &mut OutputAccount| { &mut m.grup_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bus_sector_code",
                |m: &OutputAccount| { &m.bus_sector_code },
                |m: &mut OutputAccount| { &mut m.bus_sector_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tier_cust_type",
                |m: &OutputAccount| { &m.tier_cust_type },
                |m: &mut OutputAccount| { &mut m.tier_cust_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a1",
                |m: &OutputAccount| { &m.a1 },
                |m: &mut OutputAccount| { &mut m.a1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a2",
                |m: &OutputAccount| { &m.a2 },
                |m: &mut OutputAccount| { &mut m.a2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a3",
                |m: &OutputAccount| { &m.a3 },
                |m: &mut OutputAccount| { &mut m.a3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "a4",
                |m: &OutputAccount| { &m.a4 },
                |m: &mut OutputAccount| { &mut m.a4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "a5",
                |m: &OutputAccount| { &m.a5 },
                |m: &mut OutputAccount| { &mut m.a5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "a6",
                |m: &OutputAccount| { &m.a6 },
                |m: &mut OutputAccount| { &mut m.a6 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "a7",
                |m: &OutputAccount| { &m.a7 },
                |m: &mut OutputAccount| { &mut m.a7 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "a8",
                |m: &OutputAccount| { &m.a8 },
                |m: &mut OutputAccount| { &mut m.a8 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "a9",
                |m: &OutputAccount| { &m.a9 },
                |m: &mut OutputAccount| { &mut m.a9 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "a10",
                |m: &OutputAccount| { &m.a10 },
                |m: &mut OutputAccount| { &mut m.a10 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_code",
                |m: &OutputAccount| { &m.gl_code },
                |m: &mut OutputAccount| { &mut m.gl_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_rate",
                |m: &OutputAccount| { &m.int_rate },
                |m: &mut OutputAccount| { &mut m.int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "curr_bal_lcy",
                |m: &OutputAccount| { &m.curr_bal_lcy },
                |m: &mut OutputAccount| { &mut m.curr_bal_lcy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "as_on_date",
                |m: &OutputAccount| { &m.as_on_date },
                |m: &mut OutputAccount| { &mut m.as_on_date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OutputAccount>(
                "OutputAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OutputAccount {
        static instance: ::protobuf::rt::LazyV2<OutputAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OutputAccount::new)
    }
}

impl ::protobuf::Clear for OutputAccount {
    fn clear(&mut self) {
        self.key_1.clear();
        self.branch_no.clear();
        self.curr_status.clear();
        self.acct_type.clear();
        self.int_cat.clear();
        self.inv_type.clear();
        self.currency.clear();
        self.customer_no.clear();
        self.cr_limit = 0;
        self.curr_bal = 0.;
        self.wdl_flag = 0;
        self.int_available = 0;
        self.acc_open_dt = 0;
        self.int_frm_dt = 0;
        self.int_to_dt = 0;
        self.no_dues = 0;
        self.var_int_rate = 0;
        self.rval_ind.clear();
        self.od_visa_area.clear();
        self.lst_ovr_limit_date = 0;
        self.cr_store_rate = 0;
        self.dr_store_rate = 0;
        self.gl_class_code.clear();
        self.mop_type.clear();
        self.instl_due_day = 0;
        self.term_int_comp_freq.clear();
        self.term_int_cmp_sop_dt = 0;
        self.term_int_cmp_eop_dt = 0;
        self.term_int_comp_amt = 0.;
        self.lending_status.clear();
        self.name.clear();
        self.cust_acct_no.clear();
        self.prim_acct.clear();
        self.segment_code.clear();
        self.industry_code.clear();
        self.grup_code.clear();
        self.bus_sector_code.clear();
        self.tier_cust_type.clear();
        self.a1.clear();
        self.a2.clear();
        self.a3.clear();
        self.a4.clear();
        self.a5 = 0;
        self.a6 = 0;
        self.a7 = 0.;
        self.a8 = 0.;
        self.a9 = 0;
        self.a10 = 0;
        self.gl_code.clear();
        self.int_rate = 0.;
        self.curr_bal_lcy = 0.;
        self.as_on_date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rcf-casa.proto\"\x87\x0c\n\rOutputAccount\x12\x13\n\x05key_1\x18\x01\
    \x20\x01(\tR\x04key1\x12\x1b\n\tbranch_no\x18\x02\x20\x01(\tR\x08branchN\
    o\x12\x1f\n\x0bcurr_status\x18\x03\x20\x01(\tR\ncurrStatus\x12\x1b\n\tac\
    ct_type\x18\x04\x20\x01(\tR\x08acctType\x12\x17\n\x07int_cat\x18\x05\x20\
    \x01(\tR\x06intCat\x12\x19\n\x08inv_type\x18\x06\x20\x01(\tR\x07invType\
    \x12\x1a\n\x08currency\x18\x07\x20\x01(\tR\x08currency\x12\x1f\n\x0bcust\
    omer_no\x18\x08\x20\x01(\tR\ncustomerNo\x12\x19\n\x08cr_limit\x18\t\x20\
    \x01(\x05R\x07crLimit\x12\x19\n\x08curr_bal\x18\n\x20\x01(\x01R\x07currB\
    al\x12\x19\n\x08wdl_flag\x18\x0b\x20\x01(\x05R\x07wdlFlag\x12#\n\rint_av\
    ailable\x18\x0c\x20\x01(\x05R\x0cintAvailable\x12\x1e\n\x0bacc_open_dt\
    \x18\r\x20\x01(\x03R\taccOpenDt\x12\x1c\n\nint_frm_dt\x18\x0e\x20\x01(\
    \x03R\x08intFrmDt\x12\x1a\n\tint_to_dt\x18\x0f\x20\x01(\x03R\x07intToDt\
    \x12\x17\n\x07no_dues\x18\x10\x20\x01(\x05R\x06noDues\x12\x20\n\x0cvar_i\
    nt_rate\x18\x11\x20\x01(\x05R\nvarIntRate\x12\x19\n\x08rval_ind\x18\x12\
    \x20\x01(\tR\x07rvalInd\x12\x20\n\x0cod_visa_area\x18\x13\x20\x01(\tR\no\
    dVisaArea\x12+\n\x12lst_ovr_limit_date\x18\x14\x20\x01(\x03R\x0flstOvrLi\
    mitDate\x12\"\n\rcr_store_rate\x18\x15\x20\x01(\x05R\x0bcrStoreRate\x12\
    \"\n\rdr_store_rate\x18\x16\x20\x01(\x05R\x0bdrStoreRate\x12\"\n\rgl_cla\
    ss_code\x18\x17\x20\x01(\tR\x0bglClassCode\x12\x19\n\x08mop_type\x18\x18\
    \x20\x01(\tR\x07mopType\x12\"\n\rinstl_due_day\x18\x19\x20\x01(\x05R\x0b\
    instlDueDay\x12+\n\x12term_int_comp_freq\x18\x1a\x20\x01(\tR\x0ftermIntC\
    ompFreq\x12,\n\x13term_int_cmp_sop_dt\x18\x1b\x20\x01(\x03R\x0ftermIntCm\
    pSopDt\x12,\n\x13term_int_cmp_eop_dt\x18\x1c\x20\x01(\x03R\x0ftermIntCmp\
    EopDt\x12)\n\x11term_int_comp_amt\x18\x1d\x20\x01(\x01R\x0etermIntCompAm\
    t\x12%\n\x0elending_status\x18\x1e\x20\x01(\tR\rlendingStatus\x12\x12\n\
    \x04name\x18\x1f\x20\x01(\tR\x04name\x12\x20\n\x0ccust_acct_no\x18\x20\
    \x20\x01(\tR\ncustAcctNo\x12\x1b\n\tprim_acct\x18!\x20\x01(\tR\x08primAc\
    ct\x12!\n\x0csegment_code\x18\"\x20\x01(\tR\x0bsegmentCode\x12#\n\rindus\
    try_code\x18#\x20\x01(\tR\x0cindustryCode\x12\x1b\n\tgrup_code\x18$\x20\
    \x01(\tR\x08grupCode\x12&\n\x0fbus_sector_code\x18%\x20\x01(\tR\rbusSect\
    orCode\x12$\n\x0etier_cust_type\x18&\x20\x01(\tR\x0ctierCustType\x12\x0e\
    \n\x02a1\x18'\x20\x01(\tR\x02a1\x12\x0e\n\x02a2\x18(\x20\x01(\tR\x02a2\
    \x12\x0e\n\x02a3\x18)\x20\x01(\tR\x02a3\x12\x0e\n\x02a4\x18*\x20\x01(\tR\
    \x02a4\x12\x0e\n\x02a5\x18+\x20\x01(\x03R\x02a5\x12\x0e\n\x02a6\x18,\x20\
    \x01(\x03R\x02a6\x12\x0e\n\x02a7\x18-\x20\x01(\x01R\x02a7\x12\x0e\n\x02a\
    8\x18.\x20\x01(\x01R\x02a8\x12\x0e\n\x02a9\x18/\x20\x01(\x03R\x02a9\x12\
    \x10\n\x03a10\x180\x20\x01(\x03R\x03a10\x12\x17\n\x07gl_code\x181\x20\
    \x01(\tR\x06glCode\x12\x19\n\x08int_rate\x182\x20\x01(\x01R\x07intRate\
    \x12\x20\n\x0ccurr_bal_lcy\x183\x20\x01(\x01R\ncurrBalLcy\x12\x1c\n\nas_\
    on_date\x184\x20\x01(\x03R\x08asOnDateb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
