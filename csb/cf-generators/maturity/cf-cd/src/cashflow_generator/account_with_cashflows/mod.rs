// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double prin_amt = 2;

    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_int_amt();
        self.clear_prin_amt();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub acc_no: ::std::string::String,
    pub br_cd: i64,
    pub cust_no: i64,
    pub ucc_id: i64,
    pub ccy: ::std::string::String,
    pub produ: i64,
    pub gl: i64,
    pub gl_comp_portn: ::std::string::String,
    pub open_dt: i64,
    pub effect_dt: i64,
    pub os_bal: f64,
    pub os_bal_cry: f64,
    pub int_comp_type: ::std::string::String,
    pub comp_int_amt: f64,
    pub int_rt: f64,
    pub mat_dt: i64,
    pub dep_amt: f64,
    pub dep_amt_cry: f64,
    pub int_amt: f64,
    pub int_acrd: f64,
    pub non_with_flag: ::std::string::String,
    pub notice_day: ::std::string::String,
    pub const_cd: i64,
    pub const_desc: ::std::string::String,
    pub resid_days: i64,
    pub cntrct_days: i64,
    pub client_type: ::std::string::String,
    pub clients_name: ::std::string::String,
    pub clients_bsr_type_flg: ::std::string::String,
    pub clients_busdivn_code: ::std::string::String,
    pub clients_const_code: ::std::string::String,
    pub clients_pan_gir_num: ::std::string::String,
    pub clients_risk_categorization: ::std::string::String,
    pub clients_risk_cntry: ::std::string::String,
    pub clients_segment_code: ::std::string::String,
    pub corpcl_orgn_qualifier: ::std::string::String,
    pub corpcl_indus_code: ::std::string::String,
    pub corpcl_nature_of_bus1: ::std::string::String,
    pub corpcl_central_state_flg: ::std::string::String,
    pub corpcl_public_sector_flg: ::std::string::String,
    pub corpcl_primary_dlr_flg: ::std::string::String,
    pub corpcl_multilateral_bank: ::std::string::String,
    pub corpcl_connp_inv_num: ::std::string::String,
    pub corpcl_bc_gross_turnover: f64,
    pub w4b_cd: i64,
    pub balm_llg: ::std::string::String,
    pub care_llg: ::std::string::String,
    pub ba_llg: ::std::string::String,
    pub tot_prin_amt: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    pub tot_int_amt: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string acc_no = 1;

    pub fn clear_acc_no(&mut self) {
        self.acc_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_no(&mut self, v: ::std::string::String) {
        self.acc_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_no(&mut self) -> &mut ::std::string::String {
        &mut self.acc_no
    }

    // Take field
    pub fn take_acc_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_no, ::std::string::String::new())
    }

    pub fn get_acc_no(&self) -> &str {
        &self.acc_no
    }

    // int64 br_cd = 2;

    pub fn clear_br_cd(&mut self) {
        self.br_cd = 0;
    }

    // Param is passed by value, moved
    pub fn set_br_cd(&mut self, v: i64) {
        self.br_cd = v;
    }

    pub fn get_br_cd(&self) -> i64 {
        self.br_cd
    }

    // int64 cust_no = 3;

    pub fn clear_cust_no(&mut self) {
        self.cust_no = 0;
    }

    // Param is passed by value, moved
    pub fn set_cust_no(&mut self, v: i64) {
        self.cust_no = v;
    }

    pub fn get_cust_no(&self) -> i64 {
        self.cust_no
    }

    // int64 ucc_id = 4;

    pub fn clear_ucc_id(&mut self) {
        self.ucc_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_ucc_id(&mut self, v: i64) {
        self.ucc_id = v;
    }

    pub fn get_ucc_id(&self) -> i64 {
        self.ucc_id
    }

    // string ccy = 5;

    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }

    // int64 produ = 6;

    pub fn clear_produ(&mut self) {
        self.produ = 0;
    }

    // Param is passed by value, moved
    pub fn set_produ(&mut self, v: i64) {
        self.produ = v;
    }

    pub fn get_produ(&self) -> i64 {
        self.produ
    }

    // int64 gl = 7;

    pub fn clear_gl(&mut self) {
        self.gl = 0;
    }

    // Param is passed by value, moved
    pub fn set_gl(&mut self, v: i64) {
        self.gl = v;
    }

    pub fn get_gl(&self) -> i64 {
        self.gl
    }

    // string gl_comp_portn = 8;

    pub fn clear_gl_comp_portn(&mut self) {
        self.gl_comp_portn.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_comp_portn(&mut self, v: ::std::string::String) {
        self.gl_comp_portn = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_comp_portn(&mut self) -> &mut ::std::string::String {
        &mut self.gl_comp_portn
    }

    // Take field
    pub fn take_gl_comp_portn(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_comp_portn, ::std::string::String::new())
    }

    pub fn get_gl_comp_portn(&self) -> &str {
        &self.gl_comp_portn
    }

    // int64 open_dt = 9;

    pub fn clear_open_dt(&mut self) {
        self.open_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_open_dt(&mut self, v: i64) {
        self.open_dt = v;
    }

    pub fn get_open_dt(&self) -> i64 {
        self.open_dt
    }

    // int64 effect_dt = 10;

    pub fn clear_effect_dt(&mut self) {
        self.effect_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_effect_dt(&mut self, v: i64) {
        self.effect_dt = v;
    }

    pub fn get_effect_dt(&self) -> i64 {
        self.effect_dt
    }

    // double os_bal = 11;

    pub fn clear_os_bal(&mut self) {
        self.os_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_os_bal(&mut self, v: f64) {
        self.os_bal = v;
    }

    pub fn get_os_bal(&self) -> f64 {
        self.os_bal
    }

    // double os_bal_cry = 12;

    pub fn clear_os_bal_cry(&mut self) {
        self.os_bal_cry = 0.;
    }

    // Param is passed by value, moved
    pub fn set_os_bal_cry(&mut self, v: f64) {
        self.os_bal_cry = v;
    }

    pub fn get_os_bal_cry(&self) -> f64 {
        self.os_bal_cry
    }

    // string int_comp_type = 13;

    pub fn clear_int_comp_type(&mut self) {
        self.int_comp_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_comp_type(&mut self, v: ::std::string::String) {
        self.int_comp_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_comp_type(&mut self) -> &mut ::std::string::String {
        &mut self.int_comp_type
    }

    // Take field
    pub fn take_int_comp_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_comp_type, ::std::string::String::new())
    }

    pub fn get_int_comp_type(&self) -> &str {
        &self.int_comp_type
    }

    // double comp_int_amt = 14;

    pub fn clear_comp_int_amt(&mut self) {
        self.comp_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_comp_int_amt(&mut self, v: f64) {
        self.comp_int_amt = v;
    }

    pub fn get_comp_int_amt(&self) -> f64 {
        self.comp_int_amt
    }

    // double int_rt = 15;

    pub fn clear_int_rt(&mut self) {
        self.int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rt(&mut self, v: f64) {
        self.int_rt = v;
    }

    pub fn get_int_rt(&self) -> f64 {
        self.int_rt
    }

    // int64 mat_dt = 16;

    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }

    // double dep_amt = 17;

    pub fn clear_dep_amt(&mut self) {
        self.dep_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dep_amt(&mut self, v: f64) {
        self.dep_amt = v;
    }

    pub fn get_dep_amt(&self) -> f64 {
        self.dep_amt
    }

    // double dep_amt_cry = 18;

    pub fn clear_dep_amt_cry(&mut self) {
        self.dep_amt_cry = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dep_amt_cry(&mut self, v: f64) {
        self.dep_amt_cry = v;
    }

    pub fn get_dep_amt_cry(&self) -> f64 {
        self.dep_amt_cry
    }

    // double int_amt = 19;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double int_acrd = 20;

    pub fn clear_int_acrd(&mut self) {
        self.int_acrd = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_acrd(&mut self, v: f64) {
        self.int_acrd = v;
    }

    pub fn get_int_acrd(&self) -> f64 {
        self.int_acrd
    }

    // string non_with_flag = 21;

    pub fn clear_non_with_flag(&mut self) {
        self.non_with_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_non_with_flag(&mut self, v: ::std::string::String) {
        self.non_with_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_non_with_flag(&mut self) -> &mut ::std::string::String {
        &mut self.non_with_flag
    }

    // Take field
    pub fn take_non_with_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.non_with_flag, ::std::string::String::new())
    }

    pub fn get_non_with_flag(&self) -> &str {
        &self.non_with_flag
    }

    // string notice_day = 22;

    pub fn clear_notice_day(&mut self) {
        self.notice_day.clear();
    }

    // Param is passed by value, moved
    pub fn set_notice_day(&mut self, v: ::std::string::String) {
        self.notice_day = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_notice_day(&mut self) -> &mut ::std::string::String {
        &mut self.notice_day
    }

    // Take field
    pub fn take_notice_day(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.notice_day, ::std::string::String::new())
    }

    pub fn get_notice_day(&self) -> &str {
        &self.notice_day
    }

    // int64 const_cd = 23;

    pub fn clear_const_cd(&mut self) {
        self.const_cd = 0;
    }

    // Param is passed by value, moved
    pub fn set_const_cd(&mut self, v: i64) {
        self.const_cd = v;
    }

    pub fn get_const_cd(&self) -> i64 {
        self.const_cd
    }

    // string const_desc = 24;

    pub fn clear_const_desc(&mut self) {
        self.const_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_const_desc(&mut self, v: ::std::string::String) {
        self.const_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_const_desc(&mut self) -> &mut ::std::string::String {
        &mut self.const_desc
    }

    // Take field
    pub fn take_const_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.const_desc, ::std::string::String::new())
    }

    pub fn get_const_desc(&self) -> &str {
        &self.const_desc
    }

    // int64 resid_days = 25;

    pub fn clear_resid_days(&mut self) {
        self.resid_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_resid_days(&mut self, v: i64) {
        self.resid_days = v;
    }

    pub fn get_resid_days(&self) -> i64 {
        self.resid_days
    }

    // int64 cntrct_days = 26;

    pub fn clear_cntrct_days(&mut self) {
        self.cntrct_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_cntrct_days(&mut self, v: i64) {
        self.cntrct_days = v;
    }

    pub fn get_cntrct_days(&self) -> i64 {
        self.cntrct_days
    }

    // string client_type = 27;

    pub fn clear_client_type(&mut self) {
        self.client_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_type(&mut self, v: ::std::string::String) {
        self.client_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_type(&mut self) -> &mut ::std::string::String {
        &mut self.client_type
    }

    // Take field
    pub fn take_client_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_type, ::std::string::String::new())
    }

    pub fn get_client_type(&self) -> &str {
        &self.client_type
    }

    // string clients_name = 28;

    pub fn clear_clients_name(&mut self) {
        self.clients_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_name(&mut self, v: ::std::string::String) {
        self.clients_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_name(&mut self) -> &mut ::std::string::String {
        &mut self.clients_name
    }

    // Take field
    pub fn take_clients_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_name, ::std::string::String::new())
    }

    pub fn get_clients_name(&self) -> &str {
        &self.clients_name
    }

    // string clients_bsr_type_flg = 29;

    pub fn clear_clients_bsr_type_flg(&mut self) {
        self.clients_bsr_type_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_bsr_type_flg(&mut self, v: ::std::string::String) {
        self.clients_bsr_type_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_bsr_type_flg(&mut self) -> &mut ::std::string::String {
        &mut self.clients_bsr_type_flg
    }

    // Take field
    pub fn take_clients_bsr_type_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_bsr_type_flg, ::std::string::String::new())
    }

    pub fn get_clients_bsr_type_flg(&self) -> &str {
        &self.clients_bsr_type_flg
    }

    // string clients_busdivn_code = 30;

    pub fn clear_clients_busdivn_code(&mut self) {
        self.clients_busdivn_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_busdivn_code(&mut self, v: ::std::string::String) {
        self.clients_busdivn_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_busdivn_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_busdivn_code
    }

    // Take field
    pub fn take_clients_busdivn_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_busdivn_code, ::std::string::String::new())
    }

    pub fn get_clients_busdivn_code(&self) -> &str {
        &self.clients_busdivn_code
    }

    // string clients_const_code = 31;

    pub fn clear_clients_const_code(&mut self) {
        self.clients_const_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_const_code(&mut self, v: ::std::string::String) {
        self.clients_const_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_const_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_const_code
    }

    // Take field
    pub fn take_clients_const_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_const_code, ::std::string::String::new())
    }

    pub fn get_clients_const_code(&self) -> &str {
        &self.clients_const_code
    }

    // string clients_pan_gir_num = 32;

    pub fn clear_clients_pan_gir_num(&mut self) {
        self.clients_pan_gir_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_pan_gir_num(&mut self, v: ::std::string::String) {
        self.clients_pan_gir_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_pan_gir_num(&mut self) -> &mut ::std::string::String {
        &mut self.clients_pan_gir_num
    }

    // Take field
    pub fn take_clients_pan_gir_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_pan_gir_num, ::std::string::String::new())
    }

    pub fn get_clients_pan_gir_num(&self) -> &str {
        &self.clients_pan_gir_num
    }

    // string clients_risk_categorization = 33;

    pub fn clear_clients_risk_categorization(&mut self) {
        self.clients_risk_categorization.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_risk_categorization(&mut self, v: ::std::string::String) {
        self.clients_risk_categorization = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_risk_categorization(&mut self) -> &mut ::std::string::String {
        &mut self.clients_risk_categorization
    }

    // Take field
    pub fn take_clients_risk_categorization(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_risk_categorization, ::std::string::String::new())
    }

    pub fn get_clients_risk_categorization(&self) -> &str {
        &self.clients_risk_categorization
    }

    // string clients_risk_cntry = 34;

    pub fn clear_clients_risk_cntry(&mut self) {
        self.clients_risk_cntry.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_risk_cntry(&mut self, v: ::std::string::String) {
        self.clients_risk_cntry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_risk_cntry(&mut self) -> &mut ::std::string::String {
        &mut self.clients_risk_cntry
    }

    // Take field
    pub fn take_clients_risk_cntry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_risk_cntry, ::std::string::String::new())
    }

    pub fn get_clients_risk_cntry(&self) -> &str {
        &self.clients_risk_cntry
    }

    // string clients_segment_code = 35;

    pub fn clear_clients_segment_code(&mut self) {
        self.clients_segment_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_segment_code(&mut self, v: ::std::string::String) {
        self.clients_segment_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_segment_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_segment_code
    }

    // Take field
    pub fn take_clients_segment_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_segment_code, ::std::string::String::new())
    }

    pub fn get_clients_segment_code(&self) -> &str {
        &self.clients_segment_code
    }

    // string corpcl_orgn_qualifier = 36;

    pub fn clear_corpcl_orgn_qualifier(&mut self) {
        self.corpcl_orgn_qualifier.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_orgn_qualifier(&mut self, v: ::std::string::String) {
        self.corpcl_orgn_qualifier = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_orgn_qualifier(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_orgn_qualifier
    }

    // Take field
    pub fn take_corpcl_orgn_qualifier(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_orgn_qualifier, ::std::string::String::new())
    }

    pub fn get_corpcl_orgn_qualifier(&self) -> &str {
        &self.corpcl_orgn_qualifier
    }

    // string corpcl_indus_code = 37;

    pub fn clear_corpcl_indus_code(&mut self) {
        self.corpcl_indus_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_indus_code(&mut self, v: ::std::string::String) {
        self.corpcl_indus_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_indus_code(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_indus_code
    }

    // Take field
    pub fn take_corpcl_indus_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_indus_code, ::std::string::String::new())
    }

    pub fn get_corpcl_indus_code(&self) -> &str {
        &self.corpcl_indus_code
    }

    // string corpcl_nature_of_bus1 = 38;

    pub fn clear_corpcl_nature_of_bus1(&mut self) {
        self.corpcl_nature_of_bus1.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_nature_of_bus1(&mut self, v: ::std::string::String) {
        self.corpcl_nature_of_bus1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_nature_of_bus1(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_nature_of_bus1
    }

    // Take field
    pub fn take_corpcl_nature_of_bus1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_nature_of_bus1, ::std::string::String::new())
    }

    pub fn get_corpcl_nature_of_bus1(&self) -> &str {
        &self.corpcl_nature_of_bus1
    }

    // string corpcl_central_state_flg = 39;

    pub fn clear_corpcl_central_state_flg(&mut self) {
        self.corpcl_central_state_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_central_state_flg(&mut self, v: ::std::string::String) {
        self.corpcl_central_state_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_central_state_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_central_state_flg
    }

    // Take field
    pub fn take_corpcl_central_state_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_central_state_flg, ::std::string::String::new())
    }

    pub fn get_corpcl_central_state_flg(&self) -> &str {
        &self.corpcl_central_state_flg
    }

    // string corpcl_public_sector_flg = 40;

    pub fn clear_corpcl_public_sector_flg(&mut self) {
        self.corpcl_public_sector_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_public_sector_flg(&mut self, v: ::std::string::String) {
        self.corpcl_public_sector_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_public_sector_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_public_sector_flg
    }

    // Take field
    pub fn take_corpcl_public_sector_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_public_sector_flg, ::std::string::String::new())
    }

    pub fn get_corpcl_public_sector_flg(&self) -> &str {
        &self.corpcl_public_sector_flg
    }

    // string corpcl_primary_dlr_flg = 41;

    pub fn clear_corpcl_primary_dlr_flg(&mut self) {
        self.corpcl_primary_dlr_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_primary_dlr_flg(&mut self, v: ::std::string::String) {
        self.corpcl_primary_dlr_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_primary_dlr_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_primary_dlr_flg
    }

    // Take field
    pub fn take_corpcl_primary_dlr_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_primary_dlr_flg, ::std::string::String::new())
    }

    pub fn get_corpcl_primary_dlr_flg(&self) -> &str {
        &self.corpcl_primary_dlr_flg
    }

    // string corpcl_multilateral_bank = 42;

    pub fn clear_corpcl_multilateral_bank(&mut self) {
        self.corpcl_multilateral_bank.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_multilateral_bank(&mut self, v: ::std::string::String) {
        self.corpcl_multilateral_bank = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_multilateral_bank(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_multilateral_bank
    }

    // Take field
    pub fn take_corpcl_multilateral_bank(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_multilateral_bank, ::std::string::String::new())
    }

    pub fn get_corpcl_multilateral_bank(&self) -> &str {
        &self.corpcl_multilateral_bank
    }

    // string corpcl_connp_inv_num = 43;

    pub fn clear_corpcl_connp_inv_num(&mut self) {
        self.corpcl_connp_inv_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_connp_inv_num(&mut self, v: ::std::string::String) {
        self.corpcl_connp_inv_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_connp_inv_num(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_connp_inv_num
    }

    // Take field
    pub fn take_corpcl_connp_inv_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_connp_inv_num, ::std::string::String::new())
    }

    pub fn get_corpcl_connp_inv_num(&self) -> &str {
        &self.corpcl_connp_inv_num
    }

    // double corpcl_bc_gross_turnover = 44;

    pub fn clear_corpcl_bc_gross_turnover(&mut self) {
        self.corpcl_bc_gross_turnover = 0.;
    }

    // Param is passed by value, moved
    pub fn set_corpcl_bc_gross_turnover(&mut self, v: f64) {
        self.corpcl_bc_gross_turnover = v;
    }

    pub fn get_corpcl_bc_gross_turnover(&self) -> f64 {
        self.corpcl_bc_gross_turnover
    }

    // int64 w4b_cd = 45;

    pub fn clear_w4b_cd(&mut self) {
        self.w4b_cd = 0;
    }

    // Param is passed by value, moved
    pub fn set_w4b_cd(&mut self, v: i64) {
        self.w4b_cd = v;
    }

    pub fn get_w4b_cd(&self) -> i64 {
        self.w4b_cd
    }

    // string balm_llg = 46;

    pub fn clear_balm_llg(&mut self) {
        self.balm_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_balm_llg(&mut self, v: ::std::string::String) {
        self.balm_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balm_llg(&mut self) -> &mut ::std::string::String {
        &mut self.balm_llg
    }

    // Take field
    pub fn take_balm_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balm_llg, ::std::string::String::new())
    }

    pub fn get_balm_llg(&self) -> &str {
        &self.balm_llg
    }

    // string care_llg = 47;

    pub fn clear_care_llg(&mut self) {
        self.care_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_care_llg(&mut self, v: ::std::string::String) {
        self.care_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_care_llg(&mut self) -> &mut ::std::string::String {
        &mut self.care_llg
    }

    // Take field
    pub fn take_care_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.care_llg, ::std::string::String::new())
    }

    pub fn get_care_llg(&self) -> &str {
        &self.care_llg
    }

    // string ba_llg = 48;

    pub fn clear_ba_llg(&mut self) {
        self.ba_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_ba_llg(&mut self, v: ::std::string::String) {
        self.ba_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ba_llg(&mut self) -> &mut ::std::string::String {
        &mut self.ba_llg
    }

    // Take field
    pub fn take_ba_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ba_llg, ::std::string::String::new())
    }

    pub fn get_ba_llg(&self) -> &str {
        &self.ba_llg
    }

    // double tot_prin_amt = 49;

    pub fn clear_tot_prin_amt(&mut self) {
        self.tot_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_prin_amt(&mut self, v: f64) {
        self.tot_prin_amt = v;
    }

    pub fn get_tot_prin_amt(&self) -> f64 {
        self.tot_prin_amt
    }

    // repeated .Cashflow cashflows = 50;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }

    // double tot_int_amt = 51;

    pub fn clear_tot_int_amt(&mut self) {
        self.tot_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_int_amt(&mut self, v: f64) {
        self.tot_int_amt = v;
    }

    pub fn get_tot_int_amt(&self) -> f64 {
        self.tot_int_amt
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_no)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.br_cd = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cust_no = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ucc_id = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.produ = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.gl = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_comp_portn)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.open_dt = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.effect_dt = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.os_bal = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.os_bal_cry = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_comp_type)?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.comp_int_amt = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rt = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.dep_amt = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.dep_amt_cry = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_acrd = tmp;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.non_with_flag)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.notice_day)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.const_cd = tmp;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.const_desc)?;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.resid_days = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cntrct_days = tmp;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_type)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_name)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_bsr_type_flg)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_busdivn_code)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_const_code)?;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_pan_gir_num)?;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_risk_categorization)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_risk_cntry)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_segment_code)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_orgn_qualifier)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_indus_code)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_nature_of_bus1)?;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_central_state_flg)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_public_sector_flg)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_primary_dlr_flg)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_multilateral_bank)?;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_connp_inv_num)?;
                },
                44 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.corpcl_bc_gross_turnover = tmp;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.w4b_cd = tmp;
                },
                46 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.balm_llg)?;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.care_llg)?;
                },
                48 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ba_llg)?;
                },
                49 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_prin_amt = tmp;
                },
                50 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                51 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_int_amt = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.acc_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.acc_no);
        }
        if self.br_cd != 0 {
            my_size += ::protobuf::rt::value_size(2, self.br_cd, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cust_no != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cust_no, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ucc_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.ucc_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.ccy);
        }
        if self.produ != 0 {
            my_size += ::protobuf::rt::value_size(6, self.produ, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gl != 0 {
            my_size += ::protobuf::rt::value_size(7, self.gl, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.gl_comp_portn.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.gl_comp_portn);
        }
        if self.open_dt != 0 {
            my_size += ::protobuf::rt::value_size(9, self.open_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.effect_dt != 0 {
            my_size += ::protobuf::rt::value_size(10, self.effect_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.os_bal != 0. {
            my_size += 9;
        }
        if self.os_bal_cry != 0. {
            my_size += 9;
        }
        if !self.int_comp_type.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.int_comp_type);
        }
        if self.comp_int_amt != 0. {
            my_size += 9;
        }
        if self.int_rt != 0. {
            my_size += 9;
        }
        if self.mat_dt != 0 {
            my_size += ::protobuf::rt::value_size(16, self.mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dep_amt != 0. {
            my_size += 10;
        }
        if self.dep_amt_cry != 0. {
            my_size += 10;
        }
        if self.int_amt != 0. {
            my_size += 10;
        }
        if self.int_acrd != 0. {
            my_size += 10;
        }
        if !self.non_with_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.non_with_flag);
        }
        if !self.notice_day.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.notice_day);
        }
        if self.const_cd != 0 {
            my_size += ::protobuf::rt::value_size(23, self.const_cd, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.const_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.const_desc);
        }
        if self.resid_days != 0 {
            my_size += ::protobuf::rt::value_size(25, self.resid_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cntrct_days != 0 {
            my_size += ::protobuf::rt::value_size(26, self.cntrct_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.client_type.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.client_type);
        }
        if !self.clients_name.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.clients_name);
        }
        if !self.clients_bsr_type_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.clients_bsr_type_flg);
        }
        if !self.clients_busdivn_code.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.clients_busdivn_code);
        }
        if !self.clients_const_code.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.clients_const_code);
        }
        if !self.clients_pan_gir_num.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.clients_pan_gir_num);
        }
        if !self.clients_risk_categorization.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.clients_risk_categorization);
        }
        if !self.clients_risk_cntry.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.clients_risk_cntry);
        }
        if !self.clients_segment_code.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.clients_segment_code);
        }
        if !self.corpcl_orgn_qualifier.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.corpcl_orgn_qualifier);
        }
        if !self.corpcl_indus_code.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.corpcl_indus_code);
        }
        if !self.corpcl_nature_of_bus1.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.corpcl_nature_of_bus1);
        }
        if !self.corpcl_central_state_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.corpcl_central_state_flg);
        }
        if !self.corpcl_public_sector_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.corpcl_public_sector_flg);
        }
        if !self.corpcl_primary_dlr_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.corpcl_primary_dlr_flg);
        }
        if !self.corpcl_multilateral_bank.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.corpcl_multilateral_bank);
        }
        if !self.corpcl_connp_inv_num.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.corpcl_connp_inv_num);
        }
        if self.corpcl_bc_gross_turnover != 0. {
            my_size += 10;
        }
        if self.w4b_cd != 0 {
            my_size += ::protobuf::rt::value_size(45, self.w4b_cd, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.balm_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.balm_llg);
        }
        if !self.care_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.care_llg);
        }
        if !self.ba_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(48, &self.ba_llg);
        }
        if self.tot_prin_amt != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.tot_int_amt != 0. {
            my_size += 10;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.acc_no.is_empty() {
            os.write_string(1, &self.acc_no)?;
        }
        if self.br_cd != 0 {
            os.write_int64(2, self.br_cd)?;
        }
        if self.cust_no != 0 {
            os.write_int64(3, self.cust_no)?;
        }
        if self.ucc_id != 0 {
            os.write_int64(4, self.ucc_id)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(5, &self.ccy)?;
        }
        if self.produ != 0 {
            os.write_int64(6, self.produ)?;
        }
        if self.gl != 0 {
            os.write_int64(7, self.gl)?;
        }
        if !self.gl_comp_portn.is_empty() {
            os.write_string(8, &self.gl_comp_portn)?;
        }
        if self.open_dt != 0 {
            os.write_int64(9, self.open_dt)?;
        }
        if self.effect_dt != 0 {
            os.write_int64(10, self.effect_dt)?;
        }
        if self.os_bal != 0. {
            os.write_double(11, self.os_bal)?;
        }
        if self.os_bal_cry != 0. {
            os.write_double(12, self.os_bal_cry)?;
        }
        if !self.int_comp_type.is_empty() {
            os.write_string(13, &self.int_comp_type)?;
        }
        if self.comp_int_amt != 0. {
            os.write_double(14, self.comp_int_amt)?;
        }
        if self.int_rt != 0. {
            os.write_double(15, self.int_rt)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(16, self.mat_dt)?;
        }
        if self.dep_amt != 0. {
            os.write_double(17, self.dep_amt)?;
        }
        if self.dep_amt_cry != 0. {
            os.write_double(18, self.dep_amt_cry)?;
        }
        if self.int_amt != 0. {
            os.write_double(19, self.int_amt)?;
        }
        if self.int_acrd != 0. {
            os.write_double(20, self.int_acrd)?;
        }
        if !self.non_with_flag.is_empty() {
            os.write_string(21, &self.non_with_flag)?;
        }
        if !self.notice_day.is_empty() {
            os.write_string(22, &self.notice_day)?;
        }
        if self.const_cd != 0 {
            os.write_int64(23, self.const_cd)?;
        }
        if !self.const_desc.is_empty() {
            os.write_string(24, &self.const_desc)?;
        }
        if self.resid_days != 0 {
            os.write_int64(25, self.resid_days)?;
        }
        if self.cntrct_days != 0 {
            os.write_int64(26, self.cntrct_days)?;
        }
        if !self.client_type.is_empty() {
            os.write_string(27, &self.client_type)?;
        }
        if !self.clients_name.is_empty() {
            os.write_string(28, &self.clients_name)?;
        }
        if !self.clients_bsr_type_flg.is_empty() {
            os.write_string(29, &self.clients_bsr_type_flg)?;
        }
        if !self.clients_busdivn_code.is_empty() {
            os.write_string(30, &self.clients_busdivn_code)?;
        }
        if !self.clients_const_code.is_empty() {
            os.write_string(31, &self.clients_const_code)?;
        }
        if !self.clients_pan_gir_num.is_empty() {
            os.write_string(32, &self.clients_pan_gir_num)?;
        }
        if !self.clients_risk_categorization.is_empty() {
            os.write_string(33, &self.clients_risk_categorization)?;
        }
        if !self.clients_risk_cntry.is_empty() {
            os.write_string(34, &self.clients_risk_cntry)?;
        }
        if !self.clients_segment_code.is_empty() {
            os.write_string(35, &self.clients_segment_code)?;
        }
        if !self.corpcl_orgn_qualifier.is_empty() {
            os.write_string(36, &self.corpcl_orgn_qualifier)?;
        }
        if !self.corpcl_indus_code.is_empty() {
            os.write_string(37, &self.corpcl_indus_code)?;
        }
        if !self.corpcl_nature_of_bus1.is_empty() {
            os.write_string(38, &self.corpcl_nature_of_bus1)?;
        }
        if !self.corpcl_central_state_flg.is_empty() {
            os.write_string(39, &self.corpcl_central_state_flg)?;
        }
        if !self.corpcl_public_sector_flg.is_empty() {
            os.write_string(40, &self.corpcl_public_sector_flg)?;
        }
        if !self.corpcl_primary_dlr_flg.is_empty() {
            os.write_string(41, &self.corpcl_primary_dlr_flg)?;
        }
        if !self.corpcl_multilateral_bank.is_empty() {
            os.write_string(42, &self.corpcl_multilateral_bank)?;
        }
        if !self.corpcl_connp_inv_num.is_empty() {
            os.write_string(43, &self.corpcl_connp_inv_num)?;
        }
        if self.corpcl_bc_gross_turnover != 0. {
            os.write_double(44, self.corpcl_bc_gross_turnover)?;
        }
        if self.w4b_cd != 0 {
            os.write_int64(45, self.w4b_cd)?;
        }
        if !self.balm_llg.is_empty() {
            os.write_string(46, &self.balm_llg)?;
        }
        if !self.care_llg.is_empty() {
            os.write_string(47, &self.care_llg)?;
        }
        if !self.ba_llg.is_empty() {
            os.write_string(48, &self.ba_llg)?;
        }
        if self.tot_prin_amt != 0. {
            os.write_double(49, self.tot_prin_amt)?;
        }
        for v in &self.cashflows {
            os.write_tag(50, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.tot_int_amt != 0. {
            os.write_double(51, self.tot_int_amt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acc_no",
                    |m: &AccountWithCashflows| { &m.acc_no },
                    |m: &mut AccountWithCashflows| { &mut m.acc_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "br_cd",
                    |m: &AccountWithCashflows| { &m.br_cd },
                    |m: &mut AccountWithCashflows| { &mut m.br_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cust_no",
                    |m: &AccountWithCashflows| { &m.cust_no },
                    |m: &mut AccountWithCashflows| { &mut m.cust_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "ucc_id",
                    |m: &AccountWithCashflows| { &m.ucc_id },
                    |m: &mut AccountWithCashflows| { &mut m.ucc_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy",
                    |m: &AccountWithCashflows| { &m.ccy },
                    |m: &mut AccountWithCashflows| { &mut m.ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "produ",
                    |m: &AccountWithCashflows| { &m.produ },
                    |m: &mut AccountWithCashflows| { &mut m.produ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "gl",
                    |m: &AccountWithCashflows| { &m.gl },
                    |m: &mut AccountWithCashflows| { &mut m.gl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gl_comp_portn",
                    |m: &AccountWithCashflows| { &m.gl_comp_portn },
                    |m: &mut AccountWithCashflows| { &mut m.gl_comp_portn },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "open_dt",
                    |m: &AccountWithCashflows| { &m.open_dt },
                    |m: &mut AccountWithCashflows| { &mut m.open_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "effect_dt",
                    |m: &AccountWithCashflows| { &m.effect_dt },
                    |m: &mut AccountWithCashflows| { &mut m.effect_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "os_bal",
                    |m: &AccountWithCashflows| { &m.os_bal },
                    |m: &mut AccountWithCashflows| { &mut m.os_bal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "os_bal_cry",
                    |m: &AccountWithCashflows| { &m.os_bal_cry },
                    |m: &mut AccountWithCashflows| { &mut m.os_bal_cry },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "int_comp_type",
                    |m: &AccountWithCashflows| { &m.int_comp_type },
                    |m: &mut AccountWithCashflows| { &mut m.int_comp_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "comp_int_amt",
                    |m: &AccountWithCashflows| { &m.comp_int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.comp_int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rt",
                    |m: &AccountWithCashflows| { &m.int_rt },
                    |m: &mut AccountWithCashflows| { &mut m.int_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "mat_dt",
                    |m: &AccountWithCashflows| { &m.mat_dt },
                    |m: &mut AccountWithCashflows| { &mut m.mat_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "dep_amt",
                    |m: &AccountWithCashflows| { &m.dep_amt },
                    |m: &mut AccountWithCashflows| { &mut m.dep_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "dep_amt_cry",
                    |m: &AccountWithCashflows| { &m.dep_amt_cry },
                    |m: &mut AccountWithCashflows| { &mut m.dep_amt_cry },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &AccountWithCashflows| { &m.int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_acrd",
                    |m: &AccountWithCashflows| { &m.int_acrd },
                    |m: &mut AccountWithCashflows| { &mut m.int_acrd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "non_with_flag",
                    |m: &AccountWithCashflows| { &m.non_with_flag },
                    |m: &mut AccountWithCashflows| { &mut m.non_with_flag },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "notice_day",
                    |m: &AccountWithCashflows| { &m.notice_day },
                    |m: &mut AccountWithCashflows| { &mut m.notice_day },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "const_cd",
                    |m: &AccountWithCashflows| { &m.const_cd },
                    |m: &mut AccountWithCashflows| { &mut m.const_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "const_desc",
                    |m: &AccountWithCashflows| { &m.const_desc },
                    |m: &mut AccountWithCashflows| { &mut m.const_desc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "resid_days",
                    |m: &AccountWithCashflows| { &m.resid_days },
                    |m: &mut AccountWithCashflows| { &mut m.resid_days },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cntrct_days",
                    |m: &AccountWithCashflows| { &m.cntrct_days },
                    |m: &mut AccountWithCashflows| { &mut m.cntrct_days },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "client_type",
                    |m: &AccountWithCashflows| { &m.client_type },
                    |m: &mut AccountWithCashflows| { &mut m.client_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_name",
                    |m: &AccountWithCashflows| { &m.clients_name },
                    |m: &mut AccountWithCashflows| { &mut m.clients_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_bsr_type_flg",
                    |m: &AccountWithCashflows| { &m.clients_bsr_type_flg },
                    |m: &mut AccountWithCashflows| { &mut m.clients_bsr_type_flg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_busdivn_code",
                    |m: &AccountWithCashflows| { &m.clients_busdivn_code },
                    |m: &mut AccountWithCashflows| { &mut m.clients_busdivn_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_const_code",
                    |m: &AccountWithCashflows| { &m.clients_const_code },
                    |m: &mut AccountWithCashflows| { &mut m.clients_const_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_pan_gir_num",
                    |m: &AccountWithCashflows| { &m.clients_pan_gir_num },
                    |m: &mut AccountWithCashflows| { &mut m.clients_pan_gir_num },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_risk_categorization",
                    |m: &AccountWithCashflows| { &m.clients_risk_categorization },
                    |m: &mut AccountWithCashflows| { &mut m.clients_risk_categorization },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_risk_cntry",
                    |m: &AccountWithCashflows| { &m.clients_risk_cntry },
                    |m: &mut AccountWithCashflows| { &mut m.clients_risk_cntry },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_segment_code",
                    |m: &AccountWithCashflows| { &m.clients_segment_code },
                    |m: &mut AccountWithCashflows| { &mut m.clients_segment_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_orgn_qualifier",
                    |m: &AccountWithCashflows| { &m.corpcl_orgn_qualifier },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_orgn_qualifier },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_indus_code",
                    |m: &AccountWithCashflows| { &m.corpcl_indus_code },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_indus_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_nature_of_bus1",
                    |m: &AccountWithCashflows| { &m.corpcl_nature_of_bus1 },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_nature_of_bus1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_central_state_flg",
                    |m: &AccountWithCashflows| { &m.corpcl_central_state_flg },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_central_state_flg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_public_sector_flg",
                    |m: &AccountWithCashflows| { &m.corpcl_public_sector_flg },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_public_sector_flg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_primary_dlr_flg",
                    |m: &AccountWithCashflows| { &m.corpcl_primary_dlr_flg },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_primary_dlr_flg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_multilateral_bank",
                    |m: &AccountWithCashflows| { &m.corpcl_multilateral_bank },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_multilateral_bank },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_connp_inv_num",
                    |m: &AccountWithCashflows| { &m.corpcl_connp_inv_num },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_connp_inv_num },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "corpcl_bc_gross_turnover",
                    |m: &AccountWithCashflows| { &m.corpcl_bc_gross_turnover },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_bc_gross_turnover },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "w4b_cd",
                    |m: &AccountWithCashflows| { &m.w4b_cd },
                    |m: &mut AccountWithCashflows| { &mut m.w4b_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "balm_llg",
                    |m: &AccountWithCashflows| { &m.balm_llg },
                    |m: &mut AccountWithCashflows| { &mut m.balm_llg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "care_llg",
                    |m: &AccountWithCashflows| { &m.care_llg },
                    |m: &mut AccountWithCashflows| { &mut m.care_llg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ba_llg",
                    |m: &AccountWithCashflows| { &m.ba_llg },
                    |m: &mut AccountWithCashflows| { &mut m.ba_llg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_prin_amt",
                    |m: &AccountWithCashflows| { &m.tot_prin_amt },
                    |m: &mut AccountWithCashflows| { &mut m.tot_prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_int_amt",
                    |m: &AccountWithCashflows| { &m.tot_int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.tot_int_amt },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_acc_no();
        self.clear_br_cd();
        self.clear_cust_no();
        self.clear_ucc_id();
        self.clear_ccy();
        self.clear_produ();
        self.clear_gl();
        self.clear_gl_comp_portn();
        self.clear_open_dt();
        self.clear_effect_dt();
        self.clear_os_bal();
        self.clear_os_bal_cry();
        self.clear_int_comp_type();
        self.clear_comp_int_amt();
        self.clear_int_rt();
        self.clear_mat_dt();
        self.clear_dep_amt();
        self.clear_dep_amt_cry();
        self.clear_int_amt();
        self.clear_int_acrd();
        self.clear_non_with_flag();
        self.clear_notice_day();
        self.clear_const_cd();
        self.clear_const_desc();
        self.clear_resid_days();
        self.clear_cntrct_days();
        self.clear_client_type();
        self.clear_clients_name();
        self.clear_clients_bsr_type_flg();
        self.clear_clients_busdivn_code();
        self.clear_clients_const_code();
        self.clear_clients_pan_gir_num();
        self.clear_clients_risk_categorization();
        self.clear_clients_risk_cntry();
        self.clear_clients_segment_code();
        self.clear_corpcl_orgn_qualifier();
        self.clear_corpcl_indus_code();
        self.clear_corpcl_nature_of_bus1();
        self.clear_corpcl_central_state_flg();
        self.clear_corpcl_public_sector_flg();
        self.clear_corpcl_primary_dlr_flg();
        self.clear_corpcl_multilateral_bank();
        self.clear_corpcl_connp_inv_num();
        self.clear_corpcl_bc_gross_turnover();
        self.clear_w4b_cd();
        self.clear_balm_llg();
        self.clear_care_llg();
        self.clear_ba_llg();
        self.clear_tot_prin_amt();
        self.clear_cashflows();
        self.clear_tot_int_amt();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ccsb_cd.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\x01\
    (\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prinAmt\
    \x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xa8\x0e\n\x14AccountW\
    ithCashflows\x12\x15\n\x06acc_no\x18\x01\x20\x01(\tR\x05accNo\x12\x13\n\
    \x05br_cd\x18\x02\x20\x01(\x03R\x04brCd\x12\x17\n\x07cust_no\x18\x03\x20\
    \x01(\x03R\x06custNo\x12\x15\n\x06ucc_id\x18\x04\x20\x01(\x03R\x05uccId\
    \x12\x10\n\x03ccy\x18\x05\x20\x01(\tR\x03ccy\x12\x14\n\x05produ\x18\x06\
    \x20\x01(\x03R\x05produ\x12\x0e\n\x02gl\x18\x07\x20\x01(\x03R\x02gl\x12\
    \"\n\rgl_comp_portn\x18\x08\x20\x01(\tR\x0bglCompPortn\x12\x17\n\x07open\
    _dt\x18\t\x20\x01(\x03R\x06openDt\x12\x1b\n\teffect_dt\x18\n\x20\x01(\
    \x03R\x08effectDt\x12\x15\n\x06os_bal\x18\x0b\x20\x01(\x01R\x05osBal\x12\
    \x1c\n\nos_bal_cry\x18\x0c\x20\x01(\x01R\x08osBalCry\x12\"\n\rint_comp_t\
    ype\x18\r\x20\x01(\tR\x0bintCompType\x12\x20\n\x0ccomp_int_amt\x18\x0e\
    \x20\x01(\x01R\ncompIntAmt\x12\x15\n\x06int_rt\x18\x0f\x20\x01(\x01R\x05\
    intRt\x12\x15\n\x06mat_dt\x18\x10\x20\x01(\x03R\x05matDt\x12\x17\n\x07de\
    p_amt\x18\x11\x20\x01(\x01R\x06depAmt\x12\x1e\n\x0bdep_amt_cry\x18\x12\
    \x20\x01(\x01R\tdepAmtCry\x12\x17\n\x07int_amt\x18\x13\x20\x01(\x01R\x06\
    intAmt\x12\x19\n\x08int_acrd\x18\x14\x20\x01(\x01R\x07intAcrd\x12\"\n\rn\
    on_with_flag\x18\x15\x20\x01(\tR\x0bnonWithFlag\x12\x1d\n\nnotice_day\
    \x18\x16\x20\x01(\tR\tnoticeDay\x12\x19\n\x08const_cd\x18\x17\x20\x01(\
    \x03R\x07constCd\x12\x1d\n\nconst_desc\x18\x18\x20\x01(\tR\tconstDesc\
    \x12\x1d\n\nresid_days\x18\x19\x20\x01(\x03R\tresidDays\x12\x1f\n\x0bcnt\
    rct_days\x18\x1a\x20\x01(\x03R\ncntrctDays\x12\x1f\n\x0bclient_type\x18\
    \x1b\x20\x01(\tR\nclientType\x12!\n\x0cclients_name\x18\x1c\x20\x01(\tR\
    \x0bclientsName\x12/\n\x14clients_bsr_type_flg\x18\x1d\x20\x01(\tR\x11cl\
    ientsBsrTypeFlg\x120\n\x14clients_busdivn_code\x18\x1e\x20\x01(\tR\x12cl\
    ientsBusdivnCode\x12,\n\x12clients_const_code\x18\x1f\x20\x01(\tR\x10cli\
    entsConstCode\x12-\n\x13clients_pan_gir_num\x18\x20\x20\x01(\tR\x10clien\
    tsPanGirNum\x12>\n\x1bclients_risk_categorization\x18!\x20\x01(\tR\x19cl\
    ientsRiskCategorization\x12,\n\x12clients_risk_cntry\x18\"\x20\x01(\tR\
    \x10clientsRiskCntry\x120\n\x14clients_segment_code\x18#\x20\x01(\tR\x12\
    clientsSegmentCode\x122\n\x15corpcl_orgn_qualifier\x18$\x20\x01(\tR\x13c\
    orpclOrgnQualifier\x12*\n\x11corpcl_indus_code\x18%\x20\x01(\tR\x0fcorpc\
    lIndusCode\x121\n\x15corpcl_nature_of_bus1\x18&\x20\x01(\tR\x12corpclNat\
    ureOfBus1\x127\n\x18corpcl_central_state_flg\x18'\x20\x01(\tR\x15corpclC\
    entralStateFlg\x127\n\x18corpcl_public_sector_flg\x18(\x20\x01(\tR\x15co\
    rpclPublicSectorFlg\x123\n\x16corpcl_primary_dlr_flg\x18)\x20\x01(\tR\
    \x13corpclPrimaryDlrFlg\x128\n\x18corpcl_multilateral_bank\x18*\x20\x01(\
    \tR\x16corpclMultilateralBank\x12/\n\x14corpcl_connp_inv_num\x18+\x20\
    \x01(\tR\x11corpclConnpInvNum\x127\n\x18corpcl_bc_gross_turnover\x18,\
    \x20\x01(\x01R\x15corpclBcGrossTurnover\x12\x15\n\x06w4b_cd\x18-\x20\x01\
    (\x03R\x05w4bCd\x12\x19\n\x08balm_llg\x18.\x20\x01(\tR\x07balmLlg\x12\
    \x19\n\x08care_llg\x18/\x20\x01(\tR\x07careLlg\x12\x15\n\x06ba_llg\x180\
    \x20\x01(\tR\x05baLlg\x12\x20\n\x0ctot_prin_amt\x181\x20\x01(\x01R\ntotP\
    rinAmt\x12'\n\tcashflows\x182\x20\x03(\x0b2\t.CashflowR\tcashflows\x12\
    \x1e\n\x0btot_int_amt\x183\x20\x01(\x01R\ttotIntAmtb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
