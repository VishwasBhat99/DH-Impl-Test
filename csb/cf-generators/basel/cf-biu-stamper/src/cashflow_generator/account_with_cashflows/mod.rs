// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq, Clone, Default)]
pub struct Account {
    // message fields
    pub acc_no: ::std::string::String,
    pub cust_id: ::std::string::String,
    pub prod_code: ::std::string::String,
    pub currency: ::std::string::String,
    pub mis: ::std::string::String,
    pub mat_date: i64,
    pub amount: f64,
    pub lcy_amount: f64,
    pub cust_type: ::std::string::String,
    pub res_days: i64,
    pub is_nwd: ::std::string::String,
    pub is_nwd_final: ::std::string::String,
    pub bkt_id: i64,
    pub t1: ::std::string::String,
    pub t2: ::std::string::String,
    pub t3: ::std::string::String,
    pub t4: ::std::string::String,
    pub total_deposits: f64,
    pub text_desc: ::std::string::String,
    pub text_desc_flag: ::std::string::String,
    pub nob: ::std::string::String,
    pub div: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    // string acc_no = 1;

    pub fn clear_acc_no(&mut self) {
        self.acc_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_no(&mut self, v: ::std::string::String) {
        self.acc_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_no(&mut self) -> &mut ::std::string::String {
        &mut self.acc_no
    }

    // Take field
    pub fn take_acc_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_no, ::std::string::String::new())
    }

    pub fn get_acc_no(&self) -> &str {
        &self.acc_no
    }

    // string cust_id = 2;

    pub fn clear_cust_id(&mut self) {
        self.cust_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: ::std::string::String) {
        self.cust_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_id
    }

    // Take field
    pub fn take_cust_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_id, ::std::string::String::new())
    }

    pub fn get_cust_id(&self) -> &str {
        &self.cust_id
    }

    // string prod_code = 3;

    pub fn clear_prod_code(&mut self) {
        self.prod_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_code(&mut self, v: ::std::string::String) {
        self.prod_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_code(&mut self) -> &mut ::std::string::String {
        &mut self.prod_code
    }

    // Take field
    pub fn take_prod_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_code, ::std::string::String::new())
    }

    pub fn get_prod_code(&self) -> &str {
        &self.prod_code
    }

    // string currency = 4;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // string mis = 5;

    pub fn clear_mis(&mut self) {
        self.mis.clear();
    }

    // Param is passed by value, moved
    pub fn set_mis(&mut self, v: ::std::string::String) {
        self.mis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mis(&mut self) -> &mut ::std::string::String {
        &mut self.mis
    }

    // Take field
    pub fn take_mis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mis, ::std::string::String::new())
    }

    pub fn get_mis(&self) -> &str {
        &self.mis
    }

    // int64 mat_date = 6;

    pub fn clear_mat_date(&mut self) {
        self.mat_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_date(&mut self, v: i64) {
        self.mat_date = v;
    }

    pub fn get_mat_date(&self) -> i64 {
        self.mat_date
    }

    // double amount = 7;

    pub fn clear_amount(&mut self) {
        self.amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: f64) {
        self.amount = v;
    }

    pub fn get_amount(&self) -> f64 {
        self.amount
    }

    // double lcy_amount = 8;

    pub fn clear_lcy_amount(&mut self) {
        self.lcy_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lcy_amount(&mut self, v: f64) {
        self.lcy_amount = v;
    }

    pub fn get_lcy_amount(&self) -> f64 {
        self.lcy_amount
    }

    // string cust_type = 9;

    pub fn clear_cust_type(&mut self) {
        self.cust_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_type(&mut self, v: ::std::string::String) {
        self.cust_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_type(&mut self) -> &mut ::std::string::String {
        &mut self.cust_type
    }

    // Take field
    pub fn take_cust_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_type, ::std::string::String::new())
    }

    pub fn get_cust_type(&self) -> &str {
        &self.cust_type
    }

    // int64 res_days = 10;

    pub fn clear_res_days(&mut self) {
        self.res_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_res_days(&mut self, v: i64) {
        self.res_days = v;
    }

    pub fn get_res_days(&self) -> i64 {
        self.res_days
    }

    // string is_nwd = 11;

    pub fn clear_is_nwd(&mut self) {
        self.is_nwd.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_nwd(&mut self, v: ::std::string::String) {
        self.is_nwd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_nwd(&mut self) -> &mut ::std::string::String {
        &mut self.is_nwd
    }

    // Take field
    pub fn take_is_nwd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_nwd, ::std::string::String::new())
    }

    pub fn get_is_nwd(&self) -> &str {
        &self.is_nwd
    }

    // string is_nwd_final = 12;

    pub fn clear_is_nwd_final(&mut self) {
        self.is_nwd_final.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_nwd_final(&mut self, v: ::std::string::String) {
        self.is_nwd_final = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_nwd_final(&mut self) -> &mut ::std::string::String {
        &mut self.is_nwd_final
    }

    // Take field
    pub fn take_is_nwd_final(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_nwd_final, ::std::string::String::new())
    }

    pub fn get_is_nwd_final(&self) -> &str {
        &self.is_nwd_final
    }

    // int64 bkt_id = 13;

    pub fn clear_bkt_id(&mut self) {
        self.bkt_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_bkt_id(&mut self, v: i64) {
        self.bkt_id = v;
    }

    pub fn get_bkt_id(&self) -> i64 {
        self.bkt_id
    }

    // string t1 = 14;

    pub fn clear_t1(&mut self) {
        self.t1.clear();
    }

    // Param is passed by value, moved
    pub fn set_t1(&mut self, v: ::std::string::String) {
        self.t1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_t1(&mut self) -> &mut ::std::string::String {
        &mut self.t1
    }

    // Take field
    pub fn take_t1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.t1, ::std::string::String::new())
    }

    pub fn get_t1(&self) -> &str {
        &self.t1
    }

    // string t2 = 15;

    pub fn clear_t2(&mut self) {
        self.t2.clear();
    }

    // Param is passed by value, moved
    pub fn set_t2(&mut self, v: ::std::string::String) {
        self.t2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_t2(&mut self) -> &mut ::std::string::String {
        &mut self.t2
    }

    // Take field
    pub fn take_t2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.t2, ::std::string::String::new())
    }

    pub fn get_t2(&self) -> &str {
        &self.t2
    }

    // string t3 = 16;

    pub fn clear_t3(&mut self) {
        self.t3.clear();
    }

    // Param is passed by value, moved
    pub fn set_t3(&mut self, v: ::std::string::String) {
        self.t3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_t3(&mut self) -> &mut ::std::string::String {
        &mut self.t3
    }

    // Take field
    pub fn take_t3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.t3, ::std::string::String::new())
    }

    pub fn get_t3(&self) -> &str {
        &self.t3
    }

    // string t4 = 17;

    pub fn clear_t4(&mut self) {
        self.t4.clear();
    }

    // Param is passed by value, moved
    pub fn set_t4(&mut self, v: ::std::string::String) {
        self.t4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_t4(&mut self) -> &mut ::std::string::String {
        &mut self.t4
    }

    // Take field
    pub fn take_t4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.t4, ::std::string::String::new())
    }

    pub fn get_t4(&self) -> &str {
        &self.t4
    }

    // double total_deposits = 18;

    pub fn clear_total_deposits(&mut self) {
        self.total_deposits = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_deposits(&mut self, v: f64) {
        self.total_deposits = v;
    }

    pub fn get_total_deposits(&self) -> f64 {
        self.total_deposits
    }

    // string text_desc = 19;

    pub fn clear_text_desc(&mut self) {
        self.text_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_text_desc(&mut self, v: ::std::string::String) {
        self.text_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text_desc(&mut self) -> &mut ::std::string::String {
        &mut self.text_desc
    }

    // Take field
    pub fn take_text_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.text_desc, ::std::string::String::new())
    }

    pub fn get_text_desc(&self) -> &str {
        &self.text_desc
    }

    // string text_desc_flag = 20;

    pub fn clear_text_desc_flag(&mut self) {
        self.text_desc_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_text_desc_flag(&mut self, v: ::std::string::String) {
        self.text_desc_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text_desc_flag(&mut self) -> &mut ::std::string::String {
        &mut self.text_desc_flag
    }

    // Take field
    pub fn take_text_desc_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.text_desc_flag, ::std::string::String::new())
    }

    pub fn get_text_desc_flag(&self) -> &str {
        &self.text_desc_flag
    }

    // string nob = 21;

    pub fn clear_nob(&mut self) {
        self.nob.clear();
    }

    // Param is passed by value, moved
    pub fn set_nob(&mut self, v: ::std::string::String) {
        self.nob = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nob(&mut self) -> &mut ::std::string::String {
        &mut self.nob
    }

    // Take field
    pub fn take_nob(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nob, ::std::string::String::new())
    }

    pub fn get_nob(&self) -> &str {
        &self.nob
    }

    // string div = 22;

    pub fn clear_div(&mut self) {
        self.div.clear();
    }

    // Param is passed by value, moved
    pub fn set_div(&mut self, v: ::std::string::String) {
        self.div = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_div(&mut self) -> &mut ::std::string::String {
        &mut self.div
    }

    // Take field
    pub fn take_div(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.div, ::std::string::String::new())
    }

    pub fn get_div(&self) -> &str {
        &self.div
    }
}

impl ::protobuf::Message for Account {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.acc_no,
                    )?;
                }
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.cust_id,
                    )?;
                }
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.prod_code,
                    )?;
                }
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.currency,
                    )?;
                }
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mis)?;
                }
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_date = tmp;
                }
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.amount = tmp;
                }
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.lcy_amount = tmp;
                }
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.cust_type,
                    )?;
                }
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.res_days = tmp;
                }
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.is_nwd,
                    )?;
                }
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.is_nwd_final,
                    )?;
                }
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.bkt_id = tmp;
                }
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.t1)?;
                }
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.t2)?;
                }
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.t3)?;
                }
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.t4)?;
                }
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.total_deposits = tmp;
                }
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.text_desc,
                    )?;
                }
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.text_desc_flag,
                    )?;
                }
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nob)?;
                }
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.div)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.acc_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.acc_no);
        }
        if !self.cust_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.cust_id);
        }
        if !self.prod_code.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.prod_code);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.currency);
        }
        if !self.mis.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.mis);
        }
        if self.mat_date != 0 {
            my_size += ::protobuf::rt::value_size(
                6,
                self.mat_date,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.amount != 0. {
            my_size += 9;
        }
        if self.lcy_amount != 0. {
            my_size += 9;
        }
        if !self.cust_type.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.cust_type);
        }
        if self.res_days != 0 {
            my_size += ::protobuf::rt::value_size(
                10,
                self.res_days,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.is_nwd.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.is_nwd);
        }
        if !self.is_nwd_final.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.is_nwd_final);
        }
        if self.bkt_id != 0 {
            my_size += ::protobuf::rt::value_size(
                13,
                self.bkt_id,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.t1.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.t1);
        }
        if !self.t2.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.t2);
        }
        if !self.t3.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.t3);
        }
        if !self.t4.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.t4);
        }
        if self.total_deposits != 0. {
            my_size += 10;
        }
        if !self.text_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.text_desc);
        }
        if !self.text_desc_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.text_desc_flag);
        }
        if !self.nob.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.nob);
        }
        if !self.div.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.div);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.acc_no.is_empty() {
            os.write_string(1, &self.acc_no)?;
        }
        if !self.cust_id.is_empty() {
            os.write_string(2, &self.cust_id)?;
        }
        if !self.prod_code.is_empty() {
            os.write_string(3, &self.prod_code)?;
        }
        if !self.currency.is_empty() {
            os.write_string(4, &self.currency)?;
        }
        if !self.mis.is_empty() {
            os.write_string(5, &self.mis)?;
        }
        if self.mat_date != 0 {
            os.write_int64(6, self.mat_date)?;
        }
        if self.amount != 0. {
            os.write_double(7, self.amount)?;
        }
        if self.lcy_amount != 0. {
            os.write_double(8, self.lcy_amount)?;
        }
        if !self.cust_type.is_empty() {
            os.write_string(9, &self.cust_type)?;
        }
        if self.res_days != 0 {
            os.write_int64(10, self.res_days)?;
        }
        if !self.is_nwd.is_empty() {
            os.write_string(11, &self.is_nwd)?;
        }
        if !self.is_nwd_final.is_empty() {
            os.write_string(12, &self.is_nwd_final)?;
        }
        if self.bkt_id != 0 {
            os.write_int64(13, self.bkt_id)?;
        }
        if !self.t1.is_empty() {
            os.write_string(14, &self.t1)?;
        }
        if !self.t2.is_empty() {
            os.write_string(15, &self.t2)?;
        }
        if !self.t3.is_empty() {
            os.write_string(16, &self.t3)?;
        }
        if !self.t4.is_empty() {
            os.write_string(17, &self.t4)?;
        }
        if self.total_deposits != 0. {
            os.write_double(18, self.total_deposits)?;
        }
        if !self.text_desc.is_empty() {
            os.write_string(19, &self.text_desc)?;
        }
        if !self.text_desc_flag.is_empty() {
            os.write_string(20, &self.text_desc_flag)?;
        }
        if !self.nob.is_empty() {
            os.write_string(21, &self.nob)?;
        }
        if !self.div.is_empty() {
            os.write_string(22, &self.div)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Account {
        Account::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "acc_no",
                    |m: &Account| &m.acc_no,
                    |m: &mut Account| &mut m.acc_no,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "cust_id",
                    |m: &Account| &m.cust_id,
                    |m: &mut Account| &mut m.cust_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "prod_code",
                    |m: &Account| &m.prod_code,
                    |m: &mut Account| &mut m.prod_code,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "currency",
                    |m: &Account| &m.currency,
                    |m: &mut Account| &mut m.currency,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "mis", |m: &Account| &m.mis, |m: &mut Account| &mut m.mis
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "mat_date",
                    |m: &Account| &m.mat_date,
                    |m: &mut Account| &mut m.mat_date,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "amount",
                    |m: &Account| &m.amount,
                    |m: &mut Account| &mut m.amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "lcy_amount",
                    |m: &Account| &m.lcy_amount,
                    |m: &mut Account| &mut m.lcy_amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "cust_type",
                    |m: &Account| &m.cust_type,
                    |m: &mut Account| &mut m.cust_type,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "res_days",
                    |m: &Account| &m.res_days,
                    |m: &mut Account| &mut m.res_days,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "is_nwd",
                    |m: &Account| &m.is_nwd,
                    |m: &mut Account| &mut m.is_nwd,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "is_nwd_final",
                    |m: &Account| &m.is_nwd_final,
                    |m: &mut Account| &mut m.is_nwd_final,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "bkt_id",
                    |m: &Account| &m.bkt_id,
                    |m: &mut Account| &mut m.bkt_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "t1", |m: &Account| &m.t1, |m: &mut Account| &mut m.t1
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "t2", |m: &Account| &m.t2, |m: &mut Account| &mut m.t2
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "t3", |m: &Account| &m.t3, |m: &mut Account| &mut m.t3
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "t4", |m: &Account| &m.t4, |m: &mut Account| &mut m.t4
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "total_deposits",
                    |m: &Account| &m.total_deposits,
                    |m: &mut Account| &mut m.total_deposits,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "text_desc",
                    |m: &Account| &m.text_desc,
                    |m: &mut Account| &mut m.text_desc,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "text_desc_flag",
                    |m: &Account| &m.text_desc_flag,
                    |m: &mut Account| &mut m.text_desc_flag,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "nob", |m: &Account| &m.nob, |m: &mut Account| &mut m.nob
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "div", |m: &Account| &m.div, |m: &mut Account| &mut m.div
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Account>(
                    "Account",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Account {
        static mut instance: ::protobuf::lazy::Lazy<Account> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Account,
        };
        unsafe { instance.get(Account::new) }
    }
}

impl ::protobuf::Clear for Account {
    fn clear(&mut self) {
        self.clear_acc_no();
        self.clear_cust_id();
        self.clear_prod_code();
        self.clear_currency();
        self.clear_mis();
        self.clear_mat_date();
        self.clear_amount();
        self.clear_lcy_amount();
        self.clear_cust_type();
        self.clear_res_days();
        self.clear_is_nwd();
        self.clear_is_nwd_final();
        self.clear_bkt_id();
        self.clear_t1();
        self.clear_t2();
        self.clear_t3();
        self.clear_t4();
        self.clear_total_deposits();
        self.clear_text_desc();
        self.clear_text_desc_flag();
        self.clear_nob();
        self.clear_div();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmessage.proto\"\xac\x04\n\x07Account\x12\x15\n\x06acc_no\x18\x01\x20\
    \x01(\tR\x05accNo\x12\x17\n\x07cust_id\x18\x02\x20\x01(\tR\x06custId\x12\
    \x1b\n\tprod_code\x18\x03\x20\x01(\tR\x08prodCode\x12\x1a\n\x08currency\
    \x18\x04\x20\x01(\tR\x08currency\x12\x10\n\x03mis\x18\x05\x20\x01(\tR\
    \x03mis\x12\x19\n\x08mat_date\x18\x06\x20\x01(\x03R\x07matDate\x12\x16\n\
    \x06amount\x18\x07\x20\x01(\x01R\x06amount\x12\x1d\n\nlcy_amount\x18\x08\
    \x20\x01(\x01R\tlcyAmount\x12\x1b\n\tcust_type\x18\t\x20\x01(\tR\x08cust\
    Type\x12\x19\n\x08res_days\x18\n\x20\x01(\x03R\x07resDays\x12\x15\n\x06i\
    s_nwd\x18\x0b\x20\x01(\tR\x05isNwd\x12\x20\n\x0cis_nwd_final\x18\x0c\x20\
    \x01(\tR\nisNwdFinal\x12\x15\n\x06bkt_id\x18\r\x20\x01(\x03R\x05bktId\
    \x12\x0e\n\x02t1\x18\x0e\x20\x01(\tR\x02t1\x12\x0e\n\x02t2\x18\x0f\x20\
    \x01(\tR\x02t2\x12\x0e\n\x02t3\x18\x10\x20\x01(\tR\x02t3\x12\x0e\n\x02t4\
    \x18\x11\x20\x01(\tR\x02t4\x12%\n\x0etotal_deposits\x18\x12\x20\x01(\x01\
    R\rtotalDeposits\x12\x1b\n\ttext_desc\x18\x13\x20\x01(\tR\x08textDesc\
    \x12$\n\x0etext_desc_flag\x18\x14\x20\x01(\tR\x0ctextDescFlag\x12\x10\n\
    \x03nob\x18\x15\x20\x01(\tR\x03nob\x12\x10\n\x03div\x18\x16\x20\x01(\tR\
    \x03divb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<
    ::protobuf::descriptor::FileDescriptorProto,
> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe { file_descriptor_proto_lazy.get(|| parse_descriptor_proto()) }
}
