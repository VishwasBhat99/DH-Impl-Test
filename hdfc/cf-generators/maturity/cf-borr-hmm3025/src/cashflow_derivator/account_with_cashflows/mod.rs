// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double prin_amt = 2;

    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_int_amt();
        self.clear_prin_amt();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub deal_id: ::std::string::String,
    pub inst_name: ::std::string::String,
    pub oper_type: ::std::string::String,
    pub counter_party: ::std::string::String,
    pub deal_dt: i64,
    pub val_dt: i64,
    pub ccy: ::std::string::String,
    pub lcy_amt: f64,
    pub roi: f64,
    pub tenor_days: i64,
    pub mat_dt: i64,
    pub int_amt: f64,
    pub mat_amt: f64,
    pub dealer_name: ::std::string::String,
    pub ndsref: ::std::string::String,
    pub deal_status: ::std::string::String,
    pub nds_time: ::std::string::String,
    pub aip: f64,
    pub air: f64,
    pub code: ::std::string::String,
    pub as_on_dt: i64,
    pub nxt_rep_dt: i64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string deal_id = 1;

    pub fn clear_deal_id(&mut self) {
        self.deal_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_id(&mut self, v: ::std::string::String) {
        self.deal_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_id(&mut self) -> &mut ::std::string::String {
        &mut self.deal_id
    }

    // Take field
    pub fn take_deal_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_id, ::std::string::String::new())
    }

    pub fn get_deal_id(&self) -> &str {
        &self.deal_id
    }

    // string inst_name = 2;

    pub fn clear_inst_name(&mut self) {
        self.inst_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_inst_name(&mut self, v: ::std::string::String) {
        self.inst_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inst_name(&mut self) -> &mut ::std::string::String {
        &mut self.inst_name
    }

    // Take field
    pub fn take_inst_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.inst_name, ::std::string::String::new())
    }

    pub fn get_inst_name(&self) -> &str {
        &self.inst_name
    }

    // string oper_type = 3;

    pub fn clear_oper_type(&mut self) {
        self.oper_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_oper_type(&mut self, v: ::std::string::String) {
        self.oper_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oper_type(&mut self) -> &mut ::std::string::String {
        &mut self.oper_type
    }

    // Take field
    pub fn take_oper_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.oper_type, ::std::string::String::new())
    }

    pub fn get_oper_type(&self) -> &str {
        &self.oper_type
    }

    // string counter_party = 4;

    pub fn clear_counter_party(&mut self) {
        self.counter_party.clear();
    }

    // Param is passed by value, moved
    pub fn set_counter_party(&mut self, v: ::std::string::String) {
        self.counter_party = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counter_party(&mut self) -> &mut ::std::string::String {
        &mut self.counter_party
    }

    // Take field
    pub fn take_counter_party(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counter_party, ::std::string::String::new())
    }

    pub fn get_counter_party(&self) -> &str {
        &self.counter_party
    }

    // int64 deal_dt = 5;

    pub fn clear_deal_dt(&mut self) {
        self.deal_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_deal_dt(&mut self, v: i64) {
        self.deal_dt = v;
    }

    pub fn get_deal_dt(&self) -> i64 {
        self.deal_dt
    }

    // int64 val_dt = 6;

    pub fn clear_val_dt(&mut self) {
        self.val_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_val_dt(&mut self, v: i64) {
        self.val_dt = v;
    }

    pub fn get_val_dt(&self) -> i64 {
        self.val_dt
    }

    // string ccy = 7;

    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }

    // double lcy_amt = 8;

    pub fn clear_lcy_amt(&mut self) {
        self.lcy_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lcy_amt(&mut self, v: f64) {
        self.lcy_amt = v;
    }

    pub fn get_lcy_amt(&self) -> f64 {
        self.lcy_amt
    }

    // double roi = 9;

    pub fn clear_roi(&mut self) {
        self.roi = 0.;
    }

    // Param is passed by value, moved
    pub fn set_roi(&mut self, v: f64) {
        self.roi = v;
    }

    pub fn get_roi(&self) -> f64 {
        self.roi
    }

    // int64 tenor_days = 10;

    pub fn clear_tenor_days(&mut self) {
        self.tenor_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_tenor_days(&mut self, v: i64) {
        self.tenor_days = v;
    }

    pub fn get_tenor_days(&self) -> i64 {
        self.tenor_days
    }

    // int64 mat_dt = 11;

    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }

    // double int_amt = 12;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double mat_amt = 13;

    pub fn clear_mat_amt(&mut self) {
        self.mat_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mat_amt(&mut self, v: f64) {
        self.mat_amt = v;
    }

    pub fn get_mat_amt(&self) -> f64 {
        self.mat_amt
    }

    // string dealer_name = 14;

    pub fn clear_dealer_name(&mut self) {
        self.dealer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_dealer_name(&mut self, v: ::std::string::String) {
        self.dealer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dealer_name(&mut self) -> &mut ::std::string::String {
        &mut self.dealer_name
    }

    // Take field
    pub fn take_dealer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dealer_name, ::std::string::String::new())
    }

    pub fn get_dealer_name(&self) -> &str {
        &self.dealer_name
    }

    // string ndsref = 15;

    pub fn clear_ndsref(&mut self) {
        self.ndsref.clear();
    }

    // Param is passed by value, moved
    pub fn set_ndsref(&mut self, v: ::std::string::String) {
        self.ndsref = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ndsref(&mut self) -> &mut ::std::string::String {
        &mut self.ndsref
    }

    // Take field
    pub fn take_ndsref(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ndsref, ::std::string::String::new())
    }

    pub fn get_ndsref(&self) -> &str {
        &self.ndsref
    }

    // string deal_status = 16;

    pub fn clear_deal_status(&mut self) {
        self.deal_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_status(&mut self, v: ::std::string::String) {
        self.deal_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_status(&mut self) -> &mut ::std::string::String {
        &mut self.deal_status
    }

    // Take field
    pub fn take_deal_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_status, ::std::string::String::new())
    }

    pub fn get_deal_status(&self) -> &str {
        &self.deal_status
    }

    // string nds_time = 17;

    pub fn clear_nds_time(&mut self) {
        self.nds_time.clear();
    }

    // Param is passed by value, moved
    pub fn set_nds_time(&mut self, v: ::std::string::String) {
        self.nds_time = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nds_time(&mut self) -> &mut ::std::string::String {
        &mut self.nds_time
    }

    // Take field
    pub fn take_nds_time(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nds_time, ::std::string::String::new())
    }

    pub fn get_nds_time(&self) -> &str {
        &self.nds_time
    }

    // double aip = 18;

    pub fn clear_aip(&mut self) {
        self.aip = 0.;
    }

    // Param is passed by value, moved
    pub fn set_aip(&mut self, v: f64) {
        self.aip = v;
    }

    pub fn get_aip(&self) -> f64 {
        self.aip
    }

    // double air = 19;

    pub fn clear_air(&mut self) {
        self.air = 0.;
    }

    // Param is passed by value, moved
    pub fn set_air(&mut self, v: f64) {
        self.air = v;
    }

    pub fn get_air(&self) -> f64 {
        self.air
    }

    // string code = 20;

    pub fn clear_code(&mut self) {
        self.code.clear();
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ::std::string::String) {
        self.code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code(&mut self) -> &mut ::std::string::String {
        &mut self.code
    }

    // Take field
    pub fn take_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.code, ::std::string::String::new())
    }

    pub fn get_code(&self) -> &str {
        &self.code
    }

    // int64 as_on_dt = 21;

    pub fn clear_as_on_dt(&mut self) {
        self.as_on_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on_dt(&mut self, v: i64) {
        self.as_on_dt = v;
    }

    pub fn get_as_on_dt(&self) -> i64 {
        self.as_on_dt
    }

    // int64 nxt_rep_dt = 22;

    pub fn clear_nxt_rep_dt(&mut self) {
        self.nxt_rep_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_rep_dt(&mut self, v: i64) {
        self.nxt_rep_dt = v;
    }

    pub fn get_nxt_rep_dt(&self) -> i64 {
        self.nxt_rep_dt
    }

    // repeated .Cashflow cashflows = 23;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.inst_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.oper_type)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counter_party)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deal_dt = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.val_dt = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.lcy_amt = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.roi = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tenor_days = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.mat_amt = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dealer_name)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ndsref)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_status)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nds_time)?;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.aip = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.air = tmp;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.code)?;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on_dt = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_rep_dt = tmp;
                },
                23 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.deal_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.deal_id);
        }
        if !self.inst_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.inst_name);
        }
        if !self.oper_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.oper_type);
        }
        if !self.counter_party.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.counter_party);
        }
        if self.deal_dt != 0 {
            my_size += ::protobuf::rt::value_size(5, self.deal_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.val_dt != 0 {
            my_size += ::protobuf::rt::value_size(6, self.val_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.ccy);
        }
        if self.lcy_amt != 0. {
            my_size += 9;
        }
        if self.roi != 0. {
            my_size += 9;
        }
        if self.tenor_days != 0 {
            my_size += ::protobuf::rt::value_size(10, self.tenor_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mat_dt != 0 {
            my_size += ::protobuf::rt::value_size(11, self.mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.mat_amt != 0. {
            my_size += 9;
        }
        if !self.dealer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.dealer_name);
        }
        if !self.ndsref.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.ndsref);
        }
        if !self.deal_status.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.deal_status);
        }
        if !self.nds_time.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.nds_time);
        }
        if self.aip != 0. {
            my_size += 10;
        }
        if self.air != 0. {
            my_size += 10;
        }
        if !self.code.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.code);
        }
        if self.as_on_dt != 0 {
            my_size += ::protobuf::rt::value_size(21, self.as_on_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.nxt_rep_dt != 0 {
            my_size += ::protobuf::rt::value_size(22, self.nxt_rep_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.deal_id.is_empty() {
            os.write_string(1, &self.deal_id)?;
        }
        if !self.inst_name.is_empty() {
            os.write_string(2, &self.inst_name)?;
        }
        if !self.oper_type.is_empty() {
            os.write_string(3, &self.oper_type)?;
        }
        if !self.counter_party.is_empty() {
            os.write_string(4, &self.counter_party)?;
        }
        if self.deal_dt != 0 {
            os.write_int64(5, self.deal_dt)?;
        }
        if self.val_dt != 0 {
            os.write_int64(6, self.val_dt)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(7, &self.ccy)?;
        }
        if self.lcy_amt != 0. {
            os.write_double(8, self.lcy_amt)?;
        }
        if self.roi != 0. {
            os.write_double(9, self.roi)?;
        }
        if self.tenor_days != 0 {
            os.write_int64(10, self.tenor_days)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(11, self.mat_dt)?;
        }
        if self.int_amt != 0. {
            os.write_double(12, self.int_amt)?;
        }
        if self.mat_amt != 0. {
            os.write_double(13, self.mat_amt)?;
        }
        if !self.dealer_name.is_empty() {
            os.write_string(14, &self.dealer_name)?;
        }
        if !self.ndsref.is_empty() {
            os.write_string(15, &self.ndsref)?;
        }
        if !self.deal_status.is_empty() {
            os.write_string(16, &self.deal_status)?;
        }
        if !self.nds_time.is_empty() {
            os.write_string(17, &self.nds_time)?;
        }
        if self.aip != 0. {
            os.write_double(18, self.aip)?;
        }
        if self.air != 0. {
            os.write_double(19, self.air)?;
        }
        if !self.code.is_empty() {
            os.write_string(20, &self.code)?;
        }
        if self.as_on_dt != 0 {
            os.write_int64(21, self.as_on_dt)?;
        }
        if self.nxt_rep_dt != 0 {
            os.write_int64(22, self.nxt_rep_dt)?;
        }
        for v in &self.cashflows {
            os.write_tag(23, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_id",
                    |m: &AccountWithCashflows| { &m.deal_id },
                    |m: &mut AccountWithCashflows| { &mut m.deal_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "inst_name",
                    |m: &AccountWithCashflows| { &m.inst_name },
                    |m: &mut AccountWithCashflows| { &mut m.inst_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "oper_type",
                    |m: &AccountWithCashflows| { &m.oper_type },
                    |m: &mut AccountWithCashflows| { &mut m.oper_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counter_party",
                    |m: &AccountWithCashflows| { &m.counter_party },
                    |m: &mut AccountWithCashflows| { &mut m.counter_party },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "deal_dt",
                    |m: &AccountWithCashflows| { &m.deal_dt },
                    |m: &mut AccountWithCashflows| { &mut m.deal_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "val_dt",
                    |m: &AccountWithCashflows| { &m.val_dt },
                    |m: &mut AccountWithCashflows| { &mut m.val_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy",
                    |m: &AccountWithCashflows| { &m.ccy },
                    |m: &mut AccountWithCashflows| { &mut m.ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "lcy_amt",
                    |m: &AccountWithCashflows| { &m.lcy_amt },
                    |m: &mut AccountWithCashflows| { &mut m.lcy_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "roi",
                    |m: &AccountWithCashflows| { &m.roi },
                    |m: &mut AccountWithCashflows| { &mut m.roi },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tenor_days",
                    |m: &AccountWithCashflows| { &m.tenor_days },
                    |m: &mut AccountWithCashflows| { &mut m.tenor_days },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "mat_dt",
                    |m: &AccountWithCashflows| { &m.mat_dt },
                    |m: &mut AccountWithCashflows| { &mut m.mat_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &AccountWithCashflows| { &m.int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "mat_amt",
                    |m: &AccountWithCashflows| { &m.mat_amt },
                    |m: &mut AccountWithCashflows| { &mut m.mat_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dealer_name",
                    |m: &AccountWithCashflows| { &m.dealer_name },
                    |m: &mut AccountWithCashflows| { &mut m.dealer_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ndsref",
                    |m: &AccountWithCashflows| { &m.ndsref },
                    |m: &mut AccountWithCashflows| { &mut m.ndsref },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_status",
                    |m: &AccountWithCashflows| { &m.deal_status },
                    |m: &mut AccountWithCashflows| { &mut m.deal_status },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "nds_time",
                    |m: &AccountWithCashflows| { &m.nds_time },
                    |m: &mut AccountWithCashflows| { &mut m.nds_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "aip",
                    |m: &AccountWithCashflows| { &m.aip },
                    |m: &mut AccountWithCashflows| { &mut m.aip },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "air",
                    |m: &AccountWithCashflows| { &m.air },
                    |m: &mut AccountWithCashflows| { &mut m.air },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "code",
                    |m: &AccountWithCashflows| { &m.code },
                    |m: &mut AccountWithCashflows| { &mut m.code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "as_on_dt",
                    |m: &AccountWithCashflows| { &m.as_on_dt },
                    |m: &mut AccountWithCashflows| { &mut m.as_on_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "nxt_rep_dt",
                    |m: &AccountWithCashflows| { &m.nxt_rep_dt },
                    |m: &mut AccountWithCashflows| { &mut m.nxt_rep_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_deal_id();
        self.clear_inst_name();
        self.clear_oper_type();
        self.clear_counter_party();
        self.clear_deal_dt();
        self.clear_val_dt();
        self.clear_ccy();
        self.clear_lcy_amt();
        self.clear_roi();
        self.clear_tenor_days();
        self.clear_mat_dt();
        self.clear_int_amt();
        self.clear_mat_amt();
        self.clear_dealer_name();
        self.clear_ndsref();
        self.clear_deal_status();
        self.clear_nds_time();
        self.clear_aip();
        self.clear_air();
        self.clear_code();
        self.clear_as_on_dt();
        self.clear_nxt_rep_dt();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aAccountWithCashflows.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\
    \x18\x01\x20\x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\
    \x01R\x07prinAmt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xf1\
    \x04\n\x14AccountWithCashflows\x12\x17\n\x07deal_id\x18\x01\x20\x01(\tR\
    \x06dealId\x12\x1b\n\tinst_name\x18\x02\x20\x01(\tR\x08instName\x12\x1b\
    \n\toper_type\x18\x03\x20\x01(\tR\x08operType\x12#\n\rcounter_party\x18\
    \x04\x20\x01(\tR\x0ccounterParty\x12\x17\n\x07deal_dt\x18\x05\x20\x01(\
    \x03R\x06dealDt\x12\x15\n\x06val_dt\x18\x06\x20\x01(\x03R\x05valDt\x12\
    \x10\n\x03ccy\x18\x07\x20\x01(\tR\x03ccy\x12\x17\n\x07lcy_amt\x18\x08\
    \x20\x01(\x01R\x06lcyAmt\x12\x10\n\x03roi\x18\t\x20\x01(\x01R\x03roi\x12\
    \x1d\n\ntenor_days\x18\n\x20\x01(\x03R\ttenorDays\x12\x15\n\x06mat_dt\
    \x18\x0b\x20\x01(\x03R\x05matDt\x12\x17\n\x07int_amt\x18\x0c\x20\x01(\
    \x01R\x06intAmt\x12\x17\n\x07mat_amt\x18\r\x20\x01(\x01R\x06matAmt\x12\
    \x1f\n\x0bdealer_name\x18\x0e\x20\x01(\tR\ndealerName\x12\x16\n\x06ndsre\
    f\x18\x0f\x20\x01(\tR\x06ndsref\x12\x1f\n\x0bdeal_status\x18\x10\x20\x01\
    (\tR\ndealStatus\x12\x19\n\x08nds_time\x18\x11\x20\x01(\tR\x07ndsTime\
    \x12\x10\n\x03aip\x18\x12\x20\x01(\x01R\x03aip\x12\x10\n\x03air\x18\x13\
    \x20\x01(\x01R\x03air\x12\x12\n\x04code\x18\x14\x20\x01(\tR\x04code\x12\
    \x18\n\x08as_on_dt\x18\x15\x20\x01(\x03R\x06asOnDt\x12\x1c\n\nnxt_rep_dt\
    \x18\x16\x20\x01(\x03R\x08nxtRepDt\x12'\n\tcashflows\x18\x17\x20\x03(\
    \x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}