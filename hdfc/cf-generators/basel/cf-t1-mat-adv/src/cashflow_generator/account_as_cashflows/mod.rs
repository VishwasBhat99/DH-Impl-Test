// This file is generated by rust-protobuf 2.11.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cf_t1_mat_adv.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_11_0;

#[derive(PartialEq,Clone,Default)]
pub struct Account {
    // message fields
    pub acc_id: ::std::string::String,
    pub cust_id: ::std::string::String,
    pub prod_code: ::std::string::String,
    pub cust_type: ::std::string::String,
    pub int_rate: f64,
    pub currency: ::std::string::String,
    pub cust_basel_val_code: ::std::string::String,
    pub div: ::std::string::String,
    pub nat_of_bus: ::std::string::String,
    pub txt_desc: ::std::string::String,
    pub sme_class: ::std::string::String,
    pub str1: ::std::string::String,
    pub str2: ::std::string::String,
    pub str3: ::std::string::String,
    pub str4: ::std::string::String,
    pub str5: ::std::string::String,
    pub int1: i64,
    pub int2: i64,
    pub int3: i64,
    pub int4: i64,
    pub int5: i64,
    pub float1: f64,
    pub float2: f64,
    pub float3: f64,
    pub float4: f64,
    pub float5: f64,
    pub b1: f64,
    pub b2: f64,
    pub b3: f64,
    pub b4: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Account {
    fn default() -> &'a Account {
        <Account as ::protobuf::Message>::default_instance()
    }
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    // string acc_id = 1;


    pub fn get_acc_id(&self) -> &str {
        &self.acc_id
    }
    pub fn clear_acc_id(&mut self) {
        self.acc_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_id(&mut self, v: ::std::string::String) {
        self.acc_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_id(&mut self) -> &mut ::std::string::String {
        &mut self.acc_id
    }

    // Take field
    pub fn take_acc_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_id, ::std::string::String::new())
    }

    // string cust_id = 2;


    pub fn get_cust_id(&self) -> &str {
        &self.cust_id
    }
    pub fn clear_cust_id(&mut self) {
        self.cust_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: ::std::string::String) {
        self.cust_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_id
    }

    // Take field
    pub fn take_cust_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_id, ::std::string::String::new())
    }

    // string prod_code = 3;


    pub fn get_prod_code(&self) -> &str {
        &self.prod_code
    }
    pub fn clear_prod_code(&mut self) {
        self.prod_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_code(&mut self, v: ::std::string::String) {
        self.prod_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_code(&mut self) -> &mut ::std::string::String {
        &mut self.prod_code
    }

    // Take field
    pub fn take_prod_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_code, ::std::string::String::new())
    }

    // string cust_type = 4;


    pub fn get_cust_type(&self) -> &str {
        &self.cust_type
    }
    pub fn clear_cust_type(&mut self) {
        self.cust_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_type(&mut self, v: ::std::string::String) {
        self.cust_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_type(&mut self) -> &mut ::std::string::String {
        &mut self.cust_type
    }

    // Take field
    pub fn take_cust_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_type, ::std::string::String::new())
    }

    // double int_rate = 5;


    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }
    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    // string currency = 6;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // string cust_basel_val_code = 7;


    pub fn get_cust_basel_val_code(&self) -> &str {
        &self.cust_basel_val_code
    }
    pub fn clear_cust_basel_val_code(&mut self) {
        self.cust_basel_val_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_basel_val_code(&mut self, v: ::std::string::String) {
        self.cust_basel_val_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_basel_val_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_basel_val_code
    }

    // Take field
    pub fn take_cust_basel_val_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_basel_val_code, ::std::string::String::new())
    }

    // string div = 8;


    pub fn get_div(&self) -> &str {
        &self.div
    }
    pub fn clear_div(&mut self) {
        self.div.clear();
    }

    // Param is passed by value, moved
    pub fn set_div(&mut self, v: ::std::string::String) {
        self.div = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_div(&mut self) -> &mut ::std::string::String {
        &mut self.div
    }

    // Take field
    pub fn take_div(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.div, ::std::string::String::new())
    }

    // string nat_of_bus = 9;


    pub fn get_nat_of_bus(&self) -> &str {
        &self.nat_of_bus
    }
    pub fn clear_nat_of_bus(&mut self) {
        self.nat_of_bus.clear();
    }

    // Param is passed by value, moved
    pub fn set_nat_of_bus(&mut self, v: ::std::string::String) {
        self.nat_of_bus = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nat_of_bus(&mut self) -> &mut ::std::string::String {
        &mut self.nat_of_bus
    }

    // Take field
    pub fn take_nat_of_bus(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nat_of_bus, ::std::string::String::new())
    }

    // string txt_desc = 10;


    pub fn get_txt_desc(&self) -> &str {
        &self.txt_desc
    }
    pub fn clear_txt_desc(&mut self) {
        self.txt_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_txt_desc(&mut self, v: ::std::string::String) {
        self.txt_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txt_desc(&mut self) -> &mut ::std::string::String {
        &mut self.txt_desc
    }

    // Take field
    pub fn take_txt_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.txt_desc, ::std::string::String::new())
    }

    // string sme_class = 11;


    pub fn get_sme_class(&self) -> &str {
        &self.sme_class
    }
    pub fn clear_sme_class(&mut self) {
        self.sme_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_sme_class(&mut self, v: ::std::string::String) {
        self.sme_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sme_class(&mut self) -> &mut ::std::string::String {
        &mut self.sme_class
    }

    // Take field
    pub fn take_sme_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sme_class, ::std::string::String::new())
    }

    // string str1 = 12;


    pub fn get_str1(&self) -> &str {
        &self.str1
    }
    pub fn clear_str1(&mut self) {
        self.str1.clear();
    }

    // Param is passed by value, moved
    pub fn set_str1(&mut self, v: ::std::string::String) {
        self.str1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_str1(&mut self) -> &mut ::std::string::String {
        &mut self.str1
    }

    // Take field
    pub fn take_str1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.str1, ::std::string::String::new())
    }

    // string str2 = 13;


    pub fn get_str2(&self) -> &str {
        &self.str2
    }
    pub fn clear_str2(&mut self) {
        self.str2.clear();
    }

    // Param is passed by value, moved
    pub fn set_str2(&mut self, v: ::std::string::String) {
        self.str2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_str2(&mut self) -> &mut ::std::string::String {
        &mut self.str2
    }

    // Take field
    pub fn take_str2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.str2, ::std::string::String::new())
    }

    // string str3 = 14;


    pub fn get_str3(&self) -> &str {
        &self.str3
    }
    pub fn clear_str3(&mut self) {
        self.str3.clear();
    }

    // Param is passed by value, moved
    pub fn set_str3(&mut self, v: ::std::string::String) {
        self.str3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_str3(&mut self) -> &mut ::std::string::String {
        &mut self.str3
    }

    // Take field
    pub fn take_str3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.str3, ::std::string::String::new())
    }

    // string str4 = 15;


    pub fn get_str4(&self) -> &str {
        &self.str4
    }
    pub fn clear_str4(&mut self) {
        self.str4.clear();
    }

    // Param is passed by value, moved
    pub fn set_str4(&mut self, v: ::std::string::String) {
        self.str4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_str4(&mut self) -> &mut ::std::string::String {
        &mut self.str4
    }

    // Take field
    pub fn take_str4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.str4, ::std::string::String::new())
    }

    // string str5 = 16;


    pub fn get_str5(&self) -> &str {
        &self.str5
    }
    pub fn clear_str5(&mut self) {
        self.str5.clear();
    }

    // Param is passed by value, moved
    pub fn set_str5(&mut self, v: ::std::string::String) {
        self.str5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_str5(&mut self) -> &mut ::std::string::String {
        &mut self.str5
    }

    // Take field
    pub fn take_str5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.str5, ::std::string::String::new())
    }

    // int64 int1 = 17;


    pub fn get_int1(&self) -> i64 {
        self.int1
    }
    pub fn clear_int1(&mut self) {
        self.int1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_int1(&mut self, v: i64) {
        self.int1 = v;
    }

    // int64 int2 = 18;


    pub fn get_int2(&self) -> i64 {
        self.int2
    }
    pub fn clear_int2(&mut self) {
        self.int2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_int2(&mut self, v: i64) {
        self.int2 = v;
    }

    // int64 int3 = 19;


    pub fn get_int3(&self) -> i64 {
        self.int3
    }
    pub fn clear_int3(&mut self) {
        self.int3 = 0;
    }

    // Param is passed by value, moved
    pub fn set_int3(&mut self, v: i64) {
        self.int3 = v;
    }

    // int64 int4 = 20;


    pub fn get_int4(&self) -> i64 {
        self.int4
    }
    pub fn clear_int4(&mut self) {
        self.int4 = 0;
    }

    // Param is passed by value, moved
    pub fn set_int4(&mut self, v: i64) {
        self.int4 = v;
    }

    // int64 int5 = 21;


    pub fn get_int5(&self) -> i64 {
        self.int5
    }
    pub fn clear_int5(&mut self) {
        self.int5 = 0;
    }

    // Param is passed by value, moved
    pub fn set_int5(&mut self, v: i64) {
        self.int5 = v;
    }

    // double float1 = 22;


    pub fn get_float1(&self) -> f64 {
        self.float1
    }
    pub fn clear_float1(&mut self) {
        self.float1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_float1(&mut self, v: f64) {
        self.float1 = v;
    }

    // double float2 = 23;


    pub fn get_float2(&self) -> f64 {
        self.float2
    }
    pub fn clear_float2(&mut self) {
        self.float2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_float2(&mut self, v: f64) {
        self.float2 = v;
    }

    // double float3 = 24;


    pub fn get_float3(&self) -> f64 {
        self.float3
    }
    pub fn clear_float3(&mut self) {
        self.float3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_float3(&mut self, v: f64) {
        self.float3 = v;
    }

    // double float4 = 25;


    pub fn get_float4(&self) -> f64 {
        self.float4
    }
    pub fn clear_float4(&mut self) {
        self.float4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_float4(&mut self, v: f64) {
        self.float4 = v;
    }

    // double float5 = 26;


    pub fn get_float5(&self) -> f64 {
        self.float5
    }
    pub fn clear_float5(&mut self) {
        self.float5 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_float5(&mut self, v: f64) {
        self.float5 = v;
    }

    // double b1 = 27;


    pub fn get_b1(&self) -> f64 {
        self.b1
    }
    pub fn clear_b1(&mut self) {
        self.b1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_b1(&mut self, v: f64) {
        self.b1 = v;
    }

    // double b2 = 28;


    pub fn get_b2(&self) -> f64 {
        self.b2
    }
    pub fn clear_b2(&mut self) {
        self.b2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_b2(&mut self, v: f64) {
        self.b2 = v;
    }

    // double b3 = 29;


    pub fn get_b3(&self) -> f64 {
        self.b3
    }
    pub fn clear_b3(&mut self) {
        self.b3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_b3(&mut self, v: f64) {
        self.b3 = v;
    }

    // double b4 = 30;


    pub fn get_b4(&self) -> f64 {
        self.b4
    }
    pub fn clear_b4(&mut self) {
        self.b4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_b4(&mut self, v: f64) {
        self.b4 = v;
    }
}

impl ::protobuf::Message for Account {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_code)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_type)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_basel_val_code)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.div)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nat_of_bus)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.txt_desc)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sme_class)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.str1)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.str2)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.str3)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.str4)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.str5)?;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int1 = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int2 = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int3 = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int4 = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int5 = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.float1 = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.float2 = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.float3 = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.float4 = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.float5 = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.b1 = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.b2 = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.b3 = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.b4 = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.acc_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.acc_id);
        }
        if !self.cust_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.cust_id);
        }
        if !self.prod_code.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.prod_code);
        }
        if !self.cust_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.cust_type);
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.currency);
        }
        if !self.cust_basel_val_code.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.cust_basel_val_code);
        }
        if !self.div.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.div);
        }
        if !self.nat_of_bus.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.nat_of_bus);
        }
        if !self.txt_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.txt_desc);
        }
        if !self.sme_class.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.sme_class);
        }
        if !self.str1.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.str1);
        }
        if !self.str2.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.str2);
        }
        if !self.str3.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.str3);
        }
        if !self.str4.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.str4);
        }
        if !self.str5.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.str5);
        }
        if self.int1 != 0 {
            my_size += ::protobuf::rt::value_size(17, self.int1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int2 != 0 {
            my_size += ::protobuf::rt::value_size(18, self.int2, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int3 != 0 {
            my_size += ::protobuf::rt::value_size(19, self.int3, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int4 != 0 {
            my_size += ::protobuf::rt::value_size(20, self.int4, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int5 != 0 {
            my_size += ::protobuf::rt::value_size(21, self.int5, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.float1 != 0. {
            my_size += 10;
        }
        if self.float2 != 0. {
            my_size += 10;
        }
        if self.float3 != 0. {
            my_size += 10;
        }
        if self.float4 != 0. {
            my_size += 10;
        }
        if self.float5 != 0. {
            my_size += 10;
        }
        if self.b1 != 0. {
            my_size += 10;
        }
        if self.b2 != 0. {
            my_size += 10;
        }
        if self.b3 != 0. {
            my_size += 10;
        }
        if self.b4 != 0. {
            my_size += 10;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.acc_id.is_empty() {
            os.write_string(1, &self.acc_id)?;
        }
        if !self.cust_id.is_empty() {
            os.write_string(2, &self.cust_id)?;
        }
        if !self.prod_code.is_empty() {
            os.write_string(3, &self.prod_code)?;
        }
        if !self.cust_type.is_empty() {
            os.write_string(4, &self.cust_type)?;
        }
        if self.int_rate != 0. {
            os.write_double(5, self.int_rate)?;
        }
        if !self.currency.is_empty() {
            os.write_string(6, &self.currency)?;
        }
        if !self.cust_basel_val_code.is_empty() {
            os.write_string(7, &self.cust_basel_val_code)?;
        }
        if !self.div.is_empty() {
            os.write_string(8, &self.div)?;
        }
        if !self.nat_of_bus.is_empty() {
            os.write_string(9, &self.nat_of_bus)?;
        }
        if !self.txt_desc.is_empty() {
            os.write_string(10, &self.txt_desc)?;
        }
        if !self.sme_class.is_empty() {
            os.write_string(11, &self.sme_class)?;
        }
        if !self.str1.is_empty() {
            os.write_string(12, &self.str1)?;
        }
        if !self.str2.is_empty() {
            os.write_string(13, &self.str2)?;
        }
        if !self.str3.is_empty() {
            os.write_string(14, &self.str3)?;
        }
        if !self.str4.is_empty() {
            os.write_string(15, &self.str4)?;
        }
        if !self.str5.is_empty() {
            os.write_string(16, &self.str5)?;
        }
        if self.int1 != 0 {
            os.write_int64(17, self.int1)?;
        }
        if self.int2 != 0 {
            os.write_int64(18, self.int2)?;
        }
        if self.int3 != 0 {
            os.write_int64(19, self.int3)?;
        }
        if self.int4 != 0 {
            os.write_int64(20, self.int4)?;
        }
        if self.int5 != 0 {
            os.write_int64(21, self.int5)?;
        }
        if self.float1 != 0. {
            os.write_double(22, self.float1)?;
        }
        if self.float2 != 0. {
            os.write_double(23, self.float2)?;
        }
        if self.float3 != 0. {
            os.write_double(24, self.float3)?;
        }
        if self.float4 != 0. {
            os.write_double(25, self.float4)?;
        }
        if self.float5 != 0. {
            os.write_double(26, self.float5)?;
        }
        if self.b1 != 0. {
            os.write_double(27, self.b1)?;
        }
        if self.b2 != 0. {
            os.write_double(28, self.b2)?;
        }
        if self.b3 != 0. {
            os.write_double(29, self.b3)?;
        }
        if self.b4 != 0. {
            os.write_double(30, self.b4)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Account {
        Account::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acc_id",
                    |m: &Account| { &m.acc_id },
                    |m: &mut Account| { &mut m.acc_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_id",
                    |m: &Account| { &m.cust_id },
                    |m: &mut Account| { &mut m.cust_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "prod_code",
                    |m: &Account| { &m.prod_code },
                    |m: &mut Account| { &mut m.prod_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_type",
                    |m: &Account| { &m.cust_type },
                    |m: &mut Account| { &mut m.cust_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rate",
                    |m: &Account| { &m.int_rate },
                    |m: &mut Account| { &mut m.int_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &Account| { &m.currency },
                    |m: &mut Account| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_basel_val_code",
                    |m: &Account| { &m.cust_basel_val_code },
                    |m: &mut Account| { &mut m.cust_basel_val_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "div",
                    |m: &Account| { &m.div },
                    |m: &mut Account| { &mut m.div },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "nat_of_bus",
                    |m: &Account| { &m.nat_of_bus },
                    |m: &mut Account| { &mut m.nat_of_bus },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "txt_desc",
                    |m: &Account| { &m.txt_desc },
                    |m: &mut Account| { &mut m.txt_desc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sme_class",
                    |m: &Account| { &m.sme_class },
                    |m: &mut Account| { &mut m.sme_class },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "str1",
                    |m: &Account| { &m.str1 },
                    |m: &mut Account| { &mut m.str1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "str2",
                    |m: &Account| { &m.str2 },
                    |m: &mut Account| { &mut m.str2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "str3",
                    |m: &Account| { &m.str3 },
                    |m: &mut Account| { &mut m.str3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "str4",
                    |m: &Account| { &m.str4 },
                    |m: &mut Account| { &mut m.str4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "str5",
                    |m: &Account| { &m.str5 },
                    |m: &mut Account| { &mut m.str5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "int1",
                    |m: &Account| { &m.int1 },
                    |m: &mut Account| { &mut m.int1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "int2",
                    |m: &Account| { &m.int2 },
                    |m: &mut Account| { &mut m.int2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "int3",
                    |m: &Account| { &m.int3 },
                    |m: &mut Account| { &mut m.int3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "int4",
                    |m: &Account| { &m.int4 },
                    |m: &mut Account| { &mut m.int4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "int5",
                    |m: &Account| { &m.int5 },
                    |m: &mut Account| { &mut m.int5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "float1",
                    |m: &Account| { &m.float1 },
                    |m: &mut Account| { &mut m.float1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "float2",
                    |m: &Account| { &m.float2 },
                    |m: &mut Account| { &mut m.float2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "float3",
                    |m: &Account| { &m.float3 },
                    |m: &mut Account| { &mut m.float3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "float4",
                    |m: &Account| { &m.float4 },
                    |m: &mut Account| { &mut m.float4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "float5",
                    |m: &Account| { &m.float5 },
                    |m: &mut Account| { &mut m.float5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "b1",
                    |m: &Account| { &m.b1 },
                    |m: &mut Account| { &mut m.b1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "b2",
                    |m: &Account| { &m.b2 },
                    |m: &mut Account| { &mut m.b2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "b3",
                    |m: &Account| { &m.b3 },
                    |m: &mut Account| { &mut m.b3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "b4",
                    |m: &Account| { &m.b4 },
                    |m: &mut Account| { &mut m.b4 },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Account>(
                    "Account",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Account {
        static mut instance: ::protobuf::lazy::Lazy<Account> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Account::new)
        }
    }
}

impl ::protobuf::Clear for Account {
    fn clear(&mut self) {
        self.acc_id.clear();
        self.cust_id.clear();
        self.prod_code.clear();
        self.cust_type.clear();
        self.int_rate = 0.;
        self.currency.clear();
        self.cust_basel_val_code.clear();
        self.div.clear();
        self.nat_of_bus.clear();
        self.txt_desc.clear();
        self.sme_class.clear();
        self.str1.clear();
        self.str2.clear();
        self.str3.clear();
        self.str4.clear();
        self.str5.clear();
        self.int1 = 0;
        self.int2 = 0;
        self.int3 = 0;
        self.int4 = 0;
        self.int5 = 0;
        self.float1 = 0.;
        self.float2 = 0.;
        self.float3 = 0.;
        self.float4 = 0.;
        self.float5 = 0.;
        self.b1 = 0.;
        self.b2 = 0.;
        self.b3 = 0.;
        self.b4 = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13cf_t1_mat_adv.proto\"\xc1\x05\n\x07Account\x12\x15\n\x06acc_id\x18\
    \x01\x20\x01(\tR\x05accId\x12\x17\n\x07cust_id\x18\x02\x20\x01(\tR\x06cu\
    stId\x12\x1b\n\tprod_code\x18\x03\x20\x01(\tR\x08prodCode\x12\x1b\n\tcus\
    t_type\x18\x04\x20\x01(\tR\x08custType\x12\x19\n\x08int_rate\x18\x05\x20\
    \x01(\x01R\x07intRate\x12\x1a\n\x08currency\x18\x06\x20\x01(\tR\x08curre\
    ncy\x12-\n\x13cust_basel_val_code\x18\x07\x20\x01(\tR\x10custBaselValCod\
    e\x12\x10\n\x03div\x18\x08\x20\x01(\tR\x03div\x12\x1c\n\nnat_of_bus\x18\
    \t\x20\x01(\tR\x08natOfBus\x12\x19\n\x08txt_desc\x18\n\x20\x01(\tR\x07tx\
    tDesc\x12\x1b\n\tsme_class\x18\x0b\x20\x01(\tR\x08smeClass\x12\x12\n\x04\
    str1\x18\x0c\x20\x01(\tR\x04str1\x12\x12\n\x04str2\x18\r\x20\x01(\tR\x04\
    str2\x12\x12\n\x04str3\x18\x0e\x20\x01(\tR\x04str3\x12\x12\n\x04str4\x18\
    \x0f\x20\x01(\tR\x04str4\x12\x12\n\x04str5\x18\x10\x20\x01(\tR\x04str5\
    \x12\x12\n\x04int1\x18\x11\x20\x01(\x03R\x04int1\x12\x12\n\x04int2\x18\
    \x12\x20\x01(\x03R\x04int2\x12\x12\n\x04int3\x18\x13\x20\x01(\x03R\x04in\
    t3\x12\x12\n\x04int4\x18\x14\x20\x01(\x03R\x04int4\x12\x12\n\x04int5\x18\
    \x15\x20\x01(\x03R\x04int5\x12\x16\n\x06float1\x18\x16\x20\x01(\x01R\x06\
    float1\x12\x16\n\x06float2\x18\x17\x20\x01(\x01R\x06float2\x12\x16\n\x06\
    float3\x18\x18\x20\x01(\x01R\x06float3\x12\x16\n\x06float4\x18\x19\x20\
    \x01(\x01R\x06float4\x12\x16\n\x06float5\x18\x1a\x20\x01(\x01R\x06float5\
    \x12\x0e\n\x02b1\x18\x1b\x20\x01(\x01R\x02b1\x12\x0e\n\x02b2\x18\x1c\x20\
    \x01(\x01R\x02b2\x12\x0e\n\x02b3\x18\x1d\x20\x01(\x01R\x02b3\x12\x0e\n\
    \x02b4\x18\x1e\x20\x01(\x01R\x02b4b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
