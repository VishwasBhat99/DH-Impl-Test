// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub account_id: ::std::string::String,
    pub currency: ::std::string::String,
    pub int_rate: f64,
    pub outstanding_bal: f64,
    pub gl: ::std::string::String,
    pub start_date: i64,
    pub maturity_date: i64,
    pub rate_flag: ::std::string::String,
    pub branch: ::std::string::String,
    pub customer_id: ::std::string::String,
    pub customer_type: ::std::string::String,
    pub product_code: ::std::string::String,
    pub group: ::std::string::String,
    pub acc_branch: ::std::string::String,
    pub acc_number: ::std::string::String,
    pub acc_suffix: ::std::string::String,
    pub acc_type: ::std::string::String,
    pub deal_type: ::std::string::String,
    pub repricing_frequency: ::std::string::String,
    pub last_repr_date: i64,
    pub next_repr_date: i64,
    pub int_compounding_frequency: i64,
    pub int_repayment_frequency: i64,
    pub margin_rate: ::std::string::String,
    pub cpas: ::std::string::String,
    pub cust_constitution_code: ::std::string::String,
    pub customer_rating: ::std::string::String,
    pub p2: ::std::string::String,
    pub analysis_code: ::std::string::String,
    pub sundry_analysis_code: ::std::string::String,
    pub numeric_analysis_code: ::std::string::String,
    pub base_rate_code: ::std::string::String,
    pub differential_rate_code: ::std::string::String,
    pub accrued_int_amt: f64,
    pub next_rollover_date: i64,
    pub interest_computation_type: ::std::string::String,
    pub rm: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub monthly_avg_bal: f64,
    pub pension_acc_flag: ::std::string::String,
    pub waiver_flag: ::std::string::String,
    pub aorl: ::std::string::String,
    pub rl1: i32,
    pub rl2: i32,
    pub rl3: i32,
    pub A1: f64,
    pub A2: f64,
    pub A3: f64,
    pub A4: f64,
    pub A5: f64,
    pub A6: i64,
    pub A7: i64,
    pub A8: i64,
    pub A9: i64,
    pub A10: i64,
    pub A11: ::std::string::String,
    pub A12: ::std::string::String,
    pub A13: ::std::string::String,
    pub A14: ::std::string::String,
    pub A15: ::std::string::String,
    pub A16: ::std::string::String,
    pub A17: ::std::string::String,
    pub A18: ::std::string::String,
    pub A19: ::std::string::String,
    pub A20: ::std::string::String,
    pub total_interest_amount: f64,
    pub total_principal_amount: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string account_id = 1;


    pub fn get_account_id(&self) -> &str {
        &self.account_id
    }
    pub fn clear_account_id(&mut self) {
        self.account_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: ::std::string::String) {
        self.account_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_id(&mut self) -> &mut ::std::string::String {
        &mut self.account_id
    }

    // Take field
    pub fn take_account_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_id, ::std::string::String::new())
    }

    // string currency = 2;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // double int_rate = 3;


    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }
    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    // double outstanding_bal = 4;


    pub fn get_outstanding_bal(&self) -> f64 {
        self.outstanding_bal
    }
    pub fn clear_outstanding_bal(&mut self) {
        self.outstanding_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_outstanding_bal(&mut self, v: f64) {
        self.outstanding_bal = v;
    }

    // string gl = 5;


    pub fn get_gl(&self) -> &str {
        &self.gl
    }
    pub fn clear_gl(&mut self) {
        self.gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl(&mut self, v: ::std::string::String) {
        self.gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl(&mut self) -> &mut ::std::string::String {
        &mut self.gl
    }

    // Take field
    pub fn take_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl, ::std::string::String::new())
    }

    // int64 start_date = 6;


    pub fn get_start_date(&self) -> i64 {
        self.start_date
    }
    pub fn clear_start_date(&mut self) {
        self.start_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_date(&mut self, v: i64) {
        self.start_date = v;
    }

    // int64 maturity_date = 7;


    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }
    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    // string rate_flag = 8;


    pub fn get_rate_flag(&self) -> &str {
        &self.rate_flag
    }
    pub fn clear_rate_flag(&mut self) {
        self.rate_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_flag(&mut self, v: ::std::string::String) {
        self.rate_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_flag(&mut self) -> &mut ::std::string::String {
        &mut self.rate_flag
    }

    // Take field
    pub fn take_rate_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_flag, ::std::string::String::new())
    }

    // string branch = 9;


    pub fn get_branch(&self) -> &str {
        &self.branch
    }
    pub fn clear_branch(&mut self) {
        self.branch.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch(&mut self, v: ::std::string::String) {
        self.branch = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch(&mut self) -> &mut ::std::string::String {
        &mut self.branch
    }

    // Take field
    pub fn take_branch(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch, ::std::string::String::new())
    }

    // string customer_id = 10;


    pub fn get_customer_id(&self) -> &str {
        &self.customer_id
    }
    pub fn clear_customer_id(&mut self) {
        self.customer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_id(&mut self, v: ::std::string::String) {
        self.customer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_id(&mut self) -> &mut ::std::string::String {
        &mut self.customer_id
    }

    // Take field
    pub fn take_customer_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_id, ::std::string::String::new())
    }

    // string customer_type = 11;


    pub fn get_customer_type(&self) -> &str {
        &self.customer_type
    }
    pub fn clear_customer_type(&mut self) {
        self.customer_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_type(&mut self, v: ::std::string::String) {
        self.customer_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_type(&mut self) -> &mut ::std::string::String {
        &mut self.customer_type
    }

    // Take field
    pub fn take_customer_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_type, ::std::string::String::new())
    }

    // string product_code = 12;


    pub fn get_product_code(&self) -> &str {
        &self.product_code
    }
    pub fn clear_product_code(&mut self) {
        self.product_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_code(&mut self, v: ::std::string::String) {
        self.product_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_code(&mut self) -> &mut ::std::string::String {
        &mut self.product_code
    }

    // Take field
    pub fn take_product_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_code, ::std::string::String::new())
    }

    // string group = 13;


    pub fn get_group(&self) -> &str {
        &self.group
    }
    pub fn clear_group(&mut self) {
        self.group.clear();
    }

    // Param is passed by value, moved
    pub fn set_group(&mut self, v: ::std::string::String) {
        self.group = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group(&mut self) -> &mut ::std::string::String {
        &mut self.group
    }

    // Take field
    pub fn take_group(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group, ::std::string::String::new())
    }

    // string acc_branch = 14;


    pub fn get_acc_branch(&self) -> &str {
        &self.acc_branch
    }
    pub fn clear_acc_branch(&mut self) {
        self.acc_branch.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_branch(&mut self, v: ::std::string::String) {
        self.acc_branch = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_branch(&mut self) -> &mut ::std::string::String {
        &mut self.acc_branch
    }

    // Take field
    pub fn take_acc_branch(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_branch, ::std::string::String::new())
    }

    // string acc_number = 15;


    pub fn get_acc_number(&self) -> &str {
        &self.acc_number
    }
    pub fn clear_acc_number(&mut self) {
        self.acc_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_number(&mut self, v: ::std::string::String) {
        self.acc_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_number(&mut self) -> &mut ::std::string::String {
        &mut self.acc_number
    }

    // Take field
    pub fn take_acc_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_number, ::std::string::String::new())
    }

    // string acc_suffix = 16;


    pub fn get_acc_suffix(&self) -> &str {
        &self.acc_suffix
    }
    pub fn clear_acc_suffix(&mut self) {
        self.acc_suffix.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_suffix(&mut self, v: ::std::string::String) {
        self.acc_suffix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_suffix(&mut self) -> &mut ::std::string::String {
        &mut self.acc_suffix
    }

    // Take field
    pub fn take_acc_suffix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_suffix, ::std::string::String::new())
    }

    // string acc_type = 17;


    pub fn get_acc_type(&self) -> &str {
        &self.acc_type
    }
    pub fn clear_acc_type(&mut self) {
        self.acc_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_type(&mut self, v: ::std::string::String) {
        self.acc_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_type(&mut self) -> &mut ::std::string::String {
        &mut self.acc_type
    }

    // Take field
    pub fn take_acc_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_type, ::std::string::String::new())
    }

    // string deal_type = 18;


    pub fn get_deal_type(&self) -> &str {
        &self.deal_type
    }
    pub fn clear_deal_type(&mut self) {
        self.deal_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_type(&mut self, v: ::std::string::String) {
        self.deal_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_type(&mut self) -> &mut ::std::string::String {
        &mut self.deal_type
    }

    // Take field
    pub fn take_deal_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_type, ::std::string::String::new())
    }

    // string repricing_frequency = 19;


    pub fn get_repricing_frequency(&self) -> &str {
        &self.repricing_frequency
    }
    pub fn clear_repricing_frequency(&mut self) {
        self.repricing_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_repricing_frequency(&mut self, v: ::std::string::String) {
        self.repricing_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repricing_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.repricing_frequency
    }

    // Take field
    pub fn take_repricing_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.repricing_frequency, ::std::string::String::new())
    }

    // int64 last_repr_date = 20;


    pub fn get_last_repr_date(&self) -> i64 {
        self.last_repr_date
    }
    pub fn clear_last_repr_date(&mut self) {
        self.last_repr_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_repr_date(&mut self, v: i64) {
        self.last_repr_date = v;
    }

    // int64 next_repr_date = 21;


    pub fn get_next_repr_date(&self) -> i64 {
        self.next_repr_date
    }
    pub fn clear_next_repr_date(&mut self) {
        self.next_repr_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_repr_date(&mut self, v: i64) {
        self.next_repr_date = v;
    }

    // int64 int_compounding_frequency = 22;


    pub fn get_int_compounding_frequency(&self) -> i64 {
        self.int_compounding_frequency
    }
    pub fn clear_int_compounding_frequency(&mut self) {
        self.int_compounding_frequency = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_compounding_frequency(&mut self, v: i64) {
        self.int_compounding_frequency = v;
    }

    // int64 int_repayment_frequency = 23;


    pub fn get_int_repayment_frequency(&self) -> i64 {
        self.int_repayment_frequency
    }
    pub fn clear_int_repayment_frequency(&mut self) {
        self.int_repayment_frequency = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_repayment_frequency(&mut self, v: i64) {
        self.int_repayment_frequency = v;
    }

    // string margin_rate = 24;


    pub fn get_margin_rate(&self) -> &str {
        &self.margin_rate
    }
    pub fn clear_margin_rate(&mut self) {
        self.margin_rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_margin_rate(&mut self, v: ::std::string::String) {
        self.margin_rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_margin_rate(&mut self) -> &mut ::std::string::String {
        &mut self.margin_rate
    }

    // Take field
    pub fn take_margin_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.margin_rate, ::std::string::String::new())
    }

    // string cpas = 25;


    pub fn get_cpas(&self) -> &str {
        &self.cpas
    }
    pub fn clear_cpas(&mut self) {
        self.cpas.clear();
    }

    // Param is passed by value, moved
    pub fn set_cpas(&mut self, v: ::std::string::String) {
        self.cpas = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cpas(&mut self) -> &mut ::std::string::String {
        &mut self.cpas
    }

    // Take field
    pub fn take_cpas(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cpas, ::std::string::String::new())
    }

    // string cust_constitution_code = 26;


    pub fn get_cust_constitution_code(&self) -> &str {
        &self.cust_constitution_code
    }
    pub fn clear_cust_constitution_code(&mut self) {
        self.cust_constitution_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_constitution_code(&mut self, v: ::std::string::String) {
        self.cust_constitution_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_constitution_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_constitution_code
    }

    // Take field
    pub fn take_cust_constitution_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_constitution_code, ::std::string::String::new())
    }

    // string customer_rating = 27;


    pub fn get_customer_rating(&self) -> &str {
        &self.customer_rating
    }
    pub fn clear_customer_rating(&mut self) {
        self.customer_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_rating(&mut self, v: ::std::string::String) {
        self.customer_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_rating(&mut self) -> &mut ::std::string::String {
        &mut self.customer_rating
    }

    // Take field
    pub fn take_customer_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_rating, ::std::string::String::new())
    }

    // string p2 = 28;


    pub fn get_p2(&self) -> &str {
        &self.p2
    }
    pub fn clear_p2(&mut self) {
        self.p2.clear();
    }

    // Param is passed by value, moved
    pub fn set_p2(&mut self, v: ::std::string::String) {
        self.p2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p2(&mut self) -> &mut ::std::string::String {
        &mut self.p2
    }

    // Take field
    pub fn take_p2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.p2, ::std::string::String::new())
    }

    // string analysis_code = 29;


    pub fn get_analysis_code(&self) -> &str {
        &self.analysis_code
    }
    pub fn clear_analysis_code(&mut self) {
        self.analysis_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_analysis_code(&mut self, v: ::std::string::String) {
        self.analysis_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_analysis_code(&mut self) -> &mut ::std::string::String {
        &mut self.analysis_code
    }

    // Take field
    pub fn take_analysis_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.analysis_code, ::std::string::String::new())
    }

    // string sundry_analysis_code = 30;


    pub fn get_sundry_analysis_code(&self) -> &str {
        &self.sundry_analysis_code
    }
    pub fn clear_sundry_analysis_code(&mut self) {
        self.sundry_analysis_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_sundry_analysis_code(&mut self, v: ::std::string::String) {
        self.sundry_analysis_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sundry_analysis_code(&mut self) -> &mut ::std::string::String {
        &mut self.sundry_analysis_code
    }

    // Take field
    pub fn take_sundry_analysis_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sundry_analysis_code, ::std::string::String::new())
    }

    // string numeric_analysis_code = 31;


    pub fn get_numeric_analysis_code(&self) -> &str {
        &self.numeric_analysis_code
    }
    pub fn clear_numeric_analysis_code(&mut self) {
        self.numeric_analysis_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_numeric_analysis_code(&mut self, v: ::std::string::String) {
        self.numeric_analysis_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_numeric_analysis_code(&mut self) -> &mut ::std::string::String {
        &mut self.numeric_analysis_code
    }

    // Take field
    pub fn take_numeric_analysis_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.numeric_analysis_code, ::std::string::String::new())
    }

    // string base_rate_code = 32;


    pub fn get_base_rate_code(&self) -> &str {
        &self.base_rate_code
    }
    pub fn clear_base_rate_code(&mut self) {
        self.base_rate_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_rate_code(&mut self, v: ::std::string::String) {
        self.base_rate_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_rate_code(&mut self) -> &mut ::std::string::String {
        &mut self.base_rate_code
    }

    // Take field
    pub fn take_base_rate_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base_rate_code, ::std::string::String::new())
    }

    // string differential_rate_code = 33;


    pub fn get_differential_rate_code(&self) -> &str {
        &self.differential_rate_code
    }
    pub fn clear_differential_rate_code(&mut self) {
        self.differential_rate_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_differential_rate_code(&mut self, v: ::std::string::String) {
        self.differential_rate_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_differential_rate_code(&mut self) -> &mut ::std::string::String {
        &mut self.differential_rate_code
    }

    // Take field
    pub fn take_differential_rate_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.differential_rate_code, ::std::string::String::new())
    }

    // double accrued_int_amt = 34;


    pub fn get_accrued_int_amt(&self) -> f64 {
        self.accrued_int_amt
    }
    pub fn clear_accrued_int_amt(&mut self) {
        self.accrued_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accrued_int_amt(&mut self, v: f64) {
        self.accrued_int_amt = v;
    }

    // int64 next_rollover_date = 35;


    pub fn get_next_rollover_date(&self) -> i64 {
        self.next_rollover_date
    }
    pub fn clear_next_rollover_date(&mut self) {
        self.next_rollover_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_rollover_date(&mut self, v: i64) {
        self.next_rollover_date = v;
    }

    // string interest_computation_type = 36;


    pub fn get_interest_computation_type(&self) -> &str {
        &self.interest_computation_type
    }
    pub fn clear_interest_computation_type(&mut self) {
        self.interest_computation_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_interest_computation_type(&mut self, v: ::std::string::String) {
        self.interest_computation_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interest_computation_type(&mut self) -> &mut ::std::string::String {
        &mut self.interest_computation_type
    }

    // Take field
    pub fn take_interest_computation_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interest_computation_type, ::std::string::String::new())
    }

    // string rm = 37;


    pub fn get_rm(&self) -> &str {
        &self.rm
    }
    pub fn clear_rm(&mut self) {
        self.rm.clear();
    }

    // Param is passed by value, moved
    pub fn set_rm(&mut self, v: ::std::string::String) {
        self.rm = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rm(&mut self) -> &mut ::std::string::String {
        &mut self.rm
    }

    // Take field
    pub fn take_rm(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rm, ::std::string::String::new())
    }

    // string customer_name = 38;


    pub fn get_customer_name(&self) -> &str {
        &self.customer_name
    }
    pub fn clear_customer_name(&mut self) {
        self.customer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_name(&mut self, v: ::std::string::String) {
        self.customer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_name(&mut self) -> &mut ::std::string::String {
        &mut self.customer_name
    }

    // Take field
    pub fn take_customer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_name, ::std::string::String::new())
    }

    // double monthly_avg_bal = 39;


    pub fn get_monthly_avg_bal(&self) -> f64 {
        self.monthly_avg_bal
    }
    pub fn clear_monthly_avg_bal(&mut self) {
        self.monthly_avg_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_monthly_avg_bal(&mut self, v: f64) {
        self.monthly_avg_bal = v;
    }

    // string pension_acc_flag = 40;


    pub fn get_pension_acc_flag(&self) -> &str {
        &self.pension_acc_flag
    }
    pub fn clear_pension_acc_flag(&mut self) {
        self.pension_acc_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_pension_acc_flag(&mut self, v: ::std::string::String) {
        self.pension_acc_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pension_acc_flag(&mut self) -> &mut ::std::string::String {
        &mut self.pension_acc_flag
    }

    // Take field
    pub fn take_pension_acc_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pension_acc_flag, ::std::string::String::new())
    }

    // string waiver_flag = 41;


    pub fn get_waiver_flag(&self) -> &str {
        &self.waiver_flag
    }
    pub fn clear_waiver_flag(&mut self) {
        self.waiver_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_waiver_flag(&mut self, v: ::std::string::String) {
        self.waiver_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_waiver_flag(&mut self) -> &mut ::std::string::String {
        &mut self.waiver_flag
    }

    // Take field
    pub fn take_waiver_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.waiver_flag, ::std::string::String::new())
    }

    // string aorl = 42;


    pub fn get_aorl(&self) -> &str {
        &self.aorl
    }
    pub fn clear_aorl(&mut self) {
        self.aorl.clear();
    }

    // Param is passed by value, moved
    pub fn set_aorl(&mut self, v: ::std::string::String) {
        self.aorl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_aorl(&mut self) -> &mut ::std::string::String {
        &mut self.aorl
    }

    // Take field
    pub fn take_aorl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.aorl, ::std::string::String::new())
    }

    // int32 rl1 = 43;


    pub fn get_rl1(&self) -> i32 {
        self.rl1
    }
    pub fn clear_rl1(&mut self) {
        self.rl1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_rl1(&mut self, v: i32) {
        self.rl1 = v;
    }

    // int32 rl2 = 44;


    pub fn get_rl2(&self) -> i32 {
        self.rl2
    }
    pub fn clear_rl2(&mut self) {
        self.rl2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_rl2(&mut self, v: i32) {
        self.rl2 = v;
    }

    // int32 rl3 = 45;


    pub fn get_rl3(&self) -> i32 {
        self.rl3
    }
    pub fn clear_rl3(&mut self) {
        self.rl3 = 0;
    }

    // Param is passed by value, moved
    pub fn set_rl3(&mut self, v: i32) {
        self.rl3 = v;
    }

    // double A1 = 46;


    pub fn get_A1(&self) -> f64 {
        self.A1
    }
    pub fn clear_A1(&mut self) {
        self.A1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_A1(&mut self, v: f64) {
        self.A1 = v;
    }

    // double A2 = 47;


    pub fn get_A2(&self) -> f64 {
        self.A2
    }
    pub fn clear_A2(&mut self) {
        self.A2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_A2(&mut self, v: f64) {
        self.A2 = v;
    }

    // double A3 = 48;


    pub fn get_A3(&self) -> f64 {
        self.A3
    }
    pub fn clear_A3(&mut self) {
        self.A3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_A3(&mut self, v: f64) {
        self.A3 = v;
    }

    // double A4 = 49;


    pub fn get_A4(&self) -> f64 {
        self.A4
    }
    pub fn clear_A4(&mut self) {
        self.A4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_A4(&mut self, v: f64) {
        self.A4 = v;
    }

    // double A5 = 50;


    pub fn get_A5(&self) -> f64 {
        self.A5
    }
    pub fn clear_A5(&mut self) {
        self.A5 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_A5(&mut self, v: f64) {
        self.A5 = v;
    }

    // int64 A6 = 51;


    pub fn get_A6(&self) -> i64 {
        self.A6
    }
    pub fn clear_A6(&mut self) {
        self.A6 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A6(&mut self, v: i64) {
        self.A6 = v;
    }

    // int64 A7 = 52;


    pub fn get_A7(&self) -> i64 {
        self.A7
    }
    pub fn clear_A7(&mut self) {
        self.A7 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A7(&mut self, v: i64) {
        self.A7 = v;
    }

    // int64 A8 = 53;


    pub fn get_A8(&self) -> i64 {
        self.A8
    }
    pub fn clear_A8(&mut self) {
        self.A8 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A8(&mut self, v: i64) {
        self.A8 = v;
    }

    // int64 A9 = 54;


    pub fn get_A9(&self) -> i64 {
        self.A9
    }
    pub fn clear_A9(&mut self) {
        self.A9 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A9(&mut self, v: i64) {
        self.A9 = v;
    }

    // int64 A10 = 55;


    pub fn get_A10(&self) -> i64 {
        self.A10
    }
    pub fn clear_A10(&mut self) {
        self.A10 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A10(&mut self, v: i64) {
        self.A10 = v;
    }

    // string A11 = 56;


    pub fn get_A11(&self) -> &str {
        &self.A11
    }
    pub fn clear_A11(&mut self) {
        self.A11.clear();
    }

    // Param is passed by value, moved
    pub fn set_A11(&mut self, v: ::std::string::String) {
        self.A11 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A11(&mut self) -> &mut ::std::string::String {
        &mut self.A11
    }

    // Take field
    pub fn take_A11(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A11, ::std::string::String::new())
    }

    // string A12 = 57;


    pub fn get_A12(&self) -> &str {
        &self.A12
    }
    pub fn clear_A12(&mut self) {
        self.A12.clear();
    }

    // Param is passed by value, moved
    pub fn set_A12(&mut self, v: ::std::string::String) {
        self.A12 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A12(&mut self) -> &mut ::std::string::String {
        &mut self.A12
    }

    // Take field
    pub fn take_A12(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A12, ::std::string::String::new())
    }

    // string A13 = 58;


    pub fn get_A13(&self) -> &str {
        &self.A13
    }
    pub fn clear_A13(&mut self) {
        self.A13.clear();
    }

    // Param is passed by value, moved
    pub fn set_A13(&mut self, v: ::std::string::String) {
        self.A13 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A13(&mut self) -> &mut ::std::string::String {
        &mut self.A13
    }

    // Take field
    pub fn take_A13(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A13, ::std::string::String::new())
    }

    // string A14 = 59;


    pub fn get_A14(&self) -> &str {
        &self.A14
    }
    pub fn clear_A14(&mut self) {
        self.A14.clear();
    }

    // Param is passed by value, moved
    pub fn set_A14(&mut self, v: ::std::string::String) {
        self.A14 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A14(&mut self) -> &mut ::std::string::String {
        &mut self.A14
    }

    // Take field
    pub fn take_A14(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A14, ::std::string::String::new())
    }

    // string A15 = 60;


    pub fn get_A15(&self) -> &str {
        &self.A15
    }
    pub fn clear_A15(&mut self) {
        self.A15.clear();
    }

    // Param is passed by value, moved
    pub fn set_A15(&mut self, v: ::std::string::String) {
        self.A15 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A15(&mut self) -> &mut ::std::string::String {
        &mut self.A15
    }

    // Take field
    pub fn take_A15(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A15, ::std::string::String::new())
    }

    // string A16 = 61;


    pub fn get_A16(&self) -> &str {
        &self.A16
    }
    pub fn clear_A16(&mut self) {
        self.A16.clear();
    }

    // Param is passed by value, moved
    pub fn set_A16(&mut self, v: ::std::string::String) {
        self.A16 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A16(&mut self) -> &mut ::std::string::String {
        &mut self.A16
    }

    // Take field
    pub fn take_A16(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A16, ::std::string::String::new())
    }

    // string A17 = 62;


    pub fn get_A17(&self) -> &str {
        &self.A17
    }
    pub fn clear_A17(&mut self) {
        self.A17.clear();
    }

    // Param is passed by value, moved
    pub fn set_A17(&mut self, v: ::std::string::String) {
        self.A17 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A17(&mut self) -> &mut ::std::string::String {
        &mut self.A17
    }

    // Take field
    pub fn take_A17(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A17, ::std::string::String::new())
    }

    // string A18 = 63;


    pub fn get_A18(&self) -> &str {
        &self.A18
    }
    pub fn clear_A18(&mut self) {
        self.A18.clear();
    }

    // Param is passed by value, moved
    pub fn set_A18(&mut self, v: ::std::string::String) {
        self.A18 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A18(&mut self) -> &mut ::std::string::String {
        &mut self.A18
    }

    // Take field
    pub fn take_A18(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A18, ::std::string::String::new())
    }

    // string A19 = 64;


    pub fn get_A19(&self) -> &str {
        &self.A19
    }
    pub fn clear_A19(&mut self) {
        self.A19.clear();
    }

    // Param is passed by value, moved
    pub fn set_A19(&mut self, v: ::std::string::String) {
        self.A19 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A19(&mut self) -> &mut ::std::string::String {
        &mut self.A19
    }

    // Take field
    pub fn take_A19(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A19, ::std::string::String::new())
    }

    // string A20 = 65;


    pub fn get_A20(&self) -> &str {
        &self.A20
    }
    pub fn clear_A20(&mut self) {
        self.A20.clear();
    }

    // Param is passed by value, moved
    pub fn set_A20(&mut self, v: ::std::string::String) {
        self.A20 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A20(&mut self) -> &mut ::std::string::String {
        &mut self.A20
    }

    // Take field
    pub fn take_A20(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A20, ::std::string::String::new())
    }

    // double total_interest_amount = 66;


    pub fn get_total_interest_amount(&self) -> f64 {
        self.total_interest_amount
    }
    pub fn clear_total_interest_amount(&mut self) {
        self.total_interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_amount(&mut self, v: f64) {
        self.total_interest_amount = v;
    }

    // double total_principal_amount = 67;


    pub fn get_total_principal_amount(&self) -> f64 {
        self.total_principal_amount
    }
    pub fn clear_total_principal_amount(&mut self) {
        self.total_principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_principal_amount(&mut self, v: f64) {
        self.total_principal_amount = v;
    }

    // repeated .Cashflow cashflows = 68;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.outstanding_bal = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.start_date = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_flag)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_id)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_type)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product_code)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_branch)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_number)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_suffix)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_type)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_type)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.repricing_frequency)?;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_repr_date = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_repr_date = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int_compounding_frequency = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int_repayment_frequency = tmp;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.margin_rate)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cpas)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_constitution_code)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_rating)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.p2)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.analysis_code)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sundry_analysis_code)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.numeric_analysis_code)?;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base_rate_code)?;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.differential_rate_code)?;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.accrued_int_amt = tmp;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_rollover_date = tmp;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interest_computation_type)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rm)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_name)?;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.monthly_avg_bal = tmp;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pension_acc_flag)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.waiver_flag)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.aorl)?;
                },
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rl1 = tmp;
                },
                44 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rl2 = tmp;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rl3 = tmp;
                },
                46 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.A1 = tmp;
                },
                47 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.A2 = tmp;
                },
                48 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.A3 = tmp;
                },
                49 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.A4 = tmp;
                },
                50 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.A5 = tmp;
                },
                51 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A6 = tmp;
                },
                52 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A7 = tmp;
                },
                53 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A8 = tmp;
                },
                54 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A9 = tmp;
                },
                55 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A10 = tmp;
                },
                56 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A11)?;
                },
                57 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A12)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A13)?;
                },
                59 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A14)?;
                },
                60 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A15)?;
                },
                61 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A16)?;
                },
                62 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A17)?;
                },
                63 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A18)?;
                },
                64 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A19)?;
                },
                65 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A20)?;
                },
                66 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_amount = tmp;
                },
                67 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_principal_amount = tmp;
                },
                68 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.account_id);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.currency);
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if self.outstanding_bal != 0. {
            my_size += 9;
        }
        if !self.gl.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.gl);
        }
        if self.start_date != 0 {
            my_size += ::protobuf::rt::value_size(6, self.start_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(7, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.rate_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.rate_flag);
        }
        if !self.branch.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.branch);
        }
        if !self.customer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.customer_id);
        }
        if !self.customer_type.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.customer_type);
        }
        if !self.product_code.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.product_code);
        }
        if !self.group.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.group);
        }
        if !self.acc_branch.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.acc_branch);
        }
        if !self.acc_number.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.acc_number);
        }
        if !self.acc_suffix.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.acc_suffix);
        }
        if !self.acc_type.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.acc_type);
        }
        if !self.deal_type.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.deal_type);
        }
        if !self.repricing_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.repricing_frequency);
        }
        if self.last_repr_date != 0 {
            my_size += ::protobuf::rt::value_size(20, self.last_repr_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_repr_date != 0 {
            my_size += ::protobuf::rt::value_size(21, self.next_repr_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_compounding_frequency != 0 {
            my_size += ::protobuf::rt::value_size(22, self.int_compounding_frequency, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_repayment_frequency != 0 {
            my_size += ::protobuf::rt::value_size(23, self.int_repayment_frequency, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.margin_rate.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.margin_rate);
        }
        if !self.cpas.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.cpas);
        }
        if !self.cust_constitution_code.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.cust_constitution_code);
        }
        if !self.customer_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.customer_rating);
        }
        if !self.p2.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.p2);
        }
        if !self.analysis_code.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.analysis_code);
        }
        if !self.sundry_analysis_code.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.sundry_analysis_code);
        }
        if !self.numeric_analysis_code.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.numeric_analysis_code);
        }
        if !self.base_rate_code.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.base_rate_code);
        }
        if !self.differential_rate_code.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.differential_rate_code);
        }
        if self.accrued_int_amt != 0. {
            my_size += 10;
        }
        if self.next_rollover_date != 0 {
            my_size += ::protobuf::rt::value_size(35, self.next_rollover_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.interest_computation_type.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.interest_computation_type);
        }
        if !self.rm.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.rm);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.customer_name);
        }
        if self.monthly_avg_bal != 0. {
            my_size += 10;
        }
        if !self.pension_acc_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.pension_acc_flag);
        }
        if !self.waiver_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.waiver_flag);
        }
        if !self.aorl.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.aorl);
        }
        if self.rl1 != 0 {
            my_size += ::protobuf::rt::value_size(43, self.rl1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rl2 != 0 {
            my_size += ::protobuf::rt::value_size(44, self.rl2, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rl3 != 0 {
            my_size += ::protobuf::rt::value_size(45, self.rl3, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A1 != 0. {
            my_size += 10;
        }
        if self.A2 != 0. {
            my_size += 10;
        }
        if self.A3 != 0. {
            my_size += 10;
        }
        if self.A4 != 0. {
            my_size += 10;
        }
        if self.A5 != 0. {
            my_size += 10;
        }
        if self.A6 != 0 {
            my_size += ::protobuf::rt::value_size(51, self.A6, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A7 != 0 {
            my_size += ::protobuf::rt::value_size(52, self.A7, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A8 != 0 {
            my_size += ::protobuf::rt::value_size(53, self.A8, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A9 != 0 {
            my_size += ::protobuf::rt::value_size(54, self.A9, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A10 != 0 {
            my_size += ::protobuf::rt::value_size(55, self.A10, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.A11.is_empty() {
            my_size += ::protobuf::rt::string_size(56, &self.A11);
        }
        if !self.A12.is_empty() {
            my_size += ::protobuf::rt::string_size(57, &self.A12);
        }
        if !self.A13.is_empty() {
            my_size += ::protobuf::rt::string_size(58, &self.A13);
        }
        if !self.A14.is_empty() {
            my_size += ::protobuf::rt::string_size(59, &self.A14);
        }
        if !self.A15.is_empty() {
            my_size += ::protobuf::rt::string_size(60, &self.A15);
        }
        if !self.A16.is_empty() {
            my_size += ::protobuf::rt::string_size(61, &self.A16);
        }
        if !self.A17.is_empty() {
            my_size += ::protobuf::rt::string_size(62, &self.A17);
        }
        if !self.A18.is_empty() {
            my_size += ::protobuf::rt::string_size(63, &self.A18);
        }
        if !self.A19.is_empty() {
            my_size += ::protobuf::rt::string_size(64, &self.A19);
        }
        if !self.A20.is_empty() {
            my_size += ::protobuf::rt::string_size(65, &self.A20);
        }
        if self.total_interest_amount != 0. {
            my_size += 10;
        }
        if self.total_principal_amount != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.account_id.is_empty() {
            os.write_string(1, &self.account_id)?;
        }
        if !self.currency.is_empty() {
            os.write_string(2, &self.currency)?;
        }
        if self.int_rate != 0. {
            os.write_double(3, self.int_rate)?;
        }
        if self.outstanding_bal != 0. {
            os.write_double(4, self.outstanding_bal)?;
        }
        if !self.gl.is_empty() {
            os.write_string(5, &self.gl)?;
        }
        if self.start_date != 0 {
            os.write_int64(6, self.start_date)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(7, self.maturity_date)?;
        }
        if !self.rate_flag.is_empty() {
            os.write_string(8, &self.rate_flag)?;
        }
        if !self.branch.is_empty() {
            os.write_string(9, &self.branch)?;
        }
        if !self.customer_id.is_empty() {
            os.write_string(10, &self.customer_id)?;
        }
        if !self.customer_type.is_empty() {
            os.write_string(11, &self.customer_type)?;
        }
        if !self.product_code.is_empty() {
            os.write_string(12, &self.product_code)?;
        }
        if !self.group.is_empty() {
            os.write_string(13, &self.group)?;
        }
        if !self.acc_branch.is_empty() {
            os.write_string(14, &self.acc_branch)?;
        }
        if !self.acc_number.is_empty() {
            os.write_string(15, &self.acc_number)?;
        }
        if !self.acc_suffix.is_empty() {
            os.write_string(16, &self.acc_suffix)?;
        }
        if !self.acc_type.is_empty() {
            os.write_string(17, &self.acc_type)?;
        }
        if !self.deal_type.is_empty() {
            os.write_string(18, &self.deal_type)?;
        }
        if !self.repricing_frequency.is_empty() {
            os.write_string(19, &self.repricing_frequency)?;
        }
        if self.last_repr_date != 0 {
            os.write_int64(20, self.last_repr_date)?;
        }
        if self.next_repr_date != 0 {
            os.write_int64(21, self.next_repr_date)?;
        }
        if self.int_compounding_frequency != 0 {
            os.write_int64(22, self.int_compounding_frequency)?;
        }
        if self.int_repayment_frequency != 0 {
            os.write_int64(23, self.int_repayment_frequency)?;
        }
        if !self.margin_rate.is_empty() {
            os.write_string(24, &self.margin_rate)?;
        }
        if !self.cpas.is_empty() {
            os.write_string(25, &self.cpas)?;
        }
        if !self.cust_constitution_code.is_empty() {
            os.write_string(26, &self.cust_constitution_code)?;
        }
        if !self.customer_rating.is_empty() {
            os.write_string(27, &self.customer_rating)?;
        }
        if !self.p2.is_empty() {
            os.write_string(28, &self.p2)?;
        }
        if !self.analysis_code.is_empty() {
            os.write_string(29, &self.analysis_code)?;
        }
        if !self.sundry_analysis_code.is_empty() {
            os.write_string(30, &self.sundry_analysis_code)?;
        }
        if !self.numeric_analysis_code.is_empty() {
            os.write_string(31, &self.numeric_analysis_code)?;
        }
        if !self.base_rate_code.is_empty() {
            os.write_string(32, &self.base_rate_code)?;
        }
        if !self.differential_rate_code.is_empty() {
            os.write_string(33, &self.differential_rate_code)?;
        }
        if self.accrued_int_amt != 0. {
            os.write_double(34, self.accrued_int_amt)?;
        }
        if self.next_rollover_date != 0 {
            os.write_int64(35, self.next_rollover_date)?;
        }
        if !self.interest_computation_type.is_empty() {
            os.write_string(36, &self.interest_computation_type)?;
        }
        if !self.rm.is_empty() {
            os.write_string(37, &self.rm)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(38, &self.customer_name)?;
        }
        if self.monthly_avg_bal != 0. {
            os.write_double(39, self.monthly_avg_bal)?;
        }
        if !self.pension_acc_flag.is_empty() {
            os.write_string(40, &self.pension_acc_flag)?;
        }
        if !self.waiver_flag.is_empty() {
            os.write_string(41, &self.waiver_flag)?;
        }
        if !self.aorl.is_empty() {
            os.write_string(42, &self.aorl)?;
        }
        if self.rl1 != 0 {
            os.write_int32(43, self.rl1)?;
        }
        if self.rl2 != 0 {
            os.write_int32(44, self.rl2)?;
        }
        if self.rl3 != 0 {
            os.write_int32(45, self.rl3)?;
        }
        if self.A1 != 0. {
            os.write_double(46, self.A1)?;
        }
        if self.A2 != 0. {
            os.write_double(47, self.A2)?;
        }
        if self.A3 != 0. {
            os.write_double(48, self.A3)?;
        }
        if self.A4 != 0. {
            os.write_double(49, self.A4)?;
        }
        if self.A5 != 0. {
            os.write_double(50, self.A5)?;
        }
        if self.A6 != 0 {
            os.write_int64(51, self.A6)?;
        }
        if self.A7 != 0 {
            os.write_int64(52, self.A7)?;
        }
        if self.A8 != 0 {
            os.write_int64(53, self.A8)?;
        }
        if self.A9 != 0 {
            os.write_int64(54, self.A9)?;
        }
        if self.A10 != 0 {
            os.write_int64(55, self.A10)?;
        }
        if !self.A11.is_empty() {
            os.write_string(56, &self.A11)?;
        }
        if !self.A12.is_empty() {
            os.write_string(57, &self.A12)?;
        }
        if !self.A13.is_empty() {
            os.write_string(58, &self.A13)?;
        }
        if !self.A14.is_empty() {
            os.write_string(59, &self.A14)?;
        }
        if !self.A15.is_empty() {
            os.write_string(60, &self.A15)?;
        }
        if !self.A16.is_empty() {
            os.write_string(61, &self.A16)?;
        }
        if !self.A17.is_empty() {
            os.write_string(62, &self.A17)?;
        }
        if !self.A18.is_empty() {
            os.write_string(63, &self.A18)?;
        }
        if !self.A19.is_empty() {
            os.write_string(64, &self.A19)?;
        }
        if !self.A20.is_empty() {
            os.write_string(65, &self.A20)?;
        }
        if self.total_interest_amount != 0. {
            os.write_double(66, self.total_interest_amount)?;
        }
        if self.total_principal_amount != 0. {
            os.write_double(67, self.total_principal_amount)?;
        }
        for v in &self.cashflows {
            os.write_tag(68, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_id",
                |m: &AccountWithCashflows| { &m.account_id },
                |m: &mut AccountWithCashflows| { &mut m.account_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &AccountWithCashflows| { &m.currency },
                |m: &mut AccountWithCashflows| { &mut m.currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_rate",
                |m: &AccountWithCashflows| { &m.int_rate },
                |m: &mut AccountWithCashflows| { &mut m.int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "outstanding_bal",
                |m: &AccountWithCashflows| { &m.outstanding_bal },
                |m: &mut AccountWithCashflows| { &mut m.outstanding_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl",
                |m: &AccountWithCashflows| { &m.gl },
                |m: &mut AccountWithCashflows| { &mut m.gl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "start_date",
                |m: &AccountWithCashflows| { &m.start_date },
                |m: &mut AccountWithCashflows| { &mut m.start_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "maturity_date",
                |m: &AccountWithCashflows| { &m.maturity_date },
                |m: &mut AccountWithCashflows| { &mut m.maturity_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rate_flag",
                |m: &AccountWithCashflows| { &m.rate_flag },
                |m: &mut AccountWithCashflows| { &mut m.rate_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "branch",
                |m: &AccountWithCashflows| { &m.branch },
                |m: &mut AccountWithCashflows| { &mut m.branch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_id",
                |m: &AccountWithCashflows| { &m.customer_id },
                |m: &mut AccountWithCashflows| { &mut m.customer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_type",
                |m: &AccountWithCashflows| { &m.customer_type },
                |m: &mut AccountWithCashflows| { &mut m.customer_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "product_code",
                |m: &AccountWithCashflows| { &m.product_code },
                |m: &mut AccountWithCashflows| { &mut m.product_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group",
                |m: &AccountWithCashflows| { &m.group },
                |m: &mut AccountWithCashflows| { &mut m.group },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acc_branch",
                |m: &AccountWithCashflows| { &m.acc_branch },
                |m: &mut AccountWithCashflows| { &mut m.acc_branch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acc_number",
                |m: &AccountWithCashflows| { &m.acc_number },
                |m: &mut AccountWithCashflows| { &mut m.acc_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acc_suffix",
                |m: &AccountWithCashflows| { &m.acc_suffix },
                |m: &mut AccountWithCashflows| { &mut m.acc_suffix },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acc_type",
                |m: &AccountWithCashflows| { &m.acc_type },
                |m: &mut AccountWithCashflows| { &mut m.acc_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "deal_type",
                |m: &AccountWithCashflows| { &m.deal_type },
                |m: &mut AccountWithCashflows| { &mut m.deal_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "repricing_frequency",
                |m: &AccountWithCashflows| { &m.repricing_frequency },
                |m: &mut AccountWithCashflows| { &mut m.repricing_frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_repr_date",
                |m: &AccountWithCashflows| { &m.last_repr_date },
                |m: &mut AccountWithCashflows| { &mut m.last_repr_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_repr_date",
                |m: &AccountWithCashflows| { &m.next_repr_date },
                |m: &mut AccountWithCashflows| { &mut m.next_repr_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "int_compounding_frequency",
                |m: &AccountWithCashflows| { &m.int_compounding_frequency },
                |m: &mut AccountWithCashflows| { &mut m.int_compounding_frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "int_repayment_frequency",
                |m: &AccountWithCashflows| { &m.int_repayment_frequency },
                |m: &mut AccountWithCashflows| { &mut m.int_repayment_frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "margin_rate",
                |m: &AccountWithCashflows| { &m.margin_rate },
                |m: &mut AccountWithCashflows| { &mut m.margin_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cpas",
                |m: &AccountWithCashflows| { &m.cpas },
                |m: &mut AccountWithCashflows| { &mut m.cpas },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_constitution_code",
                |m: &AccountWithCashflows| { &m.cust_constitution_code },
                |m: &mut AccountWithCashflows| { &mut m.cust_constitution_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_rating",
                |m: &AccountWithCashflows| { &m.customer_rating },
                |m: &mut AccountWithCashflows| { &mut m.customer_rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "p2",
                |m: &AccountWithCashflows| { &m.p2 },
                |m: &mut AccountWithCashflows| { &mut m.p2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "analysis_code",
                |m: &AccountWithCashflows| { &m.analysis_code },
                |m: &mut AccountWithCashflows| { &mut m.analysis_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sundry_analysis_code",
                |m: &AccountWithCashflows| { &m.sundry_analysis_code },
                |m: &mut AccountWithCashflows| { &mut m.sundry_analysis_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "numeric_analysis_code",
                |m: &AccountWithCashflows| { &m.numeric_analysis_code },
                |m: &mut AccountWithCashflows| { &mut m.numeric_analysis_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "base_rate_code",
                |m: &AccountWithCashflows| { &m.base_rate_code },
                |m: &mut AccountWithCashflows| { &mut m.base_rate_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "differential_rate_code",
                |m: &AccountWithCashflows| { &m.differential_rate_code },
                |m: &mut AccountWithCashflows| { &mut m.differential_rate_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "accrued_int_amt",
                |m: &AccountWithCashflows| { &m.accrued_int_amt },
                |m: &mut AccountWithCashflows| { &mut m.accrued_int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_rollover_date",
                |m: &AccountWithCashflows| { &m.next_rollover_date },
                |m: &mut AccountWithCashflows| { &mut m.next_rollover_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "interest_computation_type",
                |m: &AccountWithCashflows| { &m.interest_computation_type },
                |m: &mut AccountWithCashflows| { &mut m.interest_computation_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rm",
                |m: &AccountWithCashflows| { &m.rm },
                |m: &mut AccountWithCashflows| { &mut m.rm },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_name",
                |m: &AccountWithCashflows| { &m.customer_name },
                |m: &mut AccountWithCashflows| { &mut m.customer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "monthly_avg_bal",
                |m: &AccountWithCashflows| { &m.monthly_avg_bal },
                |m: &mut AccountWithCashflows| { &mut m.monthly_avg_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pension_acc_flag",
                |m: &AccountWithCashflows| { &m.pension_acc_flag },
                |m: &mut AccountWithCashflows| { &mut m.pension_acc_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "waiver_flag",
                |m: &AccountWithCashflows| { &m.waiver_flag },
                |m: &mut AccountWithCashflows| { &mut m.waiver_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "aorl",
                |m: &AccountWithCashflows| { &m.aorl },
                |m: &mut AccountWithCashflows| { &mut m.aorl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "rl1",
                |m: &AccountWithCashflows| { &m.rl1 },
                |m: &mut AccountWithCashflows| { &mut m.rl1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "rl2",
                |m: &AccountWithCashflows| { &m.rl2 },
                |m: &mut AccountWithCashflows| { &mut m.rl2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "rl3",
                |m: &AccountWithCashflows| { &m.rl3 },
                |m: &mut AccountWithCashflows| { &mut m.rl3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "A1",
                |m: &AccountWithCashflows| { &m.A1 },
                |m: &mut AccountWithCashflows| { &mut m.A1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "A2",
                |m: &AccountWithCashflows| { &m.A2 },
                |m: &mut AccountWithCashflows| { &mut m.A2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "A3",
                |m: &AccountWithCashflows| { &m.A3 },
                |m: &mut AccountWithCashflows| { &mut m.A3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "A4",
                |m: &AccountWithCashflows| { &m.A4 },
                |m: &mut AccountWithCashflows| { &mut m.A4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "A5",
                |m: &AccountWithCashflows| { &m.A5 },
                |m: &mut AccountWithCashflows| { &mut m.A5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A6",
                |m: &AccountWithCashflows| { &m.A6 },
                |m: &mut AccountWithCashflows| { &mut m.A6 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A7",
                |m: &AccountWithCashflows| { &m.A7 },
                |m: &mut AccountWithCashflows| { &mut m.A7 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A8",
                |m: &AccountWithCashflows| { &m.A8 },
                |m: &mut AccountWithCashflows| { &mut m.A8 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A9",
                |m: &AccountWithCashflows| { &m.A9 },
                |m: &mut AccountWithCashflows| { &mut m.A9 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A10",
                |m: &AccountWithCashflows| { &m.A10 },
                |m: &mut AccountWithCashflows| { &mut m.A10 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A11",
                |m: &AccountWithCashflows| { &m.A11 },
                |m: &mut AccountWithCashflows| { &mut m.A11 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A12",
                |m: &AccountWithCashflows| { &m.A12 },
                |m: &mut AccountWithCashflows| { &mut m.A12 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A13",
                |m: &AccountWithCashflows| { &m.A13 },
                |m: &mut AccountWithCashflows| { &mut m.A13 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A14",
                |m: &AccountWithCashflows| { &m.A14 },
                |m: &mut AccountWithCashflows| { &mut m.A14 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A15",
                |m: &AccountWithCashflows| { &m.A15 },
                |m: &mut AccountWithCashflows| { &mut m.A15 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A16",
                |m: &AccountWithCashflows| { &m.A16 },
                |m: &mut AccountWithCashflows| { &mut m.A16 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A17",
                |m: &AccountWithCashflows| { &m.A17 },
                |m: &mut AccountWithCashflows| { &mut m.A17 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A18",
                |m: &AccountWithCashflows| { &m.A18 },
                |m: &mut AccountWithCashflows| { &mut m.A18 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A19",
                |m: &AccountWithCashflows| { &m.A19 },
                |m: &mut AccountWithCashflows| { &mut m.A19 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A20",
                |m: &AccountWithCashflows| { &m.A20 },
                |m: &mut AccountWithCashflows| { &mut m.A20 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "total_interest_amount",
                |m: &AccountWithCashflows| { &m.total_interest_amount },
                |m: &mut AccountWithCashflows| { &mut m.total_interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "total_principal_amount",
                |m: &AccountWithCashflows| { &m.total_principal_amount },
                |m: &mut AccountWithCashflows| { &mut m.total_principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.account_id.clear();
        self.currency.clear();
        self.int_rate = 0.;
        self.outstanding_bal = 0.;
        self.gl.clear();
        self.start_date = 0;
        self.maturity_date = 0;
        self.rate_flag.clear();
        self.branch.clear();
        self.customer_id.clear();
        self.customer_type.clear();
        self.product_code.clear();
        self.group.clear();
        self.acc_branch.clear();
        self.acc_number.clear();
        self.acc_suffix.clear();
        self.acc_type.clear();
        self.deal_type.clear();
        self.repricing_frequency.clear();
        self.last_repr_date = 0;
        self.next_repr_date = 0;
        self.int_compounding_frequency = 0;
        self.int_repayment_frequency = 0;
        self.margin_rate.clear();
        self.cpas.clear();
        self.cust_constitution_code.clear();
        self.customer_rating.clear();
        self.p2.clear();
        self.analysis_code.clear();
        self.sundry_analysis_code.clear();
        self.numeric_analysis_code.clear();
        self.base_rate_code.clear();
        self.differential_rate_code.clear();
        self.accrued_int_amt = 0.;
        self.next_rollover_date = 0;
        self.interest_computation_type.clear();
        self.rm.clear();
        self.customer_name.clear();
        self.monthly_avg_bal = 0.;
        self.pension_acc_flag.clear();
        self.waiver_flag.clear();
        self.aorl.clear();
        self.rl1 = 0;
        self.rl2 = 0;
        self.rl3 = 0;
        self.A1 = 0.;
        self.A2 = 0.;
        self.A3 = 0.;
        self.A4 = 0.;
        self.A5 = 0.;
        self.A6 = 0;
        self.A7 = 0;
        self.A8 = 0;
        self.A9 = 0;
        self.A10 = 0;
        self.A11.clear();
        self.A12.clear();
        self.A13.clear();
        self.A14.clear();
        self.A15.clear();
        self.A16.clear();
        self.A17.clear();
        self.A18.clear();
        self.A19.clear();
        self.A20.clear();
        self.total_interest_amount = 0.;
        self.total_principal_amount = 0.;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\
    \x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\
    \x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\
    \x04date\"\x9b\x10\n\x14AccountWithCashflows\x12\x1d\n\naccount_id\x18\
    \x01\x20\x01(\tR\taccountId\x12\x1a\n\x08currency\x18\x02\x20\x01(\tR\
    \x08currency\x12\x19\n\x08int_rate\x18\x03\x20\x01(\x01R\x07intRate\x12'\
    \n\x0foutstanding_bal\x18\x04\x20\x01(\x01R\x0eoutstandingBal\x12\x0e\n\
    \x02gl\x18\x05\x20\x01(\tR\x02gl\x12\x1d\n\nstart_date\x18\x06\x20\x01(\
    \x03R\tstartDate\x12#\n\rmaturity_date\x18\x07\x20\x01(\x03R\x0cmaturity\
    Date\x12\x1b\n\trate_flag\x18\x08\x20\x01(\tR\x08rateFlag\x12\x16\n\x06b\
    ranch\x18\t\x20\x01(\tR\x06branch\x12\x1f\n\x0bcustomer_id\x18\n\x20\x01\
    (\tR\ncustomerId\x12#\n\rcustomer_type\x18\x0b\x20\x01(\tR\x0ccustomerTy\
    pe\x12!\n\x0cproduct_code\x18\x0c\x20\x01(\tR\x0bproductCode\x12\x14\n\
    \x05group\x18\r\x20\x01(\tR\x05group\x12\x1d\n\nacc_branch\x18\x0e\x20\
    \x01(\tR\taccBranch\x12\x1d\n\nacc_number\x18\x0f\x20\x01(\tR\taccNumber\
    \x12\x1d\n\nacc_suffix\x18\x10\x20\x01(\tR\taccSuffix\x12\x19\n\x08acc_t\
    ype\x18\x11\x20\x01(\tR\x07accType\x12\x1b\n\tdeal_type\x18\x12\x20\x01(\
    \tR\x08dealType\x12/\n\x13repricing_frequency\x18\x13\x20\x01(\tR\x12rep\
    ricingFrequency\x12$\n\x0elast_repr_date\x18\x14\x20\x01(\x03R\x0clastRe\
    prDate\x12$\n\x0enext_repr_date\x18\x15\x20\x01(\x03R\x0cnextReprDate\
    \x12:\n\x19int_compounding_frequency\x18\x16\x20\x01(\x03R\x17intCompoun\
    dingFrequency\x126\n\x17int_repayment_frequency\x18\x17\x20\x01(\x03R\
    \x15intRepaymentFrequency\x12\x1f\n\x0bmargin_rate\x18\x18\x20\x01(\tR\n\
    marginRate\x12\x12\n\x04cpas\x18\x19\x20\x01(\tR\x04cpas\x124\n\x16cust_\
    constitution_code\x18\x1a\x20\x01(\tR\x14custConstitutionCode\x12'\n\x0f\
    customer_rating\x18\x1b\x20\x01(\tR\x0ecustomerRating\x12\x0e\n\x02p2\
    \x18\x1c\x20\x01(\tR\x02p2\x12#\n\ranalysis_code\x18\x1d\x20\x01(\tR\x0c\
    analysisCode\x120\n\x14sundry_analysis_code\x18\x1e\x20\x01(\tR\x12sundr\
    yAnalysisCode\x122\n\x15numeric_analysis_code\x18\x1f\x20\x01(\tR\x13num\
    ericAnalysisCode\x12$\n\x0ebase_rate_code\x18\x20\x20\x01(\tR\x0cbaseRat\
    eCode\x124\n\x16differential_rate_code\x18!\x20\x01(\tR\x14differentialR\
    ateCode\x12&\n\x0faccrued_int_amt\x18\"\x20\x01(\x01R\raccruedIntAmt\x12\
    ,\n\x12next_rollover_date\x18#\x20\x01(\x03R\x10nextRolloverDate\x12:\n\
    \x19interest_computation_type\x18$\x20\x01(\tR\x17interestComputationTyp\
    e\x12\x0e\n\x02rm\x18%\x20\x01(\tR\x02rm\x12#\n\rcustomer_name\x18&\x20\
    \x01(\tR\x0ccustomerName\x12&\n\x0fmonthly_avg_bal\x18'\x20\x01(\x01R\rm\
    onthlyAvgBal\x12(\n\x10pension_acc_flag\x18(\x20\x01(\tR\x0epensionAccFl\
    ag\x12\x1f\n\x0bwaiver_flag\x18)\x20\x01(\tR\nwaiverFlag\x12\x12\n\x04ao\
    rl\x18*\x20\x01(\tR\x04aorl\x12\x10\n\x03rl1\x18+\x20\x01(\x05R\x03rl1\
    \x12\x10\n\x03rl2\x18,\x20\x01(\x05R\x03rl2\x12\x10\n\x03rl3\x18-\x20\
    \x01(\x05R\x03rl3\x12\x0e\n\x02A1\x18.\x20\x01(\x01R\x02A1\x12\x0e\n\x02\
    A2\x18/\x20\x01(\x01R\x02A2\x12\x0e\n\x02A3\x180\x20\x01(\x01R\x02A3\x12\
    \x0e\n\x02A4\x181\x20\x01(\x01R\x02A4\x12\x0e\n\x02A5\x182\x20\x01(\x01R\
    \x02A5\x12\x0e\n\x02A6\x183\x20\x01(\x03R\x02A6\x12\x0e\n\x02A7\x184\x20\
    \x01(\x03R\x02A7\x12\x0e\n\x02A8\x185\x20\x01(\x03R\x02A8\x12\x0e\n\x02A\
    9\x186\x20\x01(\x03R\x02A9\x12\x10\n\x03A10\x187\x20\x01(\x03R\x03A10\
    \x12\x10\n\x03A11\x188\x20\x01(\tR\x03A11\x12\x10\n\x03A12\x189\x20\x01(\
    \tR\x03A12\x12\x10\n\x03A13\x18:\x20\x01(\tR\x03A13\x12\x10\n\x03A14\x18\
    ;\x20\x01(\tR\x03A14\x12\x10\n\x03A15\x18<\x20\x01(\tR\x03A15\x12\x10\n\
    \x03A16\x18=\x20\x01(\tR\x03A16\x12\x10\n\x03A17\x18>\x20\x01(\tR\x03A17\
    \x12\x10\n\x03A18\x18?\x20\x01(\tR\x03A18\x12\x10\n\x03A19\x18@\x20\x01(\
    \tR\x03A19\x12\x10\n\x03A20\x18A\x20\x01(\tR\x03A20\x122\n\x15total_inte\
    rest_amount\x18B\x20\x01(\x01R\x13totalInterestAmount\x124\n\x16total_pr\
    incipal_amount\x18C\x20\x01(\x01R\x14totalPrincipalAmount\x12'\n\tcashfl\
    ows\x18D\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
