use super::input_account::*;
use crate::configuration_parameters::ConfigurationParameters;
use rbdate::NaiveDate;
use std::io::{BufWriter, Write};

#[derive(Debug, Clone)]

pub struct Output {
    pub deal_id: String,
    pub branch: String,
    pub inst_name: String,
    pub lend_borr_typ: String,
    pub typology: String,
    pub usage: String,
    pub sub_type_borr_lend: String,
    pub cntrprty: String,
    pub crtn_dt: NaiveDate,
    pub val_date: NaiveDate,
    pub deal_date: NaiveDate,
    pub ccy: String,
    pub crnt_deal_amt: f64,
    pub crnt_conv_rt_lcy: f64,
    pub crnt_deal_amt_lcy: f64,
    pub roi: f64,
    pub tenor_days: String,
    pub mat_dt: NaiveDate,
    pub prin_amt: f64,
    pub int_amt: f64,
    pub cf_typ: String,
    pub flow_typ: String,
    pub mat_amt: f64,
    pub dealer_name: String,
    pub nds_ref_no: String,
    pub nxt_fix_dt: NaiveDate,
    pub residual_tenor: String,
    pub nxt_put_dt: NaiveDate,
    pub nxt_call_dt: NaiveDate,
    pub nxt_int_pay_dt: NaiveDate,
    pub int_pay_tenor: String,
    pub aip_air: String,
    pub downgrade_clause: String,
    pub avg_monthly_bal: String,
    pub glcode: String,
    pub cntrprty_ctgry_1: String,
    pub cntrprty_ctgry_2: String,
    pub cntrprty_ctgry_3: String,
    pub cntrprty_ctgry_4: String,
    pub int_pay_rec: String,
    pub bckt_days: String,
    pub cntrprty_ctgry_5: String,
    pub ind_outside_ind: String,
    pub system_gl: String,
    pub prod_concat: String,
    pub alm_concat: String,
    pub div: String,
    pub alm_line: String,
    pub ia_line: String,
}

impl Output {
    pub fn new(inp_acc: Input1, config_params: &ConfigurationParameters) -> Output {
        Output {
            deal_id: inp_acc.txn_id.to_string(),
            branch: inp_acc.co_code,
            inst_name: "NA".to_string(),
            lend_borr_typ: "NA".to_string(),
            typology: inp_acc.portfolio,
            usage: inp_acc.prd_typ,
            sub_type_borr_lend: "NA".to_string(),
            cntrprty: "NA".to_string(),
            crtn_dt: inp_acc.start_date,
            val_date: inp_acc.end_date,
            deal_date: inp_acc.start_date,
            ccy: "INR".to_string(),
            crnt_deal_amt: inp_acc.principal_ost,
            crnt_conv_rt_lcy: 0.0,
            crnt_deal_amt_lcy: inp_acc.principal_ost,
            roi: 0.0,
            tenor_days: "NA".to_string(),
            mat_dt: inp_acc.end_date,
            prin_amt: inp_acc.principal_ost,
            int_amt: 0.0,
            cf_typ: "Principal".to_string(),
            flow_typ: "NA".to_string(),
            mat_amt: 0.0,
            dealer_name: "NA".to_string(),
            nds_ref_no: "NA".to_string(),
            nxt_fix_dt: *config_params.as_on_date(),
            residual_tenor: "NA".to_string(),
            nxt_put_dt: *config_params.as_on_date(),
            nxt_call_dt: *config_params.as_on_date(),
            nxt_int_pay_dt: *config_params.as_on_date(),
            int_pay_tenor: "NA".to_string(),
            aip_air: "NA".to_string(),
            downgrade_clause: "NA".to_string(),
            avg_monthly_bal: "NA".to_string(),
            glcode: inp_acc.gl_code,
            cntrprty_ctgry_1: inp_acc.rate_type,
            cntrprty_ctgry_2: inp_acc.txn_type,
            cntrprty_ctgry_3: "NA".to_string(),
            cntrprty_ctgry_4: "NA".to_string(),
            int_pay_rec: "NA".to_string(),
            bckt_days: "NA".to_string(),
            cntrprty_ctgry_5: "NA".to_string(),
            ind_outside_ind: "NA".to_string(),
            system_gl: "NA".to_string(),
            prod_concat: "NA".to_string(),
            alm_concat: "NA".to_string(),
            div: "NA".to_string(),
            alm_line: "NA".to_string(),
            ia_line: "NA".to_string(),
        }
    }
}

pub fn format_output(output_rec: Output) -> String {
    format!(
        "{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}", 
        output_rec.deal_id,
        output_rec.branch,
        output_rec.inst_name,
        output_rec.lend_borr_typ,
        output_rec.typology,
        output_rec.usage,
        output_rec.sub_type_borr_lend,
        output_rec.cntrprty,
        output_rec.crtn_dt.format("%d-%m-%Y"),
        output_rec.val_date.format("%d-%m-%Y"),
        output_rec.deal_date.format("%d-%m-%Y"),
        output_rec.ccy,
        output_rec.crnt_deal_amt,
        output_rec.crnt_conv_rt_lcy,
        output_rec.crnt_deal_amt_lcy,
        output_rec.roi,
        output_rec.tenor_days,
        output_rec.mat_dt.format("%d-%m-%Y"),
        output_rec.prin_amt,
        output_rec.int_amt,
        output_rec.cf_typ,
        output_rec.flow_typ,
        output_rec.mat_amt,
        output_rec.dealer_name,
        output_rec.nds_ref_no,
        output_rec.nxt_fix_dt.format("%d-%m-%Y"),
        output_rec.residual_tenor,
        output_rec.nxt_put_dt.format("%d-%m-%Y"),
        output_rec.nxt_call_dt.format("%d-%m-%Y"),
        output_rec.nxt_int_pay_dt.format("%d-%m-%Y"),
        output_rec.int_pay_tenor,
        output_rec.aip_air,
        output_rec.downgrade_clause,
        output_rec.avg_monthly_bal,
        output_rec.glcode,
        output_rec.cntrprty_ctgry_1,
        output_rec.cntrprty_ctgry_2,
        output_rec.cntrprty_ctgry_3,
        output_rec.cntrprty_ctgry_4,
        output_rec.int_pay_rec,
        output_rec.bckt_days,
        output_rec.cntrprty_ctgry_5,
        output_rec.ind_outside_ind,
        output_rec.system_gl,
        output_rec.prod_concat,
        output_rec.alm_concat,
        output_rec.div,
        output_rec.alm_line,
        output_rec.ia_line,
    )
}

pub fn write_output(
    source_type: String,
    output_data: &mut Output,
    op_writer: &mut BufWriter<std::fs::File>,
    _logger: &slog::Logger,
) {
    writeln!(op_writer, "{}", format_output(output_data.clone()))
        .expect(&format!("Error in Writing {} Output", source_type));
}
