// This file is generated by rust-protobuf 2.2.5. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double prin_amt = 2;

    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_int_amt();
        self.clear_prin_amt();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub deal_no: ::std::string::String,
    pub int_basis: ::std::string::String,
    pub couprt: f64,
    pub val_dt: i64,
    pub mat_dt: i64,
    pub currcd: ::std::string::String,
    pub orgballcy: f64,
    pub int_amt: f64,
    pub counterpartyname: ::std::string::String,
    pub as_of_date: i64,
    pub paymenttype: ::std::string::String,
    pub rt_flag: ::std::string::String,
    pub reprice_index: ::std::string::String,
    pub reprice_spread: i64,
    pub alm_line: ::std::string::String,
    pub int_freq: i64,
    pub is_float: ::std::string::String,
    pub nxt_rep_dt: i64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    pub total_interest_amount: f64,
    pub total_principal_amount: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string deal_no = 1;

    pub fn clear_deal_no(&mut self) {
        self.deal_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_no(&mut self, v: ::std::string::String) {
        self.deal_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_no(&mut self) -> &mut ::std::string::String {
        &mut self.deal_no
    }

    // Take field
    pub fn take_deal_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_no, ::std::string::String::new())
    }

    pub fn get_deal_no(&self) -> &str {
        &self.deal_no
    }

    // string int_basis = 2;

    pub fn clear_int_basis(&mut self) {
        self.int_basis.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_basis(&mut self, v: ::std::string::String) {
        self.int_basis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_basis(&mut self) -> &mut ::std::string::String {
        &mut self.int_basis
    }

    // Take field
    pub fn take_int_basis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_basis, ::std::string::String::new())
    }

    pub fn get_int_basis(&self) -> &str {
        &self.int_basis
    }

    // double couprt = 3;

    pub fn clear_couprt(&mut self) {
        self.couprt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_couprt(&mut self, v: f64) {
        self.couprt = v;
    }

    pub fn get_couprt(&self) -> f64 {
        self.couprt
    }

    // int64 val_dt = 4;

    pub fn clear_val_dt(&mut self) {
        self.val_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_val_dt(&mut self, v: i64) {
        self.val_dt = v;
    }

    pub fn get_val_dt(&self) -> i64 {
        self.val_dt
    }

    // int64 mat_dt = 5;

    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }

    // string currcd = 6;

    pub fn clear_currcd(&mut self) {
        self.currcd.clear();
    }

    // Param is passed by value, moved
    pub fn set_currcd(&mut self, v: ::std::string::String) {
        self.currcd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currcd(&mut self) -> &mut ::std::string::String {
        &mut self.currcd
    }

    // Take field
    pub fn take_currcd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currcd, ::std::string::String::new())
    }

    pub fn get_currcd(&self) -> &str {
        &self.currcd
    }

    // double orgballcy = 7;

    pub fn clear_orgballcy(&mut self) {
        self.orgballcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_orgballcy(&mut self, v: f64) {
        self.orgballcy = v;
    }

    pub fn get_orgballcy(&self) -> f64 {
        self.orgballcy
    }

    // double int_amt = 8;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // string counterpartyname = 9;

    pub fn clear_counterpartyname(&mut self) {
        self.counterpartyname.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterpartyname(&mut self, v: ::std::string::String) {
        self.counterpartyname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterpartyname(&mut self) -> &mut ::std::string::String {
        &mut self.counterpartyname
    }

    // Take field
    pub fn take_counterpartyname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterpartyname, ::std::string::String::new())
    }

    pub fn get_counterpartyname(&self) -> &str {
        &self.counterpartyname
    }

    // int64 as_of_date = 10;

    pub fn clear_as_of_date(&mut self) {
        self.as_of_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_of_date(&mut self, v: i64) {
        self.as_of_date = v;
    }

    pub fn get_as_of_date(&self) -> i64 {
        self.as_of_date
    }

    // string paymenttype = 11;

    pub fn clear_paymenttype(&mut self) {
        self.paymenttype.clear();
    }

    // Param is passed by value, moved
    pub fn set_paymenttype(&mut self, v: ::std::string::String) {
        self.paymenttype = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_paymenttype(&mut self) -> &mut ::std::string::String {
        &mut self.paymenttype
    }

    // Take field
    pub fn take_paymenttype(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.paymenttype, ::std::string::String::new())
    }

    pub fn get_paymenttype(&self) -> &str {
        &self.paymenttype
    }

    // string rt_flag = 12;

    pub fn clear_rt_flag(&mut self) {
        self.rt_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_rt_flag(&mut self, v: ::std::string::String) {
        self.rt_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rt_flag(&mut self) -> &mut ::std::string::String {
        &mut self.rt_flag
    }

    // Take field
    pub fn take_rt_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rt_flag, ::std::string::String::new())
    }

    pub fn get_rt_flag(&self) -> &str {
        &self.rt_flag
    }

    // string reprice_index = 13;

    pub fn clear_reprice_index(&mut self) {
        self.reprice_index.clear();
    }

    // Param is passed by value, moved
    pub fn set_reprice_index(&mut self, v: ::std::string::String) {
        self.reprice_index = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reprice_index(&mut self) -> &mut ::std::string::String {
        &mut self.reprice_index
    }

    // Take field
    pub fn take_reprice_index(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reprice_index, ::std::string::String::new())
    }

    pub fn get_reprice_index(&self) -> &str {
        &self.reprice_index
    }

    // int64 reprice_spread = 14;

    pub fn clear_reprice_spread(&mut self) {
        self.reprice_spread = 0;
    }

    // Param is passed by value, moved
    pub fn set_reprice_spread(&mut self, v: i64) {
        self.reprice_spread = v;
    }

    pub fn get_reprice_spread(&self) -> i64 {
        self.reprice_spread
    }

    // string alm_line = 15;

    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }

    // int64 int_freq = 16;

    pub fn clear_int_freq(&mut self) {
        self.int_freq = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_freq(&mut self, v: i64) {
        self.int_freq = v;
    }

    pub fn get_int_freq(&self) -> i64 {
        self.int_freq
    }

    // string is_float = 17;

    pub fn clear_is_float(&mut self) {
        self.is_float.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_float(&mut self, v: ::std::string::String) {
        self.is_float = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_float(&mut self) -> &mut ::std::string::String {
        &mut self.is_float
    }

    // Take field
    pub fn take_is_float(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_float, ::std::string::String::new())
    }

    pub fn get_is_float(&self) -> &str {
        &self.is_float
    }

    // int64 nxt_rep_dt = 18;

    pub fn clear_nxt_rep_dt(&mut self) {
        self.nxt_rep_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_rep_dt(&mut self, v: i64) {
        self.nxt_rep_dt = v;
    }

    pub fn get_nxt_rep_dt(&self) -> i64 {
        self.nxt_rep_dt
    }

    // repeated .Cashflow cashflows = 19;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }

    // double total_interest_amount = 20;

    pub fn clear_total_interest_amount(&mut self) {
        self.total_interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_amount(&mut self, v: f64) {
        self.total_interest_amount = v;
    }

    pub fn get_total_interest_amount(&self) -> f64 {
        self.total_interest_amount
    }

    // double total_principal_amount = 21;

    pub fn clear_total_principal_amount(&mut self) {
        self.total_principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_principal_amount(&mut self, v: f64) {
        self.total_principal_amount = v;
    }

    pub fn get_total_principal_amount(&self) -> f64 {
        self.total_principal_amount
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_no)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_basis)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.couprt = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.val_dt = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currcd)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.orgballcy = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterpartyname)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_of_date = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.paymenttype)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rt_flag)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reprice_index)?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.reprice_spread = tmp;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alm_line)?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int_freq = tmp;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_float)?;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_rep_dt = tmp;
                },
                19 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_amount = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_principal_amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.deal_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.deal_no);
        }
        if !self.int_basis.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.int_basis);
        }
        if self.couprt != 0. {
            my_size += 9;
        }
        if self.val_dt != 0 {
            my_size += ::protobuf::rt::value_size(4, self.val_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mat_dt != 0 {
            my_size += ::protobuf::rt::value_size(5, self.mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.currcd.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.currcd);
        }
        if self.orgballcy != 0. {
            my_size += 9;
        }
        if self.int_amt != 0. {
            my_size += 9;
        }
        if !self.counterpartyname.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.counterpartyname);
        }
        if self.as_of_date != 0 {
            my_size += ::protobuf::rt::value_size(10, self.as_of_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.paymenttype.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.paymenttype);
        }
        if !self.rt_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.rt_flag);
        }
        if !self.reprice_index.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.reprice_index);
        }
        if self.reprice_spread != 0 {
            my_size += ::protobuf::rt::value_size(14, self.reprice_spread, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.alm_line);
        }
        if self.int_freq != 0 {
            my_size += ::protobuf::rt::value_size(16, self.int_freq, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.is_float.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.is_float);
        }
        if self.nxt_rep_dt != 0 {
            my_size += ::protobuf::rt::value_size(18, self.nxt_rep_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.total_interest_amount != 0. {
            my_size += 10;
        }
        if self.total_principal_amount != 0. {
            my_size += 10;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.deal_no.is_empty() {
            os.write_string(1, &self.deal_no)?;
        }
        if !self.int_basis.is_empty() {
            os.write_string(2, &self.int_basis)?;
        }
        if self.couprt != 0. {
            os.write_double(3, self.couprt)?;
        }
        if self.val_dt != 0 {
            os.write_int64(4, self.val_dt)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(5, self.mat_dt)?;
        }
        if !self.currcd.is_empty() {
            os.write_string(6, &self.currcd)?;
        }
        if self.orgballcy != 0. {
            os.write_double(7, self.orgballcy)?;
        }
        if self.int_amt != 0. {
            os.write_double(8, self.int_amt)?;
        }
        if !self.counterpartyname.is_empty() {
            os.write_string(9, &self.counterpartyname)?;
        }
        if self.as_of_date != 0 {
            os.write_int64(10, self.as_of_date)?;
        }
        if !self.paymenttype.is_empty() {
            os.write_string(11, &self.paymenttype)?;
        }
        if !self.rt_flag.is_empty() {
            os.write_string(12, &self.rt_flag)?;
        }
        if !self.reprice_index.is_empty() {
            os.write_string(13, &self.reprice_index)?;
        }
        if self.reprice_spread != 0 {
            os.write_int64(14, self.reprice_spread)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(15, &self.alm_line)?;
        }
        if self.int_freq != 0 {
            os.write_int64(16, self.int_freq)?;
        }
        if !self.is_float.is_empty() {
            os.write_string(17, &self.is_float)?;
        }
        if self.nxt_rep_dt != 0 {
            os.write_int64(18, self.nxt_rep_dt)?;
        }
        for v in &self.cashflows {
            os.write_tag(19, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.total_interest_amount != 0. {
            os.write_double(20, self.total_interest_amount)?;
        }
        if self.total_principal_amount != 0. {
            os.write_double(21, self.total_principal_amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_no",
                    |m: &AccountWithCashflows| { &m.deal_no },
                    |m: &mut AccountWithCashflows| { &mut m.deal_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "int_basis",
                    |m: &AccountWithCashflows| { &m.int_basis },
                    |m: &mut AccountWithCashflows| { &mut m.int_basis },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "couprt",
                    |m: &AccountWithCashflows| { &m.couprt },
                    |m: &mut AccountWithCashflows| { &mut m.couprt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "val_dt",
                    |m: &AccountWithCashflows| { &m.val_dt },
                    |m: &mut AccountWithCashflows| { &mut m.val_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "mat_dt",
                    |m: &AccountWithCashflows| { &m.mat_dt },
                    |m: &mut AccountWithCashflows| { &mut m.mat_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currcd",
                    |m: &AccountWithCashflows| { &m.currcd },
                    |m: &mut AccountWithCashflows| { &mut m.currcd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "orgballcy",
                    |m: &AccountWithCashflows| { &m.orgballcy },
                    |m: &mut AccountWithCashflows| { &mut m.orgballcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &AccountWithCashflows| { &m.int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counterpartyname",
                    |m: &AccountWithCashflows| { &m.counterpartyname },
                    |m: &mut AccountWithCashflows| { &mut m.counterpartyname },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "as_of_date",
                    |m: &AccountWithCashflows| { &m.as_of_date },
                    |m: &mut AccountWithCashflows| { &mut m.as_of_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "paymenttype",
                    |m: &AccountWithCashflows| { &m.paymenttype },
                    |m: &mut AccountWithCashflows| { &mut m.paymenttype },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rt_flag",
                    |m: &AccountWithCashflows| { &m.rt_flag },
                    |m: &mut AccountWithCashflows| { &mut m.rt_flag },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "reprice_index",
                    |m: &AccountWithCashflows| { &m.reprice_index },
                    |m: &mut AccountWithCashflows| { &mut m.reprice_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "reprice_spread",
                    |m: &AccountWithCashflows| { &m.reprice_spread },
                    |m: &mut AccountWithCashflows| { &mut m.reprice_spread },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "alm_line",
                    |m: &AccountWithCashflows| { &m.alm_line },
                    |m: &mut AccountWithCashflows| { &mut m.alm_line },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "int_freq",
                    |m: &AccountWithCashflows| { &m.int_freq },
                    |m: &mut AccountWithCashflows| { &mut m.int_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "is_float",
                    |m: &AccountWithCashflows| { &m.is_float },
                    |m: &mut AccountWithCashflows| { &mut m.is_float },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "nxt_rep_dt",
                    |m: &AccountWithCashflows| { &m.nxt_rep_dt },
                    |m: &mut AccountWithCashflows| { &mut m.nxt_rep_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_interest_amount",
                    |m: &AccountWithCashflows| { &m.total_interest_amount },
                    |m: &mut AccountWithCashflows| { &mut m.total_interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_principal_amount",
                    |m: &AccountWithCashflows| { &m.total_principal_amount },
                    |m: &mut AccountWithCashflows| { &mut m.total_principal_amount },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_deal_no();
        self.clear_int_basis();
        self.clear_couprt();
        self.clear_val_dt();
        self.clear_mat_dt();
        self.clear_currcd();
        self.clear_orgballcy();
        self.clear_int_amt();
        self.clear_counterpartyname();
        self.clear_as_of_date();
        self.clear_paymenttype();
        self.clear_rt_flag();
        self.clear_reprice_index();
        self.clear_reprice_spread();
        self.clear_alm_line();
        self.clear_int_freq();
        self.clear_is_float();
        self.clear_nxt_rep_dt();
        self.clear_cashflows();
        self.clear_total_interest_amount();
        self.clear_total_principal_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(accounts_with_cashflows_borrowings.proto\"R\n\x08Cashflow\x12\x17\n\
    \x07int_amt\x18\x01\x20\x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\
    \x02\x20\x01(\x01R\x07prinAmt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\
    \x04date\"\xb4\x05\n\x14AccountWithCashflows\x12\x17\n\x07deal_no\x18\
    \x01\x20\x01(\tR\x06dealNo\x12\x1b\n\tint_basis\x18\x02\x20\x01(\tR\x08i\
    ntBasis\x12\x16\n\x06couprt\x18\x03\x20\x01(\x01R\x06couprt\x12\x15\n\
    \x06val_dt\x18\x04\x20\x01(\x03R\x05valDt\x12\x15\n\x06mat_dt\x18\x05\
    \x20\x01(\x03R\x05matDt\x12\x16\n\x06currcd\x18\x06\x20\x01(\tR\x06currc\
    d\x12\x1c\n\torgballcy\x18\x07\x20\x01(\x01R\torgballcy\x12\x17\n\x07int\
    _amt\x18\x08\x20\x01(\x01R\x06intAmt\x12*\n\x10counterpartyname\x18\t\
    \x20\x01(\tR\x10counterpartyname\x12\x1c\n\nas_of_date\x18\n\x20\x01(\
    \x03R\x08asOfDate\x12\x20\n\x0bpaymenttype\x18\x0b\x20\x01(\tR\x0bpaymen\
    ttype\x12\x17\n\x07rt_flag\x18\x0c\x20\x01(\tR\x06rtFlag\x12#\n\rreprice\
    _index\x18\r\x20\x01(\tR\x0crepriceIndex\x12%\n\x0ereprice_spread\x18\
    \x0e\x20\x01(\x03R\rrepriceSpread\x12\x19\n\x08alm_line\x18\x0f\x20\x01(\
    \tR\x07almLine\x12\x19\n\x08int_freq\x18\x10\x20\x01(\x03R\x07intFreq\
    \x12\x19\n\x08is_float\x18\x11\x20\x01(\tR\x07isFloat\x12\x1c\n\nnxt_rep\
    _dt\x18\x12\x20\x01(\x03R\x08nxtRepDt\x12'\n\tcashflows\x18\x13\x20\x03(\
    \x0b2\t.CashflowR\tcashflows\x122\n\x15total_interest_amount\x18\x14\x20\
    \x01(\x01R\x13totalInterestAmount\x124\n\x16total_principal_amount\x18\
    \x15\x20\x01(\x01R\x14totalPrincipalAmountb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
