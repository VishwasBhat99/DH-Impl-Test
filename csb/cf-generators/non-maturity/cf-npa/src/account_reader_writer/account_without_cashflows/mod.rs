// This file is generated by rust-protobuf 2.11.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `csb_npa.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_11_0;

#[derive(PartialEq,Clone,Default)]
pub struct OutputAccount {
    // message fields
    pub acc_no: ::std::string::String,
    pub asset_cd: ::std::string::String,
    pub acc_bal: f64,
    pub ho_bal: f64,
    pub ho_prov: f64,
    pub npa_amt: f64,
    pub ccy: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutputAccount {
    fn default() -> &'a OutputAccount {
        <OutputAccount as ::protobuf::Message>::default_instance()
    }
}

impl OutputAccount {
    pub fn new() -> OutputAccount {
        ::std::default::Default::default()
    }

    // string acc_no = 1;


    pub fn get_acc_no(&self) -> &str {
        &self.acc_no
    }
    pub fn clear_acc_no(&mut self) {
        self.acc_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_no(&mut self, v: ::std::string::String) {
        self.acc_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_no(&mut self) -> &mut ::std::string::String {
        &mut self.acc_no
    }

    // Take field
    pub fn take_acc_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_no, ::std::string::String::new())
    }

    // string asset_cd = 2;


    pub fn get_asset_cd(&self) -> &str {
        &self.asset_cd
    }
    pub fn clear_asset_cd(&mut self) {
        self.asset_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_cd(&mut self, v: ::std::string::String) {
        self.asset_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_cd(&mut self) -> &mut ::std::string::String {
        &mut self.asset_cd
    }

    // Take field
    pub fn take_asset_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_cd, ::std::string::String::new())
    }

    // double acc_bal = 3;


    pub fn get_acc_bal(&self) -> f64 {
        self.acc_bal
    }
    pub fn clear_acc_bal(&mut self) {
        self.acc_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_acc_bal(&mut self, v: f64) {
        self.acc_bal = v;
    }

    // double ho_bal = 4;


    pub fn get_ho_bal(&self) -> f64 {
        self.ho_bal
    }
    pub fn clear_ho_bal(&mut self) {
        self.ho_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ho_bal(&mut self, v: f64) {
        self.ho_bal = v;
    }

    // double ho_prov = 5;


    pub fn get_ho_prov(&self) -> f64 {
        self.ho_prov
    }
    pub fn clear_ho_prov(&mut self) {
        self.ho_prov = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ho_prov(&mut self, v: f64) {
        self.ho_prov = v;
    }

    // double npa_amt = 6;


    pub fn get_npa_amt(&self) -> f64 {
        self.npa_amt
    }
    pub fn clear_npa_amt(&mut self) {
        self.npa_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_npa_amt(&mut self, v: f64) {
        self.npa_amt = v;
    }

    // string ccy = 7;


    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }
    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }
}

impl ::protobuf::Message for OutputAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_no)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_cd)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.acc_bal = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ho_bal = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ho_prov = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.npa_amt = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.acc_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.acc_no);
        }
        if !self.asset_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.asset_cd);
        }
        if self.acc_bal != 0. {
            my_size += 9;
        }
        if self.ho_bal != 0. {
            my_size += 9;
        }
        if self.ho_prov != 0. {
            my_size += 9;
        }
        if self.npa_amt != 0. {
            my_size += 9;
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.ccy);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.acc_no.is_empty() {
            os.write_string(1, &self.acc_no)?;
        }
        if !self.asset_cd.is_empty() {
            os.write_string(2, &self.asset_cd)?;
        }
        if self.acc_bal != 0. {
            os.write_double(3, self.acc_bal)?;
        }
        if self.ho_bal != 0. {
            os.write_double(4, self.ho_bal)?;
        }
        if self.ho_prov != 0. {
            os.write_double(5, self.ho_prov)?;
        }
        if self.npa_amt != 0. {
            os.write_double(6, self.npa_amt)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(7, &self.ccy)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputAccount {
        OutputAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acc_no",
                    |m: &OutputAccount| { &m.acc_no },
                    |m: &mut OutputAccount| { &mut m.acc_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "asset_cd",
                    |m: &OutputAccount| { &m.asset_cd },
                    |m: &mut OutputAccount| { &mut m.asset_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "acc_bal",
                    |m: &OutputAccount| { &m.acc_bal },
                    |m: &mut OutputAccount| { &mut m.acc_bal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ho_bal",
                    |m: &OutputAccount| { &m.ho_bal },
                    |m: &mut OutputAccount| { &mut m.ho_bal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ho_prov",
                    |m: &OutputAccount| { &m.ho_prov },
                    |m: &mut OutputAccount| { &mut m.ho_prov },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "npa_amt",
                    |m: &OutputAccount| { &m.npa_amt },
                    |m: &mut OutputAccount| { &mut m.npa_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy",
                    |m: &OutputAccount| { &m.ccy },
                    |m: &mut OutputAccount| { &mut m.ccy },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OutputAccount>(
                    "OutputAccount",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OutputAccount {
        static mut instance: ::protobuf::lazy::Lazy<OutputAccount> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(OutputAccount::new)
        }
    }
}

impl ::protobuf::Clear for OutputAccount {
    fn clear(&mut self) {
        self.acc_no.clear();
        self.asset_cd.clear();
        self.acc_bal = 0.;
        self.ho_bal = 0.;
        self.ho_prov = 0.;
        self.npa_amt = 0.;
        self.ccy.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rcsb_npa.proto\"\xb5\x01\n\rOutputAccount\x12\x15\n\x06acc_no\x18\x01\
    \x20\x01(\tR\x05accNo\x12\x19\n\x08asset_cd\x18\x02\x20\x01(\tR\x07asset\
    Cd\x12\x17\n\x07acc_bal\x18\x03\x20\x01(\x01R\x06accBal\x12\x15\n\x06ho_\
    bal\x18\x04\x20\x01(\x01R\x05hoBal\x12\x17\n\x07ho_prov\x18\x05\x20\x01(\
    \x01R\x06hoProv\x12\x17\n\x07npa_amt\x18\x06\x20\x01(\x01R\x06npaAmt\x12\
    \x10\n\x03ccy\x18\x07\x20\x01(\tR\x03ccyb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
