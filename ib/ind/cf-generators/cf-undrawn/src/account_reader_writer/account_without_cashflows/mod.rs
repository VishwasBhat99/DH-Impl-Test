// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]

#[derive(PartialEq,Clone,Default)]
pub struct OutputAccount {
    // message fields
    pub key_1: ::std::string::String,
    pub gl_class_code: ::std::string::String,
    pub status: ::std::string::String,
    pub balance: f64,
    pub old_bad_debt_ind: i64,
    pub i_or_b: ::std::string::String,
    pub crm_flag: ::std::string::String,
    pub app_amt: f64,
    pub lmt1: f64,
    pub lmt2: f64,
    pub lmt3: f64,
    pub lmt4: f64,
    pub od_lmt: f64,
    pub adv_val: f64,
    pub basel_class: ::std::string::String,
    pub limit_exp_date: i64,
    pub lending_status: i64,
    pub dp: ::std::string::String,
    pub drawing_amt: f64,
    pub od_multi_lim_allow: i64,
    pub ccy: ::std::string::String,
    pub group: ::std::string::String,
    pub llg: ::std::string::String,
    pub limit_amt: f64,
    pub dp_amt: f64,
    pub undrawn_sls_amt: f64,
    pub undrawn_lcr_amt: f64,
    pub undrawn_nsfr_amt: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutputAccount {
    fn default() -> &'a OutputAccount {
        <OutputAccount as ::protobuf::Message>::default_instance()
    }
}

impl OutputAccount {
    pub fn new() -> OutputAccount {
        ::std::default::Default::default()
    }

    // string key_1 = 1;


    pub fn get_key_1(&self) -> &str {
        &self.key_1
    }
    pub fn clear_key_1(&mut self) {
        self.key_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_key_1(&mut self, v: ::std::string::String) {
        self.key_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_1(&mut self) -> &mut ::std::string::String {
        &mut self.key_1
    }

    // Take field
    pub fn take_key_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key_1, ::std::string::String::new())
    }

    // string gl_class_code = 2;


    pub fn get_gl_class_code(&self) -> &str {
        &self.gl_class_code
    }
    pub fn clear_gl_class_code(&mut self) {
        self.gl_class_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_class_code(&mut self, v: ::std::string::String) {
        self.gl_class_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_class_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_class_code
    }

    // Take field
    pub fn take_gl_class_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_class_code, ::std::string::String::new())
    }

    // string status = 3;


    pub fn get_status(&self) -> &str {
        &self.status
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }

    // double balance = 4;


    pub fn get_balance(&self) -> f64 {
        self.balance
    }
    pub fn clear_balance(&mut self) {
        self.balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_balance(&mut self, v: f64) {
        self.balance = v;
    }

    // int64 old_bad_debt_ind = 5;


    pub fn get_old_bad_debt_ind(&self) -> i64 {
        self.old_bad_debt_ind
    }
    pub fn clear_old_bad_debt_ind(&mut self) {
        self.old_bad_debt_ind = 0;
    }

    // Param is passed by value, moved
    pub fn set_old_bad_debt_ind(&mut self, v: i64) {
        self.old_bad_debt_ind = v;
    }

    // string i_or_b = 6;


    pub fn get_i_or_b(&self) -> &str {
        &self.i_or_b
    }
    pub fn clear_i_or_b(&mut self) {
        self.i_or_b.clear();
    }

    // Param is passed by value, moved
    pub fn set_i_or_b(&mut self, v: ::std::string::String) {
        self.i_or_b = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_i_or_b(&mut self) -> &mut ::std::string::String {
        &mut self.i_or_b
    }

    // Take field
    pub fn take_i_or_b(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.i_or_b, ::std::string::String::new())
    }

    // string crm_flag = 7;


    pub fn get_crm_flag(&self) -> &str {
        &self.crm_flag
    }
    pub fn clear_crm_flag(&mut self) {
        self.crm_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_crm_flag(&mut self, v: ::std::string::String) {
        self.crm_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_crm_flag(&mut self) -> &mut ::std::string::String {
        &mut self.crm_flag
    }

    // Take field
    pub fn take_crm_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.crm_flag, ::std::string::String::new())
    }

    // double app_amt = 8;


    pub fn get_app_amt(&self) -> f64 {
        self.app_amt
    }
    pub fn clear_app_amt(&mut self) {
        self.app_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_app_amt(&mut self, v: f64) {
        self.app_amt = v;
    }

    // double lmt1 = 9;


    pub fn get_lmt1(&self) -> f64 {
        self.lmt1
    }
    pub fn clear_lmt1(&mut self) {
        self.lmt1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lmt1(&mut self, v: f64) {
        self.lmt1 = v;
    }

    // double lmt2 = 10;


    pub fn get_lmt2(&self) -> f64 {
        self.lmt2
    }
    pub fn clear_lmt2(&mut self) {
        self.lmt2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lmt2(&mut self, v: f64) {
        self.lmt2 = v;
    }

    // double lmt3 = 11;


    pub fn get_lmt3(&self) -> f64 {
        self.lmt3
    }
    pub fn clear_lmt3(&mut self) {
        self.lmt3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lmt3(&mut self, v: f64) {
        self.lmt3 = v;
    }

    // double lmt4 = 12;


    pub fn get_lmt4(&self) -> f64 {
        self.lmt4
    }
    pub fn clear_lmt4(&mut self) {
        self.lmt4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lmt4(&mut self, v: f64) {
        self.lmt4 = v;
    }

    // double od_lmt = 13;


    pub fn get_od_lmt(&self) -> f64 {
        self.od_lmt
    }
    pub fn clear_od_lmt(&mut self) {
        self.od_lmt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_od_lmt(&mut self, v: f64) {
        self.od_lmt = v;
    }

    // double adv_val = 14;


    pub fn get_adv_val(&self) -> f64 {
        self.adv_val
    }
    pub fn clear_adv_val(&mut self) {
        self.adv_val = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adv_val(&mut self, v: f64) {
        self.adv_val = v;
    }

    // string basel_class = 15;


    pub fn get_basel_class(&self) -> &str {
        &self.basel_class
    }
    pub fn clear_basel_class(&mut self) {
        self.basel_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_basel_class(&mut self, v: ::std::string::String) {
        self.basel_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_basel_class(&mut self) -> &mut ::std::string::String {
        &mut self.basel_class
    }

    // Take field
    pub fn take_basel_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.basel_class, ::std::string::String::new())
    }

    // int64 limit_exp_date = 16;


    pub fn get_limit_exp_date(&self) -> i64 {
        self.limit_exp_date
    }
    pub fn clear_limit_exp_date(&mut self) {
        self.limit_exp_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit_exp_date(&mut self, v: i64) {
        self.limit_exp_date = v;
    }

    // int64 lending_status = 17;


    pub fn get_lending_status(&self) -> i64 {
        self.lending_status
    }
    pub fn clear_lending_status(&mut self) {
        self.lending_status = 0;
    }

    // Param is passed by value, moved
    pub fn set_lending_status(&mut self, v: i64) {
        self.lending_status = v;
    }

    // string dp = 18;


    pub fn get_dp(&self) -> &str {
        &self.dp
    }
    pub fn clear_dp(&mut self) {
        self.dp.clear();
    }

    // Param is passed by value, moved
    pub fn set_dp(&mut self, v: ::std::string::String) {
        self.dp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dp(&mut self) -> &mut ::std::string::String {
        &mut self.dp
    }

    // Take field
    pub fn take_dp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dp, ::std::string::String::new())
    }

    // double drawing_amt = 19;


    pub fn get_drawing_amt(&self) -> f64 {
        self.drawing_amt
    }
    pub fn clear_drawing_amt(&mut self) {
        self.drawing_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_drawing_amt(&mut self, v: f64) {
        self.drawing_amt = v;
    }

    // int64 od_multi_lim_allow = 20;


    pub fn get_od_multi_lim_allow(&self) -> i64 {
        self.od_multi_lim_allow
    }
    pub fn clear_od_multi_lim_allow(&mut self) {
        self.od_multi_lim_allow = 0;
    }

    // Param is passed by value, moved
    pub fn set_od_multi_lim_allow(&mut self, v: i64) {
        self.od_multi_lim_allow = v;
    }

    // string ccy = 21;


    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }
    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    // string group = 22;


    pub fn get_group(&self) -> &str {
        &self.group
    }
    pub fn clear_group(&mut self) {
        self.group.clear();
    }

    // Param is passed by value, moved
    pub fn set_group(&mut self, v: ::std::string::String) {
        self.group = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group(&mut self) -> &mut ::std::string::String {
        &mut self.group
    }

    // Take field
    pub fn take_group(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group, ::std::string::String::new())
    }

    // string llg = 23;


    pub fn get_llg(&self) -> &str {
        &self.llg
    }
    pub fn clear_llg(&mut self) {
        self.llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_llg(&mut self, v: ::std::string::String) {
        self.llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_llg(&mut self) -> &mut ::std::string::String {
        &mut self.llg
    }

    // Take field
    pub fn take_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.llg, ::std::string::String::new())
    }

    // double limit_amt = 24;


    pub fn get_limit_amt(&self) -> f64 {
        self.limit_amt
    }
    pub fn clear_limit_amt(&mut self) {
        self.limit_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_limit_amt(&mut self, v: f64) {
        self.limit_amt = v;
    }

    // double dp_amt = 25;


    pub fn get_dp_amt(&self) -> f64 {
        self.dp_amt
    }
    pub fn clear_dp_amt(&mut self) {
        self.dp_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dp_amt(&mut self, v: f64) {
        self.dp_amt = v;
    }

    // double undrawn_sls_amt = 26;


    pub fn get_undrawn_sls_amt(&self) -> f64 {
        self.undrawn_sls_amt
    }
    pub fn clear_undrawn_sls_amt(&mut self) {
        self.undrawn_sls_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_undrawn_sls_amt(&mut self, v: f64) {
        self.undrawn_sls_amt = v;
    }

    // double undrawn_lcr_amt = 27;


    pub fn get_undrawn_lcr_amt(&self) -> f64 {
        self.undrawn_lcr_amt
    }
    pub fn clear_undrawn_lcr_amt(&mut self) {
        self.undrawn_lcr_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_undrawn_lcr_amt(&mut self, v: f64) {
        self.undrawn_lcr_amt = v;
    }

    // double undrawn_nsfr_amt = 28;


    pub fn get_undrawn_nsfr_amt(&self) -> f64 {
        self.undrawn_nsfr_amt
    }
    pub fn clear_undrawn_nsfr_amt(&mut self) {
        self.undrawn_nsfr_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_undrawn_nsfr_amt(&mut self, v: f64) {
        self.undrawn_nsfr_amt = v;
    }
}

impl ::protobuf::Message for OutputAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key_1)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_class_code)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.balance = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.old_bad_debt_ind = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.i_or_b)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.crm_flag)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.app_amt = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.lmt1 = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.lmt2 = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.lmt3 = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.lmt4 = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.od_lmt = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adv_val = tmp;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.basel_class)?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.limit_exp_date = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lending_status = tmp;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dp)?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.drawing_amt = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.od_multi_lim_allow = tmp;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.llg)?;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.limit_amt = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.dp_amt = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.undrawn_sls_amt = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.undrawn_lcr_amt = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.undrawn_nsfr_amt = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key_1.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key_1);
        }
        if !self.gl_class_code.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.gl_class_code);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.status);
        }
        if self.balance != 0. {
            my_size += 9;
        }
        if self.old_bad_debt_ind != 0 {
            my_size += ::protobuf::rt::value_size(5, self.old_bad_debt_ind, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.i_or_b.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.i_or_b);
        }
        if !self.crm_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.crm_flag);
        }
        if self.app_amt != 0. {
            my_size += 9;
        }
        if self.lmt1 != 0. {
            my_size += 9;
        }
        if self.lmt2 != 0. {
            my_size += 9;
        }
        if self.lmt3 != 0. {
            my_size += 9;
        }
        if self.lmt4 != 0. {
            my_size += 9;
        }
        if self.od_lmt != 0. {
            my_size += 9;
        }
        if self.adv_val != 0. {
            my_size += 9;
        }
        if !self.basel_class.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.basel_class);
        }
        if self.limit_exp_date != 0 {
            my_size += ::protobuf::rt::value_size(16, self.limit_exp_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lending_status != 0 {
            my_size += ::protobuf::rt::value_size(17, self.lending_status, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.dp.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.dp);
        }
        if self.drawing_amt != 0. {
            my_size += 10;
        }
        if self.od_multi_lim_allow != 0 {
            my_size += ::protobuf::rt::value_size(20, self.od_multi_lim_allow, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.ccy);
        }
        if !self.group.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.group);
        }
        if !self.llg.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.llg);
        }
        if self.limit_amt != 0. {
            my_size += 10;
        }
        if self.dp_amt != 0. {
            my_size += 10;
        }
        if self.undrawn_sls_amt != 0. {
            my_size += 10;
        }
        if self.undrawn_lcr_amt != 0. {
            my_size += 10;
        }
        if self.undrawn_nsfr_amt != 0. {
            my_size += 10;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key_1.is_empty() {
            os.write_string(1, &self.key_1)?;
        }
        if !self.gl_class_code.is_empty() {
            os.write_string(2, &self.gl_class_code)?;
        }
        if !self.status.is_empty() {
            os.write_string(3, &self.status)?;
        }
        if self.balance != 0. {
            os.write_double(4, self.balance)?;
        }
        if self.old_bad_debt_ind != 0 {
            os.write_int64(5, self.old_bad_debt_ind)?;
        }
        if !self.i_or_b.is_empty() {
            os.write_string(6, &self.i_or_b)?;
        }
        if !self.crm_flag.is_empty() {
            os.write_string(7, &self.crm_flag)?;
        }
        if self.app_amt != 0. {
            os.write_double(8, self.app_amt)?;
        }
        if self.lmt1 != 0. {
            os.write_double(9, self.lmt1)?;
        }
        if self.lmt2 != 0. {
            os.write_double(10, self.lmt2)?;
        }
        if self.lmt3 != 0. {
            os.write_double(11, self.lmt3)?;
        }
        if self.lmt4 != 0. {
            os.write_double(12, self.lmt4)?;
        }
        if self.od_lmt != 0. {
            os.write_double(13, self.od_lmt)?;
        }
        if self.adv_val != 0. {
            os.write_double(14, self.adv_val)?;
        }
        if !self.basel_class.is_empty() {
            os.write_string(15, &self.basel_class)?;
        }
        if self.limit_exp_date != 0 {
            os.write_int64(16, self.limit_exp_date)?;
        }
        if self.lending_status != 0 {
            os.write_int64(17, self.lending_status)?;
        }
        if !self.dp.is_empty() {
            os.write_string(18, &self.dp)?;
        }
        if self.drawing_amt != 0. {
            os.write_double(19, self.drawing_amt)?;
        }
        if self.od_multi_lim_allow != 0 {
            os.write_int64(20, self.od_multi_lim_allow)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(21, &self.ccy)?;
        }
        if !self.group.is_empty() {
            os.write_string(22, &self.group)?;
        }
        if !self.llg.is_empty() {
            os.write_string(23, &self.llg)?;
        }
        if self.limit_amt != 0. {
            os.write_double(24, self.limit_amt)?;
        }
        if self.dp_amt != 0. {
            os.write_double(25, self.dp_amt)?;
        }
        if self.undrawn_sls_amt != 0. {
            os.write_double(26, self.undrawn_sls_amt)?;
        }
        if self.undrawn_lcr_amt != 0. {
            os.write_double(27, self.undrawn_lcr_amt)?;
        }
        if self.undrawn_nsfr_amt != 0. {
            os.write_double(28, self.undrawn_nsfr_amt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputAccount {
        OutputAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key_1",
                |m: &OutputAccount| { &m.key_1 },
                |m: &mut OutputAccount| { &mut m.key_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_class_code",
                |m: &OutputAccount| { &m.gl_class_code },
                |m: &mut OutputAccount| { &mut m.gl_class_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "status",
                |m: &OutputAccount| { &m.status },
                |m: &mut OutputAccount| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "balance",
                |m: &OutputAccount| { &m.balance },
                |m: &mut OutputAccount| { &mut m.balance },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "old_bad_debt_ind",
                |m: &OutputAccount| { &m.old_bad_debt_ind },
                |m: &mut OutputAccount| { &mut m.old_bad_debt_ind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "i_or_b",
                |m: &OutputAccount| { &m.i_or_b },
                |m: &mut OutputAccount| { &mut m.i_or_b },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "crm_flag",
                |m: &OutputAccount| { &m.crm_flag },
                |m: &mut OutputAccount| { &mut m.crm_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "app_amt",
                |m: &OutputAccount| { &m.app_amt },
                |m: &mut OutputAccount| { &mut m.app_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "lmt1",
                |m: &OutputAccount| { &m.lmt1 },
                |m: &mut OutputAccount| { &mut m.lmt1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "lmt2",
                |m: &OutputAccount| { &m.lmt2 },
                |m: &mut OutputAccount| { &mut m.lmt2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "lmt3",
                |m: &OutputAccount| { &m.lmt3 },
                |m: &mut OutputAccount| { &mut m.lmt3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "lmt4",
                |m: &OutputAccount| { &m.lmt4 },
                |m: &mut OutputAccount| { &mut m.lmt4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "od_lmt",
                |m: &OutputAccount| { &m.od_lmt },
                |m: &mut OutputAccount| { &mut m.od_lmt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "adv_val",
                |m: &OutputAccount| { &m.adv_val },
                |m: &mut OutputAccount| { &mut m.adv_val },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "basel_class",
                |m: &OutputAccount| { &m.basel_class },
                |m: &mut OutputAccount| { &mut m.basel_class },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "limit_exp_date",
                |m: &OutputAccount| { &m.limit_exp_date },
                |m: &mut OutputAccount| { &mut m.limit_exp_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "lending_status",
                |m: &OutputAccount| { &m.lending_status },
                |m: &mut OutputAccount| { &mut m.lending_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dp",
                |m: &OutputAccount| { &m.dp },
                |m: &mut OutputAccount| { &mut m.dp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "drawing_amt",
                |m: &OutputAccount| { &m.drawing_amt },
                |m: &mut OutputAccount| { &mut m.drawing_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "od_multi_lim_allow",
                |m: &OutputAccount| { &m.od_multi_lim_allow },
                |m: &mut OutputAccount| { &mut m.od_multi_lim_allow },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ccy",
                |m: &OutputAccount| { &m.ccy },
                |m: &mut OutputAccount| { &mut m.ccy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group",
                |m: &OutputAccount| { &m.group },
                |m: &mut OutputAccount| { &mut m.group },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "llg",
                |m: &OutputAccount| { &m.llg },
                |m: &mut OutputAccount| { &mut m.llg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "limit_amt",
                |m: &OutputAccount| { &m.limit_amt },
                |m: &mut OutputAccount| { &mut m.limit_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "dp_amt",
                |m: &OutputAccount| { &m.dp_amt },
                |m: &mut OutputAccount| { &mut m.dp_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "undrawn_sls_amt",
                |m: &OutputAccount| { &m.undrawn_sls_amt },
                |m: &mut OutputAccount| { &mut m.undrawn_sls_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "undrawn_lcr_amt",
                |m: &OutputAccount| { &m.undrawn_lcr_amt },
                |m: &mut OutputAccount| { &mut m.undrawn_lcr_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "undrawn_nsfr_amt",
                |m: &OutputAccount| { &m.undrawn_nsfr_amt },
                |m: &mut OutputAccount| { &mut m.undrawn_nsfr_amt },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OutputAccount>(
                "OutputAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OutputAccount {
        static instance: ::protobuf::rt::LazyV2<OutputAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OutputAccount::new)
    }
}

impl ::protobuf::Clear for OutputAccount {
    fn clear(&mut self) {
        self.key_1.clear();
        self.gl_class_code.clear();
        self.status.clear();
        self.balance = 0.;
        self.old_bad_debt_ind = 0;
        self.i_or_b.clear();
        self.crm_flag.clear();
        self.app_amt = 0.;
        self.lmt1 = 0.;
        self.lmt2 = 0.;
        self.lmt3 = 0.;
        self.lmt4 = 0.;
        self.od_lmt = 0.;
        self.adv_val = 0.;
        self.basel_class.clear();
        self.limit_exp_date = 0;
        self.lending_status = 0;
        self.dp.clear();
        self.drawing_amt = 0.;
        self.od_multi_lim_allow = 0;
        self.ccy.clear();
        self.group.clear();
        self.llg.clear();
        self.limit_amt = 0.;
        self.dp_amt = 0.;
        self.undrawn_sls_amt = 0.;
        self.undrawn_lcr_amt = 0.;
        self.undrawn_nsfr_amt = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cdummy1.proto\"\xa1\x06\n\rOutputAccount\x12\x13\n\x05key_1\x18\x01\
    \x20\x01(\tR\x04key1\x12\"\n\rgl_class_code\x18\x02\x20\x01(\tR\x0bglCla\
    ssCode\x12\x16\n\x06status\x18\x03\x20\x01(\tR\x06status\x12\x18\n\x07ba\
    lance\x18\x04\x20\x01(\x01R\x07balance\x12'\n\x10old_bad_debt_ind\x18\
    \x05\x20\x01(\x03R\roldBadDebtInd\x12\x14\n\x06i_or_b\x18\x06\x20\x01(\t\
    R\x04iOrB\x12\x19\n\x08crm_flag\x18\x07\x20\x01(\tR\x07crmFlag\x12\x17\n\
    \x07app_amt\x18\x08\x20\x01(\x01R\x06appAmt\x12\x12\n\x04lmt1\x18\t\x20\
    \x01(\x01R\x04lmt1\x12\x12\n\x04lmt2\x18\n\x20\x01(\x01R\x04lmt2\x12\x12\
    \n\x04lmt3\x18\x0b\x20\x01(\x01R\x04lmt3\x12\x12\n\x04lmt4\x18\x0c\x20\
    \x01(\x01R\x04lmt4\x12\x15\n\x06od_lmt\x18\r\x20\x01(\x01R\x05odLmt\x12\
    \x17\n\x07adv_val\x18\x0e\x20\x01(\x01R\x06advVal\x12\x1f\n\x0bbasel_cla\
    ss\x18\x0f\x20\x01(\tR\nbaselClass\x12$\n\x0elimit_exp_date\x18\x10\x20\
    \x01(\x03R\x0climitExpDate\x12%\n\x0elending_status\x18\x11\x20\x01(\x03\
    R\rlendingStatus\x12\x0e\n\x02dp\x18\x12\x20\x01(\tR\x02dp\x12\x1f\n\x0b\
    drawing_amt\x18\x13\x20\x01(\x01R\ndrawingAmt\x12+\n\x12od_multi_lim_all\
    ow\x18\x14\x20\x01(\x03R\x0fodMultiLimAllow\x12\x10\n\x03ccy\x18\x15\x20\
    \x01(\tR\x03ccy\x12\x14\n\x05group\x18\x16\x20\x01(\tR\x05group\x12\x10\
    \n\x03llg\x18\x17\x20\x01(\tR\x03llg\x12\x1b\n\tlimit_amt\x18\x18\x20\
    \x01(\x01R\x08limitAmt\x12\x15\n\x06dp_amt\x18\x19\x20\x01(\x01R\x05dpAm\
    t\x12&\n\x0fundrawn_sls_amt\x18\x1a\x20\x01(\x01R\rundrawnSlsAmt\x12&\n\
    \x0fundrawn_lcr_amt\x18\x1b\x20\x01(\x01R\rundrawnLcrAmt\x12(\n\x10undra\
    wn_nsfr_amt\x18\x1c\x20\x01(\x01R\x0eundrawnNsfrAmtb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
