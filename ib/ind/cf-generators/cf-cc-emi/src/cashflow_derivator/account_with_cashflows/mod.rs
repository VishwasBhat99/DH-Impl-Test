// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cf_ubs_loans.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_amt",
                |m: &Cashflow| { &m.int_amt },
                |m: &mut Cashflow| { &mut m.int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "prin_amt",
                |m: &Cashflow| { &m.prin_amt },
                |m: &mut Cashflow| { &mut m.prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub card_no: ::std::string::String,
    pub card_status: ::std::string::String,
    pub prd_code: ::std::string::String,
    pub acc_no: ::std::string::String,
    pub outstanding_bal: f64,
    pub emi_amt: f64,
    pub in_date: i64,
    pub tenurs: f64,
    pub del_cnt: ::std::string::String,
    pub cif_no: ::std::string::String,
    pub pan_no: ::std::string::String,
    pub intrate: f64,
    pub maturity_date: i64,
    pub bgl: ::std::string::String,
    pub cgl: ::std::string::String,
    pub branchcode: ::std::string::String,
    pub intamount: ::std::string::String,
    pub duedate: ::std::string::String,
    pub group: ::std::string::String,
    pub llg: ::std::string::String,
    pub currency: ::std::string::String,
    pub tot_int_amt: f64,
    pub tot_prin_amt: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string card_no = 1;


    pub fn get_card_no(&self) -> &str {
        &self.card_no
    }
    pub fn clear_card_no(&mut self) {
        self.card_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_no(&mut self, v: ::std::string::String) {
        self.card_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_no(&mut self) -> &mut ::std::string::String {
        &mut self.card_no
    }

    // Take field
    pub fn take_card_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_no, ::std::string::String::new())
    }

    // string card_status = 2;


    pub fn get_card_status(&self) -> &str {
        &self.card_status
    }
    pub fn clear_card_status(&mut self) {
        self.card_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_status(&mut self, v: ::std::string::String) {
        self.card_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_status(&mut self) -> &mut ::std::string::String {
        &mut self.card_status
    }

    // Take field
    pub fn take_card_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_status, ::std::string::String::new())
    }

    // string prd_code = 3;


    pub fn get_prd_code(&self) -> &str {
        &self.prd_code
    }
    pub fn clear_prd_code(&mut self) {
        self.prd_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_prd_code(&mut self, v: ::std::string::String) {
        self.prd_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prd_code(&mut self) -> &mut ::std::string::String {
        &mut self.prd_code
    }

    // Take field
    pub fn take_prd_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prd_code, ::std::string::String::new())
    }

    // string acc_no = 4;


    pub fn get_acc_no(&self) -> &str {
        &self.acc_no
    }
    pub fn clear_acc_no(&mut self) {
        self.acc_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_no(&mut self, v: ::std::string::String) {
        self.acc_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_no(&mut self) -> &mut ::std::string::String {
        &mut self.acc_no
    }

    // Take field
    pub fn take_acc_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_no, ::std::string::String::new())
    }

    // double outstanding_bal = 5;


    pub fn get_outstanding_bal(&self) -> f64 {
        self.outstanding_bal
    }
    pub fn clear_outstanding_bal(&mut self) {
        self.outstanding_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_outstanding_bal(&mut self, v: f64) {
        self.outstanding_bal = v;
    }

    // double emi_amt = 6;


    pub fn get_emi_amt(&self) -> f64 {
        self.emi_amt
    }
    pub fn clear_emi_amt(&mut self) {
        self.emi_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amt(&mut self, v: f64) {
        self.emi_amt = v;
    }

    // int64 in_date = 7;


    pub fn get_in_date(&self) -> i64 {
        self.in_date
    }
    pub fn clear_in_date(&mut self) {
        self.in_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_in_date(&mut self, v: i64) {
        self.in_date = v;
    }

    // double tenurs = 8;


    pub fn get_tenurs(&self) -> f64 {
        self.tenurs
    }
    pub fn clear_tenurs(&mut self) {
        self.tenurs = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tenurs(&mut self, v: f64) {
        self.tenurs = v;
    }

    // string del_cnt = 9;


    pub fn get_del_cnt(&self) -> &str {
        &self.del_cnt
    }
    pub fn clear_del_cnt(&mut self) {
        self.del_cnt.clear();
    }

    // Param is passed by value, moved
    pub fn set_del_cnt(&mut self, v: ::std::string::String) {
        self.del_cnt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_del_cnt(&mut self) -> &mut ::std::string::String {
        &mut self.del_cnt
    }

    // Take field
    pub fn take_del_cnt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.del_cnt, ::std::string::String::new())
    }

    // string cif_no = 10;


    pub fn get_cif_no(&self) -> &str {
        &self.cif_no
    }
    pub fn clear_cif_no(&mut self) {
        self.cif_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_cif_no(&mut self, v: ::std::string::String) {
        self.cif_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cif_no(&mut self) -> &mut ::std::string::String {
        &mut self.cif_no
    }

    // Take field
    pub fn take_cif_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cif_no, ::std::string::String::new())
    }

    // string pan_no = 11;


    pub fn get_pan_no(&self) -> &str {
        &self.pan_no
    }
    pub fn clear_pan_no(&mut self) {
        self.pan_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_pan_no(&mut self, v: ::std::string::String) {
        self.pan_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pan_no(&mut self) -> &mut ::std::string::String {
        &mut self.pan_no
    }

    // Take field
    pub fn take_pan_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pan_no, ::std::string::String::new())
    }

    // double intrate = 12;


    pub fn get_intrate(&self) -> f64 {
        self.intrate
    }
    pub fn clear_intrate(&mut self) {
        self.intrate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_intrate(&mut self, v: f64) {
        self.intrate = v;
    }

    // int64 maturity_date = 13;


    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }
    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    // string bgl = 14;


    pub fn get_bgl(&self) -> &str {
        &self.bgl
    }
    pub fn clear_bgl(&mut self) {
        self.bgl.clear();
    }

    // Param is passed by value, moved
    pub fn set_bgl(&mut self, v: ::std::string::String) {
        self.bgl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bgl(&mut self) -> &mut ::std::string::String {
        &mut self.bgl
    }

    // Take field
    pub fn take_bgl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bgl, ::std::string::String::new())
    }

    // string cgl = 15;


    pub fn get_cgl(&self) -> &str {
        &self.cgl
    }
    pub fn clear_cgl(&mut self) {
        self.cgl.clear();
    }

    // Param is passed by value, moved
    pub fn set_cgl(&mut self, v: ::std::string::String) {
        self.cgl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cgl(&mut self) -> &mut ::std::string::String {
        &mut self.cgl
    }

    // Take field
    pub fn take_cgl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cgl, ::std::string::String::new())
    }

    // string branchcode = 16;


    pub fn get_branchcode(&self) -> &str {
        &self.branchcode
    }
    pub fn clear_branchcode(&mut self) {
        self.branchcode.clear();
    }

    // Param is passed by value, moved
    pub fn set_branchcode(&mut self, v: ::std::string::String) {
        self.branchcode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branchcode(&mut self) -> &mut ::std::string::String {
        &mut self.branchcode
    }

    // Take field
    pub fn take_branchcode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branchcode, ::std::string::String::new())
    }

    // string intamount = 17;


    pub fn get_intamount(&self) -> &str {
        &self.intamount
    }
    pub fn clear_intamount(&mut self) {
        self.intamount.clear();
    }

    // Param is passed by value, moved
    pub fn set_intamount(&mut self, v: ::std::string::String) {
        self.intamount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_intamount(&mut self) -> &mut ::std::string::String {
        &mut self.intamount
    }

    // Take field
    pub fn take_intamount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.intamount, ::std::string::String::new())
    }

    // string duedate = 18;


    pub fn get_duedate(&self) -> &str {
        &self.duedate
    }
    pub fn clear_duedate(&mut self) {
        self.duedate.clear();
    }

    // Param is passed by value, moved
    pub fn set_duedate(&mut self, v: ::std::string::String) {
        self.duedate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_duedate(&mut self) -> &mut ::std::string::String {
        &mut self.duedate
    }

    // Take field
    pub fn take_duedate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.duedate, ::std::string::String::new())
    }

    // string group = 19;


    pub fn get_group(&self) -> &str {
        &self.group
    }
    pub fn clear_group(&mut self) {
        self.group.clear();
    }

    // Param is passed by value, moved
    pub fn set_group(&mut self, v: ::std::string::String) {
        self.group = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group(&mut self) -> &mut ::std::string::String {
        &mut self.group
    }

    // Take field
    pub fn take_group(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group, ::std::string::String::new())
    }

    // string llg = 20;


    pub fn get_llg(&self) -> &str {
        &self.llg
    }
    pub fn clear_llg(&mut self) {
        self.llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_llg(&mut self, v: ::std::string::String) {
        self.llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_llg(&mut self) -> &mut ::std::string::String {
        &mut self.llg
    }

    // Take field
    pub fn take_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.llg, ::std::string::String::new())
    }

    // string currency = 21;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // double tot_int_amt = 22;


    pub fn get_tot_int_amt(&self) -> f64 {
        self.tot_int_amt
    }
    pub fn clear_tot_int_amt(&mut self) {
        self.tot_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_int_amt(&mut self, v: f64) {
        self.tot_int_amt = v;
    }

    // double tot_prin_amt = 23;


    pub fn get_tot_prin_amt(&self) -> f64 {
        self.tot_prin_amt
    }
    pub fn clear_tot_prin_amt(&mut self) {
        self.tot_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_prin_amt(&mut self, v: f64) {
        self.tot_prin_amt = v;
    }

    // repeated .Cashflow cashflows = 24;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_no)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_status)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prd_code)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_no)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.outstanding_bal = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amt = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.in_date = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tenurs = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.del_cnt)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cif_no)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pan_no)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.intrate = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bgl)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cgl)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branchcode)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.intamount)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.duedate)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.llg)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_int_amt = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_prin_amt = tmp;
                },
                24 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_no);
        }
        if !self.card_status.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.card_status);
        }
        if !self.prd_code.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.prd_code);
        }
        if !self.acc_no.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.acc_no);
        }
        if self.outstanding_bal != 0. {
            my_size += 9;
        }
        if self.emi_amt != 0. {
            my_size += 9;
        }
        if self.in_date != 0 {
            my_size += ::protobuf::rt::value_size(7, self.in_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tenurs != 0. {
            my_size += 9;
        }
        if !self.del_cnt.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.del_cnt);
        }
        if !self.cif_no.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.cif_no);
        }
        if !self.pan_no.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.pan_no);
        }
        if self.intrate != 0. {
            my_size += 9;
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(13, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bgl.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.bgl);
        }
        if !self.cgl.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.cgl);
        }
        if !self.branchcode.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.branchcode);
        }
        if !self.intamount.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.intamount);
        }
        if !self.duedate.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.duedate);
        }
        if !self.group.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.group);
        }
        if !self.llg.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.llg);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.currency);
        }
        if self.tot_int_amt != 0. {
            my_size += 10;
        }
        if self.tot_prin_amt != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_no.is_empty() {
            os.write_string(1, &self.card_no)?;
        }
        if !self.card_status.is_empty() {
            os.write_string(2, &self.card_status)?;
        }
        if !self.prd_code.is_empty() {
            os.write_string(3, &self.prd_code)?;
        }
        if !self.acc_no.is_empty() {
            os.write_string(4, &self.acc_no)?;
        }
        if self.outstanding_bal != 0. {
            os.write_double(5, self.outstanding_bal)?;
        }
        if self.emi_amt != 0. {
            os.write_double(6, self.emi_amt)?;
        }
        if self.in_date != 0 {
            os.write_int64(7, self.in_date)?;
        }
        if self.tenurs != 0. {
            os.write_double(8, self.tenurs)?;
        }
        if !self.del_cnt.is_empty() {
            os.write_string(9, &self.del_cnt)?;
        }
        if !self.cif_no.is_empty() {
            os.write_string(10, &self.cif_no)?;
        }
        if !self.pan_no.is_empty() {
            os.write_string(11, &self.pan_no)?;
        }
        if self.intrate != 0. {
            os.write_double(12, self.intrate)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(13, self.maturity_date)?;
        }
        if !self.bgl.is_empty() {
            os.write_string(14, &self.bgl)?;
        }
        if !self.cgl.is_empty() {
            os.write_string(15, &self.cgl)?;
        }
        if !self.branchcode.is_empty() {
            os.write_string(16, &self.branchcode)?;
        }
        if !self.intamount.is_empty() {
            os.write_string(17, &self.intamount)?;
        }
        if !self.duedate.is_empty() {
            os.write_string(18, &self.duedate)?;
        }
        if !self.group.is_empty() {
            os.write_string(19, &self.group)?;
        }
        if !self.llg.is_empty() {
            os.write_string(20, &self.llg)?;
        }
        if !self.currency.is_empty() {
            os.write_string(21, &self.currency)?;
        }
        if self.tot_int_amt != 0. {
            os.write_double(22, self.tot_int_amt)?;
        }
        if self.tot_prin_amt != 0. {
            os.write_double(23, self.tot_prin_amt)?;
        }
        for v in &self.cashflows {
            os.write_tag(24, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_no",
                |m: &AccountWithCashflows| { &m.card_no },
                |m: &mut AccountWithCashflows| { &mut m.card_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_status",
                |m: &AccountWithCashflows| { &m.card_status },
                |m: &mut AccountWithCashflows| { &mut m.card_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prd_code",
                |m: &AccountWithCashflows| { &m.prd_code },
                |m: &mut AccountWithCashflows| { &mut m.prd_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acc_no",
                |m: &AccountWithCashflows| { &m.acc_no },
                |m: &mut AccountWithCashflows| { &mut m.acc_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "outstanding_bal",
                |m: &AccountWithCashflows| { &m.outstanding_bal },
                |m: &mut AccountWithCashflows| { &mut m.outstanding_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "emi_amt",
                |m: &AccountWithCashflows| { &m.emi_amt },
                |m: &mut AccountWithCashflows| { &mut m.emi_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "in_date",
                |m: &AccountWithCashflows| { &m.in_date },
                |m: &mut AccountWithCashflows| { &mut m.in_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tenurs",
                |m: &AccountWithCashflows| { &m.tenurs },
                |m: &mut AccountWithCashflows| { &mut m.tenurs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "del_cnt",
                |m: &AccountWithCashflows| { &m.del_cnt },
                |m: &mut AccountWithCashflows| { &mut m.del_cnt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cif_no",
                |m: &AccountWithCashflows| { &m.cif_no },
                |m: &mut AccountWithCashflows| { &mut m.cif_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pan_no",
                |m: &AccountWithCashflows| { &m.pan_no },
                |m: &mut AccountWithCashflows| { &mut m.pan_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "intrate",
                |m: &AccountWithCashflows| { &m.intrate },
                |m: &mut AccountWithCashflows| { &mut m.intrate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "maturity_date",
                |m: &AccountWithCashflows| { &m.maturity_date },
                |m: &mut AccountWithCashflows| { &mut m.maturity_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bgl",
                |m: &AccountWithCashflows| { &m.bgl },
                |m: &mut AccountWithCashflows| { &mut m.bgl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cgl",
                |m: &AccountWithCashflows| { &m.cgl },
                |m: &mut AccountWithCashflows| { &mut m.cgl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "branchcode",
                |m: &AccountWithCashflows| { &m.branchcode },
                |m: &mut AccountWithCashflows| { &mut m.branchcode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "intamount",
                |m: &AccountWithCashflows| { &m.intamount },
                |m: &mut AccountWithCashflows| { &mut m.intamount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "duedate",
                |m: &AccountWithCashflows| { &m.duedate },
                |m: &mut AccountWithCashflows| { &mut m.duedate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group",
                |m: &AccountWithCashflows| { &m.group },
                |m: &mut AccountWithCashflows| { &mut m.group },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "llg",
                |m: &AccountWithCashflows| { &m.llg },
                |m: &mut AccountWithCashflows| { &mut m.llg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &AccountWithCashflows| { &m.currency },
                |m: &mut AccountWithCashflows| { &mut m.currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_int_amt",
                |m: &AccountWithCashflows| { &m.tot_int_amt },
                |m: &mut AccountWithCashflows| { &mut m.tot_int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_prin_amt",
                |m: &AccountWithCashflows| { &m.tot_prin_amt },
                |m: &mut AccountWithCashflows| { &mut m.tot_prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.card_no.clear();
        self.card_status.clear();
        self.prd_code.clear();
        self.acc_no.clear();
        self.outstanding_bal = 0.;
        self.emi_amt = 0.;
        self.in_date = 0;
        self.tenurs = 0.;
        self.del_cnt.clear();
        self.cif_no.clear();
        self.pan_no.clear();
        self.intrate = 0.;
        self.maturity_date = 0;
        self.bgl.clear();
        self.cgl.clear();
        self.branchcode.clear();
        self.intamount.clear();
        self.duedate.clear();
        self.group.clear();
        self.llg.clear();
        self.currency.clear();
        self.tot_int_amt = 0.;
        self.tot_prin_amt = 0.;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12cf_ubs_loans.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\
    \x20\x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07\
    prinAmt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xa6\x05\n\x14A\
    ccountWithCashflows\x12\x17\n\x07card_no\x18\x01\x20\x01(\tR\x06cardNo\
    \x12\x1f\n\x0bcard_status\x18\x02\x20\x01(\tR\ncardStatus\x12\x19\n\x08p\
    rd_code\x18\x03\x20\x01(\tR\x07prdCode\x12\x15\n\x06acc_no\x18\x04\x20\
    \x01(\tR\x05accNo\x12'\n\x0foutstanding_bal\x18\x05\x20\x01(\x01R\x0eout\
    standingBal\x12\x17\n\x07emi_amt\x18\x06\x20\x01(\x01R\x06emiAmt\x12\x17\
    \n\x07in_date\x18\x07\x20\x01(\x03R\x06inDate\x12\x16\n\x06tenurs\x18\
    \x08\x20\x01(\x01R\x06tenurs\x12\x17\n\x07del_cnt\x18\t\x20\x01(\tR\x06d\
    elCnt\x12\x15\n\x06cif_no\x18\n\x20\x01(\tR\x05cifNo\x12\x15\n\x06pan_no\
    \x18\x0b\x20\x01(\tR\x05panNo\x12\x18\n\x07intrate\x18\x0c\x20\x01(\x01R\
    \x07intrate\x12#\n\rmaturity_date\x18\r\x20\x01(\x03R\x0cmaturityDate\
    \x12\x10\n\x03bgl\x18\x0e\x20\x01(\tR\x03bgl\x12\x10\n\x03cgl\x18\x0f\
    \x20\x01(\tR\x03cgl\x12\x1e\n\nbranchcode\x18\x10\x20\x01(\tR\nbranchcod\
    e\x12\x1c\n\tintamount\x18\x11\x20\x01(\tR\tintamount\x12\x18\n\x07dueda\
    te\x18\x12\x20\x01(\tR\x07duedate\x12\x14\n\x05group\x18\x13\x20\x01(\tR\
    \x05group\x12\x10\n\x03llg\x18\x14\x20\x01(\tR\x03llg\x12\x1a\n\x08curre\
    ncy\x18\x15\x20\x01(\tR\x08currency\x12\x1e\n\x0btot_int_amt\x18\x16\x20\
    \x01(\x01R\ttotIntAmt\x12\x20\n\x0ctot_prin_amt\x18\x17\x20\x01(\x01R\nt\
    otPrinAmt\x12'\n\tcashflows\x18\x18\x20\x03(\x0b2\t.CashflowR\tcashflows\
    b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
