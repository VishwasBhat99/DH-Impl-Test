// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `maturity.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub acc_no: ::std::string::String,
    pub br_cd: i64,
    pub cust_id: i64,
    pub ucic_id: i64,
    pub ccy: ::std::string::String,
    pub prod_cd: i64,
    pub gl_cd: i64,
    pub gl_comp_portion: ::std::string::String,
    pub acc_open_dt: i64,
    pub effc_dt: i64,
    pub bal_os: f64,
    pub bal_os_cly: f64,
    pub int_comp_type: ::std::string::String,
    pub compo_int_amt: f64,
    pub int_rt: f64,
    pub mat_dt: i64,
    pub dep_amt: f64,
    pub dep_amt_lcy: f64,
    pub int_amt: f64,
    pub int_acc_amt: f64,
    pub non_with_flag: ::std::string::String,
    pub notice_day: ::std::string::String,
    pub cust_const_code: i64,
    pub cntrct_num: i64,
    pub as_on: i64,
    pub comp_freq: i64,
    pub pay_freq: i64,
    pub resid_days: i64,
    pub cntrct_days: i64,
    pub dumy: ::std::string::String,
    pub clients_code: ::std::string::String,
    pub client_type: ::std::string::String,
    pub clients_name: ::std::string::String,
    pub clients_bsr_type_flg: ::std::string::String,
    pub clients_busdivn_code: ::std::string::String,
    pub clients_const_code: ::std::string::String,
    pub clients_cust_sub_catg: ::std::string::String,
    pub clients_group_code: ::std::string::String,
    pub clients_pan_gir_num: ::std::string::String,
    pub clients_risk_categorization: ::std::string::String,
    pub clients_risk_cntry: ::std::string::String,
    pub clients_segment_code: ::std::string::String,
    pub corpcl_client_name: ::std::string::String,
    pub corpcl_orgn_qualifier: ::std::string::String,
    pub corpcl_indus_code: ::std::string::String,
    pub corpcl_sub_indus_code: ::std::string::String,
    pub corpcl_nature_of_bus1: ::std::string::String,
    pub corpcl_nature_of_bus2: ::std::string::String,
    pub corpcl_nature_of_bus3: ::std::string::String,
    pub corpcl_scheduled_bank: ::std::string::String,
    pub corpcl_sovereign_flg: ::std::string::String,
    pub corpcl_type_of_sovereign: ::std::string::String,
    pub corpcl_cntry_code: ::std::string::String,
    pub corpcl_central_state_flg: ::std::string::String,
    pub corpcl_public_sector_flg: ::std::string::String,
    pub corpcl_primary_dlr_flg: ::std::string::String,
    pub corpcl_multilateral_bank: ::std::string::String,
    pub corpcl_connp_inv_num: ::std::string::String,
    pub corpcl_bc_gross_turnover: f64,
    pub t1: ::std::string::String,
    pub t2: ::std::string::String,
    pub t3: ::std::string::String,
    pub t4: ::std::string::String,
    pub w4b_cd: i64,
    pub balm_llg: ::std::string::String,
    pub care_llg: ::std::string::String,
    pub ba_llg: ::std::string::String,
    pub res_tenor: ::std::string::String,
    pub cont_tenor: ::std::string::String,
    pub rep_tenor: ::std::string::String,
    pub cust_cons_code: ::std::string::String,
    pub industry: ::std::string::String,
    pub division: ::std::string::String,
    pub cust_initial_dep_total_amount: ::std::string::String,
    pub cust_total_deposit_amount: ::std::string::String,
    pub is_with_drawable: ::std::string::String,
    pub is_custody_ac: ::std::string::String,
    pub is_clearing_ac: ::std::string::String,
    pub is_cash_managment: ::std::string::String,
    pub is_tax_saving: ::std::string::String,
    pub is_under_lien: ::std::string::String,
    pub is_wealth_mang: ::std::string::String,
    pub pta_1: ::std::string::String,
    pub pta_2: ::std::string::String,
    pub pta_3: ::std::string::String,
    pub pta_4: ::std::string::String,
    pub pta_5: ::std::string::String,
    pub tot_int_amt: f64,
    pub tot_prin_amt: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string acc_no = 1;


    pub fn get_acc_no(&self) -> &str {
        &self.acc_no
    }
    pub fn clear_acc_no(&mut self) {
        self.acc_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_no(&mut self, v: ::std::string::String) {
        self.acc_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_no(&mut self) -> &mut ::std::string::String {
        &mut self.acc_no
    }

    // Take field
    pub fn take_acc_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_no, ::std::string::String::new())
    }

    // int64 br_cd = 2;


    pub fn get_br_cd(&self) -> i64 {
        self.br_cd
    }
    pub fn clear_br_cd(&mut self) {
        self.br_cd = 0;
    }

    // Param is passed by value, moved
    pub fn set_br_cd(&mut self, v: i64) {
        self.br_cd = v;
    }

    // int64 cust_id = 3;


    pub fn get_cust_id(&self) -> i64 {
        self.cust_id
    }
    pub fn clear_cust_id(&mut self) {
        self.cust_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: i64) {
        self.cust_id = v;
    }

    // int64 ucic_id = 4;


    pub fn get_ucic_id(&self) -> i64 {
        self.ucic_id
    }
    pub fn clear_ucic_id(&mut self) {
        self.ucic_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_ucic_id(&mut self, v: i64) {
        self.ucic_id = v;
    }

    // string ccy = 5;


    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }
    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    // int64 prod_cd = 6;


    pub fn get_prod_cd(&self) -> i64 {
        self.prod_cd
    }
    pub fn clear_prod_cd(&mut self) {
        self.prod_cd = 0;
    }

    // Param is passed by value, moved
    pub fn set_prod_cd(&mut self, v: i64) {
        self.prod_cd = v;
    }

    // int64 gl_cd = 7;


    pub fn get_gl_cd(&self) -> i64 {
        self.gl_cd
    }
    pub fn clear_gl_cd(&mut self) {
        self.gl_cd = 0;
    }

    // Param is passed by value, moved
    pub fn set_gl_cd(&mut self, v: i64) {
        self.gl_cd = v;
    }

    // string gl_comp_portion = 8;


    pub fn get_gl_comp_portion(&self) -> &str {
        &self.gl_comp_portion
    }
    pub fn clear_gl_comp_portion(&mut self) {
        self.gl_comp_portion.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_comp_portion(&mut self, v: ::std::string::String) {
        self.gl_comp_portion = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_comp_portion(&mut self) -> &mut ::std::string::String {
        &mut self.gl_comp_portion
    }

    // Take field
    pub fn take_gl_comp_portion(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_comp_portion, ::std::string::String::new())
    }

    // int64 acc_open_dt = 9;


    pub fn get_acc_open_dt(&self) -> i64 {
        self.acc_open_dt
    }
    pub fn clear_acc_open_dt(&mut self) {
        self.acc_open_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_acc_open_dt(&mut self, v: i64) {
        self.acc_open_dt = v;
    }

    // int64 effc_dt = 10;


    pub fn get_effc_dt(&self) -> i64 {
        self.effc_dt
    }
    pub fn clear_effc_dt(&mut self) {
        self.effc_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_effc_dt(&mut self, v: i64) {
        self.effc_dt = v;
    }

    // double bal_os = 11;


    pub fn get_bal_os(&self) -> f64 {
        self.bal_os
    }
    pub fn clear_bal_os(&mut self) {
        self.bal_os = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bal_os(&mut self, v: f64) {
        self.bal_os = v;
    }

    // double bal_os_cly = 12;


    pub fn get_bal_os_cly(&self) -> f64 {
        self.bal_os_cly
    }
    pub fn clear_bal_os_cly(&mut self) {
        self.bal_os_cly = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bal_os_cly(&mut self, v: f64) {
        self.bal_os_cly = v;
    }

    // string int_comp_type = 13;


    pub fn get_int_comp_type(&self) -> &str {
        &self.int_comp_type
    }
    pub fn clear_int_comp_type(&mut self) {
        self.int_comp_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_comp_type(&mut self, v: ::std::string::String) {
        self.int_comp_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_comp_type(&mut self) -> &mut ::std::string::String {
        &mut self.int_comp_type
    }

    // Take field
    pub fn take_int_comp_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_comp_type, ::std::string::String::new())
    }

    // double compo_int_amt = 14;


    pub fn get_compo_int_amt(&self) -> f64 {
        self.compo_int_amt
    }
    pub fn clear_compo_int_amt(&mut self) {
        self.compo_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_compo_int_amt(&mut self, v: f64) {
        self.compo_int_amt = v;
    }

    // double int_rt = 15;


    pub fn get_int_rt(&self) -> f64 {
        self.int_rt
    }
    pub fn clear_int_rt(&mut self) {
        self.int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rt(&mut self, v: f64) {
        self.int_rt = v;
    }

    // int64 mat_dt = 16;


    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }
    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    // double dep_amt = 17;


    pub fn get_dep_amt(&self) -> f64 {
        self.dep_amt
    }
    pub fn clear_dep_amt(&mut self) {
        self.dep_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dep_amt(&mut self, v: f64) {
        self.dep_amt = v;
    }

    // double dep_amt_lcy = 18;


    pub fn get_dep_amt_lcy(&self) -> f64 {
        self.dep_amt_lcy
    }
    pub fn clear_dep_amt_lcy(&mut self) {
        self.dep_amt_lcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dep_amt_lcy(&mut self, v: f64) {
        self.dep_amt_lcy = v;
    }

    // double int_amt = 19;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double int_acc_amt = 20;


    pub fn get_int_acc_amt(&self) -> f64 {
        self.int_acc_amt
    }
    pub fn clear_int_acc_amt(&mut self) {
        self.int_acc_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_acc_amt(&mut self, v: f64) {
        self.int_acc_amt = v;
    }

    // string non_with_flag = 21;


    pub fn get_non_with_flag(&self) -> &str {
        &self.non_with_flag
    }
    pub fn clear_non_with_flag(&mut self) {
        self.non_with_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_non_with_flag(&mut self, v: ::std::string::String) {
        self.non_with_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_non_with_flag(&mut self) -> &mut ::std::string::String {
        &mut self.non_with_flag
    }

    // Take field
    pub fn take_non_with_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.non_with_flag, ::std::string::String::new())
    }

    // string notice_day = 22;


    pub fn get_notice_day(&self) -> &str {
        &self.notice_day
    }
    pub fn clear_notice_day(&mut self) {
        self.notice_day.clear();
    }

    // Param is passed by value, moved
    pub fn set_notice_day(&mut self, v: ::std::string::String) {
        self.notice_day = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_notice_day(&mut self) -> &mut ::std::string::String {
        &mut self.notice_day
    }

    // Take field
    pub fn take_notice_day(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.notice_day, ::std::string::String::new())
    }

    // int64 cust_const_code = 23;


    pub fn get_cust_const_code(&self) -> i64 {
        self.cust_const_code
    }
    pub fn clear_cust_const_code(&mut self) {
        self.cust_const_code = 0;
    }

    // Param is passed by value, moved
    pub fn set_cust_const_code(&mut self, v: i64) {
        self.cust_const_code = v;
    }

    // int64 cntrct_num = 24;


    pub fn get_cntrct_num(&self) -> i64 {
        self.cntrct_num
    }
    pub fn clear_cntrct_num(&mut self) {
        self.cntrct_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_cntrct_num(&mut self, v: i64) {
        self.cntrct_num = v;
    }

    // int64 as_on = 25;


    pub fn get_as_on(&self) -> i64 {
        self.as_on
    }
    pub fn clear_as_on(&mut self) {
        self.as_on = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on(&mut self, v: i64) {
        self.as_on = v;
    }

    // int64 comp_freq = 26;


    pub fn get_comp_freq(&self) -> i64 {
        self.comp_freq
    }
    pub fn clear_comp_freq(&mut self) {
        self.comp_freq = 0;
    }

    // Param is passed by value, moved
    pub fn set_comp_freq(&mut self, v: i64) {
        self.comp_freq = v;
    }

    // int64 pay_freq = 27;


    pub fn get_pay_freq(&self) -> i64 {
        self.pay_freq
    }
    pub fn clear_pay_freq(&mut self) {
        self.pay_freq = 0;
    }

    // Param is passed by value, moved
    pub fn set_pay_freq(&mut self, v: i64) {
        self.pay_freq = v;
    }

    // int64 resid_days = 28;


    pub fn get_resid_days(&self) -> i64 {
        self.resid_days
    }
    pub fn clear_resid_days(&mut self) {
        self.resid_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_resid_days(&mut self, v: i64) {
        self.resid_days = v;
    }

    // int64 cntrct_days = 29;


    pub fn get_cntrct_days(&self) -> i64 {
        self.cntrct_days
    }
    pub fn clear_cntrct_days(&mut self) {
        self.cntrct_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_cntrct_days(&mut self, v: i64) {
        self.cntrct_days = v;
    }

    // string dumy = 30;


    pub fn get_dumy(&self) -> &str {
        &self.dumy
    }
    pub fn clear_dumy(&mut self) {
        self.dumy.clear();
    }

    // Param is passed by value, moved
    pub fn set_dumy(&mut self, v: ::std::string::String) {
        self.dumy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dumy(&mut self) -> &mut ::std::string::String {
        &mut self.dumy
    }

    // Take field
    pub fn take_dumy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dumy, ::std::string::String::new())
    }

    // string clients_code = 31;


    pub fn get_clients_code(&self) -> &str {
        &self.clients_code
    }
    pub fn clear_clients_code(&mut self) {
        self.clients_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_code(&mut self, v: ::std::string::String) {
        self.clients_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_code
    }

    // Take field
    pub fn take_clients_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_code, ::std::string::String::new())
    }

    // string client_type = 32;


    pub fn get_client_type(&self) -> &str {
        &self.client_type
    }
    pub fn clear_client_type(&mut self) {
        self.client_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_type(&mut self, v: ::std::string::String) {
        self.client_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_type(&mut self) -> &mut ::std::string::String {
        &mut self.client_type
    }

    // Take field
    pub fn take_client_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_type, ::std::string::String::new())
    }

    // string clients_name = 33;


    pub fn get_clients_name(&self) -> &str {
        &self.clients_name
    }
    pub fn clear_clients_name(&mut self) {
        self.clients_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_name(&mut self, v: ::std::string::String) {
        self.clients_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_name(&mut self) -> &mut ::std::string::String {
        &mut self.clients_name
    }

    // Take field
    pub fn take_clients_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_name, ::std::string::String::new())
    }

    // string clients_bsr_type_flg = 34;


    pub fn get_clients_bsr_type_flg(&self) -> &str {
        &self.clients_bsr_type_flg
    }
    pub fn clear_clients_bsr_type_flg(&mut self) {
        self.clients_bsr_type_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_bsr_type_flg(&mut self, v: ::std::string::String) {
        self.clients_bsr_type_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_bsr_type_flg(&mut self) -> &mut ::std::string::String {
        &mut self.clients_bsr_type_flg
    }

    // Take field
    pub fn take_clients_bsr_type_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_bsr_type_flg, ::std::string::String::new())
    }

    // string clients_busdivn_code = 35;


    pub fn get_clients_busdivn_code(&self) -> &str {
        &self.clients_busdivn_code
    }
    pub fn clear_clients_busdivn_code(&mut self) {
        self.clients_busdivn_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_busdivn_code(&mut self, v: ::std::string::String) {
        self.clients_busdivn_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_busdivn_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_busdivn_code
    }

    // Take field
    pub fn take_clients_busdivn_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_busdivn_code, ::std::string::String::new())
    }

    // string clients_const_code = 36;


    pub fn get_clients_const_code(&self) -> &str {
        &self.clients_const_code
    }
    pub fn clear_clients_const_code(&mut self) {
        self.clients_const_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_const_code(&mut self, v: ::std::string::String) {
        self.clients_const_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_const_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_const_code
    }

    // Take field
    pub fn take_clients_const_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_const_code, ::std::string::String::new())
    }

    // string clients_cust_sub_catg = 37;


    pub fn get_clients_cust_sub_catg(&self) -> &str {
        &self.clients_cust_sub_catg
    }
    pub fn clear_clients_cust_sub_catg(&mut self) {
        self.clients_cust_sub_catg.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_cust_sub_catg(&mut self, v: ::std::string::String) {
        self.clients_cust_sub_catg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_cust_sub_catg(&mut self) -> &mut ::std::string::String {
        &mut self.clients_cust_sub_catg
    }

    // Take field
    pub fn take_clients_cust_sub_catg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_cust_sub_catg, ::std::string::String::new())
    }

    // string clients_group_code = 38;


    pub fn get_clients_group_code(&self) -> &str {
        &self.clients_group_code
    }
    pub fn clear_clients_group_code(&mut self) {
        self.clients_group_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_group_code(&mut self, v: ::std::string::String) {
        self.clients_group_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_group_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_group_code
    }

    // Take field
    pub fn take_clients_group_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_group_code, ::std::string::String::new())
    }

    // string clients_pan_gir_num = 39;


    pub fn get_clients_pan_gir_num(&self) -> &str {
        &self.clients_pan_gir_num
    }
    pub fn clear_clients_pan_gir_num(&mut self) {
        self.clients_pan_gir_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_pan_gir_num(&mut self, v: ::std::string::String) {
        self.clients_pan_gir_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_pan_gir_num(&mut self) -> &mut ::std::string::String {
        &mut self.clients_pan_gir_num
    }

    // Take field
    pub fn take_clients_pan_gir_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_pan_gir_num, ::std::string::String::new())
    }

    // string clients_risk_categorization = 40;


    pub fn get_clients_risk_categorization(&self) -> &str {
        &self.clients_risk_categorization
    }
    pub fn clear_clients_risk_categorization(&mut self) {
        self.clients_risk_categorization.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_risk_categorization(&mut self, v: ::std::string::String) {
        self.clients_risk_categorization = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_risk_categorization(&mut self) -> &mut ::std::string::String {
        &mut self.clients_risk_categorization
    }

    // Take field
    pub fn take_clients_risk_categorization(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_risk_categorization, ::std::string::String::new())
    }

    // string clients_risk_cntry = 41;


    pub fn get_clients_risk_cntry(&self) -> &str {
        &self.clients_risk_cntry
    }
    pub fn clear_clients_risk_cntry(&mut self) {
        self.clients_risk_cntry.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_risk_cntry(&mut self, v: ::std::string::String) {
        self.clients_risk_cntry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_risk_cntry(&mut self) -> &mut ::std::string::String {
        &mut self.clients_risk_cntry
    }

    // Take field
    pub fn take_clients_risk_cntry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_risk_cntry, ::std::string::String::new())
    }

    // string clients_segment_code = 42;


    pub fn get_clients_segment_code(&self) -> &str {
        &self.clients_segment_code
    }
    pub fn clear_clients_segment_code(&mut self) {
        self.clients_segment_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_segment_code(&mut self, v: ::std::string::String) {
        self.clients_segment_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_segment_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_segment_code
    }

    // Take field
    pub fn take_clients_segment_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_segment_code, ::std::string::String::new())
    }

    // string corpcl_client_name = 43;


    pub fn get_corpcl_client_name(&self) -> &str {
        &self.corpcl_client_name
    }
    pub fn clear_corpcl_client_name(&mut self) {
        self.corpcl_client_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_client_name(&mut self, v: ::std::string::String) {
        self.corpcl_client_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_client_name(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_client_name
    }

    // Take field
    pub fn take_corpcl_client_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_client_name, ::std::string::String::new())
    }

    // string corpcl_orgn_qualifier = 44;


    pub fn get_corpcl_orgn_qualifier(&self) -> &str {
        &self.corpcl_orgn_qualifier
    }
    pub fn clear_corpcl_orgn_qualifier(&mut self) {
        self.corpcl_orgn_qualifier.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_orgn_qualifier(&mut self, v: ::std::string::String) {
        self.corpcl_orgn_qualifier = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_orgn_qualifier(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_orgn_qualifier
    }

    // Take field
    pub fn take_corpcl_orgn_qualifier(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_orgn_qualifier, ::std::string::String::new())
    }

    // string corpcl_indus_code = 45;


    pub fn get_corpcl_indus_code(&self) -> &str {
        &self.corpcl_indus_code
    }
    pub fn clear_corpcl_indus_code(&mut self) {
        self.corpcl_indus_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_indus_code(&mut self, v: ::std::string::String) {
        self.corpcl_indus_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_indus_code(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_indus_code
    }

    // Take field
    pub fn take_corpcl_indus_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_indus_code, ::std::string::String::new())
    }

    // string corpcl_sub_indus_code = 46;


    pub fn get_corpcl_sub_indus_code(&self) -> &str {
        &self.corpcl_sub_indus_code
    }
    pub fn clear_corpcl_sub_indus_code(&mut self) {
        self.corpcl_sub_indus_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_sub_indus_code(&mut self, v: ::std::string::String) {
        self.corpcl_sub_indus_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_sub_indus_code(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_sub_indus_code
    }

    // Take field
    pub fn take_corpcl_sub_indus_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_sub_indus_code, ::std::string::String::new())
    }

    // string corpcl_nature_of_bus1 = 47;


    pub fn get_corpcl_nature_of_bus1(&self) -> &str {
        &self.corpcl_nature_of_bus1
    }
    pub fn clear_corpcl_nature_of_bus1(&mut self) {
        self.corpcl_nature_of_bus1.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_nature_of_bus1(&mut self, v: ::std::string::String) {
        self.corpcl_nature_of_bus1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_nature_of_bus1(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_nature_of_bus1
    }

    // Take field
    pub fn take_corpcl_nature_of_bus1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_nature_of_bus1, ::std::string::String::new())
    }

    // string corpcl_nature_of_bus2 = 48;


    pub fn get_corpcl_nature_of_bus2(&self) -> &str {
        &self.corpcl_nature_of_bus2
    }
    pub fn clear_corpcl_nature_of_bus2(&mut self) {
        self.corpcl_nature_of_bus2.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_nature_of_bus2(&mut self, v: ::std::string::String) {
        self.corpcl_nature_of_bus2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_nature_of_bus2(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_nature_of_bus2
    }

    // Take field
    pub fn take_corpcl_nature_of_bus2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_nature_of_bus2, ::std::string::String::new())
    }

    // string corpcl_nature_of_bus3 = 49;


    pub fn get_corpcl_nature_of_bus3(&self) -> &str {
        &self.corpcl_nature_of_bus3
    }
    pub fn clear_corpcl_nature_of_bus3(&mut self) {
        self.corpcl_nature_of_bus3.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_nature_of_bus3(&mut self, v: ::std::string::String) {
        self.corpcl_nature_of_bus3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_nature_of_bus3(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_nature_of_bus3
    }

    // Take field
    pub fn take_corpcl_nature_of_bus3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_nature_of_bus3, ::std::string::String::new())
    }

    // string corpcl_scheduled_bank = 50;


    pub fn get_corpcl_scheduled_bank(&self) -> &str {
        &self.corpcl_scheduled_bank
    }
    pub fn clear_corpcl_scheduled_bank(&mut self) {
        self.corpcl_scheduled_bank.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_scheduled_bank(&mut self, v: ::std::string::String) {
        self.corpcl_scheduled_bank = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_scheduled_bank(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_scheduled_bank
    }

    // Take field
    pub fn take_corpcl_scheduled_bank(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_scheduled_bank, ::std::string::String::new())
    }

    // string corpcl_sovereign_flg = 51;


    pub fn get_corpcl_sovereign_flg(&self) -> &str {
        &self.corpcl_sovereign_flg
    }
    pub fn clear_corpcl_sovereign_flg(&mut self) {
        self.corpcl_sovereign_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_sovereign_flg(&mut self, v: ::std::string::String) {
        self.corpcl_sovereign_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_sovereign_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_sovereign_flg
    }

    // Take field
    pub fn take_corpcl_sovereign_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_sovereign_flg, ::std::string::String::new())
    }

    // string corpcl_type_of_sovereign = 52;


    pub fn get_corpcl_type_of_sovereign(&self) -> &str {
        &self.corpcl_type_of_sovereign
    }
    pub fn clear_corpcl_type_of_sovereign(&mut self) {
        self.corpcl_type_of_sovereign.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_type_of_sovereign(&mut self, v: ::std::string::String) {
        self.corpcl_type_of_sovereign = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_type_of_sovereign(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_type_of_sovereign
    }

    // Take field
    pub fn take_corpcl_type_of_sovereign(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_type_of_sovereign, ::std::string::String::new())
    }

    // string corpcl_cntry_code = 53;


    pub fn get_corpcl_cntry_code(&self) -> &str {
        &self.corpcl_cntry_code
    }
    pub fn clear_corpcl_cntry_code(&mut self) {
        self.corpcl_cntry_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_cntry_code(&mut self, v: ::std::string::String) {
        self.corpcl_cntry_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_cntry_code(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_cntry_code
    }

    // Take field
    pub fn take_corpcl_cntry_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_cntry_code, ::std::string::String::new())
    }

    // string corpcl_central_state_flg = 54;


    pub fn get_corpcl_central_state_flg(&self) -> &str {
        &self.corpcl_central_state_flg
    }
    pub fn clear_corpcl_central_state_flg(&mut self) {
        self.corpcl_central_state_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_central_state_flg(&mut self, v: ::std::string::String) {
        self.corpcl_central_state_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_central_state_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_central_state_flg
    }

    // Take field
    pub fn take_corpcl_central_state_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_central_state_flg, ::std::string::String::new())
    }

    // string corpcl_public_sector_flg = 55;


    pub fn get_corpcl_public_sector_flg(&self) -> &str {
        &self.corpcl_public_sector_flg
    }
    pub fn clear_corpcl_public_sector_flg(&mut self) {
        self.corpcl_public_sector_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_public_sector_flg(&mut self, v: ::std::string::String) {
        self.corpcl_public_sector_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_public_sector_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_public_sector_flg
    }

    // Take field
    pub fn take_corpcl_public_sector_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_public_sector_flg, ::std::string::String::new())
    }

    // string corpcl_primary_dlr_flg = 56;


    pub fn get_corpcl_primary_dlr_flg(&self) -> &str {
        &self.corpcl_primary_dlr_flg
    }
    pub fn clear_corpcl_primary_dlr_flg(&mut self) {
        self.corpcl_primary_dlr_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_primary_dlr_flg(&mut self, v: ::std::string::String) {
        self.corpcl_primary_dlr_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_primary_dlr_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_primary_dlr_flg
    }

    // Take field
    pub fn take_corpcl_primary_dlr_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_primary_dlr_flg, ::std::string::String::new())
    }

    // string corpcl_multilateral_bank = 57;


    pub fn get_corpcl_multilateral_bank(&self) -> &str {
        &self.corpcl_multilateral_bank
    }
    pub fn clear_corpcl_multilateral_bank(&mut self) {
        self.corpcl_multilateral_bank.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_multilateral_bank(&mut self, v: ::std::string::String) {
        self.corpcl_multilateral_bank = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_multilateral_bank(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_multilateral_bank
    }

    // Take field
    pub fn take_corpcl_multilateral_bank(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_multilateral_bank, ::std::string::String::new())
    }

    // string corpcl_connp_inv_num = 58;


    pub fn get_corpcl_connp_inv_num(&self) -> &str {
        &self.corpcl_connp_inv_num
    }
    pub fn clear_corpcl_connp_inv_num(&mut self) {
        self.corpcl_connp_inv_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_connp_inv_num(&mut self, v: ::std::string::String) {
        self.corpcl_connp_inv_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_connp_inv_num(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_connp_inv_num
    }

    // Take field
    pub fn take_corpcl_connp_inv_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_connp_inv_num, ::std::string::String::new())
    }

    // double corpcl_bc_gross_turnover = 59;


    pub fn get_corpcl_bc_gross_turnover(&self) -> f64 {
        self.corpcl_bc_gross_turnover
    }
    pub fn clear_corpcl_bc_gross_turnover(&mut self) {
        self.corpcl_bc_gross_turnover = 0.;
    }

    // Param is passed by value, moved
    pub fn set_corpcl_bc_gross_turnover(&mut self, v: f64) {
        self.corpcl_bc_gross_turnover = v;
    }

    // string t1 = 60;


    pub fn get_t1(&self) -> &str {
        &self.t1
    }
    pub fn clear_t1(&mut self) {
        self.t1.clear();
    }

    // Param is passed by value, moved
    pub fn set_t1(&mut self, v: ::std::string::String) {
        self.t1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_t1(&mut self) -> &mut ::std::string::String {
        &mut self.t1
    }

    // Take field
    pub fn take_t1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.t1, ::std::string::String::new())
    }

    // string t2 = 61;


    pub fn get_t2(&self) -> &str {
        &self.t2
    }
    pub fn clear_t2(&mut self) {
        self.t2.clear();
    }

    // Param is passed by value, moved
    pub fn set_t2(&mut self, v: ::std::string::String) {
        self.t2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_t2(&mut self) -> &mut ::std::string::String {
        &mut self.t2
    }

    // Take field
    pub fn take_t2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.t2, ::std::string::String::new())
    }

    // string t3 = 62;


    pub fn get_t3(&self) -> &str {
        &self.t3
    }
    pub fn clear_t3(&mut self) {
        self.t3.clear();
    }

    // Param is passed by value, moved
    pub fn set_t3(&mut self, v: ::std::string::String) {
        self.t3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_t3(&mut self) -> &mut ::std::string::String {
        &mut self.t3
    }

    // Take field
    pub fn take_t3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.t3, ::std::string::String::new())
    }

    // string t4 = 63;


    pub fn get_t4(&self) -> &str {
        &self.t4
    }
    pub fn clear_t4(&mut self) {
        self.t4.clear();
    }

    // Param is passed by value, moved
    pub fn set_t4(&mut self, v: ::std::string::String) {
        self.t4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_t4(&mut self) -> &mut ::std::string::String {
        &mut self.t4
    }

    // Take field
    pub fn take_t4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.t4, ::std::string::String::new())
    }

    // int64 w4b_cd = 64;


    pub fn get_w4b_cd(&self) -> i64 {
        self.w4b_cd
    }
    pub fn clear_w4b_cd(&mut self) {
        self.w4b_cd = 0;
    }

    // Param is passed by value, moved
    pub fn set_w4b_cd(&mut self, v: i64) {
        self.w4b_cd = v;
    }

    // string balm_llg = 65;


    pub fn get_balm_llg(&self) -> &str {
        &self.balm_llg
    }
    pub fn clear_balm_llg(&mut self) {
        self.balm_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_balm_llg(&mut self, v: ::std::string::String) {
        self.balm_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balm_llg(&mut self) -> &mut ::std::string::String {
        &mut self.balm_llg
    }

    // Take field
    pub fn take_balm_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balm_llg, ::std::string::String::new())
    }

    // string care_llg = 66;


    pub fn get_care_llg(&self) -> &str {
        &self.care_llg
    }
    pub fn clear_care_llg(&mut self) {
        self.care_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_care_llg(&mut self, v: ::std::string::String) {
        self.care_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_care_llg(&mut self) -> &mut ::std::string::String {
        &mut self.care_llg
    }

    // Take field
    pub fn take_care_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.care_llg, ::std::string::String::new())
    }

    // string ba_llg = 67;


    pub fn get_ba_llg(&self) -> &str {
        &self.ba_llg
    }
    pub fn clear_ba_llg(&mut self) {
        self.ba_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_ba_llg(&mut self, v: ::std::string::String) {
        self.ba_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ba_llg(&mut self) -> &mut ::std::string::String {
        &mut self.ba_llg
    }

    // Take field
    pub fn take_ba_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ba_llg, ::std::string::String::new())
    }

    // string res_tenor = 68;


    pub fn get_res_tenor(&self) -> &str {
        &self.res_tenor
    }
    pub fn clear_res_tenor(&mut self) {
        self.res_tenor.clear();
    }

    // Param is passed by value, moved
    pub fn set_res_tenor(&mut self, v: ::std::string::String) {
        self.res_tenor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_res_tenor(&mut self) -> &mut ::std::string::String {
        &mut self.res_tenor
    }

    // Take field
    pub fn take_res_tenor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.res_tenor, ::std::string::String::new())
    }

    // string cont_tenor = 69;


    pub fn get_cont_tenor(&self) -> &str {
        &self.cont_tenor
    }
    pub fn clear_cont_tenor(&mut self) {
        self.cont_tenor.clear();
    }

    // Param is passed by value, moved
    pub fn set_cont_tenor(&mut self, v: ::std::string::String) {
        self.cont_tenor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cont_tenor(&mut self) -> &mut ::std::string::String {
        &mut self.cont_tenor
    }

    // Take field
    pub fn take_cont_tenor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cont_tenor, ::std::string::String::new())
    }

    // string rep_tenor = 70;


    pub fn get_rep_tenor(&self) -> &str {
        &self.rep_tenor
    }
    pub fn clear_rep_tenor(&mut self) {
        self.rep_tenor.clear();
    }

    // Param is passed by value, moved
    pub fn set_rep_tenor(&mut self, v: ::std::string::String) {
        self.rep_tenor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rep_tenor(&mut self) -> &mut ::std::string::String {
        &mut self.rep_tenor
    }

    // Take field
    pub fn take_rep_tenor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rep_tenor, ::std::string::String::new())
    }

    // string cust_cons_code = 71;


    pub fn get_cust_cons_code(&self) -> &str {
        &self.cust_cons_code
    }
    pub fn clear_cust_cons_code(&mut self) {
        self.cust_cons_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_cons_code(&mut self, v: ::std::string::String) {
        self.cust_cons_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_cons_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_cons_code
    }

    // Take field
    pub fn take_cust_cons_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_cons_code, ::std::string::String::new())
    }

    // string industry = 72;


    pub fn get_industry(&self) -> &str {
        &self.industry
    }
    pub fn clear_industry(&mut self) {
        self.industry.clear();
    }

    // Param is passed by value, moved
    pub fn set_industry(&mut self, v: ::std::string::String) {
        self.industry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_industry(&mut self) -> &mut ::std::string::String {
        &mut self.industry
    }

    // Take field
    pub fn take_industry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.industry, ::std::string::String::new())
    }

    // string division = 73;


    pub fn get_division(&self) -> &str {
        &self.division
    }
    pub fn clear_division(&mut self) {
        self.division.clear();
    }

    // Param is passed by value, moved
    pub fn set_division(&mut self, v: ::std::string::String) {
        self.division = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_division(&mut self) -> &mut ::std::string::String {
        &mut self.division
    }

    // Take field
    pub fn take_division(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.division, ::std::string::String::new())
    }

    // string cust_initial_dep_total_amount = 74;


    pub fn get_cust_initial_dep_total_amount(&self) -> &str {
        &self.cust_initial_dep_total_amount
    }
    pub fn clear_cust_initial_dep_total_amount(&mut self) {
        self.cust_initial_dep_total_amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_initial_dep_total_amount(&mut self, v: ::std::string::String) {
        self.cust_initial_dep_total_amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_initial_dep_total_amount(&mut self) -> &mut ::std::string::String {
        &mut self.cust_initial_dep_total_amount
    }

    // Take field
    pub fn take_cust_initial_dep_total_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_initial_dep_total_amount, ::std::string::String::new())
    }

    // string cust_total_deposit_amount = 75;


    pub fn get_cust_total_deposit_amount(&self) -> &str {
        &self.cust_total_deposit_amount
    }
    pub fn clear_cust_total_deposit_amount(&mut self) {
        self.cust_total_deposit_amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_total_deposit_amount(&mut self, v: ::std::string::String) {
        self.cust_total_deposit_amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_total_deposit_amount(&mut self) -> &mut ::std::string::String {
        &mut self.cust_total_deposit_amount
    }

    // Take field
    pub fn take_cust_total_deposit_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_total_deposit_amount, ::std::string::String::new())
    }

    // string is_with_drawable = 76;


    pub fn get_is_with_drawable(&self) -> &str {
        &self.is_with_drawable
    }
    pub fn clear_is_with_drawable(&mut self) {
        self.is_with_drawable.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_with_drawable(&mut self, v: ::std::string::String) {
        self.is_with_drawable = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_with_drawable(&mut self) -> &mut ::std::string::String {
        &mut self.is_with_drawable
    }

    // Take field
    pub fn take_is_with_drawable(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_with_drawable, ::std::string::String::new())
    }

    // string is_custody_ac = 77;


    pub fn get_is_custody_ac(&self) -> &str {
        &self.is_custody_ac
    }
    pub fn clear_is_custody_ac(&mut self) {
        self.is_custody_ac.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_custody_ac(&mut self, v: ::std::string::String) {
        self.is_custody_ac = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_custody_ac(&mut self) -> &mut ::std::string::String {
        &mut self.is_custody_ac
    }

    // Take field
    pub fn take_is_custody_ac(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_custody_ac, ::std::string::String::new())
    }

    // string is_clearing_ac = 78;


    pub fn get_is_clearing_ac(&self) -> &str {
        &self.is_clearing_ac
    }
    pub fn clear_is_clearing_ac(&mut self) {
        self.is_clearing_ac.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_clearing_ac(&mut self, v: ::std::string::String) {
        self.is_clearing_ac = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_clearing_ac(&mut self) -> &mut ::std::string::String {
        &mut self.is_clearing_ac
    }

    // Take field
    pub fn take_is_clearing_ac(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_clearing_ac, ::std::string::String::new())
    }

    // string is_cash_managment = 79;


    pub fn get_is_cash_managment(&self) -> &str {
        &self.is_cash_managment
    }
    pub fn clear_is_cash_managment(&mut self) {
        self.is_cash_managment.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_cash_managment(&mut self, v: ::std::string::String) {
        self.is_cash_managment = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_cash_managment(&mut self) -> &mut ::std::string::String {
        &mut self.is_cash_managment
    }

    // Take field
    pub fn take_is_cash_managment(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_cash_managment, ::std::string::String::new())
    }

    // string is_tax_saving = 80;


    pub fn get_is_tax_saving(&self) -> &str {
        &self.is_tax_saving
    }
    pub fn clear_is_tax_saving(&mut self) {
        self.is_tax_saving.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_tax_saving(&mut self, v: ::std::string::String) {
        self.is_tax_saving = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_tax_saving(&mut self) -> &mut ::std::string::String {
        &mut self.is_tax_saving
    }

    // Take field
    pub fn take_is_tax_saving(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_tax_saving, ::std::string::String::new())
    }

    // string is_under_lien = 81;


    pub fn get_is_under_lien(&self) -> &str {
        &self.is_under_lien
    }
    pub fn clear_is_under_lien(&mut self) {
        self.is_under_lien.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_under_lien(&mut self, v: ::std::string::String) {
        self.is_under_lien = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_under_lien(&mut self) -> &mut ::std::string::String {
        &mut self.is_under_lien
    }

    // Take field
    pub fn take_is_under_lien(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_under_lien, ::std::string::String::new())
    }

    // string is_wealth_mang = 82;


    pub fn get_is_wealth_mang(&self) -> &str {
        &self.is_wealth_mang
    }
    pub fn clear_is_wealth_mang(&mut self) {
        self.is_wealth_mang.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_wealth_mang(&mut self, v: ::std::string::String) {
        self.is_wealth_mang = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_wealth_mang(&mut self) -> &mut ::std::string::String {
        &mut self.is_wealth_mang
    }

    // Take field
    pub fn take_is_wealth_mang(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_wealth_mang, ::std::string::String::new())
    }

    // string pta_1 = 83;


    pub fn get_pta_1(&self) -> &str {
        &self.pta_1
    }
    pub fn clear_pta_1(&mut self) {
        self.pta_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_pta_1(&mut self, v: ::std::string::String) {
        self.pta_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pta_1(&mut self) -> &mut ::std::string::String {
        &mut self.pta_1
    }

    // Take field
    pub fn take_pta_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pta_1, ::std::string::String::new())
    }

    // string pta_2 = 84;


    pub fn get_pta_2(&self) -> &str {
        &self.pta_2
    }
    pub fn clear_pta_2(&mut self) {
        self.pta_2.clear();
    }

    // Param is passed by value, moved
    pub fn set_pta_2(&mut self, v: ::std::string::String) {
        self.pta_2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pta_2(&mut self) -> &mut ::std::string::String {
        &mut self.pta_2
    }

    // Take field
    pub fn take_pta_2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pta_2, ::std::string::String::new())
    }

    // string pta_3 = 85;


    pub fn get_pta_3(&self) -> &str {
        &self.pta_3
    }
    pub fn clear_pta_3(&mut self) {
        self.pta_3.clear();
    }

    // Param is passed by value, moved
    pub fn set_pta_3(&mut self, v: ::std::string::String) {
        self.pta_3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pta_3(&mut self) -> &mut ::std::string::String {
        &mut self.pta_3
    }

    // Take field
    pub fn take_pta_3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pta_3, ::std::string::String::new())
    }

    // string pta_4 = 86;


    pub fn get_pta_4(&self) -> &str {
        &self.pta_4
    }
    pub fn clear_pta_4(&mut self) {
        self.pta_4.clear();
    }

    // Param is passed by value, moved
    pub fn set_pta_4(&mut self, v: ::std::string::String) {
        self.pta_4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pta_4(&mut self) -> &mut ::std::string::String {
        &mut self.pta_4
    }

    // Take field
    pub fn take_pta_4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pta_4, ::std::string::String::new())
    }

    // string pta_5 = 87;


    pub fn get_pta_5(&self) -> &str {
        &self.pta_5
    }
    pub fn clear_pta_5(&mut self) {
        self.pta_5.clear();
    }

    // Param is passed by value, moved
    pub fn set_pta_5(&mut self, v: ::std::string::String) {
        self.pta_5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pta_5(&mut self) -> &mut ::std::string::String {
        &mut self.pta_5
    }

    // Take field
    pub fn take_pta_5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pta_5, ::std::string::String::new())
    }

    // double tot_int_amt = 88;


    pub fn get_tot_int_amt(&self) -> f64 {
        self.tot_int_amt
    }
    pub fn clear_tot_int_amt(&mut self) {
        self.tot_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_int_amt(&mut self, v: f64) {
        self.tot_int_amt = v;
    }

    // double tot_prin_amt = 89;


    pub fn get_tot_prin_amt(&self) -> f64 {
        self.tot_prin_amt
    }
    pub fn clear_tot_prin_amt(&mut self) {
        self.tot_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_prin_amt(&mut self, v: f64) {
        self.tot_prin_amt = v;
    }

    // repeated .Cashflow cashflows = 90;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_no)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.br_cd = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cust_id = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ucic_id = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.prod_cd = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.gl_cd = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_comp_portion)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acc_open_dt = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.effc_dt = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bal_os = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bal_os_cly = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_comp_type)?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.compo_int_amt = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rt = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.dep_amt = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.dep_amt_lcy = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_acc_amt = tmp;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.non_with_flag)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.notice_day)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cust_const_code = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cntrct_num = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.comp_freq = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pay_freq = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.resid_days = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cntrct_days = tmp;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dumy)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_code)?;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_type)?;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_name)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_bsr_type_flg)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_busdivn_code)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_const_code)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_cust_sub_catg)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_group_code)?;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_pan_gir_num)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_risk_categorization)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_risk_cntry)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_segment_code)?;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_client_name)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_orgn_qualifier)?;
                },
                45 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_indus_code)?;
                },
                46 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_sub_indus_code)?;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_nature_of_bus1)?;
                },
                48 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_nature_of_bus2)?;
                },
                49 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_nature_of_bus3)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_scheduled_bank)?;
                },
                51 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_sovereign_flg)?;
                },
                52 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_type_of_sovereign)?;
                },
                53 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_cntry_code)?;
                },
                54 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_central_state_flg)?;
                },
                55 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_public_sector_flg)?;
                },
                56 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_primary_dlr_flg)?;
                },
                57 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_multilateral_bank)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_connp_inv_num)?;
                },
                59 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.corpcl_bc_gross_turnover = tmp;
                },
                60 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.t1)?;
                },
                61 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.t2)?;
                },
                62 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.t3)?;
                },
                63 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.t4)?;
                },
                64 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.w4b_cd = tmp;
                },
                65 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.balm_llg)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.care_llg)?;
                },
                67 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ba_llg)?;
                },
                68 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.res_tenor)?;
                },
                69 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cont_tenor)?;
                },
                70 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rep_tenor)?;
                },
                71 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_cons_code)?;
                },
                72 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.industry)?;
                },
                73 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.division)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_initial_dep_total_amount)?;
                },
                75 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_total_deposit_amount)?;
                },
                76 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_with_drawable)?;
                },
                77 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_custody_ac)?;
                },
                78 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_clearing_ac)?;
                },
                79 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_cash_managment)?;
                },
                80 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_tax_saving)?;
                },
                81 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_under_lien)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_wealth_mang)?;
                },
                83 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pta_1)?;
                },
                84 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pta_2)?;
                },
                85 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pta_3)?;
                },
                86 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pta_4)?;
                },
                87 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pta_5)?;
                },
                88 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_int_amt = tmp;
                },
                89 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_prin_amt = tmp;
                },
                90 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.acc_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.acc_no);
        }
        if self.br_cd != 0 {
            my_size += ::protobuf::rt::value_size(2, self.br_cd, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cust_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cust_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ucic_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.ucic_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.ccy);
        }
        if self.prod_cd != 0 {
            my_size += ::protobuf::rt::value_size(6, self.prod_cd, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gl_cd != 0 {
            my_size += ::protobuf::rt::value_size(7, self.gl_cd, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.gl_comp_portion.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.gl_comp_portion);
        }
        if self.acc_open_dt != 0 {
            my_size += ::protobuf::rt::value_size(9, self.acc_open_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.effc_dt != 0 {
            my_size += ::protobuf::rt::value_size(10, self.effc_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bal_os != 0. {
            my_size += 9;
        }
        if self.bal_os_cly != 0. {
            my_size += 9;
        }
        if !self.int_comp_type.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.int_comp_type);
        }
        if self.compo_int_amt != 0. {
            my_size += 9;
        }
        if self.int_rt != 0. {
            my_size += 9;
        }
        if self.mat_dt != 0 {
            my_size += ::protobuf::rt::value_size(16, self.mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dep_amt != 0. {
            my_size += 10;
        }
        if self.dep_amt_lcy != 0. {
            my_size += 10;
        }
        if self.int_amt != 0. {
            my_size += 10;
        }
        if self.int_acc_amt != 0. {
            my_size += 10;
        }
        if !self.non_with_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.non_with_flag);
        }
        if !self.notice_day.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.notice_day);
        }
        if self.cust_const_code != 0 {
            my_size += ::protobuf::rt::value_size(23, self.cust_const_code, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cntrct_num != 0 {
            my_size += ::protobuf::rt::value_size(24, self.cntrct_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.as_on != 0 {
            my_size += ::protobuf::rt::value_size(25, self.as_on, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.comp_freq != 0 {
            my_size += ::protobuf::rt::value_size(26, self.comp_freq, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pay_freq != 0 {
            my_size += ::protobuf::rt::value_size(27, self.pay_freq, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.resid_days != 0 {
            my_size += ::protobuf::rt::value_size(28, self.resid_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cntrct_days != 0 {
            my_size += ::protobuf::rt::value_size(29, self.cntrct_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.dumy.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.dumy);
        }
        if !self.clients_code.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.clients_code);
        }
        if !self.client_type.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.client_type);
        }
        if !self.clients_name.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.clients_name);
        }
        if !self.clients_bsr_type_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.clients_bsr_type_flg);
        }
        if !self.clients_busdivn_code.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.clients_busdivn_code);
        }
        if !self.clients_const_code.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.clients_const_code);
        }
        if !self.clients_cust_sub_catg.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.clients_cust_sub_catg);
        }
        if !self.clients_group_code.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.clients_group_code);
        }
        if !self.clients_pan_gir_num.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.clients_pan_gir_num);
        }
        if !self.clients_risk_categorization.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.clients_risk_categorization);
        }
        if !self.clients_risk_cntry.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.clients_risk_cntry);
        }
        if !self.clients_segment_code.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.clients_segment_code);
        }
        if !self.corpcl_client_name.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.corpcl_client_name);
        }
        if !self.corpcl_orgn_qualifier.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.corpcl_orgn_qualifier);
        }
        if !self.corpcl_indus_code.is_empty() {
            my_size += ::protobuf::rt::string_size(45, &self.corpcl_indus_code);
        }
        if !self.corpcl_sub_indus_code.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.corpcl_sub_indus_code);
        }
        if !self.corpcl_nature_of_bus1.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.corpcl_nature_of_bus1);
        }
        if !self.corpcl_nature_of_bus2.is_empty() {
            my_size += ::protobuf::rt::string_size(48, &self.corpcl_nature_of_bus2);
        }
        if !self.corpcl_nature_of_bus3.is_empty() {
            my_size += ::protobuf::rt::string_size(49, &self.corpcl_nature_of_bus3);
        }
        if !self.corpcl_scheduled_bank.is_empty() {
            my_size += ::protobuf::rt::string_size(50, &self.corpcl_scheduled_bank);
        }
        if !self.corpcl_sovereign_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(51, &self.corpcl_sovereign_flg);
        }
        if !self.corpcl_type_of_sovereign.is_empty() {
            my_size += ::protobuf::rt::string_size(52, &self.corpcl_type_of_sovereign);
        }
        if !self.corpcl_cntry_code.is_empty() {
            my_size += ::protobuf::rt::string_size(53, &self.corpcl_cntry_code);
        }
        if !self.corpcl_central_state_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(54, &self.corpcl_central_state_flg);
        }
        if !self.corpcl_public_sector_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(55, &self.corpcl_public_sector_flg);
        }
        if !self.corpcl_primary_dlr_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(56, &self.corpcl_primary_dlr_flg);
        }
        if !self.corpcl_multilateral_bank.is_empty() {
            my_size += ::protobuf::rt::string_size(57, &self.corpcl_multilateral_bank);
        }
        if !self.corpcl_connp_inv_num.is_empty() {
            my_size += ::protobuf::rt::string_size(58, &self.corpcl_connp_inv_num);
        }
        if self.corpcl_bc_gross_turnover != 0. {
            my_size += 10;
        }
        if !self.t1.is_empty() {
            my_size += ::protobuf::rt::string_size(60, &self.t1);
        }
        if !self.t2.is_empty() {
            my_size += ::protobuf::rt::string_size(61, &self.t2);
        }
        if !self.t3.is_empty() {
            my_size += ::protobuf::rt::string_size(62, &self.t3);
        }
        if !self.t4.is_empty() {
            my_size += ::protobuf::rt::string_size(63, &self.t4);
        }
        if self.w4b_cd != 0 {
            my_size += ::protobuf::rt::value_size(64, self.w4b_cd, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.balm_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(65, &self.balm_llg);
        }
        if !self.care_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(66, &self.care_llg);
        }
        if !self.ba_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(67, &self.ba_llg);
        }
        if !self.res_tenor.is_empty() {
            my_size += ::protobuf::rt::string_size(68, &self.res_tenor);
        }
        if !self.cont_tenor.is_empty() {
            my_size += ::protobuf::rt::string_size(69, &self.cont_tenor);
        }
        if !self.rep_tenor.is_empty() {
            my_size += ::protobuf::rt::string_size(70, &self.rep_tenor);
        }
        if !self.cust_cons_code.is_empty() {
            my_size += ::protobuf::rt::string_size(71, &self.cust_cons_code);
        }
        if !self.industry.is_empty() {
            my_size += ::protobuf::rt::string_size(72, &self.industry);
        }
        if !self.division.is_empty() {
            my_size += ::protobuf::rt::string_size(73, &self.division);
        }
        if !self.cust_initial_dep_total_amount.is_empty() {
            my_size += ::protobuf::rt::string_size(74, &self.cust_initial_dep_total_amount);
        }
        if !self.cust_total_deposit_amount.is_empty() {
            my_size += ::protobuf::rt::string_size(75, &self.cust_total_deposit_amount);
        }
        if !self.is_with_drawable.is_empty() {
            my_size += ::protobuf::rt::string_size(76, &self.is_with_drawable);
        }
        if !self.is_custody_ac.is_empty() {
            my_size += ::protobuf::rt::string_size(77, &self.is_custody_ac);
        }
        if !self.is_clearing_ac.is_empty() {
            my_size += ::protobuf::rt::string_size(78, &self.is_clearing_ac);
        }
        if !self.is_cash_managment.is_empty() {
            my_size += ::protobuf::rt::string_size(79, &self.is_cash_managment);
        }
        if !self.is_tax_saving.is_empty() {
            my_size += ::protobuf::rt::string_size(80, &self.is_tax_saving);
        }
        if !self.is_under_lien.is_empty() {
            my_size += ::protobuf::rt::string_size(81, &self.is_under_lien);
        }
        if !self.is_wealth_mang.is_empty() {
            my_size += ::protobuf::rt::string_size(82, &self.is_wealth_mang);
        }
        if !self.pta_1.is_empty() {
            my_size += ::protobuf::rt::string_size(83, &self.pta_1);
        }
        if !self.pta_2.is_empty() {
            my_size += ::protobuf::rt::string_size(84, &self.pta_2);
        }
        if !self.pta_3.is_empty() {
            my_size += ::protobuf::rt::string_size(85, &self.pta_3);
        }
        if !self.pta_4.is_empty() {
            my_size += ::protobuf::rt::string_size(86, &self.pta_4);
        }
        if !self.pta_5.is_empty() {
            my_size += ::protobuf::rt::string_size(87, &self.pta_5);
        }
        if self.tot_int_amt != 0. {
            my_size += 10;
        }
        if self.tot_prin_amt != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.acc_no.is_empty() {
            os.write_string(1, &self.acc_no)?;
        }
        if self.br_cd != 0 {
            os.write_int64(2, self.br_cd)?;
        }
        if self.cust_id != 0 {
            os.write_int64(3, self.cust_id)?;
        }
        if self.ucic_id != 0 {
            os.write_int64(4, self.ucic_id)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(5, &self.ccy)?;
        }
        if self.prod_cd != 0 {
            os.write_int64(6, self.prod_cd)?;
        }
        if self.gl_cd != 0 {
            os.write_int64(7, self.gl_cd)?;
        }
        if !self.gl_comp_portion.is_empty() {
            os.write_string(8, &self.gl_comp_portion)?;
        }
        if self.acc_open_dt != 0 {
            os.write_int64(9, self.acc_open_dt)?;
        }
        if self.effc_dt != 0 {
            os.write_int64(10, self.effc_dt)?;
        }
        if self.bal_os != 0. {
            os.write_double(11, self.bal_os)?;
        }
        if self.bal_os_cly != 0. {
            os.write_double(12, self.bal_os_cly)?;
        }
        if !self.int_comp_type.is_empty() {
            os.write_string(13, &self.int_comp_type)?;
        }
        if self.compo_int_amt != 0. {
            os.write_double(14, self.compo_int_amt)?;
        }
        if self.int_rt != 0. {
            os.write_double(15, self.int_rt)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(16, self.mat_dt)?;
        }
        if self.dep_amt != 0. {
            os.write_double(17, self.dep_amt)?;
        }
        if self.dep_amt_lcy != 0. {
            os.write_double(18, self.dep_amt_lcy)?;
        }
        if self.int_amt != 0. {
            os.write_double(19, self.int_amt)?;
        }
        if self.int_acc_amt != 0. {
            os.write_double(20, self.int_acc_amt)?;
        }
        if !self.non_with_flag.is_empty() {
            os.write_string(21, &self.non_with_flag)?;
        }
        if !self.notice_day.is_empty() {
            os.write_string(22, &self.notice_day)?;
        }
        if self.cust_const_code != 0 {
            os.write_int64(23, self.cust_const_code)?;
        }
        if self.cntrct_num != 0 {
            os.write_int64(24, self.cntrct_num)?;
        }
        if self.as_on != 0 {
            os.write_int64(25, self.as_on)?;
        }
        if self.comp_freq != 0 {
            os.write_int64(26, self.comp_freq)?;
        }
        if self.pay_freq != 0 {
            os.write_int64(27, self.pay_freq)?;
        }
        if self.resid_days != 0 {
            os.write_int64(28, self.resid_days)?;
        }
        if self.cntrct_days != 0 {
            os.write_int64(29, self.cntrct_days)?;
        }
        if !self.dumy.is_empty() {
            os.write_string(30, &self.dumy)?;
        }
        if !self.clients_code.is_empty() {
            os.write_string(31, &self.clients_code)?;
        }
        if !self.client_type.is_empty() {
            os.write_string(32, &self.client_type)?;
        }
        if !self.clients_name.is_empty() {
            os.write_string(33, &self.clients_name)?;
        }
        if !self.clients_bsr_type_flg.is_empty() {
            os.write_string(34, &self.clients_bsr_type_flg)?;
        }
        if !self.clients_busdivn_code.is_empty() {
            os.write_string(35, &self.clients_busdivn_code)?;
        }
        if !self.clients_const_code.is_empty() {
            os.write_string(36, &self.clients_const_code)?;
        }
        if !self.clients_cust_sub_catg.is_empty() {
            os.write_string(37, &self.clients_cust_sub_catg)?;
        }
        if !self.clients_group_code.is_empty() {
            os.write_string(38, &self.clients_group_code)?;
        }
        if !self.clients_pan_gir_num.is_empty() {
            os.write_string(39, &self.clients_pan_gir_num)?;
        }
        if !self.clients_risk_categorization.is_empty() {
            os.write_string(40, &self.clients_risk_categorization)?;
        }
        if !self.clients_risk_cntry.is_empty() {
            os.write_string(41, &self.clients_risk_cntry)?;
        }
        if !self.clients_segment_code.is_empty() {
            os.write_string(42, &self.clients_segment_code)?;
        }
        if !self.corpcl_client_name.is_empty() {
            os.write_string(43, &self.corpcl_client_name)?;
        }
        if !self.corpcl_orgn_qualifier.is_empty() {
            os.write_string(44, &self.corpcl_orgn_qualifier)?;
        }
        if !self.corpcl_indus_code.is_empty() {
            os.write_string(45, &self.corpcl_indus_code)?;
        }
        if !self.corpcl_sub_indus_code.is_empty() {
            os.write_string(46, &self.corpcl_sub_indus_code)?;
        }
        if !self.corpcl_nature_of_bus1.is_empty() {
            os.write_string(47, &self.corpcl_nature_of_bus1)?;
        }
        if !self.corpcl_nature_of_bus2.is_empty() {
            os.write_string(48, &self.corpcl_nature_of_bus2)?;
        }
        if !self.corpcl_nature_of_bus3.is_empty() {
            os.write_string(49, &self.corpcl_nature_of_bus3)?;
        }
        if !self.corpcl_scheduled_bank.is_empty() {
            os.write_string(50, &self.corpcl_scheduled_bank)?;
        }
        if !self.corpcl_sovereign_flg.is_empty() {
            os.write_string(51, &self.corpcl_sovereign_flg)?;
        }
        if !self.corpcl_type_of_sovereign.is_empty() {
            os.write_string(52, &self.corpcl_type_of_sovereign)?;
        }
        if !self.corpcl_cntry_code.is_empty() {
            os.write_string(53, &self.corpcl_cntry_code)?;
        }
        if !self.corpcl_central_state_flg.is_empty() {
            os.write_string(54, &self.corpcl_central_state_flg)?;
        }
        if !self.corpcl_public_sector_flg.is_empty() {
            os.write_string(55, &self.corpcl_public_sector_flg)?;
        }
        if !self.corpcl_primary_dlr_flg.is_empty() {
            os.write_string(56, &self.corpcl_primary_dlr_flg)?;
        }
        if !self.corpcl_multilateral_bank.is_empty() {
            os.write_string(57, &self.corpcl_multilateral_bank)?;
        }
        if !self.corpcl_connp_inv_num.is_empty() {
            os.write_string(58, &self.corpcl_connp_inv_num)?;
        }
        if self.corpcl_bc_gross_turnover != 0. {
            os.write_double(59, self.corpcl_bc_gross_turnover)?;
        }
        if !self.t1.is_empty() {
            os.write_string(60, &self.t1)?;
        }
        if !self.t2.is_empty() {
            os.write_string(61, &self.t2)?;
        }
        if !self.t3.is_empty() {
            os.write_string(62, &self.t3)?;
        }
        if !self.t4.is_empty() {
            os.write_string(63, &self.t4)?;
        }
        if self.w4b_cd != 0 {
            os.write_int64(64, self.w4b_cd)?;
        }
        if !self.balm_llg.is_empty() {
            os.write_string(65, &self.balm_llg)?;
        }
        if !self.care_llg.is_empty() {
            os.write_string(66, &self.care_llg)?;
        }
        if !self.ba_llg.is_empty() {
            os.write_string(67, &self.ba_llg)?;
        }
        if !self.res_tenor.is_empty() {
            os.write_string(68, &self.res_tenor)?;
        }
        if !self.cont_tenor.is_empty() {
            os.write_string(69, &self.cont_tenor)?;
        }
        if !self.rep_tenor.is_empty() {
            os.write_string(70, &self.rep_tenor)?;
        }
        if !self.cust_cons_code.is_empty() {
            os.write_string(71, &self.cust_cons_code)?;
        }
        if !self.industry.is_empty() {
            os.write_string(72, &self.industry)?;
        }
        if !self.division.is_empty() {
            os.write_string(73, &self.division)?;
        }
        if !self.cust_initial_dep_total_amount.is_empty() {
            os.write_string(74, &self.cust_initial_dep_total_amount)?;
        }
        if !self.cust_total_deposit_amount.is_empty() {
            os.write_string(75, &self.cust_total_deposit_amount)?;
        }
        if !self.is_with_drawable.is_empty() {
            os.write_string(76, &self.is_with_drawable)?;
        }
        if !self.is_custody_ac.is_empty() {
            os.write_string(77, &self.is_custody_ac)?;
        }
        if !self.is_clearing_ac.is_empty() {
            os.write_string(78, &self.is_clearing_ac)?;
        }
        if !self.is_cash_managment.is_empty() {
            os.write_string(79, &self.is_cash_managment)?;
        }
        if !self.is_tax_saving.is_empty() {
            os.write_string(80, &self.is_tax_saving)?;
        }
        if !self.is_under_lien.is_empty() {
            os.write_string(81, &self.is_under_lien)?;
        }
        if !self.is_wealth_mang.is_empty() {
            os.write_string(82, &self.is_wealth_mang)?;
        }
        if !self.pta_1.is_empty() {
            os.write_string(83, &self.pta_1)?;
        }
        if !self.pta_2.is_empty() {
            os.write_string(84, &self.pta_2)?;
        }
        if !self.pta_3.is_empty() {
            os.write_string(85, &self.pta_3)?;
        }
        if !self.pta_4.is_empty() {
            os.write_string(86, &self.pta_4)?;
        }
        if !self.pta_5.is_empty() {
            os.write_string(87, &self.pta_5)?;
        }
        if self.tot_int_amt != 0. {
            os.write_double(88, self.tot_int_amt)?;
        }
        if self.tot_prin_amt != 0. {
            os.write_double(89, self.tot_prin_amt)?;
        }
        for v in &self.cashflows {
            os.write_tag(90, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acc_no",
                    |m: &AccountWithCashflows| { &m.acc_no },
                    |m: &mut AccountWithCashflows| { &mut m.acc_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "br_cd",
                    |m: &AccountWithCashflows| { &m.br_cd },
                    |m: &mut AccountWithCashflows| { &mut m.br_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cust_id",
                    |m: &AccountWithCashflows| { &m.cust_id },
                    |m: &mut AccountWithCashflows| { &mut m.cust_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "ucic_id",
                    |m: &AccountWithCashflows| { &m.ucic_id },
                    |m: &mut AccountWithCashflows| { &mut m.ucic_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy",
                    |m: &AccountWithCashflows| { &m.ccy },
                    |m: &mut AccountWithCashflows| { &mut m.ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "prod_cd",
                    |m: &AccountWithCashflows| { &m.prod_cd },
                    |m: &mut AccountWithCashflows| { &mut m.prod_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "gl_cd",
                    |m: &AccountWithCashflows| { &m.gl_cd },
                    |m: &mut AccountWithCashflows| { &mut m.gl_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gl_comp_portion",
                    |m: &AccountWithCashflows| { &m.gl_comp_portion },
                    |m: &mut AccountWithCashflows| { &mut m.gl_comp_portion },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "acc_open_dt",
                    |m: &AccountWithCashflows| { &m.acc_open_dt },
                    |m: &mut AccountWithCashflows| { &mut m.acc_open_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "effc_dt",
                    |m: &AccountWithCashflows| { &m.effc_dt },
                    |m: &mut AccountWithCashflows| { &mut m.effc_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "bal_os",
                    |m: &AccountWithCashflows| { &m.bal_os },
                    |m: &mut AccountWithCashflows| { &mut m.bal_os },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "bal_os_cly",
                    |m: &AccountWithCashflows| { &m.bal_os_cly },
                    |m: &mut AccountWithCashflows| { &mut m.bal_os_cly },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "int_comp_type",
                    |m: &AccountWithCashflows| { &m.int_comp_type },
                    |m: &mut AccountWithCashflows| { &mut m.int_comp_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "compo_int_amt",
                    |m: &AccountWithCashflows| { &m.compo_int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.compo_int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rt",
                    |m: &AccountWithCashflows| { &m.int_rt },
                    |m: &mut AccountWithCashflows| { &mut m.int_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "mat_dt",
                    |m: &AccountWithCashflows| { &m.mat_dt },
                    |m: &mut AccountWithCashflows| { &mut m.mat_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "dep_amt",
                    |m: &AccountWithCashflows| { &m.dep_amt },
                    |m: &mut AccountWithCashflows| { &mut m.dep_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "dep_amt_lcy",
                    |m: &AccountWithCashflows| { &m.dep_amt_lcy },
                    |m: &mut AccountWithCashflows| { &mut m.dep_amt_lcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &AccountWithCashflows| { &m.int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_acc_amt",
                    |m: &AccountWithCashflows| { &m.int_acc_amt },
                    |m: &mut AccountWithCashflows| { &mut m.int_acc_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "non_with_flag",
                    |m: &AccountWithCashflows| { &m.non_with_flag },
                    |m: &mut AccountWithCashflows| { &mut m.non_with_flag },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "notice_day",
                    |m: &AccountWithCashflows| { &m.notice_day },
                    |m: &mut AccountWithCashflows| { &mut m.notice_day },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cust_const_code",
                    |m: &AccountWithCashflows| { &m.cust_const_code },
                    |m: &mut AccountWithCashflows| { &mut m.cust_const_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cntrct_num",
                    |m: &AccountWithCashflows| { &m.cntrct_num },
                    |m: &mut AccountWithCashflows| { &mut m.cntrct_num },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "as_on",
                    |m: &AccountWithCashflows| { &m.as_on },
                    |m: &mut AccountWithCashflows| { &mut m.as_on },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "comp_freq",
                    |m: &AccountWithCashflows| { &m.comp_freq },
                    |m: &mut AccountWithCashflows| { &mut m.comp_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "pay_freq",
                    |m: &AccountWithCashflows| { &m.pay_freq },
                    |m: &mut AccountWithCashflows| { &mut m.pay_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "resid_days",
                    |m: &AccountWithCashflows| { &m.resid_days },
                    |m: &mut AccountWithCashflows| { &mut m.resid_days },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cntrct_days",
                    |m: &AccountWithCashflows| { &m.cntrct_days },
                    |m: &mut AccountWithCashflows| { &mut m.cntrct_days },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dumy",
                    |m: &AccountWithCashflows| { &m.dumy },
                    |m: &mut AccountWithCashflows| { &mut m.dumy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_code",
                    |m: &AccountWithCashflows| { &m.clients_code },
                    |m: &mut AccountWithCashflows| { &mut m.clients_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "client_type",
                    |m: &AccountWithCashflows| { &m.client_type },
                    |m: &mut AccountWithCashflows| { &mut m.client_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_name",
                    |m: &AccountWithCashflows| { &m.clients_name },
                    |m: &mut AccountWithCashflows| { &mut m.clients_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_bsr_type_flg",
                    |m: &AccountWithCashflows| { &m.clients_bsr_type_flg },
                    |m: &mut AccountWithCashflows| { &mut m.clients_bsr_type_flg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_busdivn_code",
                    |m: &AccountWithCashflows| { &m.clients_busdivn_code },
                    |m: &mut AccountWithCashflows| { &mut m.clients_busdivn_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_const_code",
                    |m: &AccountWithCashflows| { &m.clients_const_code },
                    |m: &mut AccountWithCashflows| { &mut m.clients_const_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_cust_sub_catg",
                    |m: &AccountWithCashflows| { &m.clients_cust_sub_catg },
                    |m: &mut AccountWithCashflows| { &mut m.clients_cust_sub_catg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_group_code",
                    |m: &AccountWithCashflows| { &m.clients_group_code },
                    |m: &mut AccountWithCashflows| { &mut m.clients_group_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_pan_gir_num",
                    |m: &AccountWithCashflows| { &m.clients_pan_gir_num },
                    |m: &mut AccountWithCashflows| { &mut m.clients_pan_gir_num },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_risk_categorization",
                    |m: &AccountWithCashflows| { &m.clients_risk_categorization },
                    |m: &mut AccountWithCashflows| { &mut m.clients_risk_categorization },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_risk_cntry",
                    |m: &AccountWithCashflows| { &m.clients_risk_cntry },
                    |m: &mut AccountWithCashflows| { &mut m.clients_risk_cntry },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clients_segment_code",
                    |m: &AccountWithCashflows| { &m.clients_segment_code },
                    |m: &mut AccountWithCashflows| { &mut m.clients_segment_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_client_name",
                    |m: &AccountWithCashflows| { &m.corpcl_client_name },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_client_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_orgn_qualifier",
                    |m: &AccountWithCashflows| { &m.corpcl_orgn_qualifier },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_orgn_qualifier },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_indus_code",
                    |m: &AccountWithCashflows| { &m.corpcl_indus_code },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_indus_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_sub_indus_code",
                    |m: &AccountWithCashflows| { &m.corpcl_sub_indus_code },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_sub_indus_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_nature_of_bus1",
                    |m: &AccountWithCashflows| { &m.corpcl_nature_of_bus1 },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_nature_of_bus1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_nature_of_bus2",
                    |m: &AccountWithCashflows| { &m.corpcl_nature_of_bus2 },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_nature_of_bus2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_nature_of_bus3",
                    |m: &AccountWithCashflows| { &m.corpcl_nature_of_bus3 },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_nature_of_bus3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_scheduled_bank",
                    |m: &AccountWithCashflows| { &m.corpcl_scheduled_bank },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_scheduled_bank },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_sovereign_flg",
                    |m: &AccountWithCashflows| { &m.corpcl_sovereign_flg },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_sovereign_flg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_type_of_sovereign",
                    |m: &AccountWithCashflows| { &m.corpcl_type_of_sovereign },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_type_of_sovereign },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_cntry_code",
                    |m: &AccountWithCashflows| { &m.corpcl_cntry_code },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_cntry_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_central_state_flg",
                    |m: &AccountWithCashflows| { &m.corpcl_central_state_flg },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_central_state_flg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_public_sector_flg",
                    |m: &AccountWithCashflows| { &m.corpcl_public_sector_flg },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_public_sector_flg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_primary_dlr_flg",
                    |m: &AccountWithCashflows| { &m.corpcl_primary_dlr_flg },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_primary_dlr_flg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_multilateral_bank",
                    |m: &AccountWithCashflows| { &m.corpcl_multilateral_bank },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_multilateral_bank },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "corpcl_connp_inv_num",
                    |m: &AccountWithCashflows| { &m.corpcl_connp_inv_num },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_connp_inv_num },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "corpcl_bc_gross_turnover",
                    |m: &AccountWithCashflows| { &m.corpcl_bc_gross_turnover },
                    |m: &mut AccountWithCashflows| { &mut m.corpcl_bc_gross_turnover },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "t1",
                    |m: &AccountWithCashflows| { &m.t1 },
                    |m: &mut AccountWithCashflows| { &mut m.t1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "t2",
                    |m: &AccountWithCashflows| { &m.t2 },
                    |m: &mut AccountWithCashflows| { &mut m.t2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "t3",
                    |m: &AccountWithCashflows| { &m.t3 },
                    |m: &mut AccountWithCashflows| { &mut m.t3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "t4",
                    |m: &AccountWithCashflows| { &m.t4 },
                    |m: &mut AccountWithCashflows| { &mut m.t4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "w4b_cd",
                    |m: &AccountWithCashflows| { &m.w4b_cd },
                    |m: &mut AccountWithCashflows| { &mut m.w4b_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "balm_llg",
                    |m: &AccountWithCashflows| { &m.balm_llg },
                    |m: &mut AccountWithCashflows| { &mut m.balm_llg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "care_llg",
                    |m: &AccountWithCashflows| { &m.care_llg },
                    |m: &mut AccountWithCashflows| { &mut m.care_llg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ba_llg",
                    |m: &AccountWithCashflows| { &m.ba_llg },
                    |m: &mut AccountWithCashflows| { &mut m.ba_llg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "res_tenor",
                    |m: &AccountWithCashflows| { &m.res_tenor },
                    |m: &mut AccountWithCashflows| { &mut m.res_tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cont_tenor",
                    |m: &AccountWithCashflows| { &m.cont_tenor },
                    |m: &mut AccountWithCashflows| { &mut m.cont_tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rep_tenor",
                    |m: &AccountWithCashflows| { &m.rep_tenor },
                    |m: &mut AccountWithCashflows| { &mut m.rep_tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_cons_code",
                    |m: &AccountWithCashflows| { &m.cust_cons_code },
                    |m: &mut AccountWithCashflows| { &mut m.cust_cons_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "industry",
                    |m: &AccountWithCashflows| { &m.industry },
                    |m: &mut AccountWithCashflows| { &mut m.industry },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "division",
                    |m: &AccountWithCashflows| { &m.division },
                    |m: &mut AccountWithCashflows| { &mut m.division },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_initial_dep_total_amount",
                    |m: &AccountWithCashflows| { &m.cust_initial_dep_total_amount },
                    |m: &mut AccountWithCashflows| { &mut m.cust_initial_dep_total_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_total_deposit_amount",
                    |m: &AccountWithCashflows| { &m.cust_total_deposit_amount },
                    |m: &mut AccountWithCashflows| { &mut m.cust_total_deposit_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "is_with_drawable",
                    |m: &AccountWithCashflows| { &m.is_with_drawable },
                    |m: &mut AccountWithCashflows| { &mut m.is_with_drawable },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "is_custody_ac",
                    |m: &AccountWithCashflows| { &m.is_custody_ac },
                    |m: &mut AccountWithCashflows| { &mut m.is_custody_ac },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "is_clearing_ac",
                    |m: &AccountWithCashflows| { &m.is_clearing_ac },
                    |m: &mut AccountWithCashflows| { &mut m.is_clearing_ac },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "is_cash_managment",
                    |m: &AccountWithCashflows| { &m.is_cash_managment },
                    |m: &mut AccountWithCashflows| { &mut m.is_cash_managment },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "is_tax_saving",
                    |m: &AccountWithCashflows| { &m.is_tax_saving },
                    |m: &mut AccountWithCashflows| { &mut m.is_tax_saving },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "is_under_lien",
                    |m: &AccountWithCashflows| { &m.is_under_lien },
                    |m: &mut AccountWithCashflows| { &mut m.is_under_lien },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "is_wealth_mang",
                    |m: &AccountWithCashflows| { &m.is_wealth_mang },
                    |m: &mut AccountWithCashflows| { &mut m.is_wealth_mang },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pta_1",
                    |m: &AccountWithCashflows| { &m.pta_1 },
                    |m: &mut AccountWithCashflows| { &mut m.pta_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pta_2",
                    |m: &AccountWithCashflows| { &m.pta_2 },
                    |m: &mut AccountWithCashflows| { &mut m.pta_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pta_3",
                    |m: &AccountWithCashflows| { &m.pta_3 },
                    |m: &mut AccountWithCashflows| { &mut m.pta_3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pta_4",
                    |m: &AccountWithCashflows| { &m.pta_4 },
                    |m: &mut AccountWithCashflows| { &mut m.pta_4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pta_5",
                    |m: &AccountWithCashflows| { &m.pta_5 },
                    |m: &mut AccountWithCashflows| { &mut m.pta_5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_int_amt",
                    |m: &AccountWithCashflows| { &m.tot_int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.tot_int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_prin_amt",
                    |m: &AccountWithCashflows| { &m.tot_prin_amt },
                    |m: &mut AccountWithCashflows| { &mut m.tot_prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.acc_no.clear();
        self.br_cd = 0;
        self.cust_id = 0;
        self.ucic_id = 0;
        self.ccy.clear();
        self.prod_cd = 0;
        self.gl_cd = 0;
        self.gl_comp_portion.clear();
        self.acc_open_dt = 0;
        self.effc_dt = 0;
        self.bal_os = 0.;
        self.bal_os_cly = 0.;
        self.int_comp_type.clear();
        self.compo_int_amt = 0.;
        self.int_rt = 0.;
        self.mat_dt = 0;
        self.dep_amt = 0.;
        self.dep_amt_lcy = 0.;
        self.int_amt = 0.;
        self.int_acc_amt = 0.;
        self.non_with_flag.clear();
        self.notice_day.clear();
        self.cust_const_code = 0;
        self.cntrct_num = 0;
        self.as_on = 0;
        self.comp_freq = 0;
        self.pay_freq = 0;
        self.resid_days = 0;
        self.cntrct_days = 0;
        self.dumy.clear();
        self.clients_code.clear();
        self.client_type.clear();
        self.clients_name.clear();
        self.clients_bsr_type_flg.clear();
        self.clients_busdivn_code.clear();
        self.clients_const_code.clear();
        self.clients_cust_sub_catg.clear();
        self.clients_group_code.clear();
        self.clients_pan_gir_num.clear();
        self.clients_risk_categorization.clear();
        self.clients_risk_cntry.clear();
        self.clients_segment_code.clear();
        self.corpcl_client_name.clear();
        self.corpcl_orgn_qualifier.clear();
        self.corpcl_indus_code.clear();
        self.corpcl_sub_indus_code.clear();
        self.corpcl_nature_of_bus1.clear();
        self.corpcl_nature_of_bus2.clear();
        self.corpcl_nature_of_bus3.clear();
        self.corpcl_scheduled_bank.clear();
        self.corpcl_sovereign_flg.clear();
        self.corpcl_type_of_sovereign.clear();
        self.corpcl_cntry_code.clear();
        self.corpcl_central_state_flg.clear();
        self.corpcl_public_sector_flg.clear();
        self.corpcl_primary_dlr_flg.clear();
        self.corpcl_multilateral_bank.clear();
        self.corpcl_connp_inv_num.clear();
        self.corpcl_bc_gross_turnover = 0.;
        self.t1.clear();
        self.t2.clear();
        self.t3.clear();
        self.t4.clear();
        self.w4b_cd = 0;
        self.balm_llg.clear();
        self.care_llg.clear();
        self.ba_llg.clear();
        self.res_tenor.clear();
        self.cont_tenor.clear();
        self.rep_tenor.clear();
        self.cust_cons_code.clear();
        self.industry.clear();
        self.division.clear();
        self.cust_initial_dep_total_amount.clear();
        self.cust_total_deposit_amount.clear();
        self.is_with_drawable.clear();
        self.is_custody_ac.clear();
        self.is_clearing_ac.clear();
        self.is_cash_managment.clear();
        self.is_tax_saving.clear();
        self.is_under_lien.clear();
        self.is_wealth_mang.clear();
        self.pta_1.clear();
        self.pta_2.clear();
        self.pta_3.clear();
        self.pta_4.clear();
        self.pta_5.clear();
        self.tot_int_amt = 0.;
        self.tot_prin_amt = 0.;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\
    \x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prin\
    Amt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xaf\x19\n\x14Accou\
    ntWithCashflows\x12\x15\n\x06acc_no\x18\x01\x20\x01(\tR\x05accNo\x12\x13\
    \n\x05br_cd\x18\x02\x20\x01(\x03R\x04brCd\x12\x17\n\x07cust_id\x18\x03\
    \x20\x01(\x03R\x06custId\x12\x17\n\x07ucic_id\x18\x04\x20\x01(\x03R\x06u\
    cicId\x12\x10\n\x03ccy\x18\x05\x20\x01(\tR\x03ccy\x12\x17\n\x07prod_cd\
    \x18\x06\x20\x01(\x03R\x06prodCd\x12\x13\n\x05gl_cd\x18\x07\x20\x01(\x03\
    R\x04glCd\x12&\n\x0fgl_comp_portion\x18\x08\x20\x01(\tR\rglCompPortion\
    \x12\x1e\n\x0bacc_open_dt\x18\t\x20\x01(\x03R\taccOpenDt\x12\x17\n\x07ef\
    fc_dt\x18\n\x20\x01(\x03R\x06effcDt\x12\x15\n\x06bal_os\x18\x0b\x20\x01(\
    \x01R\x05balOs\x12\x1c\n\nbal_os_cly\x18\x0c\x20\x01(\x01R\x08balOsCly\
    \x12\"\n\rint_comp_type\x18\r\x20\x01(\tR\x0bintCompType\x12\"\n\rcompo_\
    int_amt\x18\x0e\x20\x01(\x01R\x0bcompoIntAmt\x12\x15\n\x06int_rt\x18\x0f\
    \x20\x01(\x01R\x05intRt\x12\x15\n\x06mat_dt\x18\x10\x20\x01(\x03R\x05mat\
    Dt\x12\x17\n\x07dep_amt\x18\x11\x20\x01(\x01R\x06depAmt\x12\x1e\n\x0bdep\
    _amt_lcy\x18\x12\x20\x01(\x01R\tdepAmtLcy\x12\x17\n\x07int_amt\x18\x13\
    \x20\x01(\x01R\x06intAmt\x12\x1e\n\x0bint_acc_amt\x18\x14\x20\x01(\x01R\
    \tintAccAmt\x12\"\n\rnon_with_flag\x18\x15\x20\x01(\tR\x0bnonWithFlag\
    \x12\x1d\n\nnotice_day\x18\x16\x20\x01(\tR\tnoticeDay\x12&\n\x0fcust_con\
    st_code\x18\x17\x20\x01(\x03R\rcustConstCode\x12\x1d\n\ncntrct_num\x18\
    \x18\x20\x01(\x03R\tcntrctNum\x12\x13\n\x05as_on\x18\x19\x20\x01(\x03R\
    \x04asOn\x12\x1b\n\tcomp_freq\x18\x1a\x20\x01(\x03R\x08compFreq\x12\x19\
    \n\x08pay_freq\x18\x1b\x20\x01(\x03R\x07payFreq\x12\x1d\n\nresid_days\
    \x18\x1c\x20\x01(\x03R\tresidDays\x12\x1f\n\x0bcntrct_days\x18\x1d\x20\
    \x01(\x03R\ncntrctDays\x12\x12\n\x04dumy\x18\x1e\x20\x01(\tR\x04dumy\x12\
    !\n\x0cclients_code\x18\x1f\x20\x01(\tR\x0bclientsCode\x12\x1f\n\x0bclie\
    nt_type\x18\x20\x20\x01(\tR\nclientType\x12!\n\x0cclients_name\x18!\x20\
    \x01(\tR\x0bclientsName\x12/\n\x14clients_bsr_type_flg\x18\"\x20\x01(\tR\
    \x11clientsBsrTypeFlg\x120\n\x14clients_busdivn_code\x18#\x20\x01(\tR\
    \x12clientsBusdivnCode\x12,\n\x12clients_const_code\x18$\x20\x01(\tR\x10\
    clientsConstCode\x121\n\x15clients_cust_sub_catg\x18%\x20\x01(\tR\x12cli\
    entsCustSubCatg\x12,\n\x12clients_group_code\x18&\x20\x01(\tR\x10clients\
    GroupCode\x12-\n\x13clients_pan_gir_num\x18'\x20\x01(\tR\x10clientsPanGi\
    rNum\x12>\n\x1bclients_risk_categorization\x18(\x20\x01(\tR\x19clientsRi\
    skCategorization\x12,\n\x12clients_risk_cntry\x18)\x20\x01(\tR\x10client\
    sRiskCntry\x120\n\x14clients_segment_code\x18*\x20\x01(\tR\x12clientsSeg\
    mentCode\x12,\n\x12corpcl_client_name\x18+\x20\x01(\tR\x10corpclClientNa\
    me\x122\n\x15corpcl_orgn_qualifier\x18,\x20\x01(\tR\x13corpclOrgnQualifi\
    er\x12*\n\x11corpcl_indus_code\x18-\x20\x01(\tR\x0fcorpclIndusCode\x121\
    \n\x15corpcl_sub_indus_code\x18.\x20\x01(\tR\x12corpclSubIndusCode\x121\
    \n\x15corpcl_nature_of_bus1\x18/\x20\x01(\tR\x12corpclNatureOfBus1\x121\
    \n\x15corpcl_nature_of_bus2\x180\x20\x01(\tR\x12corpclNatureOfBus2\x121\
    \n\x15corpcl_nature_of_bus3\x181\x20\x01(\tR\x12corpclNatureOfBus3\x122\
    \n\x15corpcl_scheduled_bank\x182\x20\x01(\tR\x13corpclScheduledBank\x120\
    \n\x14corpcl_sovereign_flg\x183\x20\x01(\tR\x12corpclSovereignFlg\x127\n\
    \x18corpcl_type_of_sovereign\x184\x20\x01(\tR\x15corpclTypeOfSovereign\
    \x12*\n\x11corpcl_cntry_code\x185\x20\x01(\tR\x0fcorpclCntryCode\x127\n\
    \x18corpcl_central_state_flg\x186\x20\x01(\tR\x15corpclCentralStateFlg\
    \x127\n\x18corpcl_public_sector_flg\x187\x20\x01(\tR\x15corpclPublicSect\
    orFlg\x123\n\x16corpcl_primary_dlr_flg\x188\x20\x01(\tR\x13corpclPrimary\
    DlrFlg\x128\n\x18corpcl_multilateral_bank\x189\x20\x01(\tR\x16corpclMult\
    ilateralBank\x12/\n\x14corpcl_connp_inv_num\x18:\x20\x01(\tR\x11corpclCo\
    nnpInvNum\x127\n\x18corpcl_bc_gross_turnover\x18;\x20\x01(\x01R\x15corpc\
    lBcGrossTurnover\x12\x0e\n\x02t1\x18<\x20\x01(\tR\x02t1\x12\x0e\n\x02t2\
    \x18=\x20\x01(\tR\x02t2\x12\x0e\n\x02t3\x18>\x20\x01(\tR\x02t3\x12\x0e\n\
    \x02t4\x18?\x20\x01(\tR\x02t4\x12\x15\n\x06w4b_cd\x18@\x20\x01(\x03R\x05\
    w4bCd\x12\x19\n\x08balm_llg\x18A\x20\x01(\tR\x07balmLlg\x12\x19\n\x08car\
    e_llg\x18B\x20\x01(\tR\x07careLlg\x12\x15\n\x06ba_llg\x18C\x20\x01(\tR\
    \x05baLlg\x12\x1b\n\tres_tenor\x18D\x20\x01(\tR\x08resTenor\x12\x1d\n\nc\
    ont_tenor\x18E\x20\x01(\tR\tcontTenor\x12\x1b\n\trep_tenor\x18F\x20\x01(\
    \tR\x08repTenor\x12$\n\x0ecust_cons_code\x18G\x20\x01(\tR\x0ccustConsCod\
    e\x12\x1a\n\x08industry\x18H\x20\x01(\tR\x08industry\x12\x1a\n\x08divisi\
    on\x18I\x20\x01(\tR\x08division\x12@\n\x1dcust_initial_dep_total_amount\
    \x18J\x20\x01(\tR\x19custInitialDepTotalAmount\x129\n\x19cust_total_depo\
    sit_amount\x18K\x20\x01(\tR\x16custTotalDepositAmount\x12(\n\x10is_with_\
    drawable\x18L\x20\x01(\tR\x0eisWithDrawable\x12\"\n\ris_custody_ac\x18M\
    \x20\x01(\tR\x0bisCustodyAc\x12$\n\x0eis_clearing_ac\x18N\x20\x01(\tR\
    \x0cisClearingAc\x12*\n\x11is_cash_managment\x18O\x20\x01(\tR\x0fisCashM\
    anagment\x12\"\n\ris_tax_saving\x18P\x20\x01(\tR\x0bisTaxSaving\x12\"\n\
    \ris_under_lien\x18Q\x20\x01(\tR\x0bisUnderLien\x12$\n\x0eis_wealth_mang\
    \x18R\x20\x01(\tR\x0cisWealthMang\x12\x13\n\x05pta_1\x18S\x20\x01(\tR\
    \x04pta1\x12\x13\n\x05pta_2\x18T\x20\x01(\tR\x04pta2\x12\x13\n\x05pta_3\
    \x18U\x20\x01(\tR\x04pta3\x12\x13\n\x05pta_4\x18V\x20\x01(\tR\x04pta4\
    \x12\x13\n\x05pta_5\x18W\x20\x01(\tR\x04pta5\x12\x1e\n\x0btot_int_amt\
    \x18X\x20\x01(\x01R\ttotIntAmt\x12\x20\n\x0ctot_prin_amt\x18Y\x20\x01(\
    \x01R\ntotPrinAmt\x12'\n\tcashflows\x18Z\x20\x03(\x0b2\t.CashflowR\tcash\
    flowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
