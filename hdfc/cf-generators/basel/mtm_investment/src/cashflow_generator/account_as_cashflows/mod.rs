// This file is generated by rust-protobuf 2.11.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `invst_mtm.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_11_0;

#[derive(PartialEq,Clone,Default)]
pub struct Account {
    // message fields
    pub date: ::std::string::String,
    pub isin: ::std::string::String,
    pub sec_dep: ::std::string::String,
    pub book_val: f64,
    pub mat_dt: ::std::string::String,
    pub mtm_in_usd: f64,
    pub class_1: ::std::string::String,
    pub class_2: ::std::string::String,
    pub class_3: ::std::string::String,
    pub tenure_class: ::std::string::String,
    pub sys_identifier: ::std::string::String,
    pub mtm_amt: f64,
    pub tenor: i64,
    pub ccy: ::std::string::String,
    pub rating_identifier: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Account {
    fn default() -> &'a Account {
        <Account as ::protobuf::Message>::default_instance()
    }
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    // string date = 1;


    pub fn get_date(&self) -> &str {
        &self.date
    }
    pub fn clear_date(&mut self) {
        self.date.clear();
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: ::std::string::String) {
        self.date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_date(&mut self) -> &mut ::std::string::String {
        &mut self.date
    }

    // Take field
    pub fn take_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.date, ::std::string::String::new())
    }

    // string isin = 2;


    pub fn get_isin(&self) -> &str {
        &self.isin
    }
    pub fn clear_isin(&mut self) {
        self.isin.clear();
    }

    // Param is passed by value, moved
    pub fn set_isin(&mut self, v: ::std::string::String) {
        self.isin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_isin(&mut self) -> &mut ::std::string::String {
        &mut self.isin
    }

    // Take field
    pub fn take_isin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.isin, ::std::string::String::new())
    }

    // string sec_dep = 3;


    pub fn get_sec_dep(&self) -> &str {
        &self.sec_dep
    }
    pub fn clear_sec_dep(&mut self) {
        self.sec_dep.clear();
    }

    // Param is passed by value, moved
    pub fn set_sec_dep(&mut self, v: ::std::string::String) {
        self.sec_dep = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sec_dep(&mut self) -> &mut ::std::string::String {
        &mut self.sec_dep
    }

    // Take field
    pub fn take_sec_dep(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sec_dep, ::std::string::String::new())
    }

    // double book_val = 4;


    pub fn get_book_val(&self) -> f64 {
        self.book_val
    }
    pub fn clear_book_val(&mut self) {
        self.book_val = 0.;
    }

    // Param is passed by value, moved
    pub fn set_book_val(&mut self, v: f64) {
        self.book_val = v;
    }

    // string mat_dt = 5;


    pub fn get_mat_dt(&self) -> &str {
        &self.mat_dt
    }
    pub fn clear_mat_dt(&mut self) {
        self.mat_dt.clear();
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: ::std::string::String) {
        self.mat_dt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mat_dt(&mut self) -> &mut ::std::string::String {
        &mut self.mat_dt
    }

    // Take field
    pub fn take_mat_dt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mat_dt, ::std::string::String::new())
    }

    // double mtm_in_usd = 6;


    pub fn get_mtm_in_usd(&self) -> f64 {
        self.mtm_in_usd
    }
    pub fn clear_mtm_in_usd(&mut self) {
        self.mtm_in_usd = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mtm_in_usd(&mut self, v: f64) {
        self.mtm_in_usd = v;
    }

    // string class_1 = 7;


    pub fn get_class_1(&self) -> &str {
        &self.class_1
    }
    pub fn clear_class_1(&mut self) {
        self.class_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_class_1(&mut self, v: ::std::string::String) {
        self.class_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_class_1(&mut self) -> &mut ::std::string::String {
        &mut self.class_1
    }

    // Take field
    pub fn take_class_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.class_1, ::std::string::String::new())
    }

    // string class_2 = 8;


    pub fn get_class_2(&self) -> &str {
        &self.class_2
    }
    pub fn clear_class_2(&mut self) {
        self.class_2.clear();
    }

    // Param is passed by value, moved
    pub fn set_class_2(&mut self, v: ::std::string::String) {
        self.class_2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_class_2(&mut self) -> &mut ::std::string::String {
        &mut self.class_2
    }

    // Take field
    pub fn take_class_2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.class_2, ::std::string::String::new())
    }

    // string class_3 = 9;


    pub fn get_class_3(&self) -> &str {
        &self.class_3
    }
    pub fn clear_class_3(&mut self) {
        self.class_3.clear();
    }

    // Param is passed by value, moved
    pub fn set_class_3(&mut self, v: ::std::string::String) {
        self.class_3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_class_3(&mut self) -> &mut ::std::string::String {
        &mut self.class_3
    }

    // Take field
    pub fn take_class_3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.class_3, ::std::string::String::new())
    }

    // string tenure_class = 10;


    pub fn get_tenure_class(&self) -> &str {
        &self.tenure_class
    }
    pub fn clear_tenure_class(&mut self) {
        self.tenure_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_tenure_class(&mut self, v: ::std::string::String) {
        self.tenure_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tenure_class(&mut self) -> &mut ::std::string::String {
        &mut self.tenure_class
    }

    // Take field
    pub fn take_tenure_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tenure_class, ::std::string::String::new())
    }

    // string sys_identifier = 11;


    pub fn get_sys_identifier(&self) -> &str {
        &self.sys_identifier
    }
    pub fn clear_sys_identifier(&mut self) {
        self.sys_identifier.clear();
    }

    // Param is passed by value, moved
    pub fn set_sys_identifier(&mut self, v: ::std::string::String) {
        self.sys_identifier = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sys_identifier(&mut self) -> &mut ::std::string::String {
        &mut self.sys_identifier
    }

    // Take field
    pub fn take_sys_identifier(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sys_identifier, ::std::string::String::new())
    }

    // double mtm_amt = 12;


    pub fn get_mtm_amt(&self) -> f64 {
        self.mtm_amt
    }
    pub fn clear_mtm_amt(&mut self) {
        self.mtm_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mtm_amt(&mut self, v: f64) {
        self.mtm_amt = v;
    }

    // int64 tenor = 13;


    pub fn get_tenor(&self) -> i64 {
        self.tenor
    }
    pub fn clear_tenor(&mut self) {
        self.tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_tenor(&mut self, v: i64) {
        self.tenor = v;
    }

    // string ccy = 14;


    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }
    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    // string rating_identifier = 15;


    pub fn get_rating_identifier(&self) -> &str {
        &self.rating_identifier
    }
    pub fn clear_rating_identifier(&mut self) {
        self.rating_identifier.clear();
    }

    // Param is passed by value, moved
    pub fn set_rating_identifier(&mut self, v: ::std::string::String) {
        self.rating_identifier = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rating_identifier(&mut self) -> &mut ::std::string::String {
        &mut self.rating_identifier
    }

    // Take field
    pub fn take_rating_identifier(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rating_identifier, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Account {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.date)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.isin)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sec_dep)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.book_val = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mat_dt)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.mtm_in_usd = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.class_1)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.class_2)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.class_3)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tenure_class)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sys_identifier)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.mtm_amt = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tenor = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rating_identifier)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.date.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.date);
        }
        if !self.isin.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.isin);
        }
        if !self.sec_dep.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.sec_dep);
        }
        if self.book_val != 0. {
            my_size += 9;
        }
        if !self.mat_dt.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.mat_dt);
        }
        if self.mtm_in_usd != 0. {
            my_size += 9;
        }
        if !self.class_1.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.class_1);
        }
        if !self.class_2.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.class_2);
        }
        if !self.class_3.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.class_3);
        }
        if !self.tenure_class.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.tenure_class);
        }
        if !self.sys_identifier.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.sys_identifier);
        }
        if self.mtm_amt != 0. {
            my_size += 9;
        }
        if self.tenor != 0 {
            my_size += ::protobuf::rt::value_size(13, self.tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.ccy);
        }
        if !self.rating_identifier.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.rating_identifier);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.date.is_empty() {
            os.write_string(1, &self.date)?;
        }
        if !self.isin.is_empty() {
            os.write_string(2, &self.isin)?;
        }
        if !self.sec_dep.is_empty() {
            os.write_string(3, &self.sec_dep)?;
        }
        if self.book_val != 0. {
            os.write_double(4, self.book_val)?;
        }
        if !self.mat_dt.is_empty() {
            os.write_string(5, &self.mat_dt)?;
        }
        if self.mtm_in_usd != 0. {
            os.write_double(6, self.mtm_in_usd)?;
        }
        if !self.class_1.is_empty() {
            os.write_string(7, &self.class_1)?;
        }
        if !self.class_2.is_empty() {
            os.write_string(8, &self.class_2)?;
        }
        if !self.class_3.is_empty() {
            os.write_string(9, &self.class_3)?;
        }
        if !self.tenure_class.is_empty() {
            os.write_string(10, &self.tenure_class)?;
        }
        if !self.sys_identifier.is_empty() {
            os.write_string(11, &self.sys_identifier)?;
        }
        if self.mtm_amt != 0. {
            os.write_double(12, self.mtm_amt)?;
        }
        if self.tenor != 0 {
            os.write_int64(13, self.tenor)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(14, &self.ccy)?;
        }
        if !self.rating_identifier.is_empty() {
            os.write_string(15, &self.rating_identifier)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Account {
        Account::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "date",
                    |m: &Account| { &m.date },
                    |m: &mut Account| { &mut m.date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "isin",
                    |m: &Account| { &m.isin },
                    |m: &mut Account| { &mut m.isin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sec_dep",
                    |m: &Account| { &m.sec_dep },
                    |m: &mut Account| { &mut m.sec_dep },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "book_val",
                    |m: &Account| { &m.book_val },
                    |m: &mut Account| { &mut m.book_val },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "mat_dt",
                    |m: &Account| { &m.mat_dt },
                    |m: &mut Account| { &mut m.mat_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "mtm_in_usd",
                    |m: &Account| { &m.mtm_in_usd },
                    |m: &mut Account| { &mut m.mtm_in_usd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "class_1",
                    |m: &Account| { &m.class_1 },
                    |m: &mut Account| { &mut m.class_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "class_2",
                    |m: &Account| { &m.class_2 },
                    |m: &mut Account| { &mut m.class_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "class_3",
                    |m: &Account| { &m.class_3 },
                    |m: &mut Account| { &mut m.class_3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "tenure_class",
                    |m: &Account| { &m.tenure_class },
                    |m: &mut Account| { &mut m.tenure_class },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sys_identifier",
                    |m: &Account| { &m.sys_identifier },
                    |m: &mut Account| { &mut m.sys_identifier },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "mtm_amt",
                    |m: &Account| { &m.mtm_amt },
                    |m: &mut Account| { &mut m.mtm_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "tenor",
                    |m: &Account| { &m.tenor },
                    |m: &mut Account| { &mut m.tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy",
                    |m: &Account| { &m.ccy },
                    |m: &mut Account| { &mut m.ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rating_identifier",
                    |m: &Account| { &m.rating_identifier },
                    |m: &mut Account| { &mut m.rating_identifier },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Account>(
                    "Account",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Account {
        static mut instance: ::protobuf::lazy::Lazy<Account> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Account::new)
        }
    }
}

impl ::protobuf::Clear for Account {
    fn clear(&mut self) {
        self.date.clear();
        self.isin.clear();
        self.sec_dep.clear();
        self.book_val = 0.;
        self.mat_dt.clear();
        self.mtm_in_usd = 0.;
        self.class_1.clear();
        self.class_2.clear();
        self.class_3.clear();
        self.tenure_class.clear();
        self.sys_identifier.clear();
        self.mtm_amt = 0.;
        self.tenor = 0;
        self.ccy.clear();
        self.rating_identifier.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0finvst_mtm.proto\"\x9d\x03\n\x07Account\x12\x12\n\x04date\x18\x01\
    \x20\x01(\tR\x04date\x12\x12\n\x04isin\x18\x02\x20\x01(\tR\x04isin\x12\
    \x17\n\x07sec_dep\x18\x03\x20\x01(\tR\x06secDep\x12\x19\n\x08book_val\
    \x18\x04\x20\x01(\x01R\x07bookVal\x12\x15\n\x06mat_dt\x18\x05\x20\x01(\t\
    R\x05matDt\x12\x1c\n\nmtm_in_usd\x18\x06\x20\x01(\x01R\x08mtmInUsd\x12\
    \x17\n\x07class_1\x18\x07\x20\x01(\tR\x06class1\x12\x17\n\x07class_2\x18\
    \x08\x20\x01(\tR\x06class2\x12\x17\n\x07class_3\x18\t\x20\x01(\tR\x06cla\
    ss3\x12!\n\x0ctenure_class\x18\n\x20\x01(\tR\x0btenureClass\x12%\n\x0esy\
    s_identifier\x18\x0b\x20\x01(\tR\rsysIdentifier\x12\x17\n\x07mtm_amt\x18\
    \x0c\x20\x01(\x01R\x06mtmAmt\x12\x14\n\x05tenor\x18\r\x20\x01(\x03R\x05t\
    enor\x12\x10\n\x03ccy\x18\x0e\x20\x01(\tR\x03ccy\x12+\n\x11rating_identi\
    fier\x18\x0f\x20\x01(\tR\x10ratingIdentifierb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
