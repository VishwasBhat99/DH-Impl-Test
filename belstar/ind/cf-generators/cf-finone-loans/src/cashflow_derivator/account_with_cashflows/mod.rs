// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub loan_account_no: ::std::string::String,
    pub loan_id: i64,
    pub customer_id: ::std::string::String,
    pub product_id: i64,
    pub product_desc: ::std::string::String,
    pub product_type: ::std::string::String,
    pub recovery_type: ::std::string::String,
    pub cust_name: ::std::string::String,
    pub disbursal_date: i64,
    pub due_day: i64,
    pub maturity_date: i64,
    pub original_tenure: i64,
    pub current_tenure: i64,
    pub balance_installments: f64,
    pub installment_type: ::std::string::String,
    pub int_recry_freq: ::std::string::String,
    pub principal_recry_freq: ::std::string::String,
    pub days_past_due: i64,
    pub asset_clsfn: ::std::string::String,
    pub int_type: ::std::string::String,
    pub cust_int_rate: f64,
    pub rate_type: ::std::string::String,
    pub overdue_prin_amount: f64,
    pub overdue_interest_amount: f64,
    pub os_prin: f64,
    pub emi_amount: f64,
    pub accrued_not_recieved_int: f64,
    pub last_payment_date: i64,
    pub next_instmt_due_date: i64,
    pub branch_id: i64,
    pub currency_code: ::std::string::String,
    pub fraud: ::std::string::String,
    pub restructure: ::std::string::String,
    pub A1: f64,
    pub A2: f64,
    pub A3: f64,
    pub A4: f64,
    pub A5: f64,
    pub A6: f64,
    pub A7: f64,
    pub A8: i64,
    pub A9: i64,
    pub A10: i64,
    pub A11: i64,
    pub A12: i64,
    pub A13: i64,
    pub A14: i64,
    pub A15: ::std::string::String,
    pub A16: ::std::string::String,
    pub A17: ::std::string::String,
    pub A18: ::std::string::String,
    pub A19: ::std::string::String,
    pub A20: ::std::string::String,
    pub A21: ::std::string::String,
    pub A22: ::std::string::String,
    pub A23: ::std::string::String,
    pub A24: ::std::string::String,
    pub A25: ::std::string::String,
    pub A26: ::std::string::String,
    pub A27: ::std::string::String,
    pub A28: ::std::string::String,
    pub A29: ::std::string::String,
    pub A30: ::std::string::String,
    pub A31: ::std::string::String,
    pub A32: ::std::string::String,
    pub A33: ::std::string::String,
    pub A34: ::std::string::String,
    pub A35: ::std::string::String,
    pub A36: i64,
    pub A37: i64,
    pub A38: i64,
    pub A39: i64,
    pub A40: i64,
    pub total_principal: f64,
    pub total_interest: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string loan_account_no = 1;


    pub fn get_loan_account_no(&self) -> &str {
        &self.loan_account_no
    }
    pub fn clear_loan_account_no(&mut self) {
        self.loan_account_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_loan_account_no(&mut self, v: ::std::string::String) {
        self.loan_account_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_loan_account_no(&mut self) -> &mut ::std::string::String {
        &mut self.loan_account_no
    }

    // Take field
    pub fn take_loan_account_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.loan_account_no, ::std::string::String::new())
    }

    // int64 loan_id = 2;


    pub fn get_loan_id(&self) -> i64 {
        self.loan_id
    }
    pub fn clear_loan_id(&mut self) {
        self.loan_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_loan_id(&mut self, v: i64) {
        self.loan_id = v;
    }

    // string customer_id = 3;


    pub fn get_customer_id(&self) -> &str {
        &self.customer_id
    }
    pub fn clear_customer_id(&mut self) {
        self.customer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_id(&mut self, v: ::std::string::String) {
        self.customer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_id(&mut self) -> &mut ::std::string::String {
        &mut self.customer_id
    }

    // Take field
    pub fn take_customer_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_id, ::std::string::String::new())
    }

    // int64 product_id = 4;


    pub fn get_product_id(&self) -> i64 {
        self.product_id
    }
    pub fn clear_product_id(&mut self) {
        self.product_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_product_id(&mut self, v: i64) {
        self.product_id = v;
    }

    // string product_desc = 5;


    pub fn get_product_desc(&self) -> &str {
        &self.product_desc
    }
    pub fn clear_product_desc(&mut self) {
        self.product_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_desc(&mut self, v: ::std::string::String) {
        self.product_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_desc(&mut self) -> &mut ::std::string::String {
        &mut self.product_desc
    }

    // Take field
    pub fn take_product_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_desc, ::std::string::String::new())
    }

    // string product_type = 6;


    pub fn get_product_type(&self) -> &str {
        &self.product_type
    }
    pub fn clear_product_type(&mut self) {
        self.product_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_type(&mut self, v: ::std::string::String) {
        self.product_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_type(&mut self) -> &mut ::std::string::String {
        &mut self.product_type
    }

    // Take field
    pub fn take_product_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_type, ::std::string::String::new())
    }

    // string recovery_type = 7;


    pub fn get_recovery_type(&self) -> &str {
        &self.recovery_type
    }
    pub fn clear_recovery_type(&mut self) {
        self.recovery_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_recovery_type(&mut self, v: ::std::string::String) {
        self.recovery_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recovery_type(&mut self) -> &mut ::std::string::String {
        &mut self.recovery_type
    }

    // Take field
    pub fn take_recovery_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.recovery_type, ::std::string::String::new())
    }

    // string cust_name = 8;


    pub fn get_cust_name(&self) -> &str {
        &self.cust_name
    }
    pub fn clear_cust_name(&mut self) {
        self.cust_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_name(&mut self, v: ::std::string::String) {
        self.cust_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_name
    }

    // Take field
    pub fn take_cust_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_name, ::std::string::String::new())
    }

    // int64 disbursal_date = 9;


    pub fn get_disbursal_date(&self) -> i64 {
        self.disbursal_date
    }
    pub fn clear_disbursal_date(&mut self) {
        self.disbursal_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_disbursal_date(&mut self, v: i64) {
        self.disbursal_date = v;
    }

    // int64 due_day = 10;


    pub fn get_due_day(&self) -> i64 {
        self.due_day
    }
    pub fn clear_due_day(&mut self) {
        self.due_day = 0;
    }

    // Param is passed by value, moved
    pub fn set_due_day(&mut self, v: i64) {
        self.due_day = v;
    }

    // int64 maturity_date = 11;


    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }
    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    // int64 original_tenure = 12;


    pub fn get_original_tenure(&self) -> i64 {
        self.original_tenure
    }
    pub fn clear_original_tenure(&mut self) {
        self.original_tenure = 0;
    }

    // Param is passed by value, moved
    pub fn set_original_tenure(&mut self, v: i64) {
        self.original_tenure = v;
    }

    // int64 current_tenure = 13;


    pub fn get_current_tenure(&self) -> i64 {
        self.current_tenure
    }
    pub fn clear_current_tenure(&mut self) {
        self.current_tenure = 0;
    }

    // Param is passed by value, moved
    pub fn set_current_tenure(&mut self, v: i64) {
        self.current_tenure = v;
    }

    // double balance_installments = 14;


    pub fn get_balance_installments(&self) -> f64 {
        self.balance_installments
    }
    pub fn clear_balance_installments(&mut self) {
        self.balance_installments = 0.;
    }

    // Param is passed by value, moved
    pub fn set_balance_installments(&mut self, v: f64) {
        self.balance_installments = v;
    }

    // string installment_type = 15;


    pub fn get_installment_type(&self) -> &str {
        &self.installment_type
    }
    pub fn clear_installment_type(&mut self) {
        self.installment_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_installment_type(&mut self, v: ::std::string::String) {
        self.installment_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_installment_type(&mut self) -> &mut ::std::string::String {
        &mut self.installment_type
    }

    // Take field
    pub fn take_installment_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.installment_type, ::std::string::String::new())
    }

    // string int_recry_freq = 16;


    pub fn get_int_recry_freq(&self) -> &str {
        &self.int_recry_freq
    }
    pub fn clear_int_recry_freq(&mut self) {
        self.int_recry_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_recry_freq(&mut self, v: ::std::string::String) {
        self.int_recry_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_recry_freq(&mut self) -> &mut ::std::string::String {
        &mut self.int_recry_freq
    }

    // Take field
    pub fn take_int_recry_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_recry_freq, ::std::string::String::new())
    }

    // string principal_recry_freq = 17;


    pub fn get_principal_recry_freq(&self) -> &str {
        &self.principal_recry_freq
    }
    pub fn clear_principal_recry_freq(&mut self) {
        self.principal_recry_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_principal_recry_freq(&mut self, v: ::std::string::String) {
        self.principal_recry_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_principal_recry_freq(&mut self) -> &mut ::std::string::String {
        &mut self.principal_recry_freq
    }

    // Take field
    pub fn take_principal_recry_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.principal_recry_freq, ::std::string::String::new())
    }

    // int64 days_past_due = 18;


    pub fn get_days_past_due(&self) -> i64 {
        self.days_past_due
    }
    pub fn clear_days_past_due(&mut self) {
        self.days_past_due = 0;
    }

    // Param is passed by value, moved
    pub fn set_days_past_due(&mut self, v: i64) {
        self.days_past_due = v;
    }

    // string asset_clsfn = 19;


    pub fn get_asset_clsfn(&self) -> &str {
        &self.asset_clsfn
    }
    pub fn clear_asset_clsfn(&mut self) {
        self.asset_clsfn.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_clsfn(&mut self, v: ::std::string::String) {
        self.asset_clsfn = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_clsfn(&mut self) -> &mut ::std::string::String {
        &mut self.asset_clsfn
    }

    // Take field
    pub fn take_asset_clsfn(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_clsfn, ::std::string::String::new())
    }

    // string int_type = 20;


    pub fn get_int_type(&self) -> &str {
        &self.int_type
    }
    pub fn clear_int_type(&mut self) {
        self.int_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_type(&mut self, v: ::std::string::String) {
        self.int_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_type(&mut self) -> &mut ::std::string::String {
        &mut self.int_type
    }

    // Take field
    pub fn take_int_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_type, ::std::string::String::new())
    }

    // double cust_int_rate = 21;


    pub fn get_cust_int_rate(&self) -> f64 {
        self.cust_int_rate
    }
    pub fn clear_cust_int_rate(&mut self) {
        self.cust_int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cust_int_rate(&mut self, v: f64) {
        self.cust_int_rate = v;
    }

    // string rate_type = 22;


    pub fn get_rate_type(&self) -> &str {
        &self.rate_type
    }
    pub fn clear_rate_type(&mut self) {
        self.rate_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_type(&mut self, v: ::std::string::String) {
        self.rate_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_type(&mut self) -> &mut ::std::string::String {
        &mut self.rate_type
    }

    // Take field
    pub fn take_rate_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_type, ::std::string::String::new())
    }

    // double overdue_prin_amount = 23;


    pub fn get_overdue_prin_amount(&self) -> f64 {
        self.overdue_prin_amount
    }
    pub fn clear_overdue_prin_amount(&mut self) {
        self.overdue_prin_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_overdue_prin_amount(&mut self, v: f64) {
        self.overdue_prin_amount = v;
    }

    // double overdue_interest_amount = 24;


    pub fn get_overdue_interest_amount(&self) -> f64 {
        self.overdue_interest_amount
    }
    pub fn clear_overdue_interest_amount(&mut self) {
        self.overdue_interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_overdue_interest_amount(&mut self, v: f64) {
        self.overdue_interest_amount = v;
    }

    // double os_prin = 25;


    pub fn get_os_prin(&self) -> f64 {
        self.os_prin
    }
    pub fn clear_os_prin(&mut self) {
        self.os_prin = 0.;
    }

    // Param is passed by value, moved
    pub fn set_os_prin(&mut self, v: f64) {
        self.os_prin = v;
    }

    // double emi_amount = 26;


    pub fn get_emi_amount(&self) -> f64 {
        self.emi_amount
    }
    pub fn clear_emi_amount(&mut self) {
        self.emi_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amount(&mut self, v: f64) {
        self.emi_amount = v;
    }

    // double accrued_not_recieved_int = 27;


    pub fn get_accrued_not_recieved_int(&self) -> f64 {
        self.accrued_not_recieved_int
    }
    pub fn clear_accrued_not_recieved_int(&mut self) {
        self.accrued_not_recieved_int = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accrued_not_recieved_int(&mut self, v: f64) {
        self.accrued_not_recieved_int = v;
    }

    // int64 last_payment_date = 28;


    pub fn get_last_payment_date(&self) -> i64 {
        self.last_payment_date
    }
    pub fn clear_last_payment_date(&mut self) {
        self.last_payment_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_payment_date(&mut self, v: i64) {
        self.last_payment_date = v;
    }

    // int64 next_instmt_due_date = 29;


    pub fn get_next_instmt_due_date(&self) -> i64 {
        self.next_instmt_due_date
    }
    pub fn clear_next_instmt_due_date(&mut self) {
        self.next_instmt_due_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_instmt_due_date(&mut self, v: i64) {
        self.next_instmt_due_date = v;
    }

    // int64 branch_id = 30;


    pub fn get_branch_id(&self) -> i64 {
        self.branch_id
    }
    pub fn clear_branch_id(&mut self) {
        self.branch_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_branch_id(&mut self, v: i64) {
        self.branch_id = v;
    }

    // string currency_code = 31;


    pub fn get_currency_code(&self) -> &str {
        &self.currency_code
    }
    pub fn clear_currency_code(&mut self) {
        self.currency_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency_code(&mut self, v: ::std::string::String) {
        self.currency_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency_code(&mut self) -> &mut ::std::string::String {
        &mut self.currency_code
    }

    // Take field
    pub fn take_currency_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency_code, ::std::string::String::new())
    }

    // string fraud = 32;


    pub fn get_fraud(&self) -> &str {
        &self.fraud
    }
    pub fn clear_fraud(&mut self) {
        self.fraud.clear();
    }

    // Param is passed by value, moved
    pub fn set_fraud(&mut self, v: ::std::string::String) {
        self.fraud = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fraud(&mut self) -> &mut ::std::string::String {
        &mut self.fraud
    }

    // Take field
    pub fn take_fraud(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fraud, ::std::string::String::new())
    }

    // string restructure = 33;


    pub fn get_restructure(&self) -> &str {
        &self.restructure
    }
    pub fn clear_restructure(&mut self) {
        self.restructure.clear();
    }

    // Param is passed by value, moved
    pub fn set_restructure(&mut self, v: ::std::string::String) {
        self.restructure = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_restructure(&mut self) -> &mut ::std::string::String {
        &mut self.restructure
    }

    // Take field
    pub fn take_restructure(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.restructure, ::std::string::String::new())
    }

    // double A1 = 34;


    pub fn get_A1(&self) -> f64 {
        self.A1
    }
    pub fn clear_A1(&mut self) {
        self.A1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_A1(&mut self, v: f64) {
        self.A1 = v;
    }

    // double A2 = 35;


    pub fn get_A2(&self) -> f64 {
        self.A2
    }
    pub fn clear_A2(&mut self) {
        self.A2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_A2(&mut self, v: f64) {
        self.A2 = v;
    }

    // double A3 = 36;


    pub fn get_A3(&self) -> f64 {
        self.A3
    }
    pub fn clear_A3(&mut self) {
        self.A3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_A3(&mut self, v: f64) {
        self.A3 = v;
    }

    // double A4 = 37;


    pub fn get_A4(&self) -> f64 {
        self.A4
    }
    pub fn clear_A4(&mut self) {
        self.A4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_A4(&mut self, v: f64) {
        self.A4 = v;
    }

    // double A5 = 38;


    pub fn get_A5(&self) -> f64 {
        self.A5
    }
    pub fn clear_A5(&mut self) {
        self.A5 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_A5(&mut self, v: f64) {
        self.A5 = v;
    }

    // double A6 = 39;


    pub fn get_A6(&self) -> f64 {
        self.A6
    }
    pub fn clear_A6(&mut self) {
        self.A6 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_A6(&mut self, v: f64) {
        self.A6 = v;
    }

    // double A7 = 40;


    pub fn get_A7(&self) -> f64 {
        self.A7
    }
    pub fn clear_A7(&mut self) {
        self.A7 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_A7(&mut self, v: f64) {
        self.A7 = v;
    }

    // int64 A8 = 41;


    pub fn get_A8(&self) -> i64 {
        self.A8
    }
    pub fn clear_A8(&mut self) {
        self.A8 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A8(&mut self, v: i64) {
        self.A8 = v;
    }

    // int64 A9 = 42;


    pub fn get_A9(&self) -> i64 {
        self.A9
    }
    pub fn clear_A9(&mut self) {
        self.A9 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A9(&mut self, v: i64) {
        self.A9 = v;
    }

    // int64 A10 = 43;


    pub fn get_A10(&self) -> i64 {
        self.A10
    }
    pub fn clear_A10(&mut self) {
        self.A10 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A10(&mut self, v: i64) {
        self.A10 = v;
    }

    // int64 A11 = 44;


    pub fn get_A11(&self) -> i64 {
        self.A11
    }
    pub fn clear_A11(&mut self) {
        self.A11 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A11(&mut self, v: i64) {
        self.A11 = v;
    }

    // int64 A12 = 45;


    pub fn get_A12(&self) -> i64 {
        self.A12
    }
    pub fn clear_A12(&mut self) {
        self.A12 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A12(&mut self, v: i64) {
        self.A12 = v;
    }

    // int64 A13 = 46;


    pub fn get_A13(&self) -> i64 {
        self.A13
    }
    pub fn clear_A13(&mut self) {
        self.A13 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A13(&mut self, v: i64) {
        self.A13 = v;
    }

    // int64 A14 = 47;


    pub fn get_A14(&self) -> i64 {
        self.A14
    }
    pub fn clear_A14(&mut self) {
        self.A14 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A14(&mut self, v: i64) {
        self.A14 = v;
    }

    // string A15 = 48;


    pub fn get_A15(&self) -> &str {
        &self.A15
    }
    pub fn clear_A15(&mut self) {
        self.A15.clear();
    }

    // Param is passed by value, moved
    pub fn set_A15(&mut self, v: ::std::string::String) {
        self.A15 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A15(&mut self) -> &mut ::std::string::String {
        &mut self.A15
    }

    // Take field
    pub fn take_A15(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A15, ::std::string::String::new())
    }

    // string A16 = 49;


    pub fn get_A16(&self) -> &str {
        &self.A16
    }
    pub fn clear_A16(&mut self) {
        self.A16.clear();
    }

    // Param is passed by value, moved
    pub fn set_A16(&mut self, v: ::std::string::String) {
        self.A16 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A16(&mut self) -> &mut ::std::string::String {
        &mut self.A16
    }

    // Take field
    pub fn take_A16(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A16, ::std::string::String::new())
    }

    // string A17 = 50;


    pub fn get_A17(&self) -> &str {
        &self.A17
    }
    pub fn clear_A17(&mut self) {
        self.A17.clear();
    }

    // Param is passed by value, moved
    pub fn set_A17(&mut self, v: ::std::string::String) {
        self.A17 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A17(&mut self) -> &mut ::std::string::String {
        &mut self.A17
    }

    // Take field
    pub fn take_A17(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A17, ::std::string::String::new())
    }

    // string A18 = 51;


    pub fn get_A18(&self) -> &str {
        &self.A18
    }
    pub fn clear_A18(&mut self) {
        self.A18.clear();
    }

    // Param is passed by value, moved
    pub fn set_A18(&mut self, v: ::std::string::String) {
        self.A18 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A18(&mut self) -> &mut ::std::string::String {
        &mut self.A18
    }

    // Take field
    pub fn take_A18(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A18, ::std::string::String::new())
    }

    // string A19 = 52;


    pub fn get_A19(&self) -> &str {
        &self.A19
    }
    pub fn clear_A19(&mut self) {
        self.A19.clear();
    }

    // Param is passed by value, moved
    pub fn set_A19(&mut self, v: ::std::string::String) {
        self.A19 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A19(&mut self) -> &mut ::std::string::String {
        &mut self.A19
    }

    // Take field
    pub fn take_A19(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A19, ::std::string::String::new())
    }

    // string A20 = 53;


    pub fn get_A20(&self) -> &str {
        &self.A20
    }
    pub fn clear_A20(&mut self) {
        self.A20.clear();
    }

    // Param is passed by value, moved
    pub fn set_A20(&mut self, v: ::std::string::String) {
        self.A20 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A20(&mut self) -> &mut ::std::string::String {
        &mut self.A20
    }

    // Take field
    pub fn take_A20(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A20, ::std::string::String::new())
    }

    // string A21 = 54;


    pub fn get_A21(&self) -> &str {
        &self.A21
    }
    pub fn clear_A21(&mut self) {
        self.A21.clear();
    }

    // Param is passed by value, moved
    pub fn set_A21(&mut self, v: ::std::string::String) {
        self.A21 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A21(&mut self) -> &mut ::std::string::String {
        &mut self.A21
    }

    // Take field
    pub fn take_A21(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A21, ::std::string::String::new())
    }

    // string A22 = 55;


    pub fn get_A22(&self) -> &str {
        &self.A22
    }
    pub fn clear_A22(&mut self) {
        self.A22.clear();
    }

    // Param is passed by value, moved
    pub fn set_A22(&mut self, v: ::std::string::String) {
        self.A22 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A22(&mut self) -> &mut ::std::string::String {
        &mut self.A22
    }

    // Take field
    pub fn take_A22(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A22, ::std::string::String::new())
    }

    // string A23 = 56;


    pub fn get_A23(&self) -> &str {
        &self.A23
    }
    pub fn clear_A23(&mut self) {
        self.A23.clear();
    }

    // Param is passed by value, moved
    pub fn set_A23(&mut self, v: ::std::string::String) {
        self.A23 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A23(&mut self) -> &mut ::std::string::String {
        &mut self.A23
    }

    // Take field
    pub fn take_A23(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A23, ::std::string::String::new())
    }

    // string A24 = 57;


    pub fn get_A24(&self) -> &str {
        &self.A24
    }
    pub fn clear_A24(&mut self) {
        self.A24.clear();
    }

    // Param is passed by value, moved
    pub fn set_A24(&mut self, v: ::std::string::String) {
        self.A24 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A24(&mut self) -> &mut ::std::string::String {
        &mut self.A24
    }

    // Take field
    pub fn take_A24(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A24, ::std::string::String::new())
    }

    // string A25 = 58;


    pub fn get_A25(&self) -> &str {
        &self.A25
    }
    pub fn clear_A25(&mut self) {
        self.A25.clear();
    }

    // Param is passed by value, moved
    pub fn set_A25(&mut self, v: ::std::string::String) {
        self.A25 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A25(&mut self) -> &mut ::std::string::String {
        &mut self.A25
    }

    // Take field
    pub fn take_A25(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A25, ::std::string::String::new())
    }

    // string A26 = 59;


    pub fn get_A26(&self) -> &str {
        &self.A26
    }
    pub fn clear_A26(&mut self) {
        self.A26.clear();
    }

    // Param is passed by value, moved
    pub fn set_A26(&mut self, v: ::std::string::String) {
        self.A26 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A26(&mut self) -> &mut ::std::string::String {
        &mut self.A26
    }

    // Take field
    pub fn take_A26(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A26, ::std::string::String::new())
    }

    // string A27 = 60;


    pub fn get_A27(&self) -> &str {
        &self.A27
    }
    pub fn clear_A27(&mut self) {
        self.A27.clear();
    }

    // Param is passed by value, moved
    pub fn set_A27(&mut self, v: ::std::string::String) {
        self.A27 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A27(&mut self) -> &mut ::std::string::String {
        &mut self.A27
    }

    // Take field
    pub fn take_A27(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A27, ::std::string::String::new())
    }

    // string A28 = 61;


    pub fn get_A28(&self) -> &str {
        &self.A28
    }
    pub fn clear_A28(&mut self) {
        self.A28.clear();
    }

    // Param is passed by value, moved
    pub fn set_A28(&mut self, v: ::std::string::String) {
        self.A28 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A28(&mut self) -> &mut ::std::string::String {
        &mut self.A28
    }

    // Take field
    pub fn take_A28(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A28, ::std::string::String::new())
    }

    // string A29 = 62;


    pub fn get_A29(&self) -> &str {
        &self.A29
    }
    pub fn clear_A29(&mut self) {
        self.A29.clear();
    }

    // Param is passed by value, moved
    pub fn set_A29(&mut self, v: ::std::string::String) {
        self.A29 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A29(&mut self) -> &mut ::std::string::String {
        &mut self.A29
    }

    // Take field
    pub fn take_A29(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A29, ::std::string::String::new())
    }

    // string A30 = 63;


    pub fn get_A30(&self) -> &str {
        &self.A30
    }
    pub fn clear_A30(&mut self) {
        self.A30.clear();
    }

    // Param is passed by value, moved
    pub fn set_A30(&mut self, v: ::std::string::String) {
        self.A30 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A30(&mut self) -> &mut ::std::string::String {
        &mut self.A30
    }

    // Take field
    pub fn take_A30(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A30, ::std::string::String::new())
    }

    // string A31 = 64;


    pub fn get_A31(&self) -> &str {
        &self.A31
    }
    pub fn clear_A31(&mut self) {
        self.A31.clear();
    }

    // Param is passed by value, moved
    pub fn set_A31(&mut self, v: ::std::string::String) {
        self.A31 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A31(&mut self) -> &mut ::std::string::String {
        &mut self.A31
    }

    // Take field
    pub fn take_A31(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A31, ::std::string::String::new())
    }

    // string A32 = 65;


    pub fn get_A32(&self) -> &str {
        &self.A32
    }
    pub fn clear_A32(&mut self) {
        self.A32.clear();
    }

    // Param is passed by value, moved
    pub fn set_A32(&mut self, v: ::std::string::String) {
        self.A32 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A32(&mut self) -> &mut ::std::string::String {
        &mut self.A32
    }

    // Take field
    pub fn take_A32(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A32, ::std::string::String::new())
    }

    // string A33 = 66;


    pub fn get_A33(&self) -> &str {
        &self.A33
    }
    pub fn clear_A33(&mut self) {
        self.A33.clear();
    }

    // Param is passed by value, moved
    pub fn set_A33(&mut self, v: ::std::string::String) {
        self.A33 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A33(&mut self) -> &mut ::std::string::String {
        &mut self.A33
    }

    // Take field
    pub fn take_A33(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A33, ::std::string::String::new())
    }

    // string A34 = 67;


    pub fn get_A34(&self) -> &str {
        &self.A34
    }
    pub fn clear_A34(&mut self) {
        self.A34.clear();
    }

    // Param is passed by value, moved
    pub fn set_A34(&mut self, v: ::std::string::String) {
        self.A34 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A34(&mut self) -> &mut ::std::string::String {
        &mut self.A34
    }

    // Take field
    pub fn take_A34(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A34, ::std::string::String::new())
    }

    // string A35 = 68;


    pub fn get_A35(&self) -> &str {
        &self.A35
    }
    pub fn clear_A35(&mut self) {
        self.A35.clear();
    }

    // Param is passed by value, moved
    pub fn set_A35(&mut self, v: ::std::string::String) {
        self.A35 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_A35(&mut self) -> &mut ::std::string::String {
        &mut self.A35
    }

    // Take field
    pub fn take_A35(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.A35, ::std::string::String::new())
    }

    // int64 A36 = 69;


    pub fn get_A36(&self) -> i64 {
        self.A36
    }
    pub fn clear_A36(&mut self) {
        self.A36 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A36(&mut self, v: i64) {
        self.A36 = v;
    }

    // int64 A37 = 70;


    pub fn get_A37(&self) -> i64 {
        self.A37
    }
    pub fn clear_A37(&mut self) {
        self.A37 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A37(&mut self, v: i64) {
        self.A37 = v;
    }

    // int64 A38 = 71;


    pub fn get_A38(&self) -> i64 {
        self.A38
    }
    pub fn clear_A38(&mut self) {
        self.A38 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A38(&mut self, v: i64) {
        self.A38 = v;
    }

    // int64 A39 = 72;


    pub fn get_A39(&self) -> i64 {
        self.A39
    }
    pub fn clear_A39(&mut self) {
        self.A39 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A39(&mut self, v: i64) {
        self.A39 = v;
    }

    // int64 A40 = 73;


    pub fn get_A40(&self) -> i64 {
        self.A40
    }
    pub fn clear_A40(&mut self) {
        self.A40 = 0;
    }

    // Param is passed by value, moved
    pub fn set_A40(&mut self, v: i64) {
        self.A40 = v;
    }

    // double total_principal = 74;


    pub fn get_total_principal(&self) -> f64 {
        self.total_principal
    }
    pub fn clear_total_principal(&mut self) {
        self.total_principal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_principal(&mut self, v: f64) {
        self.total_principal = v;
    }

    // double total_interest = 75;


    pub fn get_total_interest(&self) -> f64 {
        self.total_interest
    }
    pub fn clear_total_interest(&mut self) {
        self.total_interest = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest(&mut self, v: f64) {
        self.total_interest = v;
    }

    // repeated .Cashflow cashflows = 76;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.loan_account_no)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.loan_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.product_id = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product_desc)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product_type)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.recovery_type)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_name)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.disbursal_date = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.due_day = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.original_tenure = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.current_tenure = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.balance_installments = tmp;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.installment_type)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_recry_freq)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.principal_recry_freq)?;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.days_past_due = tmp;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_clsfn)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_type)?;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.cust_int_rate = tmp;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_type)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.overdue_prin_amount = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.overdue_interest_amount = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.os_prin = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amount = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.accrued_not_recieved_int = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_payment_date = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_instmt_due_date = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.branch_id = tmp;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency_code)?;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fraud)?;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.restructure)?;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.A1 = tmp;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.A2 = tmp;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.A3 = tmp;
                },
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.A4 = tmp;
                },
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.A5 = tmp;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.A6 = tmp;
                },
                40 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.A7 = tmp;
                },
                41 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A8 = tmp;
                },
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A9 = tmp;
                },
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A10 = tmp;
                },
                44 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A11 = tmp;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A12 = tmp;
                },
                46 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A13 = tmp;
                },
                47 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A14 = tmp;
                },
                48 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A15)?;
                },
                49 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A16)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A17)?;
                },
                51 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A18)?;
                },
                52 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A19)?;
                },
                53 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A20)?;
                },
                54 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A21)?;
                },
                55 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A22)?;
                },
                56 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A23)?;
                },
                57 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A24)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A25)?;
                },
                59 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A26)?;
                },
                60 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A27)?;
                },
                61 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A28)?;
                },
                62 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A29)?;
                },
                63 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A30)?;
                },
                64 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A31)?;
                },
                65 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A32)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A33)?;
                },
                67 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A34)?;
                },
                68 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.A35)?;
                },
                69 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A36 = tmp;
                },
                70 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A37 = tmp;
                },
                71 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A38 = tmp;
                },
                72 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A39 = tmp;
                },
                73 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.A40 = tmp;
                },
                74 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_principal = tmp;
                },
                75 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest = tmp;
                },
                76 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.loan_account_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.loan_account_no);
        }
        if self.loan_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.loan_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.customer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.customer_id);
        }
        if self.product_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.product_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.product_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.product_desc);
        }
        if !self.product_type.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.product_type);
        }
        if !self.recovery_type.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.recovery_type);
        }
        if !self.cust_name.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.cust_name);
        }
        if self.disbursal_date != 0 {
            my_size += ::protobuf::rt::value_size(9, self.disbursal_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.due_day != 0 {
            my_size += ::protobuf::rt::value_size(10, self.due_day, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(11, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.original_tenure != 0 {
            my_size += ::protobuf::rt::value_size(12, self.original_tenure, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.current_tenure != 0 {
            my_size += ::protobuf::rt::value_size(13, self.current_tenure, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.balance_installments != 0. {
            my_size += 9;
        }
        if !self.installment_type.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.installment_type);
        }
        if !self.int_recry_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.int_recry_freq);
        }
        if !self.principal_recry_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.principal_recry_freq);
        }
        if self.days_past_due != 0 {
            my_size += ::protobuf::rt::value_size(18, self.days_past_due, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.asset_clsfn.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.asset_clsfn);
        }
        if !self.int_type.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.int_type);
        }
        if self.cust_int_rate != 0. {
            my_size += 10;
        }
        if !self.rate_type.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.rate_type);
        }
        if self.overdue_prin_amount != 0. {
            my_size += 10;
        }
        if self.overdue_interest_amount != 0. {
            my_size += 10;
        }
        if self.os_prin != 0. {
            my_size += 10;
        }
        if self.emi_amount != 0. {
            my_size += 10;
        }
        if self.accrued_not_recieved_int != 0. {
            my_size += 10;
        }
        if self.last_payment_date != 0 {
            my_size += ::protobuf::rt::value_size(28, self.last_payment_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_instmt_due_date != 0 {
            my_size += ::protobuf::rt::value_size(29, self.next_instmt_due_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.branch_id != 0 {
            my_size += ::protobuf::rt::value_size(30, self.branch_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.currency_code.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.currency_code);
        }
        if !self.fraud.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.fraud);
        }
        if !self.restructure.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.restructure);
        }
        if self.A1 != 0. {
            my_size += 10;
        }
        if self.A2 != 0. {
            my_size += 10;
        }
        if self.A3 != 0. {
            my_size += 10;
        }
        if self.A4 != 0. {
            my_size += 10;
        }
        if self.A5 != 0. {
            my_size += 10;
        }
        if self.A6 != 0. {
            my_size += 10;
        }
        if self.A7 != 0. {
            my_size += 10;
        }
        if self.A8 != 0 {
            my_size += ::protobuf::rt::value_size(41, self.A8, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A9 != 0 {
            my_size += ::protobuf::rt::value_size(42, self.A9, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A10 != 0 {
            my_size += ::protobuf::rt::value_size(43, self.A10, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A11 != 0 {
            my_size += ::protobuf::rt::value_size(44, self.A11, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A12 != 0 {
            my_size += ::protobuf::rt::value_size(45, self.A12, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A13 != 0 {
            my_size += ::protobuf::rt::value_size(46, self.A13, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A14 != 0 {
            my_size += ::protobuf::rt::value_size(47, self.A14, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.A15.is_empty() {
            my_size += ::protobuf::rt::string_size(48, &self.A15);
        }
        if !self.A16.is_empty() {
            my_size += ::protobuf::rt::string_size(49, &self.A16);
        }
        if !self.A17.is_empty() {
            my_size += ::protobuf::rt::string_size(50, &self.A17);
        }
        if !self.A18.is_empty() {
            my_size += ::protobuf::rt::string_size(51, &self.A18);
        }
        if !self.A19.is_empty() {
            my_size += ::protobuf::rt::string_size(52, &self.A19);
        }
        if !self.A20.is_empty() {
            my_size += ::protobuf::rt::string_size(53, &self.A20);
        }
        if !self.A21.is_empty() {
            my_size += ::protobuf::rt::string_size(54, &self.A21);
        }
        if !self.A22.is_empty() {
            my_size += ::protobuf::rt::string_size(55, &self.A22);
        }
        if !self.A23.is_empty() {
            my_size += ::protobuf::rt::string_size(56, &self.A23);
        }
        if !self.A24.is_empty() {
            my_size += ::protobuf::rt::string_size(57, &self.A24);
        }
        if !self.A25.is_empty() {
            my_size += ::protobuf::rt::string_size(58, &self.A25);
        }
        if !self.A26.is_empty() {
            my_size += ::protobuf::rt::string_size(59, &self.A26);
        }
        if !self.A27.is_empty() {
            my_size += ::protobuf::rt::string_size(60, &self.A27);
        }
        if !self.A28.is_empty() {
            my_size += ::protobuf::rt::string_size(61, &self.A28);
        }
        if !self.A29.is_empty() {
            my_size += ::protobuf::rt::string_size(62, &self.A29);
        }
        if !self.A30.is_empty() {
            my_size += ::protobuf::rt::string_size(63, &self.A30);
        }
        if !self.A31.is_empty() {
            my_size += ::protobuf::rt::string_size(64, &self.A31);
        }
        if !self.A32.is_empty() {
            my_size += ::protobuf::rt::string_size(65, &self.A32);
        }
        if !self.A33.is_empty() {
            my_size += ::protobuf::rt::string_size(66, &self.A33);
        }
        if !self.A34.is_empty() {
            my_size += ::protobuf::rt::string_size(67, &self.A34);
        }
        if !self.A35.is_empty() {
            my_size += ::protobuf::rt::string_size(68, &self.A35);
        }
        if self.A36 != 0 {
            my_size += ::protobuf::rt::value_size(69, self.A36, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A37 != 0 {
            my_size += ::protobuf::rt::value_size(70, self.A37, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A38 != 0 {
            my_size += ::protobuf::rt::value_size(71, self.A38, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A39 != 0 {
            my_size += ::protobuf::rt::value_size(72, self.A39, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.A40 != 0 {
            my_size += ::protobuf::rt::value_size(73, self.A40, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_principal != 0. {
            my_size += 10;
        }
        if self.total_interest != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.loan_account_no.is_empty() {
            os.write_string(1, &self.loan_account_no)?;
        }
        if self.loan_id != 0 {
            os.write_int64(2, self.loan_id)?;
        }
        if !self.customer_id.is_empty() {
            os.write_string(3, &self.customer_id)?;
        }
        if self.product_id != 0 {
            os.write_int64(4, self.product_id)?;
        }
        if !self.product_desc.is_empty() {
            os.write_string(5, &self.product_desc)?;
        }
        if !self.product_type.is_empty() {
            os.write_string(6, &self.product_type)?;
        }
        if !self.recovery_type.is_empty() {
            os.write_string(7, &self.recovery_type)?;
        }
        if !self.cust_name.is_empty() {
            os.write_string(8, &self.cust_name)?;
        }
        if self.disbursal_date != 0 {
            os.write_int64(9, self.disbursal_date)?;
        }
        if self.due_day != 0 {
            os.write_int64(10, self.due_day)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(11, self.maturity_date)?;
        }
        if self.original_tenure != 0 {
            os.write_int64(12, self.original_tenure)?;
        }
        if self.current_tenure != 0 {
            os.write_int64(13, self.current_tenure)?;
        }
        if self.balance_installments != 0. {
            os.write_double(14, self.balance_installments)?;
        }
        if !self.installment_type.is_empty() {
            os.write_string(15, &self.installment_type)?;
        }
        if !self.int_recry_freq.is_empty() {
            os.write_string(16, &self.int_recry_freq)?;
        }
        if !self.principal_recry_freq.is_empty() {
            os.write_string(17, &self.principal_recry_freq)?;
        }
        if self.days_past_due != 0 {
            os.write_int64(18, self.days_past_due)?;
        }
        if !self.asset_clsfn.is_empty() {
            os.write_string(19, &self.asset_clsfn)?;
        }
        if !self.int_type.is_empty() {
            os.write_string(20, &self.int_type)?;
        }
        if self.cust_int_rate != 0. {
            os.write_double(21, self.cust_int_rate)?;
        }
        if !self.rate_type.is_empty() {
            os.write_string(22, &self.rate_type)?;
        }
        if self.overdue_prin_amount != 0. {
            os.write_double(23, self.overdue_prin_amount)?;
        }
        if self.overdue_interest_amount != 0. {
            os.write_double(24, self.overdue_interest_amount)?;
        }
        if self.os_prin != 0. {
            os.write_double(25, self.os_prin)?;
        }
        if self.emi_amount != 0. {
            os.write_double(26, self.emi_amount)?;
        }
        if self.accrued_not_recieved_int != 0. {
            os.write_double(27, self.accrued_not_recieved_int)?;
        }
        if self.last_payment_date != 0 {
            os.write_int64(28, self.last_payment_date)?;
        }
        if self.next_instmt_due_date != 0 {
            os.write_int64(29, self.next_instmt_due_date)?;
        }
        if self.branch_id != 0 {
            os.write_int64(30, self.branch_id)?;
        }
        if !self.currency_code.is_empty() {
            os.write_string(31, &self.currency_code)?;
        }
        if !self.fraud.is_empty() {
            os.write_string(32, &self.fraud)?;
        }
        if !self.restructure.is_empty() {
            os.write_string(33, &self.restructure)?;
        }
        if self.A1 != 0. {
            os.write_double(34, self.A1)?;
        }
        if self.A2 != 0. {
            os.write_double(35, self.A2)?;
        }
        if self.A3 != 0. {
            os.write_double(36, self.A3)?;
        }
        if self.A4 != 0. {
            os.write_double(37, self.A4)?;
        }
        if self.A5 != 0. {
            os.write_double(38, self.A5)?;
        }
        if self.A6 != 0. {
            os.write_double(39, self.A6)?;
        }
        if self.A7 != 0. {
            os.write_double(40, self.A7)?;
        }
        if self.A8 != 0 {
            os.write_int64(41, self.A8)?;
        }
        if self.A9 != 0 {
            os.write_int64(42, self.A9)?;
        }
        if self.A10 != 0 {
            os.write_int64(43, self.A10)?;
        }
        if self.A11 != 0 {
            os.write_int64(44, self.A11)?;
        }
        if self.A12 != 0 {
            os.write_int64(45, self.A12)?;
        }
        if self.A13 != 0 {
            os.write_int64(46, self.A13)?;
        }
        if self.A14 != 0 {
            os.write_int64(47, self.A14)?;
        }
        if !self.A15.is_empty() {
            os.write_string(48, &self.A15)?;
        }
        if !self.A16.is_empty() {
            os.write_string(49, &self.A16)?;
        }
        if !self.A17.is_empty() {
            os.write_string(50, &self.A17)?;
        }
        if !self.A18.is_empty() {
            os.write_string(51, &self.A18)?;
        }
        if !self.A19.is_empty() {
            os.write_string(52, &self.A19)?;
        }
        if !self.A20.is_empty() {
            os.write_string(53, &self.A20)?;
        }
        if !self.A21.is_empty() {
            os.write_string(54, &self.A21)?;
        }
        if !self.A22.is_empty() {
            os.write_string(55, &self.A22)?;
        }
        if !self.A23.is_empty() {
            os.write_string(56, &self.A23)?;
        }
        if !self.A24.is_empty() {
            os.write_string(57, &self.A24)?;
        }
        if !self.A25.is_empty() {
            os.write_string(58, &self.A25)?;
        }
        if !self.A26.is_empty() {
            os.write_string(59, &self.A26)?;
        }
        if !self.A27.is_empty() {
            os.write_string(60, &self.A27)?;
        }
        if !self.A28.is_empty() {
            os.write_string(61, &self.A28)?;
        }
        if !self.A29.is_empty() {
            os.write_string(62, &self.A29)?;
        }
        if !self.A30.is_empty() {
            os.write_string(63, &self.A30)?;
        }
        if !self.A31.is_empty() {
            os.write_string(64, &self.A31)?;
        }
        if !self.A32.is_empty() {
            os.write_string(65, &self.A32)?;
        }
        if !self.A33.is_empty() {
            os.write_string(66, &self.A33)?;
        }
        if !self.A34.is_empty() {
            os.write_string(67, &self.A34)?;
        }
        if !self.A35.is_empty() {
            os.write_string(68, &self.A35)?;
        }
        if self.A36 != 0 {
            os.write_int64(69, self.A36)?;
        }
        if self.A37 != 0 {
            os.write_int64(70, self.A37)?;
        }
        if self.A38 != 0 {
            os.write_int64(71, self.A38)?;
        }
        if self.A39 != 0 {
            os.write_int64(72, self.A39)?;
        }
        if self.A40 != 0 {
            os.write_int64(73, self.A40)?;
        }
        if self.total_principal != 0. {
            os.write_double(74, self.total_principal)?;
        }
        if self.total_interest != 0. {
            os.write_double(75, self.total_interest)?;
        }
        for v in &self.cashflows {
            os.write_tag(76, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "loan_account_no",
                |m: &AccountWithCashflows| { &m.loan_account_no },
                |m: &mut AccountWithCashflows| { &mut m.loan_account_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "loan_id",
                |m: &AccountWithCashflows| { &m.loan_id },
                |m: &mut AccountWithCashflows| { &mut m.loan_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_id",
                |m: &AccountWithCashflows| { &m.customer_id },
                |m: &mut AccountWithCashflows| { &mut m.customer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "product_id",
                |m: &AccountWithCashflows| { &m.product_id },
                |m: &mut AccountWithCashflows| { &mut m.product_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "product_desc",
                |m: &AccountWithCashflows| { &m.product_desc },
                |m: &mut AccountWithCashflows| { &mut m.product_desc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "product_type",
                |m: &AccountWithCashflows| { &m.product_type },
                |m: &mut AccountWithCashflows| { &mut m.product_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "recovery_type",
                |m: &AccountWithCashflows| { &m.recovery_type },
                |m: &mut AccountWithCashflows| { &mut m.recovery_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_name",
                |m: &AccountWithCashflows| { &m.cust_name },
                |m: &mut AccountWithCashflows| { &mut m.cust_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "disbursal_date",
                |m: &AccountWithCashflows| { &m.disbursal_date },
                |m: &mut AccountWithCashflows| { &mut m.disbursal_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "due_day",
                |m: &AccountWithCashflows| { &m.due_day },
                |m: &mut AccountWithCashflows| { &mut m.due_day },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "maturity_date",
                |m: &AccountWithCashflows| { &m.maturity_date },
                |m: &mut AccountWithCashflows| { &mut m.maturity_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "original_tenure",
                |m: &AccountWithCashflows| { &m.original_tenure },
                |m: &mut AccountWithCashflows| { &mut m.original_tenure },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "current_tenure",
                |m: &AccountWithCashflows| { &m.current_tenure },
                |m: &mut AccountWithCashflows| { &mut m.current_tenure },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "balance_installments",
                |m: &AccountWithCashflows| { &m.balance_installments },
                |m: &mut AccountWithCashflows| { &mut m.balance_installments },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "installment_type",
                |m: &AccountWithCashflows| { &m.installment_type },
                |m: &mut AccountWithCashflows| { &mut m.installment_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_recry_freq",
                |m: &AccountWithCashflows| { &m.int_recry_freq },
                |m: &mut AccountWithCashflows| { &mut m.int_recry_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "principal_recry_freq",
                |m: &AccountWithCashflows| { &m.principal_recry_freq },
                |m: &mut AccountWithCashflows| { &mut m.principal_recry_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "days_past_due",
                |m: &AccountWithCashflows| { &m.days_past_due },
                |m: &mut AccountWithCashflows| { &mut m.days_past_due },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_clsfn",
                |m: &AccountWithCashflows| { &m.asset_clsfn },
                |m: &mut AccountWithCashflows| { &mut m.asset_clsfn },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_type",
                |m: &AccountWithCashflows| { &m.int_type },
                |m: &mut AccountWithCashflows| { &mut m.int_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "cust_int_rate",
                |m: &AccountWithCashflows| { &m.cust_int_rate },
                |m: &mut AccountWithCashflows| { &mut m.cust_int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rate_type",
                |m: &AccountWithCashflows| { &m.rate_type },
                |m: &mut AccountWithCashflows| { &mut m.rate_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "overdue_prin_amount",
                |m: &AccountWithCashflows| { &m.overdue_prin_amount },
                |m: &mut AccountWithCashflows| { &mut m.overdue_prin_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "overdue_interest_amount",
                |m: &AccountWithCashflows| { &m.overdue_interest_amount },
                |m: &mut AccountWithCashflows| { &mut m.overdue_interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "os_prin",
                |m: &AccountWithCashflows| { &m.os_prin },
                |m: &mut AccountWithCashflows| { &mut m.os_prin },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "emi_amount",
                |m: &AccountWithCashflows| { &m.emi_amount },
                |m: &mut AccountWithCashflows| { &mut m.emi_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "accrued_not_recieved_int",
                |m: &AccountWithCashflows| { &m.accrued_not_recieved_int },
                |m: &mut AccountWithCashflows| { &mut m.accrued_not_recieved_int },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_payment_date",
                |m: &AccountWithCashflows| { &m.last_payment_date },
                |m: &mut AccountWithCashflows| { &mut m.last_payment_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_instmt_due_date",
                |m: &AccountWithCashflows| { &m.next_instmt_due_date },
                |m: &mut AccountWithCashflows| { &mut m.next_instmt_due_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "branch_id",
                |m: &AccountWithCashflows| { &m.branch_id },
                |m: &mut AccountWithCashflows| { &mut m.branch_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency_code",
                |m: &AccountWithCashflows| { &m.currency_code },
                |m: &mut AccountWithCashflows| { &mut m.currency_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fraud",
                |m: &AccountWithCashflows| { &m.fraud },
                |m: &mut AccountWithCashflows| { &mut m.fraud },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "restructure",
                |m: &AccountWithCashflows| { &m.restructure },
                |m: &mut AccountWithCashflows| { &mut m.restructure },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "A1",
                |m: &AccountWithCashflows| { &m.A1 },
                |m: &mut AccountWithCashflows| { &mut m.A1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "A2",
                |m: &AccountWithCashflows| { &m.A2 },
                |m: &mut AccountWithCashflows| { &mut m.A2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "A3",
                |m: &AccountWithCashflows| { &m.A3 },
                |m: &mut AccountWithCashflows| { &mut m.A3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "A4",
                |m: &AccountWithCashflows| { &m.A4 },
                |m: &mut AccountWithCashflows| { &mut m.A4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "A5",
                |m: &AccountWithCashflows| { &m.A5 },
                |m: &mut AccountWithCashflows| { &mut m.A5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "A6",
                |m: &AccountWithCashflows| { &m.A6 },
                |m: &mut AccountWithCashflows| { &mut m.A6 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "A7",
                |m: &AccountWithCashflows| { &m.A7 },
                |m: &mut AccountWithCashflows| { &mut m.A7 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A8",
                |m: &AccountWithCashflows| { &m.A8 },
                |m: &mut AccountWithCashflows| { &mut m.A8 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A9",
                |m: &AccountWithCashflows| { &m.A9 },
                |m: &mut AccountWithCashflows| { &mut m.A9 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A10",
                |m: &AccountWithCashflows| { &m.A10 },
                |m: &mut AccountWithCashflows| { &mut m.A10 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A11",
                |m: &AccountWithCashflows| { &m.A11 },
                |m: &mut AccountWithCashflows| { &mut m.A11 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A12",
                |m: &AccountWithCashflows| { &m.A12 },
                |m: &mut AccountWithCashflows| { &mut m.A12 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A13",
                |m: &AccountWithCashflows| { &m.A13 },
                |m: &mut AccountWithCashflows| { &mut m.A13 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A14",
                |m: &AccountWithCashflows| { &m.A14 },
                |m: &mut AccountWithCashflows| { &mut m.A14 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A15",
                |m: &AccountWithCashflows| { &m.A15 },
                |m: &mut AccountWithCashflows| { &mut m.A15 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A16",
                |m: &AccountWithCashflows| { &m.A16 },
                |m: &mut AccountWithCashflows| { &mut m.A16 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A17",
                |m: &AccountWithCashflows| { &m.A17 },
                |m: &mut AccountWithCashflows| { &mut m.A17 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A18",
                |m: &AccountWithCashflows| { &m.A18 },
                |m: &mut AccountWithCashflows| { &mut m.A18 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A19",
                |m: &AccountWithCashflows| { &m.A19 },
                |m: &mut AccountWithCashflows| { &mut m.A19 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A20",
                |m: &AccountWithCashflows| { &m.A20 },
                |m: &mut AccountWithCashflows| { &mut m.A20 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A21",
                |m: &AccountWithCashflows| { &m.A21 },
                |m: &mut AccountWithCashflows| { &mut m.A21 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A22",
                |m: &AccountWithCashflows| { &m.A22 },
                |m: &mut AccountWithCashflows| { &mut m.A22 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A23",
                |m: &AccountWithCashflows| { &m.A23 },
                |m: &mut AccountWithCashflows| { &mut m.A23 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A24",
                |m: &AccountWithCashflows| { &m.A24 },
                |m: &mut AccountWithCashflows| { &mut m.A24 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A25",
                |m: &AccountWithCashflows| { &m.A25 },
                |m: &mut AccountWithCashflows| { &mut m.A25 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A26",
                |m: &AccountWithCashflows| { &m.A26 },
                |m: &mut AccountWithCashflows| { &mut m.A26 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A27",
                |m: &AccountWithCashflows| { &m.A27 },
                |m: &mut AccountWithCashflows| { &mut m.A27 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A28",
                |m: &AccountWithCashflows| { &m.A28 },
                |m: &mut AccountWithCashflows| { &mut m.A28 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A29",
                |m: &AccountWithCashflows| { &m.A29 },
                |m: &mut AccountWithCashflows| { &mut m.A29 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A30",
                |m: &AccountWithCashflows| { &m.A30 },
                |m: &mut AccountWithCashflows| { &mut m.A30 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A31",
                |m: &AccountWithCashflows| { &m.A31 },
                |m: &mut AccountWithCashflows| { &mut m.A31 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A32",
                |m: &AccountWithCashflows| { &m.A32 },
                |m: &mut AccountWithCashflows| { &mut m.A32 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A33",
                |m: &AccountWithCashflows| { &m.A33 },
                |m: &mut AccountWithCashflows| { &mut m.A33 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A34",
                |m: &AccountWithCashflows| { &m.A34 },
                |m: &mut AccountWithCashflows| { &mut m.A34 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "A35",
                |m: &AccountWithCashflows| { &m.A35 },
                |m: &mut AccountWithCashflows| { &mut m.A35 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A36",
                |m: &AccountWithCashflows| { &m.A36 },
                |m: &mut AccountWithCashflows| { &mut m.A36 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A37",
                |m: &AccountWithCashflows| { &m.A37 },
                |m: &mut AccountWithCashflows| { &mut m.A37 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A38",
                |m: &AccountWithCashflows| { &m.A38 },
                |m: &mut AccountWithCashflows| { &mut m.A38 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A39",
                |m: &AccountWithCashflows| { &m.A39 },
                |m: &mut AccountWithCashflows| { &mut m.A39 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "A40",
                |m: &AccountWithCashflows| { &m.A40 },
                |m: &mut AccountWithCashflows| { &mut m.A40 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "total_principal",
                |m: &AccountWithCashflows| { &m.total_principal },
                |m: &mut AccountWithCashflows| { &mut m.total_principal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "total_interest",
                |m: &AccountWithCashflows| { &m.total_interest },
                |m: &mut AccountWithCashflows| { &mut m.total_interest },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.loan_account_no.clear();
        self.loan_id = 0;
        self.customer_id.clear();
        self.product_id = 0;
        self.product_desc.clear();
        self.product_type.clear();
        self.recovery_type.clear();
        self.cust_name.clear();
        self.disbursal_date = 0;
        self.due_day = 0;
        self.maturity_date = 0;
        self.original_tenure = 0;
        self.current_tenure = 0;
        self.balance_installments = 0.;
        self.installment_type.clear();
        self.int_recry_freq.clear();
        self.principal_recry_freq.clear();
        self.days_past_due = 0;
        self.asset_clsfn.clear();
        self.int_type.clear();
        self.cust_int_rate = 0.;
        self.rate_type.clear();
        self.overdue_prin_amount = 0.;
        self.overdue_interest_amount = 0.;
        self.os_prin = 0.;
        self.emi_amount = 0.;
        self.accrued_not_recieved_int = 0.;
        self.last_payment_date = 0;
        self.next_instmt_due_date = 0;
        self.branch_id = 0;
        self.currency_code.clear();
        self.fraud.clear();
        self.restructure.clear();
        self.A1 = 0.;
        self.A2 = 0.;
        self.A3 = 0.;
        self.A4 = 0.;
        self.A5 = 0.;
        self.A6 = 0.;
        self.A7 = 0.;
        self.A8 = 0;
        self.A9 = 0;
        self.A10 = 0;
        self.A11 = 0;
        self.A12 = 0;
        self.A13 = 0;
        self.A14 = 0;
        self.A15.clear();
        self.A16.clear();
        self.A17.clear();
        self.A18.clear();
        self.A19.clear();
        self.A20.clear();
        self.A21.clear();
        self.A22.clear();
        self.A23.clear();
        self.A24.clear();
        self.A25.clear();
        self.A26.clear();
        self.A27.clear();
        self.A28.clear();
        self.A29.clear();
        self.A30.clear();
        self.A31.clear();
        self.A32.clear();
        self.A33.clear();
        self.A34.clear();
        self.A35.clear();
        self.A36 = 0;
        self.A37 = 0;
        self.A38 = 0;
        self.A39 = 0;
        self.A40 = 0;
        self.total_principal = 0.;
        self.total_interest = 0.;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\
    \x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\
    \x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\
    \x04date\"\x92\x10\n\x14AccountWithCashflows\x12&\n\x0floan_account_no\
    \x18\x01\x20\x01(\tR\rloanAccountNo\x12\x17\n\x07loan_id\x18\x02\x20\x01\
    (\x03R\x06loanId\x12\x1f\n\x0bcustomer_id\x18\x03\x20\x01(\tR\ncustomerI\
    d\x12\x1d\n\nproduct_id\x18\x04\x20\x01(\x03R\tproductId\x12!\n\x0cprodu\
    ct_desc\x18\x05\x20\x01(\tR\x0bproductDesc\x12!\n\x0cproduct_type\x18\
    \x06\x20\x01(\tR\x0bproductType\x12#\n\rrecovery_type\x18\x07\x20\x01(\t\
    R\x0crecoveryType\x12\x1b\n\tcust_name\x18\x08\x20\x01(\tR\x08custName\
    \x12%\n\x0edisbursal_date\x18\t\x20\x01(\x03R\rdisbursalDate\x12\x17\n\
    \x07due_day\x18\n\x20\x01(\x03R\x06dueDay\x12#\n\rmaturity_date\x18\x0b\
    \x20\x01(\x03R\x0cmaturityDate\x12'\n\x0foriginal_tenure\x18\x0c\x20\x01\
    (\x03R\x0eoriginalTenure\x12%\n\x0ecurrent_tenure\x18\r\x20\x01(\x03R\rc\
    urrentTenure\x121\n\x14balance_installments\x18\x0e\x20\x01(\x01R\x13bal\
    anceInstallments\x12)\n\x10installment_type\x18\x0f\x20\x01(\tR\x0finsta\
    llmentType\x12$\n\x0eint_recry_freq\x18\x10\x20\x01(\tR\x0cintRecryFreq\
    \x120\n\x14principal_recry_freq\x18\x11\x20\x01(\tR\x12principalRecryFre\
    q\x12\"\n\rdays_past_due\x18\x12\x20\x01(\x03R\x0bdaysPastDue\x12\x1f\n\
    \x0basset_clsfn\x18\x13\x20\x01(\tR\nassetClsfn\x12\x19\n\x08int_type\
    \x18\x14\x20\x01(\tR\x07intType\x12\"\n\rcust_int_rate\x18\x15\x20\x01(\
    \x01R\x0bcustIntRate\x12\x1b\n\trate_type\x18\x16\x20\x01(\tR\x08rateTyp\
    e\x12.\n\x13overdue_prin_amount\x18\x17\x20\x01(\x01R\x11overduePrinAmou\
    nt\x126\n\x17overdue_interest_amount\x18\x18\x20\x01(\x01R\x15overdueInt\
    erestAmount\x12\x17\n\x07os_prin\x18\x19\x20\x01(\x01R\x06osPrin\x12\x1d\
    \n\nemi_amount\x18\x1a\x20\x01(\x01R\temiAmount\x127\n\x18accrued_not_re\
    cieved_int\x18\x1b\x20\x01(\x01R\x15accruedNotRecievedInt\x12*\n\x11last\
    _payment_date\x18\x1c\x20\x01(\x03R\x0flastPaymentDate\x12/\n\x14next_in\
    stmt_due_date\x18\x1d\x20\x01(\x03R\x11nextInstmtDueDate\x12\x1b\n\tbran\
    ch_id\x18\x1e\x20\x01(\x03R\x08branchId\x12#\n\rcurrency_code\x18\x1f\
    \x20\x01(\tR\x0ccurrencyCode\x12\x14\n\x05fraud\x18\x20\x20\x01(\tR\x05f\
    raud\x12\x20\n\x0brestructure\x18!\x20\x01(\tR\x0brestructure\x12\x0e\n\
    \x02A1\x18\"\x20\x01(\x01R\x02A1\x12\x0e\n\x02A2\x18#\x20\x01(\x01R\x02A\
    2\x12\x0e\n\x02A3\x18$\x20\x01(\x01R\x02A3\x12\x0e\n\x02A4\x18%\x20\x01(\
    \x01R\x02A4\x12\x0e\n\x02A5\x18&\x20\x01(\x01R\x02A5\x12\x0e\n\x02A6\x18\
    '\x20\x01(\x01R\x02A6\x12\x0e\n\x02A7\x18(\x20\x01(\x01R\x02A7\x12\x0e\n\
    \x02A8\x18)\x20\x01(\x03R\x02A8\x12\x0e\n\x02A9\x18*\x20\x01(\x03R\x02A9\
    \x12\x10\n\x03A10\x18+\x20\x01(\x03R\x03A10\x12\x10\n\x03A11\x18,\x20\
    \x01(\x03R\x03A11\x12\x10\n\x03A12\x18-\x20\x01(\x03R\x03A12\x12\x10\n\
    \x03A13\x18.\x20\x01(\x03R\x03A13\x12\x10\n\x03A14\x18/\x20\x01(\x03R\
    \x03A14\x12\x10\n\x03A15\x180\x20\x01(\tR\x03A15\x12\x10\n\x03A16\x181\
    \x20\x01(\tR\x03A16\x12\x10\n\x03A17\x182\x20\x01(\tR\x03A17\x12\x10\n\
    \x03A18\x183\x20\x01(\tR\x03A18\x12\x10\n\x03A19\x184\x20\x01(\tR\x03A19\
    \x12\x10\n\x03A20\x185\x20\x01(\tR\x03A20\x12\x10\n\x03A21\x186\x20\x01(\
    \tR\x03A21\x12\x10\n\x03A22\x187\x20\x01(\tR\x03A22\x12\x10\n\x03A23\x18\
    8\x20\x01(\tR\x03A23\x12\x10\n\x03A24\x189\x20\x01(\tR\x03A24\x12\x10\n\
    \x03A25\x18:\x20\x01(\tR\x03A25\x12\x10\n\x03A26\x18;\x20\x01(\tR\x03A26\
    \x12\x10\n\x03A27\x18<\x20\x01(\tR\x03A27\x12\x10\n\x03A28\x18=\x20\x01(\
    \tR\x03A28\x12\x10\n\x03A29\x18>\x20\x01(\tR\x03A29\x12\x10\n\x03A30\x18\
    ?\x20\x01(\tR\x03A30\x12\x10\n\x03A31\x18@\x20\x01(\tR\x03A31\x12\x10\n\
    \x03A32\x18A\x20\x01(\tR\x03A32\x12\x10\n\x03A33\x18B\x20\x01(\tR\x03A33\
    \x12\x10\n\x03A34\x18C\x20\x01(\tR\x03A34\x12\x10\n\x03A35\x18D\x20\x01(\
    \tR\x03A35\x12\x10\n\x03A36\x18E\x20\x01(\x03R\x03A36\x12\x10\n\x03A37\
    \x18F\x20\x01(\x03R\x03A37\x12\x10\n\x03A38\x18G\x20\x01(\x03R\x03A38\
    \x12\x10\n\x03A39\x18H\x20\x01(\x03R\x03A39\x12\x10\n\x03A40\x18I\x20\
    \x01(\x03R\x03A40\x12'\n\x0ftotal_principal\x18J\x20\x01(\x01R\x0etotalP\
    rincipal\x12%\n\x0etotal_interest\x18K\x20\x01(\x01R\rtotalInterest\x12'\
    \n\tcashflows\x18L\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
