// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub isin: ::std::string::String,
    pub security_name: ::std::string::String,
    pub ccy: ::std::string::String,
    pub face_value: f64,
    pub book_value: f64,
    pub market_value: f64,
    pub deal_id: ::std::string::String,
    pub maturity_date: i64,
    pub bucket: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string isin = 1;

    pub fn clear_isin(&mut self) {
        self.isin.clear();
    }

    // Param is passed by value, moved
    pub fn set_isin(&mut self, v: ::std::string::String) {
        self.isin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_isin(&mut self) -> &mut ::std::string::String {
        &mut self.isin
    }

    // Take field
    pub fn take_isin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.isin, ::std::string::String::new())
    }

    pub fn get_isin(&self) -> &str {
        &self.isin
    }

    // string security_name = 2;

    pub fn clear_security_name(&mut self) {
        self.security_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_security_name(&mut self, v: ::std::string::String) {
        self.security_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_security_name(&mut self) -> &mut ::std::string::String {
        &mut self.security_name
    }

    // Take field
    pub fn take_security_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.security_name, ::std::string::String::new())
    }

    pub fn get_security_name(&self) -> &str {
        &self.security_name
    }

    // string ccy = 3;

    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }

    // double face_value = 4;

    pub fn clear_face_value(&mut self) {
        self.face_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_face_value(&mut self, v: f64) {
        self.face_value = v;
    }

    pub fn get_face_value(&self) -> f64 {
        self.face_value
    }

    // double book_value = 5;

    pub fn clear_book_value(&mut self) {
        self.book_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_book_value(&mut self, v: f64) {
        self.book_value = v;
    }

    pub fn get_book_value(&self) -> f64 {
        self.book_value
    }

    // double market_value = 6;

    pub fn clear_market_value(&mut self) {
        self.market_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_market_value(&mut self, v: f64) {
        self.market_value = v;
    }

    pub fn get_market_value(&self) -> f64 {
        self.market_value
    }

    // string deal_id = 7;

    pub fn clear_deal_id(&mut self) {
        self.deal_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_id(&mut self, v: ::std::string::String) {
        self.deal_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_id(&mut self) -> &mut ::std::string::String {
        &mut self.deal_id
    }

    // Take field
    pub fn take_deal_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_id, ::std::string::String::new())
    }

    pub fn get_deal_id(&self) -> &str {
        &self.deal_id
    }

    // int64 maturity_date = 8;

    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }

    // string bucket = 9;

    pub fn clear_bucket(&mut self) {
        self.bucket.clear();
    }

    // Param is passed by value, moved
    pub fn set_bucket(&mut self, v: ::std::string::String) {
        self.bucket = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bucket(&mut self) -> &mut ::std::string::String {
        &mut self.bucket
    }

    // Take field
    pub fn take_bucket(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bucket, ::std::string::String::new())
    }

    pub fn get_bucket(&self) -> &str {
        &self.bucket
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.isin)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.security_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.face_value = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.book_value = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.market_value = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_id)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bucket)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.isin.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.isin);
        }
        if !self.security_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.security_name);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ccy);
        }
        if self.face_value != 0. {
            my_size += 9;
        }
        if self.book_value != 0. {
            my_size += 9;
        }
        if self.market_value != 0. {
            my_size += 9;
        }
        if !self.deal_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.deal_id);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(8, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bucket.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.bucket);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.isin.is_empty() {
            os.write_string(1, &self.isin)?;
        }
        if !self.security_name.is_empty() {
            os.write_string(2, &self.security_name)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(3, &self.ccy)?;
        }
        if self.face_value != 0. {
            os.write_double(4, self.face_value)?;
        }
        if self.book_value != 0. {
            os.write_double(5, self.book_value)?;
        }
        if self.market_value != 0. {
            os.write_double(6, self.market_value)?;
        }
        if !self.deal_id.is_empty() {
            os.write_string(7, &self.deal_id)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(8, self.maturity_date)?;
        }
        if !self.bucket.is_empty() {
            os.write_string(9, &self.bucket)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "isin",
                    |m: &AccountWithCashflows| { &m.isin },
                    |m: &mut AccountWithCashflows| { &mut m.isin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "security_name",
                    |m: &AccountWithCashflows| { &m.security_name },
                    |m: &mut AccountWithCashflows| { &mut m.security_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy",
                    |m: &AccountWithCashflows| { &m.ccy },
                    |m: &mut AccountWithCashflows| { &mut m.ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "face_value",
                    |m: &AccountWithCashflows| { &m.face_value },
                    |m: &mut AccountWithCashflows| { &mut m.face_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "book_value",
                    |m: &AccountWithCashflows| { &m.book_value },
                    |m: &mut AccountWithCashflows| { &mut m.book_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "market_value",
                    |m: &AccountWithCashflows| { &m.market_value },
                    |m: &mut AccountWithCashflows| { &mut m.market_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_id",
                    |m: &AccountWithCashflows| { &m.deal_id },
                    |m: &mut AccountWithCashflows| { &mut m.deal_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "maturity_date",
                    |m: &AccountWithCashflows| { &m.maturity_date },
                    |m: &mut AccountWithCashflows| { &mut m.maturity_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bucket",
                    |m: &AccountWithCashflows| { &m.bucket },
                    |m: &mut AccountWithCashflows| { &mut m.bucket },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_isin();
        self.clear_security_name();
        self.clear_ccy();
        self.clear_face_value();
        self.clear_book_value();
        self.clear_market_value();
        self.clear_deal_id();
        self.clear_maturity_date();
        self.clear_bucket();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16proto/nsfr_encum.proto\"\x98\x02\n\x14AccountWithCashflows\x12\x12\
    \n\x04isin\x18\x01\x20\x01(\tR\x04isin\x12#\n\rsecurity_name\x18\x02\x20\
    \x01(\tR\x0csecurityName\x12\x10\n\x03ccy\x18\x03\x20\x01(\tR\x03ccy\x12\
    \x1d\n\nface_value\x18\x04\x20\x01(\x01R\tfaceValue\x12\x1d\n\nbook_valu\
    e\x18\x05\x20\x01(\x01R\tbookValue\x12!\n\x0cmarket_value\x18\x06\x20\
    \x01(\x01R\x0bmarketValue\x12\x17\n\x07deal_id\x18\x07\x20\x01(\tR\x06de\
    alId\x12#\n\rmaturity_date\x18\x08\x20\x01(\x03R\x0cmaturityDate\x12\x16\
    \n\x06bucket\x18\t\x20\x01(\tR\x06bucketb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
