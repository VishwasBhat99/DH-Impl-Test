// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct OutputAccount {
    // message fields
    pub file_id: ::std::string::String,
    pub ca: f64,
    pub sa: f64,
    pub td_wd: f64,
    pub td_nwd: f64,
    pub rd: f64,
    pub tot_stable: f64,
    pub tot_less_stable: f64,
    pub ca_stable: f64,
    pub ca_less_stable: f64,
    pub sa_stable: f64,
    pub sa_less_stable: f64,
    pub casa_stable: f64,
    pub casa_less_stable: f64,
    pub stable_b1: f64,
    pub stable_b2: f64,
    pub stable_b3: f64,
    pub less_stable_b1: f64,
    pub less_stable_b2: f64,
    pub less_stable_b3: f64,
    pub nwd_b1: f64,
    pub nwd_b2: f64,
    pub nwd_b3: f64,
    pub currency: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl OutputAccount {
    pub fn new() -> OutputAccount {
        ::std::default::Default::default()
    }

    // string file_id = 1;

    pub fn clear_file_id(&mut self) {
        self.file_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_file_id(&mut self, v: ::std::string::String) {
        self.file_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_id(&mut self) -> &mut ::std::string::String {
        &mut self.file_id
    }

    // Take field
    pub fn take_file_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.file_id, ::std::string::String::new())
    }

    pub fn get_file_id(&self) -> &str {
        &self.file_id
    }

    // double ca = 2;

    pub fn clear_ca(&mut self) {
        self.ca = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ca(&mut self, v: f64) {
        self.ca = v;
    }

    pub fn get_ca(&self) -> f64 {
        self.ca
    }

    // double sa = 3;

    pub fn clear_sa(&mut self) {
        self.sa = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sa(&mut self, v: f64) {
        self.sa = v;
    }

    pub fn get_sa(&self) -> f64 {
        self.sa
    }

    // double td_wd = 4;

    pub fn clear_td_wd(&mut self) {
        self.td_wd = 0.;
    }

    // Param is passed by value, moved
    pub fn set_td_wd(&mut self, v: f64) {
        self.td_wd = v;
    }

    pub fn get_td_wd(&self) -> f64 {
        self.td_wd
    }

    // double td_nwd = 5;

    pub fn clear_td_nwd(&mut self) {
        self.td_nwd = 0.;
    }

    // Param is passed by value, moved
    pub fn set_td_nwd(&mut self, v: f64) {
        self.td_nwd = v;
    }

    pub fn get_td_nwd(&self) -> f64 {
        self.td_nwd
    }

    // double rd = 6;

    pub fn clear_rd(&mut self) {
        self.rd = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rd(&mut self, v: f64) {
        self.rd = v;
    }

    pub fn get_rd(&self) -> f64 {
        self.rd
    }

    // double tot_stable = 7;

    pub fn clear_tot_stable(&mut self) {
        self.tot_stable = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_stable(&mut self, v: f64) {
        self.tot_stable = v;
    }

    pub fn get_tot_stable(&self) -> f64 {
        self.tot_stable
    }

    // double tot_less_stable = 8;

    pub fn clear_tot_less_stable(&mut self) {
        self.tot_less_stable = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_less_stable(&mut self, v: f64) {
        self.tot_less_stable = v;
    }

    pub fn get_tot_less_stable(&self) -> f64 {
        self.tot_less_stable
    }

    // double ca_stable = 9;

    pub fn clear_ca_stable(&mut self) {
        self.ca_stable = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ca_stable(&mut self, v: f64) {
        self.ca_stable = v;
    }

    pub fn get_ca_stable(&self) -> f64 {
        self.ca_stable
    }

    // double ca_less_stable = 10;

    pub fn clear_ca_less_stable(&mut self) {
        self.ca_less_stable = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ca_less_stable(&mut self, v: f64) {
        self.ca_less_stable = v;
    }

    pub fn get_ca_less_stable(&self) -> f64 {
        self.ca_less_stable
    }

    // double sa_stable = 11;

    pub fn clear_sa_stable(&mut self) {
        self.sa_stable = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sa_stable(&mut self, v: f64) {
        self.sa_stable = v;
    }

    pub fn get_sa_stable(&self) -> f64 {
        self.sa_stable
    }

    // double sa_less_stable = 12;

    pub fn clear_sa_less_stable(&mut self) {
        self.sa_less_stable = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sa_less_stable(&mut self, v: f64) {
        self.sa_less_stable = v;
    }

    pub fn get_sa_less_stable(&self) -> f64 {
        self.sa_less_stable
    }

    // double casa_stable = 13;

    pub fn clear_casa_stable(&mut self) {
        self.casa_stable = 0.;
    }

    // Param is passed by value, moved
    pub fn set_casa_stable(&mut self, v: f64) {
        self.casa_stable = v;
    }

    pub fn get_casa_stable(&self) -> f64 {
        self.casa_stable
    }

    // double casa_less_stable = 14;

    pub fn clear_casa_less_stable(&mut self) {
        self.casa_less_stable = 0.;
    }

    // Param is passed by value, moved
    pub fn set_casa_less_stable(&mut self, v: f64) {
        self.casa_less_stable = v;
    }

    pub fn get_casa_less_stable(&self) -> f64 {
        self.casa_less_stable
    }

    // double stable_b1 = 15;

    pub fn clear_stable_b1(&mut self) {
        self.stable_b1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_stable_b1(&mut self, v: f64) {
        self.stable_b1 = v;
    }

    pub fn get_stable_b1(&self) -> f64 {
        self.stable_b1
    }

    // double stable_b2 = 16;

    pub fn clear_stable_b2(&mut self) {
        self.stable_b2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_stable_b2(&mut self, v: f64) {
        self.stable_b2 = v;
    }

    pub fn get_stable_b2(&self) -> f64 {
        self.stable_b2
    }

    // double stable_b3 = 17;

    pub fn clear_stable_b3(&mut self) {
        self.stable_b3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_stable_b3(&mut self, v: f64) {
        self.stable_b3 = v;
    }

    pub fn get_stable_b3(&self) -> f64 {
        self.stable_b3
    }

    // double less_stable_b1 = 18;

    pub fn clear_less_stable_b1(&mut self) {
        self.less_stable_b1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_less_stable_b1(&mut self, v: f64) {
        self.less_stable_b1 = v;
    }

    pub fn get_less_stable_b1(&self) -> f64 {
        self.less_stable_b1
    }

    // double less_stable_b2 = 19;

    pub fn clear_less_stable_b2(&mut self) {
        self.less_stable_b2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_less_stable_b2(&mut self, v: f64) {
        self.less_stable_b2 = v;
    }

    pub fn get_less_stable_b2(&self) -> f64 {
        self.less_stable_b2
    }

    // double less_stable_b3 = 20;

    pub fn clear_less_stable_b3(&mut self) {
        self.less_stable_b3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_less_stable_b3(&mut self, v: f64) {
        self.less_stable_b3 = v;
    }

    pub fn get_less_stable_b3(&self) -> f64 {
        self.less_stable_b3
    }

    // double nwd_b1 = 21;

    pub fn clear_nwd_b1(&mut self) {
        self.nwd_b1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_nwd_b1(&mut self, v: f64) {
        self.nwd_b1 = v;
    }

    pub fn get_nwd_b1(&self) -> f64 {
        self.nwd_b1
    }

    // double nwd_b2 = 22;

    pub fn clear_nwd_b2(&mut self) {
        self.nwd_b2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_nwd_b2(&mut self, v: f64) {
        self.nwd_b2 = v;
    }

    pub fn get_nwd_b2(&self) -> f64 {
        self.nwd_b2
    }

    // double nwd_b3 = 23;

    pub fn clear_nwd_b3(&mut self) {
        self.nwd_b3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_nwd_b3(&mut self, v: f64) {
        self.nwd_b3 = v;
    }

    pub fn get_nwd_b3(&self) -> f64 {
        self.nwd_b3
    }

    // string currency = 24;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }
}

impl ::protobuf::Message for OutputAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.file_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ca = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.sa = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.td_wd = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.td_nwd = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rd = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_stable = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_less_stable = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ca_stable = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ca_less_stable = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.sa_stable = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.sa_less_stable = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.casa_stable = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.casa_less_stable = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.stable_b1 = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.stable_b2 = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.stable_b3 = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.less_stable_b1 = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.less_stable_b2 = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.less_stable_b3 = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.nwd_b1 = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.nwd_b2 = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.nwd_b3 = tmp;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.file_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.file_id);
        }
        if self.ca != 0. {
            my_size += 9;
        }
        if self.sa != 0. {
            my_size += 9;
        }
        if self.td_wd != 0. {
            my_size += 9;
        }
        if self.td_nwd != 0. {
            my_size += 9;
        }
        if self.rd != 0. {
            my_size += 9;
        }
        if self.tot_stable != 0. {
            my_size += 9;
        }
        if self.tot_less_stable != 0. {
            my_size += 9;
        }
        if self.ca_stable != 0. {
            my_size += 9;
        }
        if self.ca_less_stable != 0. {
            my_size += 9;
        }
        if self.sa_stable != 0. {
            my_size += 9;
        }
        if self.sa_less_stable != 0. {
            my_size += 9;
        }
        if self.casa_stable != 0. {
            my_size += 9;
        }
        if self.casa_less_stable != 0. {
            my_size += 9;
        }
        if self.stable_b1 != 0. {
            my_size += 9;
        }
        if self.stable_b2 != 0. {
            my_size += 10;
        }
        if self.stable_b3 != 0. {
            my_size += 10;
        }
        if self.less_stable_b1 != 0. {
            my_size += 10;
        }
        if self.less_stable_b2 != 0. {
            my_size += 10;
        }
        if self.less_stable_b3 != 0. {
            my_size += 10;
        }
        if self.nwd_b1 != 0. {
            my_size += 10;
        }
        if self.nwd_b2 != 0. {
            my_size += 10;
        }
        if self.nwd_b3 != 0. {
            my_size += 10;
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.currency);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.file_id.is_empty() {
            os.write_string(1, &self.file_id)?;
        }
        if self.ca != 0. {
            os.write_double(2, self.ca)?;
        }
        if self.sa != 0. {
            os.write_double(3, self.sa)?;
        }
        if self.td_wd != 0. {
            os.write_double(4, self.td_wd)?;
        }
        if self.td_nwd != 0. {
            os.write_double(5, self.td_nwd)?;
        }
        if self.rd != 0. {
            os.write_double(6, self.rd)?;
        }
        if self.tot_stable != 0. {
            os.write_double(7, self.tot_stable)?;
        }
        if self.tot_less_stable != 0. {
            os.write_double(8, self.tot_less_stable)?;
        }
        if self.ca_stable != 0. {
            os.write_double(9, self.ca_stable)?;
        }
        if self.ca_less_stable != 0. {
            os.write_double(10, self.ca_less_stable)?;
        }
        if self.sa_stable != 0. {
            os.write_double(11, self.sa_stable)?;
        }
        if self.sa_less_stable != 0. {
            os.write_double(12, self.sa_less_stable)?;
        }
        if self.casa_stable != 0. {
            os.write_double(13, self.casa_stable)?;
        }
        if self.casa_less_stable != 0. {
            os.write_double(14, self.casa_less_stable)?;
        }
        if self.stable_b1 != 0. {
            os.write_double(15, self.stable_b1)?;
        }
        if self.stable_b2 != 0. {
            os.write_double(16, self.stable_b2)?;
        }
        if self.stable_b3 != 0. {
            os.write_double(17, self.stable_b3)?;
        }
        if self.less_stable_b1 != 0. {
            os.write_double(18, self.less_stable_b1)?;
        }
        if self.less_stable_b2 != 0. {
            os.write_double(19, self.less_stable_b2)?;
        }
        if self.less_stable_b3 != 0. {
            os.write_double(20, self.less_stable_b3)?;
        }
        if self.nwd_b1 != 0. {
            os.write_double(21, self.nwd_b1)?;
        }
        if self.nwd_b2 != 0. {
            os.write_double(22, self.nwd_b2)?;
        }
        if self.nwd_b3 != 0. {
            os.write_double(23, self.nwd_b3)?;
        }
        if !self.currency.is_empty() {
            os.write_string(24, &self.currency)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputAccount {
        OutputAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "file_id",
                    |m: &OutputAccount| { &m.file_id },
                    |m: &mut OutputAccount| { &mut m.file_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ca",
                    |m: &OutputAccount| { &m.ca },
                    |m: &mut OutputAccount| { &mut m.ca },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "sa",
                    |m: &OutputAccount| { &m.sa },
                    |m: &mut OutputAccount| { &mut m.sa },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "td_wd",
                    |m: &OutputAccount| { &m.td_wd },
                    |m: &mut OutputAccount| { &mut m.td_wd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "td_nwd",
                    |m: &OutputAccount| { &m.td_nwd },
                    |m: &mut OutputAccount| { &mut m.td_nwd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rd",
                    |m: &OutputAccount| { &m.rd },
                    |m: &mut OutputAccount| { &mut m.rd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_stable",
                    |m: &OutputAccount| { &m.tot_stable },
                    |m: &mut OutputAccount| { &mut m.tot_stable },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_less_stable",
                    |m: &OutputAccount| { &m.tot_less_stable },
                    |m: &mut OutputAccount| { &mut m.tot_less_stable },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ca_stable",
                    |m: &OutputAccount| { &m.ca_stable },
                    |m: &mut OutputAccount| { &mut m.ca_stable },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ca_less_stable",
                    |m: &OutputAccount| { &m.ca_less_stable },
                    |m: &mut OutputAccount| { &mut m.ca_less_stable },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "sa_stable",
                    |m: &OutputAccount| { &m.sa_stable },
                    |m: &mut OutputAccount| { &mut m.sa_stable },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "sa_less_stable",
                    |m: &OutputAccount| { &m.sa_less_stable },
                    |m: &mut OutputAccount| { &mut m.sa_less_stable },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "casa_stable",
                    |m: &OutputAccount| { &m.casa_stable },
                    |m: &mut OutputAccount| { &mut m.casa_stable },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "casa_less_stable",
                    |m: &OutputAccount| { &m.casa_less_stable },
                    |m: &mut OutputAccount| { &mut m.casa_less_stable },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "stable_b1",
                    |m: &OutputAccount| { &m.stable_b1 },
                    |m: &mut OutputAccount| { &mut m.stable_b1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "stable_b2",
                    |m: &OutputAccount| { &m.stable_b2 },
                    |m: &mut OutputAccount| { &mut m.stable_b2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "stable_b3",
                    |m: &OutputAccount| { &m.stable_b3 },
                    |m: &mut OutputAccount| { &mut m.stable_b3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "less_stable_b1",
                    |m: &OutputAccount| { &m.less_stable_b1 },
                    |m: &mut OutputAccount| { &mut m.less_stable_b1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "less_stable_b2",
                    |m: &OutputAccount| { &m.less_stable_b2 },
                    |m: &mut OutputAccount| { &mut m.less_stable_b2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "less_stable_b3",
                    |m: &OutputAccount| { &m.less_stable_b3 },
                    |m: &mut OutputAccount| { &mut m.less_stable_b3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "nwd_b1",
                    |m: &OutputAccount| { &m.nwd_b1 },
                    |m: &mut OutputAccount| { &mut m.nwd_b1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "nwd_b2",
                    |m: &OutputAccount| { &m.nwd_b2 },
                    |m: &mut OutputAccount| { &mut m.nwd_b2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "nwd_b3",
                    |m: &OutputAccount| { &m.nwd_b3 },
                    |m: &mut OutputAccount| { &mut m.nwd_b3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &OutputAccount| { &m.currency },
                    |m: &mut OutputAccount| { &mut m.currency },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OutputAccount>(
                    "OutputAccount",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OutputAccount {
        static mut instance: ::protobuf::lazy::Lazy<OutputAccount> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OutputAccount,
        };
        unsafe {
            instance.get(OutputAccount::new)
        }
    }
}

impl ::protobuf::Clear for OutputAccount {
    fn clear(&mut self) {
        self.clear_file_id();
        self.clear_ca();
        self.clear_sa();
        self.clear_td_wd();
        self.clear_td_nwd();
        self.clear_rd();
        self.clear_tot_stable();
        self.clear_tot_less_stable();
        self.clear_ca_stable();
        self.clear_ca_less_stable();
        self.clear_sa_stable();
        self.clear_sa_less_stable();
        self.clear_casa_stable();
        self.clear_casa_less_stable();
        self.clear_stable_b1();
        self.clear_stable_b2();
        self.clear_stable_b3();
        self.clear_less_stable_b1();
        self.clear_less_stable_b2();
        self.clear_less_stable_b3();
        self.clear_nwd_b1();
        self.clear_nwd_b2();
        self.clear_nwd_b3();
        self.clear_currency();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ccf_lcr.proto\"\xc6\x05\n\rOutputAccount\x12\x17\n\x07file_id\x18\
    \x01\x20\x01(\tR\x06fileId\x12\x0e\n\x02ca\x18\x02\x20\x01(\x01R\x02ca\
    \x12\x0e\n\x02sa\x18\x03\x20\x01(\x01R\x02sa\x12\x13\n\x05td_wd\x18\x04\
    \x20\x01(\x01R\x04tdWd\x12\x15\n\x06td_nwd\x18\x05\x20\x01(\x01R\x05tdNw\
    d\x12\x0e\n\x02rd\x18\x06\x20\x01(\x01R\x02rd\x12\x1d\n\ntot_stable\x18\
    \x07\x20\x01(\x01R\ttotStable\x12&\n\x0ftot_less_stable\x18\x08\x20\x01(\
    \x01R\rtotLessStable\x12\x1b\n\tca_stable\x18\t\x20\x01(\x01R\x08caStabl\
    e\x12$\n\x0eca_less_stable\x18\n\x20\x01(\x01R\x0ccaLessStable\x12\x1b\n\
    \tsa_stable\x18\x0b\x20\x01(\x01R\x08saStable\x12$\n\x0esa_less_stable\
    \x18\x0c\x20\x01(\x01R\x0csaLessStable\x12\x1f\n\x0bcasa_stable\x18\r\
    \x20\x01(\x01R\ncasaStable\x12(\n\x10casa_less_stable\x18\x0e\x20\x01(\
    \x01R\x0ecasaLessStable\x12\x1b\n\tstable_b1\x18\x0f\x20\x01(\x01R\x08st\
    ableB1\x12\x1b\n\tstable_b2\x18\x10\x20\x01(\x01R\x08stableB2\x12\x1b\n\
    \tstable_b3\x18\x11\x20\x01(\x01R\x08stableB3\x12$\n\x0eless_stable_b1\
    \x18\x12\x20\x01(\x01R\x0clessStableB1\x12$\n\x0eless_stable_b2\x18\x13\
    \x20\x01(\x01R\x0clessStableB2\x12$\n\x0eless_stable_b3\x18\x14\x20\x01(\
    \x01R\x0clessStableB3\x12\x15\n\x06nwd_b1\x18\x15\x20\x01(\x01R\x05nwdB1\
    \x12\x15\n\x06nwd_b2\x18\x16\x20\x01(\x01R\x05nwdB2\x12\x15\n\x06nwd_b3\
    \x18\x17\x20\x01(\x01R\x05nwdB3\x12\x1a\n\x08currency\x18\x18\x20\x01(\t\
    R\x08currencyb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}