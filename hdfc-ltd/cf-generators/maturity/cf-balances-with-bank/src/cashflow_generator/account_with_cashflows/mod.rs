// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // double principal_amount = 2;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_amount",
                    |m: &Cashflow| { &m.interest_amount },
                    |m: &mut Cashflow| { &mut m.interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal_amount",
                    |m: &Cashflow| { &m.principal_amount },
                    |m: &mut Cashflow| { &mut m.principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_interest_amount();
        self.clear_principal_amount();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub bank_code: ::std::string::String,
    pub acc_open_date: i64,
    pub maturity_date: i64,
    pub initial_deposit_amount: f64,
    pub initial_deposit_amountlcy: f64,
    pub int_rate: f64,
    pub int_payment_fq: ::std::string::String,
    pub acc_no: ::std::string::String,
    pub gl_code: i64,
    pub slr_nonslr: ::std::string::String,
    pub ccy: ::std::string::String,
    pub product_code: ::std::string::String,
    pub code_gl: ::std::string::String,
    pub holding_period: ::std::string::String,
    pub interest_accrued: f64,
    pub broken_quat_int: f64,
    pub app1: ::std::string::String,
    pub app2: ::std::string::String,
    pub app3: ::std::string::String,
    pub app4: ::std::string::String,
    pub app5: ::std::string::String,
    pub app6: ::std::string::String,
    pub app7: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string bank_code = 1;

    pub fn clear_bank_code(&mut self) {
        self.bank_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_bank_code(&mut self, v: ::std::string::String) {
        self.bank_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bank_code(&mut self) -> &mut ::std::string::String {
        &mut self.bank_code
    }

    // Take field
    pub fn take_bank_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bank_code, ::std::string::String::new())
    }

    pub fn get_bank_code(&self) -> &str {
        &self.bank_code
    }

    // int64 acc_open_date = 2;

    pub fn clear_acc_open_date(&mut self) {
        self.acc_open_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_acc_open_date(&mut self, v: i64) {
        self.acc_open_date = v;
    }

    pub fn get_acc_open_date(&self) -> i64 {
        self.acc_open_date
    }

    // int64 maturity_date = 3;

    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }

    // double initial_deposit_amount = 4;

    pub fn clear_initial_deposit_amount(&mut self) {
        self.initial_deposit_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_initial_deposit_amount(&mut self, v: f64) {
        self.initial_deposit_amount = v;
    }

    pub fn get_initial_deposit_amount(&self) -> f64 {
        self.initial_deposit_amount
    }

    // double initial_deposit_amountlcy = 5;

    pub fn clear_initial_deposit_amountlcy(&mut self) {
        self.initial_deposit_amountlcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_initial_deposit_amountlcy(&mut self, v: f64) {
        self.initial_deposit_amountlcy = v;
    }

    pub fn get_initial_deposit_amountlcy(&self) -> f64 {
        self.initial_deposit_amountlcy
    }

    // double int_rate = 6;

    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }

    // string int_payment_fq = 7;

    pub fn clear_int_payment_fq(&mut self) {
        self.int_payment_fq.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_payment_fq(&mut self, v: ::std::string::String) {
        self.int_payment_fq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_payment_fq(&mut self) -> &mut ::std::string::String {
        &mut self.int_payment_fq
    }

    // Take field
    pub fn take_int_payment_fq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_payment_fq, ::std::string::String::new())
    }

    pub fn get_int_payment_fq(&self) -> &str {
        &self.int_payment_fq
    }

    // string acc_no = 8;

    pub fn clear_acc_no(&mut self) {
        self.acc_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_no(&mut self, v: ::std::string::String) {
        self.acc_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_no(&mut self) -> &mut ::std::string::String {
        &mut self.acc_no
    }

    // Take field
    pub fn take_acc_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_no, ::std::string::String::new())
    }

    pub fn get_acc_no(&self) -> &str {
        &self.acc_no
    }

    // int64 gl_code = 9;

    pub fn clear_gl_code(&mut self) {
        self.gl_code = 0;
    }

    // Param is passed by value, moved
    pub fn set_gl_code(&mut self, v: i64) {
        self.gl_code = v;
    }

    pub fn get_gl_code(&self) -> i64 {
        self.gl_code
    }

    // string slr_nonslr = 10;

    pub fn clear_slr_nonslr(&mut self) {
        self.slr_nonslr.clear();
    }

    // Param is passed by value, moved
    pub fn set_slr_nonslr(&mut self, v: ::std::string::String) {
        self.slr_nonslr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slr_nonslr(&mut self) -> &mut ::std::string::String {
        &mut self.slr_nonslr
    }

    // Take field
    pub fn take_slr_nonslr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.slr_nonslr, ::std::string::String::new())
    }

    pub fn get_slr_nonslr(&self) -> &str {
        &self.slr_nonslr
    }

    // string ccy = 11;

    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }

    // string product_code = 12;

    pub fn clear_product_code(&mut self) {
        self.product_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_code(&mut self, v: ::std::string::String) {
        self.product_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_code(&mut self) -> &mut ::std::string::String {
        &mut self.product_code
    }

    // Take field
    pub fn take_product_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_code, ::std::string::String::new())
    }

    pub fn get_product_code(&self) -> &str {
        &self.product_code
    }

    // string code_gl = 13;

    pub fn clear_code_gl(&mut self) {
        self.code_gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_code_gl(&mut self, v: ::std::string::String) {
        self.code_gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code_gl(&mut self) -> &mut ::std::string::String {
        &mut self.code_gl
    }

    // Take field
    pub fn take_code_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.code_gl, ::std::string::String::new())
    }

    pub fn get_code_gl(&self) -> &str {
        &self.code_gl
    }

    // string holding_period = 14;

    pub fn clear_holding_period(&mut self) {
        self.holding_period.clear();
    }

    // Param is passed by value, moved
    pub fn set_holding_period(&mut self, v: ::std::string::String) {
        self.holding_period = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_holding_period(&mut self) -> &mut ::std::string::String {
        &mut self.holding_period
    }

    // Take field
    pub fn take_holding_period(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.holding_period, ::std::string::String::new())
    }

    pub fn get_holding_period(&self) -> &str {
        &self.holding_period
    }

    // double interest_accrued = 15;

    pub fn clear_interest_accrued(&mut self) {
        self.interest_accrued = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_accrued(&mut self, v: f64) {
        self.interest_accrued = v;
    }

    pub fn get_interest_accrued(&self) -> f64 {
        self.interest_accrued
    }

    // double broken_quat_int = 16;

    pub fn clear_broken_quat_int(&mut self) {
        self.broken_quat_int = 0.;
    }

    // Param is passed by value, moved
    pub fn set_broken_quat_int(&mut self, v: f64) {
        self.broken_quat_int = v;
    }

    pub fn get_broken_quat_int(&self) -> f64 {
        self.broken_quat_int
    }

    // string app1 = 17;

    pub fn clear_app1(&mut self) {
        self.app1.clear();
    }

    // Param is passed by value, moved
    pub fn set_app1(&mut self, v: ::std::string::String) {
        self.app1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app1(&mut self) -> &mut ::std::string::String {
        &mut self.app1
    }

    // Take field
    pub fn take_app1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app1, ::std::string::String::new())
    }

    pub fn get_app1(&self) -> &str {
        &self.app1
    }

    // string app2 = 18;

    pub fn clear_app2(&mut self) {
        self.app2.clear();
    }

    // Param is passed by value, moved
    pub fn set_app2(&mut self, v: ::std::string::String) {
        self.app2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app2(&mut self) -> &mut ::std::string::String {
        &mut self.app2
    }

    // Take field
    pub fn take_app2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app2, ::std::string::String::new())
    }

    pub fn get_app2(&self) -> &str {
        &self.app2
    }

    // string app3 = 19;

    pub fn clear_app3(&mut self) {
        self.app3.clear();
    }

    // Param is passed by value, moved
    pub fn set_app3(&mut self, v: ::std::string::String) {
        self.app3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app3(&mut self) -> &mut ::std::string::String {
        &mut self.app3
    }

    // Take field
    pub fn take_app3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app3, ::std::string::String::new())
    }

    pub fn get_app3(&self) -> &str {
        &self.app3
    }

    // string app4 = 20;

    pub fn clear_app4(&mut self) {
        self.app4.clear();
    }

    // Param is passed by value, moved
    pub fn set_app4(&mut self, v: ::std::string::String) {
        self.app4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app4(&mut self) -> &mut ::std::string::String {
        &mut self.app4
    }

    // Take field
    pub fn take_app4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app4, ::std::string::String::new())
    }

    pub fn get_app4(&self) -> &str {
        &self.app4
    }

    // string app5 = 21;

    pub fn clear_app5(&mut self) {
        self.app5.clear();
    }

    // Param is passed by value, moved
    pub fn set_app5(&mut self, v: ::std::string::String) {
        self.app5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app5(&mut self) -> &mut ::std::string::String {
        &mut self.app5
    }

    // Take field
    pub fn take_app5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app5, ::std::string::String::new())
    }

    pub fn get_app5(&self) -> &str {
        &self.app5
    }

    // string app6 = 22;

    pub fn clear_app6(&mut self) {
        self.app6.clear();
    }

    // Param is passed by value, moved
    pub fn set_app6(&mut self, v: ::std::string::String) {
        self.app6 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app6(&mut self) -> &mut ::std::string::String {
        &mut self.app6
    }

    // Take field
    pub fn take_app6(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app6, ::std::string::String::new())
    }

    pub fn get_app6(&self) -> &str {
        &self.app6
    }

    // string app7 = 23;

    pub fn clear_app7(&mut self) {
        self.app7.clear();
    }

    // Param is passed by value, moved
    pub fn set_app7(&mut self, v: ::std::string::String) {
        self.app7 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app7(&mut self) -> &mut ::std::string::String {
        &mut self.app7
    }

    // Take field
    pub fn take_app7(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app7, ::std::string::String::new())
    }

    pub fn get_app7(&self) -> &str {
        &self.app7
    }

    // repeated .Cashflow cashflows = 24;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bank_code)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acc_open_date = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.initial_deposit_amount = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.initial_deposit_amountlcy = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_payment_fq)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_no)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.gl_code = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.slr_nonslr)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product_code)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.code_gl)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.holding_period)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_accrued = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.broken_quat_int = tmp;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app1)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app2)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app3)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app4)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app5)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app6)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app7)?;
                },
                24 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.bank_code.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.bank_code);
        }
        if self.acc_open_date != 0 {
            my_size += ::protobuf::rt::value_size(2, self.acc_open_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.initial_deposit_amount != 0. {
            my_size += 9;
        }
        if self.initial_deposit_amountlcy != 0. {
            my_size += 9;
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if !self.int_payment_fq.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.int_payment_fq);
        }
        if !self.acc_no.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.acc_no);
        }
        if self.gl_code != 0 {
            my_size += ::protobuf::rt::value_size(9, self.gl_code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.slr_nonslr.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.slr_nonslr);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.ccy);
        }
        if !self.product_code.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.product_code);
        }
        if !self.code_gl.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.code_gl);
        }
        if !self.holding_period.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.holding_period);
        }
        if self.interest_accrued != 0. {
            my_size += 9;
        }
        if self.broken_quat_int != 0. {
            my_size += 10;
        }
        if !self.app1.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.app1);
        }
        if !self.app2.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.app2);
        }
        if !self.app3.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.app3);
        }
        if !self.app4.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.app4);
        }
        if !self.app5.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.app5);
        }
        if !self.app6.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.app6);
        }
        if !self.app7.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.app7);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.bank_code.is_empty() {
            os.write_string(1, &self.bank_code)?;
        }
        if self.acc_open_date != 0 {
            os.write_int64(2, self.acc_open_date)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(3, self.maturity_date)?;
        }
        if self.initial_deposit_amount != 0. {
            os.write_double(4, self.initial_deposit_amount)?;
        }
        if self.initial_deposit_amountlcy != 0. {
            os.write_double(5, self.initial_deposit_amountlcy)?;
        }
        if self.int_rate != 0. {
            os.write_double(6, self.int_rate)?;
        }
        if !self.int_payment_fq.is_empty() {
            os.write_string(7, &self.int_payment_fq)?;
        }
        if !self.acc_no.is_empty() {
            os.write_string(8, &self.acc_no)?;
        }
        if self.gl_code != 0 {
            os.write_int64(9, self.gl_code)?;
        }
        if !self.slr_nonslr.is_empty() {
            os.write_string(10, &self.slr_nonslr)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(11, &self.ccy)?;
        }
        if !self.product_code.is_empty() {
            os.write_string(12, &self.product_code)?;
        }
        if !self.code_gl.is_empty() {
            os.write_string(13, &self.code_gl)?;
        }
        if !self.holding_period.is_empty() {
            os.write_string(14, &self.holding_period)?;
        }
        if self.interest_accrued != 0. {
            os.write_double(15, self.interest_accrued)?;
        }
        if self.broken_quat_int != 0. {
            os.write_double(16, self.broken_quat_int)?;
        }
        if !self.app1.is_empty() {
            os.write_string(17, &self.app1)?;
        }
        if !self.app2.is_empty() {
            os.write_string(18, &self.app2)?;
        }
        if !self.app3.is_empty() {
            os.write_string(19, &self.app3)?;
        }
        if !self.app4.is_empty() {
            os.write_string(20, &self.app4)?;
        }
        if !self.app5.is_empty() {
            os.write_string(21, &self.app5)?;
        }
        if !self.app6.is_empty() {
            os.write_string(22, &self.app6)?;
        }
        if !self.app7.is_empty() {
            os.write_string(23, &self.app7)?;
        }
        for v in &self.cashflows {
            os.write_tag(24, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bank_code",
                    |m: &AccountWithCashflows| { &m.bank_code },
                    |m: &mut AccountWithCashflows| { &mut m.bank_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "acc_open_date",
                    |m: &AccountWithCashflows| { &m.acc_open_date },
                    |m: &mut AccountWithCashflows| { &mut m.acc_open_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "maturity_date",
                    |m: &AccountWithCashflows| { &m.maturity_date },
                    |m: &mut AccountWithCashflows| { &mut m.maturity_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "initial_deposit_amount",
                    |m: &AccountWithCashflows| { &m.initial_deposit_amount },
                    |m: &mut AccountWithCashflows| { &mut m.initial_deposit_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "initial_deposit_amountlcy",
                    |m: &AccountWithCashflows| { &m.initial_deposit_amountlcy },
                    |m: &mut AccountWithCashflows| { &mut m.initial_deposit_amountlcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rate",
                    |m: &AccountWithCashflows| { &m.int_rate },
                    |m: &mut AccountWithCashflows| { &mut m.int_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "int_payment_fq",
                    |m: &AccountWithCashflows| { &m.int_payment_fq },
                    |m: &mut AccountWithCashflows| { &mut m.int_payment_fq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acc_no",
                    |m: &AccountWithCashflows| { &m.acc_no },
                    |m: &mut AccountWithCashflows| { &mut m.acc_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "gl_code",
                    |m: &AccountWithCashflows| { &m.gl_code },
                    |m: &mut AccountWithCashflows| { &mut m.gl_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "slr_nonslr",
                    |m: &AccountWithCashflows| { &m.slr_nonslr },
                    |m: &mut AccountWithCashflows| { &mut m.slr_nonslr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy",
                    |m: &AccountWithCashflows| { &m.ccy },
                    |m: &mut AccountWithCashflows| { &mut m.ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "product_code",
                    |m: &AccountWithCashflows| { &m.product_code },
                    |m: &mut AccountWithCashflows| { &mut m.product_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "code_gl",
                    |m: &AccountWithCashflows| { &m.code_gl },
                    |m: &mut AccountWithCashflows| { &mut m.code_gl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "holding_period",
                    |m: &AccountWithCashflows| { &m.holding_period },
                    |m: &mut AccountWithCashflows| { &mut m.holding_period },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_accrued",
                    |m: &AccountWithCashflows| { &m.interest_accrued },
                    |m: &mut AccountWithCashflows| { &mut m.interest_accrued },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "broken_quat_int",
                    |m: &AccountWithCashflows| { &m.broken_quat_int },
                    |m: &mut AccountWithCashflows| { &mut m.broken_quat_int },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app1",
                    |m: &AccountWithCashflows| { &m.app1 },
                    |m: &mut AccountWithCashflows| { &mut m.app1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app2",
                    |m: &AccountWithCashflows| { &m.app2 },
                    |m: &mut AccountWithCashflows| { &mut m.app2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app3",
                    |m: &AccountWithCashflows| { &m.app3 },
                    |m: &mut AccountWithCashflows| { &mut m.app3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app4",
                    |m: &AccountWithCashflows| { &m.app4 },
                    |m: &mut AccountWithCashflows| { &mut m.app4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app5",
                    |m: &AccountWithCashflows| { &m.app5 },
                    |m: &mut AccountWithCashflows| { &mut m.app5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app6",
                    |m: &AccountWithCashflows| { &m.app6 },
                    |m: &mut AccountWithCashflows| { &mut m.app6 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app7",
                    |m: &AccountWithCashflows| { &m.app7 },
                    |m: &mut AccountWithCashflows| { &mut m.app7 },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_bank_code();
        self.clear_acc_open_date();
        self.clear_maturity_date();
        self.clear_initial_deposit_amount();
        self.clear_initial_deposit_amountlcy();
        self.clear_int_rate();
        self.clear_int_payment_fq();
        self.clear_acc_no();
        self.clear_gl_code();
        self.clear_slr_nonslr();
        self.clear_ccy();
        self.clear_product_code();
        self.clear_code_gl();
        self.clear_holding_period();
        self.clear_interest_accrued();
        self.clear_broken_quat_int();
        self.clear_app1();
        self.clear_app2();
        self.clear_app3();
        self.clear_app4();
        self.clear_app5();
        self.clear_app6();
        self.clear_app7();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18proto/bal_wit_bank.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amoun\
    t\x18\x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\
    \x02\x20\x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\
    \x03R\x04date\"\xfb\x05\n\x14AccountWithCashflows\x12\x1b\n\tbank_code\
    \x18\x01\x20\x01(\tR\x08bankCode\x12\"\n\racc_open_date\x18\x02\x20\x01(\
    \x03R\x0baccOpenDate\x12#\n\rmaturity_date\x18\x03\x20\x01(\x03R\x0cmatu\
    rityDate\x124\n\x16initial_deposit_amount\x18\x04\x20\x01(\x01R\x14initi\
    alDepositAmount\x12:\n\x19initial_deposit_amountlcy\x18\x05\x20\x01(\x01\
    R\x17initialDepositAmountlcy\x12\x19\n\x08int_rate\x18\x06\x20\x01(\x01R\
    \x07intRate\x12$\n\x0eint_payment_fq\x18\x07\x20\x01(\tR\x0cintPaymentFq\
    \x12\x15\n\x06acc_no\x18\x08\x20\x01(\tR\x05accNo\x12\x17\n\x07gl_code\
    \x18\t\x20\x01(\x03R\x06glCode\x12\x1d\n\nslr_nonslr\x18\n\x20\x01(\tR\t\
    slrNonslr\x12\x10\n\x03ccy\x18\x0b\x20\x01(\tR\x03ccy\x12!\n\x0cproduct_\
    code\x18\x0c\x20\x01(\tR\x0bproductCode\x12\x17\n\x07code_gl\x18\r\x20\
    \x01(\tR\x06codeGl\x12%\n\x0eholding_period\x18\x0e\x20\x01(\tR\rholding\
    Period\x12)\n\x10interest_accrued\x18\x0f\x20\x01(\x01R\x0finterestAccru\
    ed\x12&\n\x0fbroken_quat_int\x18\x10\x20\x01(\x01R\rbrokenQuatInt\x12\
    \x12\n\x04app1\x18\x11\x20\x01(\tR\x04app1\x12\x12\n\x04app2\x18\x12\x20\
    \x01(\tR\x04app2\x12\x12\n\x04app3\x18\x13\x20\x01(\tR\x04app3\x12\x12\n\
    \x04app4\x18\x14\x20\x01(\tR\x04app4\x12\x12\n\x04app5\x18\x15\x20\x01(\
    \tR\x04app5\x12\x12\n\x04app6\x18\x16\x20\x01(\tR\x04app6\x12\x12\n\x04a\
    pp7\x18\x17\x20\x01(\tR\x04app7\x12'\n\tcashflows\x18\x18\x20\x03(\x0b2\
    \t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
