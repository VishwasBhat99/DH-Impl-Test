// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `todo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_amt",
                |m: &Cashflow| { &m.int_amt },
                |m: &mut Cashflow| { &mut m.int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "prin_amt",
                |m: &Cashflow| { &m.prin_amt },
                |m: &mut Cashflow| { &mut m.prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct cap_floor {
    // message fields
    pub entity: ::std::string::String,
    pub trade_id: ::std::string::String,
    pub structure_id_link: f64,
    pub component_typo: ::std::string::String,
    pub contract_type: ::std::string::String,
    pub package_typo: ::std::string::String,
    pub desk: ::std::string::String,
    pub book: ::std::string::String,
    pub folder: ::std::string::String,
    pub trading_banking: ::std::string::String,
    pub internal_external: ::std::string::String,
    pub counterparty_group_code: ::std::string::String,
    pub counterparty_parent_code: ::std::string::String,
    pub counterparty_child_code: ::std::string::String,
    pub bank_non_bank: ::std::string::String,
    pub trade_date: i64,
    pub maturity_date: i64,
    pub buy_sale: ::std::string::String,
    pub underlying_index: ::std::string::String,
    pub notional_currency: ::std::string::String,
    pub original_notional_amount: f64,
    pub mtm_in_inr: f64,
    pub net_pv01_in_inr: f64,
    pub modified_duration_of_the_deal: f64,
    pub reset_frequency: ::std::string::String,
    pub next_reset_date: i64,
    pub underlying_pp: ::std::string::String,
    pub deal_status: ::std::string::String,
    pub counterparty_category1: ::std::string::String,
    pub counterparty_category2: ::std::string::String,
    pub counterparty_category3: ::std::string::String,
    pub accounting_section: ::std::string::String,
    pub flowtype4: ::std::string::String,
    pub flow_amount: f64,
    pub cashflow_date: i64,
    pub flow_currency: ::std::string::String,
    pub cntrct_usage: ::std::string::String,
    pub non_idx_flw_curr: ::std::string::String,
    pub non_idx_cf_amt: f64,
    pub indexation_dt: i64,
    pub tot_int_amt: f64,
    pub tot_prin_amt: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a cap_floor {
    fn default() -> &'a cap_floor {
        <cap_floor as ::protobuf::Message>::default_instance()
    }
}

impl cap_floor {
    pub fn new() -> cap_floor {
        ::std::default::Default::default()
    }

    // string entity = 1;


    pub fn get_entity(&self) -> &str {
        &self.entity
    }
    pub fn clear_entity(&mut self) {
        self.entity.clear();
    }

    // Param is passed by value, moved
    pub fn set_entity(&mut self, v: ::std::string::String) {
        self.entity = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entity(&mut self) -> &mut ::std::string::String {
        &mut self.entity
    }

    // Take field
    pub fn take_entity(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.entity, ::std::string::String::new())
    }

    // string trade_id = 2;


    pub fn get_trade_id(&self) -> &str {
        &self.trade_id
    }
    pub fn clear_trade_id(&mut self) {
        self.trade_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_trade_id(&mut self, v: ::std::string::String) {
        self.trade_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trade_id(&mut self) -> &mut ::std::string::String {
        &mut self.trade_id
    }

    // Take field
    pub fn take_trade_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trade_id, ::std::string::String::new())
    }

    // double structure_id_link = 3;


    pub fn get_structure_id_link(&self) -> f64 {
        self.structure_id_link
    }
    pub fn clear_structure_id_link(&mut self) {
        self.structure_id_link = 0.;
    }

    // Param is passed by value, moved
    pub fn set_structure_id_link(&mut self, v: f64) {
        self.structure_id_link = v;
    }

    // string component_typo = 4;


    pub fn get_component_typo(&self) -> &str {
        &self.component_typo
    }
    pub fn clear_component_typo(&mut self) {
        self.component_typo.clear();
    }

    // Param is passed by value, moved
    pub fn set_component_typo(&mut self, v: ::std::string::String) {
        self.component_typo = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_component_typo(&mut self) -> &mut ::std::string::String {
        &mut self.component_typo
    }

    // Take field
    pub fn take_component_typo(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.component_typo, ::std::string::String::new())
    }

    // string contract_type = 5;


    pub fn get_contract_type(&self) -> &str {
        &self.contract_type
    }
    pub fn clear_contract_type(&mut self) {
        self.contract_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_type(&mut self, v: ::std::string::String) {
        self.contract_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_type(&mut self) -> &mut ::std::string::String {
        &mut self.contract_type
    }

    // Take field
    pub fn take_contract_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_type, ::std::string::String::new())
    }

    // string package_typo = 6;


    pub fn get_package_typo(&self) -> &str {
        &self.package_typo
    }
    pub fn clear_package_typo(&mut self) {
        self.package_typo.clear();
    }

    // Param is passed by value, moved
    pub fn set_package_typo(&mut self, v: ::std::string::String) {
        self.package_typo = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_package_typo(&mut self) -> &mut ::std::string::String {
        &mut self.package_typo
    }

    // Take field
    pub fn take_package_typo(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.package_typo, ::std::string::String::new())
    }

    // string desk = 7;


    pub fn get_desk(&self) -> &str {
        &self.desk
    }
    pub fn clear_desk(&mut self) {
        self.desk.clear();
    }

    // Param is passed by value, moved
    pub fn set_desk(&mut self, v: ::std::string::String) {
        self.desk = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_desk(&mut self) -> &mut ::std::string::String {
        &mut self.desk
    }

    // Take field
    pub fn take_desk(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.desk, ::std::string::String::new())
    }

    // string book = 8;


    pub fn get_book(&self) -> &str {
        &self.book
    }
    pub fn clear_book(&mut self) {
        self.book.clear();
    }

    // Param is passed by value, moved
    pub fn set_book(&mut self, v: ::std::string::String) {
        self.book = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_book(&mut self) -> &mut ::std::string::String {
        &mut self.book
    }

    // Take field
    pub fn take_book(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.book, ::std::string::String::new())
    }

    // string folder = 9;


    pub fn get_folder(&self) -> &str {
        &self.folder
    }
    pub fn clear_folder(&mut self) {
        self.folder.clear();
    }

    // Param is passed by value, moved
    pub fn set_folder(&mut self, v: ::std::string::String) {
        self.folder = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_folder(&mut self) -> &mut ::std::string::String {
        &mut self.folder
    }

    // Take field
    pub fn take_folder(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.folder, ::std::string::String::new())
    }

    // string trading_banking = 10;


    pub fn get_trading_banking(&self) -> &str {
        &self.trading_banking
    }
    pub fn clear_trading_banking(&mut self) {
        self.trading_banking.clear();
    }

    // Param is passed by value, moved
    pub fn set_trading_banking(&mut self, v: ::std::string::String) {
        self.trading_banking = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trading_banking(&mut self) -> &mut ::std::string::String {
        &mut self.trading_banking
    }

    // Take field
    pub fn take_trading_banking(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trading_banking, ::std::string::String::new())
    }

    // string internal_external = 11;


    pub fn get_internal_external(&self) -> &str {
        &self.internal_external
    }
    pub fn clear_internal_external(&mut self) {
        self.internal_external.clear();
    }

    // Param is passed by value, moved
    pub fn set_internal_external(&mut self, v: ::std::string::String) {
        self.internal_external = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_internal_external(&mut self) -> &mut ::std::string::String {
        &mut self.internal_external
    }

    // Take field
    pub fn take_internal_external(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.internal_external, ::std::string::String::new())
    }

    // string counterparty_group_code = 12;


    pub fn get_counterparty_group_code(&self) -> &str {
        &self.counterparty_group_code
    }
    pub fn clear_counterparty_group_code(&mut self) {
        self.counterparty_group_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterparty_group_code(&mut self, v: ::std::string::String) {
        self.counterparty_group_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty_group_code(&mut self) -> &mut ::std::string::String {
        &mut self.counterparty_group_code
    }

    // Take field
    pub fn take_counterparty_group_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterparty_group_code, ::std::string::String::new())
    }

    // string counterparty_parent_code = 13;


    pub fn get_counterparty_parent_code(&self) -> &str {
        &self.counterparty_parent_code
    }
    pub fn clear_counterparty_parent_code(&mut self) {
        self.counterparty_parent_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterparty_parent_code(&mut self, v: ::std::string::String) {
        self.counterparty_parent_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty_parent_code(&mut self) -> &mut ::std::string::String {
        &mut self.counterparty_parent_code
    }

    // Take field
    pub fn take_counterparty_parent_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterparty_parent_code, ::std::string::String::new())
    }

    // string counterparty_child_code = 14;


    pub fn get_counterparty_child_code(&self) -> &str {
        &self.counterparty_child_code
    }
    pub fn clear_counterparty_child_code(&mut self) {
        self.counterparty_child_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterparty_child_code(&mut self, v: ::std::string::String) {
        self.counterparty_child_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty_child_code(&mut self) -> &mut ::std::string::String {
        &mut self.counterparty_child_code
    }

    // Take field
    pub fn take_counterparty_child_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterparty_child_code, ::std::string::String::new())
    }

    // string bank_non_bank = 15;


    pub fn get_bank_non_bank(&self) -> &str {
        &self.bank_non_bank
    }
    pub fn clear_bank_non_bank(&mut self) {
        self.bank_non_bank.clear();
    }

    // Param is passed by value, moved
    pub fn set_bank_non_bank(&mut self, v: ::std::string::String) {
        self.bank_non_bank = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bank_non_bank(&mut self) -> &mut ::std::string::String {
        &mut self.bank_non_bank
    }

    // Take field
    pub fn take_bank_non_bank(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bank_non_bank, ::std::string::String::new())
    }

    // int64 trade_date = 16;


    pub fn get_trade_date(&self) -> i64 {
        self.trade_date
    }
    pub fn clear_trade_date(&mut self) {
        self.trade_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_trade_date(&mut self, v: i64) {
        self.trade_date = v;
    }

    // int64 maturity_date = 17;


    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }
    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    // string buy_sale = 18;


    pub fn get_buy_sale(&self) -> &str {
        &self.buy_sale
    }
    pub fn clear_buy_sale(&mut self) {
        self.buy_sale.clear();
    }

    // Param is passed by value, moved
    pub fn set_buy_sale(&mut self, v: ::std::string::String) {
        self.buy_sale = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buy_sale(&mut self) -> &mut ::std::string::String {
        &mut self.buy_sale
    }

    // Take field
    pub fn take_buy_sale(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buy_sale, ::std::string::String::new())
    }

    // string underlying_index = 19;


    pub fn get_underlying_index(&self) -> &str {
        &self.underlying_index
    }
    pub fn clear_underlying_index(&mut self) {
        self.underlying_index.clear();
    }

    // Param is passed by value, moved
    pub fn set_underlying_index(&mut self, v: ::std::string::String) {
        self.underlying_index = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_underlying_index(&mut self) -> &mut ::std::string::String {
        &mut self.underlying_index
    }

    // Take field
    pub fn take_underlying_index(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.underlying_index, ::std::string::String::new())
    }

    // string notional_currency = 20;


    pub fn get_notional_currency(&self) -> &str {
        &self.notional_currency
    }
    pub fn clear_notional_currency(&mut self) {
        self.notional_currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_notional_currency(&mut self, v: ::std::string::String) {
        self.notional_currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_notional_currency(&mut self) -> &mut ::std::string::String {
        &mut self.notional_currency
    }

    // Take field
    pub fn take_notional_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.notional_currency, ::std::string::String::new())
    }

    // double original_notional_amount = 21;


    pub fn get_original_notional_amount(&self) -> f64 {
        self.original_notional_amount
    }
    pub fn clear_original_notional_amount(&mut self) {
        self.original_notional_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_original_notional_amount(&mut self, v: f64) {
        self.original_notional_amount = v;
    }

    // double mtm_in_inr = 22;


    pub fn get_mtm_in_inr(&self) -> f64 {
        self.mtm_in_inr
    }
    pub fn clear_mtm_in_inr(&mut self) {
        self.mtm_in_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mtm_in_inr(&mut self, v: f64) {
        self.mtm_in_inr = v;
    }

    // double net_pv01_in_inr = 23;


    pub fn get_net_pv01_in_inr(&self) -> f64 {
        self.net_pv01_in_inr
    }
    pub fn clear_net_pv01_in_inr(&mut self) {
        self.net_pv01_in_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_net_pv01_in_inr(&mut self, v: f64) {
        self.net_pv01_in_inr = v;
    }

    // double modified_duration_of_the_deal = 24;


    pub fn get_modified_duration_of_the_deal(&self) -> f64 {
        self.modified_duration_of_the_deal
    }
    pub fn clear_modified_duration_of_the_deal(&mut self) {
        self.modified_duration_of_the_deal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_modified_duration_of_the_deal(&mut self, v: f64) {
        self.modified_duration_of_the_deal = v;
    }

    // string reset_frequency = 25;


    pub fn get_reset_frequency(&self) -> &str {
        &self.reset_frequency
    }
    pub fn clear_reset_frequency(&mut self) {
        self.reset_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_reset_frequency(&mut self, v: ::std::string::String) {
        self.reset_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reset_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.reset_frequency
    }

    // Take field
    pub fn take_reset_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reset_frequency, ::std::string::String::new())
    }

    // int64 next_reset_date = 26;


    pub fn get_next_reset_date(&self) -> i64 {
        self.next_reset_date
    }
    pub fn clear_next_reset_date(&mut self) {
        self.next_reset_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_reset_date(&mut self, v: i64) {
        self.next_reset_date = v;
    }

    // string underlying_pp = 27;


    pub fn get_underlying_pp(&self) -> &str {
        &self.underlying_pp
    }
    pub fn clear_underlying_pp(&mut self) {
        self.underlying_pp.clear();
    }

    // Param is passed by value, moved
    pub fn set_underlying_pp(&mut self, v: ::std::string::String) {
        self.underlying_pp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_underlying_pp(&mut self) -> &mut ::std::string::String {
        &mut self.underlying_pp
    }

    // Take field
    pub fn take_underlying_pp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.underlying_pp, ::std::string::String::new())
    }

    // string deal_status = 28;


    pub fn get_deal_status(&self) -> &str {
        &self.deal_status
    }
    pub fn clear_deal_status(&mut self) {
        self.deal_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_status(&mut self, v: ::std::string::String) {
        self.deal_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_status(&mut self) -> &mut ::std::string::String {
        &mut self.deal_status
    }

    // Take field
    pub fn take_deal_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_status, ::std::string::String::new())
    }

    // string counterparty_category1 = 29;


    pub fn get_counterparty_category1(&self) -> &str {
        &self.counterparty_category1
    }
    pub fn clear_counterparty_category1(&mut self) {
        self.counterparty_category1.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterparty_category1(&mut self, v: ::std::string::String) {
        self.counterparty_category1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty_category1(&mut self) -> &mut ::std::string::String {
        &mut self.counterparty_category1
    }

    // Take field
    pub fn take_counterparty_category1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterparty_category1, ::std::string::String::new())
    }

    // string counterparty_category2 = 30;


    pub fn get_counterparty_category2(&self) -> &str {
        &self.counterparty_category2
    }
    pub fn clear_counterparty_category2(&mut self) {
        self.counterparty_category2.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterparty_category2(&mut self, v: ::std::string::String) {
        self.counterparty_category2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty_category2(&mut self) -> &mut ::std::string::String {
        &mut self.counterparty_category2
    }

    // Take field
    pub fn take_counterparty_category2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterparty_category2, ::std::string::String::new())
    }

    // string counterparty_category3 = 31;


    pub fn get_counterparty_category3(&self) -> &str {
        &self.counterparty_category3
    }
    pub fn clear_counterparty_category3(&mut self) {
        self.counterparty_category3.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterparty_category3(&mut self, v: ::std::string::String) {
        self.counterparty_category3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty_category3(&mut self) -> &mut ::std::string::String {
        &mut self.counterparty_category3
    }

    // Take field
    pub fn take_counterparty_category3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterparty_category3, ::std::string::String::new())
    }

    // string accounting_section = 32;


    pub fn get_accounting_section(&self) -> &str {
        &self.accounting_section
    }
    pub fn clear_accounting_section(&mut self) {
        self.accounting_section.clear();
    }

    // Param is passed by value, moved
    pub fn set_accounting_section(&mut self, v: ::std::string::String) {
        self.accounting_section = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accounting_section(&mut self) -> &mut ::std::string::String {
        &mut self.accounting_section
    }

    // Take field
    pub fn take_accounting_section(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.accounting_section, ::std::string::String::new())
    }

    // string flowtype4 = 33;


    pub fn get_flowtype4(&self) -> &str {
        &self.flowtype4
    }
    pub fn clear_flowtype4(&mut self) {
        self.flowtype4.clear();
    }

    // Param is passed by value, moved
    pub fn set_flowtype4(&mut self, v: ::std::string::String) {
        self.flowtype4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flowtype4(&mut self) -> &mut ::std::string::String {
        &mut self.flowtype4
    }

    // Take field
    pub fn take_flowtype4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flowtype4, ::std::string::String::new())
    }

    // double flow_amount = 34;


    pub fn get_flow_amount(&self) -> f64 {
        self.flow_amount
    }
    pub fn clear_flow_amount(&mut self) {
        self.flow_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_flow_amount(&mut self, v: f64) {
        self.flow_amount = v;
    }

    // int64 cashflow_date = 35;


    pub fn get_cashflow_date(&self) -> i64 {
        self.cashflow_date
    }
    pub fn clear_cashflow_date(&mut self) {
        self.cashflow_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_cashflow_date(&mut self, v: i64) {
        self.cashflow_date = v;
    }

    // string flow_currency = 36;


    pub fn get_flow_currency(&self) -> &str {
        &self.flow_currency
    }
    pub fn clear_flow_currency(&mut self) {
        self.flow_currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_flow_currency(&mut self, v: ::std::string::String) {
        self.flow_currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flow_currency(&mut self) -> &mut ::std::string::String {
        &mut self.flow_currency
    }

    // Take field
    pub fn take_flow_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flow_currency, ::std::string::String::new())
    }

    // string cntrct_usage = 37;


    pub fn get_cntrct_usage(&self) -> &str {
        &self.cntrct_usage
    }
    pub fn clear_cntrct_usage(&mut self) {
        self.cntrct_usage.clear();
    }

    // Param is passed by value, moved
    pub fn set_cntrct_usage(&mut self, v: ::std::string::String) {
        self.cntrct_usage = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cntrct_usage(&mut self) -> &mut ::std::string::String {
        &mut self.cntrct_usage
    }

    // Take field
    pub fn take_cntrct_usage(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cntrct_usage, ::std::string::String::new())
    }

    // string non_idx_flw_curr = 38;


    pub fn get_non_idx_flw_curr(&self) -> &str {
        &self.non_idx_flw_curr
    }
    pub fn clear_non_idx_flw_curr(&mut self) {
        self.non_idx_flw_curr.clear();
    }

    // Param is passed by value, moved
    pub fn set_non_idx_flw_curr(&mut self, v: ::std::string::String) {
        self.non_idx_flw_curr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_non_idx_flw_curr(&mut self) -> &mut ::std::string::String {
        &mut self.non_idx_flw_curr
    }

    // Take field
    pub fn take_non_idx_flw_curr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.non_idx_flw_curr, ::std::string::String::new())
    }

    // double non_idx_cf_amt = 39;


    pub fn get_non_idx_cf_amt(&self) -> f64 {
        self.non_idx_cf_amt
    }
    pub fn clear_non_idx_cf_amt(&mut self) {
        self.non_idx_cf_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_non_idx_cf_amt(&mut self, v: f64) {
        self.non_idx_cf_amt = v;
    }

    // int64 indexation_dt = 40;


    pub fn get_indexation_dt(&self) -> i64 {
        self.indexation_dt
    }
    pub fn clear_indexation_dt(&mut self) {
        self.indexation_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_indexation_dt(&mut self, v: i64) {
        self.indexation_dt = v;
    }

    // double tot_int_amt = 41;


    pub fn get_tot_int_amt(&self) -> f64 {
        self.tot_int_amt
    }
    pub fn clear_tot_int_amt(&mut self) {
        self.tot_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_int_amt(&mut self, v: f64) {
        self.tot_int_amt = v;
    }

    // double tot_prin_amt = 42;


    pub fn get_tot_prin_amt(&self) -> f64 {
        self.tot_prin_amt
    }
    pub fn clear_tot_prin_amt(&mut self) {
        self.tot_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_prin_amt(&mut self, v: f64) {
        self.tot_prin_amt = v;
    }

    // repeated .Cashflow cashflows = 43;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for cap_floor {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.entity)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trade_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.structure_id_link = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.component_typo)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_type)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.package_typo)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.desk)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.book)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.folder)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trading_banking)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.internal_external)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterparty_group_code)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterparty_parent_code)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterparty_child_code)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bank_non_bank)?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.trade_date = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buy_sale)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.underlying_index)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.notional_currency)?;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.original_notional_amount = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.mtm_in_inr = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.net_pv01_in_inr = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.modified_duration_of_the_deal = tmp;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reset_frequency)?;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_reset_date = tmp;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.underlying_pp)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_status)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterparty_category1)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterparty_category2)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterparty_category3)?;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.accounting_section)?;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flowtype4)?;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.flow_amount = tmp;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cashflow_date = tmp;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flow_currency)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cntrct_usage)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.non_idx_flw_curr)?;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.non_idx_cf_amt = tmp;
                },
                40 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.indexation_dt = tmp;
                },
                41 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_int_amt = tmp;
                },
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_prin_amt = tmp;
                },
                43 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.entity.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.entity);
        }
        if !self.trade_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.trade_id);
        }
        if self.structure_id_link != 0. {
            my_size += 9;
        }
        if !self.component_typo.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.component_typo);
        }
        if !self.contract_type.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.contract_type);
        }
        if !self.package_typo.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.package_typo);
        }
        if !self.desk.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.desk);
        }
        if !self.book.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.book);
        }
        if !self.folder.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.folder);
        }
        if !self.trading_banking.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.trading_banking);
        }
        if !self.internal_external.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.internal_external);
        }
        if !self.counterparty_group_code.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.counterparty_group_code);
        }
        if !self.counterparty_parent_code.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.counterparty_parent_code);
        }
        if !self.counterparty_child_code.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.counterparty_child_code);
        }
        if !self.bank_non_bank.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.bank_non_bank);
        }
        if self.trade_date != 0 {
            my_size += ::protobuf::rt::value_size(16, self.trade_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(17, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.buy_sale.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.buy_sale);
        }
        if !self.underlying_index.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.underlying_index);
        }
        if !self.notional_currency.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.notional_currency);
        }
        if self.original_notional_amount != 0. {
            my_size += 10;
        }
        if self.mtm_in_inr != 0. {
            my_size += 10;
        }
        if self.net_pv01_in_inr != 0. {
            my_size += 10;
        }
        if self.modified_duration_of_the_deal != 0. {
            my_size += 10;
        }
        if !self.reset_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.reset_frequency);
        }
        if self.next_reset_date != 0 {
            my_size += ::protobuf::rt::value_size(26, self.next_reset_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.underlying_pp.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.underlying_pp);
        }
        if !self.deal_status.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.deal_status);
        }
        if !self.counterparty_category1.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.counterparty_category1);
        }
        if !self.counterparty_category2.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.counterparty_category2);
        }
        if !self.counterparty_category3.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.counterparty_category3);
        }
        if !self.accounting_section.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.accounting_section);
        }
        if !self.flowtype4.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.flowtype4);
        }
        if self.flow_amount != 0. {
            my_size += 10;
        }
        if self.cashflow_date != 0 {
            my_size += ::protobuf::rt::value_size(35, self.cashflow_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.flow_currency.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.flow_currency);
        }
        if !self.cntrct_usage.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.cntrct_usage);
        }
        if !self.non_idx_flw_curr.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.non_idx_flw_curr);
        }
        if self.non_idx_cf_amt != 0. {
            my_size += 10;
        }
        if self.indexation_dt != 0 {
            my_size += ::protobuf::rt::value_size(40, self.indexation_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tot_int_amt != 0. {
            my_size += 10;
        }
        if self.tot_prin_amt != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.entity.is_empty() {
            os.write_string(1, &self.entity)?;
        }
        if !self.trade_id.is_empty() {
            os.write_string(2, &self.trade_id)?;
        }
        if self.structure_id_link != 0. {
            os.write_double(3, self.structure_id_link)?;
        }
        if !self.component_typo.is_empty() {
            os.write_string(4, &self.component_typo)?;
        }
        if !self.contract_type.is_empty() {
            os.write_string(5, &self.contract_type)?;
        }
        if !self.package_typo.is_empty() {
            os.write_string(6, &self.package_typo)?;
        }
        if !self.desk.is_empty() {
            os.write_string(7, &self.desk)?;
        }
        if !self.book.is_empty() {
            os.write_string(8, &self.book)?;
        }
        if !self.folder.is_empty() {
            os.write_string(9, &self.folder)?;
        }
        if !self.trading_banking.is_empty() {
            os.write_string(10, &self.trading_banking)?;
        }
        if !self.internal_external.is_empty() {
            os.write_string(11, &self.internal_external)?;
        }
        if !self.counterparty_group_code.is_empty() {
            os.write_string(12, &self.counterparty_group_code)?;
        }
        if !self.counterparty_parent_code.is_empty() {
            os.write_string(13, &self.counterparty_parent_code)?;
        }
        if !self.counterparty_child_code.is_empty() {
            os.write_string(14, &self.counterparty_child_code)?;
        }
        if !self.bank_non_bank.is_empty() {
            os.write_string(15, &self.bank_non_bank)?;
        }
        if self.trade_date != 0 {
            os.write_int64(16, self.trade_date)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(17, self.maturity_date)?;
        }
        if !self.buy_sale.is_empty() {
            os.write_string(18, &self.buy_sale)?;
        }
        if !self.underlying_index.is_empty() {
            os.write_string(19, &self.underlying_index)?;
        }
        if !self.notional_currency.is_empty() {
            os.write_string(20, &self.notional_currency)?;
        }
        if self.original_notional_amount != 0. {
            os.write_double(21, self.original_notional_amount)?;
        }
        if self.mtm_in_inr != 0. {
            os.write_double(22, self.mtm_in_inr)?;
        }
        if self.net_pv01_in_inr != 0. {
            os.write_double(23, self.net_pv01_in_inr)?;
        }
        if self.modified_duration_of_the_deal != 0. {
            os.write_double(24, self.modified_duration_of_the_deal)?;
        }
        if !self.reset_frequency.is_empty() {
            os.write_string(25, &self.reset_frequency)?;
        }
        if self.next_reset_date != 0 {
            os.write_int64(26, self.next_reset_date)?;
        }
        if !self.underlying_pp.is_empty() {
            os.write_string(27, &self.underlying_pp)?;
        }
        if !self.deal_status.is_empty() {
            os.write_string(28, &self.deal_status)?;
        }
        if !self.counterparty_category1.is_empty() {
            os.write_string(29, &self.counterparty_category1)?;
        }
        if !self.counterparty_category2.is_empty() {
            os.write_string(30, &self.counterparty_category2)?;
        }
        if !self.counterparty_category3.is_empty() {
            os.write_string(31, &self.counterparty_category3)?;
        }
        if !self.accounting_section.is_empty() {
            os.write_string(32, &self.accounting_section)?;
        }
        if !self.flowtype4.is_empty() {
            os.write_string(33, &self.flowtype4)?;
        }
        if self.flow_amount != 0. {
            os.write_double(34, self.flow_amount)?;
        }
        if self.cashflow_date != 0 {
            os.write_int64(35, self.cashflow_date)?;
        }
        if !self.flow_currency.is_empty() {
            os.write_string(36, &self.flow_currency)?;
        }
        if !self.cntrct_usage.is_empty() {
            os.write_string(37, &self.cntrct_usage)?;
        }
        if !self.non_idx_flw_curr.is_empty() {
            os.write_string(38, &self.non_idx_flw_curr)?;
        }
        if self.non_idx_cf_amt != 0. {
            os.write_double(39, self.non_idx_cf_amt)?;
        }
        if self.indexation_dt != 0 {
            os.write_int64(40, self.indexation_dt)?;
        }
        if self.tot_int_amt != 0. {
            os.write_double(41, self.tot_int_amt)?;
        }
        if self.tot_prin_amt != 0. {
            os.write_double(42, self.tot_prin_amt)?;
        }
        for v in &self.cashflows {
            os.write_tag(43, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> cap_floor {
        cap_floor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "entity",
                |m: &cap_floor| { &m.entity },
                |m: &mut cap_floor| { &mut m.entity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "trade_id",
                |m: &cap_floor| { &m.trade_id },
                |m: &mut cap_floor| { &mut m.trade_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "structure_id_link",
                |m: &cap_floor| { &m.structure_id_link },
                |m: &mut cap_floor| { &mut m.structure_id_link },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "component_typo",
                |m: &cap_floor| { &m.component_typo },
                |m: &mut cap_floor| { &mut m.component_typo },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contract_type",
                |m: &cap_floor| { &m.contract_type },
                |m: &mut cap_floor| { &mut m.contract_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "package_typo",
                |m: &cap_floor| { &m.package_typo },
                |m: &mut cap_floor| { &mut m.package_typo },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "desk",
                |m: &cap_floor| { &m.desk },
                |m: &mut cap_floor| { &mut m.desk },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "book",
                |m: &cap_floor| { &m.book },
                |m: &mut cap_floor| { &mut m.book },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "folder",
                |m: &cap_floor| { &m.folder },
                |m: &mut cap_floor| { &mut m.folder },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "trading_banking",
                |m: &cap_floor| { &m.trading_banking },
                |m: &mut cap_floor| { &mut m.trading_banking },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "internal_external",
                |m: &cap_floor| { &m.internal_external },
                |m: &mut cap_floor| { &mut m.internal_external },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "counterparty_group_code",
                |m: &cap_floor| { &m.counterparty_group_code },
                |m: &mut cap_floor| { &mut m.counterparty_group_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "counterparty_parent_code",
                |m: &cap_floor| { &m.counterparty_parent_code },
                |m: &mut cap_floor| { &mut m.counterparty_parent_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "counterparty_child_code",
                |m: &cap_floor| { &m.counterparty_child_code },
                |m: &mut cap_floor| { &mut m.counterparty_child_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bank_non_bank",
                |m: &cap_floor| { &m.bank_non_bank },
                |m: &mut cap_floor| { &mut m.bank_non_bank },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "trade_date",
                |m: &cap_floor| { &m.trade_date },
                |m: &mut cap_floor| { &mut m.trade_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "maturity_date",
                |m: &cap_floor| { &m.maturity_date },
                |m: &mut cap_floor| { &mut m.maturity_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buy_sale",
                |m: &cap_floor| { &m.buy_sale },
                |m: &mut cap_floor| { &mut m.buy_sale },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "underlying_index",
                |m: &cap_floor| { &m.underlying_index },
                |m: &mut cap_floor| { &mut m.underlying_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "notional_currency",
                |m: &cap_floor| { &m.notional_currency },
                |m: &mut cap_floor| { &mut m.notional_currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "original_notional_amount",
                |m: &cap_floor| { &m.original_notional_amount },
                |m: &mut cap_floor| { &mut m.original_notional_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "mtm_in_inr",
                |m: &cap_floor| { &m.mtm_in_inr },
                |m: &mut cap_floor| { &mut m.mtm_in_inr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "net_pv01_in_inr",
                |m: &cap_floor| { &m.net_pv01_in_inr },
                |m: &mut cap_floor| { &mut m.net_pv01_in_inr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "modified_duration_of_the_deal",
                |m: &cap_floor| { &m.modified_duration_of_the_deal },
                |m: &mut cap_floor| { &mut m.modified_duration_of_the_deal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reset_frequency",
                |m: &cap_floor| { &m.reset_frequency },
                |m: &mut cap_floor| { &mut m.reset_frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_reset_date",
                |m: &cap_floor| { &m.next_reset_date },
                |m: &mut cap_floor| { &mut m.next_reset_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "underlying_pp",
                |m: &cap_floor| { &m.underlying_pp },
                |m: &mut cap_floor| { &mut m.underlying_pp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "deal_status",
                |m: &cap_floor| { &m.deal_status },
                |m: &mut cap_floor| { &mut m.deal_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "counterparty_category1",
                |m: &cap_floor| { &m.counterparty_category1 },
                |m: &mut cap_floor| { &mut m.counterparty_category1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "counterparty_category2",
                |m: &cap_floor| { &m.counterparty_category2 },
                |m: &mut cap_floor| { &mut m.counterparty_category2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "counterparty_category3",
                |m: &cap_floor| { &m.counterparty_category3 },
                |m: &mut cap_floor| { &mut m.counterparty_category3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "accounting_section",
                |m: &cap_floor| { &m.accounting_section },
                |m: &mut cap_floor| { &mut m.accounting_section },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "flowtype4",
                |m: &cap_floor| { &m.flowtype4 },
                |m: &mut cap_floor| { &mut m.flowtype4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "flow_amount",
                |m: &cap_floor| { &m.flow_amount },
                |m: &mut cap_floor| { &mut m.flow_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cashflow_date",
                |m: &cap_floor| { &m.cashflow_date },
                |m: &mut cap_floor| { &mut m.cashflow_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "flow_currency",
                |m: &cap_floor| { &m.flow_currency },
                |m: &mut cap_floor| { &mut m.flow_currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cntrct_usage",
                |m: &cap_floor| { &m.cntrct_usage },
                |m: &mut cap_floor| { &mut m.cntrct_usage },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "non_idx_flw_curr",
                |m: &cap_floor| { &m.non_idx_flw_curr },
                |m: &mut cap_floor| { &mut m.non_idx_flw_curr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "non_idx_cf_amt",
                |m: &cap_floor| { &m.non_idx_cf_amt },
                |m: &mut cap_floor| { &mut m.non_idx_cf_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "indexation_dt",
                |m: &cap_floor| { &m.indexation_dt },
                |m: &mut cap_floor| { &mut m.indexation_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_int_amt",
                |m: &cap_floor| { &m.tot_int_amt },
                |m: &mut cap_floor| { &mut m.tot_int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_prin_amt",
                |m: &cap_floor| { &m.tot_prin_amt },
                |m: &mut cap_floor| { &mut m.tot_prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &cap_floor| { &m.cashflows },
                |m: &mut cap_floor| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<cap_floor>(
                "cap_floor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static cap_floor {
        static instance: ::protobuf::rt::LazyV2<cap_floor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(cap_floor::new)
    }
}

impl ::protobuf::Clear for cap_floor {
    fn clear(&mut self) {
        self.entity.clear();
        self.trade_id.clear();
        self.structure_id_link = 0.;
        self.component_typo.clear();
        self.contract_type.clear();
        self.package_typo.clear();
        self.desk.clear();
        self.book.clear();
        self.folder.clear();
        self.trading_banking.clear();
        self.internal_external.clear();
        self.counterparty_group_code.clear();
        self.counterparty_parent_code.clear();
        self.counterparty_child_code.clear();
        self.bank_non_bank.clear();
        self.trade_date = 0;
        self.maturity_date = 0;
        self.buy_sale.clear();
        self.underlying_index.clear();
        self.notional_currency.clear();
        self.original_notional_amount = 0.;
        self.mtm_in_inr = 0.;
        self.net_pv01_in_inr = 0.;
        self.modified_duration_of_the_deal = 0.;
        self.reset_frequency.clear();
        self.next_reset_date = 0;
        self.underlying_pp.clear();
        self.deal_status.clear();
        self.counterparty_category1.clear();
        self.counterparty_category2.clear();
        self.counterparty_category3.clear();
        self.accounting_section.clear();
        self.flowtype4.clear();
        self.flow_amount = 0.;
        self.cashflow_date = 0;
        self.flow_currency.clear();
        self.cntrct_usage.clear();
        self.non_idx_flw_curr.clear();
        self.non_idx_cf_amt = 0.;
        self.indexation_dt = 0;
        self.tot_int_amt = 0.;
        self.tot_prin_amt = 0.;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for cap_floor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for cap_floor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ntodo.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\x01(\
    \x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prinAmt\
    \x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xaa\r\n\tcap_floor\
    \x12\x16\n\x06entity\x18\x01\x20\x01(\tR\x06entity\x12\x19\n\x08trade_id\
    \x18\x02\x20\x01(\tR\x07tradeId\x12*\n\x11structure_id_link\x18\x03\x20\
    \x01(\x01R\x0fstructureIdLink\x12%\n\x0ecomponent_typo\x18\x04\x20\x01(\
    \tR\rcomponentTypo\x12#\n\rcontract_type\x18\x05\x20\x01(\tR\x0ccontract\
    Type\x12!\n\x0cpackage_typo\x18\x06\x20\x01(\tR\x0bpackageTypo\x12\x12\n\
    \x04desk\x18\x07\x20\x01(\tR\x04desk\x12\x12\n\x04book\x18\x08\x20\x01(\
    \tR\x04book\x12\x16\n\x06folder\x18\t\x20\x01(\tR\x06folder\x12'\n\x0ftr\
    ading_banking\x18\n\x20\x01(\tR\x0etradingBanking\x12+\n\x11internal_ext\
    ernal\x18\x0b\x20\x01(\tR\x10internalExternal\x126\n\x17counterparty_gro\
    up_code\x18\x0c\x20\x01(\tR\x15counterpartyGroupCode\x128\n\x18counterpa\
    rty_parent_code\x18\r\x20\x01(\tR\x16counterpartyParentCode\x126\n\x17co\
    unterparty_child_code\x18\x0e\x20\x01(\tR\x15counterpartyChildCode\x12\"\
    \n\rbank_non_bank\x18\x0f\x20\x01(\tR\x0bbankNonBank\x12\x1d\n\ntrade_da\
    te\x18\x10\x20\x01(\x03R\ttradeDate\x12#\n\rmaturity_date\x18\x11\x20\
    \x01(\x03R\x0cmaturityDate\x12\x19\n\x08buy_sale\x18\x12\x20\x01(\tR\x07\
    buySale\x12)\n\x10underlying_index\x18\x13\x20\x01(\tR\x0funderlyingInde\
    x\x12+\n\x11notional_currency\x18\x14\x20\x01(\tR\x10notionalCurrency\
    \x128\n\x18original_notional_amount\x18\x15\x20\x01(\x01R\x16originalNot\
    ionalAmount\x12\x1c\n\nmtm_in_inr\x18\x16\x20\x01(\x01R\x08mtmInInr\x12%\
    \n\x0fnet_pv01_in_inr\x18\x17\x20\x01(\x01R\x0cnetPv01InInr\x12@\n\x1dmo\
    dified_duration_of_the_deal\x18\x18\x20\x01(\x01R\x19modifiedDurationOfT\
    heDeal\x12'\n\x0freset_frequency\x18\x19\x20\x01(\tR\x0eresetFrequency\
    \x12&\n\x0fnext_reset_date\x18\x1a\x20\x01(\x03R\rnextResetDate\x12#\n\r\
    underlying_pp\x18\x1b\x20\x01(\tR\x0cunderlyingPp\x12\x1f\n\x0bdeal_stat\
    us\x18\x1c\x20\x01(\tR\ndealStatus\x125\n\x16counterparty_category1\x18\
    \x1d\x20\x01(\tR\x15counterpartyCategory1\x125\n\x16counterparty_categor\
    y2\x18\x1e\x20\x01(\tR\x15counterpartyCategory2\x125\n\x16counterparty_c\
    ategory3\x18\x1f\x20\x01(\tR\x15counterpartyCategory3\x12-\n\x12accounti\
    ng_section\x18\x20\x20\x01(\tR\x11accountingSection\x12\x1c\n\tflowtype4\
    \x18!\x20\x01(\tR\tflowtype4\x12\x1f\n\x0bflow_amount\x18\"\x20\x01(\x01\
    R\nflowAmount\x12#\n\rcashflow_date\x18#\x20\x01(\x03R\x0ccashflowDate\
    \x12#\n\rflow_currency\x18$\x20\x01(\tR\x0cflowCurrency\x12!\n\x0ccntrct\
    _usage\x18%\x20\x01(\tR\x0bcntrctUsage\x12'\n\x10non_idx_flw_curr\x18&\
    \x20\x01(\tR\rnonIdxFlwCurr\x12#\n\x0enon_idx_cf_amt\x18'\x20\x01(\x01R\
    \x0bnonIdxCfAmt\x12#\n\rindexation_dt\x18(\x20\x01(\x03R\x0cindexationDt\
    \x12\x1e\n\x0btot_int_amt\x18)\x20\x01(\x01R\ttotIntAmt\x12\x20\n\x0ctot\
    _prin_amt\x18*\x20\x01(\x01R\ntotPrinAmt\x12'\n\tcashflows\x18+\x20\x03(\
    \x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
