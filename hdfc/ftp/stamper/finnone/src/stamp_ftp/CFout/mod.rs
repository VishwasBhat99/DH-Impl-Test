// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    pub base_rate: f64,
    pub adj1_rate: f64,
    pub adj2_rate: f64,
    pub adj3_rate: f64,
    pub adj4_rate: f64,
    pub adj5_rate: f64,
    pub adj6_rate: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // double principal_amount = 2;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }

    // double base_rate = 4;

    pub fn clear_base_rate(&mut self) {
        self.base_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_rate(&mut self, v: f64) {
        self.base_rate = v;
    }

    pub fn get_base_rate(&self) -> f64 {
        self.base_rate
    }

    // double adj1_rate = 5;

    pub fn clear_adj1_rate(&mut self) {
        self.adj1_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj1_rate(&mut self, v: f64) {
        self.adj1_rate = v;
    }

    pub fn get_adj1_rate(&self) -> f64 {
        self.adj1_rate
    }

    // double adj2_rate = 6;

    pub fn clear_adj2_rate(&mut self) {
        self.adj2_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj2_rate(&mut self, v: f64) {
        self.adj2_rate = v;
    }

    pub fn get_adj2_rate(&self) -> f64 {
        self.adj2_rate
    }

    // double adj3_rate = 7;

    pub fn clear_adj3_rate(&mut self) {
        self.adj3_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj3_rate(&mut self, v: f64) {
        self.adj3_rate = v;
    }

    pub fn get_adj3_rate(&self) -> f64 {
        self.adj3_rate
    }

    // double adj4_rate = 8;

    pub fn clear_adj4_rate(&mut self) {
        self.adj4_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj4_rate(&mut self, v: f64) {
        self.adj4_rate = v;
    }

    pub fn get_adj4_rate(&self) -> f64 {
        self.adj4_rate
    }

    // double adj5_rate = 9;

    pub fn clear_adj5_rate(&mut self) {
        self.adj5_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj5_rate(&mut self, v: f64) {
        self.adj5_rate = v;
    }

    pub fn get_adj5_rate(&self) -> f64 {
        self.adj5_rate
    }

    // double adj6_rate = 10;

    pub fn clear_adj6_rate(&mut self) {
        self.adj6_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj6_rate(&mut self, v: f64) {
        self.adj6_rate = v;
    }

    pub fn get_adj6_rate(&self) -> f64 {
        self.adj6_rate
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.base_rate = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj1_rate = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj2_rate = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj3_rate = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj4_rate = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj5_rate = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj6_rate = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.base_rate != 0. {
            my_size += 9;
        }
        if self.adj1_rate != 0. {
            my_size += 9;
        }
        if self.adj2_rate != 0. {
            my_size += 9;
        }
        if self.adj3_rate != 0. {
            my_size += 9;
        }
        if self.adj4_rate != 0. {
            my_size += 9;
        }
        if self.adj5_rate != 0. {
            my_size += 9;
        }
        if self.adj6_rate != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        if self.base_rate != 0. {
            os.write_double(4, self.base_rate)?;
        }
        if self.adj1_rate != 0. {
            os.write_double(5, self.adj1_rate)?;
        }
        if self.adj2_rate != 0. {
            os.write_double(6, self.adj2_rate)?;
        }
        if self.adj3_rate != 0. {
            os.write_double(7, self.adj3_rate)?;
        }
        if self.adj4_rate != 0. {
            os.write_double(8, self.adj4_rate)?;
        }
        if self.adj5_rate != 0. {
            os.write_double(9, self.adj5_rate)?;
        }
        if self.adj6_rate != 0. {
            os.write_double(10, self.adj6_rate)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_amount",
                    |m: &Cashflow| { &m.interest_amount },
                    |m: &mut Cashflow| { &mut m.interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal_amount",
                    |m: &Cashflow| { &m.principal_amount },
                    |m: &mut Cashflow| { &mut m.principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "base_rate",
                    |m: &Cashflow| { &m.base_rate },
                    |m: &mut Cashflow| { &mut m.base_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj1_rate",
                    |m: &Cashflow| { &m.adj1_rate },
                    |m: &mut Cashflow| { &mut m.adj1_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj2_rate",
                    |m: &Cashflow| { &m.adj2_rate },
                    |m: &mut Cashflow| { &mut m.adj2_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj3_rate",
                    |m: &Cashflow| { &m.adj3_rate },
                    |m: &mut Cashflow| { &mut m.adj3_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj4_rate",
                    |m: &Cashflow| { &m.adj4_rate },
                    |m: &mut Cashflow| { &mut m.adj4_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj5_rate",
                    |m: &Cashflow| { &m.adj5_rate },
                    |m: &mut Cashflow| { &mut m.adj5_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj6_rate",
                    |m: &Cashflow| { &m.adj6_rate },
                    |m: &mut Cashflow| { &mut m.adj6_rate },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_interest_amount();
        self.clear_principal_amount();
        self.clear_date();
        self.clear_base_rate();
        self.clear_adj1_rate();
        self.clear_adj2_rate();
        self.clear_adj3_rate();
        self.clear_adj4_rate();
        self.clear_adj5_rate();
        self.clear_adj6_rate();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub ftp_runid: i64,
    pub from_date: i64,
    pub to_date: i64,
    pub account_number: ::std::string::String,
    pub currency: ::std::string::String,
    pub value_date: i64,
    pub maturity_date: i64,
    pub lst_rep_date: i64,
    pub nxt_rep_date: i64,
    pub avg_balance: f64,
    pub outstanding_bal: f64,
    pub int_rate: f64,
    pub int_amt: f64,
    pub total_ftp_rate: f64,
    pub total_ftp_amt: f64,
    pub base_curve: i32,
    pub base_rate: f64,
    pub adj1_id: i32,
    pub adj1_rate: f64,
    pub adj2_id: i32,
    pub adj2_rate: f64,
    pub adj3_id: i32,
    pub adj3_rate: f64,
    pub adj4_id: i32,
    pub adj4_rate: f64,
    pub adj5_id: i32,
    pub adj5_rate: f64,
    pub adj6_id: i32,
    pub adj6_rate: f64,
    pub fix_lock_spread: f64,
    pub var_lock_spread: f64,
    pub total_lock_spread: f64,
    pub method: i32,
    pub rate_flag: ::std::string::String,
    pub gl: ::std::string::String,
    pub product_code: ::std::string::String,
    pub cust_id: ::std::string::String,
    pub branch: ::std::string::String,
    pub rm: ::std::string::String,
    pub dept: ::std::string::String,
    pub cust_name: ::std::string::String,
    pub alm_line: ::std::string::String,
    pub org_tenor: i64,
    pub rep_tenor: i64,
    pub orig_bal: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // int64 ftp_runid = 1;

    pub fn clear_ftp_runid(&mut self) {
        self.ftp_runid = 0;
    }

    // Param is passed by value, moved
    pub fn set_ftp_runid(&mut self, v: i64) {
        self.ftp_runid = v;
    }

    pub fn get_ftp_runid(&self) -> i64 {
        self.ftp_runid
    }

    // int64 from_date = 2;

    pub fn clear_from_date(&mut self) {
        self.from_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_from_date(&mut self, v: i64) {
        self.from_date = v;
    }

    pub fn get_from_date(&self) -> i64 {
        self.from_date
    }

    // int64 to_date = 3;

    pub fn clear_to_date(&mut self) {
        self.to_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_to_date(&mut self, v: i64) {
        self.to_date = v;
    }

    pub fn get_to_date(&self) -> i64 {
        self.to_date
    }

    // string account_number = 4;

    pub fn clear_account_number(&mut self) {
        self.account_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_number(&mut self, v: ::std::string::String) {
        self.account_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_number(&mut self) -> &mut ::std::string::String {
        &mut self.account_number
    }

    // Take field
    pub fn take_account_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_number, ::std::string::String::new())
    }

    pub fn get_account_number(&self) -> &str {
        &self.account_number
    }

    // string currency = 5;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // int64 value_date = 6;

    pub fn clear_value_date(&mut self) {
        self.value_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_date(&mut self, v: i64) {
        self.value_date = v;
    }

    pub fn get_value_date(&self) -> i64 {
        self.value_date
    }

    // int64 maturity_date = 7;

    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }

    // int64 lst_rep_date = 8;

    pub fn clear_lst_rep_date(&mut self) {
        self.lst_rep_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_lst_rep_date(&mut self, v: i64) {
        self.lst_rep_date = v;
    }

    pub fn get_lst_rep_date(&self) -> i64 {
        self.lst_rep_date
    }

    // int64 nxt_rep_date = 9;

    pub fn clear_nxt_rep_date(&mut self) {
        self.nxt_rep_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_rep_date(&mut self, v: i64) {
        self.nxt_rep_date = v;
    }

    pub fn get_nxt_rep_date(&self) -> i64 {
        self.nxt_rep_date
    }

    // double avg_balance = 10;

    pub fn clear_avg_balance(&mut self) {
        self.avg_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_avg_balance(&mut self, v: f64) {
        self.avg_balance = v;
    }

    pub fn get_avg_balance(&self) -> f64 {
        self.avg_balance
    }

    // double outstanding_bal = 11;

    pub fn clear_outstanding_bal(&mut self) {
        self.outstanding_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_outstanding_bal(&mut self, v: f64) {
        self.outstanding_bal = v;
    }

    pub fn get_outstanding_bal(&self) -> f64 {
        self.outstanding_bal
    }

    // double int_rate = 12;

    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }

    // double int_amt = 13;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double total_ftp_rate = 14;

    pub fn clear_total_ftp_rate(&mut self) {
        self.total_ftp_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_ftp_rate(&mut self, v: f64) {
        self.total_ftp_rate = v;
    }

    pub fn get_total_ftp_rate(&self) -> f64 {
        self.total_ftp_rate
    }

    // double total_ftp_amt = 15;

    pub fn clear_total_ftp_amt(&mut self) {
        self.total_ftp_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_ftp_amt(&mut self, v: f64) {
        self.total_ftp_amt = v;
    }

    pub fn get_total_ftp_amt(&self) -> f64 {
        self.total_ftp_amt
    }

    // int32 base_curve = 16;

    pub fn clear_base_curve(&mut self) {
        self.base_curve = 0;
    }

    // Param is passed by value, moved
    pub fn set_base_curve(&mut self, v: i32) {
        self.base_curve = v;
    }

    pub fn get_base_curve(&self) -> i32 {
        self.base_curve
    }

    // double base_rate = 17;

    pub fn clear_base_rate(&mut self) {
        self.base_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_rate(&mut self, v: f64) {
        self.base_rate = v;
    }

    pub fn get_base_rate(&self) -> f64 {
        self.base_rate
    }

    // int32 adj1_id = 18;

    pub fn clear_adj1_id(&mut self) {
        self.adj1_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_adj1_id(&mut self, v: i32) {
        self.adj1_id = v;
    }

    pub fn get_adj1_id(&self) -> i32 {
        self.adj1_id
    }

    // double adj1_rate = 19;

    pub fn clear_adj1_rate(&mut self) {
        self.adj1_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj1_rate(&mut self, v: f64) {
        self.adj1_rate = v;
    }

    pub fn get_adj1_rate(&self) -> f64 {
        self.adj1_rate
    }

    // int32 adj2_id = 20;

    pub fn clear_adj2_id(&mut self) {
        self.adj2_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_adj2_id(&mut self, v: i32) {
        self.adj2_id = v;
    }

    pub fn get_adj2_id(&self) -> i32 {
        self.adj2_id
    }

    // double adj2_rate = 21;

    pub fn clear_adj2_rate(&mut self) {
        self.adj2_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj2_rate(&mut self, v: f64) {
        self.adj2_rate = v;
    }

    pub fn get_adj2_rate(&self) -> f64 {
        self.adj2_rate
    }

    // int32 adj3_id = 22;

    pub fn clear_adj3_id(&mut self) {
        self.adj3_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_adj3_id(&mut self, v: i32) {
        self.adj3_id = v;
    }

    pub fn get_adj3_id(&self) -> i32 {
        self.adj3_id
    }

    // double adj3_rate = 23;

    pub fn clear_adj3_rate(&mut self) {
        self.adj3_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj3_rate(&mut self, v: f64) {
        self.adj3_rate = v;
    }

    pub fn get_adj3_rate(&self) -> f64 {
        self.adj3_rate
    }

    // int32 adj4_id = 24;

    pub fn clear_adj4_id(&mut self) {
        self.adj4_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_adj4_id(&mut self, v: i32) {
        self.adj4_id = v;
    }

    pub fn get_adj4_id(&self) -> i32 {
        self.adj4_id
    }

    // double adj4_rate = 25;

    pub fn clear_adj4_rate(&mut self) {
        self.adj4_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj4_rate(&mut self, v: f64) {
        self.adj4_rate = v;
    }

    pub fn get_adj4_rate(&self) -> f64 {
        self.adj4_rate
    }

    // int32 adj5_id = 26;

    pub fn clear_adj5_id(&mut self) {
        self.adj5_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_adj5_id(&mut self, v: i32) {
        self.adj5_id = v;
    }

    pub fn get_adj5_id(&self) -> i32 {
        self.adj5_id
    }

    // double adj5_rate = 27;

    pub fn clear_adj5_rate(&mut self) {
        self.adj5_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj5_rate(&mut self, v: f64) {
        self.adj5_rate = v;
    }

    pub fn get_adj5_rate(&self) -> f64 {
        self.adj5_rate
    }

    // int32 adj6_id = 28;

    pub fn clear_adj6_id(&mut self) {
        self.adj6_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_adj6_id(&mut self, v: i32) {
        self.adj6_id = v;
    }

    pub fn get_adj6_id(&self) -> i32 {
        self.adj6_id
    }

    // double adj6_rate = 29;

    pub fn clear_adj6_rate(&mut self) {
        self.adj6_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_adj6_rate(&mut self, v: f64) {
        self.adj6_rate = v;
    }

    pub fn get_adj6_rate(&self) -> f64 {
        self.adj6_rate
    }

    // double fix_lock_spread = 30;

    pub fn clear_fix_lock_spread(&mut self) {
        self.fix_lock_spread = 0.;
    }

    // Param is passed by value, moved
    pub fn set_fix_lock_spread(&mut self, v: f64) {
        self.fix_lock_spread = v;
    }

    pub fn get_fix_lock_spread(&self) -> f64 {
        self.fix_lock_spread
    }

    // double var_lock_spread = 31;

    pub fn clear_var_lock_spread(&mut self) {
        self.var_lock_spread = 0.;
    }

    // Param is passed by value, moved
    pub fn set_var_lock_spread(&mut self, v: f64) {
        self.var_lock_spread = v;
    }

    pub fn get_var_lock_spread(&self) -> f64 {
        self.var_lock_spread
    }

    // double total_lock_spread = 32;

    pub fn clear_total_lock_spread(&mut self) {
        self.total_lock_spread = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_lock_spread(&mut self, v: f64) {
        self.total_lock_spread = v;
    }

    pub fn get_total_lock_spread(&self) -> f64 {
        self.total_lock_spread
    }

    // int32 method = 33;

    pub fn clear_method(&mut self) {
        self.method = 0;
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: i32) {
        self.method = v;
    }

    pub fn get_method(&self) -> i32 {
        self.method
    }

    // string rate_flag = 34;

    pub fn clear_rate_flag(&mut self) {
        self.rate_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_flag(&mut self, v: ::std::string::String) {
        self.rate_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_flag(&mut self) -> &mut ::std::string::String {
        &mut self.rate_flag
    }

    // Take field
    pub fn take_rate_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_flag, ::std::string::String::new())
    }

    pub fn get_rate_flag(&self) -> &str {
        &self.rate_flag
    }

    // string gl = 35;

    pub fn clear_gl(&mut self) {
        self.gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl(&mut self, v: ::std::string::String) {
        self.gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl(&mut self) -> &mut ::std::string::String {
        &mut self.gl
    }

    // Take field
    pub fn take_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl, ::std::string::String::new())
    }

    pub fn get_gl(&self) -> &str {
        &self.gl
    }

    // string product_code = 36;

    pub fn clear_product_code(&mut self) {
        self.product_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_code(&mut self, v: ::std::string::String) {
        self.product_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_code(&mut self) -> &mut ::std::string::String {
        &mut self.product_code
    }

    // Take field
    pub fn take_product_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_code, ::std::string::String::new())
    }

    pub fn get_product_code(&self) -> &str {
        &self.product_code
    }

    // string cust_id = 37;

    pub fn clear_cust_id(&mut self) {
        self.cust_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: ::std::string::String) {
        self.cust_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_id
    }

    // Take field
    pub fn take_cust_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_id, ::std::string::String::new())
    }

    pub fn get_cust_id(&self) -> &str {
        &self.cust_id
    }

    // string branch = 38;

    pub fn clear_branch(&mut self) {
        self.branch.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch(&mut self, v: ::std::string::String) {
        self.branch = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch(&mut self) -> &mut ::std::string::String {
        &mut self.branch
    }

    // Take field
    pub fn take_branch(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch, ::std::string::String::new())
    }

    pub fn get_branch(&self) -> &str {
        &self.branch
    }

    // string rm = 39;

    pub fn clear_rm(&mut self) {
        self.rm.clear();
    }

    // Param is passed by value, moved
    pub fn set_rm(&mut self, v: ::std::string::String) {
        self.rm = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rm(&mut self) -> &mut ::std::string::String {
        &mut self.rm
    }

    // Take field
    pub fn take_rm(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rm, ::std::string::String::new())
    }

    pub fn get_rm(&self) -> &str {
        &self.rm
    }

    // string dept = 40;

    pub fn clear_dept(&mut self) {
        self.dept.clear();
    }

    // Param is passed by value, moved
    pub fn set_dept(&mut self, v: ::std::string::String) {
        self.dept = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dept(&mut self) -> &mut ::std::string::String {
        &mut self.dept
    }

    // Take field
    pub fn take_dept(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dept, ::std::string::String::new())
    }

    pub fn get_dept(&self) -> &str {
        &self.dept
    }

    // string cust_name = 41;

    pub fn clear_cust_name(&mut self) {
        self.cust_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_name(&mut self, v: ::std::string::String) {
        self.cust_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_name
    }

    // Take field
    pub fn take_cust_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_name, ::std::string::String::new())
    }

    pub fn get_cust_name(&self) -> &str {
        &self.cust_name
    }

    // string alm_line = 42;

    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }

    // int64 org_tenor = 43;

    pub fn clear_org_tenor(&mut self) {
        self.org_tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_org_tenor(&mut self, v: i64) {
        self.org_tenor = v;
    }

    pub fn get_org_tenor(&self) -> i64 {
        self.org_tenor
    }

    // int64 rep_tenor = 44;

    pub fn clear_rep_tenor(&mut self) {
        self.rep_tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_rep_tenor(&mut self, v: i64) {
        self.rep_tenor = v;
    }

    pub fn get_rep_tenor(&self) -> i64 {
        self.rep_tenor
    }

    // double orig_bal = 45;

    pub fn clear_orig_bal(&mut self) {
        self.orig_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_orig_bal(&mut self, v: f64) {
        self.orig_bal = v;
    }

    pub fn get_orig_bal(&self) -> f64 {
        self.orig_bal
    }

    // repeated .Cashflow cashflows = 46;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ftp_runid = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.from_date = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.to_date = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_number)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.value_date = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lst_rep_date = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_rep_date = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.avg_balance = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.outstanding_bal = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_ftp_rate = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_ftp_amt = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.base_curve = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.base_rate = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.adj1_id = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj1_rate = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.adj2_id = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj2_rate = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.adj3_id = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj3_rate = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.adj4_id = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj4_rate = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.adj5_id = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj5_rate = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.adj6_id = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.adj6_rate = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.fix_lock_spread = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.var_lock_spread = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_lock_spread = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.method = tmp;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_flag)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product_code)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_id)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch)?;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rm)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dept)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_name)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alm_line)?;
                },
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.org_tenor = tmp;
                },
                44 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rep_tenor = tmp;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.orig_bal = tmp;
                },
                46 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.ftp_runid != 0 {
            my_size += ::protobuf::rt::value_size(1, self.ftp_runid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.from_date != 0 {
            my_size += ::protobuf::rt::value_size(2, self.from_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.to_date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.to_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.account_number.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.account_number);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.currency);
        }
        if self.value_date != 0 {
            my_size += ::protobuf::rt::value_size(6, self.value_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(7, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lst_rep_date != 0 {
            my_size += ::protobuf::rt::value_size(8, self.lst_rep_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.nxt_rep_date != 0 {
            my_size += ::protobuf::rt::value_size(9, self.nxt_rep_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.avg_balance != 0. {
            my_size += 9;
        }
        if self.outstanding_bal != 0. {
            my_size += 9;
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.total_ftp_rate != 0. {
            my_size += 9;
        }
        if self.total_ftp_amt != 0. {
            my_size += 9;
        }
        if self.base_curve != 0 {
            my_size += ::protobuf::rt::value_size(16, self.base_curve, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.base_rate != 0. {
            my_size += 10;
        }
        if self.adj1_id != 0 {
            my_size += ::protobuf::rt::value_size(18, self.adj1_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.adj1_rate != 0. {
            my_size += 10;
        }
        if self.adj2_id != 0 {
            my_size += ::protobuf::rt::value_size(20, self.adj2_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.adj2_rate != 0. {
            my_size += 10;
        }
        if self.adj3_id != 0 {
            my_size += ::protobuf::rt::value_size(22, self.adj3_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.adj3_rate != 0. {
            my_size += 10;
        }
        if self.adj4_id != 0 {
            my_size += ::protobuf::rt::value_size(24, self.adj4_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.adj4_rate != 0. {
            my_size += 10;
        }
        if self.adj5_id != 0 {
            my_size += ::protobuf::rt::value_size(26, self.adj5_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.adj5_rate != 0. {
            my_size += 10;
        }
        if self.adj6_id != 0 {
            my_size += ::protobuf::rt::value_size(28, self.adj6_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.adj6_rate != 0. {
            my_size += 10;
        }
        if self.fix_lock_spread != 0. {
            my_size += 10;
        }
        if self.var_lock_spread != 0. {
            my_size += 10;
        }
        if self.total_lock_spread != 0. {
            my_size += 10;
        }
        if self.method != 0 {
            my_size += ::protobuf::rt::value_size(33, self.method, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.rate_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.rate_flag);
        }
        if !self.gl.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.gl);
        }
        if !self.product_code.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.product_code);
        }
        if !self.cust_id.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.cust_id);
        }
        if !self.branch.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.branch);
        }
        if !self.rm.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.rm);
        }
        if !self.dept.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.dept);
        }
        if !self.cust_name.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.cust_name);
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.alm_line);
        }
        if self.org_tenor != 0 {
            my_size += ::protobuf::rt::value_size(43, self.org_tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rep_tenor != 0 {
            my_size += ::protobuf::rt::value_size(44, self.rep_tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.orig_bal != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.ftp_runid != 0 {
            os.write_int64(1, self.ftp_runid)?;
        }
        if self.from_date != 0 {
            os.write_int64(2, self.from_date)?;
        }
        if self.to_date != 0 {
            os.write_int64(3, self.to_date)?;
        }
        if !self.account_number.is_empty() {
            os.write_string(4, &self.account_number)?;
        }
        if !self.currency.is_empty() {
            os.write_string(5, &self.currency)?;
        }
        if self.value_date != 0 {
            os.write_int64(6, self.value_date)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(7, self.maturity_date)?;
        }
        if self.lst_rep_date != 0 {
            os.write_int64(8, self.lst_rep_date)?;
        }
        if self.nxt_rep_date != 0 {
            os.write_int64(9, self.nxt_rep_date)?;
        }
        if self.avg_balance != 0. {
            os.write_double(10, self.avg_balance)?;
        }
        if self.outstanding_bal != 0. {
            os.write_double(11, self.outstanding_bal)?;
        }
        if self.int_rate != 0. {
            os.write_double(12, self.int_rate)?;
        }
        if self.int_amt != 0. {
            os.write_double(13, self.int_amt)?;
        }
        if self.total_ftp_rate != 0. {
            os.write_double(14, self.total_ftp_rate)?;
        }
        if self.total_ftp_amt != 0. {
            os.write_double(15, self.total_ftp_amt)?;
        }
        if self.base_curve != 0 {
            os.write_int32(16, self.base_curve)?;
        }
        if self.base_rate != 0. {
            os.write_double(17, self.base_rate)?;
        }
        if self.adj1_id != 0 {
            os.write_int32(18, self.adj1_id)?;
        }
        if self.adj1_rate != 0. {
            os.write_double(19, self.adj1_rate)?;
        }
        if self.adj2_id != 0 {
            os.write_int32(20, self.adj2_id)?;
        }
        if self.adj2_rate != 0. {
            os.write_double(21, self.adj2_rate)?;
        }
        if self.adj3_id != 0 {
            os.write_int32(22, self.adj3_id)?;
        }
        if self.adj3_rate != 0. {
            os.write_double(23, self.adj3_rate)?;
        }
        if self.adj4_id != 0 {
            os.write_int32(24, self.adj4_id)?;
        }
        if self.adj4_rate != 0. {
            os.write_double(25, self.adj4_rate)?;
        }
        if self.adj5_id != 0 {
            os.write_int32(26, self.adj5_id)?;
        }
        if self.adj5_rate != 0. {
            os.write_double(27, self.adj5_rate)?;
        }
        if self.adj6_id != 0 {
            os.write_int32(28, self.adj6_id)?;
        }
        if self.adj6_rate != 0. {
            os.write_double(29, self.adj6_rate)?;
        }
        if self.fix_lock_spread != 0. {
            os.write_double(30, self.fix_lock_spread)?;
        }
        if self.var_lock_spread != 0. {
            os.write_double(31, self.var_lock_spread)?;
        }
        if self.total_lock_spread != 0. {
            os.write_double(32, self.total_lock_spread)?;
        }
        if self.method != 0 {
            os.write_int32(33, self.method)?;
        }
        if !self.rate_flag.is_empty() {
            os.write_string(34, &self.rate_flag)?;
        }
        if !self.gl.is_empty() {
            os.write_string(35, &self.gl)?;
        }
        if !self.product_code.is_empty() {
            os.write_string(36, &self.product_code)?;
        }
        if !self.cust_id.is_empty() {
            os.write_string(37, &self.cust_id)?;
        }
        if !self.branch.is_empty() {
            os.write_string(38, &self.branch)?;
        }
        if !self.rm.is_empty() {
            os.write_string(39, &self.rm)?;
        }
        if !self.dept.is_empty() {
            os.write_string(40, &self.dept)?;
        }
        if !self.cust_name.is_empty() {
            os.write_string(41, &self.cust_name)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(42, &self.alm_line)?;
        }
        if self.org_tenor != 0 {
            os.write_int64(43, self.org_tenor)?;
        }
        if self.rep_tenor != 0 {
            os.write_int64(44, self.rep_tenor)?;
        }
        if self.orig_bal != 0. {
            os.write_double(45, self.orig_bal)?;
        }
        for v in &self.cashflows {
            os.write_tag(46, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "ftp_runid",
                    |m: &AccountWithCashflows| { &m.ftp_runid },
                    |m: &mut AccountWithCashflows| { &mut m.ftp_runid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "from_date",
                    |m: &AccountWithCashflows| { &m.from_date },
                    |m: &mut AccountWithCashflows| { &mut m.from_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "to_date",
                    |m: &AccountWithCashflows| { &m.to_date },
                    |m: &mut AccountWithCashflows| { &mut m.to_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "account_number",
                    |m: &AccountWithCashflows| { &m.account_number },
                    |m: &mut AccountWithCashflows| { &mut m.account_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &AccountWithCashflows| { &m.currency },
                    |m: &mut AccountWithCashflows| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "value_date",
                    |m: &AccountWithCashflows| { &m.value_date },
                    |m: &mut AccountWithCashflows| { &mut m.value_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "maturity_date",
                    |m: &AccountWithCashflows| { &m.maturity_date },
                    |m: &mut AccountWithCashflows| { &mut m.maturity_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "lst_rep_date",
                    |m: &AccountWithCashflows| { &m.lst_rep_date },
                    |m: &mut AccountWithCashflows| { &mut m.lst_rep_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "nxt_rep_date",
                    |m: &AccountWithCashflows| { &m.nxt_rep_date },
                    |m: &mut AccountWithCashflows| { &mut m.nxt_rep_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "avg_balance",
                    |m: &AccountWithCashflows| { &m.avg_balance },
                    |m: &mut AccountWithCashflows| { &mut m.avg_balance },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "outstanding_bal",
                    |m: &AccountWithCashflows| { &m.outstanding_bal },
                    |m: &mut AccountWithCashflows| { &mut m.outstanding_bal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rate",
                    |m: &AccountWithCashflows| { &m.int_rate },
                    |m: &mut AccountWithCashflows| { &mut m.int_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &AccountWithCashflows| { &m.int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_ftp_rate",
                    |m: &AccountWithCashflows| { &m.total_ftp_rate },
                    |m: &mut AccountWithCashflows| { &mut m.total_ftp_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_ftp_amt",
                    |m: &AccountWithCashflows| { &m.total_ftp_amt },
                    |m: &mut AccountWithCashflows| { &mut m.total_ftp_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "base_curve",
                    |m: &AccountWithCashflows| { &m.base_curve },
                    |m: &mut AccountWithCashflows| { &mut m.base_curve },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "base_rate",
                    |m: &AccountWithCashflows| { &m.base_rate },
                    |m: &mut AccountWithCashflows| { &mut m.base_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "adj1_id",
                    |m: &AccountWithCashflows| { &m.adj1_id },
                    |m: &mut AccountWithCashflows| { &mut m.adj1_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj1_rate",
                    |m: &AccountWithCashflows| { &m.adj1_rate },
                    |m: &mut AccountWithCashflows| { &mut m.adj1_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "adj2_id",
                    |m: &AccountWithCashflows| { &m.adj2_id },
                    |m: &mut AccountWithCashflows| { &mut m.adj2_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj2_rate",
                    |m: &AccountWithCashflows| { &m.adj2_rate },
                    |m: &mut AccountWithCashflows| { &mut m.adj2_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "adj3_id",
                    |m: &AccountWithCashflows| { &m.adj3_id },
                    |m: &mut AccountWithCashflows| { &mut m.adj3_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj3_rate",
                    |m: &AccountWithCashflows| { &m.adj3_rate },
                    |m: &mut AccountWithCashflows| { &mut m.adj3_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "adj4_id",
                    |m: &AccountWithCashflows| { &m.adj4_id },
                    |m: &mut AccountWithCashflows| { &mut m.adj4_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj4_rate",
                    |m: &AccountWithCashflows| { &m.adj4_rate },
                    |m: &mut AccountWithCashflows| { &mut m.adj4_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "adj5_id",
                    |m: &AccountWithCashflows| { &m.adj5_id },
                    |m: &mut AccountWithCashflows| { &mut m.adj5_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj5_rate",
                    |m: &AccountWithCashflows| { &m.adj5_rate },
                    |m: &mut AccountWithCashflows| { &mut m.adj5_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "adj6_id",
                    |m: &AccountWithCashflows| { &m.adj6_id },
                    |m: &mut AccountWithCashflows| { &mut m.adj6_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "adj6_rate",
                    |m: &AccountWithCashflows| { &m.adj6_rate },
                    |m: &mut AccountWithCashflows| { &mut m.adj6_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "fix_lock_spread",
                    |m: &AccountWithCashflows| { &m.fix_lock_spread },
                    |m: &mut AccountWithCashflows| { &mut m.fix_lock_spread },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "var_lock_spread",
                    |m: &AccountWithCashflows| { &m.var_lock_spread },
                    |m: &mut AccountWithCashflows| { &mut m.var_lock_spread },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_lock_spread",
                    |m: &AccountWithCashflows| { &m.total_lock_spread },
                    |m: &mut AccountWithCashflows| { &mut m.total_lock_spread },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "method",
                    |m: &AccountWithCashflows| { &m.method },
                    |m: &mut AccountWithCashflows| { &mut m.method },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rate_flag",
                    |m: &AccountWithCashflows| { &m.rate_flag },
                    |m: &mut AccountWithCashflows| { &mut m.rate_flag },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gl",
                    |m: &AccountWithCashflows| { &m.gl },
                    |m: &mut AccountWithCashflows| { &mut m.gl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "product_code",
                    |m: &AccountWithCashflows| { &m.product_code },
                    |m: &mut AccountWithCashflows| { &mut m.product_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_id",
                    |m: &AccountWithCashflows| { &m.cust_id },
                    |m: &mut AccountWithCashflows| { &mut m.cust_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "branch",
                    |m: &AccountWithCashflows| { &m.branch },
                    |m: &mut AccountWithCashflows| { &mut m.branch },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rm",
                    |m: &AccountWithCashflows| { &m.rm },
                    |m: &mut AccountWithCashflows| { &mut m.rm },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dept",
                    |m: &AccountWithCashflows| { &m.dept },
                    |m: &mut AccountWithCashflows| { &mut m.dept },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_name",
                    |m: &AccountWithCashflows| { &m.cust_name },
                    |m: &mut AccountWithCashflows| { &mut m.cust_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "alm_line",
                    |m: &AccountWithCashflows| { &m.alm_line },
                    |m: &mut AccountWithCashflows| { &mut m.alm_line },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "org_tenor",
                    |m: &AccountWithCashflows| { &m.org_tenor },
                    |m: &mut AccountWithCashflows| { &mut m.org_tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "rep_tenor",
                    |m: &AccountWithCashflows| { &m.rep_tenor },
                    |m: &mut AccountWithCashflows| { &mut m.rep_tenor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "orig_bal",
                    |m: &AccountWithCashflows| { &m.orig_bal },
                    |m: &mut AccountWithCashflows| { &mut m.orig_bal },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_ftp_runid();
        self.clear_from_date();
        self.clear_to_date();
        self.clear_account_number();
        self.clear_currency();
        self.clear_value_date();
        self.clear_maturity_date();
        self.clear_lst_rep_date();
        self.clear_nxt_rep_date();
        self.clear_avg_balance();
        self.clear_outstanding_bal();
        self.clear_int_rate();
        self.clear_int_amt();
        self.clear_total_ftp_rate();
        self.clear_total_ftp_amt();
        self.clear_base_curve();
        self.clear_base_rate();
        self.clear_adj1_id();
        self.clear_adj1_rate();
        self.clear_adj2_id();
        self.clear_adj2_rate();
        self.clear_adj3_id();
        self.clear_adj3_rate();
        self.clear_adj4_id();
        self.clear_adj4_rate();
        self.clear_adj5_id();
        self.clear_adj5_rate();
        self.clear_adj6_id();
        self.clear_adj6_rate();
        self.clear_fix_lock_spread();
        self.clear_var_lock_spread();
        self.clear_total_lock_spread();
        self.clear_method();
        self.clear_rate_flag();
        self.clear_gl();
        self.clear_product_code();
        self.clear_cust_id();
        self.clear_branch();
        self.clear_rm();
        self.clear_dept();
        self.clear_cust_name();
        self.clear_alm_line();
        self.clear_org_tenor();
        self.clear_rep_tenor();
        self.clear_orig_bal();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10finn_stamp.proto\"\xbd\x02\n\x08Cashflow\x12'\n\x0finterest_amount\
    \x18\x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\
    \x02\x20\x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\
    \x03R\x04date\x12\x1b\n\tbase_rate\x18\x04\x20\x01(\x01R\x08baseRate\x12\
    \x1b\n\tadj1_rate\x18\x05\x20\x01(\x01R\x08adj1Rate\x12\x1b\n\tadj2_rate\
    \x18\x06\x20\x01(\x01R\x08adj2Rate\x12\x1b\n\tadj3_rate\x18\x07\x20\x01(\
    \x01R\x08adj3Rate\x12\x1b\n\tadj4_rate\x18\x08\x20\x01(\x01R\x08adj4Rate\
    \x12\x1b\n\tadj5_rate\x18\t\x20\x01(\x01R\x08adj5Rate\x12\x1b\n\tadj6_ra\
    te\x18\n\x20\x01(\x01R\x08adj6Rate\"\xeb\n\n\x14AccountWithCashflows\x12\
    \x1b\n\tftp_runid\x18\x01\x20\x01(\x03R\x08ftpRunid\x12\x1b\n\tfrom_date\
    \x18\x02\x20\x01(\x03R\x08fromDate\x12\x17\n\x07to_date\x18\x03\x20\x01(\
    \x03R\x06toDate\x12%\n\x0eaccount_number\x18\x04\x20\x01(\tR\raccountNum\
    ber\x12\x1a\n\x08currency\x18\x05\x20\x01(\tR\x08currency\x12\x1d\n\nval\
    ue_date\x18\x06\x20\x01(\x03R\tvalueDate\x12#\n\rmaturity_date\x18\x07\
    \x20\x01(\x03R\x0cmaturityDate\x12\x20\n\x0clst_rep_date\x18\x08\x20\x01\
    (\x03R\nlstRepDate\x12\x20\n\x0cnxt_rep_date\x18\t\x20\x01(\x03R\nnxtRep\
    Date\x12\x1f\n\x0bavg_balance\x18\n\x20\x01(\x01R\navgBalance\x12'\n\x0f\
    outstanding_bal\x18\x0b\x20\x01(\x01R\x0eoutstandingBal\x12\x19\n\x08int\
    _rate\x18\x0c\x20\x01(\x01R\x07intRate\x12\x17\n\x07int_amt\x18\r\x20\
    \x01(\x01R\x06intAmt\x12$\n\x0etotal_ftp_rate\x18\x0e\x20\x01(\x01R\x0ct\
    otalFtpRate\x12\"\n\rtotal_ftp_amt\x18\x0f\x20\x01(\x01R\x0btotalFtpAmt\
    \x12\x1d\n\nbase_curve\x18\x10\x20\x01(\x05R\tbaseCurve\x12\x1b\n\tbase_\
    rate\x18\x11\x20\x01(\x01R\x08baseRate\x12\x17\n\x07adj1_id\x18\x12\x20\
    \x01(\x05R\x06adj1Id\x12\x1b\n\tadj1_rate\x18\x13\x20\x01(\x01R\x08adj1R\
    ate\x12\x17\n\x07adj2_id\x18\x14\x20\x01(\x05R\x06adj2Id\x12\x1b\n\tadj2\
    _rate\x18\x15\x20\x01(\x01R\x08adj2Rate\x12\x17\n\x07adj3_id\x18\x16\x20\
    \x01(\x05R\x06adj3Id\x12\x1b\n\tadj3_rate\x18\x17\x20\x01(\x01R\x08adj3R\
    ate\x12\x17\n\x07adj4_id\x18\x18\x20\x01(\x05R\x06adj4Id\x12\x1b\n\tadj4\
    _rate\x18\x19\x20\x01(\x01R\x08adj4Rate\x12\x17\n\x07adj5_id\x18\x1a\x20\
    \x01(\x05R\x06adj5Id\x12\x1b\n\tadj5_rate\x18\x1b\x20\x01(\x01R\x08adj5R\
    ate\x12\x17\n\x07adj6_id\x18\x1c\x20\x01(\x05R\x06adj6Id\x12\x1b\n\tadj6\
    _rate\x18\x1d\x20\x01(\x01R\x08adj6Rate\x12&\n\x0ffix_lock_spread\x18\
    \x1e\x20\x01(\x01R\rfixLockSpread\x12&\n\x0fvar_lock_spread\x18\x1f\x20\
    \x01(\x01R\rvarLockSpread\x12*\n\x11total_lock_spread\x18\x20\x20\x01(\
    \x01R\x0ftotalLockSpread\x12\x16\n\x06method\x18!\x20\x01(\x05R\x06metho\
    d\x12\x1b\n\trate_flag\x18\"\x20\x01(\tR\x08rateFlag\x12\x0e\n\x02gl\x18\
    #\x20\x01(\tR\x02gl\x12!\n\x0cproduct_code\x18$\x20\x01(\tR\x0bproductCo\
    de\x12\x17\n\x07cust_id\x18%\x20\x01(\tR\x06custId\x12\x16\n\x06branch\
    \x18&\x20\x01(\tR\x06branch\x12\x0e\n\x02rm\x18'\x20\x01(\tR\x02rm\x12\
    \x12\n\x04dept\x18(\x20\x01(\tR\x04dept\x12\x1b\n\tcust_name\x18)\x20\
    \x01(\tR\x08custName\x12\x19\n\x08alm_line\x18*\x20\x01(\tR\x07almLine\
    \x12\x1b\n\torg_tenor\x18+\x20\x01(\x03R\x08orgTenor\x12\x1b\n\trep_teno\
    r\x18,\x20\x01(\x03R\x08repTenor\x12\x19\n\x08orig_bal\x18-\x20\x01(\x01\
    R\x07origBal\x12'\n\tcashflows\x18.\x20\x03(\x0b2\t.CashflowR\tcashflows\
    b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
