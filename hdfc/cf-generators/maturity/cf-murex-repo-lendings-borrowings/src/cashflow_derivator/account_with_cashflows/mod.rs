// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double prin_amt = 2;

    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_int_amt();
        self.clear_prin_amt();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub deal_no: ::std::string::String,
    pub acc_open_dt: i64,
    pub nature: ::std::string::String,
    pub deal_stat: ::std::string::String,
    pub deal_type: ::std::string::String,
    pub slr_typ: ::std::string::String,
    pub security: ::std::string::String,
    pub category: ::std::string::String,
    pub sub_category: ::std::string::String,
    pub desk: ::std::string::String,
    pub portfolio: ::std::string::String,
    pub accounting_section: ::std::string::String,
    pub counterparty: ::std::string::String,
    pub counterparty_full_name: ::std::string::String,
    pub currency: ::std::string::String,
    pub repo_rate: f64,
    pub ytm: f64,
    pub value_dt: i64,
    pub price: f64,
    pub settle_amt_1st_leg: f64,
    pub accrued_interest: f64,
    pub repo_int: f64,
    pub settle_amt_2nd_leg: f64,
    pub entity: ::std::string::String,
    pub bank_non_bank: ::std::string::String,
    pub air_aip: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string deal_no = 1;

    pub fn clear_deal_no(&mut self) {
        self.deal_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_no(&mut self, v: ::std::string::String) {
        self.deal_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_no(&mut self) -> &mut ::std::string::String {
        &mut self.deal_no
    }

    // Take field
    pub fn take_deal_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_no, ::std::string::String::new())
    }

    pub fn get_deal_no(&self) -> &str {
        &self.deal_no
    }

    // int64 acc_open_dt = 2;

    pub fn clear_acc_open_dt(&mut self) {
        self.acc_open_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_acc_open_dt(&mut self, v: i64) {
        self.acc_open_dt = v;
    }

    pub fn get_acc_open_dt(&self) -> i64 {
        self.acc_open_dt
    }

    // string nature = 3;

    pub fn clear_nature(&mut self) {
        self.nature.clear();
    }

    // Param is passed by value, moved
    pub fn set_nature(&mut self, v: ::std::string::String) {
        self.nature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nature(&mut self) -> &mut ::std::string::String {
        &mut self.nature
    }

    // Take field
    pub fn take_nature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nature, ::std::string::String::new())
    }

    pub fn get_nature(&self) -> &str {
        &self.nature
    }

    // string deal_stat = 4;

    pub fn clear_deal_stat(&mut self) {
        self.deal_stat.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_stat(&mut self, v: ::std::string::String) {
        self.deal_stat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_stat(&mut self) -> &mut ::std::string::String {
        &mut self.deal_stat
    }

    // Take field
    pub fn take_deal_stat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_stat, ::std::string::String::new())
    }

    pub fn get_deal_stat(&self) -> &str {
        &self.deal_stat
    }

    // string deal_type = 5;

    pub fn clear_deal_type(&mut self) {
        self.deal_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_type(&mut self, v: ::std::string::String) {
        self.deal_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_type(&mut self) -> &mut ::std::string::String {
        &mut self.deal_type
    }

    // Take field
    pub fn take_deal_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_type, ::std::string::String::new())
    }

    pub fn get_deal_type(&self) -> &str {
        &self.deal_type
    }

    // string slr_typ = 6;

    pub fn clear_slr_typ(&mut self) {
        self.slr_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_slr_typ(&mut self, v: ::std::string::String) {
        self.slr_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slr_typ(&mut self) -> &mut ::std::string::String {
        &mut self.slr_typ
    }

    // Take field
    pub fn take_slr_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.slr_typ, ::std::string::String::new())
    }

    pub fn get_slr_typ(&self) -> &str {
        &self.slr_typ
    }

    // string security = 7;

    pub fn clear_security(&mut self) {
        self.security.clear();
    }

    // Param is passed by value, moved
    pub fn set_security(&mut self, v: ::std::string::String) {
        self.security = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_security(&mut self) -> &mut ::std::string::String {
        &mut self.security
    }

    // Take field
    pub fn take_security(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.security, ::std::string::String::new())
    }

    pub fn get_security(&self) -> &str {
        &self.security
    }

    // string category = 8;

    pub fn clear_category(&mut self) {
        self.category.clear();
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        &mut self.category
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category, ::std::string::String::new())
    }

    pub fn get_category(&self) -> &str {
        &self.category
    }

    // string sub_category = 9;

    pub fn clear_sub_category(&mut self) {
        self.sub_category.clear();
    }

    // Param is passed by value, moved
    pub fn set_sub_category(&mut self, v: ::std::string::String) {
        self.sub_category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sub_category(&mut self) -> &mut ::std::string::String {
        &mut self.sub_category
    }

    // Take field
    pub fn take_sub_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sub_category, ::std::string::String::new())
    }

    pub fn get_sub_category(&self) -> &str {
        &self.sub_category
    }

    // string desk = 10;

    pub fn clear_desk(&mut self) {
        self.desk.clear();
    }

    // Param is passed by value, moved
    pub fn set_desk(&mut self, v: ::std::string::String) {
        self.desk = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_desk(&mut self) -> &mut ::std::string::String {
        &mut self.desk
    }

    // Take field
    pub fn take_desk(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.desk, ::std::string::String::new())
    }

    pub fn get_desk(&self) -> &str {
        &self.desk
    }

    // string portfolio = 11;

    pub fn clear_portfolio(&mut self) {
        self.portfolio.clear();
    }

    // Param is passed by value, moved
    pub fn set_portfolio(&mut self, v: ::std::string::String) {
        self.portfolio = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_portfolio(&mut self) -> &mut ::std::string::String {
        &mut self.portfolio
    }

    // Take field
    pub fn take_portfolio(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.portfolio, ::std::string::String::new())
    }

    pub fn get_portfolio(&self) -> &str {
        &self.portfolio
    }

    // string accounting_section = 12;

    pub fn clear_accounting_section(&mut self) {
        self.accounting_section.clear();
    }

    // Param is passed by value, moved
    pub fn set_accounting_section(&mut self, v: ::std::string::String) {
        self.accounting_section = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accounting_section(&mut self) -> &mut ::std::string::String {
        &mut self.accounting_section
    }

    // Take field
    pub fn take_accounting_section(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.accounting_section, ::std::string::String::new())
    }

    pub fn get_accounting_section(&self) -> &str {
        &self.accounting_section
    }

    // string counterparty = 13;

    pub fn clear_counterparty(&mut self) {
        self.counterparty.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterparty(&mut self, v: ::std::string::String) {
        self.counterparty = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty(&mut self) -> &mut ::std::string::String {
        &mut self.counterparty
    }

    // Take field
    pub fn take_counterparty(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterparty, ::std::string::String::new())
    }

    pub fn get_counterparty(&self) -> &str {
        &self.counterparty
    }

    // string counterparty_full_name = 14;

    pub fn clear_counterparty_full_name(&mut self) {
        self.counterparty_full_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterparty_full_name(&mut self, v: ::std::string::String) {
        self.counterparty_full_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty_full_name(&mut self) -> &mut ::std::string::String {
        &mut self.counterparty_full_name
    }

    // Take field
    pub fn take_counterparty_full_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterparty_full_name, ::std::string::String::new())
    }

    pub fn get_counterparty_full_name(&self) -> &str {
        &self.counterparty_full_name
    }

    // string currency = 15;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // double repo_rate = 16;

    pub fn clear_repo_rate(&mut self) {
        self.repo_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_repo_rate(&mut self, v: f64) {
        self.repo_rate = v;
    }

    pub fn get_repo_rate(&self) -> f64 {
        self.repo_rate
    }

    // double ytm = 17;

    pub fn clear_ytm(&mut self) {
        self.ytm = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ytm(&mut self, v: f64) {
        self.ytm = v;
    }

    pub fn get_ytm(&self) -> f64 {
        self.ytm
    }

    // int64 value_dt = 18;

    pub fn clear_value_dt(&mut self) {
        self.value_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_dt(&mut self, v: i64) {
        self.value_dt = v;
    }

    pub fn get_value_dt(&self) -> i64 {
        self.value_dt
    }

    // double price = 19;

    pub fn clear_price(&mut self) {
        self.price = 0.;
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: f64) {
        self.price = v;
    }

    pub fn get_price(&self) -> f64 {
        self.price
    }

    // double settle_amt_1st_leg = 20;

    pub fn clear_settle_amt_1st_leg(&mut self) {
        self.settle_amt_1st_leg = 0.;
    }

    // Param is passed by value, moved
    pub fn set_settle_amt_1st_leg(&mut self, v: f64) {
        self.settle_amt_1st_leg = v;
    }

    pub fn get_settle_amt_1st_leg(&self) -> f64 {
        self.settle_amt_1st_leg
    }

    // double accrued_interest = 21;

    pub fn clear_accrued_interest(&mut self) {
        self.accrued_interest = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accrued_interest(&mut self, v: f64) {
        self.accrued_interest = v;
    }

    pub fn get_accrued_interest(&self) -> f64 {
        self.accrued_interest
    }

    // double repo_int = 22;

    pub fn clear_repo_int(&mut self) {
        self.repo_int = 0.;
    }

    // Param is passed by value, moved
    pub fn set_repo_int(&mut self, v: f64) {
        self.repo_int = v;
    }

    pub fn get_repo_int(&self) -> f64 {
        self.repo_int
    }

    // double settle_amt_2nd_leg = 23;

    pub fn clear_settle_amt_2nd_leg(&mut self) {
        self.settle_amt_2nd_leg = 0.;
    }

    // Param is passed by value, moved
    pub fn set_settle_amt_2nd_leg(&mut self, v: f64) {
        self.settle_amt_2nd_leg = v;
    }

    pub fn get_settle_amt_2nd_leg(&self) -> f64 {
        self.settle_amt_2nd_leg
    }

    // string entity = 24;

    pub fn clear_entity(&mut self) {
        self.entity.clear();
    }

    // Param is passed by value, moved
    pub fn set_entity(&mut self, v: ::std::string::String) {
        self.entity = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entity(&mut self) -> &mut ::std::string::String {
        &mut self.entity
    }

    // Take field
    pub fn take_entity(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.entity, ::std::string::String::new())
    }

    pub fn get_entity(&self) -> &str {
        &self.entity
    }

    // string bank_non_bank = 25;

    pub fn clear_bank_non_bank(&mut self) {
        self.bank_non_bank.clear();
    }

    // Param is passed by value, moved
    pub fn set_bank_non_bank(&mut self, v: ::std::string::String) {
        self.bank_non_bank = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bank_non_bank(&mut self) -> &mut ::std::string::String {
        &mut self.bank_non_bank
    }

    // Take field
    pub fn take_bank_non_bank(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bank_non_bank, ::std::string::String::new())
    }

    pub fn get_bank_non_bank(&self) -> &str {
        &self.bank_non_bank
    }

    // double air_aip = 26;

    pub fn clear_air_aip(&mut self) {
        self.air_aip = 0.;
    }

    // Param is passed by value, moved
    pub fn set_air_aip(&mut self, v: f64) {
        self.air_aip = v;
    }

    pub fn get_air_aip(&self) -> f64 {
        self.air_aip
    }

    // repeated .Cashflow cashflows = 27;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_no)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acc_open_dt = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nature)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_stat)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_type)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.slr_typ)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.security)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sub_category)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.desk)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.portfolio)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.accounting_section)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterparty)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterparty_full_name)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.repo_rate = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ytm = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.value_dt = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.price = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.settle_amt_1st_leg = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.accrued_interest = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.repo_int = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.settle_amt_2nd_leg = tmp;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.entity)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bank_non_bank)?;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.air_aip = tmp;
                },
                27 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.deal_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.deal_no);
        }
        if self.acc_open_dt != 0 {
            my_size += ::protobuf::rt::value_size(2, self.acc_open_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.nature.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.nature);
        }
        if !self.deal_stat.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.deal_stat);
        }
        if !self.deal_type.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.deal_type);
        }
        if !self.slr_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.slr_typ);
        }
        if !self.security.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.security);
        }
        if !self.category.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.category);
        }
        if !self.sub_category.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.sub_category);
        }
        if !self.desk.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.desk);
        }
        if !self.portfolio.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.portfolio);
        }
        if !self.accounting_section.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.accounting_section);
        }
        if !self.counterparty.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.counterparty);
        }
        if !self.counterparty_full_name.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.counterparty_full_name);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.currency);
        }
        if self.repo_rate != 0. {
            my_size += 10;
        }
        if self.ytm != 0. {
            my_size += 10;
        }
        if self.value_dt != 0 {
            my_size += ::protobuf::rt::value_size(18, self.value_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.price != 0. {
            my_size += 10;
        }
        if self.settle_amt_1st_leg != 0. {
            my_size += 10;
        }
        if self.accrued_interest != 0. {
            my_size += 10;
        }
        if self.repo_int != 0. {
            my_size += 10;
        }
        if self.settle_amt_2nd_leg != 0. {
            my_size += 10;
        }
        if !self.entity.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.entity);
        }
        if !self.bank_non_bank.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.bank_non_bank);
        }
        if self.air_aip != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.deal_no.is_empty() {
            os.write_string(1, &self.deal_no)?;
        }
        if self.acc_open_dt != 0 {
            os.write_int64(2, self.acc_open_dt)?;
        }
        if !self.nature.is_empty() {
            os.write_string(3, &self.nature)?;
        }
        if !self.deal_stat.is_empty() {
            os.write_string(4, &self.deal_stat)?;
        }
        if !self.deal_type.is_empty() {
            os.write_string(5, &self.deal_type)?;
        }
        if !self.slr_typ.is_empty() {
            os.write_string(6, &self.slr_typ)?;
        }
        if !self.security.is_empty() {
            os.write_string(7, &self.security)?;
        }
        if !self.category.is_empty() {
            os.write_string(8, &self.category)?;
        }
        if !self.sub_category.is_empty() {
            os.write_string(9, &self.sub_category)?;
        }
        if !self.desk.is_empty() {
            os.write_string(10, &self.desk)?;
        }
        if !self.portfolio.is_empty() {
            os.write_string(11, &self.portfolio)?;
        }
        if !self.accounting_section.is_empty() {
            os.write_string(12, &self.accounting_section)?;
        }
        if !self.counterparty.is_empty() {
            os.write_string(13, &self.counterparty)?;
        }
        if !self.counterparty_full_name.is_empty() {
            os.write_string(14, &self.counterparty_full_name)?;
        }
        if !self.currency.is_empty() {
            os.write_string(15, &self.currency)?;
        }
        if self.repo_rate != 0. {
            os.write_double(16, self.repo_rate)?;
        }
        if self.ytm != 0. {
            os.write_double(17, self.ytm)?;
        }
        if self.value_dt != 0 {
            os.write_int64(18, self.value_dt)?;
        }
        if self.price != 0. {
            os.write_double(19, self.price)?;
        }
        if self.settle_amt_1st_leg != 0. {
            os.write_double(20, self.settle_amt_1st_leg)?;
        }
        if self.accrued_interest != 0. {
            os.write_double(21, self.accrued_interest)?;
        }
        if self.repo_int != 0. {
            os.write_double(22, self.repo_int)?;
        }
        if self.settle_amt_2nd_leg != 0. {
            os.write_double(23, self.settle_amt_2nd_leg)?;
        }
        if !self.entity.is_empty() {
            os.write_string(24, &self.entity)?;
        }
        if !self.bank_non_bank.is_empty() {
            os.write_string(25, &self.bank_non_bank)?;
        }
        if self.air_aip != 0. {
            os.write_double(26, self.air_aip)?;
        }
        for v in &self.cashflows {
            os.write_tag(27, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_no",
                    |m: &AccountWithCashflows| { &m.deal_no },
                    |m: &mut AccountWithCashflows| { &mut m.deal_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "acc_open_dt",
                    |m: &AccountWithCashflows| { &m.acc_open_dt },
                    |m: &mut AccountWithCashflows| { &mut m.acc_open_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "nature",
                    |m: &AccountWithCashflows| { &m.nature },
                    |m: &mut AccountWithCashflows| { &mut m.nature },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_stat",
                    |m: &AccountWithCashflows| { &m.deal_stat },
                    |m: &mut AccountWithCashflows| { &mut m.deal_stat },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_type",
                    |m: &AccountWithCashflows| { &m.deal_type },
                    |m: &mut AccountWithCashflows| { &mut m.deal_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "slr_typ",
                    |m: &AccountWithCashflows| { &m.slr_typ },
                    |m: &mut AccountWithCashflows| { &mut m.slr_typ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "security",
                    |m: &AccountWithCashflows| { &m.security },
                    |m: &mut AccountWithCashflows| { &mut m.security },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "category",
                    |m: &AccountWithCashflows| { &m.category },
                    |m: &mut AccountWithCashflows| { &mut m.category },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sub_category",
                    |m: &AccountWithCashflows| { &m.sub_category },
                    |m: &mut AccountWithCashflows| { &mut m.sub_category },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "desk",
                    |m: &AccountWithCashflows| { &m.desk },
                    |m: &mut AccountWithCashflows| { &mut m.desk },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "portfolio",
                    |m: &AccountWithCashflows| { &m.portfolio },
                    |m: &mut AccountWithCashflows| { &mut m.portfolio },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "accounting_section",
                    |m: &AccountWithCashflows| { &m.accounting_section },
                    |m: &mut AccountWithCashflows| { &mut m.accounting_section },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counterparty",
                    |m: &AccountWithCashflows| { &m.counterparty },
                    |m: &mut AccountWithCashflows| { &mut m.counterparty },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counterparty_full_name",
                    |m: &AccountWithCashflows| { &m.counterparty_full_name },
                    |m: &mut AccountWithCashflows| { &mut m.counterparty_full_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &AccountWithCashflows| { &m.currency },
                    |m: &mut AccountWithCashflows| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "repo_rate",
                    |m: &AccountWithCashflows| { &m.repo_rate },
                    |m: &mut AccountWithCashflows| { &mut m.repo_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ytm",
                    |m: &AccountWithCashflows| { &m.ytm },
                    |m: &mut AccountWithCashflows| { &mut m.ytm },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "value_dt",
                    |m: &AccountWithCashflows| { &m.value_dt },
                    |m: &mut AccountWithCashflows| { &mut m.value_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "price",
                    |m: &AccountWithCashflows| { &m.price },
                    |m: &mut AccountWithCashflows| { &mut m.price },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "settle_amt_1st_leg",
                    |m: &AccountWithCashflows| { &m.settle_amt_1st_leg },
                    |m: &mut AccountWithCashflows| { &mut m.settle_amt_1st_leg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "accrued_interest",
                    |m: &AccountWithCashflows| { &m.accrued_interest },
                    |m: &mut AccountWithCashflows| { &mut m.accrued_interest },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "repo_int",
                    |m: &AccountWithCashflows| { &m.repo_int },
                    |m: &mut AccountWithCashflows| { &mut m.repo_int },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "settle_amt_2nd_leg",
                    |m: &AccountWithCashflows| { &m.settle_amt_2nd_leg },
                    |m: &mut AccountWithCashflows| { &mut m.settle_amt_2nd_leg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "entity",
                    |m: &AccountWithCashflows| { &m.entity },
                    |m: &mut AccountWithCashflows| { &mut m.entity },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bank_non_bank",
                    |m: &AccountWithCashflows| { &m.bank_non_bank },
                    |m: &mut AccountWithCashflows| { &mut m.bank_non_bank },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "air_aip",
                    |m: &AccountWithCashflows| { &m.air_aip },
                    |m: &mut AccountWithCashflows| { &mut m.air_aip },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_deal_no();
        self.clear_acc_open_dt();
        self.clear_nature();
        self.clear_deal_stat();
        self.clear_deal_type();
        self.clear_slr_typ();
        self.clear_security();
        self.clear_category();
        self.clear_sub_category();
        self.clear_desk();
        self.clear_portfolio();
        self.clear_accounting_section();
        self.clear_counterparty();
        self.clear_counterparty_full_name();
        self.clear_currency();
        self.clear_repo_rate();
        self.clear_ytm();
        self.clear_value_dt();
        self.clear_price();
        self.clear_settle_amt_1st_leg();
        self.clear_accrued_interest();
        self.clear_repo_int();
        self.clear_settle_amt_2nd_leg();
        self.clear_entity();
        self.clear_bank_non_bank();
        self.clear_air_aip();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10murex_repo.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\
    \x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prin\
    Amt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xea\x06\n\x14Accou\
    ntWithCashflows\x12\x17\n\x07deal_no\x18\x01\x20\x01(\tR\x06dealNo\x12\
    \x1e\n\x0bacc_open_dt\x18\x02\x20\x01(\x03R\taccOpenDt\x12\x16\n\x06natu\
    re\x18\x03\x20\x01(\tR\x06nature\x12\x1b\n\tdeal_stat\x18\x04\x20\x01(\t\
    R\x08dealStat\x12\x1b\n\tdeal_type\x18\x05\x20\x01(\tR\x08dealType\x12\
    \x17\n\x07slr_typ\x18\x06\x20\x01(\tR\x06slrTyp\x12\x1a\n\x08security\
    \x18\x07\x20\x01(\tR\x08security\x12\x1a\n\x08category\x18\x08\x20\x01(\
    \tR\x08category\x12!\n\x0csub_category\x18\t\x20\x01(\tR\x0bsubCategory\
    \x12\x12\n\x04desk\x18\n\x20\x01(\tR\x04desk\x12\x1c\n\tportfolio\x18\
    \x0b\x20\x01(\tR\tportfolio\x12-\n\x12accounting_section\x18\x0c\x20\x01\
    (\tR\x11accountingSection\x12\"\n\x0ccounterparty\x18\r\x20\x01(\tR\x0cc\
    ounterparty\x124\n\x16counterparty_full_name\x18\x0e\x20\x01(\tR\x14coun\
    terpartyFullName\x12\x1a\n\x08currency\x18\x0f\x20\x01(\tR\x08currency\
    \x12\x1b\n\trepo_rate\x18\x10\x20\x01(\x01R\x08repoRate\x12\x10\n\x03ytm\
    \x18\x11\x20\x01(\x01R\x03ytm\x12\x19\n\x08value_dt\x18\x12\x20\x01(\x03\
    R\x07valueDt\x12\x14\n\x05price\x18\x13\x20\x01(\x01R\x05price\x12+\n\
    \x12settle_amt_1st_leg\x18\x14\x20\x01(\x01R\x0fsettleAmt1stLeg\x12)\n\
    \x10accrued_interest\x18\x15\x20\x01(\x01R\x0faccruedInterest\x12\x19\n\
    \x08repo_int\x18\x16\x20\x01(\x01R\x07repoInt\x12+\n\x12settle_amt_2nd_l\
    eg\x18\x17\x20\x01(\x01R\x0fsettleAmt2ndLeg\x12\x16\n\x06entity\x18\x18\
    \x20\x01(\tR\x06entity\x12\"\n\rbank_non_bank\x18\x19\x20\x01(\tR\x0bban\
    kNonBank\x12\x17\n\x07air_aip\x18\x1a\x20\x01(\x01R\x06airAip\x12'\n\tca\
    shflows\x18\x1b\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
