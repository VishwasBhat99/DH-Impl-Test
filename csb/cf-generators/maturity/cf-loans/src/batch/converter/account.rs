// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `csb_loans.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_amt",
                |m: &Cashflow| { &m.int_amt },
                |m: &mut Cashflow| { &mut m.int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "prin_amt",
                |m: &Cashflow| { &m.prin_amt },
                |m: &mut Cashflow| { &mut m.prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Account {
    // message fields
    pub acc_no: ::std::string::String,
    pub acnts_internal_acnum: ::std::string::String,
    pub acnts_brn_cd: i64,
    pub acnts_client_num: i64,
    pub ucic: i64,
    pub acnts_curr_cd: ::std::string::String,
    pub acnts_prod_cd: i64,
    pub gl_cd: i64,
    pub acnts_opening_dt: i64,
    pub bal: f64,
    pub bal_ccy: ::std::string::String,
    pub int_rt: f64,
    pub int_type: ::std::string::String,
    pub int_bench: ::std::string::String,
    pub int_spread: ::std::string::String,
    pub last_reset_dt: i64,
    pub next_reset_dt: i64,
    pub reset_no_of_months: i64,
    pub disbursal_amount: f64,
    pub last_emi_dt: i64,
    pub lm_exp: i64,
    pub lim: f64,
    pub lm_ccy: ::std::string::String,
    pub ext_rating_agency: ::std::string::String,
    pub ext_rating: ::std::string::String,
    pub int_rating: ::std::string::String,
    pub asset_cd: ::std::string::String,
    pub prov_amt: f64,
    pub prov_dt: i64,
    pub constitn: ::std::string::String,
    pub loan_type: ::std::string::String,
    pub def_amt: f64,
    pub def_dt: i64,
    pub last_paid_emi_dt: i64,
    pub w4b_cd: i64,
    pub balm_llg: ::std::string::String,
    pub care_llg: ::std::string::String,
    pub ba_llg: ::std::string::String,
    pub client_type: ::std::string::String,
    pub clients_name: ::std::string::String,
    pub clients_bsr_type_flg: ::std::string::String,
    pub clients_busdivn_code: ::std::string::String,
    pub clients_const_code: ::std::string::String,
    pub clients_pan_gir_num: ::std::string::String,
    pub clients_risk_categorization: ::std::string::String,
    pub clients_risk_cntry: ::std::string::String,
    pub clients_segment_code: ::std::string::String,
    pub corpcl_orgn_qualifier: ::std::string::String,
    pub corpcl_indus_code: ::std::string::String,
    pub corpcl_nature_of_bus1: ::std::string::String,
    pub corpcl_nature_of_bus2: ::std::string::String,
    pub corpcl_nature_of_bus3: ::std::string::String,
    pub corpcl_central_state_flg: ::std::string::String,
    pub corpcl_public_sector_flg: ::std::string::String,
    pub corpcl_primary_dlr_flg: ::std::string::String,
    pub corpcl_multilateral_bank: ::std::string::String,
    pub corpcl_connp_inv_num: ::std::string::String,
    pub corpcl_bc_gross_turnover: f64,
    pub npa_asset_cd: ::std::string::String,
    pub npa_dt: i64,
    pub acc_bal: f64,
    pub pwo: f64,
    pub ho_bal: f64,
    pub npa_prov: f64,
    pub ho_prov: f64,
    pub suspence_bal: f64,
    pub suspence_writeoff: f64,
    pub ho_suspence: f64,
    pub claim: f64,
    pub primary: f64,
    pub col: f64,
    pub priority: ::std::string::String,
    pub main_sector: ::std::string::String,
    pub industry: ::std::string::String,
    pub npa_amt: f64,
    pub schedules: ::std::string::String,
    pub sanc_dt: i64,
    pub occp_cd: ::std::string::String,
    pub sens_sec: ::std::string::String,
    pub prior_subtype: ::std::string::String,
    pub restruct_flag: ::std::string::String,
    pub restruct_dt: i64,
    pub mor_prd: ::std::string::String,
    pub rating: ::std::string::String,
    pub consitin: ::std::string::String,
    pub pan: ::std::string::String,
    pub limit_amt: f64,
    pub gross_adv: f64,
    pub exp_amt: f64,
    pub unvail_amt: f64,
    pub gold_gram: f64,
    pub fund_flag: ::std::string::String,
    pub ltv_value: f64,
    pub pt_i64_1: i64,
    pub pt_i64_2: i64,
    pub pt_i64_3: i64,
    pub pt_i64_4: i64,
    pub pt_i64_5: i64,
    pub pt_f64_1: f64,
    pub pt_f64_2: f64,
    pub pt_f64_3: f64,
    pub pt_f64_4: f64,
    pub pt_f64_5: f64,
    pub pt_str_1: ::std::string::String,
    pub pt_str_2: ::std::string::String,
    pub pt_str_3: ::std::string::String,
    pub pt_str_4: ::std::string::String,
    pub pt_str_5: ::std::string::String,
    pub org_code: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Account {
    fn default() -> &'a Account {
        <Account as ::protobuf::Message>::default_instance()
    }
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    // string acc_no = 1;


    pub fn get_acc_no(&self) -> &str {
        &self.acc_no
    }
    pub fn clear_acc_no(&mut self) {
        self.acc_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_no(&mut self, v: ::std::string::String) {
        self.acc_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_no(&mut self) -> &mut ::std::string::String {
        &mut self.acc_no
    }

    // Take field
    pub fn take_acc_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_no, ::std::string::String::new())
    }

    // string acnts_internal_acnum = 2;


    pub fn get_acnts_internal_acnum(&self) -> &str {
        &self.acnts_internal_acnum
    }
    pub fn clear_acnts_internal_acnum(&mut self) {
        self.acnts_internal_acnum.clear();
    }

    // Param is passed by value, moved
    pub fn set_acnts_internal_acnum(&mut self, v: ::std::string::String) {
        self.acnts_internal_acnum = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acnts_internal_acnum(&mut self) -> &mut ::std::string::String {
        &mut self.acnts_internal_acnum
    }

    // Take field
    pub fn take_acnts_internal_acnum(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acnts_internal_acnum, ::std::string::String::new())
    }

    // int64 acnts_brn_cd = 3;


    pub fn get_acnts_brn_cd(&self) -> i64 {
        self.acnts_brn_cd
    }
    pub fn clear_acnts_brn_cd(&mut self) {
        self.acnts_brn_cd = 0;
    }

    // Param is passed by value, moved
    pub fn set_acnts_brn_cd(&mut self, v: i64) {
        self.acnts_brn_cd = v;
    }

    // int64 acnts_client_num = 4;


    pub fn get_acnts_client_num(&self) -> i64 {
        self.acnts_client_num
    }
    pub fn clear_acnts_client_num(&mut self) {
        self.acnts_client_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_acnts_client_num(&mut self, v: i64) {
        self.acnts_client_num = v;
    }

    // int64 ucic = 5;


    pub fn get_ucic(&self) -> i64 {
        self.ucic
    }
    pub fn clear_ucic(&mut self) {
        self.ucic = 0;
    }

    // Param is passed by value, moved
    pub fn set_ucic(&mut self, v: i64) {
        self.ucic = v;
    }

    // string acnts_curr_cd = 6;


    pub fn get_acnts_curr_cd(&self) -> &str {
        &self.acnts_curr_cd
    }
    pub fn clear_acnts_curr_cd(&mut self) {
        self.acnts_curr_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_acnts_curr_cd(&mut self, v: ::std::string::String) {
        self.acnts_curr_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acnts_curr_cd(&mut self) -> &mut ::std::string::String {
        &mut self.acnts_curr_cd
    }

    // Take field
    pub fn take_acnts_curr_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acnts_curr_cd, ::std::string::String::new())
    }

    // int64 acnts_prod_cd = 7;


    pub fn get_acnts_prod_cd(&self) -> i64 {
        self.acnts_prod_cd
    }
    pub fn clear_acnts_prod_cd(&mut self) {
        self.acnts_prod_cd = 0;
    }

    // Param is passed by value, moved
    pub fn set_acnts_prod_cd(&mut self, v: i64) {
        self.acnts_prod_cd = v;
    }

    // int64 gl_cd = 8;


    pub fn get_gl_cd(&self) -> i64 {
        self.gl_cd
    }
    pub fn clear_gl_cd(&mut self) {
        self.gl_cd = 0;
    }

    // Param is passed by value, moved
    pub fn set_gl_cd(&mut self, v: i64) {
        self.gl_cd = v;
    }

    // int64 acnts_opening_dt = 9;


    pub fn get_acnts_opening_dt(&self) -> i64 {
        self.acnts_opening_dt
    }
    pub fn clear_acnts_opening_dt(&mut self) {
        self.acnts_opening_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_acnts_opening_dt(&mut self, v: i64) {
        self.acnts_opening_dt = v;
    }

    // double bal = 10;


    pub fn get_bal(&self) -> f64 {
        self.bal
    }
    pub fn clear_bal(&mut self) {
        self.bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bal(&mut self, v: f64) {
        self.bal = v;
    }

    // string bal_ccy = 11;


    pub fn get_bal_ccy(&self) -> &str {
        &self.bal_ccy
    }
    pub fn clear_bal_ccy(&mut self) {
        self.bal_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_bal_ccy(&mut self, v: ::std::string::String) {
        self.bal_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bal_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.bal_ccy
    }

    // Take field
    pub fn take_bal_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bal_ccy, ::std::string::String::new())
    }

    // double int_rt = 12;


    pub fn get_int_rt(&self) -> f64 {
        self.int_rt
    }
    pub fn clear_int_rt(&mut self) {
        self.int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rt(&mut self, v: f64) {
        self.int_rt = v;
    }

    // string int_type = 13;


    pub fn get_int_type(&self) -> &str {
        &self.int_type
    }
    pub fn clear_int_type(&mut self) {
        self.int_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_type(&mut self, v: ::std::string::String) {
        self.int_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_type(&mut self) -> &mut ::std::string::String {
        &mut self.int_type
    }

    // Take field
    pub fn take_int_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_type, ::std::string::String::new())
    }

    // string int_bench = 14;


    pub fn get_int_bench(&self) -> &str {
        &self.int_bench
    }
    pub fn clear_int_bench(&mut self) {
        self.int_bench.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_bench(&mut self, v: ::std::string::String) {
        self.int_bench = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_bench(&mut self) -> &mut ::std::string::String {
        &mut self.int_bench
    }

    // Take field
    pub fn take_int_bench(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_bench, ::std::string::String::new())
    }

    // string int_spread = 15;


    pub fn get_int_spread(&self) -> &str {
        &self.int_spread
    }
    pub fn clear_int_spread(&mut self) {
        self.int_spread.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_spread(&mut self, v: ::std::string::String) {
        self.int_spread = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_spread(&mut self) -> &mut ::std::string::String {
        &mut self.int_spread
    }

    // Take field
    pub fn take_int_spread(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_spread, ::std::string::String::new())
    }

    // int64 last_reset_dt = 16;


    pub fn get_last_reset_dt(&self) -> i64 {
        self.last_reset_dt
    }
    pub fn clear_last_reset_dt(&mut self) {
        self.last_reset_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_reset_dt(&mut self, v: i64) {
        self.last_reset_dt = v;
    }

    // int64 next_reset_dt = 17;


    pub fn get_next_reset_dt(&self) -> i64 {
        self.next_reset_dt
    }
    pub fn clear_next_reset_dt(&mut self) {
        self.next_reset_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_reset_dt(&mut self, v: i64) {
        self.next_reset_dt = v;
    }

    // int64 reset_no_of_months = 18;


    pub fn get_reset_no_of_months(&self) -> i64 {
        self.reset_no_of_months
    }
    pub fn clear_reset_no_of_months(&mut self) {
        self.reset_no_of_months = 0;
    }

    // Param is passed by value, moved
    pub fn set_reset_no_of_months(&mut self, v: i64) {
        self.reset_no_of_months = v;
    }

    // double disbursal_amount = 19;


    pub fn get_disbursal_amount(&self) -> f64 {
        self.disbursal_amount
    }
    pub fn clear_disbursal_amount(&mut self) {
        self.disbursal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_disbursal_amount(&mut self, v: f64) {
        self.disbursal_amount = v;
    }

    // int64 last_emi_dt = 20;


    pub fn get_last_emi_dt(&self) -> i64 {
        self.last_emi_dt
    }
    pub fn clear_last_emi_dt(&mut self) {
        self.last_emi_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_emi_dt(&mut self, v: i64) {
        self.last_emi_dt = v;
    }

    // int64 lm_exp = 21;


    pub fn get_lm_exp(&self) -> i64 {
        self.lm_exp
    }
    pub fn clear_lm_exp(&mut self) {
        self.lm_exp = 0;
    }

    // Param is passed by value, moved
    pub fn set_lm_exp(&mut self, v: i64) {
        self.lm_exp = v;
    }

    // double lim = 22;


    pub fn get_lim(&self) -> f64 {
        self.lim
    }
    pub fn clear_lim(&mut self) {
        self.lim = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lim(&mut self, v: f64) {
        self.lim = v;
    }

    // string lm_ccy = 23;


    pub fn get_lm_ccy(&self) -> &str {
        &self.lm_ccy
    }
    pub fn clear_lm_ccy(&mut self) {
        self.lm_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_lm_ccy(&mut self, v: ::std::string::String) {
        self.lm_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lm_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.lm_ccy
    }

    // Take field
    pub fn take_lm_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lm_ccy, ::std::string::String::new())
    }

    // string ext_rating_agency = 24;


    pub fn get_ext_rating_agency(&self) -> &str {
        &self.ext_rating_agency
    }
    pub fn clear_ext_rating_agency(&mut self) {
        self.ext_rating_agency.clear();
    }

    // Param is passed by value, moved
    pub fn set_ext_rating_agency(&mut self, v: ::std::string::String) {
        self.ext_rating_agency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ext_rating_agency(&mut self) -> &mut ::std::string::String {
        &mut self.ext_rating_agency
    }

    // Take field
    pub fn take_ext_rating_agency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ext_rating_agency, ::std::string::String::new())
    }

    // string ext_rating = 25;


    pub fn get_ext_rating(&self) -> &str {
        &self.ext_rating
    }
    pub fn clear_ext_rating(&mut self) {
        self.ext_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_ext_rating(&mut self, v: ::std::string::String) {
        self.ext_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ext_rating(&mut self) -> &mut ::std::string::String {
        &mut self.ext_rating
    }

    // Take field
    pub fn take_ext_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ext_rating, ::std::string::String::new())
    }

    // string int_rating = 26;


    pub fn get_int_rating(&self) -> &str {
        &self.int_rating
    }
    pub fn clear_int_rating(&mut self) {
        self.int_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_rating(&mut self, v: ::std::string::String) {
        self.int_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_rating(&mut self) -> &mut ::std::string::String {
        &mut self.int_rating
    }

    // Take field
    pub fn take_int_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_rating, ::std::string::String::new())
    }

    // string asset_cd = 27;


    pub fn get_asset_cd(&self) -> &str {
        &self.asset_cd
    }
    pub fn clear_asset_cd(&mut self) {
        self.asset_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_cd(&mut self, v: ::std::string::String) {
        self.asset_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_cd(&mut self) -> &mut ::std::string::String {
        &mut self.asset_cd
    }

    // Take field
    pub fn take_asset_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_cd, ::std::string::String::new())
    }

    // double prov_amt = 28;


    pub fn get_prov_amt(&self) -> f64 {
        self.prov_amt
    }
    pub fn clear_prov_amt(&mut self) {
        self.prov_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prov_amt(&mut self, v: f64) {
        self.prov_amt = v;
    }

    // int64 prov_dt = 29;


    pub fn get_prov_dt(&self) -> i64 {
        self.prov_dt
    }
    pub fn clear_prov_dt(&mut self) {
        self.prov_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_prov_dt(&mut self, v: i64) {
        self.prov_dt = v;
    }

    // string constitn = 30;


    pub fn get_constitn(&self) -> &str {
        &self.constitn
    }
    pub fn clear_constitn(&mut self) {
        self.constitn.clear();
    }

    // Param is passed by value, moved
    pub fn set_constitn(&mut self, v: ::std::string::String) {
        self.constitn = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_constitn(&mut self) -> &mut ::std::string::String {
        &mut self.constitn
    }

    // Take field
    pub fn take_constitn(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.constitn, ::std::string::String::new())
    }

    // string loan_type = 31;


    pub fn get_loan_type(&self) -> &str {
        &self.loan_type
    }
    pub fn clear_loan_type(&mut self) {
        self.loan_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_loan_type(&mut self, v: ::std::string::String) {
        self.loan_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_loan_type(&mut self) -> &mut ::std::string::String {
        &mut self.loan_type
    }

    // Take field
    pub fn take_loan_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.loan_type, ::std::string::String::new())
    }

    // double def_amt = 32;


    pub fn get_def_amt(&self) -> f64 {
        self.def_amt
    }
    pub fn clear_def_amt(&mut self) {
        self.def_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_def_amt(&mut self, v: f64) {
        self.def_amt = v;
    }

    // int64 def_dt = 33;


    pub fn get_def_dt(&self) -> i64 {
        self.def_dt
    }
    pub fn clear_def_dt(&mut self) {
        self.def_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_def_dt(&mut self, v: i64) {
        self.def_dt = v;
    }

    // int64 last_paid_emi_dt = 34;


    pub fn get_last_paid_emi_dt(&self) -> i64 {
        self.last_paid_emi_dt
    }
    pub fn clear_last_paid_emi_dt(&mut self) {
        self.last_paid_emi_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_paid_emi_dt(&mut self, v: i64) {
        self.last_paid_emi_dt = v;
    }

    // int64 w4b_cd = 35;


    pub fn get_w4b_cd(&self) -> i64 {
        self.w4b_cd
    }
    pub fn clear_w4b_cd(&mut self) {
        self.w4b_cd = 0;
    }

    // Param is passed by value, moved
    pub fn set_w4b_cd(&mut self, v: i64) {
        self.w4b_cd = v;
    }

    // string balm_llg = 36;


    pub fn get_balm_llg(&self) -> &str {
        &self.balm_llg
    }
    pub fn clear_balm_llg(&mut self) {
        self.balm_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_balm_llg(&mut self, v: ::std::string::String) {
        self.balm_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balm_llg(&mut self) -> &mut ::std::string::String {
        &mut self.balm_llg
    }

    // Take field
    pub fn take_balm_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balm_llg, ::std::string::String::new())
    }

    // string care_llg = 37;


    pub fn get_care_llg(&self) -> &str {
        &self.care_llg
    }
    pub fn clear_care_llg(&mut self) {
        self.care_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_care_llg(&mut self, v: ::std::string::String) {
        self.care_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_care_llg(&mut self) -> &mut ::std::string::String {
        &mut self.care_llg
    }

    // Take field
    pub fn take_care_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.care_llg, ::std::string::String::new())
    }

    // string ba_llg = 38;


    pub fn get_ba_llg(&self) -> &str {
        &self.ba_llg
    }
    pub fn clear_ba_llg(&mut self) {
        self.ba_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_ba_llg(&mut self, v: ::std::string::String) {
        self.ba_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ba_llg(&mut self) -> &mut ::std::string::String {
        &mut self.ba_llg
    }

    // Take field
    pub fn take_ba_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ba_llg, ::std::string::String::new())
    }

    // string client_type = 39;


    pub fn get_client_type(&self) -> &str {
        &self.client_type
    }
    pub fn clear_client_type(&mut self) {
        self.client_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_type(&mut self, v: ::std::string::String) {
        self.client_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_type(&mut self) -> &mut ::std::string::String {
        &mut self.client_type
    }

    // Take field
    pub fn take_client_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_type, ::std::string::String::new())
    }

    // string clients_name = 40;


    pub fn get_clients_name(&self) -> &str {
        &self.clients_name
    }
    pub fn clear_clients_name(&mut self) {
        self.clients_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_name(&mut self, v: ::std::string::String) {
        self.clients_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_name(&mut self) -> &mut ::std::string::String {
        &mut self.clients_name
    }

    // Take field
    pub fn take_clients_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_name, ::std::string::String::new())
    }

    // string clients_bsr_type_flg = 41;


    pub fn get_clients_bsr_type_flg(&self) -> &str {
        &self.clients_bsr_type_flg
    }
    pub fn clear_clients_bsr_type_flg(&mut self) {
        self.clients_bsr_type_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_bsr_type_flg(&mut self, v: ::std::string::String) {
        self.clients_bsr_type_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_bsr_type_flg(&mut self) -> &mut ::std::string::String {
        &mut self.clients_bsr_type_flg
    }

    // Take field
    pub fn take_clients_bsr_type_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_bsr_type_flg, ::std::string::String::new())
    }

    // string clients_busdivn_code = 42;


    pub fn get_clients_busdivn_code(&self) -> &str {
        &self.clients_busdivn_code
    }
    pub fn clear_clients_busdivn_code(&mut self) {
        self.clients_busdivn_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_busdivn_code(&mut self, v: ::std::string::String) {
        self.clients_busdivn_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_busdivn_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_busdivn_code
    }

    // Take field
    pub fn take_clients_busdivn_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_busdivn_code, ::std::string::String::new())
    }

    // string clients_const_code = 43;


    pub fn get_clients_const_code(&self) -> &str {
        &self.clients_const_code
    }
    pub fn clear_clients_const_code(&mut self) {
        self.clients_const_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_const_code(&mut self, v: ::std::string::String) {
        self.clients_const_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_const_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_const_code
    }

    // Take field
    pub fn take_clients_const_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_const_code, ::std::string::String::new())
    }

    // string clients_pan_gir_num = 44;


    pub fn get_clients_pan_gir_num(&self) -> &str {
        &self.clients_pan_gir_num
    }
    pub fn clear_clients_pan_gir_num(&mut self) {
        self.clients_pan_gir_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_pan_gir_num(&mut self, v: ::std::string::String) {
        self.clients_pan_gir_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_pan_gir_num(&mut self) -> &mut ::std::string::String {
        &mut self.clients_pan_gir_num
    }

    // Take field
    pub fn take_clients_pan_gir_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_pan_gir_num, ::std::string::String::new())
    }

    // string clients_risk_categorization = 45;


    pub fn get_clients_risk_categorization(&self) -> &str {
        &self.clients_risk_categorization
    }
    pub fn clear_clients_risk_categorization(&mut self) {
        self.clients_risk_categorization.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_risk_categorization(&mut self, v: ::std::string::String) {
        self.clients_risk_categorization = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_risk_categorization(&mut self) -> &mut ::std::string::String {
        &mut self.clients_risk_categorization
    }

    // Take field
    pub fn take_clients_risk_categorization(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_risk_categorization, ::std::string::String::new())
    }

    // string clients_risk_cntry = 46;


    pub fn get_clients_risk_cntry(&self) -> &str {
        &self.clients_risk_cntry
    }
    pub fn clear_clients_risk_cntry(&mut self) {
        self.clients_risk_cntry.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_risk_cntry(&mut self, v: ::std::string::String) {
        self.clients_risk_cntry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_risk_cntry(&mut self) -> &mut ::std::string::String {
        &mut self.clients_risk_cntry
    }

    // Take field
    pub fn take_clients_risk_cntry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_risk_cntry, ::std::string::String::new())
    }

    // string clients_segment_code = 47;


    pub fn get_clients_segment_code(&self) -> &str {
        &self.clients_segment_code
    }
    pub fn clear_clients_segment_code(&mut self) {
        self.clients_segment_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_segment_code(&mut self, v: ::std::string::String) {
        self.clients_segment_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_segment_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_segment_code
    }

    // Take field
    pub fn take_clients_segment_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_segment_code, ::std::string::String::new())
    }

    // string corpcl_orgn_qualifier = 48;


    pub fn get_corpcl_orgn_qualifier(&self) -> &str {
        &self.corpcl_orgn_qualifier
    }
    pub fn clear_corpcl_orgn_qualifier(&mut self) {
        self.corpcl_orgn_qualifier.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_orgn_qualifier(&mut self, v: ::std::string::String) {
        self.corpcl_orgn_qualifier = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_orgn_qualifier(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_orgn_qualifier
    }

    // Take field
    pub fn take_corpcl_orgn_qualifier(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_orgn_qualifier, ::std::string::String::new())
    }

    // string corpcl_indus_code = 49;


    pub fn get_corpcl_indus_code(&self) -> &str {
        &self.corpcl_indus_code
    }
    pub fn clear_corpcl_indus_code(&mut self) {
        self.corpcl_indus_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_indus_code(&mut self, v: ::std::string::String) {
        self.corpcl_indus_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_indus_code(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_indus_code
    }

    // Take field
    pub fn take_corpcl_indus_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_indus_code, ::std::string::String::new())
    }

    // string corpcl_nature_of_bus1 = 50;


    pub fn get_corpcl_nature_of_bus1(&self) -> &str {
        &self.corpcl_nature_of_bus1
    }
    pub fn clear_corpcl_nature_of_bus1(&mut self) {
        self.corpcl_nature_of_bus1.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_nature_of_bus1(&mut self, v: ::std::string::String) {
        self.corpcl_nature_of_bus1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_nature_of_bus1(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_nature_of_bus1
    }

    // Take field
    pub fn take_corpcl_nature_of_bus1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_nature_of_bus1, ::std::string::String::new())
    }

    // string corpcl_nature_of_bus2 = 51;


    pub fn get_corpcl_nature_of_bus2(&self) -> &str {
        &self.corpcl_nature_of_bus2
    }
    pub fn clear_corpcl_nature_of_bus2(&mut self) {
        self.corpcl_nature_of_bus2.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_nature_of_bus2(&mut self, v: ::std::string::String) {
        self.corpcl_nature_of_bus2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_nature_of_bus2(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_nature_of_bus2
    }

    // Take field
    pub fn take_corpcl_nature_of_bus2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_nature_of_bus2, ::std::string::String::new())
    }

    // string corpcl_nature_of_bus3 = 52;


    pub fn get_corpcl_nature_of_bus3(&self) -> &str {
        &self.corpcl_nature_of_bus3
    }
    pub fn clear_corpcl_nature_of_bus3(&mut self) {
        self.corpcl_nature_of_bus3.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_nature_of_bus3(&mut self, v: ::std::string::String) {
        self.corpcl_nature_of_bus3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_nature_of_bus3(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_nature_of_bus3
    }

    // Take field
    pub fn take_corpcl_nature_of_bus3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_nature_of_bus3, ::std::string::String::new())
    }

    // string corpcl_central_state_flg = 53;


    pub fn get_corpcl_central_state_flg(&self) -> &str {
        &self.corpcl_central_state_flg
    }
    pub fn clear_corpcl_central_state_flg(&mut self) {
        self.corpcl_central_state_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_central_state_flg(&mut self, v: ::std::string::String) {
        self.corpcl_central_state_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_central_state_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_central_state_flg
    }

    // Take field
    pub fn take_corpcl_central_state_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_central_state_flg, ::std::string::String::new())
    }

    // string corpcl_public_sector_flg = 54;


    pub fn get_corpcl_public_sector_flg(&self) -> &str {
        &self.corpcl_public_sector_flg
    }
    pub fn clear_corpcl_public_sector_flg(&mut self) {
        self.corpcl_public_sector_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_public_sector_flg(&mut self, v: ::std::string::String) {
        self.corpcl_public_sector_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_public_sector_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_public_sector_flg
    }

    // Take field
    pub fn take_corpcl_public_sector_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_public_sector_flg, ::std::string::String::new())
    }

    // string corpcl_primary_dlr_flg = 55;


    pub fn get_corpcl_primary_dlr_flg(&self) -> &str {
        &self.corpcl_primary_dlr_flg
    }
    pub fn clear_corpcl_primary_dlr_flg(&mut self) {
        self.corpcl_primary_dlr_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_primary_dlr_flg(&mut self, v: ::std::string::String) {
        self.corpcl_primary_dlr_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_primary_dlr_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_primary_dlr_flg
    }

    // Take field
    pub fn take_corpcl_primary_dlr_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_primary_dlr_flg, ::std::string::String::new())
    }

    // string corpcl_multilateral_bank = 56;


    pub fn get_corpcl_multilateral_bank(&self) -> &str {
        &self.corpcl_multilateral_bank
    }
    pub fn clear_corpcl_multilateral_bank(&mut self) {
        self.corpcl_multilateral_bank.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_multilateral_bank(&mut self, v: ::std::string::String) {
        self.corpcl_multilateral_bank = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_multilateral_bank(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_multilateral_bank
    }

    // Take field
    pub fn take_corpcl_multilateral_bank(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_multilateral_bank, ::std::string::String::new())
    }

    // string corpcl_connp_inv_num = 57;


    pub fn get_corpcl_connp_inv_num(&self) -> &str {
        &self.corpcl_connp_inv_num
    }
    pub fn clear_corpcl_connp_inv_num(&mut self) {
        self.corpcl_connp_inv_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_connp_inv_num(&mut self, v: ::std::string::String) {
        self.corpcl_connp_inv_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_connp_inv_num(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_connp_inv_num
    }

    // Take field
    pub fn take_corpcl_connp_inv_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_connp_inv_num, ::std::string::String::new())
    }

    // double corpcl_bc_gross_turnover = 58;


    pub fn get_corpcl_bc_gross_turnover(&self) -> f64 {
        self.corpcl_bc_gross_turnover
    }
    pub fn clear_corpcl_bc_gross_turnover(&mut self) {
        self.corpcl_bc_gross_turnover = 0.;
    }

    // Param is passed by value, moved
    pub fn set_corpcl_bc_gross_turnover(&mut self, v: f64) {
        self.corpcl_bc_gross_turnover = v;
    }

    // string npa_asset_cd = 59;


    pub fn get_npa_asset_cd(&self) -> &str {
        &self.npa_asset_cd
    }
    pub fn clear_npa_asset_cd(&mut self) {
        self.npa_asset_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_asset_cd(&mut self, v: ::std::string::String) {
        self.npa_asset_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_asset_cd(&mut self) -> &mut ::std::string::String {
        &mut self.npa_asset_cd
    }

    // Take field
    pub fn take_npa_asset_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_asset_cd, ::std::string::String::new())
    }

    // int64 npa_dt = 60;


    pub fn get_npa_dt(&self) -> i64 {
        self.npa_dt
    }
    pub fn clear_npa_dt(&mut self) {
        self.npa_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_npa_dt(&mut self, v: i64) {
        self.npa_dt = v;
    }

    // double acc_bal = 61;


    pub fn get_acc_bal(&self) -> f64 {
        self.acc_bal
    }
    pub fn clear_acc_bal(&mut self) {
        self.acc_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_acc_bal(&mut self, v: f64) {
        self.acc_bal = v;
    }

    // double pwo = 62;


    pub fn get_pwo(&self) -> f64 {
        self.pwo
    }
    pub fn clear_pwo(&mut self) {
        self.pwo = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pwo(&mut self, v: f64) {
        self.pwo = v;
    }

    // double ho_bal = 63;


    pub fn get_ho_bal(&self) -> f64 {
        self.ho_bal
    }
    pub fn clear_ho_bal(&mut self) {
        self.ho_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ho_bal(&mut self, v: f64) {
        self.ho_bal = v;
    }

    // double npa_prov = 64;


    pub fn get_npa_prov(&self) -> f64 {
        self.npa_prov
    }
    pub fn clear_npa_prov(&mut self) {
        self.npa_prov = 0.;
    }

    // Param is passed by value, moved
    pub fn set_npa_prov(&mut self, v: f64) {
        self.npa_prov = v;
    }

    // double ho_prov = 65;


    pub fn get_ho_prov(&self) -> f64 {
        self.ho_prov
    }
    pub fn clear_ho_prov(&mut self) {
        self.ho_prov = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ho_prov(&mut self, v: f64) {
        self.ho_prov = v;
    }

    // double suspence_bal = 66;


    pub fn get_suspence_bal(&self) -> f64 {
        self.suspence_bal
    }
    pub fn clear_suspence_bal(&mut self) {
        self.suspence_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_suspence_bal(&mut self, v: f64) {
        self.suspence_bal = v;
    }

    // double suspence_writeoff = 67;


    pub fn get_suspence_writeoff(&self) -> f64 {
        self.suspence_writeoff
    }
    pub fn clear_suspence_writeoff(&mut self) {
        self.suspence_writeoff = 0.;
    }

    // Param is passed by value, moved
    pub fn set_suspence_writeoff(&mut self, v: f64) {
        self.suspence_writeoff = v;
    }

    // double ho_suspence = 68;


    pub fn get_ho_suspence(&self) -> f64 {
        self.ho_suspence
    }
    pub fn clear_ho_suspence(&mut self) {
        self.ho_suspence = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ho_suspence(&mut self, v: f64) {
        self.ho_suspence = v;
    }

    // double claim = 69;


    pub fn get_claim(&self) -> f64 {
        self.claim
    }
    pub fn clear_claim(&mut self) {
        self.claim = 0.;
    }

    // Param is passed by value, moved
    pub fn set_claim(&mut self, v: f64) {
        self.claim = v;
    }

    // double primary = 70;


    pub fn get_primary(&self) -> f64 {
        self.primary
    }
    pub fn clear_primary(&mut self) {
        self.primary = 0.;
    }

    // Param is passed by value, moved
    pub fn set_primary(&mut self, v: f64) {
        self.primary = v;
    }

    // double col = 71;


    pub fn get_col(&self) -> f64 {
        self.col
    }
    pub fn clear_col(&mut self) {
        self.col = 0.;
    }

    // Param is passed by value, moved
    pub fn set_col(&mut self, v: f64) {
        self.col = v;
    }

    // string priority = 72;


    pub fn get_priority(&self) -> &str {
        &self.priority
    }
    pub fn clear_priority(&mut self) {
        self.priority.clear();
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: ::std::string::String) {
        self.priority = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_priority(&mut self) -> &mut ::std::string::String {
        &mut self.priority
    }

    // Take field
    pub fn take_priority(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.priority, ::std::string::String::new())
    }

    // string main_sector = 73;


    pub fn get_main_sector(&self) -> &str {
        &self.main_sector
    }
    pub fn clear_main_sector(&mut self) {
        self.main_sector.clear();
    }

    // Param is passed by value, moved
    pub fn set_main_sector(&mut self, v: ::std::string::String) {
        self.main_sector = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_main_sector(&mut self) -> &mut ::std::string::String {
        &mut self.main_sector
    }

    // Take field
    pub fn take_main_sector(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.main_sector, ::std::string::String::new())
    }

    // string industry = 74;


    pub fn get_industry(&self) -> &str {
        &self.industry
    }
    pub fn clear_industry(&mut self) {
        self.industry.clear();
    }

    // Param is passed by value, moved
    pub fn set_industry(&mut self, v: ::std::string::String) {
        self.industry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_industry(&mut self) -> &mut ::std::string::String {
        &mut self.industry
    }

    // Take field
    pub fn take_industry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.industry, ::std::string::String::new())
    }

    // double npa_amt = 75;


    pub fn get_npa_amt(&self) -> f64 {
        self.npa_amt
    }
    pub fn clear_npa_amt(&mut self) {
        self.npa_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_npa_amt(&mut self, v: f64) {
        self.npa_amt = v;
    }

    // string schedules = 76;


    pub fn get_schedules(&self) -> &str {
        &self.schedules
    }
    pub fn clear_schedules(&mut self) {
        self.schedules.clear();
    }

    // Param is passed by value, moved
    pub fn set_schedules(&mut self, v: ::std::string::String) {
        self.schedules = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schedules(&mut self) -> &mut ::std::string::String {
        &mut self.schedules
    }

    // Take field
    pub fn take_schedules(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schedules, ::std::string::String::new())
    }

    // int64 sanc_dt = 77;


    pub fn get_sanc_dt(&self) -> i64 {
        self.sanc_dt
    }
    pub fn clear_sanc_dt(&mut self) {
        self.sanc_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_sanc_dt(&mut self, v: i64) {
        self.sanc_dt = v;
    }

    // string occp_cd = 78;


    pub fn get_occp_cd(&self) -> &str {
        &self.occp_cd
    }
    pub fn clear_occp_cd(&mut self) {
        self.occp_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_occp_cd(&mut self, v: ::std::string::String) {
        self.occp_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_occp_cd(&mut self) -> &mut ::std::string::String {
        &mut self.occp_cd
    }

    // Take field
    pub fn take_occp_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.occp_cd, ::std::string::String::new())
    }

    // string sens_sec = 79;


    pub fn get_sens_sec(&self) -> &str {
        &self.sens_sec
    }
    pub fn clear_sens_sec(&mut self) {
        self.sens_sec.clear();
    }

    // Param is passed by value, moved
    pub fn set_sens_sec(&mut self, v: ::std::string::String) {
        self.sens_sec = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sens_sec(&mut self) -> &mut ::std::string::String {
        &mut self.sens_sec
    }

    // Take field
    pub fn take_sens_sec(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sens_sec, ::std::string::String::new())
    }

    // string prior_subtype = 80;


    pub fn get_prior_subtype(&self) -> &str {
        &self.prior_subtype
    }
    pub fn clear_prior_subtype(&mut self) {
        self.prior_subtype.clear();
    }

    // Param is passed by value, moved
    pub fn set_prior_subtype(&mut self, v: ::std::string::String) {
        self.prior_subtype = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prior_subtype(&mut self) -> &mut ::std::string::String {
        &mut self.prior_subtype
    }

    // Take field
    pub fn take_prior_subtype(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prior_subtype, ::std::string::String::new())
    }

    // string restruct_flag = 81;


    pub fn get_restruct_flag(&self) -> &str {
        &self.restruct_flag
    }
    pub fn clear_restruct_flag(&mut self) {
        self.restruct_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_restruct_flag(&mut self, v: ::std::string::String) {
        self.restruct_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_restruct_flag(&mut self) -> &mut ::std::string::String {
        &mut self.restruct_flag
    }

    // Take field
    pub fn take_restruct_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.restruct_flag, ::std::string::String::new())
    }

    // int64 restruct_dt = 82;


    pub fn get_restruct_dt(&self) -> i64 {
        self.restruct_dt
    }
    pub fn clear_restruct_dt(&mut self) {
        self.restruct_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_restruct_dt(&mut self, v: i64) {
        self.restruct_dt = v;
    }

    // string mor_prd = 83;


    pub fn get_mor_prd(&self) -> &str {
        &self.mor_prd
    }
    pub fn clear_mor_prd(&mut self) {
        self.mor_prd.clear();
    }

    // Param is passed by value, moved
    pub fn set_mor_prd(&mut self, v: ::std::string::String) {
        self.mor_prd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mor_prd(&mut self) -> &mut ::std::string::String {
        &mut self.mor_prd
    }

    // Take field
    pub fn take_mor_prd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mor_prd, ::std::string::String::new())
    }

    // string rating = 84;


    pub fn get_rating(&self) -> &str {
        &self.rating
    }
    pub fn clear_rating(&mut self) {
        self.rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_rating(&mut self, v: ::std::string::String) {
        self.rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rating(&mut self) -> &mut ::std::string::String {
        &mut self.rating
    }

    // Take field
    pub fn take_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rating, ::std::string::String::new())
    }

    // string consitin = 85;


    pub fn get_consitin(&self) -> &str {
        &self.consitin
    }
    pub fn clear_consitin(&mut self) {
        self.consitin.clear();
    }

    // Param is passed by value, moved
    pub fn set_consitin(&mut self, v: ::std::string::String) {
        self.consitin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consitin(&mut self) -> &mut ::std::string::String {
        &mut self.consitin
    }

    // Take field
    pub fn take_consitin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.consitin, ::std::string::String::new())
    }

    // string pan = 86;


    pub fn get_pan(&self) -> &str {
        &self.pan
    }
    pub fn clear_pan(&mut self) {
        self.pan.clear();
    }

    // Param is passed by value, moved
    pub fn set_pan(&mut self, v: ::std::string::String) {
        self.pan = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pan(&mut self) -> &mut ::std::string::String {
        &mut self.pan
    }

    // Take field
    pub fn take_pan(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pan, ::std::string::String::new())
    }

    // double limit_amt = 87;


    pub fn get_limit_amt(&self) -> f64 {
        self.limit_amt
    }
    pub fn clear_limit_amt(&mut self) {
        self.limit_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_limit_amt(&mut self, v: f64) {
        self.limit_amt = v;
    }

    // double gross_adv = 88;


    pub fn get_gross_adv(&self) -> f64 {
        self.gross_adv
    }
    pub fn clear_gross_adv(&mut self) {
        self.gross_adv = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gross_adv(&mut self, v: f64) {
        self.gross_adv = v;
    }

    // double exp_amt = 89;


    pub fn get_exp_amt(&self) -> f64 {
        self.exp_amt
    }
    pub fn clear_exp_amt(&mut self) {
        self.exp_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_exp_amt(&mut self, v: f64) {
        self.exp_amt = v;
    }

    // double unvail_amt = 90;


    pub fn get_unvail_amt(&self) -> f64 {
        self.unvail_amt
    }
    pub fn clear_unvail_amt(&mut self) {
        self.unvail_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_unvail_amt(&mut self, v: f64) {
        self.unvail_amt = v;
    }

    // double gold_gram = 91;


    pub fn get_gold_gram(&self) -> f64 {
        self.gold_gram
    }
    pub fn clear_gold_gram(&mut self) {
        self.gold_gram = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gold_gram(&mut self, v: f64) {
        self.gold_gram = v;
    }

    // string fund_flag = 92;


    pub fn get_fund_flag(&self) -> &str {
        &self.fund_flag
    }
    pub fn clear_fund_flag(&mut self) {
        self.fund_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_fund_flag(&mut self, v: ::std::string::String) {
        self.fund_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fund_flag(&mut self) -> &mut ::std::string::String {
        &mut self.fund_flag
    }

    // Take field
    pub fn take_fund_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fund_flag, ::std::string::String::new())
    }

    // double ltv_value = 93;


    pub fn get_ltv_value(&self) -> f64 {
        self.ltv_value
    }
    pub fn clear_ltv_value(&mut self) {
        self.ltv_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ltv_value(&mut self, v: f64) {
        self.ltv_value = v;
    }

    // int64 pt_i64_1 = 94;


    pub fn get_pt_i64_1(&self) -> i64 {
        self.pt_i64_1
    }
    pub fn clear_pt_i64_1(&mut self) {
        self.pt_i64_1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_1(&mut self, v: i64) {
        self.pt_i64_1 = v;
    }

    // int64 pt_i64_2 = 95;


    pub fn get_pt_i64_2(&self) -> i64 {
        self.pt_i64_2
    }
    pub fn clear_pt_i64_2(&mut self) {
        self.pt_i64_2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_2(&mut self, v: i64) {
        self.pt_i64_2 = v;
    }

    // int64 pt_i64_3 = 96;


    pub fn get_pt_i64_3(&self) -> i64 {
        self.pt_i64_3
    }
    pub fn clear_pt_i64_3(&mut self) {
        self.pt_i64_3 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_3(&mut self, v: i64) {
        self.pt_i64_3 = v;
    }

    // int64 pt_i64_4 = 97;


    pub fn get_pt_i64_4(&self) -> i64 {
        self.pt_i64_4
    }
    pub fn clear_pt_i64_4(&mut self) {
        self.pt_i64_4 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_4(&mut self, v: i64) {
        self.pt_i64_4 = v;
    }

    // int64 pt_i64_5 = 98;


    pub fn get_pt_i64_5(&self) -> i64 {
        self.pt_i64_5
    }
    pub fn clear_pt_i64_5(&mut self) {
        self.pt_i64_5 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_5(&mut self, v: i64) {
        self.pt_i64_5 = v;
    }

    // double pt_f64_1 = 99;


    pub fn get_pt_f64_1(&self) -> f64 {
        self.pt_f64_1
    }
    pub fn clear_pt_f64_1(&mut self) {
        self.pt_f64_1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_1(&mut self, v: f64) {
        self.pt_f64_1 = v;
    }

    // double pt_f64_2 = 100;


    pub fn get_pt_f64_2(&self) -> f64 {
        self.pt_f64_2
    }
    pub fn clear_pt_f64_2(&mut self) {
        self.pt_f64_2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_2(&mut self, v: f64) {
        self.pt_f64_2 = v;
    }

    // double pt_f64_3 = 101;


    pub fn get_pt_f64_3(&self) -> f64 {
        self.pt_f64_3
    }
    pub fn clear_pt_f64_3(&mut self) {
        self.pt_f64_3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_3(&mut self, v: f64) {
        self.pt_f64_3 = v;
    }

    // double pt_f64_4 = 102;


    pub fn get_pt_f64_4(&self) -> f64 {
        self.pt_f64_4
    }
    pub fn clear_pt_f64_4(&mut self) {
        self.pt_f64_4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_4(&mut self, v: f64) {
        self.pt_f64_4 = v;
    }

    // double pt_f64_5 = 103;


    pub fn get_pt_f64_5(&self) -> f64 {
        self.pt_f64_5
    }
    pub fn clear_pt_f64_5(&mut self) {
        self.pt_f64_5 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_5(&mut self, v: f64) {
        self.pt_f64_5 = v;
    }

    // string pt_str_1 = 104;


    pub fn get_pt_str_1(&self) -> &str {
        &self.pt_str_1
    }
    pub fn clear_pt_str_1(&mut self) {
        self.pt_str_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_1(&mut self, v: ::std::string::String) {
        self.pt_str_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_1(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_1
    }

    // Take field
    pub fn take_pt_str_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_1, ::std::string::String::new())
    }

    // string pt_str_2 = 105;


    pub fn get_pt_str_2(&self) -> &str {
        &self.pt_str_2
    }
    pub fn clear_pt_str_2(&mut self) {
        self.pt_str_2.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_2(&mut self, v: ::std::string::String) {
        self.pt_str_2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_2(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_2
    }

    // Take field
    pub fn take_pt_str_2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_2, ::std::string::String::new())
    }

    // string pt_str_3 = 106;


    pub fn get_pt_str_3(&self) -> &str {
        &self.pt_str_3
    }
    pub fn clear_pt_str_3(&mut self) {
        self.pt_str_3.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_3(&mut self, v: ::std::string::String) {
        self.pt_str_3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_3(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_3
    }

    // Take field
    pub fn take_pt_str_3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_3, ::std::string::String::new())
    }

    // string pt_str_4 = 107;


    pub fn get_pt_str_4(&self) -> &str {
        &self.pt_str_4
    }
    pub fn clear_pt_str_4(&mut self) {
        self.pt_str_4.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_4(&mut self, v: ::std::string::String) {
        self.pt_str_4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_4(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_4
    }

    // Take field
    pub fn take_pt_str_4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_4, ::std::string::String::new())
    }

    // string pt_str_5 = 108;


    pub fn get_pt_str_5(&self) -> &str {
        &self.pt_str_5
    }
    pub fn clear_pt_str_5(&mut self) {
        self.pt_str_5.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_5(&mut self, v: ::std::string::String) {
        self.pt_str_5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_5(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_5
    }

    // Take field
    pub fn take_pt_str_5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_5, ::std::string::String::new())
    }

    // string org_code = 109;


    pub fn get_org_code(&self) -> &str {
        &self.org_code
    }
    pub fn clear_org_code(&mut self) {
        self.org_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_org_code(&mut self, v: ::std::string::String) {
        self.org_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_org_code(&mut self) -> &mut ::std::string::String {
        &mut self.org_code
    }

    // Take field
    pub fn take_org_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.org_code, ::std::string::String::new())
    }

    // repeated .Cashflow cashflows = 110;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Account {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_no)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acnts_internal_acnum)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acnts_brn_cd = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acnts_client_num = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ucic = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acnts_curr_cd)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acnts_prod_cd = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.gl_cd = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acnts_opening_dt = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bal = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bal_ccy)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rt = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_type)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_bench)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_spread)?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_reset_dt = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_reset_dt = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.reset_no_of_months = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.disbursal_amount = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_emi_dt = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lm_exp = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.lim = tmp;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lm_ccy)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ext_rating_agency)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ext_rating)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_rating)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_cd)?;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prov_amt = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.prov_dt = tmp;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.constitn)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.loan_type)?;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.def_amt = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.def_dt = tmp;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_paid_emi_dt = tmp;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.w4b_cd = tmp;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.balm_llg)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.care_llg)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ba_llg)?;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_type)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_name)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_bsr_type_flg)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_busdivn_code)?;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_const_code)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_pan_gir_num)?;
                },
                45 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_risk_categorization)?;
                },
                46 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_risk_cntry)?;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_segment_code)?;
                },
                48 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_orgn_qualifier)?;
                },
                49 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_indus_code)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_nature_of_bus1)?;
                },
                51 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_nature_of_bus2)?;
                },
                52 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_nature_of_bus3)?;
                },
                53 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_central_state_flg)?;
                },
                54 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_public_sector_flg)?;
                },
                55 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_primary_dlr_flg)?;
                },
                56 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_multilateral_bank)?;
                },
                57 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_connp_inv_num)?;
                },
                58 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.corpcl_bc_gross_turnover = tmp;
                },
                59 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa_asset_cd)?;
                },
                60 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.npa_dt = tmp;
                },
                61 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.acc_bal = tmp;
                },
                62 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pwo = tmp;
                },
                63 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ho_bal = tmp;
                },
                64 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.npa_prov = tmp;
                },
                65 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ho_prov = tmp;
                },
                66 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.suspence_bal = tmp;
                },
                67 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.suspence_writeoff = tmp;
                },
                68 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ho_suspence = tmp;
                },
                69 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.claim = tmp;
                },
                70 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.primary = tmp;
                },
                71 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.col = tmp;
                },
                72 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.priority)?;
                },
                73 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.main_sector)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.industry)?;
                },
                75 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.npa_amt = tmp;
                },
                76 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schedules)?;
                },
                77 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.sanc_dt = tmp;
                },
                78 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.occp_cd)?;
                },
                79 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sens_sec)?;
                },
                80 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prior_subtype)?;
                },
                81 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.restruct_flag)?;
                },
                82 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.restruct_dt = tmp;
                },
                83 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mor_prd)?;
                },
                84 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rating)?;
                },
                85 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.consitin)?;
                },
                86 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pan)?;
                },
                87 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.limit_amt = tmp;
                },
                88 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.gross_adv = tmp;
                },
                89 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.exp_amt = tmp;
                },
                90 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.unvail_amt = tmp;
                },
                91 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.gold_gram = tmp;
                },
                92 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fund_flag)?;
                },
                93 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ltv_value = tmp;
                },
                94 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_1 = tmp;
                },
                95 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_2 = tmp;
                },
                96 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_3 = tmp;
                },
                97 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_4 = tmp;
                },
                98 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_5 = tmp;
                },
                99 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_1 = tmp;
                },
                100 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_2 = tmp;
                },
                101 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_3 = tmp;
                },
                102 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_4 = tmp;
                },
                103 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_5 = tmp;
                },
                104 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_1)?;
                },
                105 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_2)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_3)?;
                },
                107 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_4)?;
                },
                108 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pt_str_5)?;
                },
                109 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.org_code)?;
                },
                110 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.acc_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.acc_no);
        }
        if !self.acnts_internal_acnum.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.acnts_internal_acnum);
        }
        if self.acnts_brn_cd != 0 {
            my_size += ::protobuf::rt::value_size(3, self.acnts_brn_cd, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.acnts_client_num != 0 {
            my_size += ::protobuf::rt::value_size(4, self.acnts_client_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ucic != 0 {
            my_size += ::protobuf::rt::value_size(5, self.ucic, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.acnts_curr_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.acnts_curr_cd);
        }
        if self.acnts_prod_cd != 0 {
            my_size += ::protobuf::rt::value_size(7, self.acnts_prod_cd, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gl_cd != 0 {
            my_size += ::protobuf::rt::value_size(8, self.gl_cd, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.acnts_opening_dt != 0 {
            my_size += ::protobuf::rt::value_size(9, self.acnts_opening_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bal != 0. {
            my_size += 9;
        }
        if !self.bal_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.bal_ccy);
        }
        if self.int_rt != 0. {
            my_size += 9;
        }
        if !self.int_type.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.int_type);
        }
        if !self.int_bench.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.int_bench);
        }
        if !self.int_spread.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.int_spread);
        }
        if self.last_reset_dt != 0 {
            my_size += ::protobuf::rt::value_size(16, self.last_reset_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_reset_dt != 0 {
            my_size += ::protobuf::rt::value_size(17, self.next_reset_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.reset_no_of_months != 0 {
            my_size += ::protobuf::rt::value_size(18, self.reset_no_of_months, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.disbursal_amount != 0. {
            my_size += 10;
        }
        if self.last_emi_dt != 0 {
            my_size += ::protobuf::rt::value_size(20, self.last_emi_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lm_exp != 0 {
            my_size += ::protobuf::rt::value_size(21, self.lm_exp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lim != 0. {
            my_size += 10;
        }
        if !self.lm_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.lm_ccy);
        }
        if !self.ext_rating_agency.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.ext_rating_agency);
        }
        if !self.ext_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.ext_rating);
        }
        if !self.int_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.int_rating);
        }
        if !self.asset_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.asset_cd);
        }
        if self.prov_amt != 0. {
            my_size += 10;
        }
        if self.prov_dt != 0 {
            my_size += ::protobuf::rt::value_size(29, self.prov_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.constitn.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.constitn);
        }
        if !self.loan_type.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.loan_type);
        }
        if self.def_amt != 0. {
            my_size += 10;
        }
        if self.def_dt != 0 {
            my_size += ::protobuf::rt::value_size(33, self.def_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_paid_emi_dt != 0 {
            my_size += ::protobuf::rt::value_size(34, self.last_paid_emi_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.w4b_cd != 0 {
            my_size += ::protobuf::rt::value_size(35, self.w4b_cd, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.balm_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.balm_llg);
        }
        if !self.care_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.care_llg);
        }
        if !self.ba_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.ba_llg);
        }
        if !self.client_type.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.client_type);
        }
        if !self.clients_name.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.clients_name);
        }
        if !self.clients_bsr_type_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.clients_bsr_type_flg);
        }
        if !self.clients_busdivn_code.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.clients_busdivn_code);
        }
        if !self.clients_const_code.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.clients_const_code);
        }
        if !self.clients_pan_gir_num.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.clients_pan_gir_num);
        }
        if !self.clients_risk_categorization.is_empty() {
            my_size += ::protobuf::rt::string_size(45, &self.clients_risk_categorization);
        }
        if !self.clients_risk_cntry.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.clients_risk_cntry);
        }
        if !self.clients_segment_code.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.clients_segment_code);
        }
        if !self.corpcl_orgn_qualifier.is_empty() {
            my_size += ::protobuf::rt::string_size(48, &self.corpcl_orgn_qualifier);
        }
        if !self.corpcl_indus_code.is_empty() {
            my_size += ::protobuf::rt::string_size(49, &self.corpcl_indus_code);
        }
        if !self.corpcl_nature_of_bus1.is_empty() {
            my_size += ::protobuf::rt::string_size(50, &self.corpcl_nature_of_bus1);
        }
        if !self.corpcl_nature_of_bus2.is_empty() {
            my_size += ::protobuf::rt::string_size(51, &self.corpcl_nature_of_bus2);
        }
        if !self.corpcl_nature_of_bus3.is_empty() {
            my_size += ::protobuf::rt::string_size(52, &self.corpcl_nature_of_bus3);
        }
        if !self.corpcl_central_state_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(53, &self.corpcl_central_state_flg);
        }
        if !self.corpcl_public_sector_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(54, &self.corpcl_public_sector_flg);
        }
        if !self.corpcl_primary_dlr_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(55, &self.corpcl_primary_dlr_flg);
        }
        if !self.corpcl_multilateral_bank.is_empty() {
            my_size += ::protobuf::rt::string_size(56, &self.corpcl_multilateral_bank);
        }
        if !self.corpcl_connp_inv_num.is_empty() {
            my_size += ::protobuf::rt::string_size(57, &self.corpcl_connp_inv_num);
        }
        if self.corpcl_bc_gross_turnover != 0. {
            my_size += 10;
        }
        if !self.npa_asset_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(59, &self.npa_asset_cd);
        }
        if self.npa_dt != 0 {
            my_size += ::protobuf::rt::value_size(60, self.npa_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.acc_bal != 0. {
            my_size += 10;
        }
        if self.pwo != 0. {
            my_size += 10;
        }
        if self.ho_bal != 0. {
            my_size += 10;
        }
        if self.npa_prov != 0. {
            my_size += 10;
        }
        if self.ho_prov != 0. {
            my_size += 10;
        }
        if self.suspence_bal != 0. {
            my_size += 10;
        }
        if self.suspence_writeoff != 0. {
            my_size += 10;
        }
        if self.ho_suspence != 0. {
            my_size += 10;
        }
        if self.claim != 0. {
            my_size += 10;
        }
        if self.primary != 0. {
            my_size += 10;
        }
        if self.col != 0. {
            my_size += 10;
        }
        if !self.priority.is_empty() {
            my_size += ::protobuf::rt::string_size(72, &self.priority);
        }
        if !self.main_sector.is_empty() {
            my_size += ::protobuf::rt::string_size(73, &self.main_sector);
        }
        if !self.industry.is_empty() {
            my_size += ::protobuf::rt::string_size(74, &self.industry);
        }
        if self.npa_amt != 0. {
            my_size += 10;
        }
        if !self.schedules.is_empty() {
            my_size += ::protobuf::rt::string_size(76, &self.schedules);
        }
        if self.sanc_dt != 0 {
            my_size += ::protobuf::rt::value_size(77, self.sanc_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.occp_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(78, &self.occp_cd);
        }
        if !self.sens_sec.is_empty() {
            my_size += ::protobuf::rt::string_size(79, &self.sens_sec);
        }
        if !self.prior_subtype.is_empty() {
            my_size += ::protobuf::rt::string_size(80, &self.prior_subtype);
        }
        if !self.restruct_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(81, &self.restruct_flag);
        }
        if self.restruct_dt != 0 {
            my_size += ::protobuf::rt::value_size(82, self.restruct_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.mor_prd.is_empty() {
            my_size += ::protobuf::rt::string_size(83, &self.mor_prd);
        }
        if !self.rating.is_empty() {
            my_size += ::protobuf::rt::string_size(84, &self.rating);
        }
        if !self.consitin.is_empty() {
            my_size += ::protobuf::rt::string_size(85, &self.consitin);
        }
        if !self.pan.is_empty() {
            my_size += ::protobuf::rt::string_size(86, &self.pan);
        }
        if self.limit_amt != 0. {
            my_size += 10;
        }
        if self.gross_adv != 0. {
            my_size += 10;
        }
        if self.exp_amt != 0. {
            my_size += 10;
        }
        if self.unvail_amt != 0. {
            my_size += 10;
        }
        if self.gold_gram != 0. {
            my_size += 10;
        }
        if !self.fund_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(92, &self.fund_flag);
        }
        if self.ltv_value != 0. {
            my_size += 10;
        }
        if self.pt_i64_1 != 0 {
            my_size += ::protobuf::rt::value_size(94, self.pt_i64_1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_i64_2 != 0 {
            my_size += ::protobuf::rt::value_size(95, self.pt_i64_2, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_i64_3 != 0 {
            my_size += ::protobuf::rt::value_size(96, self.pt_i64_3, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_i64_4 != 0 {
            my_size += ::protobuf::rt::value_size(97, self.pt_i64_4, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_i64_5 != 0 {
            my_size += ::protobuf::rt::value_size(98, self.pt_i64_5, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_f64_1 != 0. {
            my_size += 10;
        }
        if self.pt_f64_2 != 0. {
            my_size += 10;
        }
        if self.pt_f64_3 != 0. {
            my_size += 10;
        }
        if self.pt_f64_4 != 0. {
            my_size += 10;
        }
        if self.pt_f64_5 != 0. {
            my_size += 10;
        }
        if !self.pt_str_1.is_empty() {
            my_size += ::protobuf::rt::string_size(104, &self.pt_str_1);
        }
        if !self.pt_str_2.is_empty() {
            my_size += ::protobuf::rt::string_size(105, &self.pt_str_2);
        }
        if !self.pt_str_3.is_empty() {
            my_size += ::protobuf::rt::string_size(106, &self.pt_str_3);
        }
        if !self.pt_str_4.is_empty() {
            my_size += ::protobuf::rt::string_size(107, &self.pt_str_4);
        }
        if !self.pt_str_5.is_empty() {
            my_size += ::protobuf::rt::string_size(108, &self.pt_str_5);
        }
        if !self.org_code.is_empty() {
            my_size += ::protobuf::rt::string_size(109, &self.org_code);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.acc_no.is_empty() {
            os.write_string(1, &self.acc_no)?;
        }
        if !self.acnts_internal_acnum.is_empty() {
            os.write_string(2, &self.acnts_internal_acnum)?;
        }
        if self.acnts_brn_cd != 0 {
            os.write_int64(3, self.acnts_brn_cd)?;
        }
        if self.acnts_client_num != 0 {
            os.write_int64(4, self.acnts_client_num)?;
        }
        if self.ucic != 0 {
            os.write_int64(5, self.ucic)?;
        }
        if !self.acnts_curr_cd.is_empty() {
            os.write_string(6, &self.acnts_curr_cd)?;
        }
        if self.acnts_prod_cd != 0 {
            os.write_int64(7, self.acnts_prod_cd)?;
        }
        if self.gl_cd != 0 {
            os.write_int64(8, self.gl_cd)?;
        }
        if self.acnts_opening_dt != 0 {
            os.write_int64(9, self.acnts_opening_dt)?;
        }
        if self.bal != 0. {
            os.write_double(10, self.bal)?;
        }
        if !self.bal_ccy.is_empty() {
            os.write_string(11, &self.bal_ccy)?;
        }
        if self.int_rt != 0. {
            os.write_double(12, self.int_rt)?;
        }
        if !self.int_type.is_empty() {
            os.write_string(13, &self.int_type)?;
        }
        if !self.int_bench.is_empty() {
            os.write_string(14, &self.int_bench)?;
        }
        if !self.int_spread.is_empty() {
            os.write_string(15, &self.int_spread)?;
        }
        if self.last_reset_dt != 0 {
            os.write_int64(16, self.last_reset_dt)?;
        }
        if self.next_reset_dt != 0 {
            os.write_int64(17, self.next_reset_dt)?;
        }
        if self.reset_no_of_months != 0 {
            os.write_int64(18, self.reset_no_of_months)?;
        }
        if self.disbursal_amount != 0. {
            os.write_double(19, self.disbursal_amount)?;
        }
        if self.last_emi_dt != 0 {
            os.write_int64(20, self.last_emi_dt)?;
        }
        if self.lm_exp != 0 {
            os.write_int64(21, self.lm_exp)?;
        }
        if self.lim != 0. {
            os.write_double(22, self.lim)?;
        }
        if !self.lm_ccy.is_empty() {
            os.write_string(23, &self.lm_ccy)?;
        }
        if !self.ext_rating_agency.is_empty() {
            os.write_string(24, &self.ext_rating_agency)?;
        }
        if !self.ext_rating.is_empty() {
            os.write_string(25, &self.ext_rating)?;
        }
        if !self.int_rating.is_empty() {
            os.write_string(26, &self.int_rating)?;
        }
        if !self.asset_cd.is_empty() {
            os.write_string(27, &self.asset_cd)?;
        }
        if self.prov_amt != 0. {
            os.write_double(28, self.prov_amt)?;
        }
        if self.prov_dt != 0 {
            os.write_int64(29, self.prov_dt)?;
        }
        if !self.constitn.is_empty() {
            os.write_string(30, &self.constitn)?;
        }
        if !self.loan_type.is_empty() {
            os.write_string(31, &self.loan_type)?;
        }
        if self.def_amt != 0. {
            os.write_double(32, self.def_amt)?;
        }
        if self.def_dt != 0 {
            os.write_int64(33, self.def_dt)?;
        }
        if self.last_paid_emi_dt != 0 {
            os.write_int64(34, self.last_paid_emi_dt)?;
        }
        if self.w4b_cd != 0 {
            os.write_int64(35, self.w4b_cd)?;
        }
        if !self.balm_llg.is_empty() {
            os.write_string(36, &self.balm_llg)?;
        }
        if !self.care_llg.is_empty() {
            os.write_string(37, &self.care_llg)?;
        }
        if !self.ba_llg.is_empty() {
            os.write_string(38, &self.ba_llg)?;
        }
        if !self.client_type.is_empty() {
            os.write_string(39, &self.client_type)?;
        }
        if !self.clients_name.is_empty() {
            os.write_string(40, &self.clients_name)?;
        }
        if !self.clients_bsr_type_flg.is_empty() {
            os.write_string(41, &self.clients_bsr_type_flg)?;
        }
        if !self.clients_busdivn_code.is_empty() {
            os.write_string(42, &self.clients_busdivn_code)?;
        }
        if !self.clients_const_code.is_empty() {
            os.write_string(43, &self.clients_const_code)?;
        }
        if !self.clients_pan_gir_num.is_empty() {
            os.write_string(44, &self.clients_pan_gir_num)?;
        }
        if !self.clients_risk_categorization.is_empty() {
            os.write_string(45, &self.clients_risk_categorization)?;
        }
        if !self.clients_risk_cntry.is_empty() {
            os.write_string(46, &self.clients_risk_cntry)?;
        }
        if !self.clients_segment_code.is_empty() {
            os.write_string(47, &self.clients_segment_code)?;
        }
        if !self.corpcl_orgn_qualifier.is_empty() {
            os.write_string(48, &self.corpcl_orgn_qualifier)?;
        }
        if !self.corpcl_indus_code.is_empty() {
            os.write_string(49, &self.corpcl_indus_code)?;
        }
        if !self.corpcl_nature_of_bus1.is_empty() {
            os.write_string(50, &self.corpcl_nature_of_bus1)?;
        }
        if !self.corpcl_nature_of_bus2.is_empty() {
            os.write_string(51, &self.corpcl_nature_of_bus2)?;
        }
        if !self.corpcl_nature_of_bus3.is_empty() {
            os.write_string(52, &self.corpcl_nature_of_bus3)?;
        }
        if !self.corpcl_central_state_flg.is_empty() {
            os.write_string(53, &self.corpcl_central_state_flg)?;
        }
        if !self.corpcl_public_sector_flg.is_empty() {
            os.write_string(54, &self.corpcl_public_sector_flg)?;
        }
        if !self.corpcl_primary_dlr_flg.is_empty() {
            os.write_string(55, &self.corpcl_primary_dlr_flg)?;
        }
        if !self.corpcl_multilateral_bank.is_empty() {
            os.write_string(56, &self.corpcl_multilateral_bank)?;
        }
        if !self.corpcl_connp_inv_num.is_empty() {
            os.write_string(57, &self.corpcl_connp_inv_num)?;
        }
        if self.corpcl_bc_gross_turnover != 0. {
            os.write_double(58, self.corpcl_bc_gross_turnover)?;
        }
        if !self.npa_asset_cd.is_empty() {
            os.write_string(59, &self.npa_asset_cd)?;
        }
        if self.npa_dt != 0 {
            os.write_int64(60, self.npa_dt)?;
        }
        if self.acc_bal != 0. {
            os.write_double(61, self.acc_bal)?;
        }
        if self.pwo != 0. {
            os.write_double(62, self.pwo)?;
        }
        if self.ho_bal != 0. {
            os.write_double(63, self.ho_bal)?;
        }
        if self.npa_prov != 0. {
            os.write_double(64, self.npa_prov)?;
        }
        if self.ho_prov != 0. {
            os.write_double(65, self.ho_prov)?;
        }
        if self.suspence_bal != 0. {
            os.write_double(66, self.suspence_bal)?;
        }
        if self.suspence_writeoff != 0. {
            os.write_double(67, self.suspence_writeoff)?;
        }
        if self.ho_suspence != 0. {
            os.write_double(68, self.ho_suspence)?;
        }
        if self.claim != 0. {
            os.write_double(69, self.claim)?;
        }
        if self.primary != 0. {
            os.write_double(70, self.primary)?;
        }
        if self.col != 0. {
            os.write_double(71, self.col)?;
        }
        if !self.priority.is_empty() {
            os.write_string(72, &self.priority)?;
        }
        if !self.main_sector.is_empty() {
            os.write_string(73, &self.main_sector)?;
        }
        if !self.industry.is_empty() {
            os.write_string(74, &self.industry)?;
        }
        if self.npa_amt != 0. {
            os.write_double(75, self.npa_amt)?;
        }
        if !self.schedules.is_empty() {
            os.write_string(76, &self.schedules)?;
        }
        if self.sanc_dt != 0 {
            os.write_int64(77, self.sanc_dt)?;
        }
        if !self.occp_cd.is_empty() {
            os.write_string(78, &self.occp_cd)?;
        }
        if !self.sens_sec.is_empty() {
            os.write_string(79, &self.sens_sec)?;
        }
        if !self.prior_subtype.is_empty() {
            os.write_string(80, &self.prior_subtype)?;
        }
        if !self.restruct_flag.is_empty() {
            os.write_string(81, &self.restruct_flag)?;
        }
        if self.restruct_dt != 0 {
            os.write_int64(82, self.restruct_dt)?;
        }
        if !self.mor_prd.is_empty() {
            os.write_string(83, &self.mor_prd)?;
        }
        if !self.rating.is_empty() {
            os.write_string(84, &self.rating)?;
        }
        if !self.consitin.is_empty() {
            os.write_string(85, &self.consitin)?;
        }
        if !self.pan.is_empty() {
            os.write_string(86, &self.pan)?;
        }
        if self.limit_amt != 0. {
            os.write_double(87, self.limit_amt)?;
        }
        if self.gross_adv != 0. {
            os.write_double(88, self.gross_adv)?;
        }
        if self.exp_amt != 0. {
            os.write_double(89, self.exp_amt)?;
        }
        if self.unvail_amt != 0. {
            os.write_double(90, self.unvail_amt)?;
        }
        if self.gold_gram != 0. {
            os.write_double(91, self.gold_gram)?;
        }
        if !self.fund_flag.is_empty() {
            os.write_string(92, &self.fund_flag)?;
        }
        if self.ltv_value != 0. {
            os.write_double(93, self.ltv_value)?;
        }
        if self.pt_i64_1 != 0 {
            os.write_int64(94, self.pt_i64_1)?;
        }
        if self.pt_i64_2 != 0 {
            os.write_int64(95, self.pt_i64_2)?;
        }
        if self.pt_i64_3 != 0 {
            os.write_int64(96, self.pt_i64_3)?;
        }
        if self.pt_i64_4 != 0 {
            os.write_int64(97, self.pt_i64_4)?;
        }
        if self.pt_i64_5 != 0 {
            os.write_int64(98, self.pt_i64_5)?;
        }
        if self.pt_f64_1 != 0. {
            os.write_double(99, self.pt_f64_1)?;
        }
        if self.pt_f64_2 != 0. {
            os.write_double(100, self.pt_f64_2)?;
        }
        if self.pt_f64_3 != 0. {
            os.write_double(101, self.pt_f64_3)?;
        }
        if self.pt_f64_4 != 0. {
            os.write_double(102, self.pt_f64_4)?;
        }
        if self.pt_f64_5 != 0. {
            os.write_double(103, self.pt_f64_5)?;
        }
        if !self.pt_str_1.is_empty() {
            os.write_string(104, &self.pt_str_1)?;
        }
        if !self.pt_str_2.is_empty() {
            os.write_string(105, &self.pt_str_2)?;
        }
        if !self.pt_str_3.is_empty() {
            os.write_string(106, &self.pt_str_3)?;
        }
        if !self.pt_str_4.is_empty() {
            os.write_string(107, &self.pt_str_4)?;
        }
        if !self.pt_str_5.is_empty() {
            os.write_string(108, &self.pt_str_5)?;
        }
        if !self.org_code.is_empty() {
            os.write_string(109, &self.org_code)?;
        }
        for v in &self.cashflows {
            os.write_tag(110, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Account {
        Account::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acc_no",
                |m: &Account| { &m.acc_no },
                |m: &mut Account| { &mut m.acc_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acnts_internal_acnum",
                |m: &Account| { &m.acnts_internal_acnum },
                |m: &mut Account| { &mut m.acnts_internal_acnum },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "acnts_brn_cd",
                |m: &Account| { &m.acnts_brn_cd },
                |m: &mut Account| { &mut m.acnts_brn_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "acnts_client_num",
                |m: &Account| { &m.acnts_client_num },
                |m: &mut Account| { &mut m.acnts_client_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ucic",
                |m: &Account| { &m.ucic },
                |m: &mut Account| { &mut m.ucic },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "acnts_curr_cd",
                |m: &Account| { &m.acnts_curr_cd },
                |m: &mut Account| { &mut m.acnts_curr_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "acnts_prod_cd",
                |m: &Account| { &m.acnts_prod_cd },
                |m: &mut Account| { &mut m.acnts_prod_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "gl_cd",
                |m: &Account| { &m.gl_cd },
                |m: &mut Account| { &mut m.gl_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "acnts_opening_dt",
                |m: &Account| { &m.acnts_opening_dt },
                |m: &mut Account| { &mut m.acnts_opening_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bal",
                |m: &Account| { &m.bal },
                |m: &mut Account| { &mut m.bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bal_ccy",
                |m: &Account| { &m.bal_ccy },
                |m: &mut Account| { &mut m.bal_ccy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_rt",
                |m: &Account| { &m.int_rt },
                |m: &mut Account| { &mut m.int_rt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_type",
                |m: &Account| { &m.int_type },
                |m: &mut Account| { &mut m.int_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_bench",
                |m: &Account| { &m.int_bench },
                |m: &mut Account| { &mut m.int_bench },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_spread",
                |m: &Account| { &m.int_spread },
                |m: &mut Account| { &mut m.int_spread },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_reset_dt",
                |m: &Account| { &m.last_reset_dt },
                |m: &mut Account| { &mut m.last_reset_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_reset_dt",
                |m: &Account| { &m.next_reset_dt },
                |m: &mut Account| { &mut m.next_reset_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "reset_no_of_months",
                |m: &Account| { &m.reset_no_of_months },
                |m: &mut Account| { &mut m.reset_no_of_months },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "disbursal_amount",
                |m: &Account| { &m.disbursal_amount },
                |m: &mut Account| { &mut m.disbursal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_emi_dt",
                |m: &Account| { &m.last_emi_dt },
                |m: &mut Account| { &mut m.last_emi_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "lm_exp",
                |m: &Account| { &m.lm_exp },
                |m: &mut Account| { &mut m.lm_exp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "lim",
                |m: &Account| { &m.lim },
                |m: &mut Account| { &mut m.lim },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "lm_ccy",
                |m: &Account| { &m.lm_ccy },
                |m: &mut Account| { &mut m.lm_ccy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ext_rating_agency",
                |m: &Account| { &m.ext_rating_agency },
                |m: &mut Account| { &mut m.ext_rating_agency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ext_rating",
                |m: &Account| { &m.ext_rating },
                |m: &mut Account| { &mut m.ext_rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_rating",
                |m: &Account| { &m.int_rating },
                |m: &mut Account| { &mut m.int_rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_cd",
                |m: &Account| { &m.asset_cd },
                |m: &mut Account| { &mut m.asset_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "prov_amt",
                |m: &Account| { &m.prov_amt },
                |m: &mut Account| { &mut m.prov_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "prov_dt",
                |m: &Account| { &m.prov_dt },
                |m: &mut Account| { &mut m.prov_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "constitn",
                |m: &Account| { &m.constitn },
                |m: &mut Account| { &mut m.constitn },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "loan_type",
                |m: &Account| { &m.loan_type },
                |m: &mut Account| { &mut m.loan_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "def_amt",
                |m: &Account| { &m.def_amt },
                |m: &mut Account| { &mut m.def_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "def_dt",
                |m: &Account| { &m.def_dt },
                |m: &mut Account| { &mut m.def_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_paid_emi_dt",
                |m: &Account| { &m.last_paid_emi_dt },
                |m: &mut Account| { &mut m.last_paid_emi_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "w4b_cd",
                |m: &Account| { &m.w4b_cd },
                |m: &mut Account| { &mut m.w4b_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "balm_llg",
                |m: &Account| { &m.balm_llg },
                |m: &mut Account| { &mut m.balm_llg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "care_llg",
                |m: &Account| { &m.care_llg },
                |m: &mut Account| { &mut m.care_llg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ba_llg",
                |m: &Account| { &m.ba_llg },
                |m: &mut Account| { &mut m.ba_llg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_type",
                |m: &Account| { &m.client_type },
                |m: &mut Account| { &mut m.client_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_name",
                |m: &Account| { &m.clients_name },
                |m: &mut Account| { &mut m.clients_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_bsr_type_flg",
                |m: &Account| { &m.clients_bsr_type_flg },
                |m: &mut Account| { &mut m.clients_bsr_type_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_busdivn_code",
                |m: &Account| { &m.clients_busdivn_code },
                |m: &mut Account| { &mut m.clients_busdivn_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_const_code",
                |m: &Account| { &m.clients_const_code },
                |m: &mut Account| { &mut m.clients_const_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_pan_gir_num",
                |m: &Account| { &m.clients_pan_gir_num },
                |m: &mut Account| { &mut m.clients_pan_gir_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_risk_categorization",
                |m: &Account| { &m.clients_risk_categorization },
                |m: &mut Account| { &mut m.clients_risk_categorization },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_risk_cntry",
                |m: &Account| { &m.clients_risk_cntry },
                |m: &mut Account| { &mut m.clients_risk_cntry },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_segment_code",
                |m: &Account| { &m.clients_segment_code },
                |m: &mut Account| { &mut m.clients_segment_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_orgn_qualifier",
                |m: &Account| { &m.corpcl_orgn_qualifier },
                |m: &mut Account| { &mut m.corpcl_orgn_qualifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_indus_code",
                |m: &Account| { &m.corpcl_indus_code },
                |m: &mut Account| { &mut m.corpcl_indus_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_nature_of_bus1",
                |m: &Account| { &m.corpcl_nature_of_bus1 },
                |m: &mut Account| { &mut m.corpcl_nature_of_bus1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_nature_of_bus2",
                |m: &Account| { &m.corpcl_nature_of_bus2 },
                |m: &mut Account| { &mut m.corpcl_nature_of_bus2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_nature_of_bus3",
                |m: &Account| { &m.corpcl_nature_of_bus3 },
                |m: &mut Account| { &mut m.corpcl_nature_of_bus3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_central_state_flg",
                |m: &Account| { &m.corpcl_central_state_flg },
                |m: &mut Account| { &mut m.corpcl_central_state_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_public_sector_flg",
                |m: &Account| { &m.corpcl_public_sector_flg },
                |m: &mut Account| { &mut m.corpcl_public_sector_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_primary_dlr_flg",
                |m: &Account| { &m.corpcl_primary_dlr_flg },
                |m: &mut Account| { &mut m.corpcl_primary_dlr_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_multilateral_bank",
                |m: &Account| { &m.corpcl_multilateral_bank },
                |m: &mut Account| { &mut m.corpcl_multilateral_bank },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_connp_inv_num",
                |m: &Account| { &m.corpcl_connp_inv_num },
                |m: &mut Account| { &mut m.corpcl_connp_inv_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "corpcl_bc_gross_turnover",
                |m: &Account| { &m.corpcl_bc_gross_turnover },
                |m: &mut Account| { &mut m.corpcl_bc_gross_turnover },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "npa_asset_cd",
                |m: &Account| { &m.npa_asset_cd },
                |m: &mut Account| { &mut m.npa_asset_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "npa_dt",
                |m: &Account| { &m.npa_dt },
                |m: &mut Account| { &mut m.npa_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "acc_bal",
                |m: &Account| { &m.acc_bal },
                |m: &mut Account| { &mut m.acc_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pwo",
                |m: &Account| { &m.pwo },
                |m: &mut Account| { &mut m.pwo },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ho_bal",
                |m: &Account| { &m.ho_bal },
                |m: &mut Account| { &mut m.ho_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "npa_prov",
                |m: &Account| { &m.npa_prov },
                |m: &mut Account| { &mut m.npa_prov },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ho_prov",
                |m: &Account| { &m.ho_prov },
                |m: &mut Account| { &mut m.ho_prov },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "suspence_bal",
                |m: &Account| { &m.suspence_bal },
                |m: &mut Account| { &mut m.suspence_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "suspence_writeoff",
                |m: &Account| { &m.suspence_writeoff },
                |m: &mut Account| { &mut m.suspence_writeoff },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ho_suspence",
                |m: &Account| { &m.ho_suspence },
                |m: &mut Account| { &mut m.ho_suspence },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "claim",
                |m: &Account| { &m.claim },
                |m: &mut Account| { &mut m.claim },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "primary",
                |m: &Account| { &m.primary },
                |m: &mut Account| { &mut m.primary },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "col",
                |m: &Account| { &m.col },
                |m: &mut Account| { &mut m.col },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "priority",
                |m: &Account| { &m.priority },
                |m: &mut Account| { &mut m.priority },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "main_sector",
                |m: &Account| { &m.main_sector },
                |m: &mut Account| { &mut m.main_sector },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "industry",
                |m: &Account| { &m.industry },
                |m: &mut Account| { &mut m.industry },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "npa_amt",
                |m: &Account| { &m.npa_amt },
                |m: &mut Account| { &mut m.npa_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "schedules",
                |m: &Account| { &m.schedules },
                |m: &mut Account| { &mut m.schedules },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "sanc_dt",
                |m: &Account| { &m.sanc_dt },
                |m: &mut Account| { &mut m.sanc_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "occp_cd",
                |m: &Account| { &m.occp_cd },
                |m: &mut Account| { &mut m.occp_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sens_sec",
                |m: &Account| { &m.sens_sec },
                |m: &mut Account| { &mut m.sens_sec },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prior_subtype",
                |m: &Account| { &m.prior_subtype },
                |m: &mut Account| { &mut m.prior_subtype },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "restruct_flag",
                |m: &Account| { &m.restruct_flag },
                |m: &mut Account| { &mut m.restruct_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "restruct_dt",
                |m: &Account| { &m.restruct_dt },
                |m: &mut Account| { &mut m.restruct_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mor_prd",
                |m: &Account| { &m.mor_prd },
                |m: &mut Account| { &mut m.mor_prd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rating",
                |m: &Account| { &m.rating },
                |m: &mut Account| { &mut m.rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "consitin",
                |m: &Account| { &m.consitin },
                |m: &mut Account| { &mut m.consitin },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pan",
                |m: &Account| { &m.pan },
                |m: &mut Account| { &mut m.pan },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "limit_amt",
                |m: &Account| { &m.limit_amt },
                |m: &mut Account| { &mut m.limit_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "gross_adv",
                |m: &Account| { &m.gross_adv },
                |m: &mut Account| { &mut m.gross_adv },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "exp_amt",
                |m: &Account| { &m.exp_amt },
                |m: &mut Account| { &mut m.exp_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "unvail_amt",
                |m: &Account| { &m.unvail_amt },
                |m: &mut Account| { &mut m.unvail_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "gold_gram",
                |m: &Account| { &m.gold_gram },
                |m: &mut Account| { &mut m.gold_gram },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fund_flag",
                |m: &Account| { &m.fund_flag },
                |m: &mut Account| { &mut m.fund_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ltv_value",
                |m: &Account| { &m.ltv_value },
                |m: &mut Account| { &mut m.ltv_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_1",
                |m: &Account| { &m.pt_i64_1 },
                |m: &mut Account| { &mut m.pt_i64_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_2",
                |m: &Account| { &m.pt_i64_2 },
                |m: &mut Account| { &mut m.pt_i64_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_3",
                |m: &Account| { &m.pt_i64_3 },
                |m: &mut Account| { &mut m.pt_i64_3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_4",
                |m: &Account| { &m.pt_i64_4 },
                |m: &mut Account| { &mut m.pt_i64_4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_5",
                |m: &Account| { &m.pt_i64_5 },
                |m: &mut Account| { &mut m.pt_i64_5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_1",
                |m: &Account| { &m.pt_f64_1 },
                |m: &mut Account| { &mut m.pt_f64_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_2",
                |m: &Account| { &m.pt_f64_2 },
                |m: &mut Account| { &mut m.pt_f64_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_3",
                |m: &Account| { &m.pt_f64_3 },
                |m: &mut Account| { &mut m.pt_f64_3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_4",
                |m: &Account| { &m.pt_f64_4 },
                |m: &mut Account| { &mut m.pt_f64_4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_5",
                |m: &Account| { &m.pt_f64_5 },
                |m: &mut Account| { &mut m.pt_f64_5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pt_str_1",
                |m: &Account| { &m.pt_str_1 },
                |m: &mut Account| { &mut m.pt_str_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pt_str_2",
                |m: &Account| { &m.pt_str_2 },
                |m: &mut Account| { &mut m.pt_str_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pt_str_3",
                |m: &Account| { &m.pt_str_3 },
                |m: &mut Account| { &mut m.pt_str_3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pt_str_4",
                |m: &Account| { &m.pt_str_4 },
                |m: &mut Account| { &mut m.pt_str_4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pt_str_5",
                |m: &Account| { &m.pt_str_5 },
                |m: &mut Account| { &mut m.pt_str_5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "org_code",
                |m: &Account| { &m.org_code },
                |m: &mut Account| { &mut m.org_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &Account| { &m.cashflows },
                |m: &mut Account| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Account>(
                "Account",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Account {
        static instance: ::protobuf::rt::LazyV2<Account> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Account::new)
    }
}

impl ::protobuf::Clear for Account {
    fn clear(&mut self) {
        self.acc_no.clear();
        self.acnts_internal_acnum.clear();
        self.acnts_brn_cd = 0;
        self.acnts_client_num = 0;
        self.ucic = 0;
        self.acnts_curr_cd.clear();
        self.acnts_prod_cd = 0;
        self.gl_cd = 0;
        self.acnts_opening_dt = 0;
        self.bal = 0.;
        self.bal_ccy.clear();
        self.int_rt = 0.;
        self.int_type.clear();
        self.int_bench.clear();
        self.int_spread.clear();
        self.last_reset_dt = 0;
        self.next_reset_dt = 0;
        self.reset_no_of_months = 0;
        self.disbursal_amount = 0.;
        self.last_emi_dt = 0;
        self.lm_exp = 0;
        self.lim = 0.;
        self.lm_ccy.clear();
        self.ext_rating_agency.clear();
        self.ext_rating.clear();
        self.int_rating.clear();
        self.asset_cd.clear();
        self.prov_amt = 0.;
        self.prov_dt = 0;
        self.constitn.clear();
        self.loan_type.clear();
        self.def_amt = 0.;
        self.def_dt = 0;
        self.last_paid_emi_dt = 0;
        self.w4b_cd = 0;
        self.balm_llg.clear();
        self.care_llg.clear();
        self.ba_llg.clear();
        self.client_type.clear();
        self.clients_name.clear();
        self.clients_bsr_type_flg.clear();
        self.clients_busdivn_code.clear();
        self.clients_const_code.clear();
        self.clients_pan_gir_num.clear();
        self.clients_risk_categorization.clear();
        self.clients_risk_cntry.clear();
        self.clients_segment_code.clear();
        self.corpcl_orgn_qualifier.clear();
        self.corpcl_indus_code.clear();
        self.corpcl_nature_of_bus1.clear();
        self.corpcl_nature_of_bus2.clear();
        self.corpcl_nature_of_bus3.clear();
        self.corpcl_central_state_flg.clear();
        self.corpcl_public_sector_flg.clear();
        self.corpcl_primary_dlr_flg.clear();
        self.corpcl_multilateral_bank.clear();
        self.corpcl_connp_inv_num.clear();
        self.corpcl_bc_gross_turnover = 0.;
        self.npa_asset_cd.clear();
        self.npa_dt = 0;
        self.acc_bal = 0.;
        self.pwo = 0.;
        self.ho_bal = 0.;
        self.npa_prov = 0.;
        self.ho_prov = 0.;
        self.suspence_bal = 0.;
        self.suspence_writeoff = 0.;
        self.ho_suspence = 0.;
        self.claim = 0.;
        self.primary = 0.;
        self.col = 0.;
        self.priority.clear();
        self.main_sector.clear();
        self.industry.clear();
        self.npa_amt = 0.;
        self.schedules.clear();
        self.sanc_dt = 0;
        self.occp_cd.clear();
        self.sens_sec.clear();
        self.prior_subtype.clear();
        self.restruct_flag.clear();
        self.restruct_dt = 0;
        self.mor_prd.clear();
        self.rating.clear();
        self.consitin.clear();
        self.pan.clear();
        self.limit_amt = 0.;
        self.gross_adv = 0.;
        self.exp_amt = 0.;
        self.unvail_amt = 0.;
        self.gold_gram = 0.;
        self.fund_flag.clear();
        self.ltv_value = 0.;
        self.pt_i64_1 = 0;
        self.pt_i64_2 = 0;
        self.pt_i64_3 = 0;
        self.pt_i64_4 = 0;
        self.pt_i64_5 = 0;
        self.pt_f64_1 = 0.;
        self.pt_f64_2 = 0.;
        self.pt_f64_3 = 0.;
        self.pt_f64_4 = 0.;
        self.pt_f64_5 = 0.;
        self.pt_str_1.clear();
        self.pt_str_2.clear();
        self.pt_str_3.clear();
        self.pt_str_4.clear();
        self.pt_str_5.clear();
        self.org_code.clear();
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fcsb_loans.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\
    \x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prin\
    Amt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\x85\x1c\n\x07Accou\
    nt\x12\x15\n\x06acc_no\x18\x01\x20\x01(\tR\x05accNo\x120\n\x14acnts_inte\
    rnal_acnum\x18\x02\x20\x01(\tR\x12acntsInternalAcnum\x12\x20\n\x0cacnts_\
    brn_cd\x18\x03\x20\x01(\x03R\nacntsBrnCd\x12(\n\x10acnts_client_num\x18\
    \x04\x20\x01(\x03R\x0eacntsClientNum\x12\x12\n\x04ucic\x18\x05\x20\x01(\
    \x03R\x04ucic\x12\"\n\racnts_curr_cd\x18\x06\x20\x01(\tR\x0bacntsCurrCd\
    \x12\"\n\racnts_prod_cd\x18\x07\x20\x01(\x03R\x0bacntsProdCd\x12\x13\n\
    \x05gl_cd\x18\x08\x20\x01(\x03R\x04glCd\x12(\n\x10acnts_opening_dt\x18\t\
    \x20\x01(\x03R\x0eacntsOpeningDt\x12\x10\n\x03bal\x18\n\x20\x01(\x01R\
    \x03bal\x12\x17\n\x07bal_ccy\x18\x0b\x20\x01(\tR\x06balCcy\x12\x15\n\x06\
    int_rt\x18\x0c\x20\x01(\x01R\x05intRt\x12\x19\n\x08int_type\x18\r\x20\
    \x01(\tR\x07intType\x12\x1b\n\tint_bench\x18\x0e\x20\x01(\tR\x08intBench\
    \x12\x1d\n\nint_spread\x18\x0f\x20\x01(\tR\tintSpread\x12\"\n\rlast_rese\
    t_dt\x18\x10\x20\x01(\x03R\x0blastResetDt\x12\"\n\rnext_reset_dt\x18\x11\
    \x20\x01(\x03R\x0bnextResetDt\x12+\n\x12reset_no_of_months\x18\x12\x20\
    \x01(\x03R\x0fresetNoOfMonths\x12)\n\x10disbursal_amount\x18\x13\x20\x01\
    (\x01R\x0fdisbursalAmount\x12\x1e\n\x0blast_emi_dt\x18\x14\x20\x01(\x03R\
    \tlastEmiDt\x12\x15\n\x06lm_exp\x18\x15\x20\x01(\x03R\x05lmExp\x12\x10\n\
    \x03lim\x18\x16\x20\x01(\x01R\x03lim\x12\x15\n\x06lm_ccy\x18\x17\x20\x01\
    (\tR\x05lmCcy\x12*\n\x11ext_rating_agency\x18\x18\x20\x01(\tR\x0fextRati\
    ngAgency\x12\x1d\n\next_rating\x18\x19\x20\x01(\tR\textRating\x12\x1d\n\
    \nint_rating\x18\x1a\x20\x01(\tR\tintRating\x12\x19\n\x08asset_cd\x18\
    \x1b\x20\x01(\tR\x07assetCd\x12\x19\n\x08prov_amt\x18\x1c\x20\x01(\x01R\
    \x07provAmt\x12\x17\n\x07prov_dt\x18\x1d\x20\x01(\x03R\x06provDt\x12\x1a\
    \n\x08constitn\x18\x1e\x20\x01(\tR\x08constitn\x12\x1b\n\tloan_type\x18\
    \x1f\x20\x01(\tR\x08loanType\x12\x17\n\x07def_amt\x18\x20\x20\x01(\x01R\
    \x06defAmt\x12\x15\n\x06def_dt\x18!\x20\x01(\x03R\x05defDt\x12'\n\x10las\
    t_paid_emi_dt\x18\"\x20\x01(\x03R\rlastPaidEmiDt\x12\x15\n\x06w4b_cd\x18\
    #\x20\x01(\x03R\x05w4bCd\x12\x19\n\x08balm_llg\x18$\x20\x01(\tR\x07balmL\
    lg\x12\x19\n\x08care_llg\x18%\x20\x01(\tR\x07careLlg\x12\x15\n\x06ba_llg\
    \x18&\x20\x01(\tR\x05baLlg\x12\x1f\n\x0bclient_type\x18'\x20\x01(\tR\ncl\
    ientType\x12!\n\x0cclients_name\x18(\x20\x01(\tR\x0bclientsName\x12/\n\
    \x14clients_bsr_type_flg\x18)\x20\x01(\tR\x11clientsBsrTypeFlg\x120\n\
    \x14clients_busdivn_code\x18*\x20\x01(\tR\x12clientsBusdivnCode\x12,\n\
    \x12clients_const_code\x18+\x20\x01(\tR\x10clientsConstCode\x12-\n\x13cl\
    ients_pan_gir_num\x18,\x20\x01(\tR\x10clientsPanGirNum\x12>\n\x1bclients\
    _risk_categorization\x18-\x20\x01(\tR\x19clientsRiskCategorization\x12,\
    \n\x12clients_risk_cntry\x18.\x20\x01(\tR\x10clientsRiskCntry\x120\n\x14\
    clients_segment_code\x18/\x20\x01(\tR\x12clientsSegmentCode\x122\n\x15co\
    rpcl_orgn_qualifier\x180\x20\x01(\tR\x13corpclOrgnQualifier\x12*\n\x11co\
    rpcl_indus_code\x181\x20\x01(\tR\x0fcorpclIndusCode\x121\n\x15corpcl_nat\
    ure_of_bus1\x182\x20\x01(\tR\x12corpclNatureOfBus1\x121\n\x15corpcl_natu\
    re_of_bus2\x183\x20\x01(\tR\x12corpclNatureOfBus2\x121\n\x15corpcl_natur\
    e_of_bus3\x184\x20\x01(\tR\x12corpclNatureOfBus3\x127\n\x18corpcl_centra\
    l_state_flg\x185\x20\x01(\tR\x15corpclCentralStateFlg\x127\n\x18corpcl_p\
    ublic_sector_flg\x186\x20\x01(\tR\x15corpclPublicSectorFlg\x123\n\x16cor\
    pcl_primary_dlr_flg\x187\x20\x01(\tR\x13corpclPrimaryDlrFlg\x128\n\x18co\
    rpcl_multilateral_bank\x188\x20\x01(\tR\x16corpclMultilateralBank\x12/\n\
    \x14corpcl_connp_inv_num\x189\x20\x01(\tR\x11corpclConnpInvNum\x127\n\
    \x18corpcl_bc_gross_turnover\x18:\x20\x01(\x01R\x15corpclBcGrossTurnover\
    \x12\x20\n\x0cnpa_asset_cd\x18;\x20\x01(\tR\nnpaAssetCd\x12\x15\n\x06npa\
    _dt\x18<\x20\x01(\x03R\x05npaDt\x12\x17\n\x07acc_bal\x18=\x20\x01(\x01R\
    \x06accBal\x12\x10\n\x03pwo\x18>\x20\x01(\x01R\x03pwo\x12\x15\n\x06ho_ba\
    l\x18?\x20\x01(\x01R\x05hoBal\x12\x19\n\x08npa_prov\x18@\x20\x01(\x01R\
    \x07npaProv\x12\x17\n\x07ho_prov\x18A\x20\x01(\x01R\x06hoProv\x12!\n\x0c\
    suspence_bal\x18B\x20\x01(\x01R\x0bsuspenceBal\x12+\n\x11suspence_writeo\
    ff\x18C\x20\x01(\x01R\x10suspenceWriteoff\x12\x1f\n\x0bho_suspence\x18D\
    \x20\x01(\x01R\nhoSuspence\x12\x14\n\x05claim\x18E\x20\x01(\x01R\x05clai\
    m\x12\x18\n\x07primary\x18F\x20\x01(\x01R\x07primary\x12\x10\n\x03col\
    \x18G\x20\x01(\x01R\x03col\x12\x1a\n\x08priority\x18H\x20\x01(\tR\x08pri\
    ority\x12\x1f\n\x0bmain_sector\x18I\x20\x01(\tR\nmainSector\x12\x1a\n\
    \x08industry\x18J\x20\x01(\tR\x08industry\x12\x17\n\x07npa_amt\x18K\x20\
    \x01(\x01R\x06npaAmt\x12\x1c\n\tschedules\x18L\x20\x01(\tR\tschedules\
    \x12\x17\n\x07sanc_dt\x18M\x20\x01(\x03R\x06sancDt\x12\x17\n\x07occp_cd\
    \x18N\x20\x01(\tR\x06occpCd\x12\x19\n\x08sens_sec\x18O\x20\x01(\tR\x07se\
    nsSec\x12#\n\rprior_subtype\x18P\x20\x01(\tR\x0cpriorSubtype\x12#\n\rres\
    truct_flag\x18Q\x20\x01(\tR\x0crestructFlag\x12\x1f\n\x0brestruct_dt\x18\
    R\x20\x01(\x03R\nrestructDt\x12\x17\n\x07mor_prd\x18S\x20\x01(\tR\x06mor\
    Prd\x12\x16\n\x06rating\x18T\x20\x01(\tR\x06rating\x12\x1a\n\x08consitin\
    \x18U\x20\x01(\tR\x08consitin\x12\x10\n\x03pan\x18V\x20\x01(\tR\x03pan\
    \x12\x1b\n\tlimit_amt\x18W\x20\x01(\x01R\x08limitAmt\x12\x1b\n\tgross_ad\
    v\x18X\x20\x01(\x01R\x08grossAdv\x12\x17\n\x07exp_amt\x18Y\x20\x01(\x01R\
    \x06expAmt\x12\x1d\n\nunvail_amt\x18Z\x20\x01(\x01R\tunvailAmt\x12\x1b\n\
    \tgold_gram\x18[\x20\x01(\x01R\x08goldGram\x12\x1b\n\tfund_flag\x18\\\
    \x20\x01(\tR\x08fundFlag\x12\x1b\n\tltv_value\x18]\x20\x01(\x01R\x08ltvV\
    alue\x12\x18\n\x08pt_i64_1\x18^\x20\x01(\x03R\x06ptI641\x12\x18\n\x08pt_\
    i64_2\x18_\x20\x01(\x03R\x06ptI642\x12\x18\n\x08pt_i64_3\x18`\x20\x01(\
    \x03R\x06ptI643\x12\x18\n\x08pt_i64_4\x18a\x20\x01(\x03R\x06ptI644\x12\
    \x18\n\x08pt_i64_5\x18b\x20\x01(\x03R\x06ptI645\x12\x18\n\x08pt_f64_1\
    \x18c\x20\x01(\x01R\x06ptF641\x12\x18\n\x08pt_f64_2\x18d\x20\x01(\x01R\
    \x06ptF642\x12\x18\n\x08pt_f64_3\x18e\x20\x01(\x01R\x06ptF643\x12\x18\n\
    \x08pt_f64_4\x18f\x20\x01(\x01R\x06ptF644\x12\x18\n\x08pt_f64_5\x18g\x20\
    \x01(\x01R\x06ptF645\x12\x18\n\x08pt_str_1\x18h\x20\x01(\tR\x06ptStr1\
    \x12\x18\n\x08pt_str_2\x18i\x20\x01(\tR\x06ptStr2\x12\x18\n\x08pt_str_3\
    \x18j\x20\x01(\tR\x06ptStr3\x12\x18\n\x08pt_str_4\x18k\x20\x01(\tR\x06pt\
    Str4\x12\x18\n\x08pt_str_5\x18l\x20\x01(\tR\x06ptStr5\x12\x19\n\x08org_c\
    ode\x18m\x20\x01(\tR\x07orgCode\x12'\n\tcashflows\x18n\x20\x03(\x0b2\t.C\
    ashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
