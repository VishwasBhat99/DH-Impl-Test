// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_amt",
                |m: &Cashflow| { &m.int_amt },
                |m: &mut Cashflow| { &mut m.int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "prin_amt",
                |m: &Cashflow| { &m.prin_amt },
                |m: &mut Cashflow| { &mut m.prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub portfolio: ::std::string::String,
    pub security_name: ::std::string::String,
    pub instrument_id: ::std::string::String,
    pub instrument_type: ::std::string::String,
    pub isin_code: ::std::string::String,
    pub slr_nslr: ::std::string::String,
    pub category: ::std::string::String,
    pub category_grp: ::std::string::String,
    pub sub_category: ::std::string::String,
    pub fa_classification: ::std::string::String,
    pub maturity_date: i64,
    pub coupon: f64,
    pub discount_intr_rate: f64,
    pub face_val_per_units: f64,
    pub quantity: f64,
    pub face_value: f64,
    pub wap: f64,
    pub yield_value: f64,
    pub book_value: f64,
    pub mvmnt_amount: f64,
    pub market_price: f64,
    pub market_yield: f64,
    pub market_value: f64,
    pub duration: f64,
    pub m_duration: f64,
    pub appreciation: f64,
    pub depreciation: f64,
    pub net_app_dep: f64,
    pub convexity: f64,
    pub pvbp: f64,
    pub absolute_pvbp: f64,
    pub amortization_asondate: f64,
    pub accounted_amortization: f64,
    pub unaccounted_amortization: f64,
    pub accrued_interest: f64,
    pub no_of_ca_skipped: ::std::string::String,
    pub ca_interest_not_receieved: ::std::string::String,
    pub total_interest: f64,
    pub encumbered_since_repo: ::std::string::String,
    pub amount_repo: f64,
    pub encumbered_since_ccil: ::std::string::String,
    pub amount_ccil: f64,
    pub encumbered_since_treps: ::std::string::String,
    pub amount_treps: f64,
    pub encumbered_since_mcxs: ::std::string::String,
    pub amount_mcxs: f64,
    pub encumbered_since_others: ::std::string::String,
    pub amount_others: f64,
    pub custody_pos_number: ::std::string::String,
    pub custody_pos_type: ::std::string::String,
    pub interest_frequency: ::std::string::String,
    pub interest_practice: ::std::string::String,
    pub put_date: i64,
    pub call_date: i64,
    pub last_coupon_date: i64,
    pub next_coupon_date: i64,
    pub issue_date: i64,
    pub place: ::std::string::String,
    pub country: ::std::string::String,
    pub booking_basis: ::std::string::String,
    pub residual_maturity: f64,
    pub issuer_name: ::std::string::String,
    pub market: ::std::string::String,
    pub gurantor: ::std::string::String,
    pub industry: ::std::string::String,
    pub sub_industry: ::std::string::String,
    pub borrower_category: ::std::string::String,
    pub asset_classification: ::std::string::String,
    pub asset_type: ::std::string::String,
    pub asset_category: ::std::string::String,
    pub old_security_id: ::std::string::String,
    pub curve1: ::std::string::String,
    pub listed: ::std::string::String,
    pub secured: ::std::string::String,
    pub quoted: ::std::string::String,
    pub borrower: ::std::string::String,
    pub extbank_ref: ::std::string::String,
    pub pan: ::std::string::String,
    pub intr_rating_agency: ::std::string::String,
    pub internal_rating: ::std::string::String,
    pub intr_rating_valid_from: i64,
    pub intr_rating_valid_till: i64,
    pub extrn_rating_agency: ::std::string::String,
    pub external_rating: ::std::string::String,
    pub extrn_rating_valid_from: i64,
    pub extrn_rating_valid_till: i64,
    pub liquid_status: ::std::string::String,
    pub asset_sub_class: ::std::string::String,
    pub hurdle_rating: ::std::string::String,
    pub external_rating_vs_hurdle: ::std::string::String,
    pub internal_rating_vs_hurdle: ::std::string::String,
    pub fsu: ::std::string::String,
    pub equity_seg: ::std::string::String,
    pub issuer_segr: ::std::string::String,
    pub restructuring: ::std::string::String,
    pub paid_up_share_captial: ::std::string::String,
    pub exempted_amount: f64,
    pub issuer_group: ::std::string::String,
    pub murram_market_value: f64,
    pub murram_depr: f64,
    pub var_settled_bv: f64,
    pub var_unsettled_bv: f64,
    pub var_settled_amount: f64,
    pub var_unsettled_amount: f64,
    pub kri_settled_qtd_fv: f64,
    pub basel_group: ::std::string::String,
    pub basel_sub_group: ::std::string::String,
    pub time_band: ::std::string::String,
    pub capital_charge_market_risk_rate: ::std::string::String,
    pub capital_charge_market_risk_amount: f64,
    pub trading_specif_risk_rate: f64,
    pub banking_specif_risk_rate: f64,
    pub trading_specif_risk_captial_charge: f64,
    pub banking_specif_risk_captial_charge: f64,
    pub mode_of_holding: ::std::string::String,
    pub issuer_rating_agency: ::std::string::String,
    pub issuer_rating: ::std::string::String,
    pub issuer_rating_valid_from: i64,
    pub issuer_rating_valid_till: i64,
    pub issuer_sub_industry: ::std::string::String,
    pub gl_code: ::std::string::String,
    pub interest_type: ::std::string::String,
    pub computed_mat_date: i64,
    pub cgl: ::std::string::String,
    pub group: ::std::string::String,
    pub llg: ::std::string::String,
    pub currency: ::std::string::String,
    pub mat_date_flag: ::std::string::String,
    pub concat_deal_id: ::std::string::String,
    pub concat_inst_id: ::std::string::String,
    pub concat_deal_n_slr_id: ::std::string::String,
    pub ftp_coupon_rate: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string portfolio = 1;


    pub fn get_portfolio(&self) -> &str {
        &self.portfolio
    }
    pub fn clear_portfolio(&mut self) {
        self.portfolio.clear();
    }

    // Param is passed by value, moved
    pub fn set_portfolio(&mut self, v: ::std::string::String) {
        self.portfolio = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_portfolio(&mut self) -> &mut ::std::string::String {
        &mut self.portfolio
    }

    // Take field
    pub fn take_portfolio(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.portfolio, ::std::string::String::new())
    }

    // string security_name = 2;


    pub fn get_security_name(&self) -> &str {
        &self.security_name
    }
    pub fn clear_security_name(&mut self) {
        self.security_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_security_name(&mut self, v: ::std::string::String) {
        self.security_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_security_name(&mut self) -> &mut ::std::string::String {
        &mut self.security_name
    }

    // Take field
    pub fn take_security_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.security_name, ::std::string::String::new())
    }

    // string instrument_id = 3;


    pub fn get_instrument_id(&self) -> &str {
        &self.instrument_id
    }
    pub fn clear_instrument_id(&mut self) {
        self.instrument_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_instrument_id(&mut self, v: ::std::string::String) {
        self.instrument_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instrument_id(&mut self) -> &mut ::std::string::String {
        &mut self.instrument_id
    }

    // Take field
    pub fn take_instrument_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instrument_id, ::std::string::String::new())
    }

    // string instrument_type = 4;


    pub fn get_instrument_type(&self) -> &str {
        &self.instrument_type
    }
    pub fn clear_instrument_type(&mut self) {
        self.instrument_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_instrument_type(&mut self, v: ::std::string::String) {
        self.instrument_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instrument_type(&mut self) -> &mut ::std::string::String {
        &mut self.instrument_type
    }

    // Take field
    pub fn take_instrument_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instrument_type, ::std::string::String::new())
    }

    // string isin_code = 5;


    pub fn get_isin_code(&self) -> &str {
        &self.isin_code
    }
    pub fn clear_isin_code(&mut self) {
        self.isin_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_isin_code(&mut self, v: ::std::string::String) {
        self.isin_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_isin_code(&mut self) -> &mut ::std::string::String {
        &mut self.isin_code
    }

    // Take field
    pub fn take_isin_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.isin_code, ::std::string::String::new())
    }

    // string slr_nslr = 6;


    pub fn get_slr_nslr(&self) -> &str {
        &self.slr_nslr
    }
    pub fn clear_slr_nslr(&mut self) {
        self.slr_nslr.clear();
    }

    // Param is passed by value, moved
    pub fn set_slr_nslr(&mut self, v: ::std::string::String) {
        self.slr_nslr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slr_nslr(&mut self) -> &mut ::std::string::String {
        &mut self.slr_nslr
    }

    // Take field
    pub fn take_slr_nslr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.slr_nslr, ::std::string::String::new())
    }

    // string category = 7;


    pub fn get_category(&self) -> &str {
        &self.category
    }
    pub fn clear_category(&mut self) {
        self.category.clear();
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        &mut self.category
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category, ::std::string::String::new())
    }

    // string category_grp = 8;


    pub fn get_category_grp(&self) -> &str {
        &self.category_grp
    }
    pub fn clear_category_grp(&mut self) {
        self.category_grp.clear();
    }

    // Param is passed by value, moved
    pub fn set_category_grp(&mut self, v: ::std::string::String) {
        self.category_grp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category_grp(&mut self) -> &mut ::std::string::String {
        &mut self.category_grp
    }

    // Take field
    pub fn take_category_grp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category_grp, ::std::string::String::new())
    }

    // string sub_category = 9;


    pub fn get_sub_category(&self) -> &str {
        &self.sub_category
    }
    pub fn clear_sub_category(&mut self) {
        self.sub_category.clear();
    }

    // Param is passed by value, moved
    pub fn set_sub_category(&mut self, v: ::std::string::String) {
        self.sub_category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sub_category(&mut self) -> &mut ::std::string::String {
        &mut self.sub_category
    }

    // Take field
    pub fn take_sub_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sub_category, ::std::string::String::new())
    }

    // string fa_classification = 10;


    pub fn get_fa_classification(&self) -> &str {
        &self.fa_classification
    }
    pub fn clear_fa_classification(&mut self) {
        self.fa_classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_fa_classification(&mut self, v: ::std::string::String) {
        self.fa_classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fa_classification(&mut self) -> &mut ::std::string::String {
        &mut self.fa_classification
    }

    // Take field
    pub fn take_fa_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fa_classification, ::std::string::String::new())
    }

    // int64 maturity_date = 11;


    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }
    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    // double coupon = 12;


    pub fn get_coupon(&self) -> f64 {
        self.coupon
    }
    pub fn clear_coupon(&mut self) {
        self.coupon = 0.;
    }

    // Param is passed by value, moved
    pub fn set_coupon(&mut self, v: f64) {
        self.coupon = v;
    }

    // double discount_intr_rate = 13;


    pub fn get_discount_intr_rate(&self) -> f64 {
        self.discount_intr_rate
    }
    pub fn clear_discount_intr_rate(&mut self) {
        self.discount_intr_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_discount_intr_rate(&mut self, v: f64) {
        self.discount_intr_rate = v;
    }

    // double face_val_per_units = 14;


    pub fn get_face_val_per_units(&self) -> f64 {
        self.face_val_per_units
    }
    pub fn clear_face_val_per_units(&mut self) {
        self.face_val_per_units = 0.;
    }

    // Param is passed by value, moved
    pub fn set_face_val_per_units(&mut self, v: f64) {
        self.face_val_per_units = v;
    }

    // double quantity = 15;


    pub fn get_quantity(&self) -> f64 {
        self.quantity
    }
    pub fn clear_quantity(&mut self) {
        self.quantity = 0.;
    }

    // Param is passed by value, moved
    pub fn set_quantity(&mut self, v: f64) {
        self.quantity = v;
    }

    // double face_value = 16;


    pub fn get_face_value(&self) -> f64 {
        self.face_value
    }
    pub fn clear_face_value(&mut self) {
        self.face_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_face_value(&mut self, v: f64) {
        self.face_value = v;
    }

    // double wap = 17;


    pub fn get_wap(&self) -> f64 {
        self.wap
    }
    pub fn clear_wap(&mut self) {
        self.wap = 0.;
    }

    // Param is passed by value, moved
    pub fn set_wap(&mut self, v: f64) {
        self.wap = v;
    }

    // double yield_value = 18;


    pub fn get_yield_value(&self) -> f64 {
        self.yield_value
    }
    pub fn clear_yield_value(&mut self) {
        self.yield_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_yield_value(&mut self, v: f64) {
        self.yield_value = v;
    }

    // double book_value = 19;


    pub fn get_book_value(&self) -> f64 {
        self.book_value
    }
    pub fn clear_book_value(&mut self) {
        self.book_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_book_value(&mut self, v: f64) {
        self.book_value = v;
    }

    // double mvmnt_amount = 20;


    pub fn get_mvmnt_amount(&self) -> f64 {
        self.mvmnt_amount
    }
    pub fn clear_mvmnt_amount(&mut self) {
        self.mvmnt_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mvmnt_amount(&mut self, v: f64) {
        self.mvmnt_amount = v;
    }

    // double market_price = 21;


    pub fn get_market_price(&self) -> f64 {
        self.market_price
    }
    pub fn clear_market_price(&mut self) {
        self.market_price = 0.;
    }

    // Param is passed by value, moved
    pub fn set_market_price(&mut self, v: f64) {
        self.market_price = v;
    }

    // double market_yield = 22;


    pub fn get_market_yield(&self) -> f64 {
        self.market_yield
    }
    pub fn clear_market_yield(&mut self) {
        self.market_yield = 0.;
    }

    // Param is passed by value, moved
    pub fn set_market_yield(&mut self, v: f64) {
        self.market_yield = v;
    }

    // double market_value = 23;


    pub fn get_market_value(&self) -> f64 {
        self.market_value
    }
    pub fn clear_market_value(&mut self) {
        self.market_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_market_value(&mut self, v: f64) {
        self.market_value = v;
    }

    // double duration = 24;


    pub fn get_duration(&self) -> f64 {
        self.duration
    }
    pub fn clear_duration(&mut self) {
        self.duration = 0.;
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: f64) {
        self.duration = v;
    }

    // double m_duration = 25;


    pub fn get_m_duration(&self) -> f64 {
        self.m_duration
    }
    pub fn clear_m_duration(&mut self) {
        self.m_duration = 0.;
    }

    // Param is passed by value, moved
    pub fn set_m_duration(&mut self, v: f64) {
        self.m_duration = v;
    }

    // double appreciation = 26;


    pub fn get_appreciation(&self) -> f64 {
        self.appreciation
    }
    pub fn clear_appreciation(&mut self) {
        self.appreciation = 0.;
    }

    // Param is passed by value, moved
    pub fn set_appreciation(&mut self, v: f64) {
        self.appreciation = v;
    }

    // double depreciation = 27;


    pub fn get_depreciation(&self) -> f64 {
        self.depreciation
    }
    pub fn clear_depreciation(&mut self) {
        self.depreciation = 0.;
    }

    // Param is passed by value, moved
    pub fn set_depreciation(&mut self, v: f64) {
        self.depreciation = v;
    }

    // double net_app_dep = 28;


    pub fn get_net_app_dep(&self) -> f64 {
        self.net_app_dep
    }
    pub fn clear_net_app_dep(&mut self) {
        self.net_app_dep = 0.;
    }

    // Param is passed by value, moved
    pub fn set_net_app_dep(&mut self, v: f64) {
        self.net_app_dep = v;
    }

    // double convexity = 29;


    pub fn get_convexity(&self) -> f64 {
        self.convexity
    }
    pub fn clear_convexity(&mut self) {
        self.convexity = 0.;
    }

    // Param is passed by value, moved
    pub fn set_convexity(&mut self, v: f64) {
        self.convexity = v;
    }

    // double pvbp = 30;


    pub fn get_pvbp(&self) -> f64 {
        self.pvbp
    }
    pub fn clear_pvbp(&mut self) {
        self.pvbp = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pvbp(&mut self, v: f64) {
        self.pvbp = v;
    }

    // double absolute_pvbp = 31;


    pub fn get_absolute_pvbp(&self) -> f64 {
        self.absolute_pvbp
    }
    pub fn clear_absolute_pvbp(&mut self) {
        self.absolute_pvbp = 0.;
    }

    // Param is passed by value, moved
    pub fn set_absolute_pvbp(&mut self, v: f64) {
        self.absolute_pvbp = v;
    }

    // double amortization_asondate = 32;


    pub fn get_amortization_asondate(&self) -> f64 {
        self.amortization_asondate
    }
    pub fn clear_amortization_asondate(&mut self) {
        self.amortization_asondate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amortization_asondate(&mut self, v: f64) {
        self.amortization_asondate = v;
    }

    // double accounted_amortization = 33;


    pub fn get_accounted_amortization(&self) -> f64 {
        self.accounted_amortization
    }
    pub fn clear_accounted_amortization(&mut self) {
        self.accounted_amortization = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accounted_amortization(&mut self, v: f64) {
        self.accounted_amortization = v;
    }

    // double unaccounted_amortization = 34;


    pub fn get_unaccounted_amortization(&self) -> f64 {
        self.unaccounted_amortization
    }
    pub fn clear_unaccounted_amortization(&mut self) {
        self.unaccounted_amortization = 0.;
    }

    // Param is passed by value, moved
    pub fn set_unaccounted_amortization(&mut self, v: f64) {
        self.unaccounted_amortization = v;
    }

    // double accrued_interest = 35;


    pub fn get_accrued_interest(&self) -> f64 {
        self.accrued_interest
    }
    pub fn clear_accrued_interest(&mut self) {
        self.accrued_interest = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accrued_interest(&mut self, v: f64) {
        self.accrued_interest = v;
    }

    // string no_of_ca_skipped = 36;


    pub fn get_no_of_ca_skipped(&self) -> &str {
        &self.no_of_ca_skipped
    }
    pub fn clear_no_of_ca_skipped(&mut self) {
        self.no_of_ca_skipped.clear();
    }

    // Param is passed by value, moved
    pub fn set_no_of_ca_skipped(&mut self, v: ::std::string::String) {
        self.no_of_ca_skipped = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_no_of_ca_skipped(&mut self) -> &mut ::std::string::String {
        &mut self.no_of_ca_skipped
    }

    // Take field
    pub fn take_no_of_ca_skipped(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.no_of_ca_skipped, ::std::string::String::new())
    }

    // string ca_interest_not_receieved = 37;


    pub fn get_ca_interest_not_receieved(&self) -> &str {
        &self.ca_interest_not_receieved
    }
    pub fn clear_ca_interest_not_receieved(&mut self) {
        self.ca_interest_not_receieved.clear();
    }

    // Param is passed by value, moved
    pub fn set_ca_interest_not_receieved(&mut self, v: ::std::string::String) {
        self.ca_interest_not_receieved = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ca_interest_not_receieved(&mut self) -> &mut ::std::string::String {
        &mut self.ca_interest_not_receieved
    }

    // Take field
    pub fn take_ca_interest_not_receieved(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ca_interest_not_receieved, ::std::string::String::new())
    }

    // double total_interest = 38;


    pub fn get_total_interest(&self) -> f64 {
        self.total_interest
    }
    pub fn clear_total_interest(&mut self) {
        self.total_interest = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest(&mut self, v: f64) {
        self.total_interest = v;
    }

    // string encumbered_since_repo = 39;


    pub fn get_encumbered_since_repo(&self) -> &str {
        &self.encumbered_since_repo
    }
    pub fn clear_encumbered_since_repo(&mut self) {
        self.encumbered_since_repo.clear();
    }

    // Param is passed by value, moved
    pub fn set_encumbered_since_repo(&mut self, v: ::std::string::String) {
        self.encumbered_since_repo = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encumbered_since_repo(&mut self) -> &mut ::std::string::String {
        &mut self.encumbered_since_repo
    }

    // Take field
    pub fn take_encumbered_since_repo(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.encumbered_since_repo, ::std::string::String::new())
    }

    // double amount_repo = 40;


    pub fn get_amount_repo(&self) -> f64 {
        self.amount_repo
    }
    pub fn clear_amount_repo(&mut self) {
        self.amount_repo = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amount_repo(&mut self, v: f64) {
        self.amount_repo = v;
    }

    // string encumbered_since_ccil = 41;


    pub fn get_encumbered_since_ccil(&self) -> &str {
        &self.encumbered_since_ccil
    }
    pub fn clear_encumbered_since_ccil(&mut self) {
        self.encumbered_since_ccil.clear();
    }

    // Param is passed by value, moved
    pub fn set_encumbered_since_ccil(&mut self, v: ::std::string::String) {
        self.encumbered_since_ccil = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encumbered_since_ccil(&mut self) -> &mut ::std::string::String {
        &mut self.encumbered_since_ccil
    }

    // Take field
    pub fn take_encumbered_since_ccil(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.encumbered_since_ccil, ::std::string::String::new())
    }

    // double amount_ccil = 42;


    pub fn get_amount_ccil(&self) -> f64 {
        self.amount_ccil
    }
    pub fn clear_amount_ccil(&mut self) {
        self.amount_ccil = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amount_ccil(&mut self, v: f64) {
        self.amount_ccil = v;
    }

    // string encumbered_since_treps = 43;


    pub fn get_encumbered_since_treps(&self) -> &str {
        &self.encumbered_since_treps
    }
    pub fn clear_encumbered_since_treps(&mut self) {
        self.encumbered_since_treps.clear();
    }

    // Param is passed by value, moved
    pub fn set_encumbered_since_treps(&mut self, v: ::std::string::String) {
        self.encumbered_since_treps = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encumbered_since_treps(&mut self) -> &mut ::std::string::String {
        &mut self.encumbered_since_treps
    }

    // Take field
    pub fn take_encumbered_since_treps(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.encumbered_since_treps, ::std::string::String::new())
    }

    // double amount_treps = 44;


    pub fn get_amount_treps(&self) -> f64 {
        self.amount_treps
    }
    pub fn clear_amount_treps(&mut self) {
        self.amount_treps = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amount_treps(&mut self, v: f64) {
        self.amount_treps = v;
    }

    // string encumbered_since_mcxs = 45;


    pub fn get_encumbered_since_mcxs(&self) -> &str {
        &self.encumbered_since_mcxs
    }
    pub fn clear_encumbered_since_mcxs(&mut self) {
        self.encumbered_since_mcxs.clear();
    }

    // Param is passed by value, moved
    pub fn set_encumbered_since_mcxs(&mut self, v: ::std::string::String) {
        self.encumbered_since_mcxs = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encumbered_since_mcxs(&mut self) -> &mut ::std::string::String {
        &mut self.encumbered_since_mcxs
    }

    // Take field
    pub fn take_encumbered_since_mcxs(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.encumbered_since_mcxs, ::std::string::String::new())
    }

    // double amount_mcxs = 46;


    pub fn get_amount_mcxs(&self) -> f64 {
        self.amount_mcxs
    }
    pub fn clear_amount_mcxs(&mut self) {
        self.amount_mcxs = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amount_mcxs(&mut self, v: f64) {
        self.amount_mcxs = v;
    }

    // string encumbered_since_others = 47;


    pub fn get_encumbered_since_others(&self) -> &str {
        &self.encumbered_since_others
    }
    pub fn clear_encumbered_since_others(&mut self) {
        self.encumbered_since_others.clear();
    }

    // Param is passed by value, moved
    pub fn set_encumbered_since_others(&mut self, v: ::std::string::String) {
        self.encumbered_since_others = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encumbered_since_others(&mut self) -> &mut ::std::string::String {
        &mut self.encumbered_since_others
    }

    // Take field
    pub fn take_encumbered_since_others(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.encumbered_since_others, ::std::string::String::new())
    }

    // double amount_others = 48;


    pub fn get_amount_others(&self) -> f64 {
        self.amount_others
    }
    pub fn clear_amount_others(&mut self) {
        self.amount_others = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amount_others(&mut self, v: f64) {
        self.amount_others = v;
    }

    // string custody_pos_number = 49;


    pub fn get_custody_pos_number(&self) -> &str {
        &self.custody_pos_number
    }
    pub fn clear_custody_pos_number(&mut self) {
        self.custody_pos_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_custody_pos_number(&mut self, v: ::std::string::String) {
        self.custody_pos_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custody_pos_number(&mut self) -> &mut ::std::string::String {
        &mut self.custody_pos_number
    }

    // Take field
    pub fn take_custody_pos_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custody_pos_number, ::std::string::String::new())
    }

    // string custody_pos_type = 50;


    pub fn get_custody_pos_type(&self) -> &str {
        &self.custody_pos_type
    }
    pub fn clear_custody_pos_type(&mut self) {
        self.custody_pos_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_custody_pos_type(&mut self, v: ::std::string::String) {
        self.custody_pos_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custody_pos_type(&mut self) -> &mut ::std::string::String {
        &mut self.custody_pos_type
    }

    // Take field
    pub fn take_custody_pos_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.custody_pos_type, ::std::string::String::new())
    }

    // string interest_frequency = 51;


    pub fn get_interest_frequency(&self) -> &str {
        &self.interest_frequency
    }
    pub fn clear_interest_frequency(&mut self) {
        self.interest_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_interest_frequency(&mut self, v: ::std::string::String) {
        self.interest_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interest_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.interest_frequency
    }

    // Take field
    pub fn take_interest_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interest_frequency, ::std::string::String::new())
    }

    // string interest_practice = 52;


    pub fn get_interest_practice(&self) -> &str {
        &self.interest_practice
    }
    pub fn clear_interest_practice(&mut self) {
        self.interest_practice.clear();
    }

    // Param is passed by value, moved
    pub fn set_interest_practice(&mut self, v: ::std::string::String) {
        self.interest_practice = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interest_practice(&mut self) -> &mut ::std::string::String {
        &mut self.interest_practice
    }

    // Take field
    pub fn take_interest_practice(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interest_practice, ::std::string::String::new())
    }

    // int64 put_date = 53;


    pub fn get_put_date(&self) -> i64 {
        self.put_date
    }
    pub fn clear_put_date(&mut self) {
        self.put_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_put_date(&mut self, v: i64) {
        self.put_date = v;
    }

    // int64 call_date = 54;


    pub fn get_call_date(&self) -> i64 {
        self.call_date
    }
    pub fn clear_call_date(&mut self) {
        self.call_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_call_date(&mut self, v: i64) {
        self.call_date = v;
    }

    // int64 last_coupon_date = 55;


    pub fn get_last_coupon_date(&self) -> i64 {
        self.last_coupon_date
    }
    pub fn clear_last_coupon_date(&mut self) {
        self.last_coupon_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_coupon_date(&mut self, v: i64) {
        self.last_coupon_date = v;
    }

    // int64 next_coupon_date = 56;


    pub fn get_next_coupon_date(&self) -> i64 {
        self.next_coupon_date
    }
    pub fn clear_next_coupon_date(&mut self) {
        self.next_coupon_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_coupon_date(&mut self, v: i64) {
        self.next_coupon_date = v;
    }

    // int64 issue_date = 57;


    pub fn get_issue_date(&self) -> i64 {
        self.issue_date
    }
    pub fn clear_issue_date(&mut self) {
        self.issue_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_issue_date(&mut self, v: i64) {
        self.issue_date = v;
    }

    // string place = 58;


    pub fn get_place(&self) -> &str {
        &self.place
    }
    pub fn clear_place(&mut self) {
        self.place.clear();
    }

    // Param is passed by value, moved
    pub fn set_place(&mut self, v: ::std::string::String) {
        self.place = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_place(&mut self) -> &mut ::std::string::String {
        &mut self.place
    }

    // Take field
    pub fn take_place(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.place, ::std::string::String::new())
    }

    // string country = 59;


    pub fn get_country(&self) -> &str {
        &self.country
    }
    pub fn clear_country(&mut self) {
        self.country.clear();
    }

    // Param is passed by value, moved
    pub fn set_country(&mut self, v: ::std::string::String) {
        self.country = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country(&mut self) -> &mut ::std::string::String {
        &mut self.country
    }

    // Take field
    pub fn take_country(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.country, ::std::string::String::new())
    }

    // string booking_basis = 60;


    pub fn get_booking_basis(&self) -> &str {
        &self.booking_basis
    }
    pub fn clear_booking_basis(&mut self) {
        self.booking_basis.clear();
    }

    // Param is passed by value, moved
    pub fn set_booking_basis(&mut self, v: ::std::string::String) {
        self.booking_basis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_booking_basis(&mut self) -> &mut ::std::string::String {
        &mut self.booking_basis
    }

    // Take field
    pub fn take_booking_basis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.booking_basis, ::std::string::String::new())
    }

    // double residual_maturity = 61;


    pub fn get_residual_maturity(&self) -> f64 {
        self.residual_maturity
    }
    pub fn clear_residual_maturity(&mut self) {
        self.residual_maturity = 0.;
    }

    // Param is passed by value, moved
    pub fn set_residual_maturity(&mut self, v: f64) {
        self.residual_maturity = v;
    }

    // string issuer_name = 62;


    pub fn get_issuer_name(&self) -> &str {
        &self.issuer_name
    }
    pub fn clear_issuer_name(&mut self) {
        self.issuer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer_name(&mut self, v: ::std::string::String) {
        self.issuer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer_name(&mut self) -> &mut ::std::string::String {
        &mut self.issuer_name
    }

    // Take field
    pub fn take_issuer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer_name, ::std::string::String::new())
    }

    // string market = 63;


    pub fn get_market(&self) -> &str {
        &self.market
    }
    pub fn clear_market(&mut self) {
        self.market.clear();
    }

    // Param is passed by value, moved
    pub fn set_market(&mut self, v: ::std::string::String) {
        self.market = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_market(&mut self) -> &mut ::std::string::String {
        &mut self.market
    }

    // Take field
    pub fn take_market(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.market, ::std::string::String::new())
    }

    // string gurantor = 64;


    pub fn get_gurantor(&self) -> &str {
        &self.gurantor
    }
    pub fn clear_gurantor(&mut self) {
        self.gurantor.clear();
    }

    // Param is passed by value, moved
    pub fn set_gurantor(&mut self, v: ::std::string::String) {
        self.gurantor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gurantor(&mut self) -> &mut ::std::string::String {
        &mut self.gurantor
    }

    // Take field
    pub fn take_gurantor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gurantor, ::std::string::String::new())
    }

    // string industry = 65;


    pub fn get_industry(&self) -> &str {
        &self.industry
    }
    pub fn clear_industry(&mut self) {
        self.industry.clear();
    }

    // Param is passed by value, moved
    pub fn set_industry(&mut self, v: ::std::string::String) {
        self.industry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_industry(&mut self) -> &mut ::std::string::String {
        &mut self.industry
    }

    // Take field
    pub fn take_industry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.industry, ::std::string::String::new())
    }

    // string sub_industry = 66;


    pub fn get_sub_industry(&self) -> &str {
        &self.sub_industry
    }
    pub fn clear_sub_industry(&mut self) {
        self.sub_industry.clear();
    }

    // Param is passed by value, moved
    pub fn set_sub_industry(&mut self, v: ::std::string::String) {
        self.sub_industry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sub_industry(&mut self) -> &mut ::std::string::String {
        &mut self.sub_industry
    }

    // Take field
    pub fn take_sub_industry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sub_industry, ::std::string::String::new())
    }

    // string borrower_category = 67;


    pub fn get_borrower_category(&self) -> &str {
        &self.borrower_category
    }
    pub fn clear_borrower_category(&mut self) {
        self.borrower_category.clear();
    }

    // Param is passed by value, moved
    pub fn set_borrower_category(&mut self, v: ::std::string::String) {
        self.borrower_category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_borrower_category(&mut self) -> &mut ::std::string::String {
        &mut self.borrower_category
    }

    // Take field
    pub fn take_borrower_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.borrower_category, ::std::string::String::new())
    }

    // string asset_classification = 68;


    pub fn get_asset_classification(&self) -> &str {
        &self.asset_classification
    }
    pub fn clear_asset_classification(&mut self) {
        self.asset_classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_classification(&mut self, v: ::std::string::String) {
        self.asset_classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_classification(&mut self) -> &mut ::std::string::String {
        &mut self.asset_classification
    }

    // Take field
    pub fn take_asset_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_classification, ::std::string::String::new())
    }

    // string asset_type = 69;


    pub fn get_asset_type(&self) -> &str {
        &self.asset_type
    }
    pub fn clear_asset_type(&mut self) {
        self.asset_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_type(&mut self, v: ::std::string::String) {
        self.asset_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_type(&mut self) -> &mut ::std::string::String {
        &mut self.asset_type
    }

    // Take field
    pub fn take_asset_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_type, ::std::string::String::new())
    }

    // string asset_category = 70;


    pub fn get_asset_category(&self) -> &str {
        &self.asset_category
    }
    pub fn clear_asset_category(&mut self) {
        self.asset_category.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_category(&mut self, v: ::std::string::String) {
        self.asset_category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_category(&mut self) -> &mut ::std::string::String {
        &mut self.asset_category
    }

    // Take field
    pub fn take_asset_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_category, ::std::string::String::new())
    }

    // string old_security_id = 71;


    pub fn get_old_security_id(&self) -> &str {
        &self.old_security_id
    }
    pub fn clear_old_security_id(&mut self) {
        self.old_security_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_old_security_id(&mut self, v: ::std::string::String) {
        self.old_security_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_old_security_id(&mut self) -> &mut ::std::string::String {
        &mut self.old_security_id
    }

    // Take field
    pub fn take_old_security_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.old_security_id, ::std::string::String::new())
    }

    // string curve1 = 72;


    pub fn get_curve1(&self) -> &str {
        &self.curve1
    }
    pub fn clear_curve1(&mut self) {
        self.curve1.clear();
    }

    // Param is passed by value, moved
    pub fn set_curve1(&mut self, v: ::std::string::String) {
        self.curve1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_curve1(&mut self) -> &mut ::std::string::String {
        &mut self.curve1
    }

    // Take field
    pub fn take_curve1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.curve1, ::std::string::String::new())
    }

    // string listed = 73;


    pub fn get_listed(&self) -> &str {
        &self.listed
    }
    pub fn clear_listed(&mut self) {
        self.listed.clear();
    }

    // Param is passed by value, moved
    pub fn set_listed(&mut self, v: ::std::string::String) {
        self.listed = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_listed(&mut self) -> &mut ::std::string::String {
        &mut self.listed
    }

    // Take field
    pub fn take_listed(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.listed, ::std::string::String::new())
    }

    // string secured = 74;


    pub fn get_secured(&self) -> &str {
        &self.secured
    }
    pub fn clear_secured(&mut self) {
        self.secured.clear();
    }

    // Param is passed by value, moved
    pub fn set_secured(&mut self, v: ::std::string::String) {
        self.secured = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secured(&mut self) -> &mut ::std::string::String {
        &mut self.secured
    }

    // Take field
    pub fn take_secured(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.secured, ::std::string::String::new())
    }

    // string quoted = 75;


    pub fn get_quoted(&self) -> &str {
        &self.quoted
    }
    pub fn clear_quoted(&mut self) {
        self.quoted.clear();
    }

    // Param is passed by value, moved
    pub fn set_quoted(&mut self, v: ::std::string::String) {
        self.quoted = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_quoted(&mut self) -> &mut ::std::string::String {
        &mut self.quoted
    }

    // Take field
    pub fn take_quoted(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.quoted, ::std::string::String::new())
    }

    // string borrower = 76;


    pub fn get_borrower(&self) -> &str {
        &self.borrower
    }
    pub fn clear_borrower(&mut self) {
        self.borrower.clear();
    }

    // Param is passed by value, moved
    pub fn set_borrower(&mut self, v: ::std::string::String) {
        self.borrower = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_borrower(&mut self) -> &mut ::std::string::String {
        &mut self.borrower
    }

    // Take field
    pub fn take_borrower(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.borrower, ::std::string::String::new())
    }

    // string extbank_ref = 77;


    pub fn get_extbank_ref(&self) -> &str {
        &self.extbank_ref
    }
    pub fn clear_extbank_ref(&mut self) {
        self.extbank_ref.clear();
    }

    // Param is passed by value, moved
    pub fn set_extbank_ref(&mut self, v: ::std::string::String) {
        self.extbank_ref = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_extbank_ref(&mut self) -> &mut ::std::string::String {
        &mut self.extbank_ref
    }

    // Take field
    pub fn take_extbank_ref(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.extbank_ref, ::std::string::String::new())
    }

    // string pan = 78;


    pub fn get_pan(&self) -> &str {
        &self.pan
    }
    pub fn clear_pan(&mut self) {
        self.pan.clear();
    }

    // Param is passed by value, moved
    pub fn set_pan(&mut self, v: ::std::string::String) {
        self.pan = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pan(&mut self) -> &mut ::std::string::String {
        &mut self.pan
    }

    // Take field
    pub fn take_pan(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pan, ::std::string::String::new())
    }

    // string intr_rating_agency = 79;


    pub fn get_intr_rating_agency(&self) -> &str {
        &self.intr_rating_agency
    }
    pub fn clear_intr_rating_agency(&mut self) {
        self.intr_rating_agency.clear();
    }

    // Param is passed by value, moved
    pub fn set_intr_rating_agency(&mut self, v: ::std::string::String) {
        self.intr_rating_agency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_intr_rating_agency(&mut self) -> &mut ::std::string::String {
        &mut self.intr_rating_agency
    }

    // Take field
    pub fn take_intr_rating_agency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.intr_rating_agency, ::std::string::String::new())
    }

    // string internal_rating = 80;


    pub fn get_internal_rating(&self) -> &str {
        &self.internal_rating
    }
    pub fn clear_internal_rating(&mut self) {
        self.internal_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_internal_rating(&mut self, v: ::std::string::String) {
        self.internal_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_internal_rating(&mut self) -> &mut ::std::string::String {
        &mut self.internal_rating
    }

    // Take field
    pub fn take_internal_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.internal_rating, ::std::string::String::new())
    }

    // int64 intr_rating_valid_from = 81;


    pub fn get_intr_rating_valid_from(&self) -> i64 {
        self.intr_rating_valid_from
    }
    pub fn clear_intr_rating_valid_from(&mut self) {
        self.intr_rating_valid_from = 0;
    }

    // Param is passed by value, moved
    pub fn set_intr_rating_valid_from(&mut self, v: i64) {
        self.intr_rating_valid_from = v;
    }

    // int64 intr_rating_valid_till = 82;


    pub fn get_intr_rating_valid_till(&self) -> i64 {
        self.intr_rating_valid_till
    }
    pub fn clear_intr_rating_valid_till(&mut self) {
        self.intr_rating_valid_till = 0;
    }

    // Param is passed by value, moved
    pub fn set_intr_rating_valid_till(&mut self, v: i64) {
        self.intr_rating_valid_till = v;
    }

    // string extrn_rating_agency = 83;


    pub fn get_extrn_rating_agency(&self) -> &str {
        &self.extrn_rating_agency
    }
    pub fn clear_extrn_rating_agency(&mut self) {
        self.extrn_rating_agency.clear();
    }

    // Param is passed by value, moved
    pub fn set_extrn_rating_agency(&mut self, v: ::std::string::String) {
        self.extrn_rating_agency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_extrn_rating_agency(&mut self) -> &mut ::std::string::String {
        &mut self.extrn_rating_agency
    }

    // Take field
    pub fn take_extrn_rating_agency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.extrn_rating_agency, ::std::string::String::new())
    }

    // string external_rating = 84;


    pub fn get_external_rating(&self) -> &str {
        &self.external_rating
    }
    pub fn clear_external_rating(&mut self) {
        self.external_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_external_rating(&mut self, v: ::std::string::String) {
        self.external_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_external_rating(&mut self) -> &mut ::std::string::String {
        &mut self.external_rating
    }

    // Take field
    pub fn take_external_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.external_rating, ::std::string::String::new())
    }

    // int64 extrn_rating_valid_from = 85;


    pub fn get_extrn_rating_valid_from(&self) -> i64 {
        self.extrn_rating_valid_from
    }
    pub fn clear_extrn_rating_valid_from(&mut self) {
        self.extrn_rating_valid_from = 0;
    }

    // Param is passed by value, moved
    pub fn set_extrn_rating_valid_from(&mut self, v: i64) {
        self.extrn_rating_valid_from = v;
    }

    // int64 extrn_rating_valid_till = 86;


    pub fn get_extrn_rating_valid_till(&self) -> i64 {
        self.extrn_rating_valid_till
    }
    pub fn clear_extrn_rating_valid_till(&mut self) {
        self.extrn_rating_valid_till = 0;
    }

    // Param is passed by value, moved
    pub fn set_extrn_rating_valid_till(&mut self, v: i64) {
        self.extrn_rating_valid_till = v;
    }

    // string liquid_status = 87;


    pub fn get_liquid_status(&self) -> &str {
        &self.liquid_status
    }
    pub fn clear_liquid_status(&mut self) {
        self.liquid_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_liquid_status(&mut self, v: ::std::string::String) {
        self.liquid_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_liquid_status(&mut self) -> &mut ::std::string::String {
        &mut self.liquid_status
    }

    // Take field
    pub fn take_liquid_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.liquid_status, ::std::string::String::new())
    }

    // string asset_sub_class = 88;


    pub fn get_asset_sub_class(&self) -> &str {
        &self.asset_sub_class
    }
    pub fn clear_asset_sub_class(&mut self) {
        self.asset_sub_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_sub_class(&mut self, v: ::std::string::String) {
        self.asset_sub_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_sub_class(&mut self) -> &mut ::std::string::String {
        &mut self.asset_sub_class
    }

    // Take field
    pub fn take_asset_sub_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_sub_class, ::std::string::String::new())
    }

    // string hurdle_rating = 89;


    pub fn get_hurdle_rating(&self) -> &str {
        &self.hurdle_rating
    }
    pub fn clear_hurdle_rating(&mut self) {
        self.hurdle_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_hurdle_rating(&mut self, v: ::std::string::String) {
        self.hurdle_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hurdle_rating(&mut self) -> &mut ::std::string::String {
        &mut self.hurdle_rating
    }

    // Take field
    pub fn take_hurdle_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hurdle_rating, ::std::string::String::new())
    }

    // string external_rating_vs_hurdle = 90;


    pub fn get_external_rating_vs_hurdle(&self) -> &str {
        &self.external_rating_vs_hurdle
    }
    pub fn clear_external_rating_vs_hurdle(&mut self) {
        self.external_rating_vs_hurdle.clear();
    }

    // Param is passed by value, moved
    pub fn set_external_rating_vs_hurdle(&mut self, v: ::std::string::String) {
        self.external_rating_vs_hurdle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_external_rating_vs_hurdle(&mut self) -> &mut ::std::string::String {
        &mut self.external_rating_vs_hurdle
    }

    // Take field
    pub fn take_external_rating_vs_hurdle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.external_rating_vs_hurdle, ::std::string::String::new())
    }

    // string internal_rating_vs_hurdle = 91;


    pub fn get_internal_rating_vs_hurdle(&self) -> &str {
        &self.internal_rating_vs_hurdle
    }
    pub fn clear_internal_rating_vs_hurdle(&mut self) {
        self.internal_rating_vs_hurdle.clear();
    }

    // Param is passed by value, moved
    pub fn set_internal_rating_vs_hurdle(&mut self, v: ::std::string::String) {
        self.internal_rating_vs_hurdle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_internal_rating_vs_hurdle(&mut self) -> &mut ::std::string::String {
        &mut self.internal_rating_vs_hurdle
    }

    // Take field
    pub fn take_internal_rating_vs_hurdle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.internal_rating_vs_hurdle, ::std::string::String::new())
    }

    // string fsu = 92;


    pub fn get_fsu(&self) -> &str {
        &self.fsu
    }
    pub fn clear_fsu(&mut self) {
        self.fsu.clear();
    }

    // Param is passed by value, moved
    pub fn set_fsu(&mut self, v: ::std::string::String) {
        self.fsu = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fsu(&mut self) -> &mut ::std::string::String {
        &mut self.fsu
    }

    // Take field
    pub fn take_fsu(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fsu, ::std::string::String::new())
    }

    // string equity_seg = 93;


    pub fn get_equity_seg(&self) -> &str {
        &self.equity_seg
    }
    pub fn clear_equity_seg(&mut self) {
        self.equity_seg.clear();
    }

    // Param is passed by value, moved
    pub fn set_equity_seg(&mut self, v: ::std::string::String) {
        self.equity_seg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_equity_seg(&mut self) -> &mut ::std::string::String {
        &mut self.equity_seg
    }

    // Take field
    pub fn take_equity_seg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.equity_seg, ::std::string::String::new())
    }

    // string issuer_segr = 94;


    pub fn get_issuer_segr(&self) -> &str {
        &self.issuer_segr
    }
    pub fn clear_issuer_segr(&mut self) {
        self.issuer_segr.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer_segr(&mut self, v: ::std::string::String) {
        self.issuer_segr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer_segr(&mut self) -> &mut ::std::string::String {
        &mut self.issuer_segr
    }

    // Take field
    pub fn take_issuer_segr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer_segr, ::std::string::String::new())
    }

    // string restructuring = 95;


    pub fn get_restructuring(&self) -> &str {
        &self.restructuring
    }
    pub fn clear_restructuring(&mut self) {
        self.restructuring.clear();
    }

    // Param is passed by value, moved
    pub fn set_restructuring(&mut self, v: ::std::string::String) {
        self.restructuring = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_restructuring(&mut self) -> &mut ::std::string::String {
        &mut self.restructuring
    }

    // Take field
    pub fn take_restructuring(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.restructuring, ::std::string::String::new())
    }

    // string paid_up_share_captial = 96;


    pub fn get_paid_up_share_captial(&self) -> &str {
        &self.paid_up_share_captial
    }
    pub fn clear_paid_up_share_captial(&mut self) {
        self.paid_up_share_captial.clear();
    }

    // Param is passed by value, moved
    pub fn set_paid_up_share_captial(&mut self, v: ::std::string::String) {
        self.paid_up_share_captial = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_paid_up_share_captial(&mut self) -> &mut ::std::string::String {
        &mut self.paid_up_share_captial
    }

    // Take field
    pub fn take_paid_up_share_captial(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.paid_up_share_captial, ::std::string::String::new())
    }

    // double exempted_amount = 97;


    pub fn get_exempted_amount(&self) -> f64 {
        self.exempted_amount
    }
    pub fn clear_exempted_amount(&mut self) {
        self.exempted_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_exempted_amount(&mut self, v: f64) {
        self.exempted_amount = v;
    }

    // string issuer_group = 98;


    pub fn get_issuer_group(&self) -> &str {
        &self.issuer_group
    }
    pub fn clear_issuer_group(&mut self) {
        self.issuer_group.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer_group(&mut self, v: ::std::string::String) {
        self.issuer_group = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer_group(&mut self) -> &mut ::std::string::String {
        &mut self.issuer_group
    }

    // Take field
    pub fn take_issuer_group(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer_group, ::std::string::String::new())
    }

    // double murram_market_value = 99;


    pub fn get_murram_market_value(&self) -> f64 {
        self.murram_market_value
    }
    pub fn clear_murram_market_value(&mut self) {
        self.murram_market_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_murram_market_value(&mut self, v: f64) {
        self.murram_market_value = v;
    }

    // double murram_depr = 100;


    pub fn get_murram_depr(&self) -> f64 {
        self.murram_depr
    }
    pub fn clear_murram_depr(&mut self) {
        self.murram_depr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_murram_depr(&mut self, v: f64) {
        self.murram_depr = v;
    }

    // double var_settled_bv = 101;


    pub fn get_var_settled_bv(&self) -> f64 {
        self.var_settled_bv
    }
    pub fn clear_var_settled_bv(&mut self) {
        self.var_settled_bv = 0.;
    }

    // Param is passed by value, moved
    pub fn set_var_settled_bv(&mut self, v: f64) {
        self.var_settled_bv = v;
    }

    // double var_unsettled_bv = 102;


    pub fn get_var_unsettled_bv(&self) -> f64 {
        self.var_unsettled_bv
    }
    pub fn clear_var_unsettled_bv(&mut self) {
        self.var_unsettled_bv = 0.;
    }

    // Param is passed by value, moved
    pub fn set_var_unsettled_bv(&mut self, v: f64) {
        self.var_unsettled_bv = v;
    }

    // double var_settled_amount = 103;


    pub fn get_var_settled_amount(&self) -> f64 {
        self.var_settled_amount
    }
    pub fn clear_var_settled_amount(&mut self) {
        self.var_settled_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_var_settled_amount(&mut self, v: f64) {
        self.var_settled_amount = v;
    }

    // double var_unsettled_amount = 104;


    pub fn get_var_unsettled_amount(&self) -> f64 {
        self.var_unsettled_amount
    }
    pub fn clear_var_unsettled_amount(&mut self) {
        self.var_unsettled_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_var_unsettled_amount(&mut self, v: f64) {
        self.var_unsettled_amount = v;
    }

    // double kri_settled_qtd_fv = 105;


    pub fn get_kri_settled_qtd_fv(&self) -> f64 {
        self.kri_settled_qtd_fv
    }
    pub fn clear_kri_settled_qtd_fv(&mut self) {
        self.kri_settled_qtd_fv = 0.;
    }

    // Param is passed by value, moved
    pub fn set_kri_settled_qtd_fv(&mut self, v: f64) {
        self.kri_settled_qtd_fv = v;
    }

    // string basel_group = 106;


    pub fn get_basel_group(&self) -> &str {
        &self.basel_group
    }
    pub fn clear_basel_group(&mut self) {
        self.basel_group.clear();
    }

    // Param is passed by value, moved
    pub fn set_basel_group(&mut self, v: ::std::string::String) {
        self.basel_group = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_basel_group(&mut self) -> &mut ::std::string::String {
        &mut self.basel_group
    }

    // Take field
    pub fn take_basel_group(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.basel_group, ::std::string::String::new())
    }

    // string basel_sub_group = 107;


    pub fn get_basel_sub_group(&self) -> &str {
        &self.basel_sub_group
    }
    pub fn clear_basel_sub_group(&mut self) {
        self.basel_sub_group.clear();
    }

    // Param is passed by value, moved
    pub fn set_basel_sub_group(&mut self, v: ::std::string::String) {
        self.basel_sub_group = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_basel_sub_group(&mut self) -> &mut ::std::string::String {
        &mut self.basel_sub_group
    }

    // Take field
    pub fn take_basel_sub_group(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.basel_sub_group, ::std::string::String::new())
    }

    // string time_band = 108;


    pub fn get_time_band(&self) -> &str {
        &self.time_band
    }
    pub fn clear_time_band(&mut self) {
        self.time_band.clear();
    }

    // Param is passed by value, moved
    pub fn set_time_band(&mut self, v: ::std::string::String) {
        self.time_band = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time_band(&mut self) -> &mut ::std::string::String {
        &mut self.time_band
    }

    // Take field
    pub fn take_time_band(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.time_band, ::std::string::String::new())
    }

    // string capital_charge_market_risk_rate = 109;


    pub fn get_capital_charge_market_risk_rate(&self) -> &str {
        &self.capital_charge_market_risk_rate
    }
    pub fn clear_capital_charge_market_risk_rate(&mut self) {
        self.capital_charge_market_risk_rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_capital_charge_market_risk_rate(&mut self, v: ::std::string::String) {
        self.capital_charge_market_risk_rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_capital_charge_market_risk_rate(&mut self) -> &mut ::std::string::String {
        &mut self.capital_charge_market_risk_rate
    }

    // Take field
    pub fn take_capital_charge_market_risk_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.capital_charge_market_risk_rate, ::std::string::String::new())
    }

    // double capital_charge_market_risk_amount = 110;


    pub fn get_capital_charge_market_risk_amount(&self) -> f64 {
        self.capital_charge_market_risk_amount
    }
    pub fn clear_capital_charge_market_risk_amount(&mut self) {
        self.capital_charge_market_risk_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_capital_charge_market_risk_amount(&mut self, v: f64) {
        self.capital_charge_market_risk_amount = v;
    }

    // double trading_specif_risk_rate = 111;


    pub fn get_trading_specif_risk_rate(&self) -> f64 {
        self.trading_specif_risk_rate
    }
    pub fn clear_trading_specif_risk_rate(&mut self) {
        self.trading_specif_risk_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_trading_specif_risk_rate(&mut self, v: f64) {
        self.trading_specif_risk_rate = v;
    }

    // double banking_specif_risk_rate = 112;


    pub fn get_banking_specif_risk_rate(&self) -> f64 {
        self.banking_specif_risk_rate
    }
    pub fn clear_banking_specif_risk_rate(&mut self) {
        self.banking_specif_risk_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_banking_specif_risk_rate(&mut self, v: f64) {
        self.banking_specif_risk_rate = v;
    }

    // double trading_specif_risk_captial_charge = 113;


    pub fn get_trading_specif_risk_captial_charge(&self) -> f64 {
        self.trading_specif_risk_captial_charge
    }
    pub fn clear_trading_specif_risk_captial_charge(&mut self) {
        self.trading_specif_risk_captial_charge = 0.;
    }

    // Param is passed by value, moved
    pub fn set_trading_specif_risk_captial_charge(&mut self, v: f64) {
        self.trading_specif_risk_captial_charge = v;
    }

    // double banking_specif_risk_captial_charge = 114;


    pub fn get_banking_specif_risk_captial_charge(&self) -> f64 {
        self.banking_specif_risk_captial_charge
    }
    pub fn clear_banking_specif_risk_captial_charge(&mut self) {
        self.banking_specif_risk_captial_charge = 0.;
    }

    // Param is passed by value, moved
    pub fn set_banking_specif_risk_captial_charge(&mut self, v: f64) {
        self.banking_specif_risk_captial_charge = v;
    }

    // string mode_of_holding = 115;


    pub fn get_mode_of_holding(&self) -> &str {
        &self.mode_of_holding
    }
    pub fn clear_mode_of_holding(&mut self) {
        self.mode_of_holding.clear();
    }

    // Param is passed by value, moved
    pub fn set_mode_of_holding(&mut self, v: ::std::string::String) {
        self.mode_of_holding = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mode_of_holding(&mut self) -> &mut ::std::string::String {
        &mut self.mode_of_holding
    }

    // Take field
    pub fn take_mode_of_holding(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mode_of_holding, ::std::string::String::new())
    }

    // string issuer_rating_agency = 116;


    pub fn get_issuer_rating_agency(&self) -> &str {
        &self.issuer_rating_agency
    }
    pub fn clear_issuer_rating_agency(&mut self) {
        self.issuer_rating_agency.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer_rating_agency(&mut self, v: ::std::string::String) {
        self.issuer_rating_agency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer_rating_agency(&mut self) -> &mut ::std::string::String {
        &mut self.issuer_rating_agency
    }

    // Take field
    pub fn take_issuer_rating_agency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer_rating_agency, ::std::string::String::new())
    }

    // string issuer_rating = 117;


    pub fn get_issuer_rating(&self) -> &str {
        &self.issuer_rating
    }
    pub fn clear_issuer_rating(&mut self) {
        self.issuer_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer_rating(&mut self, v: ::std::string::String) {
        self.issuer_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer_rating(&mut self) -> &mut ::std::string::String {
        &mut self.issuer_rating
    }

    // Take field
    pub fn take_issuer_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer_rating, ::std::string::String::new())
    }

    // int64 issuer_rating_valid_from = 118;


    pub fn get_issuer_rating_valid_from(&self) -> i64 {
        self.issuer_rating_valid_from
    }
    pub fn clear_issuer_rating_valid_from(&mut self) {
        self.issuer_rating_valid_from = 0;
    }

    // Param is passed by value, moved
    pub fn set_issuer_rating_valid_from(&mut self, v: i64) {
        self.issuer_rating_valid_from = v;
    }

    // int64 issuer_rating_valid_till = 119;


    pub fn get_issuer_rating_valid_till(&self) -> i64 {
        self.issuer_rating_valid_till
    }
    pub fn clear_issuer_rating_valid_till(&mut self) {
        self.issuer_rating_valid_till = 0;
    }

    // Param is passed by value, moved
    pub fn set_issuer_rating_valid_till(&mut self, v: i64) {
        self.issuer_rating_valid_till = v;
    }

    // string issuer_sub_industry = 120;


    pub fn get_issuer_sub_industry(&self) -> &str {
        &self.issuer_sub_industry
    }
    pub fn clear_issuer_sub_industry(&mut self) {
        self.issuer_sub_industry.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer_sub_industry(&mut self, v: ::std::string::String) {
        self.issuer_sub_industry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer_sub_industry(&mut self) -> &mut ::std::string::String {
        &mut self.issuer_sub_industry
    }

    // Take field
    pub fn take_issuer_sub_industry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer_sub_industry, ::std::string::String::new())
    }

    // string gl_code = 121;


    pub fn get_gl_code(&self) -> &str {
        &self.gl_code
    }
    pub fn clear_gl_code(&mut self) {
        self.gl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_code(&mut self, v: ::std::string::String) {
        self.gl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_code
    }

    // Take field
    pub fn take_gl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_code, ::std::string::String::new())
    }

    // string interest_type = 122;


    pub fn get_interest_type(&self) -> &str {
        &self.interest_type
    }
    pub fn clear_interest_type(&mut self) {
        self.interest_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_interest_type(&mut self, v: ::std::string::String) {
        self.interest_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interest_type(&mut self) -> &mut ::std::string::String {
        &mut self.interest_type
    }

    // Take field
    pub fn take_interest_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interest_type, ::std::string::String::new())
    }

    // int64 computed_mat_date = 123;


    pub fn get_computed_mat_date(&self) -> i64 {
        self.computed_mat_date
    }
    pub fn clear_computed_mat_date(&mut self) {
        self.computed_mat_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_computed_mat_date(&mut self, v: i64) {
        self.computed_mat_date = v;
    }

    // string cgl = 124;


    pub fn get_cgl(&self) -> &str {
        &self.cgl
    }
    pub fn clear_cgl(&mut self) {
        self.cgl.clear();
    }

    // Param is passed by value, moved
    pub fn set_cgl(&mut self, v: ::std::string::String) {
        self.cgl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cgl(&mut self) -> &mut ::std::string::String {
        &mut self.cgl
    }

    // Take field
    pub fn take_cgl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cgl, ::std::string::String::new())
    }

    // string group = 125;


    pub fn get_group(&self) -> &str {
        &self.group
    }
    pub fn clear_group(&mut self) {
        self.group.clear();
    }

    // Param is passed by value, moved
    pub fn set_group(&mut self, v: ::std::string::String) {
        self.group = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group(&mut self) -> &mut ::std::string::String {
        &mut self.group
    }

    // Take field
    pub fn take_group(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group, ::std::string::String::new())
    }

    // string llg = 126;


    pub fn get_llg(&self) -> &str {
        &self.llg
    }
    pub fn clear_llg(&mut self) {
        self.llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_llg(&mut self, v: ::std::string::String) {
        self.llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_llg(&mut self) -> &mut ::std::string::String {
        &mut self.llg
    }

    // Take field
    pub fn take_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.llg, ::std::string::String::new())
    }

    // string currency = 127;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // string mat_date_flag = 128;


    pub fn get_mat_date_flag(&self) -> &str {
        &self.mat_date_flag
    }
    pub fn clear_mat_date_flag(&mut self) {
        self.mat_date_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_mat_date_flag(&mut self, v: ::std::string::String) {
        self.mat_date_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mat_date_flag(&mut self) -> &mut ::std::string::String {
        &mut self.mat_date_flag
    }

    // Take field
    pub fn take_mat_date_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mat_date_flag, ::std::string::String::new())
    }

    // string concat_deal_id = 129;


    pub fn get_concat_deal_id(&self) -> &str {
        &self.concat_deal_id
    }
    pub fn clear_concat_deal_id(&mut self) {
        self.concat_deal_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_concat_deal_id(&mut self, v: ::std::string::String) {
        self.concat_deal_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_concat_deal_id(&mut self) -> &mut ::std::string::String {
        &mut self.concat_deal_id
    }

    // Take field
    pub fn take_concat_deal_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.concat_deal_id, ::std::string::String::new())
    }

    // string concat_inst_id = 130;


    pub fn get_concat_inst_id(&self) -> &str {
        &self.concat_inst_id
    }
    pub fn clear_concat_inst_id(&mut self) {
        self.concat_inst_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_concat_inst_id(&mut self, v: ::std::string::String) {
        self.concat_inst_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_concat_inst_id(&mut self) -> &mut ::std::string::String {
        &mut self.concat_inst_id
    }

    // Take field
    pub fn take_concat_inst_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.concat_inst_id, ::std::string::String::new())
    }

    // string concat_deal_n_slr_id = 131;


    pub fn get_concat_deal_n_slr_id(&self) -> &str {
        &self.concat_deal_n_slr_id
    }
    pub fn clear_concat_deal_n_slr_id(&mut self) {
        self.concat_deal_n_slr_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_concat_deal_n_slr_id(&mut self, v: ::std::string::String) {
        self.concat_deal_n_slr_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_concat_deal_n_slr_id(&mut self) -> &mut ::std::string::String {
        &mut self.concat_deal_n_slr_id
    }

    // Take field
    pub fn take_concat_deal_n_slr_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.concat_deal_n_slr_id, ::std::string::String::new())
    }

    // double ftp_coupon_rate = 132;


    pub fn get_ftp_coupon_rate(&self) -> f64 {
        self.ftp_coupon_rate
    }
    pub fn clear_ftp_coupon_rate(&mut self) {
        self.ftp_coupon_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ftp_coupon_rate(&mut self, v: f64) {
        self.ftp_coupon_rate = v;
    }

    // repeated .Cashflow cashflows = 133;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.portfolio)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.security_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instrument_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instrument_type)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.isin_code)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.slr_nslr)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category_grp)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sub_category)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fa_classification)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.coupon = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.discount_intr_rate = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.face_val_per_units = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.quantity = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.face_value = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.wap = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.yield_value = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.book_value = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.mvmnt_amount = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.market_price = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.market_yield = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.market_value = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.duration = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.m_duration = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.appreciation = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.depreciation = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.net_app_dep = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.convexity = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pvbp = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.absolute_pvbp = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amortization_asondate = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.accounted_amortization = tmp;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.unaccounted_amortization = tmp;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.accrued_interest = tmp;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.no_of_ca_skipped)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ca_interest_not_receieved)?;
                },
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest = tmp;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.encumbered_since_repo)?;
                },
                40 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amount_repo = tmp;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.encumbered_since_ccil)?;
                },
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amount_ccil = tmp;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.encumbered_since_treps)?;
                },
                44 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amount_treps = tmp;
                },
                45 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.encumbered_since_mcxs)?;
                },
                46 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amount_mcxs = tmp;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.encumbered_since_others)?;
                },
                48 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amount_others = tmp;
                },
                49 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custody_pos_number)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.custody_pos_type)?;
                },
                51 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interest_frequency)?;
                },
                52 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interest_practice)?;
                },
                53 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.put_date = tmp;
                },
                54 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.call_date = tmp;
                },
                55 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_coupon_date = tmp;
                },
                56 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_coupon_date = tmp;
                },
                57 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.issue_date = tmp;
                },
                58 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.place)?;
                },
                59 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.country)?;
                },
                60 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.booking_basis)?;
                },
                61 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.residual_maturity = tmp;
                },
                62 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer_name)?;
                },
                63 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.market)?;
                },
                64 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gurantor)?;
                },
                65 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.industry)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sub_industry)?;
                },
                67 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.borrower_category)?;
                },
                68 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_classification)?;
                },
                69 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_type)?;
                },
                70 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_category)?;
                },
                71 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.old_security_id)?;
                },
                72 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.curve1)?;
                },
                73 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.listed)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.secured)?;
                },
                75 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.quoted)?;
                },
                76 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.borrower)?;
                },
                77 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.extbank_ref)?;
                },
                78 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pan)?;
                },
                79 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.intr_rating_agency)?;
                },
                80 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.internal_rating)?;
                },
                81 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.intr_rating_valid_from = tmp;
                },
                82 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.intr_rating_valid_till = tmp;
                },
                83 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.extrn_rating_agency)?;
                },
                84 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.external_rating)?;
                },
                85 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.extrn_rating_valid_from = tmp;
                },
                86 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.extrn_rating_valid_till = tmp;
                },
                87 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.liquid_status)?;
                },
                88 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_sub_class)?;
                },
                89 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hurdle_rating)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.external_rating_vs_hurdle)?;
                },
                91 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.internal_rating_vs_hurdle)?;
                },
                92 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fsu)?;
                },
                93 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.equity_seg)?;
                },
                94 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer_segr)?;
                },
                95 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.restructuring)?;
                },
                96 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.paid_up_share_captial)?;
                },
                97 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.exempted_amount = tmp;
                },
                98 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer_group)?;
                },
                99 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.murram_market_value = tmp;
                },
                100 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.murram_depr = tmp;
                },
                101 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.var_settled_bv = tmp;
                },
                102 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.var_unsettled_bv = tmp;
                },
                103 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.var_settled_amount = tmp;
                },
                104 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.var_unsettled_amount = tmp;
                },
                105 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.kri_settled_qtd_fv = tmp;
                },
                106 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.basel_group)?;
                },
                107 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.basel_sub_group)?;
                },
                108 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.time_band)?;
                },
                109 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.capital_charge_market_risk_rate)?;
                },
                110 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.capital_charge_market_risk_amount = tmp;
                },
                111 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.trading_specif_risk_rate = tmp;
                },
                112 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.banking_specif_risk_rate = tmp;
                },
                113 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.trading_specif_risk_captial_charge = tmp;
                },
                114 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.banking_specif_risk_captial_charge = tmp;
                },
                115 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mode_of_holding)?;
                },
                116 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer_rating_agency)?;
                },
                117 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer_rating)?;
                },
                118 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.issuer_rating_valid_from = tmp;
                },
                119 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.issuer_rating_valid_till = tmp;
                },
                120 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer_sub_industry)?;
                },
                121 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_code)?;
                },
                122 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interest_type)?;
                },
                123 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.computed_mat_date = tmp;
                },
                124 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cgl)?;
                },
                125 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group)?;
                },
                126 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.llg)?;
                },
                127 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                128 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mat_date_flag)?;
                },
                129 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.concat_deal_id)?;
                },
                130 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.concat_inst_id)?;
                },
                131 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.concat_deal_n_slr_id)?;
                },
                132 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ftp_coupon_rate = tmp;
                },
                133 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.portfolio.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.portfolio);
        }
        if !self.security_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.security_name);
        }
        if !self.instrument_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.instrument_id);
        }
        if !self.instrument_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.instrument_type);
        }
        if !self.isin_code.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.isin_code);
        }
        if !self.slr_nslr.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.slr_nslr);
        }
        if !self.category.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.category);
        }
        if !self.category_grp.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.category_grp);
        }
        if !self.sub_category.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.sub_category);
        }
        if !self.fa_classification.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.fa_classification);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(11, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.coupon != 0. {
            my_size += 9;
        }
        if self.discount_intr_rate != 0. {
            my_size += 9;
        }
        if self.face_val_per_units != 0. {
            my_size += 9;
        }
        if self.quantity != 0. {
            my_size += 9;
        }
        if self.face_value != 0. {
            my_size += 10;
        }
        if self.wap != 0. {
            my_size += 10;
        }
        if self.yield_value != 0. {
            my_size += 10;
        }
        if self.book_value != 0. {
            my_size += 10;
        }
        if self.mvmnt_amount != 0. {
            my_size += 10;
        }
        if self.market_price != 0. {
            my_size += 10;
        }
        if self.market_yield != 0. {
            my_size += 10;
        }
        if self.market_value != 0. {
            my_size += 10;
        }
        if self.duration != 0. {
            my_size += 10;
        }
        if self.m_duration != 0. {
            my_size += 10;
        }
        if self.appreciation != 0. {
            my_size += 10;
        }
        if self.depreciation != 0. {
            my_size += 10;
        }
        if self.net_app_dep != 0. {
            my_size += 10;
        }
        if self.convexity != 0. {
            my_size += 10;
        }
        if self.pvbp != 0. {
            my_size += 10;
        }
        if self.absolute_pvbp != 0. {
            my_size += 10;
        }
        if self.amortization_asondate != 0. {
            my_size += 10;
        }
        if self.accounted_amortization != 0. {
            my_size += 10;
        }
        if self.unaccounted_amortization != 0. {
            my_size += 10;
        }
        if self.accrued_interest != 0. {
            my_size += 10;
        }
        if !self.no_of_ca_skipped.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.no_of_ca_skipped);
        }
        if !self.ca_interest_not_receieved.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.ca_interest_not_receieved);
        }
        if self.total_interest != 0. {
            my_size += 10;
        }
        if !self.encumbered_since_repo.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.encumbered_since_repo);
        }
        if self.amount_repo != 0. {
            my_size += 10;
        }
        if !self.encumbered_since_ccil.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.encumbered_since_ccil);
        }
        if self.amount_ccil != 0. {
            my_size += 10;
        }
        if !self.encumbered_since_treps.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.encumbered_since_treps);
        }
        if self.amount_treps != 0. {
            my_size += 10;
        }
        if !self.encumbered_since_mcxs.is_empty() {
            my_size += ::protobuf::rt::string_size(45, &self.encumbered_since_mcxs);
        }
        if self.amount_mcxs != 0. {
            my_size += 10;
        }
        if !self.encumbered_since_others.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.encumbered_since_others);
        }
        if self.amount_others != 0. {
            my_size += 10;
        }
        if !self.custody_pos_number.is_empty() {
            my_size += ::protobuf::rt::string_size(49, &self.custody_pos_number);
        }
        if !self.custody_pos_type.is_empty() {
            my_size += ::protobuf::rt::string_size(50, &self.custody_pos_type);
        }
        if !self.interest_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(51, &self.interest_frequency);
        }
        if !self.interest_practice.is_empty() {
            my_size += ::protobuf::rt::string_size(52, &self.interest_practice);
        }
        if self.put_date != 0 {
            my_size += ::protobuf::rt::value_size(53, self.put_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.call_date != 0 {
            my_size += ::protobuf::rt::value_size(54, self.call_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_coupon_date != 0 {
            my_size += ::protobuf::rt::value_size(55, self.last_coupon_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_coupon_date != 0 {
            my_size += ::protobuf::rt::value_size(56, self.next_coupon_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.issue_date != 0 {
            my_size += ::protobuf::rt::value_size(57, self.issue_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.place.is_empty() {
            my_size += ::protobuf::rt::string_size(58, &self.place);
        }
        if !self.country.is_empty() {
            my_size += ::protobuf::rt::string_size(59, &self.country);
        }
        if !self.booking_basis.is_empty() {
            my_size += ::protobuf::rt::string_size(60, &self.booking_basis);
        }
        if self.residual_maturity != 0. {
            my_size += 10;
        }
        if !self.issuer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(62, &self.issuer_name);
        }
        if !self.market.is_empty() {
            my_size += ::protobuf::rt::string_size(63, &self.market);
        }
        if !self.gurantor.is_empty() {
            my_size += ::protobuf::rt::string_size(64, &self.gurantor);
        }
        if !self.industry.is_empty() {
            my_size += ::protobuf::rt::string_size(65, &self.industry);
        }
        if !self.sub_industry.is_empty() {
            my_size += ::protobuf::rt::string_size(66, &self.sub_industry);
        }
        if !self.borrower_category.is_empty() {
            my_size += ::protobuf::rt::string_size(67, &self.borrower_category);
        }
        if !self.asset_classification.is_empty() {
            my_size += ::protobuf::rt::string_size(68, &self.asset_classification);
        }
        if !self.asset_type.is_empty() {
            my_size += ::protobuf::rt::string_size(69, &self.asset_type);
        }
        if !self.asset_category.is_empty() {
            my_size += ::protobuf::rt::string_size(70, &self.asset_category);
        }
        if !self.old_security_id.is_empty() {
            my_size += ::protobuf::rt::string_size(71, &self.old_security_id);
        }
        if !self.curve1.is_empty() {
            my_size += ::protobuf::rt::string_size(72, &self.curve1);
        }
        if !self.listed.is_empty() {
            my_size += ::protobuf::rt::string_size(73, &self.listed);
        }
        if !self.secured.is_empty() {
            my_size += ::protobuf::rt::string_size(74, &self.secured);
        }
        if !self.quoted.is_empty() {
            my_size += ::protobuf::rt::string_size(75, &self.quoted);
        }
        if !self.borrower.is_empty() {
            my_size += ::protobuf::rt::string_size(76, &self.borrower);
        }
        if !self.extbank_ref.is_empty() {
            my_size += ::protobuf::rt::string_size(77, &self.extbank_ref);
        }
        if !self.pan.is_empty() {
            my_size += ::protobuf::rt::string_size(78, &self.pan);
        }
        if !self.intr_rating_agency.is_empty() {
            my_size += ::protobuf::rt::string_size(79, &self.intr_rating_agency);
        }
        if !self.internal_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(80, &self.internal_rating);
        }
        if self.intr_rating_valid_from != 0 {
            my_size += ::protobuf::rt::value_size(81, self.intr_rating_valid_from, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.intr_rating_valid_till != 0 {
            my_size += ::protobuf::rt::value_size(82, self.intr_rating_valid_till, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.extrn_rating_agency.is_empty() {
            my_size += ::protobuf::rt::string_size(83, &self.extrn_rating_agency);
        }
        if !self.external_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(84, &self.external_rating);
        }
        if self.extrn_rating_valid_from != 0 {
            my_size += ::protobuf::rt::value_size(85, self.extrn_rating_valid_from, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.extrn_rating_valid_till != 0 {
            my_size += ::protobuf::rt::value_size(86, self.extrn_rating_valid_till, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.liquid_status.is_empty() {
            my_size += ::protobuf::rt::string_size(87, &self.liquid_status);
        }
        if !self.asset_sub_class.is_empty() {
            my_size += ::protobuf::rt::string_size(88, &self.asset_sub_class);
        }
        if !self.hurdle_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(89, &self.hurdle_rating);
        }
        if !self.external_rating_vs_hurdle.is_empty() {
            my_size += ::protobuf::rt::string_size(90, &self.external_rating_vs_hurdle);
        }
        if !self.internal_rating_vs_hurdle.is_empty() {
            my_size += ::protobuf::rt::string_size(91, &self.internal_rating_vs_hurdle);
        }
        if !self.fsu.is_empty() {
            my_size += ::protobuf::rt::string_size(92, &self.fsu);
        }
        if !self.equity_seg.is_empty() {
            my_size += ::protobuf::rt::string_size(93, &self.equity_seg);
        }
        if !self.issuer_segr.is_empty() {
            my_size += ::protobuf::rt::string_size(94, &self.issuer_segr);
        }
        if !self.restructuring.is_empty() {
            my_size += ::protobuf::rt::string_size(95, &self.restructuring);
        }
        if !self.paid_up_share_captial.is_empty() {
            my_size += ::protobuf::rt::string_size(96, &self.paid_up_share_captial);
        }
        if self.exempted_amount != 0. {
            my_size += 10;
        }
        if !self.issuer_group.is_empty() {
            my_size += ::protobuf::rt::string_size(98, &self.issuer_group);
        }
        if self.murram_market_value != 0. {
            my_size += 10;
        }
        if self.murram_depr != 0. {
            my_size += 10;
        }
        if self.var_settled_bv != 0. {
            my_size += 10;
        }
        if self.var_unsettled_bv != 0. {
            my_size += 10;
        }
        if self.var_settled_amount != 0. {
            my_size += 10;
        }
        if self.var_unsettled_amount != 0. {
            my_size += 10;
        }
        if self.kri_settled_qtd_fv != 0. {
            my_size += 10;
        }
        if !self.basel_group.is_empty() {
            my_size += ::protobuf::rt::string_size(106, &self.basel_group);
        }
        if !self.basel_sub_group.is_empty() {
            my_size += ::protobuf::rt::string_size(107, &self.basel_sub_group);
        }
        if !self.time_band.is_empty() {
            my_size += ::protobuf::rt::string_size(108, &self.time_band);
        }
        if !self.capital_charge_market_risk_rate.is_empty() {
            my_size += ::protobuf::rt::string_size(109, &self.capital_charge_market_risk_rate);
        }
        if self.capital_charge_market_risk_amount != 0. {
            my_size += 10;
        }
        if self.trading_specif_risk_rate != 0. {
            my_size += 10;
        }
        if self.banking_specif_risk_rate != 0. {
            my_size += 10;
        }
        if self.trading_specif_risk_captial_charge != 0. {
            my_size += 10;
        }
        if self.banking_specif_risk_captial_charge != 0. {
            my_size += 10;
        }
        if !self.mode_of_holding.is_empty() {
            my_size += ::protobuf::rt::string_size(115, &self.mode_of_holding);
        }
        if !self.issuer_rating_agency.is_empty() {
            my_size += ::protobuf::rt::string_size(116, &self.issuer_rating_agency);
        }
        if !self.issuer_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(117, &self.issuer_rating);
        }
        if self.issuer_rating_valid_from != 0 {
            my_size += ::protobuf::rt::value_size(118, self.issuer_rating_valid_from, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.issuer_rating_valid_till != 0 {
            my_size += ::protobuf::rt::value_size(119, self.issuer_rating_valid_till, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.issuer_sub_industry.is_empty() {
            my_size += ::protobuf::rt::string_size(120, &self.issuer_sub_industry);
        }
        if !self.gl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(121, &self.gl_code);
        }
        if !self.interest_type.is_empty() {
            my_size += ::protobuf::rt::string_size(122, &self.interest_type);
        }
        if self.computed_mat_date != 0 {
            my_size += ::protobuf::rt::value_size(123, self.computed_mat_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.cgl.is_empty() {
            my_size += ::protobuf::rt::string_size(124, &self.cgl);
        }
        if !self.group.is_empty() {
            my_size += ::protobuf::rt::string_size(125, &self.group);
        }
        if !self.llg.is_empty() {
            my_size += ::protobuf::rt::string_size(126, &self.llg);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(127, &self.currency);
        }
        if !self.mat_date_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(128, &self.mat_date_flag);
        }
        if !self.concat_deal_id.is_empty() {
            my_size += ::protobuf::rt::string_size(129, &self.concat_deal_id);
        }
        if !self.concat_inst_id.is_empty() {
            my_size += ::protobuf::rt::string_size(130, &self.concat_inst_id);
        }
        if !self.concat_deal_n_slr_id.is_empty() {
            my_size += ::protobuf::rt::string_size(131, &self.concat_deal_n_slr_id);
        }
        if self.ftp_coupon_rate != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.portfolio.is_empty() {
            os.write_string(1, &self.portfolio)?;
        }
        if !self.security_name.is_empty() {
            os.write_string(2, &self.security_name)?;
        }
        if !self.instrument_id.is_empty() {
            os.write_string(3, &self.instrument_id)?;
        }
        if !self.instrument_type.is_empty() {
            os.write_string(4, &self.instrument_type)?;
        }
        if !self.isin_code.is_empty() {
            os.write_string(5, &self.isin_code)?;
        }
        if !self.slr_nslr.is_empty() {
            os.write_string(6, &self.slr_nslr)?;
        }
        if !self.category.is_empty() {
            os.write_string(7, &self.category)?;
        }
        if !self.category_grp.is_empty() {
            os.write_string(8, &self.category_grp)?;
        }
        if !self.sub_category.is_empty() {
            os.write_string(9, &self.sub_category)?;
        }
        if !self.fa_classification.is_empty() {
            os.write_string(10, &self.fa_classification)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(11, self.maturity_date)?;
        }
        if self.coupon != 0. {
            os.write_double(12, self.coupon)?;
        }
        if self.discount_intr_rate != 0. {
            os.write_double(13, self.discount_intr_rate)?;
        }
        if self.face_val_per_units != 0. {
            os.write_double(14, self.face_val_per_units)?;
        }
        if self.quantity != 0. {
            os.write_double(15, self.quantity)?;
        }
        if self.face_value != 0. {
            os.write_double(16, self.face_value)?;
        }
        if self.wap != 0. {
            os.write_double(17, self.wap)?;
        }
        if self.yield_value != 0. {
            os.write_double(18, self.yield_value)?;
        }
        if self.book_value != 0. {
            os.write_double(19, self.book_value)?;
        }
        if self.mvmnt_amount != 0. {
            os.write_double(20, self.mvmnt_amount)?;
        }
        if self.market_price != 0. {
            os.write_double(21, self.market_price)?;
        }
        if self.market_yield != 0. {
            os.write_double(22, self.market_yield)?;
        }
        if self.market_value != 0. {
            os.write_double(23, self.market_value)?;
        }
        if self.duration != 0. {
            os.write_double(24, self.duration)?;
        }
        if self.m_duration != 0. {
            os.write_double(25, self.m_duration)?;
        }
        if self.appreciation != 0. {
            os.write_double(26, self.appreciation)?;
        }
        if self.depreciation != 0. {
            os.write_double(27, self.depreciation)?;
        }
        if self.net_app_dep != 0. {
            os.write_double(28, self.net_app_dep)?;
        }
        if self.convexity != 0. {
            os.write_double(29, self.convexity)?;
        }
        if self.pvbp != 0. {
            os.write_double(30, self.pvbp)?;
        }
        if self.absolute_pvbp != 0. {
            os.write_double(31, self.absolute_pvbp)?;
        }
        if self.amortization_asondate != 0. {
            os.write_double(32, self.amortization_asondate)?;
        }
        if self.accounted_amortization != 0. {
            os.write_double(33, self.accounted_amortization)?;
        }
        if self.unaccounted_amortization != 0. {
            os.write_double(34, self.unaccounted_amortization)?;
        }
        if self.accrued_interest != 0. {
            os.write_double(35, self.accrued_interest)?;
        }
        if !self.no_of_ca_skipped.is_empty() {
            os.write_string(36, &self.no_of_ca_skipped)?;
        }
        if !self.ca_interest_not_receieved.is_empty() {
            os.write_string(37, &self.ca_interest_not_receieved)?;
        }
        if self.total_interest != 0. {
            os.write_double(38, self.total_interest)?;
        }
        if !self.encumbered_since_repo.is_empty() {
            os.write_string(39, &self.encumbered_since_repo)?;
        }
        if self.amount_repo != 0. {
            os.write_double(40, self.amount_repo)?;
        }
        if !self.encumbered_since_ccil.is_empty() {
            os.write_string(41, &self.encumbered_since_ccil)?;
        }
        if self.amount_ccil != 0. {
            os.write_double(42, self.amount_ccil)?;
        }
        if !self.encumbered_since_treps.is_empty() {
            os.write_string(43, &self.encumbered_since_treps)?;
        }
        if self.amount_treps != 0. {
            os.write_double(44, self.amount_treps)?;
        }
        if !self.encumbered_since_mcxs.is_empty() {
            os.write_string(45, &self.encumbered_since_mcxs)?;
        }
        if self.amount_mcxs != 0. {
            os.write_double(46, self.amount_mcxs)?;
        }
        if !self.encumbered_since_others.is_empty() {
            os.write_string(47, &self.encumbered_since_others)?;
        }
        if self.amount_others != 0. {
            os.write_double(48, self.amount_others)?;
        }
        if !self.custody_pos_number.is_empty() {
            os.write_string(49, &self.custody_pos_number)?;
        }
        if !self.custody_pos_type.is_empty() {
            os.write_string(50, &self.custody_pos_type)?;
        }
        if !self.interest_frequency.is_empty() {
            os.write_string(51, &self.interest_frequency)?;
        }
        if !self.interest_practice.is_empty() {
            os.write_string(52, &self.interest_practice)?;
        }
        if self.put_date != 0 {
            os.write_int64(53, self.put_date)?;
        }
        if self.call_date != 0 {
            os.write_int64(54, self.call_date)?;
        }
        if self.last_coupon_date != 0 {
            os.write_int64(55, self.last_coupon_date)?;
        }
        if self.next_coupon_date != 0 {
            os.write_int64(56, self.next_coupon_date)?;
        }
        if self.issue_date != 0 {
            os.write_int64(57, self.issue_date)?;
        }
        if !self.place.is_empty() {
            os.write_string(58, &self.place)?;
        }
        if !self.country.is_empty() {
            os.write_string(59, &self.country)?;
        }
        if !self.booking_basis.is_empty() {
            os.write_string(60, &self.booking_basis)?;
        }
        if self.residual_maturity != 0. {
            os.write_double(61, self.residual_maturity)?;
        }
        if !self.issuer_name.is_empty() {
            os.write_string(62, &self.issuer_name)?;
        }
        if !self.market.is_empty() {
            os.write_string(63, &self.market)?;
        }
        if !self.gurantor.is_empty() {
            os.write_string(64, &self.gurantor)?;
        }
        if !self.industry.is_empty() {
            os.write_string(65, &self.industry)?;
        }
        if !self.sub_industry.is_empty() {
            os.write_string(66, &self.sub_industry)?;
        }
        if !self.borrower_category.is_empty() {
            os.write_string(67, &self.borrower_category)?;
        }
        if !self.asset_classification.is_empty() {
            os.write_string(68, &self.asset_classification)?;
        }
        if !self.asset_type.is_empty() {
            os.write_string(69, &self.asset_type)?;
        }
        if !self.asset_category.is_empty() {
            os.write_string(70, &self.asset_category)?;
        }
        if !self.old_security_id.is_empty() {
            os.write_string(71, &self.old_security_id)?;
        }
        if !self.curve1.is_empty() {
            os.write_string(72, &self.curve1)?;
        }
        if !self.listed.is_empty() {
            os.write_string(73, &self.listed)?;
        }
        if !self.secured.is_empty() {
            os.write_string(74, &self.secured)?;
        }
        if !self.quoted.is_empty() {
            os.write_string(75, &self.quoted)?;
        }
        if !self.borrower.is_empty() {
            os.write_string(76, &self.borrower)?;
        }
        if !self.extbank_ref.is_empty() {
            os.write_string(77, &self.extbank_ref)?;
        }
        if !self.pan.is_empty() {
            os.write_string(78, &self.pan)?;
        }
        if !self.intr_rating_agency.is_empty() {
            os.write_string(79, &self.intr_rating_agency)?;
        }
        if !self.internal_rating.is_empty() {
            os.write_string(80, &self.internal_rating)?;
        }
        if self.intr_rating_valid_from != 0 {
            os.write_int64(81, self.intr_rating_valid_from)?;
        }
        if self.intr_rating_valid_till != 0 {
            os.write_int64(82, self.intr_rating_valid_till)?;
        }
        if !self.extrn_rating_agency.is_empty() {
            os.write_string(83, &self.extrn_rating_agency)?;
        }
        if !self.external_rating.is_empty() {
            os.write_string(84, &self.external_rating)?;
        }
        if self.extrn_rating_valid_from != 0 {
            os.write_int64(85, self.extrn_rating_valid_from)?;
        }
        if self.extrn_rating_valid_till != 0 {
            os.write_int64(86, self.extrn_rating_valid_till)?;
        }
        if !self.liquid_status.is_empty() {
            os.write_string(87, &self.liquid_status)?;
        }
        if !self.asset_sub_class.is_empty() {
            os.write_string(88, &self.asset_sub_class)?;
        }
        if !self.hurdle_rating.is_empty() {
            os.write_string(89, &self.hurdle_rating)?;
        }
        if !self.external_rating_vs_hurdle.is_empty() {
            os.write_string(90, &self.external_rating_vs_hurdle)?;
        }
        if !self.internal_rating_vs_hurdle.is_empty() {
            os.write_string(91, &self.internal_rating_vs_hurdle)?;
        }
        if !self.fsu.is_empty() {
            os.write_string(92, &self.fsu)?;
        }
        if !self.equity_seg.is_empty() {
            os.write_string(93, &self.equity_seg)?;
        }
        if !self.issuer_segr.is_empty() {
            os.write_string(94, &self.issuer_segr)?;
        }
        if !self.restructuring.is_empty() {
            os.write_string(95, &self.restructuring)?;
        }
        if !self.paid_up_share_captial.is_empty() {
            os.write_string(96, &self.paid_up_share_captial)?;
        }
        if self.exempted_amount != 0. {
            os.write_double(97, self.exempted_amount)?;
        }
        if !self.issuer_group.is_empty() {
            os.write_string(98, &self.issuer_group)?;
        }
        if self.murram_market_value != 0. {
            os.write_double(99, self.murram_market_value)?;
        }
        if self.murram_depr != 0. {
            os.write_double(100, self.murram_depr)?;
        }
        if self.var_settled_bv != 0. {
            os.write_double(101, self.var_settled_bv)?;
        }
        if self.var_unsettled_bv != 0. {
            os.write_double(102, self.var_unsettled_bv)?;
        }
        if self.var_settled_amount != 0. {
            os.write_double(103, self.var_settled_amount)?;
        }
        if self.var_unsettled_amount != 0. {
            os.write_double(104, self.var_unsettled_amount)?;
        }
        if self.kri_settled_qtd_fv != 0. {
            os.write_double(105, self.kri_settled_qtd_fv)?;
        }
        if !self.basel_group.is_empty() {
            os.write_string(106, &self.basel_group)?;
        }
        if !self.basel_sub_group.is_empty() {
            os.write_string(107, &self.basel_sub_group)?;
        }
        if !self.time_band.is_empty() {
            os.write_string(108, &self.time_band)?;
        }
        if !self.capital_charge_market_risk_rate.is_empty() {
            os.write_string(109, &self.capital_charge_market_risk_rate)?;
        }
        if self.capital_charge_market_risk_amount != 0. {
            os.write_double(110, self.capital_charge_market_risk_amount)?;
        }
        if self.trading_specif_risk_rate != 0. {
            os.write_double(111, self.trading_specif_risk_rate)?;
        }
        if self.banking_specif_risk_rate != 0. {
            os.write_double(112, self.banking_specif_risk_rate)?;
        }
        if self.trading_specif_risk_captial_charge != 0. {
            os.write_double(113, self.trading_specif_risk_captial_charge)?;
        }
        if self.banking_specif_risk_captial_charge != 0. {
            os.write_double(114, self.banking_specif_risk_captial_charge)?;
        }
        if !self.mode_of_holding.is_empty() {
            os.write_string(115, &self.mode_of_holding)?;
        }
        if !self.issuer_rating_agency.is_empty() {
            os.write_string(116, &self.issuer_rating_agency)?;
        }
        if !self.issuer_rating.is_empty() {
            os.write_string(117, &self.issuer_rating)?;
        }
        if self.issuer_rating_valid_from != 0 {
            os.write_int64(118, self.issuer_rating_valid_from)?;
        }
        if self.issuer_rating_valid_till != 0 {
            os.write_int64(119, self.issuer_rating_valid_till)?;
        }
        if !self.issuer_sub_industry.is_empty() {
            os.write_string(120, &self.issuer_sub_industry)?;
        }
        if !self.gl_code.is_empty() {
            os.write_string(121, &self.gl_code)?;
        }
        if !self.interest_type.is_empty() {
            os.write_string(122, &self.interest_type)?;
        }
        if self.computed_mat_date != 0 {
            os.write_int64(123, self.computed_mat_date)?;
        }
        if !self.cgl.is_empty() {
            os.write_string(124, &self.cgl)?;
        }
        if !self.group.is_empty() {
            os.write_string(125, &self.group)?;
        }
        if !self.llg.is_empty() {
            os.write_string(126, &self.llg)?;
        }
        if !self.currency.is_empty() {
            os.write_string(127, &self.currency)?;
        }
        if !self.mat_date_flag.is_empty() {
            os.write_string(128, &self.mat_date_flag)?;
        }
        if !self.concat_deal_id.is_empty() {
            os.write_string(129, &self.concat_deal_id)?;
        }
        if !self.concat_inst_id.is_empty() {
            os.write_string(130, &self.concat_inst_id)?;
        }
        if !self.concat_deal_n_slr_id.is_empty() {
            os.write_string(131, &self.concat_deal_n_slr_id)?;
        }
        if self.ftp_coupon_rate != 0. {
            os.write_double(132, self.ftp_coupon_rate)?;
        }
        for v in &self.cashflows {
            os.write_tag(133, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "portfolio",
                |m: &AccountWithCashflows| { &m.portfolio },
                |m: &mut AccountWithCashflows| { &mut m.portfolio },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "security_name",
                |m: &AccountWithCashflows| { &m.security_name },
                |m: &mut AccountWithCashflows| { &mut m.security_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instrument_id",
                |m: &AccountWithCashflows| { &m.instrument_id },
                |m: &mut AccountWithCashflows| { &mut m.instrument_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instrument_type",
                |m: &AccountWithCashflows| { &m.instrument_type },
                |m: &mut AccountWithCashflows| { &mut m.instrument_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "isin_code",
                |m: &AccountWithCashflows| { &m.isin_code },
                |m: &mut AccountWithCashflows| { &mut m.isin_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "slr_nslr",
                |m: &AccountWithCashflows| { &m.slr_nslr },
                |m: &mut AccountWithCashflows| { &mut m.slr_nslr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "category",
                |m: &AccountWithCashflows| { &m.category },
                |m: &mut AccountWithCashflows| { &mut m.category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "category_grp",
                |m: &AccountWithCashflows| { &m.category_grp },
                |m: &mut AccountWithCashflows| { &mut m.category_grp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sub_category",
                |m: &AccountWithCashflows| { &m.sub_category },
                |m: &mut AccountWithCashflows| { &mut m.sub_category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fa_classification",
                |m: &AccountWithCashflows| { &m.fa_classification },
                |m: &mut AccountWithCashflows| { &mut m.fa_classification },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "maturity_date",
                |m: &AccountWithCashflows| { &m.maturity_date },
                |m: &mut AccountWithCashflows| { &mut m.maturity_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "coupon",
                |m: &AccountWithCashflows| { &m.coupon },
                |m: &mut AccountWithCashflows| { &mut m.coupon },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "discount_intr_rate",
                |m: &AccountWithCashflows| { &m.discount_intr_rate },
                |m: &mut AccountWithCashflows| { &mut m.discount_intr_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "face_val_per_units",
                |m: &AccountWithCashflows| { &m.face_val_per_units },
                |m: &mut AccountWithCashflows| { &mut m.face_val_per_units },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "quantity",
                |m: &AccountWithCashflows| { &m.quantity },
                |m: &mut AccountWithCashflows| { &mut m.quantity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "face_value",
                |m: &AccountWithCashflows| { &m.face_value },
                |m: &mut AccountWithCashflows| { &mut m.face_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "wap",
                |m: &AccountWithCashflows| { &m.wap },
                |m: &mut AccountWithCashflows| { &mut m.wap },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "yield_value",
                |m: &AccountWithCashflows| { &m.yield_value },
                |m: &mut AccountWithCashflows| { &mut m.yield_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "book_value",
                |m: &AccountWithCashflows| { &m.book_value },
                |m: &mut AccountWithCashflows| { &mut m.book_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "mvmnt_amount",
                |m: &AccountWithCashflows| { &m.mvmnt_amount },
                |m: &mut AccountWithCashflows| { &mut m.mvmnt_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "market_price",
                |m: &AccountWithCashflows| { &m.market_price },
                |m: &mut AccountWithCashflows| { &mut m.market_price },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "market_yield",
                |m: &AccountWithCashflows| { &m.market_yield },
                |m: &mut AccountWithCashflows| { &mut m.market_yield },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "market_value",
                |m: &AccountWithCashflows| { &m.market_value },
                |m: &mut AccountWithCashflows| { &mut m.market_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "duration",
                |m: &AccountWithCashflows| { &m.duration },
                |m: &mut AccountWithCashflows| { &mut m.duration },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "m_duration",
                |m: &AccountWithCashflows| { &m.m_duration },
                |m: &mut AccountWithCashflows| { &mut m.m_duration },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "appreciation",
                |m: &AccountWithCashflows| { &m.appreciation },
                |m: &mut AccountWithCashflows| { &mut m.appreciation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "depreciation",
                |m: &AccountWithCashflows| { &m.depreciation },
                |m: &mut AccountWithCashflows| { &mut m.depreciation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "net_app_dep",
                |m: &AccountWithCashflows| { &m.net_app_dep },
                |m: &mut AccountWithCashflows| { &mut m.net_app_dep },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "convexity",
                |m: &AccountWithCashflows| { &m.convexity },
                |m: &mut AccountWithCashflows| { &mut m.convexity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pvbp",
                |m: &AccountWithCashflows| { &m.pvbp },
                |m: &mut AccountWithCashflows| { &mut m.pvbp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "absolute_pvbp",
                |m: &AccountWithCashflows| { &m.absolute_pvbp },
                |m: &mut AccountWithCashflows| { &mut m.absolute_pvbp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "amortization_asondate",
                |m: &AccountWithCashflows| { &m.amortization_asondate },
                |m: &mut AccountWithCashflows| { &mut m.amortization_asondate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "accounted_amortization",
                |m: &AccountWithCashflows| { &m.accounted_amortization },
                |m: &mut AccountWithCashflows| { &mut m.accounted_amortization },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "unaccounted_amortization",
                |m: &AccountWithCashflows| { &m.unaccounted_amortization },
                |m: &mut AccountWithCashflows| { &mut m.unaccounted_amortization },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "accrued_interest",
                |m: &AccountWithCashflows| { &m.accrued_interest },
                |m: &mut AccountWithCashflows| { &mut m.accrued_interest },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "no_of_ca_skipped",
                |m: &AccountWithCashflows| { &m.no_of_ca_skipped },
                |m: &mut AccountWithCashflows| { &mut m.no_of_ca_skipped },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ca_interest_not_receieved",
                |m: &AccountWithCashflows| { &m.ca_interest_not_receieved },
                |m: &mut AccountWithCashflows| { &mut m.ca_interest_not_receieved },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "total_interest",
                |m: &AccountWithCashflows| { &m.total_interest },
                |m: &mut AccountWithCashflows| { &mut m.total_interest },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "encumbered_since_repo",
                |m: &AccountWithCashflows| { &m.encumbered_since_repo },
                |m: &mut AccountWithCashflows| { &mut m.encumbered_since_repo },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "amount_repo",
                |m: &AccountWithCashflows| { &m.amount_repo },
                |m: &mut AccountWithCashflows| { &mut m.amount_repo },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "encumbered_since_ccil",
                |m: &AccountWithCashflows| { &m.encumbered_since_ccil },
                |m: &mut AccountWithCashflows| { &mut m.encumbered_since_ccil },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "amount_ccil",
                |m: &AccountWithCashflows| { &m.amount_ccil },
                |m: &mut AccountWithCashflows| { &mut m.amount_ccil },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "encumbered_since_treps",
                |m: &AccountWithCashflows| { &m.encumbered_since_treps },
                |m: &mut AccountWithCashflows| { &mut m.encumbered_since_treps },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "amount_treps",
                |m: &AccountWithCashflows| { &m.amount_treps },
                |m: &mut AccountWithCashflows| { &mut m.amount_treps },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "encumbered_since_mcxs",
                |m: &AccountWithCashflows| { &m.encumbered_since_mcxs },
                |m: &mut AccountWithCashflows| { &mut m.encumbered_since_mcxs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "amount_mcxs",
                |m: &AccountWithCashflows| { &m.amount_mcxs },
                |m: &mut AccountWithCashflows| { &mut m.amount_mcxs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "encumbered_since_others",
                |m: &AccountWithCashflows| { &m.encumbered_since_others },
                |m: &mut AccountWithCashflows| { &mut m.encumbered_since_others },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "amount_others",
                |m: &AccountWithCashflows| { &m.amount_others },
                |m: &mut AccountWithCashflows| { &mut m.amount_others },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "custody_pos_number",
                |m: &AccountWithCashflows| { &m.custody_pos_number },
                |m: &mut AccountWithCashflows| { &mut m.custody_pos_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "custody_pos_type",
                |m: &AccountWithCashflows| { &m.custody_pos_type },
                |m: &mut AccountWithCashflows| { &mut m.custody_pos_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "interest_frequency",
                |m: &AccountWithCashflows| { &m.interest_frequency },
                |m: &mut AccountWithCashflows| { &mut m.interest_frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "interest_practice",
                |m: &AccountWithCashflows| { &m.interest_practice },
                |m: &mut AccountWithCashflows| { &mut m.interest_practice },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "put_date",
                |m: &AccountWithCashflows| { &m.put_date },
                |m: &mut AccountWithCashflows| { &mut m.put_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "call_date",
                |m: &AccountWithCashflows| { &m.call_date },
                |m: &mut AccountWithCashflows| { &mut m.call_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_coupon_date",
                |m: &AccountWithCashflows| { &m.last_coupon_date },
                |m: &mut AccountWithCashflows| { &mut m.last_coupon_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_coupon_date",
                |m: &AccountWithCashflows| { &m.next_coupon_date },
                |m: &mut AccountWithCashflows| { &mut m.next_coupon_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "issue_date",
                |m: &AccountWithCashflows| { &m.issue_date },
                |m: &mut AccountWithCashflows| { &mut m.issue_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "place",
                |m: &AccountWithCashflows| { &m.place },
                |m: &mut AccountWithCashflows| { &mut m.place },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "country",
                |m: &AccountWithCashflows| { &m.country },
                |m: &mut AccountWithCashflows| { &mut m.country },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "booking_basis",
                |m: &AccountWithCashflows| { &m.booking_basis },
                |m: &mut AccountWithCashflows| { &mut m.booking_basis },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "residual_maturity",
                |m: &AccountWithCashflows| { &m.residual_maturity },
                |m: &mut AccountWithCashflows| { &mut m.residual_maturity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "issuer_name",
                |m: &AccountWithCashflows| { &m.issuer_name },
                |m: &mut AccountWithCashflows| { &mut m.issuer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "market",
                |m: &AccountWithCashflows| { &m.market },
                |m: &mut AccountWithCashflows| { &mut m.market },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gurantor",
                |m: &AccountWithCashflows| { &m.gurantor },
                |m: &mut AccountWithCashflows| { &mut m.gurantor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "industry",
                |m: &AccountWithCashflows| { &m.industry },
                |m: &mut AccountWithCashflows| { &mut m.industry },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sub_industry",
                |m: &AccountWithCashflows| { &m.sub_industry },
                |m: &mut AccountWithCashflows| { &mut m.sub_industry },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "borrower_category",
                |m: &AccountWithCashflows| { &m.borrower_category },
                |m: &mut AccountWithCashflows| { &mut m.borrower_category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_classification",
                |m: &AccountWithCashflows| { &m.asset_classification },
                |m: &mut AccountWithCashflows| { &mut m.asset_classification },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_type",
                |m: &AccountWithCashflows| { &m.asset_type },
                |m: &mut AccountWithCashflows| { &mut m.asset_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_category",
                |m: &AccountWithCashflows| { &m.asset_category },
                |m: &mut AccountWithCashflows| { &mut m.asset_category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "old_security_id",
                |m: &AccountWithCashflows| { &m.old_security_id },
                |m: &mut AccountWithCashflows| { &mut m.old_security_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "curve1",
                |m: &AccountWithCashflows| { &m.curve1 },
                |m: &mut AccountWithCashflows| { &mut m.curve1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "listed",
                |m: &AccountWithCashflows| { &m.listed },
                |m: &mut AccountWithCashflows| { &mut m.listed },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "secured",
                |m: &AccountWithCashflows| { &m.secured },
                |m: &mut AccountWithCashflows| { &mut m.secured },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "quoted",
                |m: &AccountWithCashflows| { &m.quoted },
                |m: &mut AccountWithCashflows| { &mut m.quoted },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "borrower",
                |m: &AccountWithCashflows| { &m.borrower },
                |m: &mut AccountWithCashflows| { &mut m.borrower },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "extbank_ref",
                |m: &AccountWithCashflows| { &m.extbank_ref },
                |m: &mut AccountWithCashflows| { &mut m.extbank_ref },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pan",
                |m: &AccountWithCashflows| { &m.pan },
                |m: &mut AccountWithCashflows| { &mut m.pan },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "intr_rating_agency",
                |m: &AccountWithCashflows| { &m.intr_rating_agency },
                |m: &mut AccountWithCashflows| { &mut m.intr_rating_agency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "internal_rating",
                |m: &AccountWithCashflows| { &m.internal_rating },
                |m: &mut AccountWithCashflows| { &mut m.internal_rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "intr_rating_valid_from",
                |m: &AccountWithCashflows| { &m.intr_rating_valid_from },
                |m: &mut AccountWithCashflows| { &mut m.intr_rating_valid_from },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "intr_rating_valid_till",
                |m: &AccountWithCashflows| { &m.intr_rating_valid_till },
                |m: &mut AccountWithCashflows| { &mut m.intr_rating_valid_till },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "extrn_rating_agency",
                |m: &AccountWithCashflows| { &m.extrn_rating_agency },
                |m: &mut AccountWithCashflows| { &mut m.extrn_rating_agency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "external_rating",
                |m: &AccountWithCashflows| { &m.external_rating },
                |m: &mut AccountWithCashflows| { &mut m.external_rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "extrn_rating_valid_from",
                |m: &AccountWithCashflows| { &m.extrn_rating_valid_from },
                |m: &mut AccountWithCashflows| { &mut m.extrn_rating_valid_from },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "extrn_rating_valid_till",
                |m: &AccountWithCashflows| { &m.extrn_rating_valid_till },
                |m: &mut AccountWithCashflows| { &mut m.extrn_rating_valid_till },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "liquid_status",
                |m: &AccountWithCashflows| { &m.liquid_status },
                |m: &mut AccountWithCashflows| { &mut m.liquid_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_sub_class",
                |m: &AccountWithCashflows| { &m.asset_sub_class },
                |m: &mut AccountWithCashflows| { &mut m.asset_sub_class },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hurdle_rating",
                |m: &AccountWithCashflows| { &m.hurdle_rating },
                |m: &mut AccountWithCashflows| { &mut m.hurdle_rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "external_rating_vs_hurdle",
                |m: &AccountWithCashflows| { &m.external_rating_vs_hurdle },
                |m: &mut AccountWithCashflows| { &mut m.external_rating_vs_hurdle },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "internal_rating_vs_hurdle",
                |m: &AccountWithCashflows| { &m.internal_rating_vs_hurdle },
                |m: &mut AccountWithCashflows| { &mut m.internal_rating_vs_hurdle },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fsu",
                |m: &AccountWithCashflows| { &m.fsu },
                |m: &mut AccountWithCashflows| { &mut m.fsu },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "equity_seg",
                |m: &AccountWithCashflows| { &m.equity_seg },
                |m: &mut AccountWithCashflows| { &mut m.equity_seg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "issuer_segr",
                |m: &AccountWithCashflows| { &m.issuer_segr },
                |m: &mut AccountWithCashflows| { &mut m.issuer_segr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "restructuring",
                |m: &AccountWithCashflows| { &m.restructuring },
                |m: &mut AccountWithCashflows| { &mut m.restructuring },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "paid_up_share_captial",
                |m: &AccountWithCashflows| { &m.paid_up_share_captial },
                |m: &mut AccountWithCashflows| { &mut m.paid_up_share_captial },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "exempted_amount",
                |m: &AccountWithCashflows| { &m.exempted_amount },
                |m: &mut AccountWithCashflows| { &mut m.exempted_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "issuer_group",
                |m: &AccountWithCashflows| { &m.issuer_group },
                |m: &mut AccountWithCashflows| { &mut m.issuer_group },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "murram_market_value",
                |m: &AccountWithCashflows| { &m.murram_market_value },
                |m: &mut AccountWithCashflows| { &mut m.murram_market_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "murram_depr",
                |m: &AccountWithCashflows| { &m.murram_depr },
                |m: &mut AccountWithCashflows| { &mut m.murram_depr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "var_settled_bv",
                |m: &AccountWithCashflows| { &m.var_settled_bv },
                |m: &mut AccountWithCashflows| { &mut m.var_settled_bv },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "var_unsettled_bv",
                |m: &AccountWithCashflows| { &m.var_unsettled_bv },
                |m: &mut AccountWithCashflows| { &mut m.var_unsettled_bv },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "var_settled_amount",
                |m: &AccountWithCashflows| { &m.var_settled_amount },
                |m: &mut AccountWithCashflows| { &mut m.var_settled_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "var_unsettled_amount",
                |m: &AccountWithCashflows| { &m.var_unsettled_amount },
                |m: &mut AccountWithCashflows| { &mut m.var_unsettled_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "kri_settled_qtd_fv",
                |m: &AccountWithCashflows| { &m.kri_settled_qtd_fv },
                |m: &mut AccountWithCashflows| { &mut m.kri_settled_qtd_fv },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "basel_group",
                |m: &AccountWithCashflows| { &m.basel_group },
                |m: &mut AccountWithCashflows| { &mut m.basel_group },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "basel_sub_group",
                |m: &AccountWithCashflows| { &m.basel_sub_group },
                |m: &mut AccountWithCashflows| { &mut m.basel_sub_group },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "time_band",
                |m: &AccountWithCashflows| { &m.time_band },
                |m: &mut AccountWithCashflows| { &mut m.time_band },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "capital_charge_market_risk_rate",
                |m: &AccountWithCashflows| { &m.capital_charge_market_risk_rate },
                |m: &mut AccountWithCashflows| { &mut m.capital_charge_market_risk_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "capital_charge_market_risk_amount",
                |m: &AccountWithCashflows| { &m.capital_charge_market_risk_amount },
                |m: &mut AccountWithCashflows| { &mut m.capital_charge_market_risk_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "trading_specif_risk_rate",
                |m: &AccountWithCashflows| { &m.trading_specif_risk_rate },
                |m: &mut AccountWithCashflows| { &mut m.trading_specif_risk_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "banking_specif_risk_rate",
                |m: &AccountWithCashflows| { &m.banking_specif_risk_rate },
                |m: &mut AccountWithCashflows| { &mut m.banking_specif_risk_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "trading_specif_risk_captial_charge",
                |m: &AccountWithCashflows| { &m.trading_specif_risk_captial_charge },
                |m: &mut AccountWithCashflows| { &mut m.trading_specif_risk_captial_charge },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "banking_specif_risk_captial_charge",
                |m: &AccountWithCashflows| { &m.banking_specif_risk_captial_charge },
                |m: &mut AccountWithCashflows| { &mut m.banking_specif_risk_captial_charge },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mode_of_holding",
                |m: &AccountWithCashflows| { &m.mode_of_holding },
                |m: &mut AccountWithCashflows| { &mut m.mode_of_holding },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "issuer_rating_agency",
                |m: &AccountWithCashflows| { &m.issuer_rating_agency },
                |m: &mut AccountWithCashflows| { &mut m.issuer_rating_agency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "issuer_rating",
                |m: &AccountWithCashflows| { &m.issuer_rating },
                |m: &mut AccountWithCashflows| { &mut m.issuer_rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "issuer_rating_valid_from",
                |m: &AccountWithCashflows| { &m.issuer_rating_valid_from },
                |m: &mut AccountWithCashflows| { &mut m.issuer_rating_valid_from },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "issuer_rating_valid_till",
                |m: &AccountWithCashflows| { &m.issuer_rating_valid_till },
                |m: &mut AccountWithCashflows| { &mut m.issuer_rating_valid_till },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "issuer_sub_industry",
                |m: &AccountWithCashflows| { &m.issuer_sub_industry },
                |m: &mut AccountWithCashflows| { &mut m.issuer_sub_industry },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_code",
                |m: &AccountWithCashflows| { &m.gl_code },
                |m: &mut AccountWithCashflows| { &mut m.gl_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "interest_type",
                |m: &AccountWithCashflows| { &m.interest_type },
                |m: &mut AccountWithCashflows| { &mut m.interest_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "computed_mat_date",
                |m: &AccountWithCashflows| { &m.computed_mat_date },
                |m: &mut AccountWithCashflows| { &mut m.computed_mat_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cgl",
                |m: &AccountWithCashflows| { &m.cgl },
                |m: &mut AccountWithCashflows| { &mut m.cgl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group",
                |m: &AccountWithCashflows| { &m.group },
                |m: &mut AccountWithCashflows| { &mut m.group },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "llg",
                |m: &AccountWithCashflows| { &m.llg },
                |m: &mut AccountWithCashflows| { &mut m.llg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &AccountWithCashflows| { &m.currency },
                |m: &mut AccountWithCashflows| { &mut m.currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mat_date_flag",
                |m: &AccountWithCashflows| { &m.mat_date_flag },
                |m: &mut AccountWithCashflows| { &mut m.mat_date_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "concat_deal_id",
                |m: &AccountWithCashflows| { &m.concat_deal_id },
                |m: &mut AccountWithCashflows| { &mut m.concat_deal_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "concat_inst_id",
                |m: &AccountWithCashflows| { &m.concat_inst_id },
                |m: &mut AccountWithCashflows| { &mut m.concat_inst_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "concat_deal_n_slr_id",
                |m: &AccountWithCashflows| { &m.concat_deal_n_slr_id },
                |m: &mut AccountWithCashflows| { &mut m.concat_deal_n_slr_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ftp_coupon_rate",
                |m: &AccountWithCashflows| { &m.ftp_coupon_rate },
                |m: &mut AccountWithCashflows| { &mut m.ftp_coupon_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.portfolio.clear();
        self.security_name.clear();
        self.instrument_id.clear();
        self.instrument_type.clear();
        self.isin_code.clear();
        self.slr_nslr.clear();
        self.category.clear();
        self.category_grp.clear();
        self.sub_category.clear();
        self.fa_classification.clear();
        self.maturity_date = 0;
        self.coupon = 0.;
        self.discount_intr_rate = 0.;
        self.face_val_per_units = 0.;
        self.quantity = 0.;
        self.face_value = 0.;
        self.wap = 0.;
        self.yield_value = 0.;
        self.book_value = 0.;
        self.mvmnt_amount = 0.;
        self.market_price = 0.;
        self.market_yield = 0.;
        self.market_value = 0.;
        self.duration = 0.;
        self.m_duration = 0.;
        self.appreciation = 0.;
        self.depreciation = 0.;
        self.net_app_dep = 0.;
        self.convexity = 0.;
        self.pvbp = 0.;
        self.absolute_pvbp = 0.;
        self.amortization_asondate = 0.;
        self.accounted_amortization = 0.;
        self.unaccounted_amortization = 0.;
        self.accrued_interest = 0.;
        self.no_of_ca_skipped.clear();
        self.ca_interest_not_receieved.clear();
        self.total_interest = 0.;
        self.encumbered_since_repo.clear();
        self.amount_repo = 0.;
        self.encumbered_since_ccil.clear();
        self.amount_ccil = 0.;
        self.encumbered_since_treps.clear();
        self.amount_treps = 0.;
        self.encumbered_since_mcxs.clear();
        self.amount_mcxs = 0.;
        self.encumbered_since_others.clear();
        self.amount_others = 0.;
        self.custody_pos_number.clear();
        self.custody_pos_type.clear();
        self.interest_frequency.clear();
        self.interest_practice.clear();
        self.put_date = 0;
        self.call_date = 0;
        self.last_coupon_date = 0;
        self.next_coupon_date = 0;
        self.issue_date = 0;
        self.place.clear();
        self.country.clear();
        self.booking_basis.clear();
        self.residual_maturity = 0.;
        self.issuer_name.clear();
        self.market.clear();
        self.gurantor.clear();
        self.industry.clear();
        self.sub_industry.clear();
        self.borrower_category.clear();
        self.asset_classification.clear();
        self.asset_type.clear();
        self.asset_category.clear();
        self.old_security_id.clear();
        self.curve1.clear();
        self.listed.clear();
        self.secured.clear();
        self.quoted.clear();
        self.borrower.clear();
        self.extbank_ref.clear();
        self.pan.clear();
        self.intr_rating_agency.clear();
        self.internal_rating.clear();
        self.intr_rating_valid_from = 0;
        self.intr_rating_valid_till = 0;
        self.extrn_rating_agency.clear();
        self.external_rating.clear();
        self.extrn_rating_valid_from = 0;
        self.extrn_rating_valid_till = 0;
        self.liquid_status.clear();
        self.asset_sub_class.clear();
        self.hurdle_rating.clear();
        self.external_rating_vs_hurdle.clear();
        self.internal_rating_vs_hurdle.clear();
        self.fsu.clear();
        self.equity_seg.clear();
        self.issuer_segr.clear();
        self.restructuring.clear();
        self.paid_up_share_captial.clear();
        self.exempted_amount = 0.;
        self.issuer_group.clear();
        self.murram_market_value = 0.;
        self.murram_depr = 0.;
        self.var_settled_bv = 0.;
        self.var_unsettled_bv = 0.;
        self.var_settled_amount = 0.;
        self.var_unsettled_amount = 0.;
        self.kri_settled_qtd_fv = 0.;
        self.basel_group.clear();
        self.basel_sub_group.clear();
        self.time_band.clear();
        self.capital_charge_market_risk_rate.clear();
        self.capital_charge_market_risk_amount = 0.;
        self.trading_specif_risk_rate = 0.;
        self.banking_specif_risk_rate = 0.;
        self.trading_specif_risk_captial_charge = 0.;
        self.banking_specif_risk_captial_charge = 0.;
        self.mode_of_holding.clear();
        self.issuer_rating_agency.clear();
        self.issuer_rating.clear();
        self.issuer_rating_valid_from = 0;
        self.issuer_rating_valid_till = 0;
        self.issuer_sub_industry.clear();
        self.gl_code.clear();
        self.interest_type.clear();
        self.computed_mat_date = 0;
        self.cgl.clear();
        self.group.clear();
        self.llg.clear();
        self.currency.clear();
        self.mat_date_flag.clear();
        self.concat_deal_id.clear();
        self.concat_inst_id.clear();
        self.concat_deal_n_slr_id.clear();
        self.ftp_coupon_rate = 0.;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\
    \x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prin\
    Amt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\x8c)\n\x14AccountW\
    ithCashflows\x12\x1c\n\tportfolio\x18\x01\x20\x01(\tR\tportfolio\x12#\n\
    \rsecurity_name\x18\x02\x20\x01(\tR\x0csecurityName\x12#\n\rinstrument_i\
    d\x18\x03\x20\x01(\tR\x0cinstrumentId\x12'\n\x0finstrument_type\x18\x04\
    \x20\x01(\tR\x0einstrumentType\x12\x1b\n\tisin_code\x18\x05\x20\x01(\tR\
    \x08isinCode\x12\x19\n\x08slr_nslr\x18\x06\x20\x01(\tR\x07slrNslr\x12\
    \x1a\n\x08category\x18\x07\x20\x01(\tR\x08category\x12!\n\x0ccategory_gr\
    p\x18\x08\x20\x01(\tR\x0bcategoryGrp\x12!\n\x0csub_category\x18\t\x20\
    \x01(\tR\x0bsubCategory\x12+\n\x11fa_classification\x18\n\x20\x01(\tR\
    \x10faClassification\x12#\n\rmaturity_date\x18\x0b\x20\x01(\x03R\x0cmatu\
    rityDate\x12\x16\n\x06coupon\x18\x0c\x20\x01(\x01R\x06coupon\x12,\n\x12d\
    iscount_intr_rate\x18\r\x20\x01(\x01R\x10discountIntrRate\x12+\n\x12face\
    _val_per_units\x18\x0e\x20\x01(\x01R\x0ffaceValPerUnits\x12\x1a\n\x08qua\
    ntity\x18\x0f\x20\x01(\x01R\x08quantity\x12\x1d\n\nface_value\x18\x10\
    \x20\x01(\x01R\tfaceValue\x12\x10\n\x03wap\x18\x11\x20\x01(\x01R\x03wap\
    \x12\x1f\n\x0byield_value\x18\x12\x20\x01(\x01R\nyieldValue\x12\x1d\n\nb\
    ook_value\x18\x13\x20\x01(\x01R\tbookValue\x12!\n\x0cmvmnt_amount\x18\
    \x14\x20\x01(\x01R\x0bmvmntAmount\x12!\n\x0cmarket_price\x18\x15\x20\x01\
    (\x01R\x0bmarketPrice\x12!\n\x0cmarket_yield\x18\x16\x20\x01(\x01R\x0bma\
    rketYield\x12!\n\x0cmarket_value\x18\x17\x20\x01(\x01R\x0bmarketValue\
    \x12\x1a\n\x08duration\x18\x18\x20\x01(\x01R\x08duration\x12\x1d\n\nm_du\
    ration\x18\x19\x20\x01(\x01R\tmDuration\x12\"\n\x0cappreciation\x18\x1a\
    \x20\x01(\x01R\x0cappreciation\x12\"\n\x0cdepreciation\x18\x1b\x20\x01(\
    \x01R\x0cdepreciation\x12\x1e\n\x0bnet_app_dep\x18\x1c\x20\x01(\x01R\tne\
    tAppDep\x12\x1c\n\tconvexity\x18\x1d\x20\x01(\x01R\tconvexity\x12\x12\n\
    \x04pvbp\x18\x1e\x20\x01(\x01R\x04pvbp\x12#\n\rabsolute_pvbp\x18\x1f\x20\
    \x01(\x01R\x0cabsolutePvbp\x123\n\x15amortization_asondate\x18\x20\x20\
    \x01(\x01R\x14amortizationAsondate\x125\n\x16accounted_amortization\x18!\
    \x20\x01(\x01R\x15accountedAmortization\x129\n\x18unaccounted_amortizati\
    on\x18\"\x20\x01(\x01R\x17unaccountedAmortization\x12)\n\x10accrued_inte\
    rest\x18#\x20\x01(\x01R\x0faccruedInterest\x12'\n\x10no_of_ca_skipped\
    \x18$\x20\x01(\tR\rnoOfCaSkipped\x129\n\x19ca_interest_not_receieved\x18\
    %\x20\x01(\tR\x16caInterestNotReceieved\x12%\n\x0etotal_interest\x18&\
    \x20\x01(\x01R\rtotalInterest\x122\n\x15encumbered_since_repo\x18'\x20\
    \x01(\tR\x13encumberedSinceRepo\x12\x1f\n\x0bamount_repo\x18(\x20\x01(\
    \x01R\namountRepo\x122\n\x15encumbered_since_ccil\x18)\x20\x01(\tR\x13en\
    cumberedSinceCcil\x12\x1f\n\x0bamount_ccil\x18*\x20\x01(\x01R\namountCci\
    l\x124\n\x16encumbered_since_treps\x18+\x20\x01(\tR\x14encumberedSinceTr\
    eps\x12!\n\x0camount_treps\x18,\x20\x01(\x01R\x0bamountTreps\x122\n\x15e\
    ncumbered_since_mcxs\x18-\x20\x01(\tR\x13encumberedSinceMcxs\x12\x1f\n\
    \x0bamount_mcxs\x18.\x20\x01(\x01R\namountMcxs\x126\n\x17encumbered_sinc\
    e_others\x18/\x20\x01(\tR\x15encumberedSinceOthers\x12#\n\ramount_others\
    \x180\x20\x01(\x01R\x0camountOthers\x12,\n\x12custody_pos_number\x181\
    \x20\x01(\tR\x10custodyPosNumber\x12(\n\x10custody_pos_type\x182\x20\x01\
    (\tR\x0ecustodyPosType\x12-\n\x12interest_frequency\x183\x20\x01(\tR\x11\
    interestFrequency\x12+\n\x11interest_practice\x184\x20\x01(\tR\x10intere\
    stPractice\x12\x19\n\x08put_date\x185\x20\x01(\x03R\x07putDate\x12\x1b\n\
    \tcall_date\x186\x20\x01(\x03R\x08callDate\x12(\n\x10last_coupon_date\
    \x187\x20\x01(\x03R\x0elastCouponDate\x12(\n\x10next_coupon_date\x188\
    \x20\x01(\x03R\x0enextCouponDate\x12\x1d\n\nissue_date\x189\x20\x01(\x03\
    R\tissueDate\x12\x14\n\x05place\x18:\x20\x01(\tR\x05place\x12\x18\n\x07c\
    ountry\x18;\x20\x01(\tR\x07country\x12#\n\rbooking_basis\x18<\x20\x01(\t\
    R\x0cbookingBasis\x12+\n\x11residual_maturity\x18=\x20\x01(\x01R\x10resi\
    dualMaturity\x12\x1f\n\x0bissuer_name\x18>\x20\x01(\tR\nissuerName\x12\
    \x16\n\x06market\x18?\x20\x01(\tR\x06market\x12\x1a\n\x08gurantor\x18@\
    \x20\x01(\tR\x08gurantor\x12\x1a\n\x08industry\x18A\x20\x01(\tR\x08indus\
    try\x12!\n\x0csub_industry\x18B\x20\x01(\tR\x0bsubIndustry\x12+\n\x11bor\
    rower_category\x18C\x20\x01(\tR\x10borrowerCategory\x121\n\x14asset_clas\
    sification\x18D\x20\x01(\tR\x13assetClassification\x12\x1d\n\nasset_type\
    \x18E\x20\x01(\tR\tassetType\x12%\n\x0easset_category\x18F\x20\x01(\tR\r\
    assetCategory\x12&\n\x0fold_security_id\x18G\x20\x01(\tR\roldSecurityId\
    \x12\x16\n\x06curve1\x18H\x20\x01(\tR\x06curve1\x12\x16\n\x06listed\x18I\
    \x20\x01(\tR\x06listed\x12\x18\n\x07secured\x18J\x20\x01(\tR\x07secured\
    \x12\x16\n\x06quoted\x18K\x20\x01(\tR\x06quoted\x12\x1a\n\x08borrower\
    \x18L\x20\x01(\tR\x08borrower\x12\x1f\n\x0bextbank_ref\x18M\x20\x01(\tR\
    \nextbankRef\x12\x10\n\x03pan\x18N\x20\x01(\tR\x03pan\x12,\n\x12intr_rat\
    ing_agency\x18O\x20\x01(\tR\x10intrRatingAgency\x12'\n\x0finternal_ratin\
    g\x18P\x20\x01(\tR\x0einternalRating\x123\n\x16intr_rating_valid_from\
    \x18Q\x20\x01(\x03R\x13intrRatingValidFrom\x123\n\x16intr_rating_valid_t\
    ill\x18R\x20\x01(\x03R\x13intrRatingValidTill\x12.\n\x13extrn_rating_age\
    ncy\x18S\x20\x01(\tR\x11extrnRatingAgency\x12'\n\x0fexternal_rating\x18T\
    \x20\x01(\tR\x0eexternalRating\x125\n\x17extrn_rating_valid_from\x18U\
    \x20\x01(\x03R\x14extrnRatingValidFrom\x125\n\x17extrn_rating_valid_till\
    \x18V\x20\x01(\x03R\x14extrnRatingValidTill\x12#\n\rliquid_status\x18W\
    \x20\x01(\tR\x0cliquidStatus\x12&\n\x0fasset_sub_class\x18X\x20\x01(\tR\
    \rassetSubClass\x12#\n\rhurdle_rating\x18Y\x20\x01(\tR\x0churdleRating\
    \x129\n\x19external_rating_vs_hurdle\x18Z\x20\x01(\tR\x16externalRatingV\
    sHurdle\x129\n\x19internal_rating_vs_hurdle\x18[\x20\x01(\tR\x16internal\
    RatingVsHurdle\x12\x10\n\x03fsu\x18\\\x20\x01(\tR\x03fsu\x12\x1d\n\nequi\
    ty_seg\x18]\x20\x01(\tR\tequitySeg\x12\x1f\n\x0bissuer_segr\x18^\x20\x01\
    (\tR\nissuerSegr\x12$\n\rrestructuring\x18_\x20\x01(\tR\rrestructuring\
    \x121\n\x15paid_up_share_captial\x18`\x20\x01(\tR\x12paidUpShareCaptial\
    \x12'\n\x0fexempted_amount\x18a\x20\x01(\x01R\x0eexemptedAmount\x12!\n\
    \x0cissuer_group\x18b\x20\x01(\tR\x0bissuerGroup\x12.\n\x13murram_market\
    _value\x18c\x20\x01(\x01R\x11murramMarketValue\x12\x1f\n\x0bmurram_depr\
    \x18d\x20\x01(\x01R\nmurramDepr\x12$\n\x0evar_settled_bv\x18e\x20\x01(\
    \x01R\x0cvarSettledBv\x12(\n\x10var_unsettled_bv\x18f\x20\x01(\x01R\x0ev\
    arUnsettledBv\x12,\n\x12var_settled_amount\x18g\x20\x01(\x01R\x10varSett\
    ledAmount\x120\n\x14var_unsettled_amount\x18h\x20\x01(\x01R\x12varUnsett\
    ledAmount\x12+\n\x12kri_settled_qtd_fv\x18i\x20\x01(\x01R\x0fkriSettledQ\
    tdFv\x12\x1f\n\x0bbasel_group\x18j\x20\x01(\tR\nbaselGroup\x12&\n\x0fbas\
    el_sub_group\x18k\x20\x01(\tR\rbaselSubGroup\x12\x1b\n\ttime_band\x18l\
    \x20\x01(\tR\x08timeBand\x12D\n\x1fcapital_charge_market_risk_rate\x18m\
    \x20\x01(\tR\x1bcapitalChargeMarketRiskRate\x12H\n!capital_charge_market\
    _risk_amount\x18n\x20\x01(\x01R\x1dcapitalChargeMarketRiskAmount\x127\n\
    \x18trading_specif_risk_rate\x18o\x20\x01(\x01R\x15tradingSpecifRiskRate\
    \x127\n\x18banking_specif_risk_rate\x18p\x20\x01(\x01R\x15bankingSpecifR\
    iskRate\x12J\n\"trading_specif_risk_captial_charge\x18q\x20\x01(\x01R\
    \x1etradingSpecifRiskCaptialCharge\x12J\n\"banking_specif_risk_captial_c\
    harge\x18r\x20\x01(\x01R\x1ebankingSpecifRiskCaptialCharge\x12&\n\x0fmod\
    e_of_holding\x18s\x20\x01(\tR\rmodeOfHolding\x120\n\x14issuer_rating_age\
    ncy\x18t\x20\x01(\tR\x12issuerRatingAgency\x12#\n\rissuer_rating\x18u\
    \x20\x01(\tR\x0cissuerRating\x127\n\x18issuer_rating_valid_from\x18v\x20\
    \x01(\x03R\x15issuerRatingValidFrom\x127\n\x18issuer_rating_valid_till\
    \x18w\x20\x01(\x03R\x15issuerRatingValidTill\x12.\n\x13issuer_sub_indust\
    ry\x18x\x20\x01(\tR\x11issuerSubIndustry\x12\x17\n\x07gl_code\x18y\x20\
    \x01(\tR\x06glCode\x12#\n\rinterest_type\x18z\x20\x01(\tR\x0cinterestTyp\
    e\x12*\n\x11computed_mat_date\x18{\x20\x01(\x03R\x0fcomputedMatDate\x12\
    \x10\n\x03cgl\x18|\x20\x01(\tR\x03cgl\x12\x14\n\x05group\x18}\x20\x01(\t\
    R\x05group\x12\x10\n\x03llg\x18~\x20\x01(\tR\x03llg\x12\x1a\n\x08currenc\
    y\x18\x7f\x20\x01(\tR\x08currency\x12#\n\rmat_date_flag\x18\x80\x01\x20\
    \x01(\tR\x0bmatDateFlag\x12%\n\x0econcat_deal_id\x18\x81\x01\x20\x01(\tR\
    \x0cconcatDealId\x12%\n\x0econcat_inst_id\x18\x82\x01\x20\x01(\tR\x0ccon\
    catInstId\x12/\n\x14concat_deal_n_slr_id\x18\x83\x01\x20\x01(\tR\x10conc\
    atDealNSlrId\x12'\n\x0fftp_coupon_rate\x18\x84\x01\x20\x01(\x01R\rftpCou\
    ponRate\x12(\n\tcashflows\x18\x85\x01\x20\x03(\x0b2\t.CashflowR\tcashflo\
    wsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
