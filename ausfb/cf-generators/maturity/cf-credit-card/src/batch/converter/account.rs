// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Account {
    // message fields
    pub account_number: ::std::string::String,
    pub curr_code: ::std::string::String,
    pub intt_rate: f64,
    pub product_code: ::std::string::String,
    pub mat_date: i64,
    pub rate_flag: ::std::string::String,
    pub repricing_index: ::std::string::String,
    pub psl: ::std::string::String,
    pub npa: ::std::string::String,
    pub indv_corp_flag: ::std::string::String,
    pub customer_type: ::std::string::String,
    pub asset_class_id: ::std::string::String,
    pub customer_id: ::std::string::String,
    pub prod_type: ::std::string::String,
    pub final_int_rate: f64,
    pub cost_centre: i64,
    pub alm_line: ::std::string::String,
    pub coa: ::std::string::String,
    pub division: ::std::string::String,
    pub rep_freq: i64,
    pub next_repricing_date: i64,
    pub last_repricing_date: i64,
    pub asset_class: ::std::string::String,
    pub value_date: i64,
    pub branch: i64,
    pub org_tenor: i64,
    pub rep_tenor: i64,
    pub weaker: ::std::string::String,
    pub current_book_bal: f64,
    pub al_line: ::std::string::String,
    pub balm_l2: ::std::string::String,
    pub ia_line: ::std::string::String,
    pub shceme_id: ::std::string::String,
    pub orig_bm: ::std::string::String,
    pub der_int_rate: f64,
    pub bnchmrk_rate: f64,
    pub spread: f64,
    pub fully_floating_flg: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub orig_bal: f64,
    pub gr_ofs_gl: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Account {
    fn default() -> &'a Account {
        <Account as ::protobuf::Message>::default_instance()
    }
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    // string account_number = 1;


    pub fn get_account_number(&self) -> &str {
        &self.account_number
    }
    pub fn clear_account_number(&mut self) {
        self.account_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_number(&mut self, v: ::std::string::String) {
        self.account_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_number(&mut self) -> &mut ::std::string::String {
        &mut self.account_number
    }

    // Take field
    pub fn take_account_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_number, ::std::string::String::new())
    }

    // string curr_code = 2;


    pub fn get_curr_code(&self) -> &str {
        &self.curr_code
    }
    pub fn clear_curr_code(&mut self) {
        self.curr_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_curr_code(&mut self, v: ::std::string::String) {
        self.curr_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_curr_code(&mut self) -> &mut ::std::string::String {
        &mut self.curr_code
    }

    // Take field
    pub fn take_curr_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.curr_code, ::std::string::String::new())
    }

    // double intt_rate = 3;


    pub fn get_intt_rate(&self) -> f64 {
        self.intt_rate
    }
    pub fn clear_intt_rate(&mut self) {
        self.intt_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_intt_rate(&mut self, v: f64) {
        self.intt_rate = v;
    }

    // string product_code = 4;


    pub fn get_product_code(&self) -> &str {
        &self.product_code
    }
    pub fn clear_product_code(&mut self) {
        self.product_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_code(&mut self, v: ::std::string::String) {
        self.product_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_code(&mut self) -> &mut ::std::string::String {
        &mut self.product_code
    }

    // Take field
    pub fn take_product_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_code, ::std::string::String::new())
    }

    // int64 mat_date = 5;


    pub fn get_mat_date(&self) -> i64 {
        self.mat_date
    }
    pub fn clear_mat_date(&mut self) {
        self.mat_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_date(&mut self, v: i64) {
        self.mat_date = v;
    }

    // string rate_flag = 6;


    pub fn get_rate_flag(&self) -> &str {
        &self.rate_flag
    }
    pub fn clear_rate_flag(&mut self) {
        self.rate_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_flag(&mut self, v: ::std::string::String) {
        self.rate_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_flag(&mut self) -> &mut ::std::string::String {
        &mut self.rate_flag
    }

    // Take field
    pub fn take_rate_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_flag, ::std::string::String::new())
    }

    // string repricing_index = 7;


    pub fn get_repricing_index(&self) -> &str {
        &self.repricing_index
    }
    pub fn clear_repricing_index(&mut self) {
        self.repricing_index.clear();
    }

    // Param is passed by value, moved
    pub fn set_repricing_index(&mut self, v: ::std::string::String) {
        self.repricing_index = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repricing_index(&mut self) -> &mut ::std::string::String {
        &mut self.repricing_index
    }

    // Take field
    pub fn take_repricing_index(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.repricing_index, ::std::string::String::new())
    }

    // string psl = 8;


    pub fn get_psl(&self) -> &str {
        &self.psl
    }
    pub fn clear_psl(&mut self) {
        self.psl.clear();
    }

    // Param is passed by value, moved
    pub fn set_psl(&mut self, v: ::std::string::String) {
        self.psl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_psl(&mut self) -> &mut ::std::string::String {
        &mut self.psl
    }

    // Take field
    pub fn take_psl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.psl, ::std::string::String::new())
    }

    // string npa = 9;


    pub fn get_npa(&self) -> &str {
        &self.npa
    }
    pub fn clear_npa(&mut self) {
        self.npa.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa(&mut self, v: ::std::string::String) {
        self.npa = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa(&mut self) -> &mut ::std::string::String {
        &mut self.npa
    }

    // Take field
    pub fn take_npa(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa, ::std::string::String::new())
    }

    // string indv_corp_flag = 10;


    pub fn get_indv_corp_flag(&self) -> &str {
        &self.indv_corp_flag
    }
    pub fn clear_indv_corp_flag(&mut self) {
        self.indv_corp_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_indv_corp_flag(&mut self, v: ::std::string::String) {
        self.indv_corp_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_indv_corp_flag(&mut self) -> &mut ::std::string::String {
        &mut self.indv_corp_flag
    }

    // Take field
    pub fn take_indv_corp_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.indv_corp_flag, ::std::string::String::new())
    }

    // string customer_type = 11;


    pub fn get_customer_type(&self) -> &str {
        &self.customer_type
    }
    pub fn clear_customer_type(&mut self) {
        self.customer_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_type(&mut self, v: ::std::string::String) {
        self.customer_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_type(&mut self) -> &mut ::std::string::String {
        &mut self.customer_type
    }

    // Take field
    pub fn take_customer_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_type, ::std::string::String::new())
    }

    // string asset_class_id = 12;


    pub fn get_asset_class_id(&self) -> &str {
        &self.asset_class_id
    }
    pub fn clear_asset_class_id(&mut self) {
        self.asset_class_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_class_id(&mut self, v: ::std::string::String) {
        self.asset_class_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_class_id(&mut self) -> &mut ::std::string::String {
        &mut self.asset_class_id
    }

    // Take field
    pub fn take_asset_class_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_class_id, ::std::string::String::new())
    }

    // string customer_id = 13;


    pub fn get_customer_id(&self) -> &str {
        &self.customer_id
    }
    pub fn clear_customer_id(&mut self) {
        self.customer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_id(&mut self, v: ::std::string::String) {
        self.customer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_id(&mut self) -> &mut ::std::string::String {
        &mut self.customer_id
    }

    // Take field
    pub fn take_customer_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_id, ::std::string::String::new())
    }

    // string prod_type = 14;


    pub fn get_prod_type(&self) -> &str {
        &self.prod_type
    }
    pub fn clear_prod_type(&mut self) {
        self.prod_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_type(&mut self, v: ::std::string::String) {
        self.prod_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_type(&mut self) -> &mut ::std::string::String {
        &mut self.prod_type
    }

    // Take field
    pub fn take_prod_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_type, ::std::string::String::new())
    }

    // double final_int_rate = 15;


    pub fn get_final_int_rate(&self) -> f64 {
        self.final_int_rate
    }
    pub fn clear_final_int_rate(&mut self) {
        self.final_int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_final_int_rate(&mut self, v: f64) {
        self.final_int_rate = v;
    }

    // int64 cost_centre = 16;


    pub fn get_cost_centre(&self) -> i64 {
        self.cost_centre
    }
    pub fn clear_cost_centre(&mut self) {
        self.cost_centre = 0;
    }

    // Param is passed by value, moved
    pub fn set_cost_centre(&mut self, v: i64) {
        self.cost_centre = v;
    }

    // string alm_line = 17;


    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }
    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    // string coa = 18;


    pub fn get_coa(&self) -> &str {
        &self.coa
    }
    pub fn clear_coa(&mut self) {
        self.coa.clear();
    }

    // Param is passed by value, moved
    pub fn set_coa(&mut self, v: ::std::string::String) {
        self.coa = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coa(&mut self) -> &mut ::std::string::String {
        &mut self.coa
    }

    // Take field
    pub fn take_coa(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coa, ::std::string::String::new())
    }

    // string division = 19;


    pub fn get_division(&self) -> &str {
        &self.division
    }
    pub fn clear_division(&mut self) {
        self.division.clear();
    }

    // Param is passed by value, moved
    pub fn set_division(&mut self, v: ::std::string::String) {
        self.division = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_division(&mut self) -> &mut ::std::string::String {
        &mut self.division
    }

    // Take field
    pub fn take_division(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.division, ::std::string::String::new())
    }

    // int64 rep_freq = 20;


    pub fn get_rep_freq(&self) -> i64 {
        self.rep_freq
    }
    pub fn clear_rep_freq(&mut self) {
        self.rep_freq = 0;
    }

    // Param is passed by value, moved
    pub fn set_rep_freq(&mut self, v: i64) {
        self.rep_freq = v;
    }

    // int64 next_repricing_date = 21;


    pub fn get_next_repricing_date(&self) -> i64 {
        self.next_repricing_date
    }
    pub fn clear_next_repricing_date(&mut self) {
        self.next_repricing_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_repricing_date(&mut self, v: i64) {
        self.next_repricing_date = v;
    }

    // int64 last_repricing_date = 22;


    pub fn get_last_repricing_date(&self) -> i64 {
        self.last_repricing_date
    }
    pub fn clear_last_repricing_date(&mut self) {
        self.last_repricing_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_repricing_date(&mut self, v: i64) {
        self.last_repricing_date = v;
    }

    // string asset_class = 23;


    pub fn get_asset_class(&self) -> &str {
        &self.asset_class
    }
    pub fn clear_asset_class(&mut self) {
        self.asset_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_class(&mut self, v: ::std::string::String) {
        self.asset_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_class(&mut self) -> &mut ::std::string::String {
        &mut self.asset_class
    }

    // Take field
    pub fn take_asset_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_class, ::std::string::String::new())
    }

    // int64 value_date = 24;


    pub fn get_value_date(&self) -> i64 {
        self.value_date
    }
    pub fn clear_value_date(&mut self) {
        self.value_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_date(&mut self, v: i64) {
        self.value_date = v;
    }

    // int64 branch = 25;


    pub fn get_branch(&self) -> i64 {
        self.branch
    }
    pub fn clear_branch(&mut self) {
        self.branch = 0;
    }

    // Param is passed by value, moved
    pub fn set_branch(&mut self, v: i64) {
        self.branch = v;
    }

    // int64 org_tenor = 26;


    pub fn get_org_tenor(&self) -> i64 {
        self.org_tenor
    }
    pub fn clear_org_tenor(&mut self) {
        self.org_tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_org_tenor(&mut self, v: i64) {
        self.org_tenor = v;
    }

    // int64 rep_tenor = 27;


    pub fn get_rep_tenor(&self) -> i64 {
        self.rep_tenor
    }
    pub fn clear_rep_tenor(&mut self) {
        self.rep_tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_rep_tenor(&mut self, v: i64) {
        self.rep_tenor = v;
    }

    // string weaker = 28;


    pub fn get_weaker(&self) -> &str {
        &self.weaker
    }
    pub fn clear_weaker(&mut self) {
        self.weaker.clear();
    }

    // Param is passed by value, moved
    pub fn set_weaker(&mut self, v: ::std::string::String) {
        self.weaker = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_weaker(&mut self) -> &mut ::std::string::String {
        &mut self.weaker
    }

    // Take field
    pub fn take_weaker(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.weaker, ::std::string::String::new())
    }

    // double current_book_bal = 29;


    pub fn get_current_book_bal(&self) -> f64 {
        self.current_book_bal
    }
    pub fn clear_current_book_bal(&mut self) {
        self.current_book_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_current_book_bal(&mut self, v: f64) {
        self.current_book_bal = v;
    }

    // string al_line = 30;


    pub fn get_al_line(&self) -> &str {
        &self.al_line
    }
    pub fn clear_al_line(&mut self) {
        self.al_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_al_line(&mut self, v: ::std::string::String) {
        self.al_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_al_line(&mut self) -> &mut ::std::string::String {
        &mut self.al_line
    }

    // Take field
    pub fn take_al_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.al_line, ::std::string::String::new())
    }

    // string balm_l2 = 31;


    pub fn get_balm_l2(&self) -> &str {
        &self.balm_l2
    }
    pub fn clear_balm_l2(&mut self) {
        self.balm_l2.clear();
    }

    // Param is passed by value, moved
    pub fn set_balm_l2(&mut self, v: ::std::string::String) {
        self.balm_l2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balm_l2(&mut self) -> &mut ::std::string::String {
        &mut self.balm_l2
    }

    // Take field
    pub fn take_balm_l2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balm_l2, ::std::string::String::new())
    }

    // string ia_line = 32;


    pub fn get_ia_line(&self) -> &str {
        &self.ia_line
    }
    pub fn clear_ia_line(&mut self) {
        self.ia_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_ia_line(&mut self, v: ::std::string::String) {
        self.ia_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ia_line(&mut self) -> &mut ::std::string::String {
        &mut self.ia_line
    }

    // Take field
    pub fn take_ia_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ia_line, ::std::string::String::new())
    }

    // string shceme_id = 33;


    pub fn get_shceme_id(&self) -> &str {
        &self.shceme_id
    }
    pub fn clear_shceme_id(&mut self) {
        self.shceme_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_shceme_id(&mut self, v: ::std::string::String) {
        self.shceme_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shceme_id(&mut self) -> &mut ::std::string::String {
        &mut self.shceme_id
    }

    // Take field
    pub fn take_shceme_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.shceme_id, ::std::string::String::new())
    }

    // string orig_bm = 34;


    pub fn get_orig_bm(&self) -> &str {
        &self.orig_bm
    }
    pub fn clear_orig_bm(&mut self) {
        self.orig_bm.clear();
    }

    // Param is passed by value, moved
    pub fn set_orig_bm(&mut self, v: ::std::string::String) {
        self.orig_bm = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orig_bm(&mut self) -> &mut ::std::string::String {
        &mut self.orig_bm
    }

    // Take field
    pub fn take_orig_bm(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orig_bm, ::std::string::String::new())
    }

    // double der_int_rate = 35;


    pub fn get_der_int_rate(&self) -> f64 {
        self.der_int_rate
    }
    pub fn clear_der_int_rate(&mut self) {
        self.der_int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_der_int_rate(&mut self, v: f64) {
        self.der_int_rate = v;
    }

    // double bnchmrk_rate = 36;


    pub fn get_bnchmrk_rate(&self) -> f64 {
        self.bnchmrk_rate
    }
    pub fn clear_bnchmrk_rate(&mut self) {
        self.bnchmrk_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bnchmrk_rate(&mut self, v: f64) {
        self.bnchmrk_rate = v;
    }

    // double spread = 37;


    pub fn get_spread(&self) -> f64 {
        self.spread
    }
    pub fn clear_spread(&mut self) {
        self.spread = 0.;
    }

    // Param is passed by value, moved
    pub fn set_spread(&mut self, v: f64) {
        self.spread = v;
    }

    // string fully_floating_flg = 38;


    pub fn get_fully_floating_flg(&self) -> &str {
        &self.fully_floating_flg
    }
    pub fn clear_fully_floating_flg(&mut self) {
        self.fully_floating_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_fully_floating_flg(&mut self, v: ::std::string::String) {
        self.fully_floating_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fully_floating_flg(&mut self) -> &mut ::std::string::String {
        &mut self.fully_floating_flg
    }

    // Take field
    pub fn take_fully_floating_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fully_floating_flg, ::std::string::String::new())
    }

    // string customer_name = 39;


    pub fn get_customer_name(&self) -> &str {
        &self.customer_name
    }
    pub fn clear_customer_name(&mut self) {
        self.customer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_name(&mut self, v: ::std::string::String) {
        self.customer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_name(&mut self) -> &mut ::std::string::String {
        &mut self.customer_name
    }

    // Take field
    pub fn take_customer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_name, ::std::string::String::new())
    }

    // double orig_bal = 40;


    pub fn get_orig_bal(&self) -> f64 {
        self.orig_bal
    }
    pub fn clear_orig_bal(&mut self) {
        self.orig_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_orig_bal(&mut self, v: f64) {
        self.orig_bal = v;
    }

    // string gr_ofs_gl = 41;


    pub fn get_gr_ofs_gl(&self) -> &str {
        &self.gr_ofs_gl
    }
    pub fn clear_gr_ofs_gl(&mut self) {
        self.gr_ofs_gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_gr_ofs_gl(&mut self, v: ::std::string::String) {
        self.gr_ofs_gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gr_ofs_gl(&mut self) -> &mut ::std::string::String {
        &mut self.gr_ofs_gl
    }

    // Take field
    pub fn take_gr_ofs_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gr_ofs_gl, ::std::string::String::new())
    }

    // repeated .Cashflow cashflows = 42;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Account {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_number)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.curr_code)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.intt_rate = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product_code)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_date = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_flag)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.repricing_index)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.psl)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.indv_corp_flag)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_type)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_class_id)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_id)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_type)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.final_int_rate = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cost_centre = tmp;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alm_line)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coa)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.division)?;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rep_freq = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_repricing_date = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_repricing_date = tmp;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_class)?;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.value_date = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.branch = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.org_tenor = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rep_tenor = tmp;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.weaker)?;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.current_book_bal = tmp;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.al_line)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.balm_l2)?;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ia_line)?;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.shceme_id)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orig_bm)?;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.der_int_rate = tmp;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bnchmrk_rate = tmp;
                },
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.spread = tmp;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fully_floating_flg)?;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_name)?;
                },
                40 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.orig_bal = tmp;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gr_ofs_gl)?;
                },
                42 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.account_number);
        }
        if !self.curr_code.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.curr_code);
        }
        if self.intt_rate != 0. {
            my_size += 9;
        }
        if !self.product_code.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.product_code);
        }
        if self.mat_date != 0 {
            my_size += ::protobuf::rt::value_size(5, self.mat_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.rate_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.rate_flag);
        }
        if !self.repricing_index.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.repricing_index);
        }
        if !self.psl.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.psl);
        }
        if !self.npa.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.npa);
        }
        if !self.indv_corp_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.indv_corp_flag);
        }
        if !self.customer_type.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.customer_type);
        }
        if !self.asset_class_id.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.asset_class_id);
        }
        if !self.customer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.customer_id);
        }
        if !self.prod_type.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.prod_type);
        }
        if self.final_int_rate != 0. {
            my_size += 9;
        }
        if self.cost_centre != 0 {
            my_size += ::protobuf::rt::value_size(16, self.cost_centre, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.alm_line);
        }
        if !self.coa.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.coa);
        }
        if !self.division.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.division);
        }
        if self.rep_freq != 0 {
            my_size += ::protobuf::rt::value_size(20, self.rep_freq, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_repricing_date != 0 {
            my_size += ::protobuf::rt::value_size(21, self.next_repricing_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_repricing_date != 0 {
            my_size += ::protobuf::rt::value_size(22, self.last_repricing_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.asset_class.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.asset_class);
        }
        if self.value_date != 0 {
            my_size += ::protobuf::rt::value_size(24, self.value_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.branch != 0 {
            my_size += ::protobuf::rt::value_size(25, self.branch, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.org_tenor != 0 {
            my_size += ::protobuf::rt::value_size(26, self.org_tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rep_tenor != 0 {
            my_size += ::protobuf::rt::value_size(27, self.rep_tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.weaker.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.weaker);
        }
        if self.current_book_bal != 0. {
            my_size += 10;
        }
        if !self.al_line.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.al_line);
        }
        if !self.balm_l2.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.balm_l2);
        }
        if !self.ia_line.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.ia_line);
        }
        if !self.shceme_id.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.shceme_id);
        }
        if !self.orig_bm.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.orig_bm);
        }
        if self.der_int_rate != 0. {
            my_size += 10;
        }
        if self.bnchmrk_rate != 0. {
            my_size += 10;
        }
        if self.spread != 0. {
            my_size += 10;
        }
        if !self.fully_floating_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.fully_floating_flg);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.customer_name);
        }
        if self.orig_bal != 0. {
            my_size += 10;
        }
        if !self.gr_ofs_gl.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.gr_ofs_gl);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.account_number.is_empty() {
            os.write_string(1, &self.account_number)?;
        }
        if !self.curr_code.is_empty() {
            os.write_string(2, &self.curr_code)?;
        }
        if self.intt_rate != 0. {
            os.write_double(3, self.intt_rate)?;
        }
        if !self.product_code.is_empty() {
            os.write_string(4, &self.product_code)?;
        }
        if self.mat_date != 0 {
            os.write_int64(5, self.mat_date)?;
        }
        if !self.rate_flag.is_empty() {
            os.write_string(6, &self.rate_flag)?;
        }
        if !self.repricing_index.is_empty() {
            os.write_string(7, &self.repricing_index)?;
        }
        if !self.psl.is_empty() {
            os.write_string(8, &self.psl)?;
        }
        if !self.npa.is_empty() {
            os.write_string(9, &self.npa)?;
        }
        if !self.indv_corp_flag.is_empty() {
            os.write_string(10, &self.indv_corp_flag)?;
        }
        if !self.customer_type.is_empty() {
            os.write_string(11, &self.customer_type)?;
        }
        if !self.asset_class_id.is_empty() {
            os.write_string(12, &self.asset_class_id)?;
        }
        if !self.customer_id.is_empty() {
            os.write_string(13, &self.customer_id)?;
        }
        if !self.prod_type.is_empty() {
            os.write_string(14, &self.prod_type)?;
        }
        if self.final_int_rate != 0. {
            os.write_double(15, self.final_int_rate)?;
        }
        if self.cost_centre != 0 {
            os.write_int64(16, self.cost_centre)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(17, &self.alm_line)?;
        }
        if !self.coa.is_empty() {
            os.write_string(18, &self.coa)?;
        }
        if !self.division.is_empty() {
            os.write_string(19, &self.division)?;
        }
        if self.rep_freq != 0 {
            os.write_int64(20, self.rep_freq)?;
        }
        if self.next_repricing_date != 0 {
            os.write_int64(21, self.next_repricing_date)?;
        }
        if self.last_repricing_date != 0 {
            os.write_int64(22, self.last_repricing_date)?;
        }
        if !self.asset_class.is_empty() {
            os.write_string(23, &self.asset_class)?;
        }
        if self.value_date != 0 {
            os.write_int64(24, self.value_date)?;
        }
        if self.branch != 0 {
            os.write_int64(25, self.branch)?;
        }
        if self.org_tenor != 0 {
            os.write_int64(26, self.org_tenor)?;
        }
        if self.rep_tenor != 0 {
            os.write_int64(27, self.rep_tenor)?;
        }
        if !self.weaker.is_empty() {
            os.write_string(28, &self.weaker)?;
        }
        if self.current_book_bal != 0. {
            os.write_double(29, self.current_book_bal)?;
        }
        if !self.al_line.is_empty() {
            os.write_string(30, &self.al_line)?;
        }
        if !self.balm_l2.is_empty() {
            os.write_string(31, &self.balm_l2)?;
        }
        if !self.ia_line.is_empty() {
            os.write_string(32, &self.ia_line)?;
        }
        if !self.shceme_id.is_empty() {
            os.write_string(33, &self.shceme_id)?;
        }
        if !self.orig_bm.is_empty() {
            os.write_string(34, &self.orig_bm)?;
        }
        if self.der_int_rate != 0. {
            os.write_double(35, self.der_int_rate)?;
        }
        if self.bnchmrk_rate != 0. {
            os.write_double(36, self.bnchmrk_rate)?;
        }
        if self.spread != 0. {
            os.write_double(37, self.spread)?;
        }
        if !self.fully_floating_flg.is_empty() {
            os.write_string(38, &self.fully_floating_flg)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(39, &self.customer_name)?;
        }
        if self.orig_bal != 0. {
            os.write_double(40, self.orig_bal)?;
        }
        if !self.gr_ofs_gl.is_empty() {
            os.write_string(41, &self.gr_ofs_gl)?;
        }
        for v in &self.cashflows {
            os.write_tag(42, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Account {
        Account::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_number",
                |m: &Account| { &m.account_number },
                |m: &mut Account| { &mut m.account_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "curr_code",
                |m: &Account| { &m.curr_code },
                |m: &mut Account| { &mut m.curr_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "intt_rate",
                |m: &Account| { &m.intt_rate },
                |m: &mut Account| { &mut m.intt_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "product_code",
                |m: &Account| { &m.product_code },
                |m: &mut Account| { &mut m.product_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "mat_date",
                |m: &Account| { &m.mat_date },
                |m: &mut Account| { &mut m.mat_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rate_flag",
                |m: &Account| { &m.rate_flag },
                |m: &mut Account| { &mut m.rate_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "repricing_index",
                |m: &Account| { &m.repricing_index },
                |m: &mut Account| { &mut m.repricing_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "psl",
                |m: &Account| { &m.psl },
                |m: &mut Account| { &mut m.psl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "npa",
                |m: &Account| { &m.npa },
                |m: &mut Account| { &mut m.npa },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "indv_corp_flag",
                |m: &Account| { &m.indv_corp_flag },
                |m: &mut Account| { &mut m.indv_corp_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_type",
                |m: &Account| { &m.customer_type },
                |m: &mut Account| { &mut m.customer_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_class_id",
                |m: &Account| { &m.asset_class_id },
                |m: &mut Account| { &mut m.asset_class_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_id",
                |m: &Account| { &m.customer_id },
                |m: &mut Account| { &mut m.customer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prod_type",
                |m: &Account| { &m.prod_type },
                |m: &mut Account| { &mut m.prod_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "final_int_rate",
                |m: &Account| { &m.final_int_rate },
                |m: &mut Account| { &mut m.final_int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cost_centre",
                |m: &Account| { &m.cost_centre },
                |m: &mut Account| { &mut m.cost_centre },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "alm_line",
                |m: &Account| { &m.alm_line },
                |m: &mut Account| { &mut m.alm_line },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "coa",
                |m: &Account| { &m.coa },
                |m: &mut Account| { &mut m.coa },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "division",
                |m: &Account| { &m.division },
                |m: &mut Account| { &mut m.division },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "rep_freq",
                |m: &Account| { &m.rep_freq },
                |m: &mut Account| { &mut m.rep_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_repricing_date",
                |m: &Account| { &m.next_repricing_date },
                |m: &mut Account| { &mut m.next_repricing_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_repricing_date",
                |m: &Account| { &m.last_repricing_date },
                |m: &mut Account| { &mut m.last_repricing_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_class",
                |m: &Account| { &m.asset_class },
                |m: &mut Account| { &mut m.asset_class },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "value_date",
                |m: &Account| { &m.value_date },
                |m: &mut Account| { &mut m.value_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "branch",
                |m: &Account| { &m.branch },
                |m: &mut Account| { &mut m.branch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "org_tenor",
                |m: &Account| { &m.org_tenor },
                |m: &mut Account| { &mut m.org_tenor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "rep_tenor",
                |m: &Account| { &m.rep_tenor },
                |m: &mut Account| { &mut m.rep_tenor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "weaker",
                |m: &Account| { &m.weaker },
                |m: &mut Account| { &mut m.weaker },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "current_book_bal",
                |m: &Account| { &m.current_book_bal },
                |m: &mut Account| { &mut m.current_book_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "al_line",
                |m: &Account| { &m.al_line },
                |m: &mut Account| { &mut m.al_line },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "balm_l2",
                |m: &Account| { &m.balm_l2 },
                |m: &mut Account| { &mut m.balm_l2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ia_line",
                |m: &Account| { &m.ia_line },
                |m: &mut Account| { &mut m.ia_line },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "shceme_id",
                |m: &Account| { &m.shceme_id },
                |m: &mut Account| { &mut m.shceme_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "orig_bm",
                |m: &Account| { &m.orig_bm },
                |m: &mut Account| { &mut m.orig_bm },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "der_int_rate",
                |m: &Account| { &m.der_int_rate },
                |m: &mut Account| { &mut m.der_int_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bnchmrk_rate",
                |m: &Account| { &m.bnchmrk_rate },
                |m: &mut Account| { &mut m.bnchmrk_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "spread",
                |m: &Account| { &m.spread },
                |m: &mut Account| { &mut m.spread },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fully_floating_flg",
                |m: &Account| { &m.fully_floating_flg },
                |m: &mut Account| { &mut m.fully_floating_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_name",
                |m: &Account| { &m.customer_name },
                |m: &mut Account| { &mut m.customer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "orig_bal",
                |m: &Account| { &m.orig_bal },
                |m: &mut Account| { &mut m.orig_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gr_ofs_gl",
                |m: &Account| { &m.gr_ofs_gl },
                |m: &mut Account| { &mut m.gr_ofs_gl },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &Account| { &m.cashflows },
                |m: &mut Account| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Account>(
                "Account",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Account {
        static instance: ::protobuf::rt::LazyV2<Account> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Account::new)
    }
}

impl ::protobuf::Clear for Account {
    fn clear(&mut self) {
        self.account_number.clear();
        self.curr_code.clear();
        self.intt_rate = 0.;
        self.product_code.clear();
        self.mat_date = 0;
        self.rate_flag.clear();
        self.repricing_index.clear();
        self.psl.clear();
        self.npa.clear();
        self.indv_corp_flag.clear();
        self.customer_type.clear();
        self.asset_class_id.clear();
        self.customer_id.clear();
        self.prod_type.clear();
        self.final_int_rate = 0.;
        self.cost_centre = 0;
        self.alm_line.clear();
        self.coa.clear();
        self.division.clear();
        self.rep_freq = 0;
        self.next_repricing_date = 0;
        self.last_repricing_date = 0;
        self.asset_class.clear();
        self.value_date = 0;
        self.branch = 0;
        self.org_tenor = 0;
        self.rep_tenor = 0;
        self.weaker.clear();
        self.current_book_bal = 0.;
        self.al_line.clear();
        self.balm_l2.clear();
        self.ia_line.clear();
        self.shceme_id.clear();
        self.orig_bm.clear();
        self.der_int_rate = 0.;
        self.bnchmrk_rate = 0.;
        self.spread = 0.;
        self.fully_floating_flg.clear();
        self.customer_name.clear();
        self.orig_bal = 0.;
        self.gr_ofs_gl.clear();
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x08cf.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\x20\
    \x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\x01(\
    \x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\
    \"\xb1\n\n\x07Account\x12%\n\x0eaccount_number\x18\x01\x20\x01(\tR\racco\
    untNumber\x12\x1b\n\tcurr_code\x18\x02\x20\x01(\tR\x08currCode\x12\x1b\n\
    \tintt_rate\x18\x03\x20\x01(\x01R\x08inttRate\x12!\n\x0cproduct_code\x18\
    \x04\x20\x01(\tR\x0bproductCode\x12\x19\n\x08mat_date\x18\x05\x20\x01(\
    \x03R\x07matDate\x12\x1b\n\trate_flag\x18\x06\x20\x01(\tR\x08rateFlag\
    \x12'\n\x0frepricing_index\x18\x07\x20\x01(\tR\x0erepricingIndex\x12\x10\
    \n\x03psl\x18\x08\x20\x01(\tR\x03psl\x12\x10\n\x03npa\x18\t\x20\x01(\tR\
    \x03npa\x12$\n\x0eindv_corp_flag\x18\n\x20\x01(\tR\x0cindvCorpFlag\x12#\
    \n\rcustomer_type\x18\x0b\x20\x01(\tR\x0ccustomerType\x12$\n\x0easset_cl\
    ass_id\x18\x0c\x20\x01(\tR\x0cassetClassId\x12\x1f\n\x0bcustomer_id\x18\
    \r\x20\x01(\tR\ncustomerId\x12\x1b\n\tprod_type\x18\x0e\x20\x01(\tR\x08p\
    rodType\x12$\n\x0efinal_int_rate\x18\x0f\x20\x01(\x01R\x0cfinalIntRate\
    \x12\x1f\n\x0bcost_centre\x18\x10\x20\x01(\x03R\ncostCentre\x12\x19\n\
    \x08alm_line\x18\x11\x20\x01(\tR\x07almLine\x12\x10\n\x03coa\x18\x12\x20\
    \x01(\tR\x03coa\x12\x1a\n\x08division\x18\x13\x20\x01(\tR\x08division\
    \x12\x19\n\x08rep_freq\x18\x14\x20\x01(\x03R\x07repFreq\x12.\n\x13next_r\
    epricing_date\x18\x15\x20\x01(\x03R\x11nextRepricingDate\x12.\n\x13last_\
    repricing_date\x18\x16\x20\x01(\x03R\x11lastRepricingDate\x12\x1f\n\x0ba\
    sset_class\x18\x17\x20\x01(\tR\nassetClass\x12\x1d\n\nvalue_date\x18\x18\
    \x20\x01(\x03R\tvalueDate\x12\x16\n\x06branch\x18\x19\x20\x01(\x03R\x06b\
    ranch\x12\x1b\n\torg_tenor\x18\x1a\x20\x01(\x03R\x08orgTenor\x12\x1b\n\t\
    rep_tenor\x18\x1b\x20\x01(\x03R\x08repTenor\x12\x16\n\x06weaker\x18\x1c\
    \x20\x01(\tR\x06weaker\x12(\n\x10current_book_bal\x18\x1d\x20\x01(\x01R\
    \x0ecurrentBookBal\x12\x17\n\x07al_line\x18\x1e\x20\x01(\tR\x06alLine\
    \x12\x17\n\x07balm_l2\x18\x1f\x20\x01(\tR\x06balmL2\x12\x17\n\x07ia_line\
    \x18\x20\x20\x01(\tR\x06iaLine\x12\x1b\n\tshceme_id\x18!\x20\x01(\tR\x08\
    shcemeId\x12\x17\n\x07orig_bm\x18\"\x20\x01(\tR\x06origBm\x12\x20\n\x0cd\
    er_int_rate\x18#\x20\x01(\x01R\nderIntRate\x12!\n\x0cbnchmrk_rate\x18$\
    \x20\x01(\x01R\x0bbnchmrkRate\x12\x16\n\x06spread\x18%\x20\x01(\x01R\x06\
    spread\x12,\n\x12fully_floating_flg\x18&\x20\x01(\tR\x10fullyFloatingFlg\
    \x12#\n\rcustomer_name\x18'\x20\x01(\tR\x0ccustomerName\x12\x19\n\x08ori\
    g_bal\x18(\x20\x01(\x01R\x07origBal\x12\x1a\n\tgr_ofs_gl\x18)\x20\x01(\t\
    R\x07grOfsGl\x12'\n\tcashflows\x18*\x20\x03(\x0b2\t.CashflowR\tcashflows\
    b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
