// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OutputAccount {
    // message fields
    pub account_number: ::std::string::String,
    pub branch_code: ::std::string::String,
    pub cust_id: ::std::string::String,
    pub group_id: ::std::string::String,
    pub cust_name: ::std::string::String,
    pub currency: ::std::string::String,
    pub product_code: ::std::string::String,
    pub gl_code: ::std::string::String,
    pub acc_open_date: i64,
    pub curr_outstanding_bal: f64,
    pub curr_outstanding_bal_lcy: f64,
    pub interest_rate: f64,
    pub accr_int_amt: f64,
    pub accr_int_gl_code: ::std::string::String,
    pub init_dep_amount: f64,
    pub init_dep_amount_lcy: f64,
    pub mat_date: i64,
    pub int_accrual_basis: ::std::string::String,
    pub int_comp_type: ::std::string::String,
    pub int_pay_freq: ::std::string::String,
    pub next_int_pay_date: i64,
    pub comp_freq: ::std::string::String,
    pub next_comp_date: i64,
    pub pledge_against_loan: ::std::string::String,
    pub loan_acc_no: ::std::string::String,
    pub loan_acc_mat_date: i64,
    pub constitution: ::std::string::String,
    pub roi_category: ::std::string::String,
    pub contract_no: ::std::string::String,
    pub stable_deposit: f64,
    pub effective_mat_date: i64,
    pub days_till_report: i64,
    pub volatility: ::std::string::String,
    pub period_of_deposits: i64,
    pub premature_ratio: f64,
    pub overall_rollover_ratio: f64,
    pub rollover_ratio_non_volatile: f64,
    pub non_rollover_ratio_non_volatile: f64,
    pub non_rollover_ratio_volatile: f64,
    pub financial_client: ::std::string::String,
    pub lcr_category: ::std::string::String,
    pub td_overdue_flag: ::std::string::String,
    pub line_of_credit: ::std::string::String,
    pub turnover: ::std::string::String,
    pub add_field1: i64,
    pub add_field2: f64,
    pub add_field3: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutputAccount {
    fn default() -> &'a OutputAccount {
        <OutputAccount as ::protobuf::Message>::default_instance()
    }
}

impl OutputAccount {
    pub fn new() -> OutputAccount {
        ::std::default::Default::default()
    }

    // string account_number = 1;


    pub fn get_account_number(&self) -> &str {
        &self.account_number
    }
    pub fn clear_account_number(&mut self) {
        self.account_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_number(&mut self, v: ::std::string::String) {
        self.account_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_number(&mut self) -> &mut ::std::string::String {
        &mut self.account_number
    }

    // Take field
    pub fn take_account_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_number, ::std::string::String::new())
    }

    // string branch_code = 2;


    pub fn get_branch_code(&self) -> &str {
        &self.branch_code
    }
    pub fn clear_branch_code(&mut self) {
        self.branch_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch_code(&mut self, v: ::std::string::String) {
        self.branch_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch_code(&mut self) -> &mut ::std::string::String {
        &mut self.branch_code
    }

    // Take field
    pub fn take_branch_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch_code, ::std::string::String::new())
    }

    // string cust_id = 3;


    pub fn get_cust_id(&self) -> &str {
        &self.cust_id
    }
    pub fn clear_cust_id(&mut self) {
        self.cust_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_id(&mut self, v: ::std::string::String) {
        self.cust_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_id(&mut self) -> &mut ::std::string::String {
        &mut self.cust_id
    }

    // Take field
    pub fn take_cust_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_id, ::std::string::String::new())
    }

    // string group_id = 4;


    pub fn get_group_id(&self) -> &str {
        &self.group_id
    }
    pub fn clear_group_id(&mut self) {
        self.group_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_group_id(&mut self, v: ::std::string::String) {
        self.group_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group_id(&mut self) -> &mut ::std::string::String {
        &mut self.group_id
    }

    // Take field
    pub fn take_group_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group_id, ::std::string::String::new())
    }

    // string cust_name = 5;


    pub fn get_cust_name(&self) -> &str {
        &self.cust_name
    }
    pub fn clear_cust_name(&mut self) {
        self.cust_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_name(&mut self, v: ::std::string::String) {
        self.cust_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_name(&mut self) -> &mut ::std::string::String {
        &mut self.cust_name
    }

    // Take field
    pub fn take_cust_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_name, ::std::string::String::new())
    }

    // string currency = 6;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // string product_code = 7;


    pub fn get_product_code(&self) -> &str {
        &self.product_code
    }
    pub fn clear_product_code(&mut self) {
        self.product_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_code(&mut self, v: ::std::string::String) {
        self.product_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_code(&mut self) -> &mut ::std::string::String {
        &mut self.product_code
    }

    // Take field
    pub fn take_product_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_code, ::std::string::String::new())
    }

    // string gl_code = 8;


    pub fn get_gl_code(&self) -> &str {
        &self.gl_code
    }
    pub fn clear_gl_code(&mut self) {
        self.gl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_code(&mut self, v: ::std::string::String) {
        self.gl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_code
    }

    // Take field
    pub fn take_gl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_code, ::std::string::String::new())
    }

    // int64 acc_open_date = 9;


    pub fn get_acc_open_date(&self) -> i64 {
        self.acc_open_date
    }
    pub fn clear_acc_open_date(&mut self) {
        self.acc_open_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_acc_open_date(&mut self, v: i64) {
        self.acc_open_date = v;
    }

    // double curr_outstanding_bal = 10;


    pub fn get_curr_outstanding_bal(&self) -> f64 {
        self.curr_outstanding_bal
    }
    pub fn clear_curr_outstanding_bal(&mut self) {
        self.curr_outstanding_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_curr_outstanding_bal(&mut self, v: f64) {
        self.curr_outstanding_bal = v;
    }

    // double curr_outstanding_bal_lcy = 11;


    pub fn get_curr_outstanding_bal_lcy(&self) -> f64 {
        self.curr_outstanding_bal_lcy
    }
    pub fn clear_curr_outstanding_bal_lcy(&mut self) {
        self.curr_outstanding_bal_lcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_curr_outstanding_bal_lcy(&mut self, v: f64) {
        self.curr_outstanding_bal_lcy = v;
    }

    // double interest_rate = 12;


    pub fn get_interest_rate(&self) -> f64 {
        self.interest_rate
    }
    pub fn clear_interest_rate(&mut self) {
        self.interest_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_rate(&mut self, v: f64) {
        self.interest_rate = v;
    }

    // double accr_int_amt = 13;


    pub fn get_accr_int_amt(&self) -> f64 {
        self.accr_int_amt
    }
    pub fn clear_accr_int_amt(&mut self) {
        self.accr_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accr_int_amt(&mut self, v: f64) {
        self.accr_int_amt = v;
    }

    // string accr_int_gl_code = 14;


    pub fn get_accr_int_gl_code(&self) -> &str {
        &self.accr_int_gl_code
    }
    pub fn clear_accr_int_gl_code(&mut self) {
        self.accr_int_gl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_accr_int_gl_code(&mut self, v: ::std::string::String) {
        self.accr_int_gl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accr_int_gl_code(&mut self) -> &mut ::std::string::String {
        &mut self.accr_int_gl_code
    }

    // Take field
    pub fn take_accr_int_gl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.accr_int_gl_code, ::std::string::String::new())
    }

    // double init_dep_amount = 15;


    pub fn get_init_dep_amount(&self) -> f64 {
        self.init_dep_amount
    }
    pub fn clear_init_dep_amount(&mut self) {
        self.init_dep_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_init_dep_amount(&mut self, v: f64) {
        self.init_dep_amount = v;
    }

    // double init_dep_amount_lcy = 16;


    pub fn get_init_dep_amount_lcy(&self) -> f64 {
        self.init_dep_amount_lcy
    }
    pub fn clear_init_dep_amount_lcy(&mut self) {
        self.init_dep_amount_lcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_init_dep_amount_lcy(&mut self, v: f64) {
        self.init_dep_amount_lcy = v;
    }

    // int64 mat_date = 17;


    pub fn get_mat_date(&self) -> i64 {
        self.mat_date
    }
    pub fn clear_mat_date(&mut self) {
        self.mat_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_date(&mut self, v: i64) {
        self.mat_date = v;
    }

    // string int_accrual_basis = 18;


    pub fn get_int_accrual_basis(&self) -> &str {
        &self.int_accrual_basis
    }
    pub fn clear_int_accrual_basis(&mut self) {
        self.int_accrual_basis.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_accrual_basis(&mut self, v: ::std::string::String) {
        self.int_accrual_basis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_accrual_basis(&mut self) -> &mut ::std::string::String {
        &mut self.int_accrual_basis
    }

    // Take field
    pub fn take_int_accrual_basis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_accrual_basis, ::std::string::String::new())
    }

    // string int_comp_type = 19;


    pub fn get_int_comp_type(&self) -> &str {
        &self.int_comp_type
    }
    pub fn clear_int_comp_type(&mut self) {
        self.int_comp_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_comp_type(&mut self, v: ::std::string::String) {
        self.int_comp_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_comp_type(&mut self) -> &mut ::std::string::String {
        &mut self.int_comp_type
    }

    // Take field
    pub fn take_int_comp_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_comp_type, ::std::string::String::new())
    }

    // string int_pay_freq = 20;


    pub fn get_int_pay_freq(&self) -> &str {
        &self.int_pay_freq
    }
    pub fn clear_int_pay_freq(&mut self) {
        self.int_pay_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_pay_freq(&mut self, v: ::std::string::String) {
        self.int_pay_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_pay_freq(&mut self) -> &mut ::std::string::String {
        &mut self.int_pay_freq
    }

    // Take field
    pub fn take_int_pay_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_pay_freq, ::std::string::String::new())
    }

    // int64 next_int_pay_date = 21;


    pub fn get_next_int_pay_date(&self) -> i64 {
        self.next_int_pay_date
    }
    pub fn clear_next_int_pay_date(&mut self) {
        self.next_int_pay_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_int_pay_date(&mut self, v: i64) {
        self.next_int_pay_date = v;
    }

    // string comp_freq = 22;


    pub fn get_comp_freq(&self) -> &str {
        &self.comp_freq
    }
    pub fn clear_comp_freq(&mut self) {
        self.comp_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_comp_freq(&mut self, v: ::std::string::String) {
        self.comp_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_comp_freq(&mut self) -> &mut ::std::string::String {
        &mut self.comp_freq
    }

    // Take field
    pub fn take_comp_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.comp_freq, ::std::string::String::new())
    }

    // int64 next_comp_date = 23;


    pub fn get_next_comp_date(&self) -> i64 {
        self.next_comp_date
    }
    pub fn clear_next_comp_date(&mut self) {
        self.next_comp_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_comp_date(&mut self, v: i64) {
        self.next_comp_date = v;
    }

    // string pledge_against_loan = 24;


    pub fn get_pledge_against_loan(&self) -> &str {
        &self.pledge_against_loan
    }
    pub fn clear_pledge_against_loan(&mut self) {
        self.pledge_against_loan.clear();
    }

    // Param is passed by value, moved
    pub fn set_pledge_against_loan(&mut self, v: ::std::string::String) {
        self.pledge_against_loan = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pledge_against_loan(&mut self) -> &mut ::std::string::String {
        &mut self.pledge_against_loan
    }

    // Take field
    pub fn take_pledge_against_loan(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pledge_against_loan, ::std::string::String::new())
    }

    // string loan_acc_no = 25;


    pub fn get_loan_acc_no(&self) -> &str {
        &self.loan_acc_no
    }
    pub fn clear_loan_acc_no(&mut self) {
        self.loan_acc_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_loan_acc_no(&mut self, v: ::std::string::String) {
        self.loan_acc_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_loan_acc_no(&mut self) -> &mut ::std::string::String {
        &mut self.loan_acc_no
    }

    // Take field
    pub fn take_loan_acc_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.loan_acc_no, ::std::string::String::new())
    }

    // int64 loan_acc_mat_date = 26;


    pub fn get_loan_acc_mat_date(&self) -> i64 {
        self.loan_acc_mat_date
    }
    pub fn clear_loan_acc_mat_date(&mut self) {
        self.loan_acc_mat_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_loan_acc_mat_date(&mut self, v: i64) {
        self.loan_acc_mat_date = v;
    }

    // string constitution = 27;


    pub fn get_constitution(&self) -> &str {
        &self.constitution
    }
    pub fn clear_constitution(&mut self) {
        self.constitution.clear();
    }

    // Param is passed by value, moved
    pub fn set_constitution(&mut self, v: ::std::string::String) {
        self.constitution = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_constitution(&mut self) -> &mut ::std::string::String {
        &mut self.constitution
    }

    // Take field
    pub fn take_constitution(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.constitution, ::std::string::String::new())
    }

    // string roi_category = 28;


    pub fn get_roi_category(&self) -> &str {
        &self.roi_category
    }
    pub fn clear_roi_category(&mut self) {
        self.roi_category.clear();
    }

    // Param is passed by value, moved
    pub fn set_roi_category(&mut self, v: ::std::string::String) {
        self.roi_category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_roi_category(&mut self) -> &mut ::std::string::String {
        &mut self.roi_category
    }

    // Take field
    pub fn take_roi_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.roi_category, ::std::string::String::new())
    }

    // string contract_no = 29;


    pub fn get_contract_no(&self) -> &str {
        &self.contract_no
    }
    pub fn clear_contract_no(&mut self) {
        self.contract_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_no(&mut self, v: ::std::string::String) {
        self.contract_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_no(&mut self) -> &mut ::std::string::String {
        &mut self.contract_no
    }

    // Take field
    pub fn take_contract_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_no, ::std::string::String::new())
    }

    // double stable_deposit = 30;


    pub fn get_stable_deposit(&self) -> f64 {
        self.stable_deposit
    }
    pub fn clear_stable_deposit(&mut self) {
        self.stable_deposit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_stable_deposit(&mut self, v: f64) {
        self.stable_deposit = v;
    }

    // int64 effective_mat_date = 31;


    pub fn get_effective_mat_date(&self) -> i64 {
        self.effective_mat_date
    }
    pub fn clear_effective_mat_date(&mut self) {
        self.effective_mat_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_effective_mat_date(&mut self, v: i64) {
        self.effective_mat_date = v;
    }

    // int64 days_till_report = 32;


    pub fn get_days_till_report(&self) -> i64 {
        self.days_till_report
    }
    pub fn clear_days_till_report(&mut self) {
        self.days_till_report = 0;
    }

    // Param is passed by value, moved
    pub fn set_days_till_report(&mut self, v: i64) {
        self.days_till_report = v;
    }

    // string volatility = 33;


    pub fn get_volatility(&self) -> &str {
        &self.volatility
    }
    pub fn clear_volatility(&mut self) {
        self.volatility.clear();
    }

    // Param is passed by value, moved
    pub fn set_volatility(&mut self, v: ::std::string::String) {
        self.volatility = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_volatility(&mut self) -> &mut ::std::string::String {
        &mut self.volatility
    }

    // Take field
    pub fn take_volatility(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.volatility, ::std::string::String::new())
    }

    // int64 period_of_deposits = 34;


    pub fn get_period_of_deposits(&self) -> i64 {
        self.period_of_deposits
    }
    pub fn clear_period_of_deposits(&mut self) {
        self.period_of_deposits = 0;
    }

    // Param is passed by value, moved
    pub fn set_period_of_deposits(&mut self, v: i64) {
        self.period_of_deposits = v;
    }

    // double premature_ratio = 35;


    pub fn get_premature_ratio(&self) -> f64 {
        self.premature_ratio
    }
    pub fn clear_premature_ratio(&mut self) {
        self.premature_ratio = 0.;
    }

    // Param is passed by value, moved
    pub fn set_premature_ratio(&mut self, v: f64) {
        self.premature_ratio = v;
    }

    // double overall_rollover_ratio = 36;


    pub fn get_overall_rollover_ratio(&self) -> f64 {
        self.overall_rollover_ratio
    }
    pub fn clear_overall_rollover_ratio(&mut self) {
        self.overall_rollover_ratio = 0.;
    }

    // Param is passed by value, moved
    pub fn set_overall_rollover_ratio(&mut self, v: f64) {
        self.overall_rollover_ratio = v;
    }

    // double rollover_ratio_non_volatile = 37;


    pub fn get_rollover_ratio_non_volatile(&self) -> f64 {
        self.rollover_ratio_non_volatile
    }
    pub fn clear_rollover_ratio_non_volatile(&mut self) {
        self.rollover_ratio_non_volatile = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rollover_ratio_non_volatile(&mut self, v: f64) {
        self.rollover_ratio_non_volatile = v;
    }

    // double non_rollover_ratio_non_volatile = 38;


    pub fn get_non_rollover_ratio_non_volatile(&self) -> f64 {
        self.non_rollover_ratio_non_volatile
    }
    pub fn clear_non_rollover_ratio_non_volatile(&mut self) {
        self.non_rollover_ratio_non_volatile = 0.;
    }

    // Param is passed by value, moved
    pub fn set_non_rollover_ratio_non_volatile(&mut self, v: f64) {
        self.non_rollover_ratio_non_volatile = v;
    }

    // double non_rollover_ratio_volatile = 39;


    pub fn get_non_rollover_ratio_volatile(&self) -> f64 {
        self.non_rollover_ratio_volatile
    }
    pub fn clear_non_rollover_ratio_volatile(&mut self) {
        self.non_rollover_ratio_volatile = 0.;
    }

    // Param is passed by value, moved
    pub fn set_non_rollover_ratio_volatile(&mut self, v: f64) {
        self.non_rollover_ratio_volatile = v;
    }

    // string financial_client = 40;


    pub fn get_financial_client(&self) -> &str {
        &self.financial_client
    }
    pub fn clear_financial_client(&mut self) {
        self.financial_client.clear();
    }

    // Param is passed by value, moved
    pub fn set_financial_client(&mut self, v: ::std::string::String) {
        self.financial_client = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_financial_client(&mut self) -> &mut ::std::string::String {
        &mut self.financial_client
    }

    // Take field
    pub fn take_financial_client(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.financial_client, ::std::string::String::new())
    }

    // string lcr_category = 41;


    pub fn get_lcr_category(&self) -> &str {
        &self.lcr_category
    }
    pub fn clear_lcr_category(&mut self) {
        self.lcr_category.clear();
    }

    // Param is passed by value, moved
    pub fn set_lcr_category(&mut self, v: ::std::string::String) {
        self.lcr_category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lcr_category(&mut self) -> &mut ::std::string::String {
        &mut self.lcr_category
    }

    // Take field
    pub fn take_lcr_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lcr_category, ::std::string::String::new())
    }

    // string td_overdue_flag = 42;


    pub fn get_td_overdue_flag(&self) -> &str {
        &self.td_overdue_flag
    }
    pub fn clear_td_overdue_flag(&mut self) {
        self.td_overdue_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_td_overdue_flag(&mut self, v: ::std::string::String) {
        self.td_overdue_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_td_overdue_flag(&mut self) -> &mut ::std::string::String {
        &mut self.td_overdue_flag
    }

    // Take field
    pub fn take_td_overdue_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.td_overdue_flag, ::std::string::String::new())
    }

    // string line_of_credit = 43;


    pub fn get_line_of_credit(&self) -> &str {
        &self.line_of_credit
    }
    pub fn clear_line_of_credit(&mut self) {
        self.line_of_credit.clear();
    }

    // Param is passed by value, moved
    pub fn set_line_of_credit(&mut self, v: ::std::string::String) {
        self.line_of_credit = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_line_of_credit(&mut self) -> &mut ::std::string::String {
        &mut self.line_of_credit
    }

    // Take field
    pub fn take_line_of_credit(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.line_of_credit, ::std::string::String::new())
    }

    // string turnover = 44;


    pub fn get_turnover(&self) -> &str {
        &self.turnover
    }
    pub fn clear_turnover(&mut self) {
        self.turnover.clear();
    }

    // Param is passed by value, moved
    pub fn set_turnover(&mut self, v: ::std::string::String) {
        self.turnover = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_turnover(&mut self) -> &mut ::std::string::String {
        &mut self.turnover
    }

    // Take field
    pub fn take_turnover(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.turnover, ::std::string::String::new())
    }

    // int64 add_field1 = 45;


    pub fn get_add_field1(&self) -> i64 {
        self.add_field1
    }
    pub fn clear_add_field1(&mut self) {
        self.add_field1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_add_field1(&mut self, v: i64) {
        self.add_field1 = v;
    }

    // double add_field2 = 46;


    pub fn get_add_field2(&self) -> f64 {
        self.add_field2
    }
    pub fn clear_add_field2(&mut self) {
        self.add_field2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_add_field2(&mut self, v: f64) {
        self.add_field2 = v;
    }

    // string add_field3 = 47;


    pub fn get_add_field3(&self) -> &str {
        &self.add_field3
    }
    pub fn clear_add_field3(&mut self) {
        self.add_field3.clear();
    }

    // Param is passed by value, moved
    pub fn set_add_field3(&mut self, v: ::std::string::String) {
        self.add_field3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_field3(&mut self) -> &mut ::std::string::String {
        &mut self.add_field3
    }

    // Take field
    pub fn take_add_field3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.add_field3, ::std::string::String::new())
    }

    // repeated .Cashflow cashflows = 48;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for OutputAccount {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_number)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch_code)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_name)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product_code)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_code)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acc_open_date = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.curr_outstanding_bal = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.curr_outstanding_bal_lcy = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_rate = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.accr_int_amt = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.accr_int_gl_code)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.init_dep_amount = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.init_dep_amount_lcy = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_date = tmp;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_accrual_basis)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_comp_type)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_pay_freq)?;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_int_pay_date = tmp;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.comp_freq)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_comp_date = tmp;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pledge_against_loan)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.loan_acc_no)?;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.loan_acc_mat_date = tmp;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.constitution)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.roi_category)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_no)?;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.stable_deposit = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.effective_mat_date = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.days_till_report = tmp;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.volatility)?;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.period_of_deposits = tmp;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.premature_ratio = tmp;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.overall_rollover_ratio = tmp;
                },
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rollover_ratio_non_volatile = tmp;
                },
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.non_rollover_ratio_non_volatile = tmp;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.non_rollover_ratio_volatile = tmp;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.financial_client)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lcr_category)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.td_overdue_flag)?;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.line_of_credit)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.turnover)?;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.add_field1 = tmp;
                },
                46 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.add_field2 = tmp;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.add_field3)?;
                },
                48 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.account_number);
        }
        if !self.branch_code.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.branch_code);
        }
        if !self.cust_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.cust_id);
        }
        if !self.group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.group_id);
        }
        if !self.cust_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.cust_name);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.currency);
        }
        if !self.product_code.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.product_code);
        }
        if !self.gl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.gl_code);
        }
        if self.acc_open_date != 0 {
            my_size += ::protobuf::rt::value_size(9, self.acc_open_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.curr_outstanding_bal != 0. {
            my_size += 9;
        }
        if self.curr_outstanding_bal_lcy != 0. {
            my_size += 9;
        }
        if self.interest_rate != 0. {
            my_size += 9;
        }
        if self.accr_int_amt != 0. {
            my_size += 9;
        }
        if !self.accr_int_gl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.accr_int_gl_code);
        }
        if self.init_dep_amount != 0. {
            my_size += 9;
        }
        if self.init_dep_amount_lcy != 0. {
            my_size += 10;
        }
        if self.mat_date != 0 {
            my_size += ::protobuf::rt::value_size(17, self.mat_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.int_accrual_basis.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.int_accrual_basis);
        }
        if !self.int_comp_type.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.int_comp_type);
        }
        if !self.int_pay_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.int_pay_freq);
        }
        if self.next_int_pay_date != 0 {
            my_size += ::protobuf::rt::value_size(21, self.next_int_pay_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.comp_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.comp_freq);
        }
        if self.next_comp_date != 0 {
            my_size += ::protobuf::rt::value_size(23, self.next_comp_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.pledge_against_loan.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.pledge_against_loan);
        }
        if !self.loan_acc_no.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.loan_acc_no);
        }
        if self.loan_acc_mat_date != 0 {
            my_size += ::protobuf::rt::value_size(26, self.loan_acc_mat_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.constitution.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.constitution);
        }
        if !self.roi_category.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.roi_category);
        }
        if !self.contract_no.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.contract_no);
        }
        if self.stable_deposit != 0. {
            my_size += 10;
        }
        if self.effective_mat_date != 0 {
            my_size += ::protobuf::rt::value_size(31, self.effective_mat_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.days_till_report != 0 {
            my_size += ::protobuf::rt::value_size(32, self.days_till_report, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.volatility.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.volatility);
        }
        if self.period_of_deposits != 0 {
            my_size += ::protobuf::rt::value_size(34, self.period_of_deposits, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.premature_ratio != 0. {
            my_size += 10;
        }
        if self.overall_rollover_ratio != 0. {
            my_size += 10;
        }
        if self.rollover_ratio_non_volatile != 0. {
            my_size += 10;
        }
        if self.non_rollover_ratio_non_volatile != 0. {
            my_size += 10;
        }
        if self.non_rollover_ratio_volatile != 0. {
            my_size += 10;
        }
        if !self.financial_client.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.financial_client);
        }
        if !self.lcr_category.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.lcr_category);
        }
        if !self.td_overdue_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.td_overdue_flag);
        }
        if !self.line_of_credit.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.line_of_credit);
        }
        if !self.turnover.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.turnover);
        }
        if self.add_field1 != 0 {
            my_size += ::protobuf::rt::value_size(45, self.add_field1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.add_field2 != 0. {
            my_size += 10;
        }
        if !self.add_field3.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.add_field3);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.account_number.is_empty() {
            os.write_string(1, &self.account_number)?;
        }
        if !self.branch_code.is_empty() {
            os.write_string(2, &self.branch_code)?;
        }
        if !self.cust_id.is_empty() {
            os.write_string(3, &self.cust_id)?;
        }
        if !self.group_id.is_empty() {
            os.write_string(4, &self.group_id)?;
        }
        if !self.cust_name.is_empty() {
            os.write_string(5, &self.cust_name)?;
        }
        if !self.currency.is_empty() {
            os.write_string(6, &self.currency)?;
        }
        if !self.product_code.is_empty() {
            os.write_string(7, &self.product_code)?;
        }
        if !self.gl_code.is_empty() {
            os.write_string(8, &self.gl_code)?;
        }
        if self.acc_open_date != 0 {
            os.write_int64(9, self.acc_open_date)?;
        }
        if self.curr_outstanding_bal != 0. {
            os.write_double(10, self.curr_outstanding_bal)?;
        }
        if self.curr_outstanding_bal_lcy != 0. {
            os.write_double(11, self.curr_outstanding_bal_lcy)?;
        }
        if self.interest_rate != 0. {
            os.write_double(12, self.interest_rate)?;
        }
        if self.accr_int_amt != 0. {
            os.write_double(13, self.accr_int_amt)?;
        }
        if !self.accr_int_gl_code.is_empty() {
            os.write_string(14, &self.accr_int_gl_code)?;
        }
        if self.init_dep_amount != 0. {
            os.write_double(15, self.init_dep_amount)?;
        }
        if self.init_dep_amount_lcy != 0. {
            os.write_double(16, self.init_dep_amount_lcy)?;
        }
        if self.mat_date != 0 {
            os.write_int64(17, self.mat_date)?;
        }
        if !self.int_accrual_basis.is_empty() {
            os.write_string(18, &self.int_accrual_basis)?;
        }
        if !self.int_comp_type.is_empty() {
            os.write_string(19, &self.int_comp_type)?;
        }
        if !self.int_pay_freq.is_empty() {
            os.write_string(20, &self.int_pay_freq)?;
        }
        if self.next_int_pay_date != 0 {
            os.write_int64(21, self.next_int_pay_date)?;
        }
        if !self.comp_freq.is_empty() {
            os.write_string(22, &self.comp_freq)?;
        }
        if self.next_comp_date != 0 {
            os.write_int64(23, self.next_comp_date)?;
        }
        if !self.pledge_against_loan.is_empty() {
            os.write_string(24, &self.pledge_against_loan)?;
        }
        if !self.loan_acc_no.is_empty() {
            os.write_string(25, &self.loan_acc_no)?;
        }
        if self.loan_acc_mat_date != 0 {
            os.write_int64(26, self.loan_acc_mat_date)?;
        }
        if !self.constitution.is_empty() {
            os.write_string(27, &self.constitution)?;
        }
        if !self.roi_category.is_empty() {
            os.write_string(28, &self.roi_category)?;
        }
        if !self.contract_no.is_empty() {
            os.write_string(29, &self.contract_no)?;
        }
        if self.stable_deposit != 0. {
            os.write_double(30, self.stable_deposit)?;
        }
        if self.effective_mat_date != 0 {
            os.write_int64(31, self.effective_mat_date)?;
        }
        if self.days_till_report != 0 {
            os.write_int64(32, self.days_till_report)?;
        }
        if !self.volatility.is_empty() {
            os.write_string(33, &self.volatility)?;
        }
        if self.period_of_deposits != 0 {
            os.write_int64(34, self.period_of_deposits)?;
        }
        if self.premature_ratio != 0. {
            os.write_double(35, self.premature_ratio)?;
        }
        if self.overall_rollover_ratio != 0. {
            os.write_double(36, self.overall_rollover_ratio)?;
        }
        if self.rollover_ratio_non_volatile != 0. {
            os.write_double(37, self.rollover_ratio_non_volatile)?;
        }
        if self.non_rollover_ratio_non_volatile != 0. {
            os.write_double(38, self.non_rollover_ratio_non_volatile)?;
        }
        if self.non_rollover_ratio_volatile != 0. {
            os.write_double(39, self.non_rollover_ratio_volatile)?;
        }
        if !self.financial_client.is_empty() {
            os.write_string(40, &self.financial_client)?;
        }
        if !self.lcr_category.is_empty() {
            os.write_string(41, &self.lcr_category)?;
        }
        if !self.td_overdue_flag.is_empty() {
            os.write_string(42, &self.td_overdue_flag)?;
        }
        if !self.line_of_credit.is_empty() {
            os.write_string(43, &self.line_of_credit)?;
        }
        if !self.turnover.is_empty() {
            os.write_string(44, &self.turnover)?;
        }
        if self.add_field1 != 0 {
            os.write_int64(45, self.add_field1)?;
        }
        if self.add_field2 != 0. {
            os.write_double(46, self.add_field2)?;
        }
        if !self.add_field3.is_empty() {
            os.write_string(47, &self.add_field3)?;
        }
        for v in &self.cashflows {
            os.write_tag(48, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputAccount {
        OutputAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_number",
                |m: &OutputAccount| { &m.account_number },
                |m: &mut OutputAccount| { &mut m.account_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "branch_code",
                |m: &OutputAccount| { &m.branch_code },
                |m: &mut OutputAccount| { &mut m.branch_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_id",
                |m: &OutputAccount| { &m.cust_id },
                |m: &mut OutputAccount| { &mut m.cust_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group_id",
                |m: &OutputAccount| { &m.group_id },
                |m: &mut OutputAccount| { &mut m.group_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_name",
                |m: &OutputAccount| { &m.cust_name },
                |m: &mut OutputAccount| { &mut m.cust_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &OutputAccount| { &m.currency },
                |m: &mut OutputAccount| { &mut m.currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "product_code",
                |m: &OutputAccount| { &m.product_code },
                |m: &mut OutputAccount| { &mut m.product_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_code",
                |m: &OutputAccount| { &m.gl_code },
                |m: &mut OutputAccount| { &mut m.gl_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "acc_open_date",
                |m: &OutputAccount| { &m.acc_open_date },
                |m: &mut OutputAccount| { &mut m.acc_open_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "curr_outstanding_bal",
                |m: &OutputAccount| { &m.curr_outstanding_bal },
                |m: &mut OutputAccount| { &mut m.curr_outstanding_bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "curr_outstanding_bal_lcy",
                |m: &OutputAccount| { &m.curr_outstanding_bal_lcy },
                |m: &mut OutputAccount| { &mut m.curr_outstanding_bal_lcy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_rate",
                |m: &OutputAccount| { &m.interest_rate },
                |m: &mut OutputAccount| { &mut m.interest_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "accr_int_amt",
                |m: &OutputAccount| { &m.accr_int_amt },
                |m: &mut OutputAccount| { &mut m.accr_int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "accr_int_gl_code",
                |m: &OutputAccount| { &m.accr_int_gl_code },
                |m: &mut OutputAccount| { &mut m.accr_int_gl_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "init_dep_amount",
                |m: &OutputAccount| { &m.init_dep_amount },
                |m: &mut OutputAccount| { &mut m.init_dep_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "init_dep_amount_lcy",
                |m: &OutputAccount| { &m.init_dep_amount_lcy },
                |m: &mut OutputAccount| { &mut m.init_dep_amount_lcy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "mat_date",
                |m: &OutputAccount| { &m.mat_date },
                |m: &mut OutputAccount| { &mut m.mat_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_accrual_basis",
                |m: &OutputAccount| { &m.int_accrual_basis },
                |m: &mut OutputAccount| { &mut m.int_accrual_basis },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_comp_type",
                |m: &OutputAccount| { &m.int_comp_type },
                |m: &mut OutputAccount| { &mut m.int_comp_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_pay_freq",
                |m: &OutputAccount| { &m.int_pay_freq },
                |m: &mut OutputAccount| { &mut m.int_pay_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_int_pay_date",
                |m: &OutputAccount| { &m.next_int_pay_date },
                |m: &mut OutputAccount| { &mut m.next_int_pay_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "comp_freq",
                |m: &OutputAccount| { &m.comp_freq },
                |m: &mut OutputAccount| { &mut m.comp_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_comp_date",
                |m: &OutputAccount| { &m.next_comp_date },
                |m: &mut OutputAccount| { &mut m.next_comp_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pledge_against_loan",
                |m: &OutputAccount| { &m.pledge_against_loan },
                |m: &mut OutputAccount| { &mut m.pledge_against_loan },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "loan_acc_no",
                |m: &OutputAccount| { &m.loan_acc_no },
                |m: &mut OutputAccount| { &mut m.loan_acc_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "loan_acc_mat_date",
                |m: &OutputAccount| { &m.loan_acc_mat_date },
                |m: &mut OutputAccount| { &mut m.loan_acc_mat_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "constitution",
                |m: &OutputAccount| { &m.constitution },
                |m: &mut OutputAccount| { &mut m.constitution },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "roi_category",
                |m: &OutputAccount| { &m.roi_category },
                |m: &mut OutputAccount| { &mut m.roi_category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contract_no",
                |m: &OutputAccount| { &m.contract_no },
                |m: &mut OutputAccount| { &mut m.contract_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "stable_deposit",
                |m: &OutputAccount| { &m.stable_deposit },
                |m: &mut OutputAccount| { &mut m.stable_deposit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "effective_mat_date",
                |m: &OutputAccount| { &m.effective_mat_date },
                |m: &mut OutputAccount| { &mut m.effective_mat_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "days_till_report",
                |m: &OutputAccount| { &m.days_till_report },
                |m: &mut OutputAccount| { &mut m.days_till_report },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "volatility",
                |m: &OutputAccount| { &m.volatility },
                |m: &mut OutputAccount| { &mut m.volatility },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "period_of_deposits",
                |m: &OutputAccount| { &m.period_of_deposits },
                |m: &mut OutputAccount| { &mut m.period_of_deposits },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "premature_ratio",
                |m: &OutputAccount| { &m.premature_ratio },
                |m: &mut OutputAccount| { &mut m.premature_ratio },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "overall_rollover_ratio",
                |m: &OutputAccount| { &m.overall_rollover_ratio },
                |m: &mut OutputAccount| { &mut m.overall_rollover_ratio },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "rollover_ratio_non_volatile",
                |m: &OutputAccount| { &m.rollover_ratio_non_volatile },
                |m: &mut OutputAccount| { &mut m.rollover_ratio_non_volatile },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "non_rollover_ratio_non_volatile",
                |m: &OutputAccount| { &m.non_rollover_ratio_non_volatile },
                |m: &mut OutputAccount| { &mut m.non_rollover_ratio_non_volatile },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "non_rollover_ratio_volatile",
                |m: &OutputAccount| { &m.non_rollover_ratio_volatile },
                |m: &mut OutputAccount| { &mut m.non_rollover_ratio_volatile },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "financial_client",
                |m: &OutputAccount| { &m.financial_client },
                |m: &mut OutputAccount| { &mut m.financial_client },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "lcr_category",
                |m: &OutputAccount| { &m.lcr_category },
                |m: &mut OutputAccount| { &mut m.lcr_category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "td_overdue_flag",
                |m: &OutputAccount| { &m.td_overdue_flag },
                |m: &mut OutputAccount| { &mut m.td_overdue_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "line_of_credit",
                |m: &OutputAccount| { &m.line_of_credit },
                |m: &mut OutputAccount| { &mut m.line_of_credit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "turnover",
                |m: &OutputAccount| { &m.turnover },
                |m: &mut OutputAccount| { &mut m.turnover },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "add_field1",
                |m: &OutputAccount| { &m.add_field1 },
                |m: &mut OutputAccount| { &mut m.add_field1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "add_field2",
                |m: &OutputAccount| { &m.add_field2 },
                |m: &mut OutputAccount| { &mut m.add_field2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "add_field3",
                |m: &OutputAccount| { &m.add_field3 },
                |m: &mut OutputAccount| { &mut m.add_field3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &OutputAccount| { &m.cashflows },
                |m: &mut OutputAccount| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OutputAccount>(
                "OutputAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OutputAccount {
        static instance: ::protobuf::rt::LazyV2<OutputAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OutputAccount::new)
    }
}

impl ::protobuf::Clear for OutputAccount {
    fn clear(&mut self) {
        self.account_number.clear();
        self.branch_code.clear();
        self.cust_id.clear();
        self.group_id.clear();
        self.cust_name.clear();
        self.currency.clear();
        self.product_code.clear();
        self.gl_code.clear();
        self.acc_open_date = 0;
        self.curr_outstanding_bal = 0.;
        self.curr_outstanding_bal_lcy = 0.;
        self.interest_rate = 0.;
        self.accr_int_amt = 0.;
        self.accr_int_gl_code.clear();
        self.init_dep_amount = 0.;
        self.init_dep_amount_lcy = 0.;
        self.mat_date = 0;
        self.int_accrual_basis.clear();
        self.int_comp_type.clear();
        self.int_pay_freq.clear();
        self.next_int_pay_date = 0;
        self.comp_freq.clear();
        self.next_comp_date = 0;
        self.pledge_against_loan.clear();
        self.loan_acc_no.clear();
        self.loan_acc_mat_date = 0;
        self.constitution.clear();
        self.roi_category.clear();
        self.contract_no.clear();
        self.stable_deposit = 0.;
        self.effective_mat_date = 0;
        self.days_till_report = 0;
        self.volatility.clear();
        self.period_of_deposits = 0;
        self.premature_ratio = 0.;
        self.overall_rollover_ratio = 0.;
        self.rollover_ratio_non_volatile = 0.;
        self.non_rollover_ratio_non_volatile = 0.;
        self.non_rollover_ratio_volatile = 0.;
        self.financial_client.clear();
        self.lcr_category.clear();
        self.td_overdue_flag.clear();
        self.line_of_credit.clear();
        self.turnover.clear();
        self.add_field1 = 0;
        self.add_field2 = 0.;
        self.add_field3.clear();
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\
    \x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\
    \x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\
    \x04date\"\xe2\x0e\n\rOutputAccount\x12%\n\x0eaccount_number\x18\x01\x20\
    \x01(\tR\raccountNumber\x12\x1f\n\x0bbranch_code\x18\x02\x20\x01(\tR\nbr\
    anchCode\x12\x17\n\x07cust_id\x18\x03\x20\x01(\tR\x06custId\x12\x19\n\
    \x08group_id\x18\x04\x20\x01(\tR\x07groupId\x12\x1b\n\tcust_name\x18\x05\
    \x20\x01(\tR\x08custName\x12\x1a\n\x08currency\x18\x06\x20\x01(\tR\x08cu\
    rrency\x12!\n\x0cproduct_code\x18\x07\x20\x01(\tR\x0bproductCode\x12\x17\
    \n\x07gl_code\x18\x08\x20\x01(\tR\x06glCode\x12\"\n\racc_open_date\x18\t\
    \x20\x01(\x03R\x0baccOpenDate\x120\n\x14curr_outstanding_bal\x18\n\x20\
    \x01(\x01R\x12currOutstandingBal\x127\n\x18curr_outstanding_bal_lcy\x18\
    \x0b\x20\x01(\x01R\x15currOutstandingBalLcy\x12#\n\rinterest_rate\x18\
    \x0c\x20\x01(\x01R\x0cinterestRate\x12\x20\n\x0caccr_int_amt\x18\r\x20\
    \x01(\x01R\naccrIntAmt\x12'\n\x10accr_int_gl_code\x18\x0e\x20\x01(\tR\ra\
    ccrIntGlCode\x12&\n\x0finit_dep_amount\x18\x0f\x20\x01(\x01R\rinitDepAmo\
    unt\x12-\n\x13init_dep_amount_lcy\x18\x10\x20\x01(\x01R\x10initDepAmount\
    Lcy\x12\x19\n\x08mat_date\x18\x11\x20\x01(\x03R\x07matDate\x12*\n\x11int\
    _accrual_basis\x18\x12\x20\x01(\tR\x0fintAccrualBasis\x12\"\n\rint_comp_\
    type\x18\x13\x20\x01(\tR\x0bintCompType\x12\x20\n\x0cint_pay_freq\x18\
    \x14\x20\x01(\tR\nintPayFreq\x12)\n\x11next_int_pay_date\x18\x15\x20\x01\
    (\x03R\x0enextIntPayDate\x12\x1b\n\tcomp_freq\x18\x16\x20\x01(\tR\x08com\
    pFreq\x12$\n\x0enext_comp_date\x18\x17\x20\x01(\x03R\x0cnextCompDate\x12\
    .\n\x13pledge_against_loan\x18\x18\x20\x01(\tR\x11pledgeAgainstLoan\x12\
    \x1e\n\x0bloan_acc_no\x18\x19\x20\x01(\tR\tloanAccNo\x12)\n\x11loan_acc_\
    mat_date\x18\x1a\x20\x01(\x03R\x0eloanAccMatDate\x12\"\n\x0cconstitution\
    \x18\x1b\x20\x01(\tR\x0cconstitution\x12!\n\x0croi_category\x18\x1c\x20\
    \x01(\tR\x0broiCategory\x12\x1f\n\x0bcontract_no\x18\x1d\x20\x01(\tR\nco\
    ntractNo\x12%\n\x0estable_deposit\x18\x1e\x20\x01(\x01R\rstableDeposit\
    \x12,\n\x12effective_mat_date\x18\x1f\x20\x01(\x03R\x10effectiveMatDate\
    \x12(\n\x10days_till_report\x18\x20\x20\x01(\x03R\x0edaysTillReport\x12\
    \x1e\n\nvolatility\x18!\x20\x01(\tR\nvolatility\x12,\n\x12period_of_depo\
    sits\x18\"\x20\x01(\x03R\x10periodOfDeposits\x12'\n\x0fpremature_ratio\
    \x18#\x20\x01(\x01R\x0eprematureRatio\x124\n\x16overall_rollover_ratio\
    \x18$\x20\x01(\x01R\x14overallRolloverRatio\x12=\n\x1brollover_ratio_non\
    _volatile\x18%\x20\x01(\x01R\x18rolloverRatioNonVolatile\x12D\n\x1fnon_r\
    ollover_ratio_non_volatile\x18&\x20\x01(\x01R\x1bnonRolloverRatioNonVola\
    tile\x12=\n\x1bnon_rollover_ratio_volatile\x18'\x20\x01(\x01R\x18nonRoll\
    overRatioVolatile\x12)\n\x10financial_client\x18(\x20\x01(\tR\x0ffinanci\
    alClient\x12!\n\x0clcr_category\x18)\x20\x01(\tR\x0blcrCategory\x12&\n\
    \x0ftd_overdue_flag\x18*\x20\x01(\tR\rtdOverdueFlag\x12$\n\x0eline_of_cr\
    edit\x18+\x20\x01(\tR\x0clineOfCredit\x12\x1a\n\x08turnover\x18,\x20\x01\
    (\tR\x08turnover\x12\x1d\n\nadd_field1\x18-\x20\x01(\x03R\taddField1\x12\
    \x1d\n\nadd_field2\x18.\x20\x01(\x01R\taddField2\x12\x1d\n\nadd_field3\
    \x18/\x20\x01(\tR\taddField3\x12'\n\tcashflows\x180\x20\x03(\x0b2\t.Cash\
    flowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
