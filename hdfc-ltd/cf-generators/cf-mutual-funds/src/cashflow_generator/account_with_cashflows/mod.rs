// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub deal_number: ::std::string::String,
    pub book_value: f64,
    pub market_value: f64,
    pub currency: ::std::string::String,
    pub listing_status: ::std::string::String,
    pub listing_exchange: ::std::string::String,
    pub equity_id: ::std::string::String,
    pub equity_name: ::std::string::String,
    pub equity_issuer_type: ::std::string::String,
    pub issuer_country: ::std::string::String,
    pub isin: ::std::string::String,
    pub asset_type: ::std::string::String,
    pub asset_cat: ::std::string::String,
    pub gl_code: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string deal_number = 1;

    pub fn clear_deal_number(&mut self) {
        self.deal_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_number(&mut self, v: ::std::string::String) {
        self.deal_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_number(&mut self) -> &mut ::std::string::String {
        &mut self.deal_number
    }

    // Take field
    pub fn take_deal_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_number, ::std::string::String::new())
    }

    pub fn get_deal_number(&self) -> &str {
        &self.deal_number
    }

    // double book_value = 2;

    pub fn clear_book_value(&mut self) {
        self.book_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_book_value(&mut self, v: f64) {
        self.book_value = v;
    }

    pub fn get_book_value(&self) -> f64 {
        self.book_value
    }

    // double market_value = 3;

    pub fn clear_market_value(&mut self) {
        self.market_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_market_value(&mut self, v: f64) {
        self.market_value = v;
    }

    pub fn get_market_value(&self) -> f64 {
        self.market_value
    }

    // string currency = 4;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // string listing_status = 5;

    pub fn clear_listing_status(&mut self) {
        self.listing_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_listing_status(&mut self, v: ::std::string::String) {
        self.listing_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_listing_status(&mut self) -> &mut ::std::string::String {
        &mut self.listing_status
    }

    // Take field
    pub fn take_listing_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.listing_status, ::std::string::String::new())
    }

    pub fn get_listing_status(&self) -> &str {
        &self.listing_status
    }

    // string listing_exchange = 6;

    pub fn clear_listing_exchange(&mut self) {
        self.listing_exchange.clear();
    }

    // Param is passed by value, moved
    pub fn set_listing_exchange(&mut self, v: ::std::string::String) {
        self.listing_exchange = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_listing_exchange(&mut self) -> &mut ::std::string::String {
        &mut self.listing_exchange
    }

    // Take field
    pub fn take_listing_exchange(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.listing_exchange, ::std::string::String::new())
    }

    pub fn get_listing_exchange(&self) -> &str {
        &self.listing_exchange
    }

    // string equity_id = 7;

    pub fn clear_equity_id(&mut self) {
        self.equity_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_equity_id(&mut self, v: ::std::string::String) {
        self.equity_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_equity_id(&mut self) -> &mut ::std::string::String {
        &mut self.equity_id
    }

    // Take field
    pub fn take_equity_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.equity_id, ::std::string::String::new())
    }

    pub fn get_equity_id(&self) -> &str {
        &self.equity_id
    }

    // string equity_name = 8;

    pub fn clear_equity_name(&mut self) {
        self.equity_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_equity_name(&mut self, v: ::std::string::String) {
        self.equity_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_equity_name(&mut self) -> &mut ::std::string::String {
        &mut self.equity_name
    }

    // Take field
    pub fn take_equity_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.equity_name, ::std::string::String::new())
    }

    pub fn get_equity_name(&self) -> &str {
        &self.equity_name
    }

    // string equity_issuer_type = 9;

    pub fn clear_equity_issuer_type(&mut self) {
        self.equity_issuer_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_equity_issuer_type(&mut self, v: ::std::string::String) {
        self.equity_issuer_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_equity_issuer_type(&mut self) -> &mut ::std::string::String {
        &mut self.equity_issuer_type
    }

    // Take field
    pub fn take_equity_issuer_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.equity_issuer_type, ::std::string::String::new())
    }

    pub fn get_equity_issuer_type(&self) -> &str {
        &self.equity_issuer_type
    }

    // string issuer_country = 10;

    pub fn clear_issuer_country(&mut self) {
        self.issuer_country.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer_country(&mut self, v: ::std::string::String) {
        self.issuer_country = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer_country(&mut self) -> &mut ::std::string::String {
        &mut self.issuer_country
    }

    // Take field
    pub fn take_issuer_country(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer_country, ::std::string::String::new())
    }

    pub fn get_issuer_country(&self) -> &str {
        &self.issuer_country
    }

    // string isin = 11;

    pub fn clear_isin(&mut self) {
        self.isin.clear();
    }

    // Param is passed by value, moved
    pub fn set_isin(&mut self, v: ::std::string::String) {
        self.isin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_isin(&mut self) -> &mut ::std::string::String {
        &mut self.isin
    }

    // Take field
    pub fn take_isin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.isin, ::std::string::String::new())
    }

    pub fn get_isin(&self) -> &str {
        &self.isin
    }

    // string asset_type = 12;

    pub fn clear_asset_type(&mut self) {
        self.asset_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_type(&mut self, v: ::std::string::String) {
        self.asset_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_type(&mut self) -> &mut ::std::string::String {
        &mut self.asset_type
    }

    // Take field
    pub fn take_asset_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_type, ::std::string::String::new())
    }

    pub fn get_asset_type(&self) -> &str {
        &self.asset_type
    }

    // string asset_cat = 13;

    pub fn clear_asset_cat(&mut self) {
        self.asset_cat.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_cat(&mut self, v: ::std::string::String) {
        self.asset_cat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_cat(&mut self) -> &mut ::std::string::String {
        &mut self.asset_cat
    }

    // Take field
    pub fn take_asset_cat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_cat, ::std::string::String::new())
    }

    pub fn get_asset_cat(&self) -> &str {
        &self.asset_cat
    }

    // string gl_code = 14;

    pub fn clear_gl_code(&mut self) {
        self.gl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_code(&mut self, v: ::std::string::String) {
        self.gl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_code
    }

    // Take field
    pub fn take_gl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_code, ::std::string::String::new())
    }

    pub fn get_gl_code(&self) -> &str {
        &self.gl_code
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_number)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.book_value = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.market_value = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.listing_status)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.listing_exchange)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.equity_id)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.equity_name)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.equity_issuer_type)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer_country)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.isin)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_type)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_cat)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_code)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.deal_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.deal_number);
        }
        if self.book_value != 0. {
            my_size += 9;
        }
        if self.market_value != 0. {
            my_size += 9;
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.currency);
        }
        if !self.listing_status.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.listing_status);
        }
        if !self.listing_exchange.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.listing_exchange);
        }
        if !self.equity_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.equity_id);
        }
        if !self.equity_name.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.equity_name);
        }
        if !self.equity_issuer_type.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.equity_issuer_type);
        }
        if !self.issuer_country.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.issuer_country);
        }
        if !self.isin.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.isin);
        }
        if !self.asset_type.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.asset_type);
        }
        if !self.asset_cat.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.asset_cat);
        }
        if !self.gl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.gl_code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.deal_number.is_empty() {
            os.write_string(1, &self.deal_number)?;
        }
        if self.book_value != 0. {
            os.write_double(2, self.book_value)?;
        }
        if self.market_value != 0. {
            os.write_double(3, self.market_value)?;
        }
        if !self.currency.is_empty() {
            os.write_string(4, &self.currency)?;
        }
        if !self.listing_status.is_empty() {
            os.write_string(5, &self.listing_status)?;
        }
        if !self.listing_exchange.is_empty() {
            os.write_string(6, &self.listing_exchange)?;
        }
        if !self.equity_id.is_empty() {
            os.write_string(7, &self.equity_id)?;
        }
        if !self.equity_name.is_empty() {
            os.write_string(8, &self.equity_name)?;
        }
        if !self.equity_issuer_type.is_empty() {
            os.write_string(9, &self.equity_issuer_type)?;
        }
        if !self.issuer_country.is_empty() {
            os.write_string(10, &self.issuer_country)?;
        }
        if !self.isin.is_empty() {
            os.write_string(11, &self.isin)?;
        }
        if !self.asset_type.is_empty() {
            os.write_string(12, &self.asset_type)?;
        }
        if !self.asset_cat.is_empty() {
            os.write_string(13, &self.asset_cat)?;
        }
        if !self.gl_code.is_empty() {
            os.write_string(14, &self.gl_code)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_number",
                    |m: &AccountWithCashflows| { &m.deal_number },
                    |m: &mut AccountWithCashflows| { &mut m.deal_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "book_value",
                    |m: &AccountWithCashflows| { &m.book_value },
                    |m: &mut AccountWithCashflows| { &mut m.book_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "market_value",
                    |m: &AccountWithCashflows| { &m.market_value },
                    |m: &mut AccountWithCashflows| { &mut m.market_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &AccountWithCashflows| { &m.currency },
                    |m: &mut AccountWithCashflows| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "listing_status",
                    |m: &AccountWithCashflows| { &m.listing_status },
                    |m: &mut AccountWithCashflows| { &mut m.listing_status },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "listing_exchange",
                    |m: &AccountWithCashflows| { &m.listing_exchange },
                    |m: &mut AccountWithCashflows| { &mut m.listing_exchange },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "equity_id",
                    |m: &AccountWithCashflows| { &m.equity_id },
                    |m: &mut AccountWithCashflows| { &mut m.equity_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "equity_name",
                    |m: &AccountWithCashflows| { &m.equity_name },
                    |m: &mut AccountWithCashflows| { &mut m.equity_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "equity_issuer_type",
                    |m: &AccountWithCashflows| { &m.equity_issuer_type },
                    |m: &mut AccountWithCashflows| { &mut m.equity_issuer_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "issuer_country",
                    |m: &AccountWithCashflows| { &m.issuer_country },
                    |m: &mut AccountWithCashflows| { &mut m.issuer_country },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "isin",
                    |m: &AccountWithCashflows| { &m.isin },
                    |m: &mut AccountWithCashflows| { &mut m.isin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "asset_type",
                    |m: &AccountWithCashflows| { &m.asset_type },
                    |m: &mut AccountWithCashflows| { &mut m.asset_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "asset_cat",
                    |m: &AccountWithCashflows| { &m.asset_cat },
                    |m: &mut AccountWithCashflows| { &mut m.asset_cat },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gl_code",
                    |m: &AccountWithCashflows| { &m.gl_code },
                    |m: &mut AccountWithCashflows| { &mut m.gl_code },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_deal_number();
        self.clear_book_value();
        self.clear_market_value();
        self.clear_currency();
        self.clear_listing_status();
        self.clear_listing_exchange();
        self.clear_equity_id();
        self.clear_equity_name();
        self.clear_equity_issuer_type();
        self.clear_issuer_country();
        self.clear_isin();
        self.clear_asset_type();
        self.clear_asset_cat();
        self.clear_gl_code();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18proto/mutual_funds.proto\"\xe3\x03\n\x14AccountWithCashflows\x12\
    \x1f\n\x0bdeal_number\x18\x01\x20\x01(\tR\ndealNumber\x12\x1d\n\nbook_va\
    lue\x18\x02\x20\x01(\x01R\tbookValue\x12!\n\x0cmarket_value\x18\x03\x20\
    \x01(\x01R\x0bmarketValue\x12\x1a\n\x08currency\x18\x04\x20\x01(\tR\x08c\
    urrency\x12%\n\x0elisting_status\x18\x05\x20\x01(\tR\rlistingStatus\x12)\
    \n\x10listing_exchange\x18\x06\x20\x01(\tR\x0flistingExchange\x12\x1b\n\
    \tequity_id\x18\x07\x20\x01(\tR\x08equityId\x12\x1f\n\x0bequity_name\x18\
    \x08\x20\x01(\tR\nequityName\x12,\n\x12equity_issuer_type\x18\t\x20\x01(\
    \tR\x10equityIssuerType\x12%\n\x0eissuer_country\x18\n\x20\x01(\tR\rissu\
    erCountry\x12\x12\n\x04isin\x18\x0b\x20\x01(\tR\x04isin\x12\x1d\n\nasset\
    _type\x18\x0c\x20\x01(\tR\tassetType\x12\x1b\n\tasset_cat\x18\r\x20\x01(\
    \tR\x08assetCat\x12\x17\n\x07gl_code\x18\x0e\x20\x01(\tR\x06glCodeb\x06p\
    roto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
