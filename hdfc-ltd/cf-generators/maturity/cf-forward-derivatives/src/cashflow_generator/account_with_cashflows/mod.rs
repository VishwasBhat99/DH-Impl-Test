// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // double principal_amount = 2;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_amount",
                    |m: &Cashflow| { &m.interest_amount },
                    |m: &mut Cashflow| { &mut m.interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal_amount",
                    |m: &Cashflow| { &m.principal_amount },
                    |m: &mut Cashflow| { &mut m.principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_interest_amount();
        self.clear_principal_amount();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub deal_id: ::std::string::String,
    pub deal_type: ::std::string::String,
    pub deal_ref: ::std::string::String,
    pub leg_type: ::std::string::String,
    pub leg_number: ::std::string::String,
    pub trading_banking: ::std::string::String,
    pub counter_party_id: ::std::string::String,
    pub counter_party_name: ::std::string::String,
    pub deal_date: i64,
    pub maturity_date: i64,
    pub currency: ::std::string::String,
    pub exchange_rate: f64,
    pub currency_amt_inr: f64,
    pub currency_amt: f64,
    pub reval_rate: f64,
    pub netplamount: f64,
    pub treasury_gl_code: ::std::string::String,
    pub app1: ::std::string::String,
    pub app2: ::std::string::String,
    pub app3: ::std::string::String,
    pub app4: ::std::string::String,
    pub app5: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string deal_id = 1;

    pub fn clear_deal_id(&mut self) {
        self.deal_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_id(&mut self, v: ::std::string::String) {
        self.deal_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_id(&mut self) -> &mut ::std::string::String {
        &mut self.deal_id
    }

    // Take field
    pub fn take_deal_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_id, ::std::string::String::new())
    }

    pub fn get_deal_id(&self) -> &str {
        &self.deal_id
    }

    // string deal_type = 2;

    pub fn clear_deal_type(&mut self) {
        self.deal_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_type(&mut self, v: ::std::string::String) {
        self.deal_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_type(&mut self) -> &mut ::std::string::String {
        &mut self.deal_type
    }

    // Take field
    pub fn take_deal_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_type, ::std::string::String::new())
    }

    pub fn get_deal_type(&self) -> &str {
        &self.deal_type
    }

    // string deal_ref = 3;

    pub fn clear_deal_ref(&mut self) {
        self.deal_ref.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_ref(&mut self, v: ::std::string::String) {
        self.deal_ref = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_ref(&mut self) -> &mut ::std::string::String {
        &mut self.deal_ref
    }

    // Take field
    pub fn take_deal_ref(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_ref, ::std::string::String::new())
    }

    pub fn get_deal_ref(&self) -> &str {
        &self.deal_ref
    }

    // string leg_type = 4;

    pub fn clear_leg_type(&mut self) {
        self.leg_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_leg_type(&mut self, v: ::std::string::String) {
        self.leg_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leg_type(&mut self) -> &mut ::std::string::String {
        &mut self.leg_type
    }

    // Take field
    pub fn take_leg_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.leg_type, ::std::string::String::new())
    }

    pub fn get_leg_type(&self) -> &str {
        &self.leg_type
    }

    // string leg_number = 5;

    pub fn clear_leg_number(&mut self) {
        self.leg_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_leg_number(&mut self, v: ::std::string::String) {
        self.leg_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leg_number(&mut self) -> &mut ::std::string::String {
        &mut self.leg_number
    }

    // Take field
    pub fn take_leg_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.leg_number, ::std::string::String::new())
    }

    pub fn get_leg_number(&self) -> &str {
        &self.leg_number
    }

    // string trading_banking = 6;

    pub fn clear_trading_banking(&mut self) {
        self.trading_banking.clear();
    }

    // Param is passed by value, moved
    pub fn set_trading_banking(&mut self, v: ::std::string::String) {
        self.trading_banking = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trading_banking(&mut self) -> &mut ::std::string::String {
        &mut self.trading_banking
    }

    // Take field
    pub fn take_trading_banking(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trading_banking, ::std::string::String::new())
    }

    pub fn get_trading_banking(&self) -> &str {
        &self.trading_banking
    }

    // string counter_party_id = 7;

    pub fn clear_counter_party_id(&mut self) {
        self.counter_party_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_counter_party_id(&mut self, v: ::std::string::String) {
        self.counter_party_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counter_party_id(&mut self) -> &mut ::std::string::String {
        &mut self.counter_party_id
    }

    // Take field
    pub fn take_counter_party_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counter_party_id, ::std::string::String::new())
    }

    pub fn get_counter_party_id(&self) -> &str {
        &self.counter_party_id
    }

    // string counter_party_name = 8;

    pub fn clear_counter_party_name(&mut self) {
        self.counter_party_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_counter_party_name(&mut self, v: ::std::string::String) {
        self.counter_party_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counter_party_name(&mut self) -> &mut ::std::string::String {
        &mut self.counter_party_name
    }

    // Take field
    pub fn take_counter_party_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counter_party_name, ::std::string::String::new())
    }

    pub fn get_counter_party_name(&self) -> &str {
        &self.counter_party_name
    }

    // int64 deal_date = 9;

    pub fn clear_deal_date(&mut self) {
        self.deal_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_deal_date(&mut self, v: i64) {
        self.deal_date = v;
    }

    pub fn get_deal_date(&self) -> i64 {
        self.deal_date
    }

    // int64 maturity_date = 10;

    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }

    // string currency = 11;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // double exchange_rate = 12;

    pub fn clear_exchange_rate(&mut self) {
        self.exchange_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_exchange_rate(&mut self, v: f64) {
        self.exchange_rate = v;
    }

    pub fn get_exchange_rate(&self) -> f64 {
        self.exchange_rate
    }

    // double currency_amt_inr = 13;

    pub fn clear_currency_amt_inr(&mut self) {
        self.currency_amt_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_currency_amt_inr(&mut self, v: f64) {
        self.currency_amt_inr = v;
    }

    pub fn get_currency_amt_inr(&self) -> f64 {
        self.currency_amt_inr
    }

    // double currency_amt = 14;

    pub fn clear_currency_amt(&mut self) {
        self.currency_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_currency_amt(&mut self, v: f64) {
        self.currency_amt = v;
    }

    pub fn get_currency_amt(&self) -> f64 {
        self.currency_amt
    }

    // double reval_rate = 15;

    pub fn clear_reval_rate(&mut self) {
        self.reval_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_reval_rate(&mut self, v: f64) {
        self.reval_rate = v;
    }

    pub fn get_reval_rate(&self) -> f64 {
        self.reval_rate
    }

    // double netplamount = 16;

    pub fn clear_netplamount(&mut self) {
        self.netplamount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_netplamount(&mut self, v: f64) {
        self.netplamount = v;
    }

    pub fn get_netplamount(&self) -> f64 {
        self.netplamount
    }

    // string treasury_gl_code = 17;

    pub fn clear_treasury_gl_code(&mut self) {
        self.treasury_gl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_treasury_gl_code(&mut self, v: ::std::string::String) {
        self.treasury_gl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_treasury_gl_code(&mut self) -> &mut ::std::string::String {
        &mut self.treasury_gl_code
    }

    // Take field
    pub fn take_treasury_gl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.treasury_gl_code, ::std::string::String::new())
    }

    pub fn get_treasury_gl_code(&self) -> &str {
        &self.treasury_gl_code
    }

    // string app1 = 18;

    pub fn clear_app1(&mut self) {
        self.app1.clear();
    }

    // Param is passed by value, moved
    pub fn set_app1(&mut self, v: ::std::string::String) {
        self.app1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app1(&mut self) -> &mut ::std::string::String {
        &mut self.app1
    }

    // Take field
    pub fn take_app1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app1, ::std::string::String::new())
    }

    pub fn get_app1(&self) -> &str {
        &self.app1
    }

    // string app2 = 19;

    pub fn clear_app2(&mut self) {
        self.app2.clear();
    }

    // Param is passed by value, moved
    pub fn set_app2(&mut self, v: ::std::string::String) {
        self.app2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app2(&mut self) -> &mut ::std::string::String {
        &mut self.app2
    }

    // Take field
    pub fn take_app2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app2, ::std::string::String::new())
    }

    pub fn get_app2(&self) -> &str {
        &self.app2
    }

    // string app3 = 20;

    pub fn clear_app3(&mut self) {
        self.app3.clear();
    }

    // Param is passed by value, moved
    pub fn set_app3(&mut self, v: ::std::string::String) {
        self.app3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app3(&mut self) -> &mut ::std::string::String {
        &mut self.app3
    }

    // Take field
    pub fn take_app3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app3, ::std::string::String::new())
    }

    pub fn get_app3(&self) -> &str {
        &self.app3
    }

    // string app4 = 21;

    pub fn clear_app4(&mut self) {
        self.app4.clear();
    }

    // Param is passed by value, moved
    pub fn set_app4(&mut self, v: ::std::string::String) {
        self.app4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app4(&mut self) -> &mut ::std::string::String {
        &mut self.app4
    }

    // Take field
    pub fn take_app4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app4, ::std::string::String::new())
    }

    pub fn get_app4(&self) -> &str {
        &self.app4
    }

    // string app5 = 22;

    pub fn clear_app5(&mut self) {
        self.app5.clear();
    }

    // Param is passed by value, moved
    pub fn set_app5(&mut self, v: ::std::string::String) {
        self.app5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app5(&mut self) -> &mut ::std::string::String {
        &mut self.app5
    }

    // Take field
    pub fn take_app5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app5, ::std::string::String::new())
    }

    pub fn get_app5(&self) -> &str {
        &self.app5
    }

    // repeated .Cashflow cashflows = 23;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_ref)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.leg_type)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.leg_number)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trading_banking)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counter_party_id)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counter_party_name)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deal_date = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.exchange_rate = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.currency_amt_inr = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.currency_amt = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.reval_rate = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.netplamount = tmp;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.treasury_gl_code)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app1)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app2)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app3)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app4)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app5)?;
                },
                23 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.deal_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.deal_id);
        }
        if !self.deal_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.deal_type);
        }
        if !self.deal_ref.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.deal_ref);
        }
        if !self.leg_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.leg_type);
        }
        if !self.leg_number.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.leg_number);
        }
        if !self.trading_banking.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.trading_banking);
        }
        if !self.counter_party_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.counter_party_id);
        }
        if !self.counter_party_name.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.counter_party_name);
        }
        if self.deal_date != 0 {
            my_size += ::protobuf::rt::value_size(9, self.deal_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(10, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.currency);
        }
        if self.exchange_rate != 0. {
            my_size += 9;
        }
        if self.currency_amt_inr != 0. {
            my_size += 9;
        }
        if self.currency_amt != 0. {
            my_size += 9;
        }
        if self.reval_rate != 0. {
            my_size += 9;
        }
        if self.netplamount != 0. {
            my_size += 10;
        }
        if !self.treasury_gl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.treasury_gl_code);
        }
        if !self.app1.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.app1);
        }
        if !self.app2.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.app2);
        }
        if !self.app3.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.app3);
        }
        if !self.app4.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.app4);
        }
        if !self.app5.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.app5);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.deal_id.is_empty() {
            os.write_string(1, &self.deal_id)?;
        }
        if !self.deal_type.is_empty() {
            os.write_string(2, &self.deal_type)?;
        }
        if !self.deal_ref.is_empty() {
            os.write_string(3, &self.deal_ref)?;
        }
        if !self.leg_type.is_empty() {
            os.write_string(4, &self.leg_type)?;
        }
        if !self.leg_number.is_empty() {
            os.write_string(5, &self.leg_number)?;
        }
        if !self.trading_banking.is_empty() {
            os.write_string(6, &self.trading_banking)?;
        }
        if !self.counter_party_id.is_empty() {
            os.write_string(7, &self.counter_party_id)?;
        }
        if !self.counter_party_name.is_empty() {
            os.write_string(8, &self.counter_party_name)?;
        }
        if self.deal_date != 0 {
            os.write_int64(9, self.deal_date)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(10, self.maturity_date)?;
        }
        if !self.currency.is_empty() {
            os.write_string(11, &self.currency)?;
        }
        if self.exchange_rate != 0. {
            os.write_double(12, self.exchange_rate)?;
        }
        if self.currency_amt_inr != 0. {
            os.write_double(13, self.currency_amt_inr)?;
        }
        if self.currency_amt != 0. {
            os.write_double(14, self.currency_amt)?;
        }
        if self.reval_rate != 0. {
            os.write_double(15, self.reval_rate)?;
        }
        if self.netplamount != 0. {
            os.write_double(16, self.netplamount)?;
        }
        if !self.treasury_gl_code.is_empty() {
            os.write_string(17, &self.treasury_gl_code)?;
        }
        if !self.app1.is_empty() {
            os.write_string(18, &self.app1)?;
        }
        if !self.app2.is_empty() {
            os.write_string(19, &self.app2)?;
        }
        if !self.app3.is_empty() {
            os.write_string(20, &self.app3)?;
        }
        if !self.app4.is_empty() {
            os.write_string(21, &self.app4)?;
        }
        if !self.app5.is_empty() {
            os.write_string(22, &self.app5)?;
        }
        for v in &self.cashflows {
            os.write_tag(23, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_id",
                    |m: &AccountWithCashflows| { &m.deal_id },
                    |m: &mut AccountWithCashflows| { &mut m.deal_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_type",
                    |m: &AccountWithCashflows| { &m.deal_type },
                    |m: &mut AccountWithCashflows| { &mut m.deal_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_ref",
                    |m: &AccountWithCashflows| { &m.deal_ref },
                    |m: &mut AccountWithCashflows| { &mut m.deal_ref },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "leg_type",
                    |m: &AccountWithCashflows| { &m.leg_type },
                    |m: &mut AccountWithCashflows| { &mut m.leg_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "leg_number",
                    |m: &AccountWithCashflows| { &m.leg_number },
                    |m: &mut AccountWithCashflows| { &mut m.leg_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "trading_banking",
                    |m: &AccountWithCashflows| { &m.trading_banking },
                    |m: &mut AccountWithCashflows| { &mut m.trading_banking },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counter_party_id",
                    |m: &AccountWithCashflows| { &m.counter_party_id },
                    |m: &mut AccountWithCashflows| { &mut m.counter_party_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "counter_party_name",
                    |m: &AccountWithCashflows| { &m.counter_party_name },
                    |m: &mut AccountWithCashflows| { &mut m.counter_party_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "deal_date",
                    |m: &AccountWithCashflows| { &m.deal_date },
                    |m: &mut AccountWithCashflows| { &mut m.deal_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "maturity_date",
                    |m: &AccountWithCashflows| { &m.maturity_date },
                    |m: &mut AccountWithCashflows| { &mut m.maturity_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &AccountWithCashflows| { &m.currency },
                    |m: &mut AccountWithCashflows| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "exchange_rate",
                    |m: &AccountWithCashflows| { &m.exchange_rate },
                    |m: &mut AccountWithCashflows| { &mut m.exchange_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "currency_amt_inr",
                    |m: &AccountWithCashflows| { &m.currency_amt_inr },
                    |m: &mut AccountWithCashflows| { &mut m.currency_amt_inr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "currency_amt",
                    |m: &AccountWithCashflows| { &m.currency_amt },
                    |m: &mut AccountWithCashflows| { &mut m.currency_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "reval_rate",
                    |m: &AccountWithCashflows| { &m.reval_rate },
                    |m: &mut AccountWithCashflows| { &mut m.reval_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "netplamount",
                    |m: &AccountWithCashflows| { &m.netplamount },
                    |m: &mut AccountWithCashflows| { &mut m.netplamount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "treasury_gl_code",
                    |m: &AccountWithCashflows| { &m.treasury_gl_code },
                    |m: &mut AccountWithCashflows| { &mut m.treasury_gl_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app1",
                    |m: &AccountWithCashflows| { &m.app1 },
                    |m: &mut AccountWithCashflows| { &mut m.app1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app2",
                    |m: &AccountWithCashflows| { &m.app2 },
                    |m: &mut AccountWithCashflows| { &mut m.app2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app3",
                    |m: &AccountWithCashflows| { &m.app3 },
                    |m: &mut AccountWithCashflows| { &mut m.app3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app4",
                    |m: &AccountWithCashflows| { &m.app4 },
                    |m: &mut AccountWithCashflows| { &mut m.app4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app5",
                    |m: &AccountWithCashflows| { &m.app5 },
                    |m: &mut AccountWithCashflows| { &mut m.app5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_deal_id();
        self.clear_deal_type();
        self.clear_deal_ref();
        self.clear_leg_type();
        self.clear_leg_number();
        self.clear_trading_banking();
        self.clear_counter_party_id();
        self.clear_counter_party_name();
        self.clear_deal_date();
        self.clear_maturity_date();
        self.clear_currency();
        self.clear_exchange_rate();
        self.clear_currency_amt_inr();
        self.clear_currency_amt();
        self.clear_reval_rate();
        self.clear_netplamount();
        self.clear_treasury_gl_code();
        self.clear_app1();
        self.clear_app2();
        self.clear_app3();
        self.clear_app4();
        self.clear_app5();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15proto/ford_deri.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\
    \x18\x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\
    \x02\x20\x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\
    \x03R\x04date\"\xea\x05\n\x14AccountWithCashflows\x12\x17\n\x07deal_id\
    \x18\x01\x20\x01(\tR\x06dealId\x12\x1b\n\tdeal_type\x18\x02\x20\x01(\tR\
    \x08dealType\x12\x19\n\x08deal_ref\x18\x03\x20\x01(\tR\x07dealRef\x12\
    \x19\n\x08leg_type\x18\x04\x20\x01(\tR\x07legType\x12\x1d\n\nleg_number\
    \x18\x05\x20\x01(\tR\tlegNumber\x12'\n\x0ftrading_banking\x18\x06\x20\
    \x01(\tR\x0etradingBanking\x12(\n\x10counter_party_id\x18\x07\x20\x01(\t\
    R\x0ecounterPartyId\x12,\n\x12counter_party_name\x18\x08\x20\x01(\tR\x10\
    counterPartyName\x12\x1b\n\tdeal_date\x18\t\x20\x01(\x03R\x08dealDate\
    \x12#\n\rmaturity_date\x18\n\x20\x01(\x03R\x0cmaturityDate\x12\x1a\n\x08\
    currency\x18\x0b\x20\x01(\tR\x08currency\x12#\n\rexchange_rate\x18\x0c\
    \x20\x01(\x01R\x0cexchangeRate\x12(\n\x10currency_amt_inr\x18\r\x20\x01(\
    \x01R\x0ecurrencyAmtInr\x12!\n\x0ccurrency_amt\x18\x0e\x20\x01(\x01R\x0b\
    currencyAmt\x12\x1d\n\nreval_rate\x18\x0f\x20\x01(\x01R\trevalRate\x12\
    \x20\n\x0bnetplamount\x18\x10\x20\x01(\x01R\x0bnetplamount\x12(\n\x10tre\
    asury_gl_code\x18\x11\x20\x01(\tR\x0etreasuryGlCode\x12\x12\n\x04app1\
    \x18\x12\x20\x01(\tR\x04app1\x12\x12\n\x04app2\x18\x13\x20\x01(\tR\x04ap\
    p2\x12\x12\n\x04app3\x18\x14\x20\x01(\tR\x04app3\x12\x12\n\x04app4\x18\
    \x15\x20\x01(\tR\x04app4\x12\x12\n\x04app5\x18\x16\x20\x01(\tR\x04app5\
    \x12'\n\tcashflows\x18\x17\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06prot\
    o3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
