// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub cfdate: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // double principal_amount = 2;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // int64 cfdate = 3;

    pub fn clear_cfdate(&mut self) {
        self.cfdate = 0;
    }

    // Param is passed by value, moved
    pub fn set_cfdate(&mut self, v: i64) {
        self.cfdate = v;
    }

    pub fn get_cfdate(&self) -> i64 {
        self.cfdate
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cfdate = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.cfdate != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cfdate, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.cfdate != 0 {
            os.write_int64(3, self.cfdate)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_amount",
                    |m: &Cashflow| { &m.interest_amount },
                    |m: &mut Cashflow| { &mut m.interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal_amount",
                    |m: &Cashflow| { &m.principal_amount },
                    |m: &mut Cashflow| { &mut m.principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cfdate",
                    |m: &Cashflow| { &m.cfdate },
                    |m: &mut Cashflow| { &mut m.cfdate },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_interest_amount();
        self.clear_principal_amount();
        self.clear_cfdate();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub loan_id: ::std::string::String,
    pub state: ::std::string::String,
    pub region: ::std::string::String,
    pub branch_name: ::std::string::String,
    pub village: ::std::string::String,
    pub group: ::std::string::String,
    pub group_id: ::std::string::String,
    pub branch_model: ::std::string::String,
    pub member_name: ::std::string::String,
    pub member_id: ::std::string::String,
    pub prod_name: ::std::string::String,
    pub purpose_of_loan: ::std::string::String,
    pub rate_of_interest: f64,
    pub disb_date: i64,
    pub amt_disbursed: f64,
    pub first_od_date: i64,
    pub npa_date: i64,
    pub prin_due_on_npa: f64,
    pub int_due_on_npa: f64,
    pub prin_os_on_npa: f64,
    pub prin_collected: f64,
    pub int_collected: f64,
    pub dpd_day: i64,
    pub standard: ::std::string::String,
    pub prin_due_on_reporting: f64,
    pub int_due_on_reporting: f64,
    pub prin_os_on_reporting: f64,
    pub npa_int_accr: f64,
    pub npa_int_during_period: f64,
    pub funder_name: ::std::string::String,
    pub maturity_dt: i64,
    pub currency: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string loan_id = 1;

    pub fn clear_loan_id(&mut self) {
        self.loan_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_loan_id(&mut self, v: ::std::string::String) {
        self.loan_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_loan_id(&mut self) -> &mut ::std::string::String {
        &mut self.loan_id
    }

    // Take field
    pub fn take_loan_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.loan_id, ::std::string::String::new())
    }

    pub fn get_loan_id(&self) -> &str {
        &self.loan_id
    }

    // string state = 2;

    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::std::string::String) {
        self.state = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut ::std::string::String {
        &mut self.state
    }

    // Take field
    pub fn take_state(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.state, ::std::string::String::new())
    }

    pub fn get_state(&self) -> &str {
        &self.state
    }

    // string region = 3;

    pub fn clear_region(&mut self) {
        self.region.clear();
    }

    // Param is passed by value, moved
    pub fn set_region(&mut self, v: ::std::string::String) {
        self.region = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_region(&mut self) -> &mut ::std::string::String {
        &mut self.region
    }

    // Take field
    pub fn take_region(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.region, ::std::string::String::new())
    }

    pub fn get_region(&self) -> &str {
        &self.region
    }

    // string branch_name = 4;

    pub fn clear_branch_name(&mut self) {
        self.branch_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch_name(&mut self, v: ::std::string::String) {
        self.branch_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch_name(&mut self) -> &mut ::std::string::String {
        &mut self.branch_name
    }

    // Take field
    pub fn take_branch_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch_name, ::std::string::String::new())
    }

    pub fn get_branch_name(&self) -> &str {
        &self.branch_name
    }

    // string village = 5;

    pub fn clear_village(&mut self) {
        self.village.clear();
    }

    // Param is passed by value, moved
    pub fn set_village(&mut self, v: ::std::string::String) {
        self.village = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_village(&mut self) -> &mut ::std::string::String {
        &mut self.village
    }

    // Take field
    pub fn take_village(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.village, ::std::string::String::new())
    }

    pub fn get_village(&self) -> &str {
        &self.village
    }

    // string group = 6;

    pub fn clear_group(&mut self) {
        self.group.clear();
    }

    // Param is passed by value, moved
    pub fn set_group(&mut self, v: ::std::string::String) {
        self.group = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group(&mut self) -> &mut ::std::string::String {
        &mut self.group
    }

    // Take field
    pub fn take_group(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group, ::std::string::String::new())
    }

    pub fn get_group(&self) -> &str {
        &self.group
    }

    // string group_id = 7;

    pub fn clear_group_id(&mut self) {
        self.group_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_group_id(&mut self, v: ::std::string::String) {
        self.group_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group_id(&mut self) -> &mut ::std::string::String {
        &mut self.group_id
    }

    // Take field
    pub fn take_group_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group_id, ::std::string::String::new())
    }

    pub fn get_group_id(&self) -> &str {
        &self.group_id
    }

    // string branch_model = 8;

    pub fn clear_branch_model(&mut self) {
        self.branch_model.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch_model(&mut self, v: ::std::string::String) {
        self.branch_model = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch_model(&mut self) -> &mut ::std::string::String {
        &mut self.branch_model
    }

    // Take field
    pub fn take_branch_model(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch_model, ::std::string::String::new())
    }

    pub fn get_branch_model(&self) -> &str {
        &self.branch_model
    }

    // string member_name = 9;

    pub fn clear_member_name(&mut self) {
        self.member_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_member_name(&mut self, v: ::std::string::String) {
        self.member_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_member_name(&mut self) -> &mut ::std::string::String {
        &mut self.member_name
    }

    // Take field
    pub fn take_member_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.member_name, ::std::string::String::new())
    }

    pub fn get_member_name(&self) -> &str {
        &self.member_name
    }

    // string member_id = 10;

    pub fn clear_member_id(&mut self) {
        self.member_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_member_id(&mut self, v: ::std::string::String) {
        self.member_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_member_id(&mut self) -> &mut ::std::string::String {
        &mut self.member_id
    }

    // Take field
    pub fn take_member_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.member_id, ::std::string::String::new())
    }

    pub fn get_member_id(&self) -> &str {
        &self.member_id
    }

    // string prod_name = 11;

    pub fn clear_prod_name(&mut self) {
        self.prod_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_name(&mut self, v: ::std::string::String) {
        self.prod_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_name(&mut self) -> &mut ::std::string::String {
        &mut self.prod_name
    }

    // Take field
    pub fn take_prod_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_name, ::std::string::String::new())
    }

    pub fn get_prod_name(&self) -> &str {
        &self.prod_name
    }

    // string purpose_of_loan = 12;

    pub fn clear_purpose_of_loan(&mut self) {
        self.purpose_of_loan.clear();
    }

    // Param is passed by value, moved
    pub fn set_purpose_of_loan(&mut self, v: ::std::string::String) {
        self.purpose_of_loan = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_purpose_of_loan(&mut self) -> &mut ::std::string::String {
        &mut self.purpose_of_loan
    }

    // Take field
    pub fn take_purpose_of_loan(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.purpose_of_loan, ::std::string::String::new())
    }

    pub fn get_purpose_of_loan(&self) -> &str {
        &self.purpose_of_loan
    }

    // double rate_of_interest = 13;

    pub fn clear_rate_of_interest(&mut self) {
        self.rate_of_interest = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rate_of_interest(&mut self, v: f64) {
        self.rate_of_interest = v;
    }

    pub fn get_rate_of_interest(&self) -> f64 {
        self.rate_of_interest
    }

    // int64 disb_date = 14;

    pub fn clear_disb_date(&mut self) {
        self.disb_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_disb_date(&mut self, v: i64) {
        self.disb_date = v;
    }

    pub fn get_disb_date(&self) -> i64 {
        self.disb_date
    }

    // double amt_disbursed = 15;

    pub fn clear_amt_disbursed(&mut self) {
        self.amt_disbursed = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amt_disbursed(&mut self, v: f64) {
        self.amt_disbursed = v;
    }

    pub fn get_amt_disbursed(&self) -> f64 {
        self.amt_disbursed
    }

    // int64 first_od_date = 16;

    pub fn clear_first_od_date(&mut self) {
        self.first_od_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_first_od_date(&mut self, v: i64) {
        self.first_od_date = v;
    }

    pub fn get_first_od_date(&self) -> i64 {
        self.first_od_date
    }

    // int64 npa_date = 17;

    pub fn clear_npa_date(&mut self) {
        self.npa_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_npa_date(&mut self, v: i64) {
        self.npa_date = v;
    }

    pub fn get_npa_date(&self) -> i64 {
        self.npa_date
    }

    // double prin_due_on_npa = 18;

    pub fn clear_prin_due_on_npa(&mut self) {
        self.prin_due_on_npa = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_due_on_npa(&mut self, v: f64) {
        self.prin_due_on_npa = v;
    }

    pub fn get_prin_due_on_npa(&self) -> f64 {
        self.prin_due_on_npa
    }

    // double int_due_on_npa = 19;

    pub fn clear_int_due_on_npa(&mut self) {
        self.int_due_on_npa = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_due_on_npa(&mut self, v: f64) {
        self.int_due_on_npa = v;
    }

    pub fn get_int_due_on_npa(&self) -> f64 {
        self.int_due_on_npa
    }

    // double prin_os_on_npa = 20;

    pub fn clear_prin_os_on_npa(&mut self) {
        self.prin_os_on_npa = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_os_on_npa(&mut self, v: f64) {
        self.prin_os_on_npa = v;
    }

    pub fn get_prin_os_on_npa(&self) -> f64 {
        self.prin_os_on_npa
    }

    // double prin_collected = 21;

    pub fn clear_prin_collected(&mut self) {
        self.prin_collected = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_collected(&mut self, v: f64) {
        self.prin_collected = v;
    }

    pub fn get_prin_collected(&self) -> f64 {
        self.prin_collected
    }

    // double int_collected = 22;

    pub fn clear_int_collected(&mut self) {
        self.int_collected = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_collected(&mut self, v: f64) {
        self.int_collected = v;
    }

    pub fn get_int_collected(&self) -> f64 {
        self.int_collected
    }

    // int64 dpd_day = 23;

    pub fn clear_dpd_day(&mut self) {
        self.dpd_day = 0;
    }

    // Param is passed by value, moved
    pub fn set_dpd_day(&mut self, v: i64) {
        self.dpd_day = v;
    }

    pub fn get_dpd_day(&self) -> i64 {
        self.dpd_day
    }

    // string standard = 24;

    pub fn clear_standard(&mut self) {
        self.standard.clear();
    }

    // Param is passed by value, moved
    pub fn set_standard(&mut self, v: ::std::string::String) {
        self.standard = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_standard(&mut self) -> &mut ::std::string::String {
        &mut self.standard
    }

    // Take field
    pub fn take_standard(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.standard, ::std::string::String::new())
    }

    pub fn get_standard(&self) -> &str {
        &self.standard
    }

    // double prin_due_on_reporting = 25;

    pub fn clear_prin_due_on_reporting(&mut self) {
        self.prin_due_on_reporting = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_due_on_reporting(&mut self, v: f64) {
        self.prin_due_on_reporting = v;
    }

    pub fn get_prin_due_on_reporting(&self) -> f64 {
        self.prin_due_on_reporting
    }

    // double int_due_on_reporting = 26;

    pub fn clear_int_due_on_reporting(&mut self) {
        self.int_due_on_reporting = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_due_on_reporting(&mut self, v: f64) {
        self.int_due_on_reporting = v;
    }

    pub fn get_int_due_on_reporting(&self) -> f64 {
        self.int_due_on_reporting
    }

    // double prin_os_on_reporting = 27;

    pub fn clear_prin_os_on_reporting(&mut self) {
        self.prin_os_on_reporting = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_os_on_reporting(&mut self, v: f64) {
        self.prin_os_on_reporting = v;
    }

    pub fn get_prin_os_on_reporting(&self) -> f64 {
        self.prin_os_on_reporting
    }

    // double npa_int_accr = 28;

    pub fn clear_npa_int_accr(&mut self) {
        self.npa_int_accr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_npa_int_accr(&mut self, v: f64) {
        self.npa_int_accr = v;
    }

    pub fn get_npa_int_accr(&self) -> f64 {
        self.npa_int_accr
    }

    // double npa_int_during_period = 29;

    pub fn clear_npa_int_during_period(&mut self) {
        self.npa_int_during_period = 0.;
    }

    // Param is passed by value, moved
    pub fn set_npa_int_during_period(&mut self, v: f64) {
        self.npa_int_during_period = v;
    }

    pub fn get_npa_int_during_period(&self) -> f64 {
        self.npa_int_during_period
    }

    // string funder_name = 30;

    pub fn clear_funder_name(&mut self) {
        self.funder_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_funder_name(&mut self, v: ::std::string::String) {
        self.funder_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_funder_name(&mut self) -> &mut ::std::string::String {
        &mut self.funder_name
    }

    // Take field
    pub fn take_funder_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.funder_name, ::std::string::String::new())
    }

    pub fn get_funder_name(&self) -> &str {
        &self.funder_name
    }

    // int64 maturity_dt = 31;

    pub fn clear_maturity_dt(&mut self) {
        self.maturity_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_dt(&mut self, v: i64) {
        self.maturity_dt = v;
    }

    pub fn get_maturity_dt(&self) -> i64 {
        self.maturity_dt
    }

    // string currency = 32;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // repeated .Cashflow cashflows = 33;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.loan_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.state)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.region)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch_name)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.village)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group_id)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch_model)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.member_name)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.member_id)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_name)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.purpose_of_loan)?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rate_of_interest = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.disb_date = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.amt_disbursed = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.first_od_date = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.npa_date = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_due_on_npa = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_due_on_npa = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_os_on_npa = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_collected = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_collected = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.dpd_day = tmp;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.standard)?;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_due_on_reporting = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_due_on_reporting = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_os_on_reporting = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.npa_int_accr = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.npa_int_during_period = tmp;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.funder_name)?;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_dt = tmp;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                33 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.loan_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.loan_id);
        }
        if !self.state.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.state);
        }
        if !self.region.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.region);
        }
        if !self.branch_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.branch_name);
        }
        if !self.village.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.village);
        }
        if !self.group.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.group);
        }
        if !self.group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.group_id);
        }
        if !self.branch_model.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.branch_model);
        }
        if !self.member_name.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.member_name);
        }
        if !self.member_id.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.member_id);
        }
        if !self.prod_name.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.prod_name);
        }
        if !self.purpose_of_loan.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.purpose_of_loan);
        }
        if self.rate_of_interest != 0. {
            my_size += 9;
        }
        if self.disb_date != 0 {
            my_size += ::protobuf::rt::value_size(14, self.disb_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.amt_disbursed != 0. {
            my_size += 9;
        }
        if self.first_od_date != 0 {
            my_size += ::protobuf::rt::value_size(16, self.first_od_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.npa_date != 0 {
            my_size += ::protobuf::rt::value_size(17, self.npa_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prin_due_on_npa != 0. {
            my_size += 10;
        }
        if self.int_due_on_npa != 0. {
            my_size += 10;
        }
        if self.prin_os_on_npa != 0. {
            my_size += 10;
        }
        if self.prin_collected != 0. {
            my_size += 10;
        }
        if self.int_collected != 0. {
            my_size += 10;
        }
        if self.dpd_day != 0 {
            my_size += ::protobuf::rt::value_size(23, self.dpd_day, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.standard.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.standard);
        }
        if self.prin_due_on_reporting != 0. {
            my_size += 10;
        }
        if self.int_due_on_reporting != 0. {
            my_size += 10;
        }
        if self.prin_os_on_reporting != 0. {
            my_size += 10;
        }
        if self.npa_int_accr != 0. {
            my_size += 10;
        }
        if self.npa_int_during_period != 0. {
            my_size += 10;
        }
        if !self.funder_name.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.funder_name);
        }
        if self.maturity_dt != 0 {
            my_size += ::protobuf::rt::value_size(31, self.maturity_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.currency);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.loan_id.is_empty() {
            os.write_string(1, &self.loan_id)?;
        }
        if !self.state.is_empty() {
            os.write_string(2, &self.state)?;
        }
        if !self.region.is_empty() {
            os.write_string(3, &self.region)?;
        }
        if !self.branch_name.is_empty() {
            os.write_string(4, &self.branch_name)?;
        }
        if !self.village.is_empty() {
            os.write_string(5, &self.village)?;
        }
        if !self.group.is_empty() {
            os.write_string(6, &self.group)?;
        }
        if !self.group_id.is_empty() {
            os.write_string(7, &self.group_id)?;
        }
        if !self.branch_model.is_empty() {
            os.write_string(8, &self.branch_model)?;
        }
        if !self.member_name.is_empty() {
            os.write_string(9, &self.member_name)?;
        }
        if !self.member_id.is_empty() {
            os.write_string(10, &self.member_id)?;
        }
        if !self.prod_name.is_empty() {
            os.write_string(11, &self.prod_name)?;
        }
        if !self.purpose_of_loan.is_empty() {
            os.write_string(12, &self.purpose_of_loan)?;
        }
        if self.rate_of_interest != 0. {
            os.write_double(13, self.rate_of_interest)?;
        }
        if self.disb_date != 0 {
            os.write_int64(14, self.disb_date)?;
        }
        if self.amt_disbursed != 0. {
            os.write_double(15, self.amt_disbursed)?;
        }
        if self.first_od_date != 0 {
            os.write_int64(16, self.first_od_date)?;
        }
        if self.npa_date != 0 {
            os.write_int64(17, self.npa_date)?;
        }
        if self.prin_due_on_npa != 0. {
            os.write_double(18, self.prin_due_on_npa)?;
        }
        if self.int_due_on_npa != 0. {
            os.write_double(19, self.int_due_on_npa)?;
        }
        if self.prin_os_on_npa != 0. {
            os.write_double(20, self.prin_os_on_npa)?;
        }
        if self.prin_collected != 0. {
            os.write_double(21, self.prin_collected)?;
        }
        if self.int_collected != 0. {
            os.write_double(22, self.int_collected)?;
        }
        if self.dpd_day != 0 {
            os.write_int64(23, self.dpd_day)?;
        }
        if !self.standard.is_empty() {
            os.write_string(24, &self.standard)?;
        }
        if self.prin_due_on_reporting != 0. {
            os.write_double(25, self.prin_due_on_reporting)?;
        }
        if self.int_due_on_reporting != 0. {
            os.write_double(26, self.int_due_on_reporting)?;
        }
        if self.prin_os_on_reporting != 0. {
            os.write_double(27, self.prin_os_on_reporting)?;
        }
        if self.npa_int_accr != 0. {
            os.write_double(28, self.npa_int_accr)?;
        }
        if self.npa_int_during_period != 0. {
            os.write_double(29, self.npa_int_during_period)?;
        }
        if !self.funder_name.is_empty() {
            os.write_string(30, &self.funder_name)?;
        }
        if self.maturity_dt != 0 {
            os.write_int64(31, self.maturity_dt)?;
        }
        if !self.currency.is_empty() {
            os.write_string(32, &self.currency)?;
        }
        for v in &self.cashflows {
            os.write_tag(33, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "loan_id",
                    |m: &AccountWithCashflows| { &m.loan_id },
                    |m: &mut AccountWithCashflows| { &mut m.loan_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "state",
                    |m: &AccountWithCashflows| { &m.state },
                    |m: &mut AccountWithCashflows| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "region",
                    |m: &AccountWithCashflows| { &m.region },
                    |m: &mut AccountWithCashflows| { &mut m.region },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "branch_name",
                    |m: &AccountWithCashflows| { &m.branch_name },
                    |m: &mut AccountWithCashflows| { &mut m.branch_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "village",
                    |m: &AccountWithCashflows| { &m.village },
                    |m: &mut AccountWithCashflows| { &mut m.village },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "group",
                    |m: &AccountWithCashflows| { &m.group },
                    |m: &mut AccountWithCashflows| { &mut m.group },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "group_id",
                    |m: &AccountWithCashflows| { &m.group_id },
                    |m: &mut AccountWithCashflows| { &mut m.group_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "branch_model",
                    |m: &AccountWithCashflows| { &m.branch_model },
                    |m: &mut AccountWithCashflows| { &mut m.branch_model },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "member_name",
                    |m: &AccountWithCashflows| { &m.member_name },
                    |m: &mut AccountWithCashflows| { &mut m.member_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "member_id",
                    |m: &AccountWithCashflows| { &m.member_id },
                    |m: &mut AccountWithCashflows| { &mut m.member_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "prod_name",
                    |m: &AccountWithCashflows| { &m.prod_name },
                    |m: &mut AccountWithCashflows| { &mut m.prod_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "purpose_of_loan",
                    |m: &AccountWithCashflows| { &m.purpose_of_loan },
                    |m: &mut AccountWithCashflows| { &mut m.purpose_of_loan },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rate_of_interest",
                    |m: &AccountWithCashflows| { &m.rate_of_interest },
                    |m: &mut AccountWithCashflows| { &mut m.rate_of_interest },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "disb_date",
                    |m: &AccountWithCashflows| { &m.disb_date },
                    |m: &mut AccountWithCashflows| { &mut m.disb_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "amt_disbursed",
                    |m: &AccountWithCashflows| { &m.amt_disbursed },
                    |m: &mut AccountWithCashflows| { &mut m.amt_disbursed },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "first_od_date",
                    |m: &AccountWithCashflows| { &m.first_od_date },
                    |m: &mut AccountWithCashflows| { &mut m.first_od_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "npa_date",
                    |m: &AccountWithCashflows| { &m.npa_date },
                    |m: &mut AccountWithCashflows| { &mut m.npa_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_due_on_npa",
                    |m: &AccountWithCashflows| { &m.prin_due_on_npa },
                    |m: &mut AccountWithCashflows| { &mut m.prin_due_on_npa },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_due_on_npa",
                    |m: &AccountWithCashflows| { &m.int_due_on_npa },
                    |m: &mut AccountWithCashflows| { &mut m.int_due_on_npa },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_os_on_npa",
                    |m: &AccountWithCashflows| { &m.prin_os_on_npa },
                    |m: &mut AccountWithCashflows| { &mut m.prin_os_on_npa },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_collected",
                    |m: &AccountWithCashflows| { &m.prin_collected },
                    |m: &mut AccountWithCashflows| { &mut m.prin_collected },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_collected",
                    |m: &AccountWithCashflows| { &m.int_collected },
                    |m: &mut AccountWithCashflows| { &mut m.int_collected },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "dpd_day",
                    |m: &AccountWithCashflows| { &m.dpd_day },
                    |m: &mut AccountWithCashflows| { &mut m.dpd_day },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "standard",
                    |m: &AccountWithCashflows| { &m.standard },
                    |m: &mut AccountWithCashflows| { &mut m.standard },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_due_on_reporting",
                    |m: &AccountWithCashflows| { &m.prin_due_on_reporting },
                    |m: &mut AccountWithCashflows| { &mut m.prin_due_on_reporting },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_due_on_reporting",
                    |m: &AccountWithCashflows| { &m.int_due_on_reporting },
                    |m: &mut AccountWithCashflows| { &mut m.int_due_on_reporting },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_os_on_reporting",
                    |m: &AccountWithCashflows| { &m.prin_os_on_reporting },
                    |m: &mut AccountWithCashflows| { &mut m.prin_os_on_reporting },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "npa_int_accr",
                    |m: &AccountWithCashflows| { &m.npa_int_accr },
                    |m: &mut AccountWithCashflows| { &mut m.npa_int_accr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "npa_int_during_period",
                    |m: &AccountWithCashflows| { &m.npa_int_during_period },
                    |m: &mut AccountWithCashflows| { &mut m.npa_int_during_period },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "funder_name",
                    |m: &AccountWithCashflows| { &m.funder_name },
                    |m: &mut AccountWithCashflows| { &mut m.funder_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "maturity_dt",
                    |m: &AccountWithCashflows| { &m.maturity_dt },
                    |m: &mut AccountWithCashflows| { &mut m.maturity_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &AccountWithCashflows| { &m.currency },
                    |m: &mut AccountWithCashflows| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_loan_id();
        self.clear_state();
        self.clear_region();
        self.clear_branch_name();
        self.clear_village();
        self.clear_group();
        self.clear_group_id();
        self.clear_branch_model();
        self.clear_member_name();
        self.clear_member_id();
        self.clear_prod_name();
        self.clear_purpose_of_loan();
        self.clear_rate_of_interest();
        self.clear_disb_date();
        self.clear_amt_disbursed();
        self.clear_first_od_date();
        self.clear_npa_date();
        self.clear_prin_due_on_npa();
        self.clear_int_due_on_npa();
        self.clear_prin_os_on_npa();
        self.clear_prin_collected();
        self.clear_int_collected();
        self.clear_dpd_day();
        self.clear_standard();
        self.clear_prin_due_on_reporting();
        self.clear_int_due_on_reporting();
        self.clear_prin_os_on_reporting();
        self.clear_npa_int_accr();
        self.clear_npa_int_during_period();
        self.clear_funder_name();
        self.clear_maturity_dt();
        self.clear_currency();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bproto/npa_jayam_loans.proto\"v\n\x08Cashflow\x12'\n\x0finterest_am\
    ount\x18\x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\
    \x18\x02\x20\x01(\x01R\x0fprincipalAmount\x12\x16\n\x06cfdate\x18\x03\
    \x20\x01(\x03R\x06cfdate\"\xfd\x08\n\x14AccountWithCashflows\x12\x17\n\
    \x07loan_id\x18\x01\x20\x01(\tR\x06loanId\x12\x14\n\x05state\x18\x02\x20\
    \x01(\tR\x05state\x12\x16\n\x06region\x18\x03\x20\x01(\tR\x06region\x12\
    \x1f\n\x0bbranch_name\x18\x04\x20\x01(\tR\nbranchName\x12\x18\n\x07villa\
    ge\x18\x05\x20\x01(\tR\x07village\x12\x14\n\x05group\x18\x06\x20\x01(\tR\
    \x05group\x12\x19\n\x08group_id\x18\x07\x20\x01(\tR\x07groupId\x12!\n\
    \x0cbranch_model\x18\x08\x20\x01(\tR\x0bbranchModel\x12\x1f\n\x0bmember_\
    name\x18\t\x20\x01(\tR\nmemberName\x12\x1b\n\tmember_id\x18\n\x20\x01(\t\
    R\x08memberId\x12\x1b\n\tprod_name\x18\x0b\x20\x01(\tR\x08prodName\x12&\
    \n\x0fpurpose_of_loan\x18\x0c\x20\x01(\tR\rpurposeOfLoan\x12(\n\x10rate_\
    of_interest\x18\r\x20\x01(\x01R\x0erateOfInterest\x12\x1b\n\tdisb_date\
    \x18\x0e\x20\x01(\x03R\x08disbDate\x12#\n\ramt_disbursed\x18\x0f\x20\x01\
    (\x01R\x0camtDisbursed\x12\"\n\rfirst_od_date\x18\x10\x20\x01(\x03R\x0bf\
    irstOdDate\x12\x19\n\x08npa_date\x18\x11\x20\x01(\x03R\x07npaDate\x12%\n\
    \x0fprin_due_on_npa\x18\x12\x20\x01(\x01R\x0cprinDueOnNpa\x12#\n\x0eint_\
    due_on_npa\x18\x13\x20\x01(\x01R\x0bintDueOnNpa\x12#\n\x0eprin_os_on_npa\
    \x18\x14\x20\x01(\x01R\x0bprinOsOnNpa\x12%\n\x0eprin_collected\x18\x15\
    \x20\x01(\x01R\rprinCollected\x12#\n\rint_collected\x18\x16\x20\x01(\x01\
    R\x0cintCollected\x12\x17\n\x07dpd_day\x18\x17\x20\x01(\x03R\x06dpdDay\
    \x12\x1a\n\x08standard\x18\x18\x20\x01(\tR\x08standard\x121\n\x15prin_du\
    e_on_reporting\x18\x19\x20\x01(\x01R\x12prinDueOnReporting\x12/\n\x14int\
    _due_on_reporting\x18\x1a\x20\x01(\x01R\x11intDueOnReporting\x12/\n\x14p\
    rin_os_on_reporting\x18\x1b\x20\x01(\x01R\x11prinOsOnReporting\x12\x20\n\
    \x0cnpa_int_accr\x18\x1c\x20\x01(\x01R\nnpaIntAccr\x121\n\x15npa_int_dur\
    ing_period\x18\x1d\x20\x01(\x01R\x12npaIntDuringPeriod\x12\x1f\n\x0bfund\
    er_name\x18\x1e\x20\x01(\tR\nfunderName\x12\x1f\n\x0bmaturity_dt\x18\x1f\
    \x20\x01(\x03R\nmaturityDt\x12\x1a\n\x08currency\x18\x20\x20\x01(\tR\x08\
    currency\x12'\n\tcashflows\x18!\x20\x03(\x0b2\t.CashflowR\tcashflowsb\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
