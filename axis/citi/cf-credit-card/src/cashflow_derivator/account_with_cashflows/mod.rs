// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_amt",
                |m: &Cashflow| { &m.int_amt },
                |m: &mut Cashflow| { &mut m.int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "prin_amt",
                |m: &Cashflow| { &m.prin_amt },
                |m: &mut Cashflow| { &mut m.prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub product_id: ::std::string::String,
    pub account_number: ::std::string::String,
    pub bill_due_day: i64,
    pub outstanding_balance_inr: f64,
    pub currency_loan: ::std::string::String,
    pub rate_of_int: f64,
    pub total_tenure: i64,
    pub completed_tenure: i64,
    pub customer_id: ::std::string::String,
    pub emi_amount: f64,
    pub int_day_count: i64,
    pub data_process_date: i64,
    pub report_date: i64,
    pub gl_code: ::std::string::String,
    pub frequency: f64,
    pub installment_frequency: ::std::string::String,
    pub npa_classification: ::std::string::String,
    pub last_repricing_date: i64,
    pub npa_amount: f64,
    pub cust_hlth_code: ::std::string::String,
    pub cust_npa_class: ::std::string::String,
    pub final_npa_class: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string product_id = 1;


    pub fn get_product_id(&self) -> &str {
        &self.product_id
    }
    pub fn clear_product_id(&mut self) {
        self.product_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_id(&mut self, v: ::std::string::String) {
        self.product_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_id(&mut self) -> &mut ::std::string::String {
        &mut self.product_id
    }

    // Take field
    pub fn take_product_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_id, ::std::string::String::new())
    }

    // string account_number = 2;


    pub fn get_account_number(&self) -> &str {
        &self.account_number
    }
    pub fn clear_account_number(&mut self) {
        self.account_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_number(&mut self, v: ::std::string::String) {
        self.account_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_number(&mut self) -> &mut ::std::string::String {
        &mut self.account_number
    }

    // Take field
    pub fn take_account_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_number, ::std::string::String::new())
    }

    // int64 bill_due_day = 3;


    pub fn get_bill_due_day(&self) -> i64 {
        self.bill_due_day
    }
    pub fn clear_bill_due_day(&mut self) {
        self.bill_due_day = 0;
    }

    // Param is passed by value, moved
    pub fn set_bill_due_day(&mut self, v: i64) {
        self.bill_due_day = v;
    }

    // double outstanding_balance_inr = 4;


    pub fn get_outstanding_balance_inr(&self) -> f64 {
        self.outstanding_balance_inr
    }
    pub fn clear_outstanding_balance_inr(&mut self) {
        self.outstanding_balance_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_outstanding_balance_inr(&mut self, v: f64) {
        self.outstanding_balance_inr = v;
    }

    // string currency_loan = 5;


    pub fn get_currency_loan(&self) -> &str {
        &self.currency_loan
    }
    pub fn clear_currency_loan(&mut self) {
        self.currency_loan.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency_loan(&mut self, v: ::std::string::String) {
        self.currency_loan = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency_loan(&mut self) -> &mut ::std::string::String {
        &mut self.currency_loan
    }

    // Take field
    pub fn take_currency_loan(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency_loan, ::std::string::String::new())
    }

    // double rate_of_int = 6;


    pub fn get_rate_of_int(&self) -> f64 {
        self.rate_of_int
    }
    pub fn clear_rate_of_int(&mut self) {
        self.rate_of_int = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rate_of_int(&mut self, v: f64) {
        self.rate_of_int = v;
    }

    // int64 total_tenure = 7;


    pub fn get_total_tenure(&self) -> i64 {
        self.total_tenure
    }
    pub fn clear_total_tenure(&mut self) {
        self.total_tenure = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_tenure(&mut self, v: i64) {
        self.total_tenure = v;
    }

    // int64 completed_tenure = 8;


    pub fn get_completed_tenure(&self) -> i64 {
        self.completed_tenure
    }
    pub fn clear_completed_tenure(&mut self) {
        self.completed_tenure = 0;
    }

    // Param is passed by value, moved
    pub fn set_completed_tenure(&mut self, v: i64) {
        self.completed_tenure = v;
    }

    // string customer_id = 9;


    pub fn get_customer_id(&self) -> &str {
        &self.customer_id
    }
    pub fn clear_customer_id(&mut self) {
        self.customer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_id(&mut self, v: ::std::string::String) {
        self.customer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_id(&mut self) -> &mut ::std::string::String {
        &mut self.customer_id
    }

    // Take field
    pub fn take_customer_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_id, ::std::string::String::new())
    }

    // double emi_amount = 10;


    pub fn get_emi_amount(&self) -> f64 {
        self.emi_amount
    }
    pub fn clear_emi_amount(&mut self) {
        self.emi_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_emi_amount(&mut self, v: f64) {
        self.emi_amount = v;
    }

    // int64 int_day_count = 11;


    pub fn get_int_day_count(&self) -> i64 {
        self.int_day_count
    }
    pub fn clear_int_day_count(&mut self) {
        self.int_day_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_day_count(&mut self, v: i64) {
        self.int_day_count = v;
    }

    // int64 data_process_date = 12;


    pub fn get_data_process_date(&self) -> i64 {
        self.data_process_date
    }
    pub fn clear_data_process_date(&mut self) {
        self.data_process_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_data_process_date(&mut self, v: i64) {
        self.data_process_date = v;
    }

    // int64 report_date = 13;


    pub fn get_report_date(&self) -> i64 {
        self.report_date
    }
    pub fn clear_report_date(&mut self) {
        self.report_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_report_date(&mut self, v: i64) {
        self.report_date = v;
    }

    // string gl_code = 14;


    pub fn get_gl_code(&self) -> &str {
        &self.gl_code
    }
    pub fn clear_gl_code(&mut self) {
        self.gl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_code(&mut self, v: ::std::string::String) {
        self.gl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_code
    }

    // Take field
    pub fn take_gl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_code, ::std::string::String::new())
    }

    // double frequency = 15;


    pub fn get_frequency(&self) -> f64 {
        self.frequency
    }
    pub fn clear_frequency(&mut self) {
        self.frequency = 0.;
    }

    // Param is passed by value, moved
    pub fn set_frequency(&mut self, v: f64) {
        self.frequency = v;
    }

    // string installment_frequency = 16;


    pub fn get_installment_frequency(&self) -> &str {
        &self.installment_frequency
    }
    pub fn clear_installment_frequency(&mut self) {
        self.installment_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_installment_frequency(&mut self, v: ::std::string::String) {
        self.installment_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_installment_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.installment_frequency
    }

    // Take field
    pub fn take_installment_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.installment_frequency, ::std::string::String::new())
    }

    // string npa_classification = 17;


    pub fn get_npa_classification(&self) -> &str {
        &self.npa_classification
    }
    pub fn clear_npa_classification(&mut self) {
        self.npa_classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_classification(&mut self, v: ::std::string::String) {
        self.npa_classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_classification(&mut self) -> &mut ::std::string::String {
        &mut self.npa_classification
    }

    // Take field
    pub fn take_npa_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_classification, ::std::string::String::new())
    }

    // int64 last_repricing_date = 18;


    pub fn get_last_repricing_date(&self) -> i64 {
        self.last_repricing_date
    }
    pub fn clear_last_repricing_date(&mut self) {
        self.last_repricing_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_repricing_date(&mut self, v: i64) {
        self.last_repricing_date = v;
    }

    // double npa_amount = 19;


    pub fn get_npa_amount(&self) -> f64 {
        self.npa_amount
    }
    pub fn clear_npa_amount(&mut self) {
        self.npa_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_npa_amount(&mut self, v: f64) {
        self.npa_amount = v;
    }

    // string cust_hlth_code = 20;


    pub fn get_cust_hlth_code(&self) -> &str {
        &self.cust_hlth_code
    }
    pub fn clear_cust_hlth_code(&mut self) {
        self.cust_hlth_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_hlth_code(&mut self, v: ::std::string::String) {
        self.cust_hlth_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_hlth_code(&mut self) -> &mut ::std::string::String {
        &mut self.cust_hlth_code
    }

    // Take field
    pub fn take_cust_hlth_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_hlth_code, ::std::string::String::new())
    }

    // string cust_npa_class = 21;


    pub fn get_cust_npa_class(&self) -> &str {
        &self.cust_npa_class
    }
    pub fn clear_cust_npa_class(&mut self) {
        self.cust_npa_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_npa_class(&mut self, v: ::std::string::String) {
        self.cust_npa_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_npa_class(&mut self) -> &mut ::std::string::String {
        &mut self.cust_npa_class
    }

    // Take field
    pub fn take_cust_npa_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_npa_class, ::std::string::String::new())
    }

    // string final_npa_class = 22;


    pub fn get_final_npa_class(&self) -> &str {
        &self.final_npa_class
    }
    pub fn clear_final_npa_class(&mut self) {
        self.final_npa_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_final_npa_class(&mut self, v: ::std::string::String) {
        self.final_npa_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_final_npa_class(&mut self) -> &mut ::std::string::String {
        &mut self.final_npa_class
    }

    // Take field
    pub fn take_final_npa_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.final_npa_class, ::std::string::String::new())
    }

    // repeated .Cashflow cashflows = 23;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_number)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.bill_due_day = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.outstanding_balance_inr = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency_loan)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rate_of_int = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.total_tenure = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.completed_tenure = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_id)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.emi_amount = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int_day_count = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.data_process_date = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.report_date = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_code)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.frequency = tmp;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.installment_frequency)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa_classification)?;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_repricing_date = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.npa_amount = tmp;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_hlth_code)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_npa_class)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.final_npa_class)?;
                },
                23 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.product_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.product_id);
        }
        if !self.account_number.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.account_number);
        }
        if self.bill_due_day != 0 {
            my_size += ::protobuf::rt::value_size(3, self.bill_due_day, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.outstanding_balance_inr != 0. {
            my_size += 9;
        }
        if !self.currency_loan.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.currency_loan);
        }
        if self.rate_of_int != 0. {
            my_size += 9;
        }
        if self.total_tenure != 0 {
            my_size += ::protobuf::rt::value_size(7, self.total_tenure, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.completed_tenure != 0 {
            my_size += ::protobuf::rt::value_size(8, self.completed_tenure, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.customer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.customer_id);
        }
        if self.emi_amount != 0. {
            my_size += 9;
        }
        if self.int_day_count != 0 {
            my_size += ::protobuf::rt::value_size(11, self.int_day_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.data_process_date != 0 {
            my_size += ::protobuf::rt::value_size(12, self.data_process_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.report_date != 0 {
            my_size += ::protobuf::rt::value_size(13, self.report_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.gl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.gl_code);
        }
        if self.frequency != 0. {
            my_size += 9;
        }
        if !self.installment_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.installment_frequency);
        }
        if !self.npa_classification.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.npa_classification);
        }
        if self.last_repricing_date != 0 {
            my_size += ::protobuf::rt::value_size(18, self.last_repricing_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.npa_amount != 0. {
            my_size += 10;
        }
        if !self.cust_hlth_code.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.cust_hlth_code);
        }
        if !self.cust_npa_class.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.cust_npa_class);
        }
        if !self.final_npa_class.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.final_npa_class);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.product_id.is_empty() {
            os.write_string(1, &self.product_id)?;
        }
        if !self.account_number.is_empty() {
            os.write_string(2, &self.account_number)?;
        }
        if self.bill_due_day != 0 {
            os.write_int64(3, self.bill_due_day)?;
        }
        if self.outstanding_balance_inr != 0. {
            os.write_double(4, self.outstanding_balance_inr)?;
        }
        if !self.currency_loan.is_empty() {
            os.write_string(5, &self.currency_loan)?;
        }
        if self.rate_of_int != 0. {
            os.write_double(6, self.rate_of_int)?;
        }
        if self.total_tenure != 0 {
            os.write_int64(7, self.total_tenure)?;
        }
        if self.completed_tenure != 0 {
            os.write_int64(8, self.completed_tenure)?;
        }
        if !self.customer_id.is_empty() {
            os.write_string(9, &self.customer_id)?;
        }
        if self.emi_amount != 0. {
            os.write_double(10, self.emi_amount)?;
        }
        if self.int_day_count != 0 {
            os.write_int64(11, self.int_day_count)?;
        }
        if self.data_process_date != 0 {
            os.write_int64(12, self.data_process_date)?;
        }
        if self.report_date != 0 {
            os.write_int64(13, self.report_date)?;
        }
        if !self.gl_code.is_empty() {
            os.write_string(14, &self.gl_code)?;
        }
        if self.frequency != 0. {
            os.write_double(15, self.frequency)?;
        }
        if !self.installment_frequency.is_empty() {
            os.write_string(16, &self.installment_frequency)?;
        }
        if !self.npa_classification.is_empty() {
            os.write_string(17, &self.npa_classification)?;
        }
        if self.last_repricing_date != 0 {
            os.write_int64(18, self.last_repricing_date)?;
        }
        if self.npa_amount != 0. {
            os.write_double(19, self.npa_amount)?;
        }
        if !self.cust_hlth_code.is_empty() {
            os.write_string(20, &self.cust_hlth_code)?;
        }
        if !self.cust_npa_class.is_empty() {
            os.write_string(21, &self.cust_npa_class)?;
        }
        if !self.final_npa_class.is_empty() {
            os.write_string(22, &self.final_npa_class)?;
        }
        for v in &self.cashflows {
            os.write_tag(23, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "product_id",
                |m: &AccountWithCashflows| { &m.product_id },
                |m: &mut AccountWithCashflows| { &mut m.product_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_number",
                |m: &AccountWithCashflows| { &m.account_number },
                |m: &mut AccountWithCashflows| { &mut m.account_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "bill_due_day",
                |m: &AccountWithCashflows| { &m.bill_due_day },
                |m: &mut AccountWithCashflows| { &mut m.bill_due_day },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "outstanding_balance_inr",
                |m: &AccountWithCashflows| { &m.outstanding_balance_inr },
                |m: &mut AccountWithCashflows| { &mut m.outstanding_balance_inr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency_loan",
                |m: &AccountWithCashflows| { &m.currency_loan },
                |m: &mut AccountWithCashflows| { &mut m.currency_loan },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "rate_of_int",
                |m: &AccountWithCashflows| { &m.rate_of_int },
                |m: &mut AccountWithCashflows| { &mut m.rate_of_int },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "total_tenure",
                |m: &AccountWithCashflows| { &m.total_tenure },
                |m: &mut AccountWithCashflows| { &mut m.total_tenure },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "completed_tenure",
                |m: &AccountWithCashflows| { &m.completed_tenure },
                |m: &mut AccountWithCashflows| { &mut m.completed_tenure },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_id",
                |m: &AccountWithCashflows| { &m.customer_id },
                |m: &mut AccountWithCashflows| { &mut m.customer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "emi_amount",
                |m: &AccountWithCashflows| { &m.emi_amount },
                |m: &mut AccountWithCashflows| { &mut m.emi_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "int_day_count",
                |m: &AccountWithCashflows| { &m.int_day_count },
                |m: &mut AccountWithCashflows| { &mut m.int_day_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "data_process_date",
                |m: &AccountWithCashflows| { &m.data_process_date },
                |m: &mut AccountWithCashflows| { &mut m.data_process_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "report_date",
                |m: &AccountWithCashflows| { &m.report_date },
                |m: &mut AccountWithCashflows| { &mut m.report_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_code",
                |m: &AccountWithCashflows| { &m.gl_code },
                |m: &mut AccountWithCashflows| { &mut m.gl_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "frequency",
                |m: &AccountWithCashflows| { &m.frequency },
                |m: &mut AccountWithCashflows| { &mut m.frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "installment_frequency",
                |m: &AccountWithCashflows| { &m.installment_frequency },
                |m: &mut AccountWithCashflows| { &mut m.installment_frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "npa_classification",
                |m: &AccountWithCashflows| { &m.npa_classification },
                |m: &mut AccountWithCashflows| { &mut m.npa_classification },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_repricing_date",
                |m: &AccountWithCashflows| { &m.last_repricing_date },
                |m: &mut AccountWithCashflows| { &mut m.last_repricing_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "npa_amount",
                |m: &AccountWithCashflows| { &m.npa_amount },
                |m: &mut AccountWithCashflows| { &mut m.npa_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_hlth_code",
                |m: &AccountWithCashflows| { &m.cust_hlth_code },
                |m: &mut AccountWithCashflows| { &mut m.cust_hlth_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_npa_class",
                |m: &AccountWithCashflows| { &m.cust_npa_class },
                |m: &mut AccountWithCashflows| { &mut m.cust_npa_class },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "final_npa_class",
                |m: &AccountWithCashflows| { &m.final_npa_class },
                |m: &mut AccountWithCashflows| { &mut m.final_npa_class },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.product_id.clear();
        self.account_number.clear();
        self.bill_due_day = 0;
        self.outstanding_balance_inr = 0.;
        self.currency_loan.clear();
        self.rate_of_int = 0.;
        self.total_tenure = 0;
        self.completed_tenure = 0;
        self.customer_id.clear();
        self.emi_amount = 0.;
        self.int_day_count = 0;
        self.data_process_date = 0;
        self.report_date = 0;
        self.gl_code.clear();
        self.frequency = 0.;
        self.installment_frequency.clear();
        self.npa_classification.clear();
        self.last_repricing_date = 0;
        self.npa_amount = 0.;
        self.cust_hlth_code.clear();
        self.cust_npa_class.clear();
        self.final_npa_class.clear();
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ematurity.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\
    \x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prin\
    Amt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\x81\x07\n\x14Accou\
    ntWithCashflows\x12\x1d\n\nproduct_id\x18\x01\x20\x01(\tR\tproductId\x12\
    %\n\x0eaccount_number\x18\x02\x20\x01(\tR\raccountNumber\x12\x20\n\x0cbi\
    ll_due_day\x18\x03\x20\x01(\x03R\nbillDueDay\x126\n\x17outstanding_balan\
    ce_inr\x18\x04\x20\x01(\x01R\x15outstandingBalanceInr\x12#\n\rcurrency_l\
    oan\x18\x05\x20\x01(\tR\x0ccurrencyLoan\x12\x1e\n\x0brate_of_int\x18\x06\
    \x20\x01(\x01R\trateOfInt\x12!\n\x0ctotal_tenure\x18\x07\x20\x01(\x03R\
    \x0btotalTenure\x12)\n\x10completed_tenure\x18\x08\x20\x01(\x03R\x0fcomp\
    letedTenure\x12\x1f\n\x0bcustomer_id\x18\t\x20\x01(\tR\ncustomerId\x12\
    \x1d\n\nemi_amount\x18\n\x20\x01(\x01R\temiAmount\x12\"\n\rint_day_count\
    \x18\x0b\x20\x01(\x03R\x0bintDayCount\x12*\n\x11data_process_date\x18\
    \x0c\x20\x01(\x03R\x0fdataProcessDate\x12\x1f\n\x0breport_date\x18\r\x20\
    \x01(\x03R\nreportDate\x12\x17\n\x07gl_code\x18\x0e\x20\x01(\tR\x06glCod\
    e\x12\x1c\n\tfrequency\x18\x0f\x20\x01(\x01R\tfrequency\x123\n\x15instal\
    lment_frequency\x18\x10\x20\x01(\tR\x14installmentFrequency\x12-\n\x12np\
    a_classification\x18\x11\x20\x01(\tR\x11npaClassification\x12.\n\x13last\
    _repricing_date\x18\x12\x20\x01(\x03R\x11lastRepricingDate\x12\x1d\n\nnp\
    a_amount\x18\x13\x20\x01(\x01R\tnpaAmount\x12$\n\x0ecust_hlth_code\x18\
    \x14\x20\x01(\tR\x0ccustHlthCode\x12$\n\x0ecust_npa_class\x18\x15\x20\
    \x01(\tR\x0ccustNpaClass\x12&\n\x0ffinal_npa_class\x18\x16\x20\x01(\tR\r\
    finalNpaClass\x12'\n\tcashflows\x18\x17\x20\x03(\x0b2\t.CashflowR\tcashf\
    lowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
