// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // double principal_amount = 2;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_amount",
                    |m: &Cashflow| { &m.interest_amount },
                    |m: &mut Cashflow| { &mut m.interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal_amount",
                    |m: &Cashflow| { &m.principal_amount },
                    |m: &mut Cashflow| { &mut m.principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_interest_amount();
        self.clear_principal_amount();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub br_no: ::std::string::String,
    pub origin_branch: ::std::string::String,
    pub lac_no: ::std::string::String,
    pub laf_no: ::std::string::String,
    pub borr_name: ::std::string::String,
    pub disb_amt: ::std::string::String,
    pub sanc_amt: ::std::string::String,
    pub emi: ::std::string::String,
    pub roi: ::std::string::String,
    pub clps_loan_type: ::std::string::String,
    pub first_disb_date: i64,
    pub last_disb_date: i64,
    pub commitment_amt: f64,
    pub amt_of_disb: ::std::string::String,
    pub approval_date: i64,
    pub currency: ::std::string::String,
    pub treasury_glcode: ::std::string::String,
    pub app1: ::std::string::String,
    pub app2: ::std::string::String,
    pub app3: ::std::string::String,
    pub app4: ::std::string::String,
    pub app5: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string br_no = 1;

    pub fn clear_br_no(&mut self) {
        self.br_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_br_no(&mut self, v: ::std::string::String) {
        self.br_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_br_no(&mut self) -> &mut ::std::string::String {
        &mut self.br_no
    }

    // Take field
    pub fn take_br_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.br_no, ::std::string::String::new())
    }

    pub fn get_br_no(&self) -> &str {
        &self.br_no
    }

    // string origin_branch = 2;

    pub fn clear_origin_branch(&mut self) {
        self.origin_branch.clear();
    }

    // Param is passed by value, moved
    pub fn set_origin_branch(&mut self, v: ::std::string::String) {
        self.origin_branch = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_origin_branch(&mut self) -> &mut ::std::string::String {
        &mut self.origin_branch
    }

    // Take field
    pub fn take_origin_branch(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.origin_branch, ::std::string::String::new())
    }

    pub fn get_origin_branch(&self) -> &str {
        &self.origin_branch
    }

    // string lac_no = 3;

    pub fn clear_lac_no(&mut self) {
        self.lac_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_lac_no(&mut self, v: ::std::string::String) {
        self.lac_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lac_no(&mut self) -> &mut ::std::string::String {
        &mut self.lac_no
    }

    // Take field
    pub fn take_lac_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lac_no, ::std::string::String::new())
    }

    pub fn get_lac_no(&self) -> &str {
        &self.lac_no
    }

    // string laf_no = 4;

    pub fn clear_laf_no(&mut self) {
        self.laf_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_laf_no(&mut self, v: ::std::string::String) {
        self.laf_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_laf_no(&mut self) -> &mut ::std::string::String {
        &mut self.laf_no
    }

    // Take field
    pub fn take_laf_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.laf_no, ::std::string::String::new())
    }

    pub fn get_laf_no(&self) -> &str {
        &self.laf_no
    }

    // string borr_name = 5;

    pub fn clear_borr_name(&mut self) {
        self.borr_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_borr_name(&mut self, v: ::std::string::String) {
        self.borr_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_borr_name(&mut self) -> &mut ::std::string::String {
        &mut self.borr_name
    }

    // Take field
    pub fn take_borr_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.borr_name, ::std::string::String::new())
    }

    pub fn get_borr_name(&self) -> &str {
        &self.borr_name
    }

    // string disb_amt = 6;

    pub fn clear_disb_amt(&mut self) {
        self.disb_amt.clear();
    }

    // Param is passed by value, moved
    pub fn set_disb_amt(&mut self, v: ::std::string::String) {
        self.disb_amt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_disb_amt(&mut self) -> &mut ::std::string::String {
        &mut self.disb_amt
    }

    // Take field
    pub fn take_disb_amt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.disb_amt, ::std::string::String::new())
    }

    pub fn get_disb_amt(&self) -> &str {
        &self.disb_amt
    }

    // string sanc_amt = 7;

    pub fn clear_sanc_amt(&mut self) {
        self.sanc_amt.clear();
    }

    // Param is passed by value, moved
    pub fn set_sanc_amt(&mut self, v: ::std::string::String) {
        self.sanc_amt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sanc_amt(&mut self) -> &mut ::std::string::String {
        &mut self.sanc_amt
    }

    // Take field
    pub fn take_sanc_amt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sanc_amt, ::std::string::String::new())
    }

    pub fn get_sanc_amt(&self) -> &str {
        &self.sanc_amt
    }

    // string emi = 8;

    pub fn clear_emi(&mut self) {
        self.emi.clear();
    }

    // Param is passed by value, moved
    pub fn set_emi(&mut self, v: ::std::string::String) {
        self.emi = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_emi(&mut self) -> &mut ::std::string::String {
        &mut self.emi
    }

    // Take field
    pub fn take_emi(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.emi, ::std::string::String::new())
    }

    pub fn get_emi(&self) -> &str {
        &self.emi
    }

    // string roi = 9;

    pub fn clear_roi(&mut self) {
        self.roi.clear();
    }

    // Param is passed by value, moved
    pub fn set_roi(&mut self, v: ::std::string::String) {
        self.roi = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_roi(&mut self) -> &mut ::std::string::String {
        &mut self.roi
    }

    // Take field
    pub fn take_roi(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.roi, ::std::string::String::new())
    }

    pub fn get_roi(&self) -> &str {
        &self.roi
    }

    // string clps_loan_type = 10;

    pub fn clear_clps_loan_type(&mut self) {
        self.clps_loan_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_clps_loan_type(&mut self, v: ::std::string::String) {
        self.clps_loan_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clps_loan_type(&mut self) -> &mut ::std::string::String {
        &mut self.clps_loan_type
    }

    // Take field
    pub fn take_clps_loan_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clps_loan_type, ::std::string::String::new())
    }

    pub fn get_clps_loan_type(&self) -> &str {
        &self.clps_loan_type
    }

    // int64 first_disb_date = 11;

    pub fn clear_first_disb_date(&mut self) {
        self.first_disb_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_first_disb_date(&mut self, v: i64) {
        self.first_disb_date = v;
    }

    pub fn get_first_disb_date(&self) -> i64 {
        self.first_disb_date
    }

    // int64 last_disb_date = 12;

    pub fn clear_last_disb_date(&mut self) {
        self.last_disb_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_disb_date(&mut self, v: i64) {
        self.last_disb_date = v;
    }

    pub fn get_last_disb_date(&self) -> i64 {
        self.last_disb_date
    }

    // double commitment_amt = 13;

    pub fn clear_commitment_amt(&mut self) {
        self.commitment_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_commitment_amt(&mut self, v: f64) {
        self.commitment_amt = v;
    }

    pub fn get_commitment_amt(&self) -> f64 {
        self.commitment_amt
    }

    // string amt_of_disb = 14;

    pub fn clear_amt_of_disb(&mut self) {
        self.amt_of_disb.clear();
    }

    // Param is passed by value, moved
    pub fn set_amt_of_disb(&mut self, v: ::std::string::String) {
        self.amt_of_disb = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amt_of_disb(&mut self) -> &mut ::std::string::String {
        &mut self.amt_of_disb
    }

    // Take field
    pub fn take_amt_of_disb(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amt_of_disb, ::std::string::String::new())
    }

    pub fn get_amt_of_disb(&self) -> &str {
        &self.amt_of_disb
    }

    // int64 approval_date = 15;

    pub fn clear_approval_date(&mut self) {
        self.approval_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_approval_date(&mut self, v: i64) {
        self.approval_date = v;
    }

    pub fn get_approval_date(&self) -> i64 {
        self.approval_date
    }

    // string currency = 16;

    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    pub fn get_currency(&self) -> &str {
        &self.currency
    }

    // string treasury_glcode = 17;

    pub fn clear_treasury_glcode(&mut self) {
        self.treasury_glcode.clear();
    }

    // Param is passed by value, moved
    pub fn set_treasury_glcode(&mut self, v: ::std::string::String) {
        self.treasury_glcode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_treasury_glcode(&mut self) -> &mut ::std::string::String {
        &mut self.treasury_glcode
    }

    // Take field
    pub fn take_treasury_glcode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.treasury_glcode, ::std::string::String::new())
    }

    pub fn get_treasury_glcode(&self) -> &str {
        &self.treasury_glcode
    }

    // string app1 = 18;

    pub fn clear_app1(&mut self) {
        self.app1.clear();
    }

    // Param is passed by value, moved
    pub fn set_app1(&mut self, v: ::std::string::String) {
        self.app1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app1(&mut self) -> &mut ::std::string::String {
        &mut self.app1
    }

    // Take field
    pub fn take_app1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app1, ::std::string::String::new())
    }

    pub fn get_app1(&self) -> &str {
        &self.app1
    }

    // string app2 = 19;

    pub fn clear_app2(&mut self) {
        self.app2.clear();
    }

    // Param is passed by value, moved
    pub fn set_app2(&mut self, v: ::std::string::String) {
        self.app2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app2(&mut self) -> &mut ::std::string::String {
        &mut self.app2
    }

    // Take field
    pub fn take_app2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app2, ::std::string::String::new())
    }

    pub fn get_app2(&self) -> &str {
        &self.app2
    }

    // string app3 = 20;

    pub fn clear_app3(&mut self) {
        self.app3.clear();
    }

    // Param is passed by value, moved
    pub fn set_app3(&mut self, v: ::std::string::String) {
        self.app3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app3(&mut self) -> &mut ::std::string::String {
        &mut self.app3
    }

    // Take field
    pub fn take_app3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app3, ::std::string::String::new())
    }

    pub fn get_app3(&self) -> &str {
        &self.app3
    }

    // string app4 = 21;

    pub fn clear_app4(&mut self) {
        self.app4.clear();
    }

    // Param is passed by value, moved
    pub fn set_app4(&mut self, v: ::std::string::String) {
        self.app4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app4(&mut self) -> &mut ::std::string::String {
        &mut self.app4
    }

    // Take field
    pub fn take_app4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app4, ::std::string::String::new())
    }

    pub fn get_app4(&self) -> &str {
        &self.app4
    }

    // string app5 = 22;

    pub fn clear_app5(&mut self) {
        self.app5.clear();
    }

    // Param is passed by value, moved
    pub fn set_app5(&mut self, v: ::std::string::String) {
        self.app5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app5(&mut self) -> &mut ::std::string::String {
        &mut self.app5
    }

    // Take field
    pub fn take_app5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app5, ::std::string::String::new())
    }

    pub fn get_app5(&self) -> &str {
        &self.app5
    }

    // repeated .Cashflow cashflows = 23;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.br_no)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.origin_branch)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lac_no)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.laf_no)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.borr_name)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.disb_amt)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sanc_amt)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.emi)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.roi)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clps_loan_type)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.first_disb_date = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_disb_date = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.commitment_amt = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amt_of_disb)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.approval_date = tmp;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.treasury_glcode)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app1)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app2)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app3)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app4)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app5)?;
                },
                23 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.br_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.br_no);
        }
        if !self.origin_branch.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.origin_branch);
        }
        if !self.lac_no.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.lac_no);
        }
        if !self.laf_no.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.laf_no);
        }
        if !self.borr_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.borr_name);
        }
        if !self.disb_amt.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.disb_amt);
        }
        if !self.sanc_amt.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.sanc_amt);
        }
        if !self.emi.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.emi);
        }
        if !self.roi.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.roi);
        }
        if !self.clps_loan_type.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.clps_loan_type);
        }
        if self.first_disb_date != 0 {
            my_size += ::protobuf::rt::value_size(11, self.first_disb_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_disb_date != 0 {
            my_size += ::protobuf::rt::value_size(12, self.last_disb_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.commitment_amt != 0. {
            my_size += 9;
        }
        if !self.amt_of_disb.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.amt_of_disb);
        }
        if self.approval_date != 0 {
            my_size += ::protobuf::rt::value_size(15, self.approval_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.currency);
        }
        if !self.treasury_glcode.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.treasury_glcode);
        }
        if !self.app1.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.app1);
        }
        if !self.app2.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.app2);
        }
        if !self.app3.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.app3);
        }
        if !self.app4.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.app4);
        }
        if !self.app5.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.app5);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.br_no.is_empty() {
            os.write_string(1, &self.br_no)?;
        }
        if !self.origin_branch.is_empty() {
            os.write_string(2, &self.origin_branch)?;
        }
        if !self.lac_no.is_empty() {
            os.write_string(3, &self.lac_no)?;
        }
        if !self.laf_no.is_empty() {
            os.write_string(4, &self.laf_no)?;
        }
        if !self.borr_name.is_empty() {
            os.write_string(5, &self.borr_name)?;
        }
        if !self.disb_amt.is_empty() {
            os.write_string(6, &self.disb_amt)?;
        }
        if !self.sanc_amt.is_empty() {
            os.write_string(7, &self.sanc_amt)?;
        }
        if !self.emi.is_empty() {
            os.write_string(8, &self.emi)?;
        }
        if !self.roi.is_empty() {
            os.write_string(9, &self.roi)?;
        }
        if !self.clps_loan_type.is_empty() {
            os.write_string(10, &self.clps_loan_type)?;
        }
        if self.first_disb_date != 0 {
            os.write_int64(11, self.first_disb_date)?;
        }
        if self.last_disb_date != 0 {
            os.write_int64(12, self.last_disb_date)?;
        }
        if self.commitment_amt != 0. {
            os.write_double(13, self.commitment_amt)?;
        }
        if !self.amt_of_disb.is_empty() {
            os.write_string(14, &self.amt_of_disb)?;
        }
        if self.approval_date != 0 {
            os.write_int64(15, self.approval_date)?;
        }
        if !self.currency.is_empty() {
            os.write_string(16, &self.currency)?;
        }
        if !self.treasury_glcode.is_empty() {
            os.write_string(17, &self.treasury_glcode)?;
        }
        if !self.app1.is_empty() {
            os.write_string(18, &self.app1)?;
        }
        if !self.app2.is_empty() {
            os.write_string(19, &self.app2)?;
        }
        if !self.app3.is_empty() {
            os.write_string(20, &self.app3)?;
        }
        if !self.app4.is_empty() {
            os.write_string(21, &self.app4)?;
        }
        if !self.app5.is_empty() {
            os.write_string(22, &self.app5)?;
        }
        for v in &self.cashflows {
            os.write_tag(23, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "br_no",
                    |m: &AccountWithCashflows| { &m.br_no },
                    |m: &mut AccountWithCashflows| { &mut m.br_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "origin_branch",
                    |m: &AccountWithCashflows| { &m.origin_branch },
                    |m: &mut AccountWithCashflows| { &mut m.origin_branch },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "lac_no",
                    |m: &AccountWithCashflows| { &m.lac_no },
                    |m: &mut AccountWithCashflows| { &mut m.lac_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "laf_no",
                    |m: &AccountWithCashflows| { &m.laf_no },
                    |m: &mut AccountWithCashflows| { &mut m.laf_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "borr_name",
                    |m: &AccountWithCashflows| { &m.borr_name },
                    |m: &mut AccountWithCashflows| { &mut m.borr_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "disb_amt",
                    |m: &AccountWithCashflows| { &m.disb_amt },
                    |m: &mut AccountWithCashflows| { &mut m.disb_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sanc_amt",
                    |m: &AccountWithCashflows| { &m.sanc_amt },
                    |m: &mut AccountWithCashflows| { &mut m.sanc_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "emi",
                    |m: &AccountWithCashflows| { &m.emi },
                    |m: &mut AccountWithCashflows| { &mut m.emi },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "roi",
                    |m: &AccountWithCashflows| { &m.roi },
                    |m: &mut AccountWithCashflows| { &mut m.roi },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clps_loan_type",
                    |m: &AccountWithCashflows| { &m.clps_loan_type },
                    |m: &mut AccountWithCashflows| { &mut m.clps_loan_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "first_disb_date",
                    |m: &AccountWithCashflows| { &m.first_disb_date },
                    |m: &mut AccountWithCashflows| { &mut m.first_disb_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "last_disb_date",
                    |m: &AccountWithCashflows| { &m.last_disb_date },
                    |m: &mut AccountWithCashflows| { &mut m.last_disb_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "commitment_amt",
                    |m: &AccountWithCashflows| { &m.commitment_amt },
                    |m: &mut AccountWithCashflows| { &mut m.commitment_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "amt_of_disb",
                    |m: &AccountWithCashflows| { &m.amt_of_disb },
                    |m: &mut AccountWithCashflows| { &mut m.amt_of_disb },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "approval_date",
                    |m: &AccountWithCashflows| { &m.approval_date },
                    |m: &mut AccountWithCashflows| { &mut m.approval_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currency",
                    |m: &AccountWithCashflows| { &m.currency },
                    |m: &mut AccountWithCashflows| { &mut m.currency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "treasury_glcode",
                    |m: &AccountWithCashflows| { &m.treasury_glcode },
                    |m: &mut AccountWithCashflows| { &mut m.treasury_glcode },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app1",
                    |m: &AccountWithCashflows| { &m.app1 },
                    |m: &mut AccountWithCashflows| { &mut m.app1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app2",
                    |m: &AccountWithCashflows| { &m.app2 },
                    |m: &mut AccountWithCashflows| { &mut m.app2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app3",
                    |m: &AccountWithCashflows| { &m.app3 },
                    |m: &mut AccountWithCashflows| { &mut m.app3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app4",
                    |m: &AccountWithCashflows| { &m.app4 },
                    |m: &mut AccountWithCashflows| { &mut m.app4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app5",
                    |m: &AccountWithCashflows| { &m.app5 },
                    |m: &mut AccountWithCashflows| { &mut m.app5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_br_no();
        self.clear_origin_branch();
        self.clear_lac_no();
        self.clear_laf_no();
        self.clear_borr_name();
        self.clear_disb_amt();
        self.clear_sanc_amt();
        self.clear_emi();
        self.clear_roi();
        self.clear_clps_loan_type();
        self.clear_first_disb_date();
        self.clear_last_disb_date();
        self.clear_commitment_amt();
        self.clear_amt_of_disb();
        self.clear_approval_date();
        self.clear_currency();
        self.clear_treasury_glcode();
        self.clear_app1();
        self.clear_app2();
        self.clear_app3();
        self.clear_app4();
        self.clear_app5();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13proto/undrawn.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\
    \x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\
    \x20\x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03\
    R\x04date\"\xa7\x05\n\x14AccountWithCashflows\x12\x13\n\x05br_no\x18\x01\
    \x20\x01(\tR\x04brNo\x12#\n\rorigin_branch\x18\x02\x20\x01(\tR\x0corigin\
    Branch\x12\x15\n\x06lac_no\x18\x03\x20\x01(\tR\x05lacNo\x12\x15\n\x06laf\
    _no\x18\x04\x20\x01(\tR\x05lafNo\x12\x1b\n\tborr_name\x18\x05\x20\x01(\t\
    R\x08borrName\x12\x19\n\x08disb_amt\x18\x06\x20\x01(\tR\x07disbAmt\x12\
    \x19\n\x08sanc_amt\x18\x07\x20\x01(\tR\x07sancAmt\x12\x10\n\x03emi\x18\
    \x08\x20\x01(\tR\x03emi\x12\x10\n\x03roi\x18\t\x20\x01(\tR\x03roi\x12$\n\
    \x0eclps_loan_type\x18\n\x20\x01(\tR\x0cclpsLoanType\x12&\n\x0ffirst_dis\
    b_date\x18\x0b\x20\x01(\x03R\rfirstDisbDate\x12$\n\x0elast_disb_date\x18\
    \x0c\x20\x01(\x03R\x0clastDisbDate\x12%\n\x0ecommitment_amt\x18\r\x20\
    \x01(\x01R\rcommitmentAmt\x12\x1e\n\x0bamt_of_disb\x18\x0e\x20\x01(\tR\t\
    amtOfDisb\x12#\n\rapproval_date\x18\x0f\x20\x01(\x03R\x0capprovalDate\
    \x12\x1a\n\x08currency\x18\x10\x20\x01(\tR\x08currency\x12'\n\x0ftreasur\
    y_glcode\x18\x11\x20\x01(\tR\x0etreasuryGlcode\x12\x12\n\x04app1\x18\x12\
    \x20\x01(\tR\x04app1\x12\x12\n\x04app2\x18\x13\x20\x01(\tR\x04app2\x12\
    \x12\n\x04app3\x18\x14\x20\x01(\tR\x04app3\x12\x12\n\x04app4\x18\x15\x20\
    \x01(\tR\x04app4\x12\x12\n\x04app5\x18\x16\x20\x01(\tR\x04app5\x12'\n\tc\
    ashflows\x18\x17\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
