// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `csb_bills.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub bill_id: ::std::string::String,
    pub client_id: ::std::string::String,
    pub clients_name: ::std::string::String,
    pub lbm_gl: ::std::string::String,
    pub prod_cd: ::std::string::String,
    pub bal: f64,
    pub curr: ::std::string::String,
    pub bal_lcy: f64,
    pub open_dt: i64,
    pub mat_dt: i64,
    pub int_type: ::std::string::String,
    pub int_rt: f64,
    pub next_rep_dt: i64,
    pub last_rep_dt: i64,
    pub rep_freq: ::std::string::String,
    pub benchmark: ::std::string::String,
    pub cust_class: ::std::string::String,
    pub npa_class: ::std::string::String,
    pub ason: i64,
    pub client_type: ::std::string::String,
    pub clients_name1: ::std::string::String,
    pub clients_bsr_type_flg: ::std::string::String,
    pub clients_busdivn_code: ::std::string::String,
    pub clients_const_code: ::std::string::String,
    pub clients_pan_gir_num: ::std::string::String,
    pub clients_risk_categorization: ::std::string::String,
    pub clients_risk_cntry: ::std::string::String,
    pub clients_segment_code: ::std::string::String,
    pub corpcl_orgn_qualifier: ::std::string::String,
    pub corpcl_indus_code: ::std::string::String,
    pub corpcl_nature_of_bus1: ::std::string::String,
    pub corpcl_nature_of_bus2: ::std::string::String,
    pub corpcl_nature_of_bus3: ::std::string::String,
    pub corpcl_central_state_flg: ::std::string::String,
    pub corpcl_public_sector_flg: ::std::string::String,
    pub corpcl_primary_dlr_flg: ::std::string::String,
    pub corpcl_multilateral_bank: ::std::string::String,
    pub corpcl_connp_inv_num: ::std::string::String,
    pub corpcl_bc_gross_turnover: f64,
    pub w4b_cd: ::std::string::String,
    pub balm_llg: ::std::string::String,
    pub care_llg: ::std::string::String,
    pub ba_llg: ::std::string::String,
    pub asset_code: ::std::string::String,
    pub npa_dt: i64,
    pub account_balance: f64,
    pub pwo: f64,
    pub written_off_dt: i64,
    pub ho_balance: f64,
    pub npa_provision: f64,
    pub ho_provision: f64,
    pub suspencebalance: f64,
    pub suspence_writeoff: f64,
    pub ho_suspence: f64,
    pub claim: f64,
    pub primary: f64,
    pub collateral: f64,
    pub total_security: f64,
    pub primary_valuation_dt: i64,
    pub collateral_valuation_dt: i64,
    pub gold_deficit: f64,
    pub fraud: f64,
    pub wilful_default: f64,
    pub subsidy: f64,
    pub priority: ::std::string::String,
    pub priority_type: ::std::string::String,
    pub main_sector: ::std::string::String,
    pub sub_sector: ::std::string::String,
    pub activity: ::std::string::String,
    pub industry: ::std::string::String,
    pub categoryofborrower: ::std::string::String,
    pub org_gl_head: ::std::string::String,
    pub npa_amt: f64,
    pub sanc_dt: i64,
    pub occp_cd: ::std::string::String,
    pub sens_sec: ::std::string::String,
    pub prior_subtype: ::std::string::String,
    pub restruct_flag: ::std::string::String,
    pub restruct_dt: i64,
    pub mor_prd: ::std::string::String,
    pub rating: ::std::string::String,
    pub consitin: ::std::string::String,
    pub pan: ::std::string::String,
    pub limit_amt: f64,
    pub gross_adv: f64,
    pub exp_amt: f64,
    pub unvail_amt: f64,
    pub gold_gram: f64,
    pub fund_flag: ::std::string::String,
    pub ltv_value: f64,
    pub pt_i64_1: i64,
    pub pt_i64_2: i64,
    pub pt_i64_3: i64,
    pub pt_i64_4: i64,
    pub pt_i64_5: i64,
    pub pt_f64_1: f64,
    pub pt_f64_2: f64,
    pub pt_f64_3: f64,
    pub pt_f64_4: f64,
    pub pt_f64_5: f64,
    pub clients_group_code: ::std::string::String,
    pub class1: ::std::string::String,
    pub class2: ::std::string::String,
    pub class3: ::std::string::String,
    pub actual_cust_care_value: ::std::string::String,
    pub actual_acc_care_value: ::std::string::String,
    pub int_benchmark: ::std::string::String,
    pub bank_name: ::std::string::String,
    pub cet: ::std::string::String,
    pub tot_prin_amt: f64,
    pub tot_int_amt: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string bill_id = 1;


    pub fn get_bill_id(&self) -> &str {
        &self.bill_id
    }
    pub fn clear_bill_id(&mut self) {
        self.bill_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_bill_id(&mut self, v: ::std::string::String) {
        self.bill_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bill_id(&mut self) -> &mut ::std::string::String {
        &mut self.bill_id
    }

    // Take field
    pub fn take_bill_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bill_id, ::std::string::String::new())
    }

    // string client_id = 2;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // string clients_name = 3;


    pub fn get_clients_name(&self) -> &str {
        &self.clients_name
    }
    pub fn clear_clients_name(&mut self) {
        self.clients_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_name(&mut self, v: ::std::string::String) {
        self.clients_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_name(&mut self) -> &mut ::std::string::String {
        &mut self.clients_name
    }

    // Take field
    pub fn take_clients_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_name, ::std::string::String::new())
    }

    // string lbm_gl = 4;


    pub fn get_lbm_gl(&self) -> &str {
        &self.lbm_gl
    }
    pub fn clear_lbm_gl(&mut self) {
        self.lbm_gl.clear();
    }

    // Param is passed by value, moved
    pub fn set_lbm_gl(&mut self, v: ::std::string::String) {
        self.lbm_gl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lbm_gl(&mut self) -> &mut ::std::string::String {
        &mut self.lbm_gl
    }

    // Take field
    pub fn take_lbm_gl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lbm_gl, ::std::string::String::new())
    }

    // string prod_cd = 5;


    pub fn get_prod_cd(&self) -> &str {
        &self.prod_cd
    }
    pub fn clear_prod_cd(&mut self) {
        self.prod_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_cd(&mut self, v: ::std::string::String) {
        self.prod_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_cd(&mut self) -> &mut ::std::string::String {
        &mut self.prod_cd
    }

    // Take field
    pub fn take_prod_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_cd, ::std::string::String::new())
    }

    // double bal = 6;


    pub fn get_bal(&self) -> f64 {
        self.bal
    }
    pub fn clear_bal(&mut self) {
        self.bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bal(&mut self, v: f64) {
        self.bal = v;
    }

    // string curr = 7;


    pub fn get_curr(&self) -> &str {
        &self.curr
    }
    pub fn clear_curr(&mut self) {
        self.curr.clear();
    }

    // Param is passed by value, moved
    pub fn set_curr(&mut self, v: ::std::string::String) {
        self.curr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_curr(&mut self) -> &mut ::std::string::String {
        &mut self.curr
    }

    // Take field
    pub fn take_curr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.curr, ::std::string::String::new())
    }

    // double bal_lcy = 8;


    pub fn get_bal_lcy(&self) -> f64 {
        self.bal_lcy
    }
    pub fn clear_bal_lcy(&mut self) {
        self.bal_lcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bal_lcy(&mut self, v: f64) {
        self.bal_lcy = v;
    }

    // int64 open_dt = 9;


    pub fn get_open_dt(&self) -> i64 {
        self.open_dt
    }
    pub fn clear_open_dt(&mut self) {
        self.open_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_open_dt(&mut self, v: i64) {
        self.open_dt = v;
    }

    // int64 mat_dt = 10;


    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }
    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    // string int_type = 11;


    pub fn get_int_type(&self) -> &str {
        &self.int_type
    }
    pub fn clear_int_type(&mut self) {
        self.int_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_type(&mut self, v: ::std::string::String) {
        self.int_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_type(&mut self) -> &mut ::std::string::String {
        &mut self.int_type
    }

    // Take field
    pub fn take_int_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_type, ::std::string::String::new())
    }

    // double int_rt = 12;


    pub fn get_int_rt(&self) -> f64 {
        self.int_rt
    }
    pub fn clear_int_rt(&mut self) {
        self.int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rt(&mut self, v: f64) {
        self.int_rt = v;
    }

    // int64 next_rep_dt = 13;


    pub fn get_next_rep_dt(&self) -> i64 {
        self.next_rep_dt
    }
    pub fn clear_next_rep_dt(&mut self) {
        self.next_rep_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_rep_dt(&mut self, v: i64) {
        self.next_rep_dt = v;
    }

    // int64 last_rep_dt = 14;


    pub fn get_last_rep_dt(&self) -> i64 {
        self.last_rep_dt
    }
    pub fn clear_last_rep_dt(&mut self) {
        self.last_rep_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_rep_dt(&mut self, v: i64) {
        self.last_rep_dt = v;
    }

    // string rep_freq = 15;


    pub fn get_rep_freq(&self) -> &str {
        &self.rep_freq
    }
    pub fn clear_rep_freq(&mut self) {
        self.rep_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_rep_freq(&mut self, v: ::std::string::String) {
        self.rep_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rep_freq(&mut self) -> &mut ::std::string::String {
        &mut self.rep_freq
    }

    // Take field
    pub fn take_rep_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rep_freq, ::std::string::String::new())
    }

    // string benchmark = 16;


    pub fn get_benchmark(&self) -> &str {
        &self.benchmark
    }
    pub fn clear_benchmark(&mut self) {
        self.benchmark.clear();
    }

    // Param is passed by value, moved
    pub fn set_benchmark(&mut self, v: ::std::string::String) {
        self.benchmark = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_benchmark(&mut self) -> &mut ::std::string::String {
        &mut self.benchmark
    }

    // Take field
    pub fn take_benchmark(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.benchmark, ::std::string::String::new())
    }

    // string cust_class = 17;


    pub fn get_cust_class(&self) -> &str {
        &self.cust_class
    }
    pub fn clear_cust_class(&mut self) {
        self.cust_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_class(&mut self, v: ::std::string::String) {
        self.cust_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_class(&mut self) -> &mut ::std::string::String {
        &mut self.cust_class
    }

    // Take field
    pub fn take_cust_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_class, ::std::string::String::new())
    }

    // string npa_class = 18;


    pub fn get_npa_class(&self) -> &str {
        &self.npa_class
    }
    pub fn clear_npa_class(&mut self) {
        self.npa_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_class(&mut self, v: ::std::string::String) {
        self.npa_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_class(&mut self) -> &mut ::std::string::String {
        &mut self.npa_class
    }

    // Take field
    pub fn take_npa_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_class, ::std::string::String::new())
    }

    // int64 ason = 19;


    pub fn get_ason(&self) -> i64 {
        self.ason
    }
    pub fn clear_ason(&mut self) {
        self.ason = 0;
    }

    // Param is passed by value, moved
    pub fn set_ason(&mut self, v: i64) {
        self.ason = v;
    }

    // string client_type = 20;


    pub fn get_client_type(&self) -> &str {
        &self.client_type
    }
    pub fn clear_client_type(&mut self) {
        self.client_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_type(&mut self, v: ::std::string::String) {
        self.client_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_type(&mut self) -> &mut ::std::string::String {
        &mut self.client_type
    }

    // Take field
    pub fn take_client_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_type, ::std::string::String::new())
    }

    // string clients_name1 = 21;


    pub fn get_clients_name1(&self) -> &str {
        &self.clients_name1
    }
    pub fn clear_clients_name1(&mut self) {
        self.clients_name1.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_name1(&mut self, v: ::std::string::String) {
        self.clients_name1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_name1(&mut self) -> &mut ::std::string::String {
        &mut self.clients_name1
    }

    // Take field
    pub fn take_clients_name1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_name1, ::std::string::String::new())
    }

    // string clients_bsr_type_flg = 22;


    pub fn get_clients_bsr_type_flg(&self) -> &str {
        &self.clients_bsr_type_flg
    }
    pub fn clear_clients_bsr_type_flg(&mut self) {
        self.clients_bsr_type_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_bsr_type_flg(&mut self, v: ::std::string::String) {
        self.clients_bsr_type_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_bsr_type_flg(&mut self) -> &mut ::std::string::String {
        &mut self.clients_bsr_type_flg
    }

    // Take field
    pub fn take_clients_bsr_type_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_bsr_type_flg, ::std::string::String::new())
    }

    // string clients_busdivn_code = 23;


    pub fn get_clients_busdivn_code(&self) -> &str {
        &self.clients_busdivn_code
    }
    pub fn clear_clients_busdivn_code(&mut self) {
        self.clients_busdivn_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_busdivn_code(&mut self, v: ::std::string::String) {
        self.clients_busdivn_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_busdivn_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_busdivn_code
    }

    // Take field
    pub fn take_clients_busdivn_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_busdivn_code, ::std::string::String::new())
    }

    // string clients_const_code = 24;


    pub fn get_clients_const_code(&self) -> &str {
        &self.clients_const_code
    }
    pub fn clear_clients_const_code(&mut self) {
        self.clients_const_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_const_code(&mut self, v: ::std::string::String) {
        self.clients_const_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_const_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_const_code
    }

    // Take field
    pub fn take_clients_const_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_const_code, ::std::string::String::new())
    }

    // string clients_pan_gir_num = 25;


    pub fn get_clients_pan_gir_num(&self) -> &str {
        &self.clients_pan_gir_num
    }
    pub fn clear_clients_pan_gir_num(&mut self) {
        self.clients_pan_gir_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_pan_gir_num(&mut self, v: ::std::string::String) {
        self.clients_pan_gir_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_pan_gir_num(&mut self) -> &mut ::std::string::String {
        &mut self.clients_pan_gir_num
    }

    // Take field
    pub fn take_clients_pan_gir_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_pan_gir_num, ::std::string::String::new())
    }

    // string clients_risk_categorization = 26;


    pub fn get_clients_risk_categorization(&self) -> &str {
        &self.clients_risk_categorization
    }
    pub fn clear_clients_risk_categorization(&mut self) {
        self.clients_risk_categorization.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_risk_categorization(&mut self, v: ::std::string::String) {
        self.clients_risk_categorization = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_risk_categorization(&mut self) -> &mut ::std::string::String {
        &mut self.clients_risk_categorization
    }

    // Take field
    pub fn take_clients_risk_categorization(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_risk_categorization, ::std::string::String::new())
    }

    // string clients_risk_cntry = 27;


    pub fn get_clients_risk_cntry(&self) -> &str {
        &self.clients_risk_cntry
    }
    pub fn clear_clients_risk_cntry(&mut self) {
        self.clients_risk_cntry.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_risk_cntry(&mut self, v: ::std::string::String) {
        self.clients_risk_cntry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_risk_cntry(&mut self) -> &mut ::std::string::String {
        &mut self.clients_risk_cntry
    }

    // Take field
    pub fn take_clients_risk_cntry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_risk_cntry, ::std::string::String::new())
    }

    // string clients_segment_code = 28;


    pub fn get_clients_segment_code(&self) -> &str {
        &self.clients_segment_code
    }
    pub fn clear_clients_segment_code(&mut self) {
        self.clients_segment_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_segment_code(&mut self, v: ::std::string::String) {
        self.clients_segment_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_segment_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_segment_code
    }

    // Take field
    pub fn take_clients_segment_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_segment_code, ::std::string::String::new())
    }

    // string corpcl_orgn_qualifier = 29;


    pub fn get_corpcl_orgn_qualifier(&self) -> &str {
        &self.corpcl_orgn_qualifier
    }
    pub fn clear_corpcl_orgn_qualifier(&mut self) {
        self.corpcl_orgn_qualifier.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_orgn_qualifier(&mut self, v: ::std::string::String) {
        self.corpcl_orgn_qualifier = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_orgn_qualifier(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_orgn_qualifier
    }

    // Take field
    pub fn take_corpcl_orgn_qualifier(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_orgn_qualifier, ::std::string::String::new())
    }

    // string corpcl_indus_code = 30;


    pub fn get_corpcl_indus_code(&self) -> &str {
        &self.corpcl_indus_code
    }
    pub fn clear_corpcl_indus_code(&mut self) {
        self.corpcl_indus_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_indus_code(&mut self, v: ::std::string::String) {
        self.corpcl_indus_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_indus_code(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_indus_code
    }

    // Take field
    pub fn take_corpcl_indus_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_indus_code, ::std::string::String::new())
    }

    // string corpcl_nature_of_bus1 = 31;


    pub fn get_corpcl_nature_of_bus1(&self) -> &str {
        &self.corpcl_nature_of_bus1
    }
    pub fn clear_corpcl_nature_of_bus1(&mut self) {
        self.corpcl_nature_of_bus1.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_nature_of_bus1(&mut self, v: ::std::string::String) {
        self.corpcl_nature_of_bus1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_nature_of_bus1(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_nature_of_bus1
    }

    // Take field
    pub fn take_corpcl_nature_of_bus1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_nature_of_bus1, ::std::string::String::new())
    }

    // string corpcl_nature_of_bus2 = 32;


    pub fn get_corpcl_nature_of_bus2(&self) -> &str {
        &self.corpcl_nature_of_bus2
    }
    pub fn clear_corpcl_nature_of_bus2(&mut self) {
        self.corpcl_nature_of_bus2.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_nature_of_bus2(&mut self, v: ::std::string::String) {
        self.corpcl_nature_of_bus2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_nature_of_bus2(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_nature_of_bus2
    }

    // Take field
    pub fn take_corpcl_nature_of_bus2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_nature_of_bus2, ::std::string::String::new())
    }

    // string corpcl_nature_of_bus3 = 33;


    pub fn get_corpcl_nature_of_bus3(&self) -> &str {
        &self.corpcl_nature_of_bus3
    }
    pub fn clear_corpcl_nature_of_bus3(&mut self) {
        self.corpcl_nature_of_bus3.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_nature_of_bus3(&mut self, v: ::std::string::String) {
        self.corpcl_nature_of_bus3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_nature_of_bus3(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_nature_of_bus3
    }

    // Take field
    pub fn take_corpcl_nature_of_bus3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_nature_of_bus3, ::std::string::String::new())
    }

    // string corpcl_central_state_flg = 34;


    pub fn get_corpcl_central_state_flg(&self) -> &str {
        &self.corpcl_central_state_flg
    }
    pub fn clear_corpcl_central_state_flg(&mut self) {
        self.corpcl_central_state_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_central_state_flg(&mut self, v: ::std::string::String) {
        self.corpcl_central_state_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_central_state_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_central_state_flg
    }

    // Take field
    pub fn take_corpcl_central_state_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_central_state_flg, ::std::string::String::new())
    }

    // string corpcl_public_sector_flg = 35;


    pub fn get_corpcl_public_sector_flg(&self) -> &str {
        &self.corpcl_public_sector_flg
    }
    pub fn clear_corpcl_public_sector_flg(&mut self) {
        self.corpcl_public_sector_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_public_sector_flg(&mut self, v: ::std::string::String) {
        self.corpcl_public_sector_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_public_sector_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_public_sector_flg
    }

    // Take field
    pub fn take_corpcl_public_sector_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_public_sector_flg, ::std::string::String::new())
    }

    // string corpcl_primary_dlr_flg = 36;


    pub fn get_corpcl_primary_dlr_flg(&self) -> &str {
        &self.corpcl_primary_dlr_flg
    }
    pub fn clear_corpcl_primary_dlr_flg(&mut self) {
        self.corpcl_primary_dlr_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_primary_dlr_flg(&mut self, v: ::std::string::String) {
        self.corpcl_primary_dlr_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_primary_dlr_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_primary_dlr_flg
    }

    // Take field
    pub fn take_corpcl_primary_dlr_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_primary_dlr_flg, ::std::string::String::new())
    }

    // string corpcl_multilateral_bank = 37;


    pub fn get_corpcl_multilateral_bank(&self) -> &str {
        &self.corpcl_multilateral_bank
    }
    pub fn clear_corpcl_multilateral_bank(&mut self) {
        self.corpcl_multilateral_bank.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_multilateral_bank(&mut self, v: ::std::string::String) {
        self.corpcl_multilateral_bank = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_multilateral_bank(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_multilateral_bank
    }

    // Take field
    pub fn take_corpcl_multilateral_bank(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_multilateral_bank, ::std::string::String::new())
    }

    // string corpcl_connp_inv_num = 38;


    pub fn get_corpcl_connp_inv_num(&self) -> &str {
        &self.corpcl_connp_inv_num
    }
    pub fn clear_corpcl_connp_inv_num(&mut self) {
        self.corpcl_connp_inv_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_connp_inv_num(&mut self, v: ::std::string::String) {
        self.corpcl_connp_inv_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_connp_inv_num(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_connp_inv_num
    }

    // Take field
    pub fn take_corpcl_connp_inv_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_connp_inv_num, ::std::string::String::new())
    }

    // double corpcl_bc_gross_turnover = 39;


    pub fn get_corpcl_bc_gross_turnover(&self) -> f64 {
        self.corpcl_bc_gross_turnover
    }
    pub fn clear_corpcl_bc_gross_turnover(&mut self) {
        self.corpcl_bc_gross_turnover = 0.;
    }

    // Param is passed by value, moved
    pub fn set_corpcl_bc_gross_turnover(&mut self, v: f64) {
        self.corpcl_bc_gross_turnover = v;
    }

    // string w4b_cd = 40;


    pub fn get_w4b_cd(&self) -> &str {
        &self.w4b_cd
    }
    pub fn clear_w4b_cd(&mut self) {
        self.w4b_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_w4b_cd(&mut self, v: ::std::string::String) {
        self.w4b_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_w4b_cd(&mut self) -> &mut ::std::string::String {
        &mut self.w4b_cd
    }

    // Take field
    pub fn take_w4b_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.w4b_cd, ::std::string::String::new())
    }

    // string balm_llg = 41;


    pub fn get_balm_llg(&self) -> &str {
        &self.balm_llg
    }
    pub fn clear_balm_llg(&mut self) {
        self.balm_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_balm_llg(&mut self, v: ::std::string::String) {
        self.balm_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balm_llg(&mut self) -> &mut ::std::string::String {
        &mut self.balm_llg
    }

    // Take field
    pub fn take_balm_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balm_llg, ::std::string::String::new())
    }

    // string care_llg = 42;


    pub fn get_care_llg(&self) -> &str {
        &self.care_llg
    }
    pub fn clear_care_llg(&mut self) {
        self.care_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_care_llg(&mut self, v: ::std::string::String) {
        self.care_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_care_llg(&mut self) -> &mut ::std::string::String {
        &mut self.care_llg
    }

    // Take field
    pub fn take_care_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.care_llg, ::std::string::String::new())
    }

    // string ba_llg = 43;


    pub fn get_ba_llg(&self) -> &str {
        &self.ba_llg
    }
    pub fn clear_ba_llg(&mut self) {
        self.ba_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_ba_llg(&mut self, v: ::std::string::String) {
        self.ba_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ba_llg(&mut self) -> &mut ::std::string::String {
        &mut self.ba_llg
    }

    // Take field
    pub fn take_ba_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ba_llg, ::std::string::String::new())
    }

    // string asset_code = 44;


    pub fn get_asset_code(&self) -> &str {
        &self.asset_code
    }
    pub fn clear_asset_code(&mut self) {
        self.asset_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_code(&mut self, v: ::std::string::String) {
        self.asset_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_code(&mut self) -> &mut ::std::string::String {
        &mut self.asset_code
    }

    // Take field
    pub fn take_asset_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_code, ::std::string::String::new())
    }

    // int64 npa_dt = 45;


    pub fn get_npa_dt(&self) -> i64 {
        self.npa_dt
    }
    pub fn clear_npa_dt(&mut self) {
        self.npa_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_npa_dt(&mut self, v: i64) {
        self.npa_dt = v;
    }

    // double account_balance = 46;


    pub fn get_account_balance(&self) -> f64 {
        self.account_balance
    }
    pub fn clear_account_balance(&mut self) {
        self.account_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_account_balance(&mut self, v: f64) {
        self.account_balance = v;
    }

    // double pwo = 47;


    pub fn get_pwo(&self) -> f64 {
        self.pwo
    }
    pub fn clear_pwo(&mut self) {
        self.pwo = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pwo(&mut self, v: f64) {
        self.pwo = v;
    }

    // int64 written_off_dt = 48;


    pub fn get_written_off_dt(&self) -> i64 {
        self.written_off_dt
    }
    pub fn clear_written_off_dt(&mut self) {
        self.written_off_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_written_off_dt(&mut self, v: i64) {
        self.written_off_dt = v;
    }

    // double ho_balance = 49;


    pub fn get_ho_balance(&self) -> f64 {
        self.ho_balance
    }
    pub fn clear_ho_balance(&mut self) {
        self.ho_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ho_balance(&mut self, v: f64) {
        self.ho_balance = v;
    }

    // double npa_provision = 50;


    pub fn get_npa_provision(&self) -> f64 {
        self.npa_provision
    }
    pub fn clear_npa_provision(&mut self) {
        self.npa_provision = 0.;
    }

    // Param is passed by value, moved
    pub fn set_npa_provision(&mut self, v: f64) {
        self.npa_provision = v;
    }

    // double ho_provision = 51;


    pub fn get_ho_provision(&self) -> f64 {
        self.ho_provision
    }
    pub fn clear_ho_provision(&mut self) {
        self.ho_provision = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ho_provision(&mut self, v: f64) {
        self.ho_provision = v;
    }

    // double suspencebalance = 52;


    pub fn get_suspencebalance(&self) -> f64 {
        self.suspencebalance
    }
    pub fn clear_suspencebalance(&mut self) {
        self.suspencebalance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_suspencebalance(&mut self, v: f64) {
        self.suspencebalance = v;
    }

    // double suspence_writeoff = 53;


    pub fn get_suspence_writeoff(&self) -> f64 {
        self.suspence_writeoff
    }
    pub fn clear_suspence_writeoff(&mut self) {
        self.suspence_writeoff = 0.;
    }

    // Param is passed by value, moved
    pub fn set_suspence_writeoff(&mut self, v: f64) {
        self.suspence_writeoff = v;
    }

    // double ho_suspence = 54;


    pub fn get_ho_suspence(&self) -> f64 {
        self.ho_suspence
    }
    pub fn clear_ho_suspence(&mut self) {
        self.ho_suspence = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ho_suspence(&mut self, v: f64) {
        self.ho_suspence = v;
    }

    // double claim = 55;


    pub fn get_claim(&self) -> f64 {
        self.claim
    }
    pub fn clear_claim(&mut self) {
        self.claim = 0.;
    }

    // Param is passed by value, moved
    pub fn set_claim(&mut self, v: f64) {
        self.claim = v;
    }

    // double primary = 56;


    pub fn get_primary(&self) -> f64 {
        self.primary
    }
    pub fn clear_primary(&mut self) {
        self.primary = 0.;
    }

    // Param is passed by value, moved
    pub fn set_primary(&mut self, v: f64) {
        self.primary = v;
    }

    // double collateral = 57;


    pub fn get_collateral(&self) -> f64 {
        self.collateral
    }
    pub fn clear_collateral(&mut self) {
        self.collateral = 0.;
    }

    // Param is passed by value, moved
    pub fn set_collateral(&mut self, v: f64) {
        self.collateral = v;
    }

    // double total_security = 58;


    pub fn get_total_security(&self) -> f64 {
        self.total_security
    }
    pub fn clear_total_security(&mut self) {
        self.total_security = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_security(&mut self, v: f64) {
        self.total_security = v;
    }

    // int64 primary_valuation_dt = 59;


    pub fn get_primary_valuation_dt(&self) -> i64 {
        self.primary_valuation_dt
    }
    pub fn clear_primary_valuation_dt(&mut self) {
        self.primary_valuation_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_primary_valuation_dt(&mut self, v: i64) {
        self.primary_valuation_dt = v;
    }

    // int64 collateral_valuation_dt = 60;


    pub fn get_collateral_valuation_dt(&self) -> i64 {
        self.collateral_valuation_dt
    }
    pub fn clear_collateral_valuation_dt(&mut self) {
        self.collateral_valuation_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_collateral_valuation_dt(&mut self, v: i64) {
        self.collateral_valuation_dt = v;
    }

    // double gold_deficit = 61;


    pub fn get_gold_deficit(&self) -> f64 {
        self.gold_deficit
    }
    pub fn clear_gold_deficit(&mut self) {
        self.gold_deficit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gold_deficit(&mut self, v: f64) {
        self.gold_deficit = v;
    }

    // double fraud = 62;


    pub fn get_fraud(&self) -> f64 {
        self.fraud
    }
    pub fn clear_fraud(&mut self) {
        self.fraud = 0.;
    }

    // Param is passed by value, moved
    pub fn set_fraud(&mut self, v: f64) {
        self.fraud = v;
    }

    // double wilful_default = 63;


    pub fn get_wilful_default(&self) -> f64 {
        self.wilful_default
    }
    pub fn clear_wilful_default(&mut self) {
        self.wilful_default = 0.;
    }

    // Param is passed by value, moved
    pub fn set_wilful_default(&mut self, v: f64) {
        self.wilful_default = v;
    }

    // double subsidy = 64;


    pub fn get_subsidy(&self) -> f64 {
        self.subsidy
    }
    pub fn clear_subsidy(&mut self) {
        self.subsidy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_subsidy(&mut self, v: f64) {
        self.subsidy = v;
    }

    // string priority = 65;


    pub fn get_priority(&self) -> &str {
        &self.priority
    }
    pub fn clear_priority(&mut self) {
        self.priority.clear();
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: ::std::string::String) {
        self.priority = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_priority(&mut self) -> &mut ::std::string::String {
        &mut self.priority
    }

    // Take field
    pub fn take_priority(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.priority, ::std::string::String::new())
    }

    // string priority_type = 66;


    pub fn get_priority_type(&self) -> &str {
        &self.priority_type
    }
    pub fn clear_priority_type(&mut self) {
        self.priority_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_priority_type(&mut self, v: ::std::string::String) {
        self.priority_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_priority_type(&mut self) -> &mut ::std::string::String {
        &mut self.priority_type
    }

    // Take field
    pub fn take_priority_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.priority_type, ::std::string::String::new())
    }

    // string main_sector = 67;


    pub fn get_main_sector(&self) -> &str {
        &self.main_sector
    }
    pub fn clear_main_sector(&mut self) {
        self.main_sector.clear();
    }

    // Param is passed by value, moved
    pub fn set_main_sector(&mut self, v: ::std::string::String) {
        self.main_sector = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_main_sector(&mut self) -> &mut ::std::string::String {
        &mut self.main_sector
    }

    // Take field
    pub fn take_main_sector(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.main_sector, ::std::string::String::new())
    }

    // string sub_sector = 68;


    pub fn get_sub_sector(&self) -> &str {
        &self.sub_sector
    }
    pub fn clear_sub_sector(&mut self) {
        self.sub_sector.clear();
    }

    // Param is passed by value, moved
    pub fn set_sub_sector(&mut self, v: ::std::string::String) {
        self.sub_sector = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sub_sector(&mut self) -> &mut ::std::string::String {
        &mut self.sub_sector
    }

    // Take field
    pub fn take_sub_sector(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sub_sector, ::std::string::String::new())
    }

    // string activity = 69;


    pub fn get_activity(&self) -> &str {
        &self.activity
    }
    pub fn clear_activity(&mut self) {
        self.activity.clear();
    }

    // Param is passed by value, moved
    pub fn set_activity(&mut self, v: ::std::string::String) {
        self.activity = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_activity(&mut self) -> &mut ::std::string::String {
        &mut self.activity
    }

    // Take field
    pub fn take_activity(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.activity, ::std::string::String::new())
    }

    // string industry = 70;


    pub fn get_industry(&self) -> &str {
        &self.industry
    }
    pub fn clear_industry(&mut self) {
        self.industry.clear();
    }

    // Param is passed by value, moved
    pub fn set_industry(&mut self, v: ::std::string::String) {
        self.industry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_industry(&mut self) -> &mut ::std::string::String {
        &mut self.industry
    }

    // Take field
    pub fn take_industry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.industry, ::std::string::String::new())
    }

    // string categoryofborrower = 71;


    pub fn get_categoryofborrower(&self) -> &str {
        &self.categoryofborrower
    }
    pub fn clear_categoryofborrower(&mut self) {
        self.categoryofborrower.clear();
    }

    // Param is passed by value, moved
    pub fn set_categoryofborrower(&mut self, v: ::std::string::String) {
        self.categoryofborrower = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_categoryofborrower(&mut self) -> &mut ::std::string::String {
        &mut self.categoryofborrower
    }

    // Take field
    pub fn take_categoryofborrower(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.categoryofborrower, ::std::string::String::new())
    }

    // string org_gl_head = 72;


    pub fn get_org_gl_head(&self) -> &str {
        &self.org_gl_head
    }
    pub fn clear_org_gl_head(&mut self) {
        self.org_gl_head.clear();
    }

    // Param is passed by value, moved
    pub fn set_org_gl_head(&mut self, v: ::std::string::String) {
        self.org_gl_head = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_org_gl_head(&mut self) -> &mut ::std::string::String {
        &mut self.org_gl_head
    }

    // Take field
    pub fn take_org_gl_head(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.org_gl_head, ::std::string::String::new())
    }

    // double npa_amt = 73;


    pub fn get_npa_amt(&self) -> f64 {
        self.npa_amt
    }
    pub fn clear_npa_amt(&mut self) {
        self.npa_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_npa_amt(&mut self, v: f64) {
        self.npa_amt = v;
    }

    // int64 sanc_dt = 74;


    pub fn get_sanc_dt(&self) -> i64 {
        self.sanc_dt
    }
    pub fn clear_sanc_dt(&mut self) {
        self.sanc_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_sanc_dt(&mut self, v: i64) {
        self.sanc_dt = v;
    }

    // string occp_cd = 75;


    pub fn get_occp_cd(&self) -> &str {
        &self.occp_cd
    }
    pub fn clear_occp_cd(&mut self) {
        self.occp_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_occp_cd(&mut self, v: ::std::string::String) {
        self.occp_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_occp_cd(&mut self) -> &mut ::std::string::String {
        &mut self.occp_cd
    }

    // Take field
    pub fn take_occp_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.occp_cd, ::std::string::String::new())
    }

    // string sens_sec = 76;


    pub fn get_sens_sec(&self) -> &str {
        &self.sens_sec
    }
    pub fn clear_sens_sec(&mut self) {
        self.sens_sec.clear();
    }

    // Param is passed by value, moved
    pub fn set_sens_sec(&mut self, v: ::std::string::String) {
        self.sens_sec = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sens_sec(&mut self) -> &mut ::std::string::String {
        &mut self.sens_sec
    }

    // Take field
    pub fn take_sens_sec(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sens_sec, ::std::string::String::new())
    }

    // string prior_subtype = 77;


    pub fn get_prior_subtype(&self) -> &str {
        &self.prior_subtype
    }
    pub fn clear_prior_subtype(&mut self) {
        self.prior_subtype.clear();
    }

    // Param is passed by value, moved
    pub fn set_prior_subtype(&mut self, v: ::std::string::String) {
        self.prior_subtype = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prior_subtype(&mut self) -> &mut ::std::string::String {
        &mut self.prior_subtype
    }

    // Take field
    pub fn take_prior_subtype(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prior_subtype, ::std::string::String::new())
    }

    // string restruct_flag = 78;


    pub fn get_restruct_flag(&self) -> &str {
        &self.restruct_flag
    }
    pub fn clear_restruct_flag(&mut self) {
        self.restruct_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_restruct_flag(&mut self, v: ::std::string::String) {
        self.restruct_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_restruct_flag(&mut self) -> &mut ::std::string::String {
        &mut self.restruct_flag
    }

    // Take field
    pub fn take_restruct_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.restruct_flag, ::std::string::String::new())
    }

    // int64 restruct_dt = 79;


    pub fn get_restruct_dt(&self) -> i64 {
        self.restruct_dt
    }
    pub fn clear_restruct_dt(&mut self) {
        self.restruct_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_restruct_dt(&mut self, v: i64) {
        self.restruct_dt = v;
    }

    // string mor_prd = 80;


    pub fn get_mor_prd(&self) -> &str {
        &self.mor_prd
    }
    pub fn clear_mor_prd(&mut self) {
        self.mor_prd.clear();
    }

    // Param is passed by value, moved
    pub fn set_mor_prd(&mut self, v: ::std::string::String) {
        self.mor_prd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mor_prd(&mut self) -> &mut ::std::string::String {
        &mut self.mor_prd
    }

    // Take field
    pub fn take_mor_prd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mor_prd, ::std::string::String::new())
    }

    // string rating = 81;


    pub fn get_rating(&self) -> &str {
        &self.rating
    }
    pub fn clear_rating(&mut self) {
        self.rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_rating(&mut self, v: ::std::string::String) {
        self.rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rating(&mut self) -> &mut ::std::string::String {
        &mut self.rating
    }

    // Take field
    pub fn take_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rating, ::std::string::String::new())
    }

    // string consitin = 82;


    pub fn get_consitin(&self) -> &str {
        &self.consitin
    }
    pub fn clear_consitin(&mut self) {
        self.consitin.clear();
    }

    // Param is passed by value, moved
    pub fn set_consitin(&mut self, v: ::std::string::String) {
        self.consitin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consitin(&mut self) -> &mut ::std::string::String {
        &mut self.consitin
    }

    // Take field
    pub fn take_consitin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.consitin, ::std::string::String::new())
    }

    // string pan = 83;


    pub fn get_pan(&self) -> &str {
        &self.pan
    }
    pub fn clear_pan(&mut self) {
        self.pan.clear();
    }

    // Param is passed by value, moved
    pub fn set_pan(&mut self, v: ::std::string::String) {
        self.pan = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pan(&mut self) -> &mut ::std::string::String {
        &mut self.pan
    }

    // Take field
    pub fn take_pan(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pan, ::std::string::String::new())
    }

    // double limit_amt = 84;


    pub fn get_limit_amt(&self) -> f64 {
        self.limit_amt
    }
    pub fn clear_limit_amt(&mut self) {
        self.limit_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_limit_amt(&mut self, v: f64) {
        self.limit_amt = v;
    }

    // double gross_adv = 85;


    pub fn get_gross_adv(&self) -> f64 {
        self.gross_adv
    }
    pub fn clear_gross_adv(&mut self) {
        self.gross_adv = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gross_adv(&mut self, v: f64) {
        self.gross_adv = v;
    }

    // double exp_amt = 86;


    pub fn get_exp_amt(&self) -> f64 {
        self.exp_amt
    }
    pub fn clear_exp_amt(&mut self) {
        self.exp_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_exp_amt(&mut self, v: f64) {
        self.exp_amt = v;
    }

    // double unvail_amt = 87;


    pub fn get_unvail_amt(&self) -> f64 {
        self.unvail_amt
    }
    pub fn clear_unvail_amt(&mut self) {
        self.unvail_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_unvail_amt(&mut self, v: f64) {
        self.unvail_amt = v;
    }

    // double gold_gram = 88;


    pub fn get_gold_gram(&self) -> f64 {
        self.gold_gram
    }
    pub fn clear_gold_gram(&mut self) {
        self.gold_gram = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gold_gram(&mut self, v: f64) {
        self.gold_gram = v;
    }

    // string fund_flag = 89;


    pub fn get_fund_flag(&self) -> &str {
        &self.fund_flag
    }
    pub fn clear_fund_flag(&mut self) {
        self.fund_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_fund_flag(&mut self, v: ::std::string::String) {
        self.fund_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fund_flag(&mut self) -> &mut ::std::string::String {
        &mut self.fund_flag
    }

    // Take field
    pub fn take_fund_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fund_flag, ::std::string::String::new())
    }

    // double ltv_value = 90;


    pub fn get_ltv_value(&self) -> f64 {
        self.ltv_value
    }
    pub fn clear_ltv_value(&mut self) {
        self.ltv_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ltv_value(&mut self, v: f64) {
        self.ltv_value = v;
    }

    // int64 pt_i64_1 = 91;


    pub fn get_pt_i64_1(&self) -> i64 {
        self.pt_i64_1
    }
    pub fn clear_pt_i64_1(&mut self) {
        self.pt_i64_1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_1(&mut self, v: i64) {
        self.pt_i64_1 = v;
    }

    // int64 pt_i64_2 = 92;


    pub fn get_pt_i64_2(&self) -> i64 {
        self.pt_i64_2
    }
    pub fn clear_pt_i64_2(&mut self) {
        self.pt_i64_2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_2(&mut self, v: i64) {
        self.pt_i64_2 = v;
    }

    // int64 pt_i64_3 = 93;


    pub fn get_pt_i64_3(&self) -> i64 {
        self.pt_i64_3
    }
    pub fn clear_pt_i64_3(&mut self) {
        self.pt_i64_3 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_3(&mut self, v: i64) {
        self.pt_i64_3 = v;
    }

    // int64 pt_i64_4 = 94;


    pub fn get_pt_i64_4(&self) -> i64 {
        self.pt_i64_4
    }
    pub fn clear_pt_i64_4(&mut self) {
        self.pt_i64_4 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_4(&mut self, v: i64) {
        self.pt_i64_4 = v;
    }

    // int64 pt_i64_5 = 95;


    pub fn get_pt_i64_5(&self) -> i64 {
        self.pt_i64_5
    }
    pub fn clear_pt_i64_5(&mut self) {
        self.pt_i64_5 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_5(&mut self, v: i64) {
        self.pt_i64_5 = v;
    }

    // double pt_f64_1 = 96;


    pub fn get_pt_f64_1(&self) -> f64 {
        self.pt_f64_1
    }
    pub fn clear_pt_f64_1(&mut self) {
        self.pt_f64_1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_1(&mut self, v: f64) {
        self.pt_f64_1 = v;
    }

    // double pt_f64_2 = 97;


    pub fn get_pt_f64_2(&self) -> f64 {
        self.pt_f64_2
    }
    pub fn clear_pt_f64_2(&mut self) {
        self.pt_f64_2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_2(&mut self, v: f64) {
        self.pt_f64_2 = v;
    }

    // double pt_f64_3 = 98;


    pub fn get_pt_f64_3(&self) -> f64 {
        self.pt_f64_3
    }
    pub fn clear_pt_f64_3(&mut self) {
        self.pt_f64_3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_3(&mut self, v: f64) {
        self.pt_f64_3 = v;
    }

    // double pt_f64_4 = 99;


    pub fn get_pt_f64_4(&self) -> f64 {
        self.pt_f64_4
    }
    pub fn clear_pt_f64_4(&mut self) {
        self.pt_f64_4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_4(&mut self, v: f64) {
        self.pt_f64_4 = v;
    }

    // double pt_f64_5 = 100;


    pub fn get_pt_f64_5(&self) -> f64 {
        self.pt_f64_5
    }
    pub fn clear_pt_f64_5(&mut self) {
        self.pt_f64_5 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_5(&mut self, v: f64) {
        self.pt_f64_5 = v;
    }

    // string clients_group_code = 101;


    pub fn get_clients_group_code(&self) -> &str {
        &self.clients_group_code
    }
    pub fn clear_clients_group_code(&mut self) {
        self.clients_group_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_group_code(&mut self, v: ::std::string::String) {
        self.clients_group_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_group_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_group_code
    }

    // Take field
    pub fn take_clients_group_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_group_code, ::std::string::String::new())
    }

    // string class1 = 102;


    pub fn get_class1(&self) -> &str {
        &self.class1
    }
    pub fn clear_class1(&mut self) {
        self.class1.clear();
    }

    // Param is passed by value, moved
    pub fn set_class1(&mut self, v: ::std::string::String) {
        self.class1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_class1(&mut self) -> &mut ::std::string::String {
        &mut self.class1
    }

    // Take field
    pub fn take_class1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.class1, ::std::string::String::new())
    }

    // string class2 = 103;


    pub fn get_class2(&self) -> &str {
        &self.class2
    }
    pub fn clear_class2(&mut self) {
        self.class2.clear();
    }

    // Param is passed by value, moved
    pub fn set_class2(&mut self, v: ::std::string::String) {
        self.class2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_class2(&mut self) -> &mut ::std::string::String {
        &mut self.class2
    }

    // Take field
    pub fn take_class2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.class2, ::std::string::String::new())
    }

    // string class3 = 104;


    pub fn get_class3(&self) -> &str {
        &self.class3
    }
    pub fn clear_class3(&mut self) {
        self.class3.clear();
    }

    // Param is passed by value, moved
    pub fn set_class3(&mut self, v: ::std::string::String) {
        self.class3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_class3(&mut self) -> &mut ::std::string::String {
        &mut self.class3
    }

    // Take field
    pub fn take_class3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.class3, ::std::string::String::new())
    }

    // string actual_cust_care_value = 105;


    pub fn get_actual_cust_care_value(&self) -> &str {
        &self.actual_cust_care_value
    }
    pub fn clear_actual_cust_care_value(&mut self) {
        self.actual_cust_care_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_actual_cust_care_value(&mut self, v: ::std::string::String) {
        self.actual_cust_care_value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_actual_cust_care_value(&mut self) -> &mut ::std::string::String {
        &mut self.actual_cust_care_value
    }

    // Take field
    pub fn take_actual_cust_care_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.actual_cust_care_value, ::std::string::String::new())
    }

    // string actual_acc_care_value = 106;


    pub fn get_actual_acc_care_value(&self) -> &str {
        &self.actual_acc_care_value
    }
    pub fn clear_actual_acc_care_value(&mut self) {
        self.actual_acc_care_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_actual_acc_care_value(&mut self, v: ::std::string::String) {
        self.actual_acc_care_value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_actual_acc_care_value(&mut self) -> &mut ::std::string::String {
        &mut self.actual_acc_care_value
    }

    // Take field
    pub fn take_actual_acc_care_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.actual_acc_care_value, ::std::string::String::new())
    }

    // string int_benchmark = 107;


    pub fn get_int_benchmark(&self) -> &str {
        &self.int_benchmark
    }
    pub fn clear_int_benchmark(&mut self) {
        self.int_benchmark.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_benchmark(&mut self, v: ::std::string::String) {
        self.int_benchmark = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_benchmark(&mut self) -> &mut ::std::string::String {
        &mut self.int_benchmark
    }

    // Take field
    pub fn take_int_benchmark(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_benchmark, ::std::string::String::new())
    }

    // string bank_name = 108;


    pub fn get_bank_name(&self) -> &str {
        &self.bank_name
    }
    pub fn clear_bank_name(&mut self) {
        self.bank_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_bank_name(&mut self, v: ::std::string::String) {
        self.bank_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bank_name(&mut self) -> &mut ::std::string::String {
        &mut self.bank_name
    }

    // Take field
    pub fn take_bank_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bank_name, ::std::string::String::new())
    }

    // string cet = 109;


    pub fn get_cet(&self) -> &str {
        &self.cet
    }
    pub fn clear_cet(&mut self) {
        self.cet.clear();
    }

    // Param is passed by value, moved
    pub fn set_cet(&mut self, v: ::std::string::String) {
        self.cet = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cet(&mut self) -> &mut ::std::string::String {
        &mut self.cet
    }

    // Take field
    pub fn take_cet(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cet, ::std::string::String::new())
    }

    // double tot_prin_amt = 110;


    pub fn get_tot_prin_amt(&self) -> f64 {
        self.tot_prin_amt
    }
    pub fn clear_tot_prin_amt(&mut self) {
        self.tot_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_prin_amt(&mut self, v: f64) {
        self.tot_prin_amt = v;
    }

    // double tot_int_amt = 111;


    pub fn get_tot_int_amt(&self) -> f64 {
        self.tot_int_amt
    }
    pub fn clear_tot_int_amt(&mut self) {
        self.tot_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_int_amt(&mut self, v: f64) {
        self.tot_int_amt = v;
    }

    // repeated .Cashflow cashflows = 112;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bill_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lbm_gl)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_cd)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bal = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.curr)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bal_lcy = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.open_dt = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_type)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rt = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_rep_dt = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_rep_dt = tmp;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rep_freq)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.benchmark)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_class)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa_class)?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ason = tmp;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_type)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_name1)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_bsr_type_flg)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_busdivn_code)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_const_code)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_pan_gir_num)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_risk_categorization)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_risk_cntry)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_segment_code)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_orgn_qualifier)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_indus_code)?;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_nature_of_bus1)?;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_nature_of_bus2)?;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_nature_of_bus3)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_central_state_flg)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_public_sector_flg)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_primary_dlr_flg)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_multilateral_bank)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpcl_connp_inv_num)?;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.corpcl_bc_gross_turnover = tmp;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.w4b_cd)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.balm_llg)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.care_llg)?;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ba_llg)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_code)?;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.npa_dt = tmp;
                },
                46 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.account_balance = tmp;
                },
                47 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pwo = tmp;
                },
                48 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.written_off_dt = tmp;
                },
                49 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ho_balance = tmp;
                },
                50 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.npa_provision = tmp;
                },
                51 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ho_provision = tmp;
                },
                52 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.suspencebalance = tmp;
                },
                53 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.suspence_writeoff = tmp;
                },
                54 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ho_suspence = tmp;
                },
                55 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.claim = tmp;
                },
                56 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.primary = tmp;
                },
                57 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.collateral = tmp;
                },
                58 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_security = tmp;
                },
                59 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.primary_valuation_dt = tmp;
                },
                60 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.collateral_valuation_dt = tmp;
                },
                61 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.gold_deficit = tmp;
                },
                62 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.fraud = tmp;
                },
                63 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.wilful_default = tmp;
                },
                64 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.subsidy = tmp;
                },
                65 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.priority)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.priority_type)?;
                },
                67 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.main_sector)?;
                },
                68 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sub_sector)?;
                },
                69 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.activity)?;
                },
                70 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.industry)?;
                },
                71 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.categoryofborrower)?;
                },
                72 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.org_gl_head)?;
                },
                73 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.npa_amt = tmp;
                },
                74 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.sanc_dt = tmp;
                },
                75 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.occp_cd)?;
                },
                76 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sens_sec)?;
                },
                77 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prior_subtype)?;
                },
                78 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.restruct_flag)?;
                },
                79 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.restruct_dt = tmp;
                },
                80 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mor_prd)?;
                },
                81 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rating)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.consitin)?;
                },
                83 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pan)?;
                },
                84 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.limit_amt = tmp;
                },
                85 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.gross_adv = tmp;
                },
                86 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.exp_amt = tmp;
                },
                87 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.unvail_amt = tmp;
                },
                88 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.gold_gram = tmp;
                },
                89 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fund_flag)?;
                },
                90 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ltv_value = tmp;
                },
                91 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_1 = tmp;
                },
                92 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_2 = tmp;
                },
                93 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_3 = tmp;
                },
                94 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_4 = tmp;
                },
                95 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_5 = tmp;
                },
                96 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_1 = tmp;
                },
                97 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_2 = tmp;
                },
                98 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_3 = tmp;
                },
                99 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_4 = tmp;
                },
                100 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_5 = tmp;
                },
                101 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clients_group_code)?;
                },
                102 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.class1)?;
                },
                103 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.class2)?;
                },
                104 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.class3)?;
                },
                105 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.actual_cust_care_value)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.actual_acc_care_value)?;
                },
                107 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_benchmark)?;
                },
                108 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bank_name)?;
                },
                109 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cet)?;
                },
                110 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_prin_amt = tmp;
                },
                111 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_int_amt = tmp;
                },
                112 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.bill_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.bill_id);
        }
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.client_id);
        }
        if !self.clients_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.clients_name);
        }
        if !self.lbm_gl.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.lbm_gl);
        }
        if !self.prod_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.prod_cd);
        }
        if self.bal != 0. {
            my_size += 9;
        }
        if !self.curr.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.curr);
        }
        if self.bal_lcy != 0. {
            my_size += 9;
        }
        if self.open_dt != 0 {
            my_size += ::protobuf::rt::value_size(9, self.open_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mat_dt != 0 {
            my_size += ::protobuf::rt::value_size(10, self.mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.int_type.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.int_type);
        }
        if self.int_rt != 0. {
            my_size += 9;
        }
        if self.next_rep_dt != 0 {
            my_size += ::protobuf::rt::value_size(13, self.next_rep_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_rep_dt != 0 {
            my_size += ::protobuf::rt::value_size(14, self.last_rep_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.rep_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.rep_freq);
        }
        if !self.benchmark.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.benchmark);
        }
        if !self.cust_class.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.cust_class);
        }
        if !self.npa_class.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.npa_class);
        }
        if self.ason != 0 {
            my_size += ::protobuf::rt::value_size(19, self.ason, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.client_type.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.client_type);
        }
        if !self.clients_name1.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.clients_name1);
        }
        if !self.clients_bsr_type_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.clients_bsr_type_flg);
        }
        if !self.clients_busdivn_code.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.clients_busdivn_code);
        }
        if !self.clients_const_code.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.clients_const_code);
        }
        if !self.clients_pan_gir_num.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.clients_pan_gir_num);
        }
        if !self.clients_risk_categorization.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.clients_risk_categorization);
        }
        if !self.clients_risk_cntry.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.clients_risk_cntry);
        }
        if !self.clients_segment_code.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.clients_segment_code);
        }
        if !self.corpcl_orgn_qualifier.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.corpcl_orgn_qualifier);
        }
        if !self.corpcl_indus_code.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.corpcl_indus_code);
        }
        if !self.corpcl_nature_of_bus1.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.corpcl_nature_of_bus1);
        }
        if !self.corpcl_nature_of_bus2.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.corpcl_nature_of_bus2);
        }
        if !self.corpcl_nature_of_bus3.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.corpcl_nature_of_bus3);
        }
        if !self.corpcl_central_state_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.corpcl_central_state_flg);
        }
        if !self.corpcl_public_sector_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.corpcl_public_sector_flg);
        }
        if !self.corpcl_primary_dlr_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.corpcl_primary_dlr_flg);
        }
        if !self.corpcl_multilateral_bank.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.corpcl_multilateral_bank);
        }
        if !self.corpcl_connp_inv_num.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.corpcl_connp_inv_num);
        }
        if self.corpcl_bc_gross_turnover != 0. {
            my_size += 10;
        }
        if !self.w4b_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.w4b_cd);
        }
        if !self.balm_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.balm_llg);
        }
        if !self.care_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.care_llg);
        }
        if !self.ba_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.ba_llg);
        }
        if !self.asset_code.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.asset_code);
        }
        if self.npa_dt != 0 {
            my_size += ::protobuf::rt::value_size(45, self.npa_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.account_balance != 0. {
            my_size += 10;
        }
        if self.pwo != 0. {
            my_size += 10;
        }
        if self.written_off_dt != 0 {
            my_size += ::protobuf::rt::value_size(48, self.written_off_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ho_balance != 0. {
            my_size += 10;
        }
        if self.npa_provision != 0. {
            my_size += 10;
        }
        if self.ho_provision != 0. {
            my_size += 10;
        }
        if self.suspencebalance != 0. {
            my_size += 10;
        }
        if self.suspence_writeoff != 0. {
            my_size += 10;
        }
        if self.ho_suspence != 0. {
            my_size += 10;
        }
        if self.claim != 0. {
            my_size += 10;
        }
        if self.primary != 0. {
            my_size += 10;
        }
        if self.collateral != 0. {
            my_size += 10;
        }
        if self.total_security != 0. {
            my_size += 10;
        }
        if self.primary_valuation_dt != 0 {
            my_size += ::protobuf::rt::value_size(59, self.primary_valuation_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.collateral_valuation_dt != 0 {
            my_size += ::protobuf::rt::value_size(60, self.collateral_valuation_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gold_deficit != 0. {
            my_size += 10;
        }
        if self.fraud != 0. {
            my_size += 10;
        }
        if self.wilful_default != 0. {
            my_size += 10;
        }
        if self.subsidy != 0. {
            my_size += 10;
        }
        if !self.priority.is_empty() {
            my_size += ::protobuf::rt::string_size(65, &self.priority);
        }
        if !self.priority_type.is_empty() {
            my_size += ::protobuf::rt::string_size(66, &self.priority_type);
        }
        if !self.main_sector.is_empty() {
            my_size += ::protobuf::rt::string_size(67, &self.main_sector);
        }
        if !self.sub_sector.is_empty() {
            my_size += ::protobuf::rt::string_size(68, &self.sub_sector);
        }
        if !self.activity.is_empty() {
            my_size += ::protobuf::rt::string_size(69, &self.activity);
        }
        if !self.industry.is_empty() {
            my_size += ::protobuf::rt::string_size(70, &self.industry);
        }
        if !self.categoryofborrower.is_empty() {
            my_size += ::protobuf::rt::string_size(71, &self.categoryofborrower);
        }
        if !self.org_gl_head.is_empty() {
            my_size += ::protobuf::rt::string_size(72, &self.org_gl_head);
        }
        if self.npa_amt != 0. {
            my_size += 10;
        }
        if self.sanc_dt != 0 {
            my_size += ::protobuf::rt::value_size(74, self.sanc_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.occp_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(75, &self.occp_cd);
        }
        if !self.sens_sec.is_empty() {
            my_size += ::protobuf::rt::string_size(76, &self.sens_sec);
        }
        if !self.prior_subtype.is_empty() {
            my_size += ::protobuf::rt::string_size(77, &self.prior_subtype);
        }
        if !self.restruct_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(78, &self.restruct_flag);
        }
        if self.restruct_dt != 0 {
            my_size += ::protobuf::rt::value_size(79, self.restruct_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.mor_prd.is_empty() {
            my_size += ::protobuf::rt::string_size(80, &self.mor_prd);
        }
        if !self.rating.is_empty() {
            my_size += ::protobuf::rt::string_size(81, &self.rating);
        }
        if !self.consitin.is_empty() {
            my_size += ::protobuf::rt::string_size(82, &self.consitin);
        }
        if !self.pan.is_empty() {
            my_size += ::protobuf::rt::string_size(83, &self.pan);
        }
        if self.limit_amt != 0. {
            my_size += 10;
        }
        if self.gross_adv != 0. {
            my_size += 10;
        }
        if self.exp_amt != 0. {
            my_size += 10;
        }
        if self.unvail_amt != 0. {
            my_size += 10;
        }
        if self.gold_gram != 0. {
            my_size += 10;
        }
        if !self.fund_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(89, &self.fund_flag);
        }
        if self.ltv_value != 0. {
            my_size += 10;
        }
        if self.pt_i64_1 != 0 {
            my_size += ::protobuf::rt::value_size(91, self.pt_i64_1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_i64_2 != 0 {
            my_size += ::protobuf::rt::value_size(92, self.pt_i64_2, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_i64_3 != 0 {
            my_size += ::protobuf::rt::value_size(93, self.pt_i64_3, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_i64_4 != 0 {
            my_size += ::protobuf::rt::value_size(94, self.pt_i64_4, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_i64_5 != 0 {
            my_size += ::protobuf::rt::value_size(95, self.pt_i64_5, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pt_f64_1 != 0. {
            my_size += 10;
        }
        if self.pt_f64_2 != 0. {
            my_size += 10;
        }
        if self.pt_f64_3 != 0. {
            my_size += 10;
        }
        if self.pt_f64_4 != 0. {
            my_size += 10;
        }
        if self.pt_f64_5 != 0. {
            my_size += 10;
        }
        if !self.clients_group_code.is_empty() {
            my_size += ::protobuf::rt::string_size(101, &self.clients_group_code);
        }
        if !self.class1.is_empty() {
            my_size += ::protobuf::rt::string_size(102, &self.class1);
        }
        if !self.class2.is_empty() {
            my_size += ::protobuf::rt::string_size(103, &self.class2);
        }
        if !self.class3.is_empty() {
            my_size += ::protobuf::rt::string_size(104, &self.class3);
        }
        if !self.actual_cust_care_value.is_empty() {
            my_size += ::protobuf::rt::string_size(105, &self.actual_cust_care_value);
        }
        if !self.actual_acc_care_value.is_empty() {
            my_size += ::protobuf::rt::string_size(106, &self.actual_acc_care_value);
        }
        if !self.int_benchmark.is_empty() {
            my_size += ::protobuf::rt::string_size(107, &self.int_benchmark);
        }
        if !self.bank_name.is_empty() {
            my_size += ::protobuf::rt::string_size(108, &self.bank_name);
        }
        if !self.cet.is_empty() {
            my_size += ::protobuf::rt::string_size(109, &self.cet);
        }
        if self.tot_prin_amt != 0. {
            my_size += 10;
        }
        if self.tot_int_amt != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.bill_id.is_empty() {
            os.write_string(1, &self.bill_id)?;
        }
        if !self.client_id.is_empty() {
            os.write_string(2, &self.client_id)?;
        }
        if !self.clients_name.is_empty() {
            os.write_string(3, &self.clients_name)?;
        }
        if !self.lbm_gl.is_empty() {
            os.write_string(4, &self.lbm_gl)?;
        }
        if !self.prod_cd.is_empty() {
            os.write_string(5, &self.prod_cd)?;
        }
        if self.bal != 0. {
            os.write_double(6, self.bal)?;
        }
        if !self.curr.is_empty() {
            os.write_string(7, &self.curr)?;
        }
        if self.bal_lcy != 0. {
            os.write_double(8, self.bal_lcy)?;
        }
        if self.open_dt != 0 {
            os.write_int64(9, self.open_dt)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(10, self.mat_dt)?;
        }
        if !self.int_type.is_empty() {
            os.write_string(11, &self.int_type)?;
        }
        if self.int_rt != 0. {
            os.write_double(12, self.int_rt)?;
        }
        if self.next_rep_dt != 0 {
            os.write_int64(13, self.next_rep_dt)?;
        }
        if self.last_rep_dt != 0 {
            os.write_int64(14, self.last_rep_dt)?;
        }
        if !self.rep_freq.is_empty() {
            os.write_string(15, &self.rep_freq)?;
        }
        if !self.benchmark.is_empty() {
            os.write_string(16, &self.benchmark)?;
        }
        if !self.cust_class.is_empty() {
            os.write_string(17, &self.cust_class)?;
        }
        if !self.npa_class.is_empty() {
            os.write_string(18, &self.npa_class)?;
        }
        if self.ason != 0 {
            os.write_int64(19, self.ason)?;
        }
        if !self.client_type.is_empty() {
            os.write_string(20, &self.client_type)?;
        }
        if !self.clients_name1.is_empty() {
            os.write_string(21, &self.clients_name1)?;
        }
        if !self.clients_bsr_type_flg.is_empty() {
            os.write_string(22, &self.clients_bsr_type_flg)?;
        }
        if !self.clients_busdivn_code.is_empty() {
            os.write_string(23, &self.clients_busdivn_code)?;
        }
        if !self.clients_const_code.is_empty() {
            os.write_string(24, &self.clients_const_code)?;
        }
        if !self.clients_pan_gir_num.is_empty() {
            os.write_string(25, &self.clients_pan_gir_num)?;
        }
        if !self.clients_risk_categorization.is_empty() {
            os.write_string(26, &self.clients_risk_categorization)?;
        }
        if !self.clients_risk_cntry.is_empty() {
            os.write_string(27, &self.clients_risk_cntry)?;
        }
        if !self.clients_segment_code.is_empty() {
            os.write_string(28, &self.clients_segment_code)?;
        }
        if !self.corpcl_orgn_qualifier.is_empty() {
            os.write_string(29, &self.corpcl_orgn_qualifier)?;
        }
        if !self.corpcl_indus_code.is_empty() {
            os.write_string(30, &self.corpcl_indus_code)?;
        }
        if !self.corpcl_nature_of_bus1.is_empty() {
            os.write_string(31, &self.corpcl_nature_of_bus1)?;
        }
        if !self.corpcl_nature_of_bus2.is_empty() {
            os.write_string(32, &self.corpcl_nature_of_bus2)?;
        }
        if !self.corpcl_nature_of_bus3.is_empty() {
            os.write_string(33, &self.corpcl_nature_of_bus3)?;
        }
        if !self.corpcl_central_state_flg.is_empty() {
            os.write_string(34, &self.corpcl_central_state_flg)?;
        }
        if !self.corpcl_public_sector_flg.is_empty() {
            os.write_string(35, &self.corpcl_public_sector_flg)?;
        }
        if !self.corpcl_primary_dlr_flg.is_empty() {
            os.write_string(36, &self.corpcl_primary_dlr_flg)?;
        }
        if !self.corpcl_multilateral_bank.is_empty() {
            os.write_string(37, &self.corpcl_multilateral_bank)?;
        }
        if !self.corpcl_connp_inv_num.is_empty() {
            os.write_string(38, &self.corpcl_connp_inv_num)?;
        }
        if self.corpcl_bc_gross_turnover != 0. {
            os.write_double(39, self.corpcl_bc_gross_turnover)?;
        }
        if !self.w4b_cd.is_empty() {
            os.write_string(40, &self.w4b_cd)?;
        }
        if !self.balm_llg.is_empty() {
            os.write_string(41, &self.balm_llg)?;
        }
        if !self.care_llg.is_empty() {
            os.write_string(42, &self.care_llg)?;
        }
        if !self.ba_llg.is_empty() {
            os.write_string(43, &self.ba_llg)?;
        }
        if !self.asset_code.is_empty() {
            os.write_string(44, &self.asset_code)?;
        }
        if self.npa_dt != 0 {
            os.write_int64(45, self.npa_dt)?;
        }
        if self.account_balance != 0. {
            os.write_double(46, self.account_balance)?;
        }
        if self.pwo != 0. {
            os.write_double(47, self.pwo)?;
        }
        if self.written_off_dt != 0 {
            os.write_int64(48, self.written_off_dt)?;
        }
        if self.ho_balance != 0. {
            os.write_double(49, self.ho_balance)?;
        }
        if self.npa_provision != 0. {
            os.write_double(50, self.npa_provision)?;
        }
        if self.ho_provision != 0. {
            os.write_double(51, self.ho_provision)?;
        }
        if self.suspencebalance != 0. {
            os.write_double(52, self.suspencebalance)?;
        }
        if self.suspence_writeoff != 0. {
            os.write_double(53, self.suspence_writeoff)?;
        }
        if self.ho_suspence != 0. {
            os.write_double(54, self.ho_suspence)?;
        }
        if self.claim != 0. {
            os.write_double(55, self.claim)?;
        }
        if self.primary != 0. {
            os.write_double(56, self.primary)?;
        }
        if self.collateral != 0. {
            os.write_double(57, self.collateral)?;
        }
        if self.total_security != 0. {
            os.write_double(58, self.total_security)?;
        }
        if self.primary_valuation_dt != 0 {
            os.write_int64(59, self.primary_valuation_dt)?;
        }
        if self.collateral_valuation_dt != 0 {
            os.write_int64(60, self.collateral_valuation_dt)?;
        }
        if self.gold_deficit != 0. {
            os.write_double(61, self.gold_deficit)?;
        }
        if self.fraud != 0. {
            os.write_double(62, self.fraud)?;
        }
        if self.wilful_default != 0. {
            os.write_double(63, self.wilful_default)?;
        }
        if self.subsidy != 0. {
            os.write_double(64, self.subsidy)?;
        }
        if !self.priority.is_empty() {
            os.write_string(65, &self.priority)?;
        }
        if !self.priority_type.is_empty() {
            os.write_string(66, &self.priority_type)?;
        }
        if !self.main_sector.is_empty() {
            os.write_string(67, &self.main_sector)?;
        }
        if !self.sub_sector.is_empty() {
            os.write_string(68, &self.sub_sector)?;
        }
        if !self.activity.is_empty() {
            os.write_string(69, &self.activity)?;
        }
        if !self.industry.is_empty() {
            os.write_string(70, &self.industry)?;
        }
        if !self.categoryofborrower.is_empty() {
            os.write_string(71, &self.categoryofborrower)?;
        }
        if !self.org_gl_head.is_empty() {
            os.write_string(72, &self.org_gl_head)?;
        }
        if self.npa_amt != 0. {
            os.write_double(73, self.npa_amt)?;
        }
        if self.sanc_dt != 0 {
            os.write_int64(74, self.sanc_dt)?;
        }
        if !self.occp_cd.is_empty() {
            os.write_string(75, &self.occp_cd)?;
        }
        if !self.sens_sec.is_empty() {
            os.write_string(76, &self.sens_sec)?;
        }
        if !self.prior_subtype.is_empty() {
            os.write_string(77, &self.prior_subtype)?;
        }
        if !self.restruct_flag.is_empty() {
            os.write_string(78, &self.restruct_flag)?;
        }
        if self.restruct_dt != 0 {
            os.write_int64(79, self.restruct_dt)?;
        }
        if !self.mor_prd.is_empty() {
            os.write_string(80, &self.mor_prd)?;
        }
        if !self.rating.is_empty() {
            os.write_string(81, &self.rating)?;
        }
        if !self.consitin.is_empty() {
            os.write_string(82, &self.consitin)?;
        }
        if !self.pan.is_empty() {
            os.write_string(83, &self.pan)?;
        }
        if self.limit_amt != 0. {
            os.write_double(84, self.limit_amt)?;
        }
        if self.gross_adv != 0. {
            os.write_double(85, self.gross_adv)?;
        }
        if self.exp_amt != 0. {
            os.write_double(86, self.exp_amt)?;
        }
        if self.unvail_amt != 0. {
            os.write_double(87, self.unvail_amt)?;
        }
        if self.gold_gram != 0. {
            os.write_double(88, self.gold_gram)?;
        }
        if !self.fund_flag.is_empty() {
            os.write_string(89, &self.fund_flag)?;
        }
        if self.ltv_value != 0. {
            os.write_double(90, self.ltv_value)?;
        }
        if self.pt_i64_1 != 0 {
            os.write_int64(91, self.pt_i64_1)?;
        }
        if self.pt_i64_2 != 0 {
            os.write_int64(92, self.pt_i64_2)?;
        }
        if self.pt_i64_3 != 0 {
            os.write_int64(93, self.pt_i64_3)?;
        }
        if self.pt_i64_4 != 0 {
            os.write_int64(94, self.pt_i64_4)?;
        }
        if self.pt_i64_5 != 0 {
            os.write_int64(95, self.pt_i64_5)?;
        }
        if self.pt_f64_1 != 0. {
            os.write_double(96, self.pt_f64_1)?;
        }
        if self.pt_f64_2 != 0. {
            os.write_double(97, self.pt_f64_2)?;
        }
        if self.pt_f64_3 != 0. {
            os.write_double(98, self.pt_f64_3)?;
        }
        if self.pt_f64_4 != 0. {
            os.write_double(99, self.pt_f64_4)?;
        }
        if self.pt_f64_5 != 0. {
            os.write_double(100, self.pt_f64_5)?;
        }
        if !self.clients_group_code.is_empty() {
            os.write_string(101, &self.clients_group_code)?;
        }
        if !self.class1.is_empty() {
            os.write_string(102, &self.class1)?;
        }
        if !self.class2.is_empty() {
            os.write_string(103, &self.class2)?;
        }
        if !self.class3.is_empty() {
            os.write_string(104, &self.class3)?;
        }
        if !self.actual_cust_care_value.is_empty() {
            os.write_string(105, &self.actual_cust_care_value)?;
        }
        if !self.actual_acc_care_value.is_empty() {
            os.write_string(106, &self.actual_acc_care_value)?;
        }
        if !self.int_benchmark.is_empty() {
            os.write_string(107, &self.int_benchmark)?;
        }
        if !self.bank_name.is_empty() {
            os.write_string(108, &self.bank_name)?;
        }
        if !self.cet.is_empty() {
            os.write_string(109, &self.cet)?;
        }
        if self.tot_prin_amt != 0. {
            os.write_double(110, self.tot_prin_amt)?;
        }
        if self.tot_int_amt != 0. {
            os.write_double(111, self.tot_int_amt)?;
        }
        for v in &self.cashflows {
            os.write_tag(112, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bill_id",
                |m: &AccountWithCashflows| { &m.bill_id },
                |m: &mut AccountWithCashflows| { &mut m.bill_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &AccountWithCashflows| { &m.client_id },
                |m: &mut AccountWithCashflows| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_name",
                |m: &AccountWithCashflows| { &m.clients_name },
                |m: &mut AccountWithCashflows| { &mut m.clients_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "lbm_gl",
                |m: &AccountWithCashflows| { &m.lbm_gl },
                |m: &mut AccountWithCashflows| { &mut m.lbm_gl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prod_cd",
                |m: &AccountWithCashflows| { &m.prod_cd },
                |m: &mut AccountWithCashflows| { &mut m.prod_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bal",
                |m: &AccountWithCashflows| { &m.bal },
                |m: &mut AccountWithCashflows| { &mut m.bal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "curr",
                |m: &AccountWithCashflows| { &m.curr },
                |m: &mut AccountWithCashflows| { &mut m.curr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bal_lcy",
                |m: &AccountWithCashflows| { &m.bal_lcy },
                |m: &mut AccountWithCashflows| { &mut m.bal_lcy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "open_dt",
                |m: &AccountWithCashflows| { &m.open_dt },
                |m: &mut AccountWithCashflows| { &mut m.open_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "mat_dt",
                |m: &AccountWithCashflows| { &m.mat_dt },
                |m: &mut AccountWithCashflows| { &mut m.mat_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_type",
                |m: &AccountWithCashflows| { &m.int_type },
                |m: &mut AccountWithCashflows| { &mut m.int_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_rt",
                |m: &AccountWithCashflows| { &m.int_rt },
                |m: &mut AccountWithCashflows| { &mut m.int_rt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_rep_dt",
                |m: &AccountWithCashflows| { &m.next_rep_dt },
                |m: &mut AccountWithCashflows| { &mut m.next_rep_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_rep_dt",
                |m: &AccountWithCashflows| { &m.last_rep_dt },
                |m: &mut AccountWithCashflows| { &mut m.last_rep_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rep_freq",
                |m: &AccountWithCashflows| { &m.rep_freq },
                |m: &mut AccountWithCashflows| { &mut m.rep_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "benchmark",
                |m: &AccountWithCashflows| { &m.benchmark },
                |m: &mut AccountWithCashflows| { &mut m.benchmark },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cust_class",
                |m: &AccountWithCashflows| { &m.cust_class },
                |m: &mut AccountWithCashflows| { &mut m.cust_class },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "npa_class",
                |m: &AccountWithCashflows| { &m.npa_class },
                |m: &mut AccountWithCashflows| { &mut m.npa_class },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ason",
                |m: &AccountWithCashflows| { &m.ason },
                |m: &mut AccountWithCashflows| { &mut m.ason },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_type",
                |m: &AccountWithCashflows| { &m.client_type },
                |m: &mut AccountWithCashflows| { &mut m.client_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_name1",
                |m: &AccountWithCashflows| { &m.clients_name1 },
                |m: &mut AccountWithCashflows| { &mut m.clients_name1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_bsr_type_flg",
                |m: &AccountWithCashflows| { &m.clients_bsr_type_flg },
                |m: &mut AccountWithCashflows| { &mut m.clients_bsr_type_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_busdivn_code",
                |m: &AccountWithCashflows| { &m.clients_busdivn_code },
                |m: &mut AccountWithCashflows| { &mut m.clients_busdivn_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_const_code",
                |m: &AccountWithCashflows| { &m.clients_const_code },
                |m: &mut AccountWithCashflows| { &mut m.clients_const_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_pan_gir_num",
                |m: &AccountWithCashflows| { &m.clients_pan_gir_num },
                |m: &mut AccountWithCashflows| { &mut m.clients_pan_gir_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_risk_categorization",
                |m: &AccountWithCashflows| { &m.clients_risk_categorization },
                |m: &mut AccountWithCashflows| { &mut m.clients_risk_categorization },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_risk_cntry",
                |m: &AccountWithCashflows| { &m.clients_risk_cntry },
                |m: &mut AccountWithCashflows| { &mut m.clients_risk_cntry },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_segment_code",
                |m: &AccountWithCashflows| { &m.clients_segment_code },
                |m: &mut AccountWithCashflows| { &mut m.clients_segment_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_orgn_qualifier",
                |m: &AccountWithCashflows| { &m.corpcl_orgn_qualifier },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_orgn_qualifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_indus_code",
                |m: &AccountWithCashflows| { &m.corpcl_indus_code },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_indus_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_nature_of_bus1",
                |m: &AccountWithCashflows| { &m.corpcl_nature_of_bus1 },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_nature_of_bus1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_nature_of_bus2",
                |m: &AccountWithCashflows| { &m.corpcl_nature_of_bus2 },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_nature_of_bus2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_nature_of_bus3",
                |m: &AccountWithCashflows| { &m.corpcl_nature_of_bus3 },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_nature_of_bus3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_central_state_flg",
                |m: &AccountWithCashflows| { &m.corpcl_central_state_flg },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_central_state_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_public_sector_flg",
                |m: &AccountWithCashflows| { &m.corpcl_public_sector_flg },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_public_sector_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_primary_dlr_flg",
                |m: &AccountWithCashflows| { &m.corpcl_primary_dlr_flg },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_primary_dlr_flg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_multilateral_bank",
                |m: &AccountWithCashflows| { &m.corpcl_multilateral_bank },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_multilateral_bank },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpcl_connp_inv_num",
                |m: &AccountWithCashflows| { &m.corpcl_connp_inv_num },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_connp_inv_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "corpcl_bc_gross_turnover",
                |m: &AccountWithCashflows| { &m.corpcl_bc_gross_turnover },
                |m: &mut AccountWithCashflows| { &mut m.corpcl_bc_gross_turnover },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "w4b_cd",
                |m: &AccountWithCashflows| { &m.w4b_cd },
                |m: &mut AccountWithCashflows| { &mut m.w4b_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "balm_llg",
                |m: &AccountWithCashflows| { &m.balm_llg },
                |m: &mut AccountWithCashflows| { &mut m.balm_llg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "care_llg",
                |m: &AccountWithCashflows| { &m.care_llg },
                |m: &mut AccountWithCashflows| { &mut m.care_llg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ba_llg",
                |m: &AccountWithCashflows| { &m.ba_llg },
                |m: &mut AccountWithCashflows| { &mut m.ba_llg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_code",
                |m: &AccountWithCashflows| { &m.asset_code },
                |m: &mut AccountWithCashflows| { &mut m.asset_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "npa_dt",
                |m: &AccountWithCashflows| { &m.npa_dt },
                |m: &mut AccountWithCashflows| { &mut m.npa_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "account_balance",
                |m: &AccountWithCashflows| { &m.account_balance },
                |m: &mut AccountWithCashflows| { &mut m.account_balance },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pwo",
                |m: &AccountWithCashflows| { &m.pwo },
                |m: &mut AccountWithCashflows| { &mut m.pwo },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "written_off_dt",
                |m: &AccountWithCashflows| { &m.written_off_dt },
                |m: &mut AccountWithCashflows| { &mut m.written_off_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ho_balance",
                |m: &AccountWithCashflows| { &m.ho_balance },
                |m: &mut AccountWithCashflows| { &mut m.ho_balance },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "npa_provision",
                |m: &AccountWithCashflows| { &m.npa_provision },
                |m: &mut AccountWithCashflows| { &mut m.npa_provision },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ho_provision",
                |m: &AccountWithCashflows| { &m.ho_provision },
                |m: &mut AccountWithCashflows| { &mut m.ho_provision },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "suspencebalance",
                |m: &AccountWithCashflows| { &m.suspencebalance },
                |m: &mut AccountWithCashflows| { &mut m.suspencebalance },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "suspence_writeoff",
                |m: &AccountWithCashflows| { &m.suspence_writeoff },
                |m: &mut AccountWithCashflows| { &mut m.suspence_writeoff },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ho_suspence",
                |m: &AccountWithCashflows| { &m.ho_suspence },
                |m: &mut AccountWithCashflows| { &mut m.ho_suspence },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "claim",
                |m: &AccountWithCashflows| { &m.claim },
                |m: &mut AccountWithCashflows| { &mut m.claim },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "primary",
                |m: &AccountWithCashflows| { &m.primary },
                |m: &mut AccountWithCashflows| { &mut m.primary },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "collateral",
                |m: &AccountWithCashflows| { &m.collateral },
                |m: &mut AccountWithCashflows| { &mut m.collateral },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "total_security",
                |m: &AccountWithCashflows| { &m.total_security },
                |m: &mut AccountWithCashflows| { &mut m.total_security },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "primary_valuation_dt",
                |m: &AccountWithCashflows| { &m.primary_valuation_dt },
                |m: &mut AccountWithCashflows| { &mut m.primary_valuation_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "collateral_valuation_dt",
                |m: &AccountWithCashflows| { &m.collateral_valuation_dt },
                |m: &mut AccountWithCashflows| { &mut m.collateral_valuation_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "gold_deficit",
                |m: &AccountWithCashflows| { &m.gold_deficit },
                |m: &mut AccountWithCashflows| { &mut m.gold_deficit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "fraud",
                |m: &AccountWithCashflows| { &m.fraud },
                |m: &mut AccountWithCashflows| { &mut m.fraud },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "wilful_default",
                |m: &AccountWithCashflows| { &m.wilful_default },
                |m: &mut AccountWithCashflows| { &mut m.wilful_default },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "subsidy",
                |m: &AccountWithCashflows| { &m.subsidy },
                |m: &mut AccountWithCashflows| { &mut m.subsidy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "priority",
                |m: &AccountWithCashflows| { &m.priority },
                |m: &mut AccountWithCashflows| { &mut m.priority },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "priority_type",
                |m: &AccountWithCashflows| { &m.priority_type },
                |m: &mut AccountWithCashflows| { &mut m.priority_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "main_sector",
                |m: &AccountWithCashflows| { &m.main_sector },
                |m: &mut AccountWithCashflows| { &mut m.main_sector },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sub_sector",
                |m: &AccountWithCashflows| { &m.sub_sector },
                |m: &mut AccountWithCashflows| { &mut m.sub_sector },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "activity",
                |m: &AccountWithCashflows| { &m.activity },
                |m: &mut AccountWithCashflows| { &mut m.activity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "industry",
                |m: &AccountWithCashflows| { &m.industry },
                |m: &mut AccountWithCashflows| { &mut m.industry },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "categoryofborrower",
                |m: &AccountWithCashflows| { &m.categoryofborrower },
                |m: &mut AccountWithCashflows| { &mut m.categoryofborrower },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "org_gl_head",
                |m: &AccountWithCashflows| { &m.org_gl_head },
                |m: &mut AccountWithCashflows| { &mut m.org_gl_head },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "npa_amt",
                |m: &AccountWithCashflows| { &m.npa_amt },
                |m: &mut AccountWithCashflows| { &mut m.npa_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "sanc_dt",
                |m: &AccountWithCashflows| { &m.sanc_dt },
                |m: &mut AccountWithCashflows| { &mut m.sanc_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "occp_cd",
                |m: &AccountWithCashflows| { &m.occp_cd },
                |m: &mut AccountWithCashflows| { &mut m.occp_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sens_sec",
                |m: &AccountWithCashflows| { &m.sens_sec },
                |m: &mut AccountWithCashflows| { &mut m.sens_sec },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prior_subtype",
                |m: &AccountWithCashflows| { &m.prior_subtype },
                |m: &mut AccountWithCashflows| { &mut m.prior_subtype },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "restruct_flag",
                |m: &AccountWithCashflows| { &m.restruct_flag },
                |m: &mut AccountWithCashflows| { &mut m.restruct_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "restruct_dt",
                |m: &AccountWithCashflows| { &m.restruct_dt },
                |m: &mut AccountWithCashflows| { &mut m.restruct_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mor_prd",
                |m: &AccountWithCashflows| { &m.mor_prd },
                |m: &mut AccountWithCashflows| { &mut m.mor_prd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rating",
                |m: &AccountWithCashflows| { &m.rating },
                |m: &mut AccountWithCashflows| { &mut m.rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "consitin",
                |m: &AccountWithCashflows| { &m.consitin },
                |m: &mut AccountWithCashflows| { &mut m.consitin },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pan",
                |m: &AccountWithCashflows| { &m.pan },
                |m: &mut AccountWithCashflows| { &mut m.pan },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "limit_amt",
                |m: &AccountWithCashflows| { &m.limit_amt },
                |m: &mut AccountWithCashflows| { &mut m.limit_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "gross_adv",
                |m: &AccountWithCashflows| { &m.gross_adv },
                |m: &mut AccountWithCashflows| { &mut m.gross_adv },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "exp_amt",
                |m: &AccountWithCashflows| { &m.exp_amt },
                |m: &mut AccountWithCashflows| { &mut m.exp_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "unvail_amt",
                |m: &AccountWithCashflows| { &m.unvail_amt },
                |m: &mut AccountWithCashflows| { &mut m.unvail_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "gold_gram",
                |m: &AccountWithCashflows| { &m.gold_gram },
                |m: &mut AccountWithCashflows| { &mut m.gold_gram },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fund_flag",
                |m: &AccountWithCashflows| { &m.fund_flag },
                |m: &mut AccountWithCashflows| { &mut m.fund_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ltv_value",
                |m: &AccountWithCashflows| { &m.ltv_value },
                |m: &mut AccountWithCashflows| { &mut m.ltv_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_1",
                |m: &AccountWithCashflows| { &m.pt_i64_1 },
                |m: &mut AccountWithCashflows| { &mut m.pt_i64_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_2",
                |m: &AccountWithCashflows| { &m.pt_i64_2 },
                |m: &mut AccountWithCashflows| { &mut m.pt_i64_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_3",
                |m: &AccountWithCashflows| { &m.pt_i64_3 },
                |m: &mut AccountWithCashflows| { &mut m.pt_i64_3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_4",
                |m: &AccountWithCashflows| { &m.pt_i64_4 },
                |m: &mut AccountWithCashflows| { &mut m.pt_i64_4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pt_i64_5",
                |m: &AccountWithCashflows| { &m.pt_i64_5 },
                |m: &mut AccountWithCashflows| { &mut m.pt_i64_5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_1",
                |m: &AccountWithCashflows| { &m.pt_f64_1 },
                |m: &mut AccountWithCashflows| { &mut m.pt_f64_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_2",
                |m: &AccountWithCashflows| { &m.pt_f64_2 },
                |m: &mut AccountWithCashflows| { &mut m.pt_f64_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_3",
                |m: &AccountWithCashflows| { &m.pt_f64_3 },
                |m: &mut AccountWithCashflows| { &mut m.pt_f64_3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_4",
                |m: &AccountWithCashflows| { &m.pt_f64_4 },
                |m: &mut AccountWithCashflows| { &mut m.pt_f64_4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pt_f64_5",
                |m: &AccountWithCashflows| { &m.pt_f64_5 },
                |m: &mut AccountWithCashflows| { &mut m.pt_f64_5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clients_group_code",
                |m: &AccountWithCashflows| { &m.clients_group_code },
                |m: &mut AccountWithCashflows| { &mut m.clients_group_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "class1",
                |m: &AccountWithCashflows| { &m.class1 },
                |m: &mut AccountWithCashflows| { &mut m.class1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "class2",
                |m: &AccountWithCashflows| { &m.class2 },
                |m: &mut AccountWithCashflows| { &mut m.class2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "class3",
                |m: &AccountWithCashflows| { &m.class3 },
                |m: &mut AccountWithCashflows| { &mut m.class3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "actual_cust_care_value",
                |m: &AccountWithCashflows| { &m.actual_cust_care_value },
                |m: &mut AccountWithCashflows| { &mut m.actual_cust_care_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "actual_acc_care_value",
                |m: &AccountWithCashflows| { &m.actual_acc_care_value },
                |m: &mut AccountWithCashflows| { &mut m.actual_acc_care_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_benchmark",
                |m: &AccountWithCashflows| { &m.int_benchmark },
                |m: &mut AccountWithCashflows| { &mut m.int_benchmark },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bank_name",
                |m: &AccountWithCashflows| { &m.bank_name },
                |m: &mut AccountWithCashflows| { &mut m.bank_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cet",
                |m: &AccountWithCashflows| { &m.cet },
                |m: &mut AccountWithCashflows| { &mut m.cet },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_prin_amt",
                |m: &AccountWithCashflows| { &m.tot_prin_amt },
                |m: &mut AccountWithCashflows| { &mut m.tot_prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_int_amt",
                |m: &AccountWithCashflows| { &m.tot_int_amt },
                |m: &mut AccountWithCashflows| { &mut m.tot_int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.bill_id.clear();
        self.client_id.clear();
        self.clients_name.clear();
        self.lbm_gl.clear();
        self.prod_cd.clear();
        self.bal = 0.;
        self.curr.clear();
        self.bal_lcy = 0.;
        self.open_dt = 0;
        self.mat_dt = 0;
        self.int_type.clear();
        self.int_rt = 0.;
        self.next_rep_dt = 0;
        self.last_rep_dt = 0;
        self.rep_freq.clear();
        self.benchmark.clear();
        self.cust_class.clear();
        self.npa_class.clear();
        self.ason = 0;
        self.client_type.clear();
        self.clients_name1.clear();
        self.clients_bsr_type_flg.clear();
        self.clients_busdivn_code.clear();
        self.clients_const_code.clear();
        self.clients_pan_gir_num.clear();
        self.clients_risk_categorization.clear();
        self.clients_risk_cntry.clear();
        self.clients_segment_code.clear();
        self.corpcl_orgn_qualifier.clear();
        self.corpcl_indus_code.clear();
        self.corpcl_nature_of_bus1.clear();
        self.corpcl_nature_of_bus2.clear();
        self.corpcl_nature_of_bus3.clear();
        self.corpcl_central_state_flg.clear();
        self.corpcl_public_sector_flg.clear();
        self.corpcl_primary_dlr_flg.clear();
        self.corpcl_multilateral_bank.clear();
        self.corpcl_connp_inv_num.clear();
        self.corpcl_bc_gross_turnover = 0.;
        self.w4b_cd.clear();
        self.balm_llg.clear();
        self.care_llg.clear();
        self.ba_llg.clear();
        self.asset_code.clear();
        self.npa_dt = 0;
        self.account_balance = 0.;
        self.pwo = 0.;
        self.written_off_dt = 0;
        self.ho_balance = 0.;
        self.npa_provision = 0.;
        self.ho_provision = 0.;
        self.suspencebalance = 0.;
        self.suspence_writeoff = 0.;
        self.ho_suspence = 0.;
        self.claim = 0.;
        self.primary = 0.;
        self.collateral = 0.;
        self.total_security = 0.;
        self.primary_valuation_dt = 0;
        self.collateral_valuation_dt = 0;
        self.gold_deficit = 0.;
        self.fraud = 0.;
        self.wilful_default = 0.;
        self.subsidy = 0.;
        self.priority.clear();
        self.priority_type.clear();
        self.main_sector.clear();
        self.sub_sector.clear();
        self.activity.clear();
        self.industry.clear();
        self.categoryofborrower.clear();
        self.org_gl_head.clear();
        self.npa_amt = 0.;
        self.sanc_dt = 0;
        self.occp_cd.clear();
        self.sens_sec.clear();
        self.prior_subtype.clear();
        self.restruct_flag.clear();
        self.restruct_dt = 0;
        self.mor_prd.clear();
        self.rating.clear();
        self.consitin.clear();
        self.pan.clear();
        self.limit_amt = 0.;
        self.gross_adv = 0.;
        self.exp_amt = 0.;
        self.unvail_amt = 0.;
        self.gold_gram = 0.;
        self.fund_flag.clear();
        self.ltv_value = 0.;
        self.pt_i64_1 = 0;
        self.pt_i64_2 = 0;
        self.pt_i64_3 = 0;
        self.pt_i64_4 = 0;
        self.pt_i64_5 = 0;
        self.pt_f64_1 = 0.;
        self.pt_f64_2 = 0.;
        self.pt_f64_3 = 0.;
        self.pt_f64_4 = 0.;
        self.pt_f64_5 = 0.;
        self.clients_group_code.clear();
        self.class1.clear();
        self.class2.clear();
        self.class3.clear();
        self.actual_cust_care_value.clear();
        self.actual_acc_care_value.clear();
        self.int_benchmark.clear();
        self.bank_name.clear();
        self.cet.clear();
        self.tot_prin_amt = 0.;
        self.tot_int_amt = 0.;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fcsb_bills.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\
    \x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\
    \x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\
    \x04date\"\xcb\x1d\n\x14AccountWithCashflows\x12\x17\n\x07bill_id\x18\
    \x01\x20\x01(\tR\x06billId\x12\x1b\n\tclient_id\x18\x02\x20\x01(\tR\x08c\
    lientId\x12!\n\x0cclients_name\x18\x03\x20\x01(\tR\x0bclientsName\x12\
    \x15\n\x06lbm_gl\x18\x04\x20\x01(\tR\x05lbmGl\x12\x17\n\x07prod_cd\x18\
    \x05\x20\x01(\tR\x06prodCd\x12\x10\n\x03bal\x18\x06\x20\x01(\x01R\x03bal\
    \x12\x12\n\x04curr\x18\x07\x20\x01(\tR\x04curr\x12\x17\n\x07bal_lcy\x18\
    \x08\x20\x01(\x01R\x06balLcy\x12\x17\n\x07open_dt\x18\t\x20\x01(\x03R\
    \x06openDt\x12\x15\n\x06mat_dt\x18\n\x20\x01(\x03R\x05matDt\x12\x19\n\
    \x08int_type\x18\x0b\x20\x01(\tR\x07intType\x12\x15\n\x06int_rt\x18\x0c\
    \x20\x01(\x01R\x05intRt\x12\x1e\n\x0bnext_rep_dt\x18\r\x20\x01(\x03R\tne\
    xtRepDt\x12\x1e\n\x0blast_rep_dt\x18\x0e\x20\x01(\x03R\tlastRepDt\x12\
    \x19\n\x08rep_freq\x18\x0f\x20\x01(\tR\x07repFreq\x12\x1c\n\tbenchmark\
    \x18\x10\x20\x01(\tR\tbenchmark\x12\x1d\n\ncust_class\x18\x11\x20\x01(\t\
    R\tcustClass\x12\x1b\n\tnpa_class\x18\x12\x20\x01(\tR\x08npaClass\x12\
    \x12\n\x04ason\x18\x13\x20\x01(\x03R\x04ason\x12\x1f\n\x0bclient_type\
    \x18\x14\x20\x01(\tR\nclientType\x12#\n\rclients_name1\x18\x15\x20\x01(\
    \tR\x0cclientsName1\x12/\n\x14clients_bsr_type_flg\x18\x16\x20\x01(\tR\
    \x11clientsBsrTypeFlg\x120\n\x14clients_busdivn_code\x18\x17\x20\x01(\tR\
    \x12clientsBusdivnCode\x12,\n\x12clients_const_code\x18\x18\x20\x01(\tR\
    \x10clientsConstCode\x12-\n\x13clients_pan_gir_num\x18\x19\x20\x01(\tR\
    \x10clientsPanGirNum\x12>\n\x1bclients_risk_categorization\x18\x1a\x20\
    \x01(\tR\x19clientsRiskCategorization\x12,\n\x12clients_risk_cntry\x18\
    \x1b\x20\x01(\tR\x10clientsRiskCntry\x120\n\x14clients_segment_code\x18\
    \x1c\x20\x01(\tR\x12clientsSegmentCode\x122\n\x15corpcl_orgn_qualifier\
    \x18\x1d\x20\x01(\tR\x13corpclOrgnQualifier\x12*\n\x11corpcl_indus_code\
    \x18\x1e\x20\x01(\tR\x0fcorpclIndusCode\x121\n\x15corpcl_nature_of_bus1\
    \x18\x1f\x20\x01(\tR\x12corpclNatureOfBus1\x121\n\x15corpcl_nature_of_bu\
    s2\x18\x20\x20\x01(\tR\x12corpclNatureOfBus2\x121\n\x15corpcl_nature_of_\
    bus3\x18!\x20\x01(\tR\x12corpclNatureOfBus3\x127\n\x18corpcl_central_sta\
    te_flg\x18\"\x20\x01(\tR\x15corpclCentralStateFlg\x127\n\x18corpcl_publi\
    c_sector_flg\x18#\x20\x01(\tR\x15corpclPublicSectorFlg\x123\n\x16corpcl_\
    primary_dlr_flg\x18$\x20\x01(\tR\x13corpclPrimaryDlrFlg\x128\n\x18corpcl\
    _multilateral_bank\x18%\x20\x01(\tR\x16corpclMultilateralBank\x12/\n\x14\
    corpcl_connp_inv_num\x18&\x20\x01(\tR\x11corpclConnpInvNum\x127\n\x18cor\
    pcl_bc_gross_turnover\x18'\x20\x01(\x01R\x15corpclBcGrossTurnover\x12\
    \x15\n\x06w4b_cd\x18(\x20\x01(\tR\x05w4bCd\x12\x19\n\x08balm_llg\x18)\
    \x20\x01(\tR\x07balmLlg\x12\x19\n\x08care_llg\x18*\x20\x01(\tR\x07careLl\
    g\x12\x15\n\x06ba_llg\x18+\x20\x01(\tR\x05baLlg\x12\x1d\n\nasset_code\
    \x18,\x20\x01(\tR\tassetCode\x12\x15\n\x06npa_dt\x18-\x20\x01(\x03R\x05n\
    paDt\x12'\n\x0faccount_balance\x18.\x20\x01(\x01R\x0eaccountBalance\x12\
    \x10\n\x03pwo\x18/\x20\x01(\x01R\x03pwo\x12$\n\x0ewritten_off_dt\x180\
    \x20\x01(\x03R\x0cwrittenOffDt\x12\x1d\n\nho_balance\x181\x20\x01(\x01R\
    \thoBalance\x12#\n\rnpa_provision\x182\x20\x01(\x01R\x0cnpaProvision\x12\
    !\n\x0cho_provision\x183\x20\x01(\x01R\x0bhoProvision\x12(\n\x0fsuspence\
    balance\x184\x20\x01(\x01R\x0fsuspencebalance\x12+\n\x11suspence_writeof\
    f\x185\x20\x01(\x01R\x10suspenceWriteoff\x12\x1f\n\x0bho_suspence\x186\
    \x20\x01(\x01R\nhoSuspence\x12\x14\n\x05claim\x187\x20\x01(\x01R\x05clai\
    m\x12\x18\n\x07primary\x188\x20\x01(\x01R\x07primary\x12\x1e\n\ncollater\
    al\x189\x20\x01(\x01R\ncollateral\x12%\n\x0etotal_security\x18:\x20\x01(\
    \x01R\rtotalSecurity\x120\n\x14primary_valuation_dt\x18;\x20\x01(\x03R\
    \x12primaryValuationDt\x126\n\x17collateral_valuation_dt\x18<\x20\x01(\
    \x03R\x15collateralValuationDt\x12!\n\x0cgold_deficit\x18=\x20\x01(\x01R\
    \x0bgoldDeficit\x12\x14\n\x05fraud\x18>\x20\x01(\x01R\x05fraud\x12%\n\
    \x0ewilful_default\x18?\x20\x01(\x01R\rwilfulDefault\x12\x18\n\x07subsid\
    y\x18@\x20\x01(\x01R\x07subsidy\x12\x1a\n\x08priority\x18A\x20\x01(\tR\
    \x08priority\x12#\n\rpriority_type\x18B\x20\x01(\tR\x0cpriorityType\x12\
    \x1f\n\x0bmain_sector\x18C\x20\x01(\tR\nmainSector\x12\x1d\n\nsub_sector\
    \x18D\x20\x01(\tR\tsubSector\x12\x1a\n\x08activity\x18E\x20\x01(\tR\x08a\
    ctivity\x12\x1a\n\x08industry\x18F\x20\x01(\tR\x08industry\x12.\n\x12cat\
    egoryofborrower\x18G\x20\x01(\tR\x12categoryofborrower\x12\x1e\n\x0borg_\
    gl_head\x18H\x20\x01(\tR\torgGlHead\x12\x17\n\x07npa_amt\x18I\x20\x01(\
    \x01R\x06npaAmt\x12\x17\n\x07sanc_dt\x18J\x20\x01(\x03R\x06sancDt\x12\
    \x17\n\x07occp_cd\x18K\x20\x01(\tR\x06occpCd\x12\x19\n\x08sens_sec\x18L\
    \x20\x01(\tR\x07sensSec\x12#\n\rprior_subtype\x18M\x20\x01(\tR\x0cpriorS\
    ubtype\x12#\n\rrestruct_flag\x18N\x20\x01(\tR\x0crestructFlag\x12\x1f\n\
    \x0brestruct_dt\x18O\x20\x01(\x03R\nrestructDt\x12\x17\n\x07mor_prd\x18P\
    \x20\x01(\tR\x06morPrd\x12\x16\n\x06rating\x18Q\x20\x01(\tR\x06rating\
    \x12\x1a\n\x08consitin\x18R\x20\x01(\tR\x08consitin\x12\x10\n\x03pan\x18\
    S\x20\x01(\tR\x03pan\x12\x1b\n\tlimit_amt\x18T\x20\x01(\x01R\x08limitAmt\
    \x12\x1b\n\tgross_adv\x18U\x20\x01(\x01R\x08grossAdv\x12\x17\n\x07exp_am\
    t\x18V\x20\x01(\x01R\x06expAmt\x12\x1d\n\nunvail_amt\x18W\x20\x01(\x01R\
    \tunvailAmt\x12\x1b\n\tgold_gram\x18X\x20\x01(\x01R\x08goldGram\x12\x1b\
    \n\tfund_flag\x18Y\x20\x01(\tR\x08fundFlag\x12\x1b\n\tltv_value\x18Z\x20\
    \x01(\x01R\x08ltvValue\x12\x18\n\x08pt_i64_1\x18[\x20\x01(\x03R\x06ptI64\
    1\x12\x18\n\x08pt_i64_2\x18\\\x20\x01(\x03R\x06ptI642\x12\x18\n\x08pt_i6\
    4_3\x18]\x20\x01(\x03R\x06ptI643\x12\x18\n\x08pt_i64_4\x18^\x20\x01(\x03\
    R\x06ptI644\x12\x18\n\x08pt_i64_5\x18_\x20\x01(\x03R\x06ptI645\x12\x18\n\
    \x08pt_f64_1\x18`\x20\x01(\x01R\x06ptF641\x12\x18\n\x08pt_f64_2\x18a\x20\
    \x01(\x01R\x06ptF642\x12\x18\n\x08pt_f64_3\x18b\x20\x01(\x01R\x06ptF643\
    \x12\x18\n\x08pt_f64_4\x18c\x20\x01(\x01R\x06ptF644\x12\x18\n\x08pt_f64_\
    5\x18d\x20\x01(\x01R\x06ptF645\x12,\n\x12clients_group_code\x18e\x20\x01\
    (\tR\x10clientsGroupCode\x12\x16\n\x06class1\x18f\x20\x01(\tR\x06class1\
    \x12\x16\n\x06class2\x18g\x20\x01(\tR\x06class2\x12\x16\n\x06class3\x18h\
    \x20\x01(\tR\x06class3\x123\n\x16actual_cust_care_value\x18i\x20\x01(\tR\
    \x13actualCustCareValue\x121\n\x15actual_acc_care_value\x18j\x20\x01(\tR\
    \x12actualAccCareValue\x12#\n\rint_benchmark\x18k\x20\x01(\tR\x0cintBenc\
    hmark\x12\x1b\n\tbank_name\x18l\x20\x01(\tR\x08bankName\x12\x10\n\x03cet\
    \x18m\x20\x01(\tR\x03cet\x12\x20\n\x0ctot_prin_amt\x18n\x20\x01(\x01R\nt\
    otPrinAmt\x12\x1e\n\x0btot_int_amt\x18o\x20\x01(\x01R\ttotIntAmt\x12'\n\
    \tcashflows\x18p\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
