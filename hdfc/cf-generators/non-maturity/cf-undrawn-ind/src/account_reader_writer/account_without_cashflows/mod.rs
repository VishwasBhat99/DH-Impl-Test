// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `non-maturity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct OutputAccount {
    // message fields
    pub v_src_sys_id: ::std::string::String,
    pub v_exp_id: ::std::string::String,
    pub v_d_cust_ref_code: ::std::string::String,
    pub v_line_code: ::std::string::String,
    pub v_prod_code: ::std::string::String,
    pub v_pp_table: ::std::string::String,
    pub n_ccf_prcnt: f64,
    pub d_exp_strt_dt: i64,
    pub d_exp_end_dt: i64,
    pub n_exp_amt: f64,
    pub n_undrawn_amt: f64,
    pub v_basel_prod_typ_desc_lv1: ::std::string::String,
    pub v_basel_prod_typ_desc: ::std::string::String,
    pub v_basel_asst_class_desc: ::std::string::String,
    pub v_party_typ_desc: ::std::string::String,
    pub gl_code: ::std::string::String,
    pub v_party_name: ::std::string::String,
    pub v_ram_id: ::std::string::String,
    pub v_ccy_code: ::std::string::String,
    pub v_fclty_desc: ::std::string::String,
    pub v_ret_corp_ind: ::std::string::String,
    pub fb_nfb: ::std::string::String,
    pub ccod_flag: ::std::string::String,
    pub lcr_cat: ::std::string::String,
    pub asst_class_desc: ::std::string::String,
    pub final_map_lcr: ::std::string::String,
    pub flag_uncond_cancelled_exp_ind: ::std::string::String,
    pub slr_amt: f64,
    pub lcr_amt: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutputAccount {
    fn default() -> &'a OutputAccount {
        <OutputAccount as ::protobuf::Message>::default_instance()
    }
}

impl OutputAccount {
    pub fn new() -> OutputAccount {
        ::std::default::Default::default()
    }

    // string v_src_sys_id = 1;


    pub fn get_v_src_sys_id(&self) -> &str {
        &self.v_src_sys_id
    }
    pub fn clear_v_src_sys_id(&mut self) {
        self.v_src_sys_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_src_sys_id(&mut self, v: ::std::string::String) {
        self.v_src_sys_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_src_sys_id(&mut self) -> &mut ::std::string::String {
        &mut self.v_src_sys_id
    }

    // Take field
    pub fn take_v_src_sys_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_src_sys_id, ::std::string::String::new())
    }

    // string v_exp_id = 2;


    pub fn get_v_exp_id(&self) -> &str {
        &self.v_exp_id
    }
    pub fn clear_v_exp_id(&mut self) {
        self.v_exp_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_exp_id(&mut self, v: ::std::string::String) {
        self.v_exp_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_exp_id(&mut self) -> &mut ::std::string::String {
        &mut self.v_exp_id
    }

    // Take field
    pub fn take_v_exp_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_exp_id, ::std::string::String::new())
    }

    // string v_d_cust_ref_code = 3;


    pub fn get_v_d_cust_ref_code(&self) -> &str {
        &self.v_d_cust_ref_code
    }
    pub fn clear_v_d_cust_ref_code(&mut self) {
        self.v_d_cust_ref_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_d_cust_ref_code(&mut self, v: ::std::string::String) {
        self.v_d_cust_ref_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_d_cust_ref_code(&mut self) -> &mut ::std::string::String {
        &mut self.v_d_cust_ref_code
    }

    // Take field
    pub fn take_v_d_cust_ref_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_d_cust_ref_code, ::std::string::String::new())
    }

    // string v_line_code = 4;


    pub fn get_v_line_code(&self) -> &str {
        &self.v_line_code
    }
    pub fn clear_v_line_code(&mut self) {
        self.v_line_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_line_code(&mut self, v: ::std::string::String) {
        self.v_line_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_line_code(&mut self) -> &mut ::std::string::String {
        &mut self.v_line_code
    }

    // Take field
    pub fn take_v_line_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_line_code, ::std::string::String::new())
    }

    // string v_prod_code = 5;


    pub fn get_v_prod_code(&self) -> &str {
        &self.v_prod_code
    }
    pub fn clear_v_prod_code(&mut self) {
        self.v_prod_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_prod_code(&mut self, v: ::std::string::String) {
        self.v_prod_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_prod_code(&mut self) -> &mut ::std::string::String {
        &mut self.v_prod_code
    }

    // Take field
    pub fn take_v_prod_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_prod_code, ::std::string::String::new())
    }

    // string v_pp_table = 6;


    pub fn get_v_pp_table(&self) -> &str {
        &self.v_pp_table
    }
    pub fn clear_v_pp_table(&mut self) {
        self.v_pp_table.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_pp_table(&mut self, v: ::std::string::String) {
        self.v_pp_table = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_pp_table(&mut self) -> &mut ::std::string::String {
        &mut self.v_pp_table
    }

    // Take field
    pub fn take_v_pp_table(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_pp_table, ::std::string::String::new())
    }

    // double n_ccf_prcnt = 7;


    pub fn get_n_ccf_prcnt(&self) -> f64 {
        self.n_ccf_prcnt
    }
    pub fn clear_n_ccf_prcnt(&mut self) {
        self.n_ccf_prcnt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_n_ccf_prcnt(&mut self, v: f64) {
        self.n_ccf_prcnt = v;
    }

    // int64 d_exp_strt_dt = 8;


    pub fn get_d_exp_strt_dt(&self) -> i64 {
        self.d_exp_strt_dt
    }
    pub fn clear_d_exp_strt_dt(&mut self) {
        self.d_exp_strt_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_d_exp_strt_dt(&mut self, v: i64) {
        self.d_exp_strt_dt = v;
    }

    // int64 d_exp_end_dt = 9;


    pub fn get_d_exp_end_dt(&self) -> i64 {
        self.d_exp_end_dt
    }
    pub fn clear_d_exp_end_dt(&mut self) {
        self.d_exp_end_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_d_exp_end_dt(&mut self, v: i64) {
        self.d_exp_end_dt = v;
    }

    // double n_exp_amt = 10;


    pub fn get_n_exp_amt(&self) -> f64 {
        self.n_exp_amt
    }
    pub fn clear_n_exp_amt(&mut self) {
        self.n_exp_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_n_exp_amt(&mut self, v: f64) {
        self.n_exp_amt = v;
    }

    // double n_undrawn_amt = 11;


    pub fn get_n_undrawn_amt(&self) -> f64 {
        self.n_undrawn_amt
    }
    pub fn clear_n_undrawn_amt(&mut self) {
        self.n_undrawn_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_n_undrawn_amt(&mut self, v: f64) {
        self.n_undrawn_amt = v;
    }

    // string v_basel_prod_typ_desc_lv1 = 12;


    pub fn get_v_basel_prod_typ_desc_lv1(&self) -> &str {
        &self.v_basel_prod_typ_desc_lv1
    }
    pub fn clear_v_basel_prod_typ_desc_lv1(&mut self) {
        self.v_basel_prod_typ_desc_lv1.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_basel_prod_typ_desc_lv1(&mut self, v: ::std::string::String) {
        self.v_basel_prod_typ_desc_lv1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_basel_prod_typ_desc_lv1(&mut self) -> &mut ::std::string::String {
        &mut self.v_basel_prod_typ_desc_lv1
    }

    // Take field
    pub fn take_v_basel_prod_typ_desc_lv1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_basel_prod_typ_desc_lv1, ::std::string::String::new())
    }

    // string v_basel_prod_typ_desc = 13;


    pub fn get_v_basel_prod_typ_desc(&self) -> &str {
        &self.v_basel_prod_typ_desc
    }
    pub fn clear_v_basel_prod_typ_desc(&mut self) {
        self.v_basel_prod_typ_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_basel_prod_typ_desc(&mut self, v: ::std::string::String) {
        self.v_basel_prod_typ_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_basel_prod_typ_desc(&mut self) -> &mut ::std::string::String {
        &mut self.v_basel_prod_typ_desc
    }

    // Take field
    pub fn take_v_basel_prod_typ_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_basel_prod_typ_desc, ::std::string::String::new())
    }

    // string v_basel_asst_class_desc = 14;


    pub fn get_v_basel_asst_class_desc(&self) -> &str {
        &self.v_basel_asst_class_desc
    }
    pub fn clear_v_basel_asst_class_desc(&mut self) {
        self.v_basel_asst_class_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_basel_asst_class_desc(&mut self, v: ::std::string::String) {
        self.v_basel_asst_class_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_basel_asst_class_desc(&mut self) -> &mut ::std::string::String {
        &mut self.v_basel_asst_class_desc
    }

    // Take field
    pub fn take_v_basel_asst_class_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_basel_asst_class_desc, ::std::string::String::new())
    }

    // string v_party_typ_desc = 15;


    pub fn get_v_party_typ_desc(&self) -> &str {
        &self.v_party_typ_desc
    }
    pub fn clear_v_party_typ_desc(&mut self) {
        self.v_party_typ_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_party_typ_desc(&mut self, v: ::std::string::String) {
        self.v_party_typ_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_party_typ_desc(&mut self) -> &mut ::std::string::String {
        &mut self.v_party_typ_desc
    }

    // Take field
    pub fn take_v_party_typ_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_party_typ_desc, ::std::string::String::new())
    }

    // string gl_code = 16;


    pub fn get_gl_code(&self) -> &str {
        &self.gl_code
    }
    pub fn clear_gl_code(&mut self) {
        self.gl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_code(&mut self, v: ::std::string::String) {
        self.gl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_code
    }

    // Take field
    pub fn take_gl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_code, ::std::string::String::new())
    }

    // string v_party_name = 17;


    pub fn get_v_party_name(&self) -> &str {
        &self.v_party_name
    }
    pub fn clear_v_party_name(&mut self) {
        self.v_party_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_party_name(&mut self, v: ::std::string::String) {
        self.v_party_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_party_name(&mut self) -> &mut ::std::string::String {
        &mut self.v_party_name
    }

    // Take field
    pub fn take_v_party_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_party_name, ::std::string::String::new())
    }

    // string v_ram_id = 18;


    pub fn get_v_ram_id(&self) -> &str {
        &self.v_ram_id
    }
    pub fn clear_v_ram_id(&mut self) {
        self.v_ram_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_ram_id(&mut self, v: ::std::string::String) {
        self.v_ram_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_ram_id(&mut self) -> &mut ::std::string::String {
        &mut self.v_ram_id
    }

    // Take field
    pub fn take_v_ram_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_ram_id, ::std::string::String::new())
    }

    // string v_ccy_code = 19;


    pub fn get_v_ccy_code(&self) -> &str {
        &self.v_ccy_code
    }
    pub fn clear_v_ccy_code(&mut self) {
        self.v_ccy_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_ccy_code(&mut self, v: ::std::string::String) {
        self.v_ccy_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_ccy_code(&mut self) -> &mut ::std::string::String {
        &mut self.v_ccy_code
    }

    // Take field
    pub fn take_v_ccy_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_ccy_code, ::std::string::String::new())
    }

    // string v_fclty_desc = 20;


    pub fn get_v_fclty_desc(&self) -> &str {
        &self.v_fclty_desc
    }
    pub fn clear_v_fclty_desc(&mut self) {
        self.v_fclty_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_fclty_desc(&mut self, v: ::std::string::String) {
        self.v_fclty_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_fclty_desc(&mut self) -> &mut ::std::string::String {
        &mut self.v_fclty_desc
    }

    // Take field
    pub fn take_v_fclty_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_fclty_desc, ::std::string::String::new())
    }

    // string v_ret_corp_ind = 21;


    pub fn get_v_ret_corp_ind(&self) -> &str {
        &self.v_ret_corp_ind
    }
    pub fn clear_v_ret_corp_ind(&mut self) {
        self.v_ret_corp_ind.clear();
    }

    // Param is passed by value, moved
    pub fn set_v_ret_corp_ind(&mut self, v: ::std::string::String) {
        self.v_ret_corp_ind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_ret_corp_ind(&mut self) -> &mut ::std::string::String {
        &mut self.v_ret_corp_ind
    }

    // Take field
    pub fn take_v_ret_corp_ind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v_ret_corp_ind, ::std::string::String::new())
    }

    // string fb_nfb = 22;


    pub fn get_fb_nfb(&self) -> &str {
        &self.fb_nfb
    }
    pub fn clear_fb_nfb(&mut self) {
        self.fb_nfb.clear();
    }

    // Param is passed by value, moved
    pub fn set_fb_nfb(&mut self, v: ::std::string::String) {
        self.fb_nfb = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fb_nfb(&mut self) -> &mut ::std::string::String {
        &mut self.fb_nfb
    }

    // Take field
    pub fn take_fb_nfb(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fb_nfb, ::std::string::String::new())
    }

    // string ccod_flag = 23;


    pub fn get_ccod_flag(&self) -> &str {
        &self.ccod_flag
    }
    pub fn clear_ccod_flag(&mut self) {
        self.ccod_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccod_flag(&mut self, v: ::std::string::String) {
        self.ccod_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccod_flag(&mut self) -> &mut ::std::string::String {
        &mut self.ccod_flag
    }

    // Take field
    pub fn take_ccod_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccod_flag, ::std::string::String::new())
    }

    // string lcr_cat = 24;


    pub fn get_lcr_cat(&self) -> &str {
        &self.lcr_cat
    }
    pub fn clear_lcr_cat(&mut self) {
        self.lcr_cat.clear();
    }

    // Param is passed by value, moved
    pub fn set_lcr_cat(&mut self, v: ::std::string::String) {
        self.lcr_cat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lcr_cat(&mut self) -> &mut ::std::string::String {
        &mut self.lcr_cat
    }

    // Take field
    pub fn take_lcr_cat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lcr_cat, ::std::string::String::new())
    }

    // string asst_class_desc = 25;


    pub fn get_asst_class_desc(&self) -> &str {
        &self.asst_class_desc
    }
    pub fn clear_asst_class_desc(&mut self) {
        self.asst_class_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_asst_class_desc(&mut self, v: ::std::string::String) {
        self.asst_class_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asst_class_desc(&mut self) -> &mut ::std::string::String {
        &mut self.asst_class_desc
    }

    // Take field
    pub fn take_asst_class_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asst_class_desc, ::std::string::String::new())
    }

    // string final_map_lcr = 26;


    pub fn get_final_map_lcr(&self) -> &str {
        &self.final_map_lcr
    }
    pub fn clear_final_map_lcr(&mut self) {
        self.final_map_lcr.clear();
    }

    // Param is passed by value, moved
    pub fn set_final_map_lcr(&mut self, v: ::std::string::String) {
        self.final_map_lcr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_final_map_lcr(&mut self) -> &mut ::std::string::String {
        &mut self.final_map_lcr
    }

    // Take field
    pub fn take_final_map_lcr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.final_map_lcr, ::std::string::String::new())
    }

    // string flag_uncond_cancelled_exp_ind = 27;


    pub fn get_flag_uncond_cancelled_exp_ind(&self) -> &str {
        &self.flag_uncond_cancelled_exp_ind
    }
    pub fn clear_flag_uncond_cancelled_exp_ind(&mut self) {
        self.flag_uncond_cancelled_exp_ind.clear();
    }

    // Param is passed by value, moved
    pub fn set_flag_uncond_cancelled_exp_ind(&mut self, v: ::std::string::String) {
        self.flag_uncond_cancelled_exp_ind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flag_uncond_cancelled_exp_ind(&mut self) -> &mut ::std::string::String {
        &mut self.flag_uncond_cancelled_exp_ind
    }

    // Take field
    pub fn take_flag_uncond_cancelled_exp_ind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.flag_uncond_cancelled_exp_ind, ::std::string::String::new())
    }

    // double slr_amt = 28;


    pub fn get_slr_amt(&self) -> f64 {
        self.slr_amt
    }
    pub fn clear_slr_amt(&mut self) {
        self.slr_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_slr_amt(&mut self, v: f64) {
        self.slr_amt = v;
    }

    // double lcr_amt = 29;


    pub fn get_lcr_amt(&self) -> f64 {
        self.lcr_amt
    }
    pub fn clear_lcr_amt(&mut self) {
        self.lcr_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lcr_amt(&mut self, v: f64) {
        self.lcr_amt = v;
    }
}

impl ::protobuf::Message for OutputAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_src_sys_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_exp_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_d_cust_ref_code)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_line_code)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_prod_code)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_pp_table)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.n_ccf_prcnt = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.d_exp_strt_dt = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.d_exp_end_dt = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.n_exp_amt = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.n_undrawn_amt = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_basel_prod_typ_desc_lv1)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_basel_prod_typ_desc)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_basel_asst_class_desc)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_party_typ_desc)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_code)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_party_name)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_ram_id)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_ccy_code)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_fclty_desc)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v_ret_corp_ind)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fb_nfb)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccod_flag)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lcr_cat)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asst_class_desc)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.final_map_lcr)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.flag_uncond_cancelled_exp_ind)?;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.slr_amt = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.lcr_amt = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.v_src_sys_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.v_src_sys_id);
        }
        if !self.v_exp_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.v_exp_id);
        }
        if !self.v_d_cust_ref_code.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.v_d_cust_ref_code);
        }
        if !self.v_line_code.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.v_line_code);
        }
        if !self.v_prod_code.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.v_prod_code);
        }
        if !self.v_pp_table.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.v_pp_table);
        }
        if self.n_ccf_prcnt != 0. {
            my_size += 9;
        }
        if self.d_exp_strt_dt != 0 {
            my_size += ::protobuf::rt::value_size(8, self.d_exp_strt_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.d_exp_end_dt != 0 {
            my_size += ::protobuf::rt::value_size(9, self.d_exp_end_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.n_exp_amt != 0. {
            my_size += 9;
        }
        if self.n_undrawn_amt != 0. {
            my_size += 9;
        }
        if !self.v_basel_prod_typ_desc_lv1.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.v_basel_prod_typ_desc_lv1);
        }
        if !self.v_basel_prod_typ_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.v_basel_prod_typ_desc);
        }
        if !self.v_basel_asst_class_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.v_basel_asst_class_desc);
        }
        if !self.v_party_typ_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.v_party_typ_desc);
        }
        if !self.gl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.gl_code);
        }
        if !self.v_party_name.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.v_party_name);
        }
        if !self.v_ram_id.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.v_ram_id);
        }
        if !self.v_ccy_code.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.v_ccy_code);
        }
        if !self.v_fclty_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.v_fclty_desc);
        }
        if !self.v_ret_corp_ind.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.v_ret_corp_ind);
        }
        if !self.fb_nfb.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.fb_nfb);
        }
        if !self.ccod_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.ccod_flag);
        }
        if !self.lcr_cat.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.lcr_cat);
        }
        if !self.asst_class_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.asst_class_desc);
        }
        if !self.final_map_lcr.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.final_map_lcr);
        }
        if !self.flag_uncond_cancelled_exp_ind.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.flag_uncond_cancelled_exp_ind);
        }
        if self.slr_amt != 0. {
            my_size += 10;
        }
        if self.lcr_amt != 0. {
            my_size += 10;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.v_src_sys_id.is_empty() {
            os.write_string(1, &self.v_src_sys_id)?;
        }
        if !self.v_exp_id.is_empty() {
            os.write_string(2, &self.v_exp_id)?;
        }
        if !self.v_d_cust_ref_code.is_empty() {
            os.write_string(3, &self.v_d_cust_ref_code)?;
        }
        if !self.v_line_code.is_empty() {
            os.write_string(4, &self.v_line_code)?;
        }
        if !self.v_prod_code.is_empty() {
            os.write_string(5, &self.v_prod_code)?;
        }
        if !self.v_pp_table.is_empty() {
            os.write_string(6, &self.v_pp_table)?;
        }
        if self.n_ccf_prcnt != 0. {
            os.write_double(7, self.n_ccf_prcnt)?;
        }
        if self.d_exp_strt_dt != 0 {
            os.write_int64(8, self.d_exp_strt_dt)?;
        }
        if self.d_exp_end_dt != 0 {
            os.write_int64(9, self.d_exp_end_dt)?;
        }
        if self.n_exp_amt != 0. {
            os.write_double(10, self.n_exp_amt)?;
        }
        if self.n_undrawn_amt != 0. {
            os.write_double(11, self.n_undrawn_amt)?;
        }
        if !self.v_basel_prod_typ_desc_lv1.is_empty() {
            os.write_string(12, &self.v_basel_prod_typ_desc_lv1)?;
        }
        if !self.v_basel_prod_typ_desc.is_empty() {
            os.write_string(13, &self.v_basel_prod_typ_desc)?;
        }
        if !self.v_basel_asst_class_desc.is_empty() {
            os.write_string(14, &self.v_basel_asst_class_desc)?;
        }
        if !self.v_party_typ_desc.is_empty() {
            os.write_string(15, &self.v_party_typ_desc)?;
        }
        if !self.gl_code.is_empty() {
            os.write_string(16, &self.gl_code)?;
        }
        if !self.v_party_name.is_empty() {
            os.write_string(17, &self.v_party_name)?;
        }
        if !self.v_ram_id.is_empty() {
            os.write_string(18, &self.v_ram_id)?;
        }
        if !self.v_ccy_code.is_empty() {
            os.write_string(19, &self.v_ccy_code)?;
        }
        if !self.v_fclty_desc.is_empty() {
            os.write_string(20, &self.v_fclty_desc)?;
        }
        if !self.v_ret_corp_ind.is_empty() {
            os.write_string(21, &self.v_ret_corp_ind)?;
        }
        if !self.fb_nfb.is_empty() {
            os.write_string(22, &self.fb_nfb)?;
        }
        if !self.ccod_flag.is_empty() {
            os.write_string(23, &self.ccod_flag)?;
        }
        if !self.lcr_cat.is_empty() {
            os.write_string(24, &self.lcr_cat)?;
        }
        if !self.asst_class_desc.is_empty() {
            os.write_string(25, &self.asst_class_desc)?;
        }
        if !self.final_map_lcr.is_empty() {
            os.write_string(26, &self.final_map_lcr)?;
        }
        if !self.flag_uncond_cancelled_exp_ind.is_empty() {
            os.write_string(27, &self.flag_uncond_cancelled_exp_ind)?;
        }
        if self.slr_amt != 0. {
            os.write_double(28, self.slr_amt)?;
        }
        if self.lcr_amt != 0. {
            os.write_double(29, self.lcr_amt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputAccount {
        OutputAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_src_sys_id",
                |m: &OutputAccount| { &m.v_src_sys_id },
                |m: &mut OutputAccount| { &mut m.v_src_sys_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_exp_id",
                |m: &OutputAccount| { &m.v_exp_id },
                |m: &mut OutputAccount| { &mut m.v_exp_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_d_cust_ref_code",
                |m: &OutputAccount| { &m.v_d_cust_ref_code },
                |m: &mut OutputAccount| { &mut m.v_d_cust_ref_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_line_code",
                |m: &OutputAccount| { &m.v_line_code },
                |m: &mut OutputAccount| { &mut m.v_line_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_prod_code",
                |m: &OutputAccount| { &m.v_prod_code },
                |m: &mut OutputAccount| { &mut m.v_prod_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_pp_table",
                |m: &OutputAccount| { &m.v_pp_table },
                |m: &mut OutputAccount| { &mut m.v_pp_table },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "n_ccf_prcnt",
                |m: &OutputAccount| { &m.n_ccf_prcnt },
                |m: &mut OutputAccount| { &mut m.n_ccf_prcnt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "d_exp_strt_dt",
                |m: &OutputAccount| { &m.d_exp_strt_dt },
                |m: &mut OutputAccount| { &mut m.d_exp_strt_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "d_exp_end_dt",
                |m: &OutputAccount| { &m.d_exp_end_dt },
                |m: &mut OutputAccount| { &mut m.d_exp_end_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "n_exp_amt",
                |m: &OutputAccount| { &m.n_exp_amt },
                |m: &mut OutputAccount| { &mut m.n_exp_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "n_undrawn_amt",
                |m: &OutputAccount| { &m.n_undrawn_amt },
                |m: &mut OutputAccount| { &mut m.n_undrawn_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_basel_prod_typ_desc_lv1",
                |m: &OutputAccount| { &m.v_basel_prod_typ_desc_lv1 },
                |m: &mut OutputAccount| { &mut m.v_basel_prod_typ_desc_lv1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_basel_prod_typ_desc",
                |m: &OutputAccount| { &m.v_basel_prod_typ_desc },
                |m: &mut OutputAccount| { &mut m.v_basel_prod_typ_desc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_basel_asst_class_desc",
                |m: &OutputAccount| { &m.v_basel_asst_class_desc },
                |m: &mut OutputAccount| { &mut m.v_basel_asst_class_desc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_party_typ_desc",
                |m: &OutputAccount| { &m.v_party_typ_desc },
                |m: &mut OutputAccount| { &mut m.v_party_typ_desc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_code",
                |m: &OutputAccount| { &m.gl_code },
                |m: &mut OutputAccount| { &mut m.gl_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_party_name",
                |m: &OutputAccount| { &m.v_party_name },
                |m: &mut OutputAccount| { &mut m.v_party_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_ram_id",
                |m: &OutputAccount| { &m.v_ram_id },
                |m: &mut OutputAccount| { &mut m.v_ram_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_ccy_code",
                |m: &OutputAccount| { &m.v_ccy_code },
                |m: &mut OutputAccount| { &mut m.v_ccy_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_fclty_desc",
                |m: &OutputAccount| { &m.v_fclty_desc },
                |m: &mut OutputAccount| { &mut m.v_fclty_desc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "v_ret_corp_ind",
                |m: &OutputAccount| { &m.v_ret_corp_ind },
                |m: &mut OutputAccount| { &mut m.v_ret_corp_ind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fb_nfb",
                |m: &OutputAccount| { &m.fb_nfb },
                |m: &mut OutputAccount| { &mut m.fb_nfb },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ccod_flag",
                |m: &OutputAccount| { &m.ccod_flag },
                |m: &mut OutputAccount| { &mut m.ccod_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "lcr_cat",
                |m: &OutputAccount| { &m.lcr_cat },
                |m: &mut OutputAccount| { &mut m.lcr_cat },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asst_class_desc",
                |m: &OutputAccount| { &m.asst_class_desc },
                |m: &mut OutputAccount| { &mut m.asst_class_desc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "final_map_lcr",
                |m: &OutputAccount| { &m.final_map_lcr },
                |m: &mut OutputAccount| { &mut m.final_map_lcr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "flag_uncond_cancelled_exp_ind",
                |m: &OutputAccount| { &m.flag_uncond_cancelled_exp_ind },
                |m: &mut OutputAccount| { &mut m.flag_uncond_cancelled_exp_ind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "slr_amt",
                |m: &OutputAccount| { &m.slr_amt },
                |m: &mut OutputAccount| { &mut m.slr_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "lcr_amt",
                |m: &OutputAccount| { &m.lcr_amt },
                |m: &mut OutputAccount| { &mut m.lcr_amt },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OutputAccount>(
                "OutputAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OutputAccount {
        static instance: ::protobuf::rt::LazyV2<OutputAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OutputAccount::new)
    }
}

impl ::protobuf::Clear for OutputAccount {
    fn clear(&mut self) {
        self.v_src_sys_id.clear();
        self.v_exp_id.clear();
        self.v_d_cust_ref_code.clear();
        self.v_line_code.clear();
        self.v_prod_code.clear();
        self.v_pp_table.clear();
        self.n_ccf_prcnt = 0.;
        self.d_exp_strt_dt = 0;
        self.d_exp_end_dt = 0;
        self.n_exp_amt = 0.;
        self.n_undrawn_amt = 0.;
        self.v_basel_prod_typ_desc_lv1.clear();
        self.v_basel_prod_typ_desc.clear();
        self.v_basel_asst_class_desc.clear();
        self.v_party_typ_desc.clear();
        self.gl_code.clear();
        self.v_party_name.clear();
        self.v_ram_id.clear();
        self.v_ccy_code.clear();
        self.v_fclty_desc.clear();
        self.v_ret_corp_ind.clear();
        self.fb_nfb.clear();
        self.ccod_flag.clear();
        self.lcr_cat.clear();
        self.asst_class_desc.clear();
        self.final_map_lcr.clear();
        self.flag_uncond_cancelled_exp_ind.clear();
        self.slr_amt = 0.;
        self.lcr_amt = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12non-maturity.proto\"\x87\x08\n\rOutputAccount\x12\x1f\n\x0cv_src_s\
    ys_id\x18\x01\x20\x01(\tR\tvSrcSysId\x12\x18\n\x08v_exp_id\x18\x02\x20\
    \x01(\tR\x06vExpId\x12(\n\x11v_d_cust_ref_code\x18\x03\x20\x01(\tR\rvDCu\
    stRefCode\x12\x1e\n\x0bv_line_code\x18\x04\x20\x01(\tR\tvLineCode\x12\
    \x1e\n\x0bv_prod_code\x18\x05\x20\x01(\tR\tvProdCode\x12\x1c\n\nv_pp_tab\
    le\x18\x06\x20\x01(\tR\x08vPpTable\x12\x1e\n\x0bn_ccf_prcnt\x18\x07\x20\
    \x01(\x01R\tnCcfPrcnt\x12!\n\rd_exp_strt_dt\x18\x08\x20\x01(\x03R\ndExpS\
    trtDt\x12\x1f\n\x0cd_exp_end_dt\x18\t\x20\x01(\x03R\tdExpEndDt\x12\x1a\n\
    \tn_exp_amt\x18\n\x20\x01(\x01R\x07nExpAmt\x12\"\n\rn_undrawn_amt\x18\
    \x0b\x20\x01(\x01R\x0bnUndrawnAmt\x127\n\x19v_basel_prod_typ_desc_lv1\
    \x18\x0c\x20\x01(\tR\x14vBaselProdTypDescLv1\x120\n\x15v_basel_prod_typ_\
    desc\x18\r\x20\x01(\tR\x11vBaselProdTypDesc\x124\n\x17v_basel_asst_class\
    _desc\x18\x0e\x20\x01(\tR\x13vBaselAsstClassDesc\x12'\n\x10v_party_typ_d\
    esc\x18\x0f\x20\x01(\tR\rvPartyTypDesc\x12\x17\n\x07gl_code\x18\x10\x20\
    \x01(\tR\x06glCode\x12\x20\n\x0cv_party_name\x18\x11\x20\x01(\tR\nvParty\
    Name\x12\x18\n\x08v_ram_id\x18\x12\x20\x01(\tR\x06vRamId\x12\x1c\n\nv_cc\
    y_code\x18\x13\x20\x01(\tR\x08vCcyCode\x12\x20\n\x0cv_fclty_desc\x18\x14\
    \x20\x01(\tR\nvFcltyDesc\x12#\n\x0ev_ret_corp_ind\x18\x15\x20\x01(\tR\
    \x0bvRetCorpInd\x12\x15\n\x06fb_nfb\x18\x16\x20\x01(\tR\x05fbNfb\x12\x1b\
    \n\tccod_flag\x18\x17\x20\x01(\tR\x08ccodFlag\x12\x17\n\x07lcr_cat\x18\
    \x18\x20\x01(\tR\x06lcrCat\x12&\n\x0fasst_class_desc\x18\x19\x20\x01(\tR\
    \rasstClassDesc\x12\"\n\rfinal_map_lcr\x18\x1a\x20\x01(\tR\x0bfinalMapLc\
    r\x12@\n\x1dflag_uncond_cancelled_exp_ind\x18\x1b\x20\x01(\tR\x19flagUnc\
    ondCancelledExpInd\x12\x17\n\x07slr_amt\x18\x1c\x20\x01(\x01R\x06slrAmt\
    \x12\x17\n\x07lcr_amt\x18\x1d\x20\x01(\x01R\x06lcrAmtb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
