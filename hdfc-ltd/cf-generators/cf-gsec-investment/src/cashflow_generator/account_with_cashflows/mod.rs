// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub holding_deal_id: ::std::string::String,
    pub portfolio: ::std::string::String,
    pub instrument_type: ::std::string::String,
    pub isdiscounted: ::std::string::String,
    pub slr_non_slr: ::std::string::String,
    pub isin: ::std::string::String,
    pub issuer_id: ::std::string::String,
    pub issuer_name: ::std::string::String,
    pub security_id: ::std::string::String,
    pub security_name: ::std::string::String,
    pub deal_value_date: i64,
    pub issue_date: i64,
    pub maturity_date: i64,
    pub coupon_rate: f64,
    pub interest_calculation_basis: ::std::string::String,
    pub face_value_per_units: f64,
    pub quantity: i64,
    pub face_value: f64,
    pub currency: ::std::string::String,
    pub book_value: f64,
    pub market_value: f64,
    pub mtm: i64,
    pub market_yield: f64,
    pub interest_accruad_days: i64,
    pub accrued_interest: f64,
    pub coupon_pay_day: i64,
    pub coupon_type: ::std::string::String,
    pub spread: ::std::string::String,
    pub benchmark: ::std::string::String,
    pub coupon_frequency: ::std::string::String,
    pub last_coupon_date: i64,
    pub next_coupon_date: i64,
    pub last_repricing_date: i64,
    pub next_repricing_date: i64,
    pub put_date: i64,
    pub call_date: i64,
    pub is_listed: ::std::string::String,
    pub issuer_country: ::std::string::String,
    pub issuer_type: ::std::string::String,
    pub isuser_classification_1: ::std::string::String,
    pub isuser_classification_2: ::std::string::String,
    pub isuser_classification_3: ::std::string::String,
    pub gurantor_type: ::std::string::String,
    pub rating_agency: ::std::string::String,
    pub external_rating: ::std::string::String,
    pub asset_type: ::std::string::String,
    pub asset_category: ::std::string::String,
    pub treaury_gl_code: i64,
    pub m_npaclassification: ::std::string::String,
    pub internal_rating: ::std::string::String,
    pub customer_constitution_code: ::std::string::String,
    pub risk_weight: ::std::string::String,
    pub crar_basel_classification: ::std::string::String,
    pub app1: ::std::string::String,
    pub app2: ::std::string::String,
    pub app3: ::std::string::String,
    pub app4: ::std::string::String,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string holding_deal_id = 1;


    pub fn get_holding_deal_id(&self) -> &str {
        &self.holding_deal_id
    }
    pub fn clear_holding_deal_id(&mut self) {
        self.holding_deal_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_holding_deal_id(&mut self, v: ::std::string::String) {
        self.holding_deal_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_holding_deal_id(&mut self) -> &mut ::std::string::String {
        &mut self.holding_deal_id
    }

    // Take field
    pub fn take_holding_deal_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.holding_deal_id, ::std::string::String::new())
    }

    // string portfolio = 2;


    pub fn get_portfolio(&self) -> &str {
        &self.portfolio
    }
    pub fn clear_portfolio(&mut self) {
        self.portfolio.clear();
    }

    // Param is passed by value, moved
    pub fn set_portfolio(&mut self, v: ::std::string::String) {
        self.portfolio = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_portfolio(&mut self) -> &mut ::std::string::String {
        &mut self.portfolio
    }

    // Take field
    pub fn take_portfolio(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.portfolio, ::std::string::String::new())
    }

    // string instrument_type = 3;


    pub fn get_instrument_type(&self) -> &str {
        &self.instrument_type
    }
    pub fn clear_instrument_type(&mut self) {
        self.instrument_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_instrument_type(&mut self, v: ::std::string::String) {
        self.instrument_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instrument_type(&mut self) -> &mut ::std::string::String {
        &mut self.instrument_type
    }

    // Take field
    pub fn take_instrument_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instrument_type, ::std::string::String::new())
    }

    // string isdiscounted = 4;


    pub fn get_isdiscounted(&self) -> &str {
        &self.isdiscounted
    }
    pub fn clear_isdiscounted(&mut self) {
        self.isdiscounted.clear();
    }

    // Param is passed by value, moved
    pub fn set_isdiscounted(&mut self, v: ::std::string::String) {
        self.isdiscounted = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_isdiscounted(&mut self) -> &mut ::std::string::String {
        &mut self.isdiscounted
    }

    // Take field
    pub fn take_isdiscounted(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.isdiscounted, ::std::string::String::new())
    }

    // string slr_non_slr = 5;


    pub fn get_slr_non_slr(&self) -> &str {
        &self.slr_non_slr
    }
    pub fn clear_slr_non_slr(&mut self) {
        self.slr_non_slr.clear();
    }

    // Param is passed by value, moved
    pub fn set_slr_non_slr(&mut self, v: ::std::string::String) {
        self.slr_non_slr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slr_non_slr(&mut self) -> &mut ::std::string::String {
        &mut self.slr_non_slr
    }

    // Take field
    pub fn take_slr_non_slr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.slr_non_slr, ::std::string::String::new())
    }

    // string isin = 6;


    pub fn get_isin(&self) -> &str {
        &self.isin
    }
    pub fn clear_isin(&mut self) {
        self.isin.clear();
    }

    // Param is passed by value, moved
    pub fn set_isin(&mut self, v: ::std::string::String) {
        self.isin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_isin(&mut self) -> &mut ::std::string::String {
        &mut self.isin
    }

    // Take field
    pub fn take_isin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.isin, ::std::string::String::new())
    }

    // string issuer_id = 7;


    pub fn get_issuer_id(&self) -> &str {
        &self.issuer_id
    }
    pub fn clear_issuer_id(&mut self) {
        self.issuer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer_id(&mut self, v: ::std::string::String) {
        self.issuer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer_id(&mut self) -> &mut ::std::string::String {
        &mut self.issuer_id
    }

    // Take field
    pub fn take_issuer_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer_id, ::std::string::String::new())
    }

    // string issuer_name = 8;


    pub fn get_issuer_name(&self) -> &str {
        &self.issuer_name
    }
    pub fn clear_issuer_name(&mut self) {
        self.issuer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer_name(&mut self, v: ::std::string::String) {
        self.issuer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer_name(&mut self) -> &mut ::std::string::String {
        &mut self.issuer_name
    }

    // Take field
    pub fn take_issuer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer_name, ::std::string::String::new())
    }

    // string security_id = 9;


    pub fn get_security_id(&self) -> &str {
        &self.security_id
    }
    pub fn clear_security_id(&mut self) {
        self.security_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_security_id(&mut self, v: ::std::string::String) {
        self.security_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_security_id(&mut self) -> &mut ::std::string::String {
        &mut self.security_id
    }

    // Take field
    pub fn take_security_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.security_id, ::std::string::String::new())
    }

    // string security_name = 10;


    pub fn get_security_name(&self) -> &str {
        &self.security_name
    }
    pub fn clear_security_name(&mut self) {
        self.security_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_security_name(&mut self, v: ::std::string::String) {
        self.security_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_security_name(&mut self) -> &mut ::std::string::String {
        &mut self.security_name
    }

    // Take field
    pub fn take_security_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.security_name, ::std::string::String::new())
    }

    // int64 deal_value_date = 11;


    pub fn get_deal_value_date(&self) -> i64 {
        self.deal_value_date
    }
    pub fn clear_deal_value_date(&mut self) {
        self.deal_value_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_deal_value_date(&mut self, v: i64) {
        self.deal_value_date = v;
    }

    // int64 issue_date = 12;


    pub fn get_issue_date(&self) -> i64 {
        self.issue_date
    }
    pub fn clear_issue_date(&mut self) {
        self.issue_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_issue_date(&mut self, v: i64) {
        self.issue_date = v;
    }

    // int64 maturity_date = 13;


    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }
    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    // double coupon_rate = 14;


    pub fn get_coupon_rate(&self) -> f64 {
        self.coupon_rate
    }
    pub fn clear_coupon_rate(&mut self) {
        self.coupon_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_coupon_rate(&mut self, v: f64) {
        self.coupon_rate = v;
    }

    // string interest_calculation_basis = 15;


    pub fn get_interest_calculation_basis(&self) -> &str {
        &self.interest_calculation_basis
    }
    pub fn clear_interest_calculation_basis(&mut self) {
        self.interest_calculation_basis.clear();
    }

    // Param is passed by value, moved
    pub fn set_interest_calculation_basis(&mut self, v: ::std::string::String) {
        self.interest_calculation_basis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interest_calculation_basis(&mut self) -> &mut ::std::string::String {
        &mut self.interest_calculation_basis
    }

    // Take field
    pub fn take_interest_calculation_basis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interest_calculation_basis, ::std::string::String::new())
    }

    // double face_value_per_units = 16;


    pub fn get_face_value_per_units(&self) -> f64 {
        self.face_value_per_units
    }
    pub fn clear_face_value_per_units(&mut self) {
        self.face_value_per_units = 0.;
    }

    // Param is passed by value, moved
    pub fn set_face_value_per_units(&mut self, v: f64) {
        self.face_value_per_units = v;
    }

    // int64 quantity = 17;


    pub fn get_quantity(&self) -> i64 {
        self.quantity
    }
    pub fn clear_quantity(&mut self) {
        self.quantity = 0;
    }

    // Param is passed by value, moved
    pub fn set_quantity(&mut self, v: i64) {
        self.quantity = v;
    }

    // double face_value = 18;


    pub fn get_face_value(&self) -> f64 {
        self.face_value
    }
    pub fn clear_face_value(&mut self) {
        self.face_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_face_value(&mut self, v: f64) {
        self.face_value = v;
    }

    // string currency = 19;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // double book_value = 20;


    pub fn get_book_value(&self) -> f64 {
        self.book_value
    }
    pub fn clear_book_value(&mut self) {
        self.book_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_book_value(&mut self, v: f64) {
        self.book_value = v;
    }

    // double market_value = 21;


    pub fn get_market_value(&self) -> f64 {
        self.market_value
    }
    pub fn clear_market_value(&mut self) {
        self.market_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_market_value(&mut self, v: f64) {
        self.market_value = v;
    }

    // int64 mtm = 22;


    pub fn get_mtm(&self) -> i64 {
        self.mtm
    }
    pub fn clear_mtm(&mut self) {
        self.mtm = 0;
    }

    // Param is passed by value, moved
    pub fn set_mtm(&mut self, v: i64) {
        self.mtm = v;
    }

    // double market_yield = 23;


    pub fn get_market_yield(&self) -> f64 {
        self.market_yield
    }
    pub fn clear_market_yield(&mut self) {
        self.market_yield = 0.;
    }

    // Param is passed by value, moved
    pub fn set_market_yield(&mut self, v: f64) {
        self.market_yield = v;
    }

    // int64 interest_accruad_days = 24;


    pub fn get_interest_accruad_days(&self) -> i64 {
        self.interest_accruad_days
    }
    pub fn clear_interest_accruad_days(&mut self) {
        self.interest_accruad_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_interest_accruad_days(&mut self, v: i64) {
        self.interest_accruad_days = v;
    }

    // double accrued_interest = 25;


    pub fn get_accrued_interest(&self) -> f64 {
        self.accrued_interest
    }
    pub fn clear_accrued_interest(&mut self) {
        self.accrued_interest = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accrued_interest(&mut self, v: f64) {
        self.accrued_interest = v;
    }

    // int64 coupon_pay_day = 26;


    pub fn get_coupon_pay_day(&self) -> i64 {
        self.coupon_pay_day
    }
    pub fn clear_coupon_pay_day(&mut self) {
        self.coupon_pay_day = 0;
    }

    // Param is passed by value, moved
    pub fn set_coupon_pay_day(&mut self, v: i64) {
        self.coupon_pay_day = v;
    }

    // string coupon_type = 27;


    pub fn get_coupon_type(&self) -> &str {
        &self.coupon_type
    }
    pub fn clear_coupon_type(&mut self) {
        self.coupon_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_coupon_type(&mut self, v: ::std::string::String) {
        self.coupon_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coupon_type(&mut self) -> &mut ::std::string::String {
        &mut self.coupon_type
    }

    // Take field
    pub fn take_coupon_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coupon_type, ::std::string::String::new())
    }

    // string spread = 28;


    pub fn get_spread(&self) -> &str {
        &self.spread
    }
    pub fn clear_spread(&mut self) {
        self.spread.clear();
    }

    // Param is passed by value, moved
    pub fn set_spread(&mut self, v: ::std::string::String) {
        self.spread = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spread(&mut self) -> &mut ::std::string::String {
        &mut self.spread
    }

    // Take field
    pub fn take_spread(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.spread, ::std::string::String::new())
    }

    // string benchmark = 29;


    pub fn get_benchmark(&self) -> &str {
        &self.benchmark
    }
    pub fn clear_benchmark(&mut self) {
        self.benchmark.clear();
    }

    // Param is passed by value, moved
    pub fn set_benchmark(&mut self, v: ::std::string::String) {
        self.benchmark = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_benchmark(&mut self) -> &mut ::std::string::String {
        &mut self.benchmark
    }

    // Take field
    pub fn take_benchmark(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.benchmark, ::std::string::String::new())
    }

    // string coupon_frequency = 30;


    pub fn get_coupon_frequency(&self) -> &str {
        &self.coupon_frequency
    }
    pub fn clear_coupon_frequency(&mut self) {
        self.coupon_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_coupon_frequency(&mut self, v: ::std::string::String) {
        self.coupon_frequency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coupon_frequency(&mut self) -> &mut ::std::string::String {
        &mut self.coupon_frequency
    }

    // Take field
    pub fn take_coupon_frequency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coupon_frequency, ::std::string::String::new())
    }

    // int64 last_coupon_date = 31;


    pub fn get_last_coupon_date(&self) -> i64 {
        self.last_coupon_date
    }
    pub fn clear_last_coupon_date(&mut self) {
        self.last_coupon_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_coupon_date(&mut self, v: i64) {
        self.last_coupon_date = v;
    }

    // int64 next_coupon_date = 32;


    pub fn get_next_coupon_date(&self) -> i64 {
        self.next_coupon_date
    }
    pub fn clear_next_coupon_date(&mut self) {
        self.next_coupon_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_coupon_date(&mut self, v: i64) {
        self.next_coupon_date = v;
    }

    // int64 last_repricing_date = 33;


    pub fn get_last_repricing_date(&self) -> i64 {
        self.last_repricing_date
    }
    pub fn clear_last_repricing_date(&mut self) {
        self.last_repricing_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_repricing_date(&mut self, v: i64) {
        self.last_repricing_date = v;
    }

    // int64 next_repricing_date = 34;


    pub fn get_next_repricing_date(&self) -> i64 {
        self.next_repricing_date
    }
    pub fn clear_next_repricing_date(&mut self) {
        self.next_repricing_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_repricing_date(&mut self, v: i64) {
        self.next_repricing_date = v;
    }

    // int64 put_date = 35;


    pub fn get_put_date(&self) -> i64 {
        self.put_date
    }
    pub fn clear_put_date(&mut self) {
        self.put_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_put_date(&mut self, v: i64) {
        self.put_date = v;
    }

    // int64 call_date = 36;


    pub fn get_call_date(&self) -> i64 {
        self.call_date
    }
    pub fn clear_call_date(&mut self) {
        self.call_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_call_date(&mut self, v: i64) {
        self.call_date = v;
    }

    // string is_listed = 37;


    pub fn get_is_listed(&self) -> &str {
        &self.is_listed
    }
    pub fn clear_is_listed(&mut self) {
        self.is_listed.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_listed(&mut self, v: ::std::string::String) {
        self.is_listed = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_listed(&mut self) -> &mut ::std::string::String {
        &mut self.is_listed
    }

    // Take field
    pub fn take_is_listed(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.is_listed, ::std::string::String::new())
    }

    // string issuer_country = 38;


    pub fn get_issuer_country(&self) -> &str {
        &self.issuer_country
    }
    pub fn clear_issuer_country(&mut self) {
        self.issuer_country.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer_country(&mut self, v: ::std::string::String) {
        self.issuer_country = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer_country(&mut self) -> &mut ::std::string::String {
        &mut self.issuer_country
    }

    // Take field
    pub fn take_issuer_country(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer_country, ::std::string::String::new())
    }

    // string issuer_type = 39;


    pub fn get_issuer_type(&self) -> &str {
        &self.issuer_type
    }
    pub fn clear_issuer_type(&mut self) {
        self.issuer_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer_type(&mut self, v: ::std::string::String) {
        self.issuer_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer_type(&mut self) -> &mut ::std::string::String {
        &mut self.issuer_type
    }

    // Take field
    pub fn take_issuer_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer_type, ::std::string::String::new())
    }

    // string isuser_classification_1 = 40;


    pub fn get_isuser_classification_1(&self) -> &str {
        &self.isuser_classification_1
    }
    pub fn clear_isuser_classification_1(&mut self) {
        self.isuser_classification_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_isuser_classification_1(&mut self, v: ::std::string::String) {
        self.isuser_classification_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_isuser_classification_1(&mut self) -> &mut ::std::string::String {
        &mut self.isuser_classification_1
    }

    // Take field
    pub fn take_isuser_classification_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.isuser_classification_1, ::std::string::String::new())
    }

    // string isuser_classification_2 = 41;


    pub fn get_isuser_classification_2(&self) -> &str {
        &self.isuser_classification_2
    }
    pub fn clear_isuser_classification_2(&mut self) {
        self.isuser_classification_2.clear();
    }

    // Param is passed by value, moved
    pub fn set_isuser_classification_2(&mut self, v: ::std::string::String) {
        self.isuser_classification_2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_isuser_classification_2(&mut self) -> &mut ::std::string::String {
        &mut self.isuser_classification_2
    }

    // Take field
    pub fn take_isuser_classification_2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.isuser_classification_2, ::std::string::String::new())
    }

    // string isuser_classification_3 = 42;


    pub fn get_isuser_classification_3(&self) -> &str {
        &self.isuser_classification_3
    }
    pub fn clear_isuser_classification_3(&mut self) {
        self.isuser_classification_3.clear();
    }

    // Param is passed by value, moved
    pub fn set_isuser_classification_3(&mut self, v: ::std::string::String) {
        self.isuser_classification_3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_isuser_classification_3(&mut self) -> &mut ::std::string::String {
        &mut self.isuser_classification_3
    }

    // Take field
    pub fn take_isuser_classification_3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.isuser_classification_3, ::std::string::String::new())
    }

    // string gurantor_type = 43;


    pub fn get_gurantor_type(&self) -> &str {
        &self.gurantor_type
    }
    pub fn clear_gurantor_type(&mut self) {
        self.gurantor_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_gurantor_type(&mut self, v: ::std::string::String) {
        self.gurantor_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gurantor_type(&mut self) -> &mut ::std::string::String {
        &mut self.gurantor_type
    }

    // Take field
    pub fn take_gurantor_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gurantor_type, ::std::string::String::new())
    }

    // string rating_agency = 44;


    pub fn get_rating_agency(&self) -> &str {
        &self.rating_agency
    }
    pub fn clear_rating_agency(&mut self) {
        self.rating_agency.clear();
    }

    // Param is passed by value, moved
    pub fn set_rating_agency(&mut self, v: ::std::string::String) {
        self.rating_agency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rating_agency(&mut self) -> &mut ::std::string::String {
        &mut self.rating_agency
    }

    // Take field
    pub fn take_rating_agency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rating_agency, ::std::string::String::new())
    }

    // string external_rating = 45;


    pub fn get_external_rating(&self) -> &str {
        &self.external_rating
    }
    pub fn clear_external_rating(&mut self) {
        self.external_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_external_rating(&mut self, v: ::std::string::String) {
        self.external_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_external_rating(&mut self) -> &mut ::std::string::String {
        &mut self.external_rating
    }

    // Take field
    pub fn take_external_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.external_rating, ::std::string::String::new())
    }

    // string asset_type = 46;


    pub fn get_asset_type(&self) -> &str {
        &self.asset_type
    }
    pub fn clear_asset_type(&mut self) {
        self.asset_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_type(&mut self, v: ::std::string::String) {
        self.asset_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_type(&mut self) -> &mut ::std::string::String {
        &mut self.asset_type
    }

    // Take field
    pub fn take_asset_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_type, ::std::string::String::new())
    }

    // string asset_category = 47;


    pub fn get_asset_category(&self) -> &str {
        &self.asset_category
    }
    pub fn clear_asset_category(&mut self) {
        self.asset_category.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_category(&mut self, v: ::std::string::String) {
        self.asset_category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_category(&mut self) -> &mut ::std::string::String {
        &mut self.asset_category
    }

    // Take field
    pub fn take_asset_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_category, ::std::string::String::new())
    }

    // int64 treaury_gl_code = 48;


    pub fn get_treaury_gl_code(&self) -> i64 {
        self.treaury_gl_code
    }
    pub fn clear_treaury_gl_code(&mut self) {
        self.treaury_gl_code = 0;
    }

    // Param is passed by value, moved
    pub fn set_treaury_gl_code(&mut self, v: i64) {
        self.treaury_gl_code = v;
    }

    // string m_npaclassification = 49;


    pub fn get_m_npaclassification(&self) -> &str {
        &self.m_npaclassification
    }
    pub fn clear_m_npaclassification(&mut self) {
        self.m_npaclassification.clear();
    }

    // Param is passed by value, moved
    pub fn set_m_npaclassification(&mut self, v: ::std::string::String) {
        self.m_npaclassification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_m_npaclassification(&mut self) -> &mut ::std::string::String {
        &mut self.m_npaclassification
    }

    // Take field
    pub fn take_m_npaclassification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.m_npaclassification, ::std::string::String::new())
    }

    // string internal_rating = 50;


    pub fn get_internal_rating(&self) -> &str {
        &self.internal_rating
    }
    pub fn clear_internal_rating(&mut self) {
        self.internal_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_internal_rating(&mut self, v: ::std::string::String) {
        self.internal_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_internal_rating(&mut self) -> &mut ::std::string::String {
        &mut self.internal_rating
    }

    // Take field
    pub fn take_internal_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.internal_rating, ::std::string::String::new())
    }

    // string customer_constitution_code = 51;


    pub fn get_customer_constitution_code(&self) -> &str {
        &self.customer_constitution_code
    }
    pub fn clear_customer_constitution_code(&mut self) {
        self.customer_constitution_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_constitution_code(&mut self, v: ::std::string::String) {
        self.customer_constitution_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_constitution_code(&mut self) -> &mut ::std::string::String {
        &mut self.customer_constitution_code
    }

    // Take field
    pub fn take_customer_constitution_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_constitution_code, ::std::string::String::new())
    }

    // string risk_weight = 52;


    pub fn get_risk_weight(&self) -> &str {
        &self.risk_weight
    }
    pub fn clear_risk_weight(&mut self) {
        self.risk_weight.clear();
    }

    // Param is passed by value, moved
    pub fn set_risk_weight(&mut self, v: ::std::string::String) {
        self.risk_weight = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_risk_weight(&mut self) -> &mut ::std::string::String {
        &mut self.risk_weight
    }

    // Take field
    pub fn take_risk_weight(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.risk_weight, ::std::string::String::new())
    }

    // string crar_basel_classification = 53;


    pub fn get_crar_basel_classification(&self) -> &str {
        &self.crar_basel_classification
    }
    pub fn clear_crar_basel_classification(&mut self) {
        self.crar_basel_classification.clear();
    }

    // Param is passed by value, moved
    pub fn set_crar_basel_classification(&mut self, v: ::std::string::String) {
        self.crar_basel_classification = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_crar_basel_classification(&mut self) -> &mut ::std::string::String {
        &mut self.crar_basel_classification
    }

    // Take field
    pub fn take_crar_basel_classification(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.crar_basel_classification, ::std::string::String::new())
    }

    // string app1 = 54;


    pub fn get_app1(&self) -> &str {
        &self.app1
    }
    pub fn clear_app1(&mut self) {
        self.app1.clear();
    }

    // Param is passed by value, moved
    pub fn set_app1(&mut self, v: ::std::string::String) {
        self.app1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app1(&mut self) -> &mut ::std::string::String {
        &mut self.app1
    }

    // Take field
    pub fn take_app1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app1, ::std::string::String::new())
    }

    // string app2 = 55;


    pub fn get_app2(&self) -> &str {
        &self.app2
    }
    pub fn clear_app2(&mut self) {
        self.app2.clear();
    }

    // Param is passed by value, moved
    pub fn set_app2(&mut self, v: ::std::string::String) {
        self.app2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app2(&mut self) -> &mut ::std::string::String {
        &mut self.app2
    }

    // Take field
    pub fn take_app2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app2, ::std::string::String::new())
    }

    // string app3 = 56;


    pub fn get_app3(&self) -> &str {
        &self.app3
    }
    pub fn clear_app3(&mut self) {
        self.app3.clear();
    }

    // Param is passed by value, moved
    pub fn set_app3(&mut self, v: ::std::string::String) {
        self.app3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app3(&mut self) -> &mut ::std::string::String {
        &mut self.app3
    }

    // Take field
    pub fn take_app3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app3, ::std::string::String::new())
    }

    // string app4 = 57;


    pub fn get_app4(&self) -> &str {
        &self.app4
    }
    pub fn clear_app4(&mut self) {
        self.app4.clear();
    }

    // Param is passed by value, moved
    pub fn set_app4(&mut self, v: ::std::string::String) {
        self.app4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app4(&mut self) -> &mut ::std::string::String {
        &mut self.app4
    }

    // Take field
    pub fn take_app4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app4, ::std::string::String::new())
    }

    // repeated .Cashflow cashflows = 58;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.holding_deal_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.portfolio)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instrument_type)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.isdiscounted)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.slr_non_slr)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.isin)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer_id)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer_name)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.security_id)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.security_name)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deal_value_date = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.issue_date = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.coupon_rate = tmp;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interest_calculation_basis)?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.face_value_per_units = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.quantity = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.face_value = tmp;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.book_value = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.market_value = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mtm = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.market_yield = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.interest_accruad_days = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.accrued_interest = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.coupon_pay_day = tmp;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coupon_type)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.spread)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.benchmark)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coupon_frequency)?;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_coupon_date = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_coupon_date = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_repricing_date = tmp;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_repricing_date = tmp;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.put_date = tmp;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.call_date = tmp;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.is_listed)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer_country)?;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer_type)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.isuser_classification_1)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.isuser_classification_2)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.isuser_classification_3)?;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gurantor_type)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rating_agency)?;
                },
                45 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.external_rating)?;
                },
                46 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_type)?;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_category)?;
                },
                48 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.treaury_gl_code = tmp;
                },
                49 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.m_npaclassification)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.internal_rating)?;
                },
                51 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customer_constitution_code)?;
                },
                52 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.risk_weight)?;
                },
                53 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.crar_basel_classification)?;
                },
                54 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app1)?;
                },
                55 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app2)?;
                },
                56 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app3)?;
                },
                57 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app4)?;
                },
                58 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.holding_deal_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.holding_deal_id);
        }
        if !self.portfolio.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.portfolio);
        }
        if !self.instrument_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.instrument_type);
        }
        if !self.isdiscounted.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.isdiscounted);
        }
        if !self.slr_non_slr.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.slr_non_slr);
        }
        if !self.isin.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.isin);
        }
        if !self.issuer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.issuer_id);
        }
        if !self.issuer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.issuer_name);
        }
        if !self.security_id.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.security_id);
        }
        if !self.security_name.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.security_name);
        }
        if self.deal_value_date != 0 {
            my_size += ::protobuf::rt::value_size(11, self.deal_value_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.issue_date != 0 {
            my_size += ::protobuf::rt::value_size(12, self.issue_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(13, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.coupon_rate != 0. {
            my_size += 9;
        }
        if !self.interest_calculation_basis.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.interest_calculation_basis);
        }
        if self.face_value_per_units != 0. {
            my_size += 10;
        }
        if self.quantity != 0 {
            my_size += ::protobuf::rt::value_size(17, self.quantity, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.face_value != 0. {
            my_size += 10;
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.currency);
        }
        if self.book_value != 0. {
            my_size += 10;
        }
        if self.market_value != 0. {
            my_size += 10;
        }
        if self.mtm != 0 {
            my_size += ::protobuf::rt::value_size(22, self.mtm, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.market_yield != 0. {
            my_size += 10;
        }
        if self.interest_accruad_days != 0 {
            my_size += ::protobuf::rt::value_size(24, self.interest_accruad_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.accrued_interest != 0. {
            my_size += 10;
        }
        if self.coupon_pay_day != 0 {
            my_size += ::protobuf::rt::value_size(26, self.coupon_pay_day, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.coupon_type.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.coupon_type);
        }
        if !self.spread.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.spread);
        }
        if !self.benchmark.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.benchmark);
        }
        if !self.coupon_frequency.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.coupon_frequency);
        }
        if self.last_coupon_date != 0 {
            my_size += ::protobuf::rt::value_size(31, self.last_coupon_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_coupon_date != 0 {
            my_size += ::protobuf::rt::value_size(32, self.next_coupon_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_repricing_date != 0 {
            my_size += ::protobuf::rt::value_size(33, self.last_repricing_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_repricing_date != 0 {
            my_size += ::protobuf::rt::value_size(34, self.next_repricing_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.put_date != 0 {
            my_size += ::protobuf::rt::value_size(35, self.put_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.call_date != 0 {
            my_size += ::protobuf::rt::value_size(36, self.call_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.is_listed.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.is_listed);
        }
        if !self.issuer_country.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.issuer_country);
        }
        if !self.issuer_type.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.issuer_type);
        }
        if !self.isuser_classification_1.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.isuser_classification_1);
        }
        if !self.isuser_classification_2.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.isuser_classification_2);
        }
        if !self.isuser_classification_3.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.isuser_classification_3);
        }
        if !self.gurantor_type.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.gurantor_type);
        }
        if !self.rating_agency.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.rating_agency);
        }
        if !self.external_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(45, &self.external_rating);
        }
        if !self.asset_type.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.asset_type);
        }
        if !self.asset_category.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.asset_category);
        }
        if self.treaury_gl_code != 0 {
            my_size += ::protobuf::rt::value_size(48, self.treaury_gl_code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.m_npaclassification.is_empty() {
            my_size += ::protobuf::rt::string_size(49, &self.m_npaclassification);
        }
        if !self.internal_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(50, &self.internal_rating);
        }
        if !self.customer_constitution_code.is_empty() {
            my_size += ::protobuf::rt::string_size(51, &self.customer_constitution_code);
        }
        if !self.risk_weight.is_empty() {
            my_size += ::protobuf::rt::string_size(52, &self.risk_weight);
        }
        if !self.crar_basel_classification.is_empty() {
            my_size += ::protobuf::rt::string_size(53, &self.crar_basel_classification);
        }
        if !self.app1.is_empty() {
            my_size += ::protobuf::rt::string_size(54, &self.app1);
        }
        if !self.app2.is_empty() {
            my_size += ::protobuf::rt::string_size(55, &self.app2);
        }
        if !self.app3.is_empty() {
            my_size += ::protobuf::rt::string_size(56, &self.app3);
        }
        if !self.app4.is_empty() {
            my_size += ::protobuf::rt::string_size(57, &self.app4);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.holding_deal_id.is_empty() {
            os.write_string(1, &self.holding_deal_id)?;
        }
        if !self.portfolio.is_empty() {
            os.write_string(2, &self.portfolio)?;
        }
        if !self.instrument_type.is_empty() {
            os.write_string(3, &self.instrument_type)?;
        }
        if !self.isdiscounted.is_empty() {
            os.write_string(4, &self.isdiscounted)?;
        }
        if !self.slr_non_slr.is_empty() {
            os.write_string(5, &self.slr_non_slr)?;
        }
        if !self.isin.is_empty() {
            os.write_string(6, &self.isin)?;
        }
        if !self.issuer_id.is_empty() {
            os.write_string(7, &self.issuer_id)?;
        }
        if !self.issuer_name.is_empty() {
            os.write_string(8, &self.issuer_name)?;
        }
        if !self.security_id.is_empty() {
            os.write_string(9, &self.security_id)?;
        }
        if !self.security_name.is_empty() {
            os.write_string(10, &self.security_name)?;
        }
        if self.deal_value_date != 0 {
            os.write_int64(11, self.deal_value_date)?;
        }
        if self.issue_date != 0 {
            os.write_int64(12, self.issue_date)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(13, self.maturity_date)?;
        }
        if self.coupon_rate != 0. {
            os.write_double(14, self.coupon_rate)?;
        }
        if !self.interest_calculation_basis.is_empty() {
            os.write_string(15, &self.interest_calculation_basis)?;
        }
        if self.face_value_per_units != 0. {
            os.write_double(16, self.face_value_per_units)?;
        }
        if self.quantity != 0 {
            os.write_int64(17, self.quantity)?;
        }
        if self.face_value != 0. {
            os.write_double(18, self.face_value)?;
        }
        if !self.currency.is_empty() {
            os.write_string(19, &self.currency)?;
        }
        if self.book_value != 0. {
            os.write_double(20, self.book_value)?;
        }
        if self.market_value != 0. {
            os.write_double(21, self.market_value)?;
        }
        if self.mtm != 0 {
            os.write_int64(22, self.mtm)?;
        }
        if self.market_yield != 0. {
            os.write_double(23, self.market_yield)?;
        }
        if self.interest_accruad_days != 0 {
            os.write_int64(24, self.interest_accruad_days)?;
        }
        if self.accrued_interest != 0. {
            os.write_double(25, self.accrued_interest)?;
        }
        if self.coupon_pay_day != 0 {
            os.write_int64(26, self.coupon_pay_day)?;
        }
        if !self.coupon_type.is_empty() {
            os.write_string(27, &self.coupon_type)?;
        }
        if !self.spread.is_empty() {
            os.write_string(28, &self.spread)?;
        }
        if !self.benchmark.is_empty() {
            os.write_string(29, &self.benchmark)?;
        }
        if !self.coupon_frequency.is_empty() {
            os.write_string(30, &self.coupon_frequency)?;
        }
        if self.last_coupon_date != 0 {
            os.write_int64(31, self.last_coupon_date)?;
        }
        if self.next_coupon_date != 0 {
            os.write_int64(32, self.next_coupon_date)?;
        }
        if self.last_repricing_date != 0 {
            os.write_int64(33, self.last_repricing_date)?;
        }
        if self.next_repricing_date != 0 {
            os.write_int64(34, self.next_repricing_date)?;
        }
        if self.put_date != 0 {
            os.write_int64(35, self.put_date)?;
        }
        if self.call_date != 0 {
            os.write_int64(36, self.call_date)?;
        }
        if !self.is_listed.is_empty() {
            os.write_string(37, &self.is_listed)?;
        }
        if !self.issuer_country.is_empty() {
            os.write_string(38, &self.issuer_country)?;
        }
        if !self.issuer_type.is_empty() {
            os.write_string(39, &self.issuer_type)?;
        }
        if !self.isuser_classification_1.is_empty() {
            os.write_string(40, &self.isuser_classification_1)?;
        }
        if !self.isuser_classification_2.is_empty() {
            os.write_string(41, &self.isuser_classification_2)?;
        }
        if !self.isuser_classification_3.is_empty() {
            os.write_string(42, &self.isuser_classification_3)?;
        }
        if !self.gurantor_type.is_empty() {
            os.write_string(43, &self.gurantor_type)?;
        }
        if !self.rating_agency.is_empty() {
            os.write_string(44, &self.rating_agency)?;
        }
        if !self.external_rating.is_empty() {
            os.write_string(45, &self.external_rating)?;
        }
        if !self.asset_type.is_empty() {
            os.write_string(46, &self.asset_type)?;
        }
        if !self.asset_category.is_empty() {
            os.write_string(47, &self.asset_category)?;
        }
        if self.treaury_gl_code != 0 {
            os.write_int64(48, self.treaury_gl_code)?;
        }
        if !self.m_npaclassification.is_empty() {
            os.write_string(49, &self.m_npaclassification)?;
        }
        if !self.internal_rating.is_empty() {
            os.write_string(50, &self.internal_rating)?;
        }
        if !self.customer_constitution_code.is_empty() {
            os.write_string(51, &self.customer_constitution_code)?;
        }
        if !self.risk_weight.is_empty() {
            os.write_string(52, &self.risk_weight)?;
        }
        if !self.crar_basel_classification.is_empty() {
            os.write_string(53, &self.crar_basel_classification)?;
        }
        if !self.app1.is_empty() {
            os.write_string(54, &self.app1)?;
        }
        if !self.app2.is_empty() {
            os.write_string(55, &self.app2)?;
        }
        if !self.app3.is_empty() {
            os.write_string(56, &self.app3)?;
        }
        if !self.app4.is_empty() {
            os.write_string(57, &self.app4)?;
        }
        for v in &self.cashflows {
            os.write_tag(58, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "holding_deal_id",
                |m: &AccountWithCashflows| { &m.holding_deal_id },
                |m: &mut AccountWithCashflows| { &mut m.holding_deal_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "portfolio",
                |m: &AccountWithCashflows| { &m.portfolio },
                |m: &mut AccountWithCashflows| { &mut m.portfolio },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instrument_type",
                |m: &AccountWithCashflows| { &m.instrument_type },
                |m: &mut AccountWithCashflows| { &mut m.instrument_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "isdiscounted",
                |m: &AccountWithCashflows| { &m.isdiscounted },
                |m: &mut AccountWithCashflows| { &mut m.isdiscounted },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "slr_non_slr",
                |m: &AccountWithCashflows| { &m.slr_non_slr },
                |m: &mut AccountWithCashflows| { &mut m.slr_non_slr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "isin",
                |m: &AccountWithCashflows| { &m.isin },
                |m: &mut AccountWithCashflows| { &mut m.isin },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "issuer_id",
                |m: &AccountWithCashflows| { &m.issuer_id },
                |m: &mut AccountWithCashflows| { &mut m.issuer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "issuer_name",
                |m: &AccountWithCashflows| { &m.issuer_name },
                |m: &mut AccountWithCashflows| { &mut m.issuer_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "security_id",
                |m: &AccountWithCashflows| { &m.security_id },
                |m: &mut AccountWithCashflows| { &mut m.security_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "security_name",
                |m: &AccountWithCashflows| { &m.security_name },
                |m: &mut AccountWithCashflows| { &mut m.security_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "deal_value_date",
                |m: &AccountWithCashflows| { &m.deal_value_date },
                |m: &mut AccountWithCashflows| { &mut m.deal_value_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "issue_date",
                |m: &AccountWithCashflows| { &m.issue_date },
                |m: &mut AccountWithCashflows| { &mut m.issue_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "maturity_date",
                |m: &AccountWithCashflows| { &m.maturity_date },
                |m: &mut AccountWithCashflows| { &mut m.maturity_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "coupon_rate",
                |m: &AccountWithCashflows| { &m.coupon_rate },
                |m: &mut AccountWithCashflows| { &mut m.coupon_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "interest_calculation_basis",
                |m: &AccountWithCashflows| { &m.interest_calculation_basis },
                |m: &mut AccountWithCashflows| { &mut m.interest_calculation_basis },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "face_value_per_units",
                |m: &AccountWithCashflows| { &m.face_value_per_units },
                |m: &mut AccountWithCashflows| { &mut m.face_value_per_units },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "quantity",
                |m: &AccountWithCashflows| { &m.quantity },
                |m: &mut AccountWithCashflows| { &mut m.quantity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "face_value",
                |m: &AccountWithCashflows| { &m.face_value },
                |m: &mut AccountWithCashflows| { &mut m.face_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &AccountWithCashflows| { &m.currency },
                |m: &mut AccountWithCashflows| { &mut m.currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "book_value",
                |m: &AccountWithCashflows| { &m.book_value },
                |m: &mut AccountWithCashflows| { &mut m.book_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "market_value",
                |m: &AccountWithCashflows| { &m.market_value },
                |m: &mut AccountWithCashflows| { &mut m.market_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "mtm",
                |m: &AccountWithCashflows| { &m.mtm },
                |m: &mut AccountWithCashflows| { &mut m.mtm },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "market_yield",
                |m: &AccountWithCashflows| { &m.market_yield },
                |m: &mut AccountWithCashflows| { &mut m.market_yield },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "interest_accruad_days",
                |m: &AccountWithCashflows| { &m.interest_accruad_days },
                |m: &mut AccountWithCashflows| { &mut m.interest_accruad_days },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "accrued_interest",
                |m: &AccountWithCashflows| { &m.accrued_interest },
                |m: &mut AccountWithCashflows| { &mut m.accrued_interest },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "coupon_pay_day",
                |m: &AccountWithCashflows| { &m.coupon_pay_day },
                |m: &mut AccountWithCashflows| { &mut m.coupon_pay_day },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "coupon_type",
                |m: &AccountWithCashflows| { &m.coupon_type },
                |m: &mut AccountWithCashflows| { &mut m.coupon_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "spread",
                |m: &AccountWithCashflows| { &m.spread },
                |m: &mut AccountWithCashflows| { &mut m.spread },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "benchmark",
                |m: &AccountWithCashflows| { &m.benchmark },
                |m: &mut AccountWithCashflows| { &mut m.benchmark },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "coupon_frequency",
                |m: &AccountWithCashflows| { &m.coupon_frequency },
                |m: &mut AccountWithCashflows| { &mut m.coupon_frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_coupon_date",
                |m: &AccountWithCashflows| { &m.last_coupon_date },
                |m: &mut AccountWithCashflows| { &mut m.last_coupon_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_coupon_date",
                |m: &AccountWithCashflows| { &m.next_coupon_date },
                |m: &mut AccountWithCashflows| { &mut m.next_coupon_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "last_repricing_date",
                |m: &AccountWithCashflows| { &m.last_repricing_date },
                |m: &mut AccountWithCashflows| { &mut m.last_repricing_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "next_repricing_date",
                |m: &AccountWithCashflows| { &m.next_repricing_date },
                |m: &mut AccountWithCashflows| { &mut m.next_repricing_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "put_date",
                |m: &AccountWithCashflows| { &m.put_date },
                |m: &mut AccountWithCashflows| { &mut m.put_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "call_date",
                |m: &AccountWithCashflows| { &m.call_date },
                |m: &mut AccountWithCashflows| { &mut m.call_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "is_listed",
                |m: &AccountWithCashflows| { &m.is_listed },
                |m: &mut AccountWithCashflows| { &mut m.is_listed },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "issuer_country",
                |m: &AccountWithCashflows| { &m.issuer_country },
                |m: &mut AccountWithCashflows| { &mut m.issuer_country },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "issuer_type",
                |m: &AccountWithCashflows| { &m.issuer_type },
                |m: &mut AccountWithCashflows| { &mut m.issuer_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "isuser_classification_1",
                |m: &AccountWithCashflows| { &m.isuser_classification_1 },
                |m: &mut AccountWithCashflows| { &mut m.isuser_classification_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "isuser_classification_2",
                |m: &AccountWithCashflows| { &m.isuser_classification_2 },
                |m: &mut AccountWithCashflows| { &mut m.isuser_classification_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "isuser_classification_3",
                |m: &AccountWithCashflows| { &m.isuser_classification_3 },
                |m: &mut AccountWithCashflows| { &mut m.isuser_classification_3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gurantor_type",
                |m: &AccountWithCashflows| { &m.gurantor_type },
                |m: &mut AccountWithCashflows| { &mut m.gurantor_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rating_agency",
                |m: &AccountWithCashflows| { &m.rating_agency },
                |m: &mut AccountWithCashflows| { &mut m.rating_agency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "external_rating",
                |m: &AccountWithCashflows| { &m.external_rating },
                |m: &mut AccountWithCashflows| { &mut m.external_rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_type",
                |m: &AccountWithCashflows| { &m.asset_type },
                |m: &mut AccountWithCashflows| { &mut m.asset_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_category",
                |m: &AccountWithCashflows| { &m.asset_category },
                |m: &mut AccountWithCashflows| { &mut m.asset_category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "treaury_gl_code",
                |m: &AccountWithCashflows| { &m.treaury_gl_code },
                |m: &mut AccountWithCashflows| { &mut m.treaury_gl_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "m_npaclassification",
                |m: &AccountWithCashflows| { &m.m_npaclassification },
                |m: &mut AccountWithCashflows| { &mut m.m_npaclassification },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "internal_rating",
                |m: &AccountWithCashflows| { &m.internal_rating },
                |m: &mut AccountWithCashflows| { &mut m.internal_rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customer_constitution_code",
                |m: &AccountWithCashflows| { &m.customer_constitution_code },
                |m: &mut AccountWithCashflows| { &mut m.customer_constitution_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "risk_weight",
                |m: &AccountWithCashflows| { &m.risk_weight },
                |m: &mut AccountWithCashflows| { &mut m.risk_weight },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "crar_basel_classification",
                |m: &AccountWithCashflows| { &m.crar_basel_classification },
                |m: &mut AccountWithCashflows| { &mut m.crar_basel_classification },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "app1",
                |m: &AccountWithCashflows| { &m.app1 },
                |m: &mut AccountWithCashflows| { &mut m.app1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "app2",
                |m: &AccountWithCashflows| { &m.app2 },
                |m: &mut AccountWithCashflows| { &mut m.app2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "app3",
                |m: &AccountWithCashflows| { &m.app3 },
                |m: &mut AccountWithCashflows| { &mut m.app3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "app4",
                |m: &AccountWithCashflows| { &m.app4 },
                |m: &mut AccountWithCashflows| { &mut m.app4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.holding_deal_id.clear();
        self.portfolio.clear();
        self.instrument_type.clear();
        self.isdiscounted.clear();
        self.slr_non_slr.clear();
        self.isin.clear();
        self.issuer_id.clear();
        self.issuer_name.clear();
        self.security_id.clear();
        self.security_name.clear();
        self.deal_value_date = 0;
        self.issue_date = 0;
        self.maturity_date = 0;
        self.coupon_rate = 0.;
        self.interest_calculation_basis.clear();
        self.face_value_per_units = 0.;
        self.quantity = 0;
        self.face_value = 0.;
        self.currency.clear();
        self.book_value = 0.;
        self.market_value = 0.;
        self.mtm = 0;
        self.market_yield = 0.;
        self.interest_accruad_days = 0;
        self.accrued_interest = 0.;
        self.coupon_pay_day = 0;
        self.coupon_type.clear();
        self.spread.clear();
        self.benchmark.clear();
        self.coupon_frequency.clear();
        self.last_coupon_date = 0;
        self.next_coupon_date = 0;
        self.last_repricing_date = 0;
        self.next_repricing_date = 0;
        self.put_date = 0;
        self.call_date = 0;
        self.is_listed.clear();
        self.issuer_country.clear();
        self.issuer_type.clear();
        self.isuser_classification_1.clear();
        self.isuser_classification_2.clear();
        self.isuser_classification_3.clear();
        self.gurantor_type.clear();
        self.rating_agency.clear();
        self.external_rating.clear();
        self.asset_type.clear();
        self.asset_category.clear();
        self.treaury_gl_code = 0;
        self.m_npaclassification.clear();
        self.internal_rating.clear();
        self.customer_constitution_code.clear();
        self.risk_weight.clear();
        self.crar_basel_classification.clear();
        self.app1.clear();
        self.app2.clear();
        self.app3.clear();
        self.app4.clear();
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ngsec.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\x20\
    \x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\x01(\
    \x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\
    \"\xfa\x10\n\x14AccountWithCashflows\x12&\n\x0fholding_deal_id\x18\x01\
    \x20\x01(\tR\rholdingDealId\x12\x1c\n\tportfolio\x18\x02\x20\x01(\tR\tpo\
    rtfolio\x12'\n\x0finstrument_type\x18\x03\x20\x01(\tR\x0einstrumentType\
    \x12\"\n\x0cisdiscounted\x18\x04\x20\x01(\tR\x0cisdiscounted\x12\x1e\n\
    \x0bslr_non_slr\x18\x05\x20\x01(\tR\tslrNonSlr\x12\x12\n\x04isin\x18\x06\
    \x20\x01(\tR\x04isin\x12\x1b\n\tissuer_id\x18\x07\x20\x01(\tR\x08issuerI\
    d\x12\x1f\n\x0bissuer_name\x18\x08\x20\x01(\tR\nissuerName\x12\x1f\n\x0b\
    security_id\x18\t\x20\x01(\tR\nsecurityId\x12#\n\rsecurity_name\x18\n\
    \x20\x01(\tR\x0csecurityName\x12&\n\x0fdeal_value_date\x18\x0b\x20\x01(\
    \x03R\rdealValueDate\x12\x1d\n\nissue_date\x18\x0c\x20\x01(\x03R\tissueD\
    ate\x12#\n\rmaturity_date\x18\r\x20\x01(\x03R\x0cmaturityDate\x12\x1f\n\
    \x0bcoupon_rate\x18\x0e\x20\x01(\x01R\ncouponRate\x12<\n\x1ainterest_cal\
    culation_basis\x18\x0f\x20\x01(\tR\x18interestCalculationBasis\x12/\n\
    \x14face_value_per_units\x18\x10\x20\x01(\x01R\x11faceValuePerUnits\x12\
    \x1a\n\x08quantity\x18\x11\x20\x01(\x03R\x08quantity\x12\x1d\n\nface_val\
    ue\x18\x12\x20\x01(\x01R\tfaceValue\x12\x1a\n\x08currency\x18\x13\x20\
    \x01(\tR\x08currency\x12\x1d\n\nbook_value\x18\x14\x20\x01(\x01R\tbookVa\
    lue\x12!\n\x0cmarket_value\x18\x15\x20\x01(\x01R\x0bmarketValue\x12\x10\
    \n\x03mtm\x18\x16\x20\x01(\x03R\x03mtm\x12!\n\x0cmarket_yield\x18\x17\
    \x20\x01(\x01R\x0bmarketYield\x122\n\x15interest_accruad_days\x18\x18\
    \x20\x01(\x03R\x13interestAccruadDays\x12)\n\x10accrued_interest\x18\x19\
    \x20\x01(\x01R\x0faccruedInterest\x12$\n\x0ecoupon_pay_day\x18\x1a\x20\
    \x01(\x03R\x0ccouponPayDay\x12\x1f\n\x0bcoupon_type\x18\x1b\x20\x01(\tR\
    \ncouponType\x12\x16\n\x06spread\x18\x1c\x20\x01(\tR\x06spread\x12\x1c\n\
    \tbenchmark\x18\x1d\x20\x01(\tR\tbenchmark\x12)\n\x10coupon_frequency\
    \x18\x1e\x20\x01(\tR\x0fcouponFrequency\x12(\n\x10last_coupon_date\x18\
    \x1f\x20\x01(\x03R\x0elastCouponDate\x12(\n\x10next_coupon_date\x18\x20\
    \x20\x01(\x03R\x0enextCouponDate\x12.\n\x13last_repricing_date\x18!\x20\
    \x01(\x03R\x11lastRepricingDate\x12.\n\x13next_repricing_date\x18\"\x20\
    \x01(\x03R\x11nextRepricingDate\x12\x19\n\x08put_date\x18#\x20\x01(\x03R\
    \x07putDate\x12\x1b\n\tcall_date\x18$\x20\x01(\x03R\x08callDate\x12\x1b\
    \n\tis_listed\x18%\x20\x01(\tR\x08isListed\x12%\n\x0eissuer_country\x18&\
    \x20\x01(\tR\rissuerCountry\x12\x1f\n\x0bissuer_type\x18'\x20\x01(\tR\ni\
    ssuerType\x126\n\x17isuser_classification_1\x18(\x20\x01(\tR\x15isuserCl\
    assification1\x126\n\x17isuser_classification_2\x18)\x20\x01(\tR\x15isus\
    erClassification2\x126\n\x17isuser_classification_3\x18*\x20\x01(\tR\x15\
    isuserClassification3\x12#\n\rgurantor_type\x18+\x20\x01(\tR\x0cgurantor\
    Type\x12#\n\rrating_agency\x18,\x20\x01(\tR\x0cratingAgency\x12'\n\x0fex\
    ternal_rating\x18-\x20\x01(\tR\x0eexternalRating\x12\x1d\n\nasset_type\
    \x18.\x20\x01(\tR\tassetType\x12%\n\x0easset_category\x18/\x20\x01(\tR\r\
    assetCategory\x12&\n\x0ftreaury_gl_code\x180\x20\x01(\x03R\rtreauryGlCod\
    e\x12/\n\x13m_npaclassification\x181\x20\x01(\tR\x12mNpaclassification\
    \x12'\n\x0finternal_rating\x182\x20\x01(\tR\x0einternalRating\x12<\n\x1a\
    customer_constitution_code\x183\x20\x01(\tR\x18customerConstitutionCode\
    \x12\x1f\n\x0brisk_weight\x184\x20\x01(\tR\nriskWeight\x12:\n\x19crar_ba\
    sel_classification\x185\x20\x01(\tR\x17crarBaselClassification\x12\x12\n\
    \x04app1\x186\x20\x01(\tR\x04app1\x12\x12\n\x04app2\x187\x20\x01(\tR\x04\
    app2\x12\x12\n\x04app3\x188\x20\x01(\tR\x04app3\x12\x12\n\x04app4\x189\
    \x20\x01(\tR\x04app4\x12'\n\tcashflows\x18:\x20\x03(\x0b2\t.CashflowR\tc\
    ashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
