// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `bonds_fra.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;


    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }
    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    // double prin_amt = 2;


    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }
    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_amt",
                |m: &Cashflow| { &m.int_amt },
                |m: &mut Cashflow| { &mut m.int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "prin_amt",
                |m: &Cashflow| { &m.prin_amt },
                |m: &mut Cashflow| { &mut m.prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.int_amt = 0.;
        self.prin_amt = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub entity: ::std::string::String,
    pub trade_id: ::std::string::String,
    pub cntrct_id: i64,
    pub struct_id: i64,
    pub comp_typology: ::std::string::String,
    pub pkg_typology: ::std::string::String,
    pub cntrct_typology: ::std::string::String,
    pub cntrct_usage: ::std::string::String,
    pub desk: ::std::string::String,
    pub trading_banking: ::std::string::String,
    pub cntr_prty_grp_cd: ::std::string::String,
    pub cntr_prty_prnt_cd: ::std::string::String,
    pub cntr_prty_child_cd: ::std::string::String,
    pub cntr_prty_name: ::std::string::String,
    pub intrnl_extrnl: ::std::string::String,
    pub trade_dt: i64,
    pub fixing_dt: i64,
    pub settlement_dt: i64,
    pub maturity_dt: i64,
    pub deal_ccy: ::std::string::String,
    pub sec_cd: ::std::string::String,
    pub undrlying_sec: ::std::string::String,
    pub undrlying_sec_maturity: i64,
    pub notional_amt: i64,
    pub org_notional_in_inr: i64,
    pub ost_notional_in_inr: f64,
    pub cont_notional: i64,
    pub buy_sell: ::std::string::String,
    pub fut_cash_proceeds_ccy: ::std::string::String,
    pub fut_cash_proceeds: i64,
    pub fut_cash_proceeds_in_inr: f64,
    pub mtm: f64,
    pub mtm_in_inr: f64,
    pub fwdmtm_in_inr: f64,
    pub net_bcva_adj_gmtm_in_inr: f64,
    pub cva: f64,
    pub dva: f64,
    pub bcva: f64,
    pub netpv01: f64,
    pub bank_or_nonbank: ::std::string::String,
    pub org_tenor: i64,
    pub res_tenor: i64,
    pub udrlying: ::std::string::String,
    pub deal_status: ::std::string::String,
    pub tot_int_amt: f64,
    pub tot_prin_amt: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string entity = 1;


    pub fn get_entity(&self) -> &str {
        &self.entity
    }
    pub fn clear_entity(&mut self) {
        self.entity.clear();
    }

    // Param is passed by value, moved
    pub fn set_entity(&mut self, v: ::std::string::String) {
        self.entity = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entity(&mut self) -> &mut ::std::string::String {
        &mut self.entity
    }

    // Take field
    pub fn take_entity(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.entity, ::std::string::String::new())
    }

    // string trade_id = 2;


    pub fn get_trade_id(&self) -> &str {
        &self.trade_id
    }
    pub fn clear_trade_id(&mut self) {
        self.trade_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_trade_id(&mut self, v: ::std::string::String) {
        self.trade_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trade_id(&mut self) -> &mut ::std::string::String {
        &mut self.trade_id
    }

    // Take field
    pub fn take_trade_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trade_id, ::std::string::String::new())
    }

    // int64 cntrct_id = 3;


    pub fn get_cntrct_id(&self) -> i64 {
        self.cntrct_id
    }
    pub fn clear_cntrct_id(&mut self) {
        self.cntrct_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_cntrct_id(&mut self, v: i64) {
        self.cntrct_id = v;
    }

    // int64 struct_id = 4;


    pub fn get_struct_id(&self) -> i64 {
        self.struct_id
    }
    pub fn clear_struct_id(&mut self) {
        self.struct_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_struct_id(&mut self, v: i64) {
        self.struct_id = v;
    }

    // string comp_typology = 5;


    pub fn get_comp_typology(&self) -> &str {
        &self.comp_typology
    }
    pub fn clear_comp_typology(&mut self) {
        self.comp_typology.clear();
    }

    // Param is passed by value, moved
    pub fn set_comp_typology(&mut self, v: ::std::string::String) {
        self.comp_typology = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_comp_typology(&mut self) -> &mut ::std::string::String {
        &mut self.comp_typology
    }

    // Take field
    pub fn take_comp_typology(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.comp_typology, ::std::string::String::new())
    }

    // string pkg_typology = 6;


    pub fn get_pkg_typology(&self) -> &str {
        &self.pkg_typology
    }
    pub fn clear_pkg_typology(&mut self) {
        self.pkg_typology.clear();
    }

    // Param is passed by value, moved
    pub fn set_pkg_typology(&mut self, v: ::std::string::String) {
        self.pkg_typology = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pkg_typology(&mut self) -> &mut ::std::string::String {
        &mut self.pkg_typology
    }

    // Take field
    pub fn take_pkg_typology(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pkg_typology, ::std::string::String::new())
    }

    // string cntrct_typology = 7;


    pub fn get_cntrct_typology(&self) -> &str {
        &self.cntrct_typology
    }
    pub fn clear_cntrct_typology(&mut self) {
        self.cntrct_typology.clear();
    }

    // Param is passed by value, moved
    pub fn set_cntrct_typology(&mut self, v: ::std::string::String) {
        self.cntrct_typology = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cntrct_typology(&mut self) -> &mut ::std::string::String {
        &mut self.cntrct_typology
    }

    // Take field
    pub fn take_cntrct_typology(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cntrct_typology, ::std::string::String::new())
    }

    // string cntrct_usage = 8;


    pub fn get_cntrct_usage(&self) -> &str {
        &self.cntrct_usage
    }
    pub fn clear_cntrct_usage(&mut self) {
        self.cntrct_usage.clear();
    }

    // Param is passed by value, moved
    pub fn set_cntrct_usage(&mut self, v: ::std::string::String) {
        self.cntrct_usage = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cntrct_usage(&mut self) -> &mut ::std::string::String {
        &mut self.cntrct_usage
    }

    // Take field
    pub fn take_cntrct_usage(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cntrct_usage, ::std::string::String::new())
    }

    // string desk = 9;


    pub fn get_desk(&self) -> &str {
        &self.desk
    }
    pub fn clear_desk(&mut self) {
        self.desk.clear();
    }

    // Param is passed by value, moved
    pub fn set_desk(&mut self, v: ::std::string::String) {
        self.desk = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_desk(&mut self) -> &mut ::std::string::String {
        &mut self.desk
    }

    // Take field
    pub fn take_desk(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.desk, ::std::string::String::new())
    }

    // string trading_banking = 10;


    pub fn get_trading_banking(&self) -> &str {
        &self.trading_banking
    }
    pub fn clear_trading_banking(&mut self) {
        self.trading_banking.clear();
    }

    // Param is passed by value, moved
    pub fn set_trading_banking(&mut self, v: ::std::string::String) {
        self.trading_banking = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trading_banking(&mut self) -> &mut ::std::string::String {
        &mut self.trading_banking
    }

    // Take field
    pub fn take_trading_banking(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trading_banking, ::std::string::String::new())
    }

    // string cntr_prty_grp_cd = 11;


    pub fn get_cntr_prty_grp_cd(&self) -> &str {
        &self.cntr_prty_grp_cd
    }
    pub fn clear_cntr_prty_grp_cd(&mut self) {
        self.cntr_prty_grp_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_cntr_prty_grp_cd(&mut self, v: ::std::string::String) {
        self.cntr_prty_grp_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cntr_prty_grp_cd(&mut self) -> &mut ::std::string::String {
        &mut self.cntr_prty_grp_cd
    }

    // Take field
    pub fn take_cntr_prty_grp_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cntr_prty_grp_cd, ::std::string::String::new())
    }

    // string cntr_prty_prnt_cd = 12;


    pub fn get_cntr_prty_prnt_cd(&self) -> &str {
        &self.cntr_prty_prnt_cd
    }
    pub fn clear_cntr_prty_prnt_cd(&mut self) {
        self.cntr_prty_prnt_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_cntr_prty_prnt_cd(&mut self, v: ::std::string::String) {
        self.cntr_prty_prnt_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cntr_prty_prnt_cd(&mut self) -> &mut ::std::string::String {
        &mut self.cntr_prty_prnt_cd
    }

    // Take field
    pub fn take_cntr_prty_prnt_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cntr_prty_prnt_cd, ::std::string::String::new())
    }

    // string cntr_prty_child_cd = 13;


    pub fn get_cntr_prty_child_cd(&self) -> &str {
        &self.cntr_prty_child_cd
    }
    pub fn clear_cntr_prty_child_cd(&mut self) {
        self.cntr_prty_child_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_cntr_prty_child_cd(&mut self, v: ::std::string::String) {
        self.cntr_prty_child_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cntr_prty_child_cd(&mut self) -> &mut ::std::string::String {
        &mut self.cntr_prty_child_cd
    }

    // Take field
    pub fn take_cntr_prty_child_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cntr_prty_child_cd, ::std::string::String::new())
    }

    // string cntr_prty_name = 14;


    pub fn get_cntr_prty_name(&self) -> &str {
        &self.cntr_prty_name
    }
    pub fn clear_cntr_prty_name(&mut self) {
        self.cntr_prty_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cntr_prty_name(&mut self, v: ::std::string::String) {
        self.cntr_prty_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cntr_prty_name(&mut self) -> &mut ::std::string::String {
        &mut self.cntr_prty_name
    }

    // Take field
    pub fn take_cntr_prty_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cntr_prty_name, ::std::string::String::new())
    }

    // string intrnl_extrnl = 15;


    pub fn get_intrnl_extrnl(&self) -> &str {
        &self.intrnl_extrnl
    }
    pub fn clear_intrnl_extrnl(&mut self) {
        self.intrnl_extrnl.clear();
    }

    // Param is passed by value, moved
    pub fn set_intrnl_extrnl(&mut self, v: ::std::string::String) {
        self.intrnl_extrnl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_intrnl_extrnl(&mut self) -> &mut ::std::string::String {
        &mut self.intrnl_extrnl
    }

    // Take field
    pub fn take_intrnl_extrnl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.intrnl_extrnl, ::std::string::String::new())
    }

    // int64 trade_dt = 16;


    pub fn get_trade_dt(&self) -> i64 {
        self.trade_dt
    }
    pub fn clear_trade_dt(&mut self) {
        self.trade_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_trade_dt(&mut self, v: i64) {
        self.trade_dt = v;
    }

    // int64 fixing_dt = 17;


    pub fn get_fixing_dt(&self) -> i64 {
        self.fixing_dt
    }
    pub fn clear_fixing_dt(&mut self) {
        self.fixing_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_fixing_dt(&mut self, v: i64) {
        self.fixing_dt = v;
    }

    // int64 settlement_dt = 18;


    pub fn get_settlement_dt(&self) -> i64 {
        self.settlement_dt
    }
    pub fn clear_settlement_dt(&mut self) {
        self.settlement_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_settlement_dt(&mut self, v: i64) {
        self.settlement_dt = v;
    }

    // int64 maturity_dt = 19;


    pub fn get_maturity_dt(&self) -> i64 {
        self.maturity_dt
    }
    pub fn clear_maturity_dt(&mut self) {
        self.maturity_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_dt(&mut self, v: i64) {
        self.maturity_dt = v;
    }

    // string deal_ccy = 20;


    pub fn get_deal_ccy(&self) -> &str {
        &self.deal_ccy
    }
    pub fn clear_deal_ccy(&mut self) {
        self.deal_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_ccy(&mut self, v: ::std::string::String) {
        self.deal_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.deal_ccy
    }

    // Take field
    pub fn take_deal_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_ccy, ::std::string::String::new())
    }

    // string sec_cd = 21;


    pub fn get_sec_cd(&self) -> &str {
        &self.sec_cd
    }
    pub fn clear_sec_cd(&mut self) {
        self.sec_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_sec_cd(&mut self, v: ::std::string::String) {
        self.sec_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sec_cd(&mut self) -> &mut ::std::string::String {
        &mut self.sec_cd
    }

    // Take field
    pub fn take_sec_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sec_cd, ::std::string::String::new())
    }

    // string undrlying_sec = 22;


    pub fn get_undrlying_sec(&self) -> &str {
        &self.undrlying_sec
    }
    pub fn clear_undrlying_sec(&mut self) {
        self.undrlying_sec.clear();
    }

    // Param is passed by value, moved
    pub fn set_undrlying_sec(&mut self, v: ::std::string::String) {
        self.undrlying_sec = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_undrlying_sec(&mut self) -> &mut ::std::string::String {
        &mut self.undrlying_sec
    }

    // Take field
    pub fn take_undrlying_sec(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.undrlying_sec, ::std::string::String::new())
    }

    // int64 undrlying_sec_maturity = 23;


    pub fn get_undrlying_sec_maturity(&self) -> i64 {
        self.undrlying_sec_maturity
    }
    pub fn clear_undrlying_sec_maturity(&mut self) {
        self.undrlying_sec_maturity = 0;
    }

    // Param is passed by value, moved
    pub fn set_undrlying_sec_maturity(&mut self, v: i64) {
        self.undrlying_sec_maturity = v;
    }

    // int64 notional_amt = 24;


    pub fn get_notional_amt(&self) -> i64 {
        self.notional_amt
    }
    pub fn clear_notional_amt(&mut self) {
        self.notional_amt = 0;
    }

    // Param is passed by value, moved
    pub fn set_notional_amt(&mut self, v: i64) {
        self.notional_amt = v;
    }

    // int64 org_notional_in_inr = 25;


    pub fn get_org_notional_in_inr(&self) -> i64 {
        self.org_notional_in_inr
    }
    pub fn clear_org_notional_in_inr(&mut self) {
        self.org_notional_in_inr = 0;
    }

    // Param is passed by value, moved
    pub fn set_org_notional_in_inr(&mut self, v: i64) {
        self.org_notional_in_inr = v;
    }

    // double ost_notional_in_inr = 26;


    pub fn get_ost_notional_in_inr(&self) -> f64 {
        self.ost_notional_in_inr
    }
    pub fn clear_ost_notional_in_inr(&mut self) {
        self.ost_notional_in_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ost_notional_in_inr(&mut self, v: f64) {
        self.ost_notional_in_inr = v;
    }

    // int64 cont_notional = 27;


    pub fn get_cont_notional(&self) -> i64 {
        self.cont_notional
    }
    pub fn clear_cont_notional(&mut self) {
        self.cont_notional = 0;
    }

    // Param is passed by value, moved
    pub fn set_cont_notional(&mut self, v: i64) {
        self.cont_notional = v;
    }

    // string buy_sell = 28;


    pub fn get_buy_sell(&self) -> &str {
        &self.buy_sell
    }
    pub fn clear_buy_sell(&mut self) {
        self.buy_sell.clear();
    }

    // Param is passed by value, moved
    pub fn set_buy_sell(&mut self, v: ::std::string::String) {
        self.buy_sell = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buy_sell(&mut self) -> &mut ::std::string::String {
        &mut self.buy_sell
    }

    // Take field
    pub fn take_buy_sell(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buy_sell, ::std::string::String::new())
    }

    // string fut_cash_proceeds_ccy = 29;


    pub fn get_fut_cash_proceeds_ccy(&self) -> &str {
        &self.fut_cash_proceeds_ccy
    }
    pub fn clear_fut_cash_proceeds_ccy(&mut self) {
        self.fut_cash_proceeds_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_fut_cash_proceeds_ccy(&mut self, v: ::std::string::String) {
        self.fut_cash_proceeds_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fut_cash_proceeds_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.fut_cash_proceeds_ccy
    }

    // Take field
    pub fn take_fut_cash_proceeds_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fut_cash_proceeds_ccy, ::std::string::String::new())
    }

    // int64 fut_cash_proceeds = 30;


    pub fn get_fut_cash_proceeds(&self) -> i64 {
        self.fut_cash_proceeds
    }
    pub fn clear_fut_cash_proceeds(&mut self) {
        self.fut_cash_proceeds = 0;
    }

    // Param is passed by value, moved
    pub fn set_fut_cash_proceeds(&mut self, v: i64) {
        self.fut_cash_proceeds = v;
    }

    // double fut_cash_proceeds_in_inr = 31;


    pub fn get_fut_cash_proceeds_in_inr(&self) -> f64 {
        self.fut_cash_proceeds_in_inr
    }
    pub fn clear_fut_cash_proceeds_in_inr(&mut self) {
        self.fut_cash_proceeds_in_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_fut_cash_proceeds_in_inr(&mut self, v: f64) {
        self.fut_cash_proceeds_in_inr = v;
    }

    // double mtm = 32;


    pub fn get_mtm(&self) -> f64 {
        self.mtm
    }
    pub fn clear_mtm(&mut self) {
        self.mtm = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mtm(&mut self, v: f64) {
        self.mtm = v;
    }

    // double mtm_in_inr = 33;


    pub fn get_mtm_in_inr(&self) -> f64 {
        self.mtm_in_inr
    }
    pub fn clear_mtm_in_inr(&mut self) {
        self.mtm_in_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mtm_in_inr(&mut self, v: f64) {
        self.mtm_in_inr = v;
    }

    // double fwdmtm_in_inr = 34;


    pub fn get_fwdmtm_in_inr(&self) -> f64 {
        self.fwdmtm_in_inr
    }
    pub fn clear_fwdmtm_in_inr(&mut self) {
        self.fwdmtm_in_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_fwdmtm_in_inr(&mut self, v: f64) {
        self.fwdmtm_in_inr = v;
    }

    // double net_bcva_adj_gmtm_in_inr = 35;


    pub fn get_net_bcva_adj_gmtm_in_inr(&self) -> f64 {
        self.net_bcva_adj_gmtm_in_inr
    }
    pub fn clear_net_bcva_adj_gmtm_in_inr(&mut self) {
        self.net_bcva_adj_gmtm_in_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_net_bcva_adj_gmtm_in_inr(&mut self, v: f64) {
        self.net_bcva_adj_gmtm_in_inr = v;
    }

    // double cva = 36;


    pub fn get_cva(&self) -> f64 {
        self.cva
    }
    pub fn clear_cva(&mut self) {
        self.cva = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cva(&mut self, v: f64) {
        self.cva = v;
    }

    // double dva = 37;


    pub fn get_dva(&self) -> f64 {
        self.dva
    }
    pub fn clear_dva(&mut self) {
        self.dva = 0.;
    }

    // Param is passed by value, moved
    pub fn set_dva(&mut self, v: f64) {
        self.dva = v;
    }

    // double bcva = 38;


    pub fn get_bcva(&self) -> f64 {
        self.bcva
    }
    pub fn clear_bcva(&mut self) {
        self.bcva = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bcva(&mut self, v: f64) {
        self.bcva = v;
    }

    // double netpv01 = 39;


    pub fn get_netpv01(&self) -> f64 {
        self.netpv01
    }
    pub fn clear_netpv01(&mut self) {
        self.netpv01 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_netpv01(&mut self, v: f64) {
        self.netpv01 = v;
    }

    // string bank_or_nonbank = 40;


    pub fn get_bank_or_nonbank(&self) -> &str {
        &self.bank_or_nonbank
    }
    pub fn clear_bank_or_nonbank(&mut self) {
        self.bank_or_nonbank.clear();
    }

    // Param is passed by value, moved
    pub fn set_bank_or_nonbank(&mut self, v: ::std::string::String) {
        self.bank_or_nonbank = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bank_or_nonbank(&mut self) -> &mut ::std::string::String {
        &mut self.bank_or_nonbank
    }

    // Take field
    pub fn take_bank_or_nonbank(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bank_or_nonbank, ::std::string::String::new())
    }

    // int64 org_tenor = 41;


    pub fn get_org_tenor(&self) -> i64 {
        self.org_tenor
    }
    pub fn clear_org_tenor(&mut self) {
        self.org_tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_org_tenor(&mut self, v: i64) {
        self.org_tenor = v;
    }

    // int64 res_tenor = 42;


    pub fn get_res_tenor(&self) -> i64 {
        self.res_tenor
    }
    pub fn clear_res_tenor(&mut self) {
        self.res_tenor = 0;
    }

    // Param is passed by value, moved
    pub fn set_res_tenor(&mut self, v: i64) {
        self.res_tenor = v;
    }

    // string udrlying = 43;


    pub fn get_udrlying(&self) -> &str {
        &self.udrlying
    }
    pub fn clear_udrlying(&mut self) {
        self.udrlying.clear();
    }

    // Param is passed by value, moved
    pub fn set_udrlying(&mut self, v: ::std::string::String) {
        self.udrlying = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_udrlying(&mut self) -> &mut ::std::string::String {
        &mut self.udrlying
    }

    // Take field
    pub fn take_udrlying(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.udrlying, ::std::string::String::new())
    }

    // string deal_status = 44;


    pub fn get_deal_status(&self) -> &str {
        &self.deal_status
    }
    pub fn clear_deal_status(&mut self) {
        self.deal_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_status(&mut self, v: ::std::string::String) {
        self.deal_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_status(&mut self) -> &mut ::std::string::String {
        &mut self.deal_status
    }

    // Take field
    pub fn take_deal_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_status, ::std::string::String::new())
    }

    // double tot_int_amt = 45;


    pub fn get_tot_int_amt(&self) -> f64 {
        self.tot_int_amt
    }
    pub fn clear_tot_int_amt(&mut self) {
        self.tot_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_int_amt(&mut self, v: f64) {
        self.tot_int_amt = v;
    }

    // double tot_prin_amt = 46;


    pub fn get_tot_prin_amt(&self) -> f64 {
        self.tot_prin_amt
    }
    pub fn clear_tot_prin_amt(&mut self) {
        self.tot_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_prin_amt(&mut self, v: f64) {
        self.tot_prin_amt = v;
    }

    // repeated .Cashflow cashflows = 47;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.entity)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trade_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cntrct_id = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.struct_id = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.comp_typology)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pkg_typology)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cntrct_typology)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cntrct_usage)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.desk)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trading_banking)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cntr_prty_grp_cd)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cntr_prty_prnt_cd)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cntr_prty_child_cd)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cntr_prty_name)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.intrnl_extrnl)?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.trade_dt = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.fixing_dt = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.settlement_dt = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_dt = tmp;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_ccy)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sec_cd)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.undrlying_sec)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.undrlying_sec_maturity = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.notional_amt = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.org_notional_in_inr = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ost_notional_in_inr = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cont_notional = tmp;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buy_sell)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fut_cash_proceeds_ccy)?;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.fut_cash_proceeds = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.fut_cash_proceeds_in_inr = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.mtm = tmp;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.mtm_in_inr = tmp;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.fwdmtm_in_inr = tmp;
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.net_bcva_adj_gmtm_in_inr = tmp;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.cva = tmp;
                },
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.dva = tmp;
                },
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bcva = tmp;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.netpv01 = tmp;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bank_or_nonbank)?;
                },
                41 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.org_tenor = tmp;
                },
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.res_tenor = tmp;
                },
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.udrlying)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_status)?;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_int_amt = tmp;
                },
                46 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_prin_amt = tmp;
                },
                47 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.entity.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.entity);
        }
        if !self.trade_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.trade_id);
        }
        if self.cntrct_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cntrct_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.struct_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.struct_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.comp_typology.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.comp_typology);
        }
        if !self.pkg_typology.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.pkg_typology);
        }
        if !self.cntrct_typology.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.cntrct_typology);
        }
        if !self.cntrct_usage.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.cntrct_usage);
        }
        if !self.desk.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.desk);
        }
        if !self.trading_banking.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.trading_banking);
        }
        if !self.cntr_prty_grp_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.cntr_prty_grp_cd);
        }
        if !self.cntr_prty_prnt_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.cntr_prty_prnt_cd);
        }
        if !self.cntr_prty_child_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.cntr_prty_child_cd);
        }
        if !self.cntr_prty_name.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.cntr_prty_name);
        }
        if !self.intrnl_extrnl.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.intrnl_extrnl);
        }
        if self.trade_dt != 0 {
            my_size += ::protobuf::rt::value_size(16, self.trade_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fixing_dt != 0 {
            my_size += ::protobuf::rt::value_size(17, self.fixing_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.settlement_dt != 0 {
            my_size += ::protobuf::rt::value_size(18, self.settlement_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maturity_dt != 0 {
            my_size += ::protobuf::rt::value_size(19, self.maturity_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.deal_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.deal_ccy);
        }
        if !self.sec_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.sec_cd);
        }
        if !self.undrlying_sec.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.undrlying_sec);
        }
        if self.undrlying_sec_maturity != 0 {
            my_size += ::protobuf::rt::value_size(23, self.undrlying_sec_maturity, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.notional_amt != 0 {
            my_size += ::protobuf::rt::value_size(24, self.notional_amt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.org_notional_in_inr != 0 {
            my_size += ::protobuf::rt::value_size(25, self.org_notional_in_inr, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ost_notional_in_inr != 0. {
            my_size += 10;
        }
        if self.cont_notional != 0 {
            my_size += ::protobuf::rt::value_size(27, self.cont_notional, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.buy_sell.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.buy_sell);
        }
        if !self.fut_cash_proceeds_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(29, &self.fut_cash_proceeds_ccy);
        }
        if self.fut_cash_proceeds != 0 {
            my_size += ::protobuf::rt::value_size(30, self.fut_cash_proceeds, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fut_cash_proceeds_in_inr != 0. {
            my_size += 10;
        }
        if self.mtm != 0. {
            my_size += 10;
        }
        if self.mtm_in_inr != 0. {
            my_size += 10;
        }
        if self.fwdmtm_in_inr != 0. {
            my_size += 10;
        }
        if self.net_bcva_adj_gmtm_in_inr != 0. {
            my_size += 10;
        }
        if self.cva != 0. {
            my_size += 10;
        }
        if self.dva != 0. {
            my_size += 10;
        }
        if self.bcva != 0. {
            my_size += 10;
        }
        if self.netpv01 != 0. {
            my_size += 10;
        }
        if !self.bank_or_nonbank.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.bank_or_nonbank);
        }
        if self.org_tenor != 0 {
            my_size += ::protobuf::rt::value_size(41, self.org_tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.res_tenor != 0 {
            my_size += ::protobuf::rt::value_size(42, self.res_tenor, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.udrlying.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.udrlying);
        }
        if !self.deal_status.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.deal_status);
        }
        if self.tot_int_amt != 0. {
            my_size += 10;
        }
        if self.tot_prin_amt != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.entity.is_empty() {
            os.write_string(1, &self.entity)?;
        }
        if !self.trade_id.is_empty() {
            os.write_string(2, &self.trade_id)?;
        }
        if self.cntrct_id != 0 {
            os.write_int64(3, self.cntrct_id)?;
        }
        if self.struct_id != 0 {
            os.write_int64(4, self.struct_id)?;
        }
        if !self.comp_typology.is_empty() {
            os.write_string(5, &self.comp_typology)?;
        }
        if !self.pkg_typology.is_empty() {
            os.write_string(6, &self.pkg_typology)?;
        }
        if !self.cntrct_typology.is_empty() {
            os.write_string(7, &self.cntrct_typology)?;
        }
        if !self.cntrct_usage.is_empty() {
            os.write_string(8, &self.cntrct_usage)?;
        }
        if !self.desk.is_empty() {
            os.write_string(9, &self.desk)?;
        }
        if !self.trading_banking.is_empty() {
            os.write_string(10, &self.trading_banking)?;
        }
        if !self.cntr_prty_grp_cd.is_empty() {
            os.write_string(11, &self.cntr_prty_grp_cd)?;
        }
        if !self.cntr_prty_prnt_cd.is_empty() {
            os.write_string(12, &self.cntr_prty_prnt_cd)?;
        }
        if !self.cntr_prty_child_cd.is_empty() {
            os.write_string(13, &self.cntr_prty_child_cd)?;
        }
        if !self.cntr_prty_name.is_empty() {
            os.write_string(14, &self.cntr_prty_name)?;
        }
        if !self.intrnl_extrnl.is_empty() {
            os.write_string(15, &self.intrnl_extrnl)?;
        }
        if self.trade_dt != 0 {
            os.write_int64(16, self.trade_dt)?;
        }
        if self.fixing_dt != 0 {
            os.write_int64(17, self.fixing_dt)?;
        }
        if self.settlement_dt != 0 {
            os.write_int64(18, self.settlement_dt)?;
        }
        if self.maturity_dt != 0 {
            os.write_int64(19, self.maturity_dt)?;
        }
        if !self.deal_ccy.is_empty() {
            os.write_string(20, &self.deal_ccy)?;
        }
        if !self.sec_cd.is_empty() {
            os.write_string(21, &self.sec_cd)?;
        }
        if !self.undrlying_sec.is_empty() {
            os.write_string(22, &self.undrlying_sec)?;
        }
        if self.undrlying_sec_maturity != 0 {
            os.write_int64(23, self.undrlying_sec_maturity)?;
        }
        if self.notional_amt != 0 {
            os.write_int64(24, self.notional_amt)?;
        }
        if self.org_notional_in_inr != 0 {
            os.write_int64(25, self.org_notional_in_inr)?;
        }
        if self.ost_notional_in_inr != 0. {
            os.write_double(26, self.ost_notional_in_inr)?;
        }
        if self.cont_notional != 0 {
            os.write_int64(27, self.cont_notional)?;
        }
        if !self.buy_sell.is_empty() {
            os.write_string(28, &self.buy_sell)?;
        }
        if !self.fut_cash_proceeds_ccy.is_empty() {
            os.write_string(29, &self.fut_cash_proceeds_ccy)?;
        }
        if self.fut_cash_proceeds != 0 {
            os.write_int64(30, self.fut_cash_proceeds)?;
        }
        if self.fut_cash_proceeds_in_inr != 0. {
            os.write_double(31, self.fut_cash_proceeds_in_inr)?;
        }
        if self.mtm != 0. {
            os.write_double(32, self.mtm)?;
        }
        if self.mtm_in_inr != 0. {
            os.write_double(33, self.mtm_in_inr)?;
        }
        if self.fwdmtm_in_inr != 0. {
            os.write_double(34, self.fwdmtm_in_inr)?;
        }
        if self.net_bcva_adj_gmtm_in_inr != 0. {
            os.write_double(35, self.net_bcva_adj_gmtm_in_inr)?;
        }
        if self.cva != 0. {
            os.write_double(36, self.cva)?;
        }
        if self.dva != 0. {
            os.write_double(37, self.dva)?;
        }
        if self.bcva != 0. {
            os.write_double(38, self.bcva)?;
        }
        if self.netpv01 != 0. {
            os.write_double(39, self.netpv01)?;
        }
        if !self.bank_or_nonbank.is_empty() {
            os.write_string(40, &self.bank_or_nonbank)?;
        }
        if self.org_tenor != 0 {
            os.write_int64(41, self.org_tenor)?;
        }
        if self.res_tenor != 0 {
            os.write_int64(42, self.res_tenor)?;
        }
        if !self.udrlying.is_empty() {
            os.write_string(43, &self.udrlying)?;
        }
        if !self.deal_status.is_empty() {
            os.write_string(44, &self.deal_status)?;
        }
        if self.tot_int_amt != 0. {
            os.write_double(45, self.tot_int_amt)?;
        }
        if self.tot_prin_amt != 0. {
            os.write_double(46, self.tot_prin_amt)?;
        }
        for v in &self.cashflows {
            os.write_tag(47, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "entity",
                |m: &AccountWithCashflows| { &m.entity },
                |m: &mut AccountWithCashflows| { &mut m.entity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "trade_id",
                |m: &AccountWithCashflows| { &m.trade_id },
                |m: &mut AccountWithCashflows| { &mut m.trade_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cntrct_id",
                |m: &AccountWithCashflows| { &m.cntrct_id },
                |m: &mut AccountWithCashflows| { &mut m.cntrct_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "struct_id",
                |m: &AccountWithCashflows| { &m.struct_id },
                |m: &mut AccountWithCashflows| { &mut m.struct_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "comp_typology",
                |m: &AccountWithCashflows| { &m.comp_typology },
                |m: &mut AccountWithCashflows| { &mut m.comp_typology },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pkg_typology",
                |m: &AccountWithCashflows| { &m.pkg_typology },
                |m: &mut AccountWithCashflows| { &mut m.pkg_typology },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cntrct_typology",
                |m: &AccountWithCashflows| { &m.cntrct_typology },
                |m: &mut AccountWithCashflows| { &mut m.cntrct_typology },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cntrct_usage",
                |m: &AccountWithCashflows| { &m.cntrct_usage },
                |m: &mut AccountWithCashflows| { &mut m.cntrct_usage },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "desk",
                |m: &AccountWithCashflows| { &m.desk },
                |m: &mut AccountWithCashflows| { &mut m.desk },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "trading_banking",
                |m: &AccountWithCashflows| { &m.trading_banking },
                |m: &mut AccountWithCashflows| { &mut m.trading_banking },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cntr_prty_grp_cd",
                |m: &AccountWithCashflows| { &m.cntr_prty_grp_cd },
                |m: &mut AccountWithCashflows| { &mut m.cntr_prty_grp_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cntr_prty_prnt_cd",
                |m: &AccountWithCashflows| { &m.cntr_prty_prnt_cd },
                |m: &mut AccountWithCashflows| { &mut m.cntr_prty_prnt_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cntr_prty_child_cd",
                |m: &AccountWithCashflows| { &m.cntr_prty_child_cd },
                |m: &mut AccountWithCashflows| { &mut m.cntr_prty_child_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cntr_prty_name",
                |m: &AccountWithCashflows| { &m.cntr_prty_name },
                |m: &mut AccountWithCashflows| { &mut m.cntr_prty_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "intrnl_extrnl",
                |m: &AccountWithCashflows| { &m.intrnl_extrnl },
                |m: &mut AccountWithCashflows| { &mut m.intrnl_extrnl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "trade_dt",
                |m: &AccountWithCashflows| { &m.trade_dt },
                |m: &mut AccountWithCashflows| { &mut m.trade_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "fixing_dt",
                |m: &AccountWithCashflows| { &m.fixing_dt },
                |m: &mut AccountWithCashflows| { &mut m.fixing_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "settlement_dt",
                |m: &AccountWithCashflows| { &m.settlement_dt },
                |m: &mut AccountWithCashflows| { &mut m.settlement_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "maturity_dt",
                |m: &AccountWithCashflows| { &m.maturity_dt },
                |m: &mut AccountWithCashflows| { &mut m.maturity_dt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "deal_ccy",
                |m: &AccountWithCashflows| { &m.deal_ccy },
                |m: &mut AccountWithCashflows| { &mut m.deal_ccy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sec_cd",
                |m: &AccountWithCashflows| { &m.sec_cd },
                |m: &mut AccountWithCashflows| { &mut m.sec_cd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "undrlying_sec",
                |m: &AccountWithCashflows| { &m.undrlying_sec },
                |m: &mut AccountWithCashflows| { &mut m.undrlying_sec },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "undrlying_sec_maturity",
                |m: &AccountWithCashflows| { &m.undrlying_sec_maturity },
                |m: &mut AccountWithCashflows| { &mut m.undrlying_sec_maturity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "notional_amt",
                |m: &AccountWithCashflows| { &m.notional_amt },
                |m: &mut AccountWithCashflows| { &mut m.notional_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "org_notional_in_inr",
                |m: &AccountWithCashflows| { &m.org_notional_in_inr },
                |m: &mut AccountWithCashflows| { &mut m.org_notional_in_inr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "ost_notional_in_inr",
                |m: &AccountWithCashflows| { &m.ost_notional_in_inr },
                |m: &mut AccountWithCashflows| { &mut m.ost_notional_in_inr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cont_notional",
                |m: &AccountWithCashflows| { &m.cont_notional },
                |m: &mut AccountWithCashflows| { &mut m.cont_notional },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buy_sell",
                |m: &AccountWithCashflows| { &m.buy_sell },
                |m: &mut AccountWithCashflows| { &mut m.buy_sell },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fut_cash_proceeds_ccy",
                |m: &AccountWithCashflows| { &m.fut_cash_proceeds_ccy },
                |m: &mut AccountWithCashflows| { &mut m.fut_cash_proceeds_ccy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "fut_cash_proceeds",
                |m: &AccountWithCashflows| { &m.fut_cash_proceeds },
                |m: &mut AccountWithCashflows| { &mut m.fut_cash_proceeds },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "fut_cash_proceeds_in_inr",
                |m: &AccountWithCashflows| { &m.fut_cash_proceeds_in_inr },
                |m: &mut AccountWithCashflows| { &mut m.fut_cash_proceeds_in_inr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "mtm",
                |m: &AccountWithCashflows| { &m.mtm },
                |m: &mut AccountWithCashflows| { &mut m.mtm },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "mtm_in_inr",
                |m: &AccountWithCashflows| { &m.mtm_in_inr },
                |m: &mut AccountWithCashflows| { &mut m.mtm_in_inr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "fwdmtm_in_inr",
                |m: &AccountWithCashflows| { &m.fwdmtm_in_inr },
                |m: &mut AccountWithCashflows| { &mut m.fwdmtm_in_inr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "net_bcva_adj_gmtm_in_inr",
                |m: &AccountWithCashflows| { &m.net_bcva_adj_gmtm_in_inr },
                |m: &mut AccountWithCashflows| { &mut m.net_bcva_adj_gmtm_in_inr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "cva",
                |m: &AccountWithCashflows| { &m.cva },
                |m: &mut AccountWithCashflows| { &mut m.cva },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "dva",
                |m: &AccountWithCashflows| { &m.dva },
                |m: &mut AccountWithCashflows| { &mut m.dva },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bcva",
                |m: &AccountWithCashflows| { &m.bcva },
                |m: &mut AccountWithCashflows| { &mut m.bcva },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "netpv01",
                |m: &AccountWithCashflows| { &m.netpv01 },
                |m: &mut AccountWithCashflows| { &mut m.netpv01 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bank_or_nonbank",
                |m: &AccountWithCashflows| { &m.bank_or_nonbank },
                |m: &mut AccountWithCashflows| { &mut m.bank_or_nonbank },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "org_tenor",
                |m: &AccountWithCashflows| { &m.org_tenor },
                |m: &mut AccountWithCashflows| { &mut m.org_tenor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "res_tenor",
                |m: &AccountWithCashflows| { &m.res_tenor },
                |m: &mut AccountWithCashflows| { &mut m.res_tenor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "udrlying",
                |m: &AccountWithCashflows| { &m.udrlying },
                |m: &mut AccountWithCashflows| { &mut m.udrlying },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "deal_status",
                |m: &AccountWithCashflows| { &m.deal_status },
                |m: &mut AccountWithCashflows| { &mut m.deal_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_int_amt",
                |m: &AccountWithCashflows| { &m.tot_int_amt },
                |m: &mut AccountWithCashflows| { &mut m.tot_int_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tot_prin_amt",
                |m: &AccountWithCashflows| { &m.tot_prin_amt },
                |m: &mut AccountWithCashflows| { &mut m.tot_prin_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.entity.clear();
        self.trade_id.clear();
        self.cntrct_id = 0;
        self.struct_id = 0;
        self.comp_typology.clear();
        self.pkg_typology.clear();
        self.cntrct_typology.clear();
        self.cntrct_usage.clear();
        self.desk.clear();
        self.trading_banking.clear();
        self.cntr_prty_grp_cd.clear();
        self.cntr_prty_prnt_cd.clear();
        self.cntr_prty_child_cd.clear();
        self.cntr_prty_name.clear();
        self.intrnl_extrnl.clear();
        self.trade_dt = 0;
        self.fixing_dt = 0;
        self.settlement_dt = 0;
        self.maturity_dt = 0;
        self.deal_ccy.clear();
        self.sec_cd.clear();
        self.undrlying_sec.clear();
        self.undrlying_sec_maturity = 0;
        self.notional_amt = 0;
        self.org_notional_in_inr = 0;
        self.ost_notional_in_inr = 0.;
        self.cont_notional = 0;
        self.buy_sell.clear();
        self.fut_cash_proceeds_ccy.clear();
        self.fut_cash_proceeds = 0;
        self.fut_cash_proceeds_in_inr = 0.;
        self.mtm = 0.;
        self.mtm_in_inr = 0.;
        self.fwdmtm_in_inr = 0.;
        self.net_bcva_adj_gmtm_in_inr = 0.;
        self.cva = 0.;
        self.dva = 0.;
        self.bcva = 0.;
        self.netpv01 = 0.;
        self.bank_or_nonbank.clear();
        self.org_tenor = 0;
        self.res_tenor = 0;
        self.udrlying.clear();
        self.deal_status.clear();
        self.tot_int_amt = 0.;
        self.tot_prin_amt = 0.;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fbonds_fra.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\
    \x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prin\
    Amt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xea\x0c\n\x14Accou\
    ntWithCashflows\x12\x16\n\x06entity\x18\x01\x20\x01(\tR\x06entity\x12\
    \x19\n\x08trade_id\x18\x02\x20\x01(\tR\x07tradeId\x12\x1b\n\tcntrct_id\
    \x18\x03\x20\x01(\x03R\x08cntrctId\x12\x1b\n\tstruct_id\x18\x04\x20\x01(\
    \x03R\x08structId\x12#\n\rcomp_typology\x18\x05\x20\x01(\tR\x0ccompTypol\
    ogy\x12!\n\x0cpkg_typology\x18\x06\x20\x01(\tR\x0bpkgTypology\x12'\n\x0f\
    cntrct_typology\x18\x07\x20\x01(\tR\x0ecntrctTypology\x12!\n\x0ccntrct_u\
    sage\x18\x08\x20\x01(\tR\x0bcntrctUsage\x12\x12\n\x04desk\x18\t\x20\x01(\
    \tR\x04desk\x12'\n\x0ftrading_banking\x18\n\x20\x01(\tR\x0etradingBankin\
    g\x12'\n\x10cntr_prty_grp_cd\x18\x0b\x20\x01(\tR\rcntrPrtyGrpCd\x12)\n\
    \x11cntr_prty_prnt_cd\x18\x0c\x20\x01(\tR\x0ecntrPrtyPrntCd\x12+\n\x12cn\
    tr_prty_child_cd\x18\r\x20\x01(\tR\x0fcntrPrtyChildCd\x12$\n\x0ecntr_prt\
    y_name\x18\x0e\x20\x01(\tR\x0ccntrPrtyName\x12#\n\rintrnl_extrnl\x18\x0f\
    \x20\x01(\tR\x0cintrnlExtrnl\x12\x19\n\x08trade_dt\x18\x10\x20\x01(\x03R\
    \x07tradeDt\x12\x1b\n\tfixing_dt\x18\x11\x20\x01(\x03R\x08fixingDt\x12#\
    \n\rsettlement_dt\x18\x12\x20\x01(\x03R\x0csettlementDt\x12\x1f\n\x0bmat\
    urity_dt\x18\x13\x20\x01(\x03R\nmaturityDt\x12\x19\n\x08deal_ccy\x18\x14\
    \x20\x01(\tR\x07dealCcy\x12\x15\n\x06sec_cd\x18\x15\x20\x01(\tR\x05secCd\
    \x12#\n\rundrlying_sec\x18\x16\x20\x01(\tR\x0cundrlyingSec\x124\n\x16und\
    rlying_sec_maturity\x18\x17\x20\x01(\x03R\x14undrlyingSecMaturity\x12!\n\
    \x0cnotional_amt\x18\x18\x20\x01(\x03R\x0bnotionalAmt\x12-\n\x13org_noti\
    onal_in_inr\x18\x19\x20\x01(\x03R\x10orgNotionalInInr\x12-\n\x13ost_noti\
    onal_in_inr\x18\x1a\x20\x01(\x01R\x10ostNotionalInInr\x12#\n\rcont_notio\
    nal\x18\x1b\x20\x01(\x03R\x0ccontNotional\x12\x19\n\x08buy_sell\x18\x1c\
    \x20\x01(\tR\x07buySell\x121\n\x15fut_cash_proceeds_ccy\x18\x1d\x20\x01(\
    \tR\x12futCashProceedsCcy\x12*\n\x11fut_cash_proceeds\x18\x1e\x20\x01(\
    \x03R\x0ffutCashProceeds\x126\n\x18fut_cash_proceeds_in_inr\x18\x1f\x20\
    \x01(\x01R\x14futCashProceedsInInr\x12\x10\n\x03mtm\x18\x20\x20\x01(\x01\
    R\x03mtm\x12\x1c\n\nmtm_in_inr\x18!\x20\x01(\x01R\x08mtmInInr\x12\"\n\rf\
    wdmtm_in_inr\x18\"\x20\x01(\x01R\x0bfwdmtmInInr\x125\n\x18net_bcva_adj_g\
    mtm_in_inr\x18#\x20\x01(\x01R\x13netBcvaAdjGmtmInInr\x12\x10\n\x03cva\
    \x18$\x20\x01(\x01R\x03cva\x12\x10\n\x03dva\x18%\x20\x01(\x01R\x03dva\
    \x12\x12\n\x04bcva\x18&\x20\x01(\x01R\x04bcva\x12\x18\n\x07netpv01\x18'\
    \x20\x01(\x01R\x07netpv01\x12&\n\x0fbank_or_nonbank\x18(\x20\x01(\tR\rba\
    nkOrNonbank\x12\x1b\n\torg_tenor\x18)\x20\x01(\x03R\x08orgTenor\x12\x1b\
    \n\tres_tenor\x18*\x20\x01(\x03R\x08resTenor\x12\x1a\n\x08udrlying\x18+\
    \x20\x01(\tR\x08udrlying\x12\x1f\n\x0bdeal_status\x18,\x20\x01(\tR\ndeal\
    Status\x12\x1e\n\x0btot_int_amt\x18-\x20\x01(\x01R\ttotIntAmt\x12\x20\n\
    \x0ctot_prin_amt\x18.\x20\x01(\x01R\ntotPrinAmt\x12'\n\tcashflows\x18/\
    \x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
