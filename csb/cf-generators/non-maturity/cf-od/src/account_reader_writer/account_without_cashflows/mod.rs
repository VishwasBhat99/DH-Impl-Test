// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq, Clone, Default)]
pub struct OutputAccount {
    // message fields
    pub acc_no: ::std::string::String,
    pub acnts_internal_acnum: ::std::string::String,
    pub acnts_brn_code: ::std::string::String,
    pub acnts_client_num: ::std::string::String,
    pub ucic: ::std::string::String,
    pub acnts_curr_code: ::std::string::String,
    pub acnts_prod_code: ::std::string::String,
    pub gl_cd: ::std::string::String,
    pub acc_open_dt: i64,
    pub bal: f64,
    pub balccy: f64,
    pub int_rate: f64,
    pub int_type: ::std::string::String,
    pub int_bench: ::std::string::String,
    pub int_spread: ::std::string::String,
    pub last_reset_dt: i64,
    pub next_reset_dt: i64,
    pub reset_no_of_months: ::std::string::String,
    pub int_accrued_amt: f64,
    pub constitn: ::std::string::String,
    pub lm_exp: i64,
    pub lim: f64,
    pub lm_ccy: ::std::string::String,
    pub ext_rating_agency: ::std::string::String,
    pub ext_rating: ::std::string::String,
    pub int_rating: ::std::string::String,
    pub asset_cd: ::std::string::String,
    pub provision_amt: f64,
    pub prov_dt: i64,
    pub client_type: ::std::string::String,
    pub clients_name: ::std::string::String,
    pub clients_bsr_type_flg: ::std::string::String,
    pub clients_busdivn_code: ::std::string::String,
    pub clients_const_code: ::std::string::String,
    pub clients_pan_gir_num: ::std::string::String,
    pub clients_risk_categorization: ::std::string::String,
    pub clients_risk_cntry: ::std::string::String,
    pub clients_segment_code: ::std::string::String,
    pub corpcl_orgn_qualifier: ::std::string::String,
    pub corpcl_indus_code: ::std::string::String,
    pub corpcl_nature_of_bus1: ::std::string::String,
    pub corpcl_nature_of_bus2: ::std::string::String,
    pub corpcl_nature_of_bus3: ::std::string::String,
    pub corpcl_central_state_flg: ::std::string::String,
    pub corpcl_public_sector_flg: ::std::string::String,
    pub corpcl_primary_dlr_flg: ::std::string::String,
    pub corpcl_multilateral_bank: ::std::string::String,
    pub corpcl_connp_inv_num: ::std::string::String,
    pub corpcl_bc_gross_turnover: f64,
    pub w4b_cd: ::std::string::String,
    pub balm_llg: ::std::string::String,
    pub care_llg: ::std::string::String,
    pub ba_llg: ::std::string::String,
    pub asset_code: ::std::string::String,
    pub npa_dt: i64,
    pub account_balance: f64,
    pub pwo: f64,
    pub written_off_dt: i64,
    pub ho_balance: f64,
    pub npa_provision: f64,
    pub ho_provision: f64,
    pub suspencebalance: f64,
    pub suspence_writeoff: f64,
    pub ho_suspence: f64,
    pub claim: f64,
    pub primary: f64,
    pub collateral: f64,
    pub total_security: f64,
    pub primary_valuation_dt: i64,
    pub collateral_valuation_dt: i64,
    pub gold_deficit: f64,
    pub fraud: f64,
    pub wilful_default: f64,
    pub subsidy: f64,
    pub priority: ::std::string::String,
    pub priority_type: ::std::string::String,
    pub main_sector: ::std::string::String,
    pub sub_sector: ::std::string::String,
    pub activity: ::std::string::String,
    pub industry: ::std::string::String,
    pub categoryofborrower: ::std::string::String,
    pub org_gl_head: ::std::string::String,
    pub npa_amt: f64,
    pub sanc_dt: i64,
    pub occp_cd: ::std::string::String,
    pub sens_sec: ::std::string::String,
    pub prior_subtype: ::std::string::String,
    pub restruct_flag: ::std::string::String,
    pub restruct_dt: i64,
    pub mor_prd: ::std::string::String,
    pub rating: ::std::string::String,
    pub consitin: ::std::string::String,
    pub pan: ::std::string::String,
    pub limit_amt: f64,
    pub gross_adv: f64,
    pub exp_amt: f64,
    pub unvail_amt: f64,
    pub gold_gram: f64,
    pub fund_flag: ::std::string::String,
    pub ltv_value: f64,
    pub pt_i64_1: i64,
    pub pt_i64_2: i64,
    pub pt_i64_3: i64,
    pub pt_i64_4: i64,
    pub pt_i64_5: i64,
    pub pt_f64_1: f64,
    pub pt_f64_2: f64,
    pub pt_f64_3: f64,
    pub pt_f64_4: f64,
    pub pt_f64_5: f64,
    pub pt_str_1: ::std::string::String,
    pub pt_str_2: ::std::string::String,
    pub pt_str_3: ::std::string::String,
    pub pt_str_4: ::std::string::String,
    pub pt_str_5: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl OutputAccount {
    pub fn new() -> OutputAccount {
        ::std::default::Default::default()
    }

    // string acc_no = 1;

    pub fn clear_acc_no(&mut self) {
        self.acc_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_no(&mut self, v: ::std::string::String) {
        self.acc_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_no(&mut self) -> &mut ::std::string::String {
        &mut self.acc_no
    }

    // Take field
    pub fn take_acc_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_no, ::std::string::String::new())
    }

    pub fn get_acc_no(&self) -> &str {
        &self.acc_no
    }

    // string acnts_internal_acnum = 2;

    pub fn clear_acnts_internal_acnum(&mut self) {
        self.acnts_internal_acnum.clear();
    }

    // Param is passed by value, moved
    pub fn set_acnts_internal_acnum(&mut self, v: ::std::string::String) {
        self.acnts_internal_acnum = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acnts_internal_acnum(&mut self) -> &mut ::std::string::String {
        &mut self.acnts_internal_acnum
    }

    // Take field
    pub fn take_acnts_internal_acnum(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acnts_internal_acnum, ::std::string::String::new())
    }

    pub fn get_acnts_internal_acnum(&self) -> &str {
        &self.acnts_internal_acnum
    }

    // string acnts_brn_code = 3;

    pub fn clear_acnts_brn_code(&mut self) {
        self.acnts_brn_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_acnts_brn_code(&mut self, v: ::std::string::String) {
        self.acnts_brn_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acnts_brn_code(&mut self) -> &mut ::std::string::String {
        &mut self.acnts_brn_code
    }

    // Take field
    pub fn take_acnts_brn_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acnts_brn_code, ::std::string::String::new())
    }

    pub fn get_acnts_brn_code(&self) -> &str {
        &self.acnts_brn_code
    }

    // string acnts_client_num = 4;

    pub fn clear_acnts_client_num(&mut self) {
        self.acnts_client_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_acnts_client_num(&mut self, v: ::std::string::String) {
        self.acnts_client_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acnts_client_num(&mut self) -> &mut ::std::string::String {
        &mut self.acnts_client_num
    }

    // Take field
    pub fn take_acnts_client_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acnts_client_num, ::std::string::String::new())
    }

    pub fn get_acnts_client_num(&self) -> &str {
        &self.acnts_client_num
    }

    // string ucic = 5;

    pub fn clear_ucic(&mut self) {
        self.ucic.clear();
    }

    // Param is passed by value, moved
    pub fn set_ucic(&mut self, v: ::std::string::String) {
        self.ucic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ucic(&mut self) -> &mut ::std::string::String {
        &mut self.ucic
    }

    // Take field
    pub fn take_ucic(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ucic, ::std::string::String::new())
    }

    pub fn get_ucic(&self) -> &str {
        &self.ucic
    }

    // string acnts_curr_code = 6;

    pub fn clear_acnts_curr_code(&mut self) {
        self.acnts_curr_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_acnts_curr_code(&mut self, v: ::std::string::String) {
        self.acnts_curr_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acnts_curr_code(&mut self) -> &mut ::std::string::String {
        &mut self.acnts_curr_code
    }

    // Take field
    pub fn take_acnts_curr_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acnts_curr_code, ::std::string::String::new())
    }

    pub fn get_acnts_curr_code(&self) -> &str {
        &self.acnts_curr_code
    }

    // string acnts_prod_code = 7;

    pub fn clear_acnts_prod_code(&mut self) {
        self.acnts_prod_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_acnts_prod_code(&mut self, v: ::std::string::String) {
        self.acnts_prod_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acnts_prod_code(&mut self) -> &mut ::std::string::String {
        &mut self.acnts_prod_code
    }

    // Take field
    pub fn take_acnts_prod_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acnts_prod_code, ::std::string::String::new())
    }

    pub fn get_acnts_prod_code(&self) -> &str {
        &self.acnts_prod_code
    }

    // string gl_cd = 8;

    pub fn clear_gl_cd(&mut self) {
        self.gl_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_cd(&mut self, v: ::std::string::String) {
        self.gl_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_cd(&mut self) -> &mut ::std::string::String {
        &mut self.gl_cd
    }

    // Take field
    pub fn take_gl_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_cd, ::std::string::String::new())
    }

    pub fn get_gl_cd(&self) -> &str {
        &self.gl_cd
    }

    // int64 acc_open_dt = 9;

    pub fn clear_acc_open_dt(&mut self) {
        self.acc_open_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_acc_open_dt(&mut self, v: i64) {
        self.acc_open_dt = v;
    }

    pub fn get_acc_open_dt(&self) -> i64 {
        self.acc_open_dt
    }

    // double bal = 10;

    pub fn clear_bal(&mut self) {
        self.bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bal(&mut self, v: f64) {
        self.bal = v;
    }

    pub fn get_bal(&self) -> f64 {
        self.bal
    }

    // double balccy = 11;

    pub fn clear_balccy(&mut self) {
        self.balccy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_balccy(&mut self, v: f64) {
        self.balccy = v;
    }

    pub fn get_balccy(&self) -> f64 {
        self.balccy
    }

    // double int_rate = 12;

    pub fn clear_int_rate(&mut self) {
        self.int_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rate(&mut self, v: f64) {
        self.int_rate = v;
    }

    pub fn get_int_rate(&self) -> f64 {
        self.int_rate
    }

    // string int_type = 13;

    pub fn clear_int_type(&mut self) {
        self.int_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_type(&mut self, v: ::std::string::String) {
        self.int_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_type(&mut self) -> &mut ::std::string::String {
        &mut self.int_type
    }

    // Take field
    pub fn take_int_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_type, ::std::string::String::new())
    }

    pub fn get_int_type(&self) -> &str {
        &self.int_type
    }

    // string int_bench = 14;

    pub fn clear_int_bench(&mut self) {
        self.int_bench.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_bench(&mut self, v: ::std::string::String) {
        self.int_bench = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_bench(&mut self) -> &mut ::std::string::String {
        &mut self.int_bench
    }

    // Take field
    pub fn take_int_bench(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_bench, ::std::string::String::new())
    }

    pub fn get_int_bench(&self) -> &str {
        &self.int_bench
    }

    // string int_spread = 15;

    pub fn clear_int_spread(&mut self) {
        self.int_spread.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_spread(&mut self, v: ::std::string::String) {
        self.int_spread = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_spread(&mut self) -> &mut ::std::string::String {
        &mut self.int_spread
    }

    // Take field
    pub fn take_int_spread(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_spread, ::std::string::String::new())
    }

    pub fn get_int_spread(&self) -> &str {
        &self.int_spread
    }

    // int64 last_reset_dt = 16;

    pub fn clear_last_reset_dt(&mut self) {
        self.last_reset_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_reset_dt(&mut self, v: i64) {
        self.last_reset_dt = v;
    }

    pub fn get_last_reset_dt(&self) -> i64 {
        self.last_reset_dt
    }

    // int64 next_reset_dt = 17;

    pub fn clear_next_reset_dt(&mut self) {
        self.next_reset_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_reset_dt(&mut self, v: i64) {
        self.next_reset_dt = v;
    }

    pub fn get_next_reset_dt(&self) -> i64 {
        self.next_reset_dt
    }

    // string reset_no_of_months = 18;

    pub fn clear_reset_no_of_months(&mut self) {
        self.reset_no_of_months.clear();
    }

    // Param is passed by value, moved
    pub fn set_reset_no_of_months(&mut self, v: ::std::string::String) {
        self.reset_no_of_months = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reset_no_of_months(&mut self) -> &mut ::std::string::String {
        &mut self.reset_no_of_months
    }

    // Take field
    pub fn take_reset_no_of_months(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reset_no_of_months, ::std::string::String::new())
    }

    pub fn get_reset_no_of_months(&self) -> &str {
        &self.reset_no_of_months
    }

    // double int_accrued_amt = 19;

    pub fn clear_int_accrued_amt(&mut self) {
        self.int_accrued_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_accrued_amt(&mut self, v: f64) {
        self.int_accrued_amt = v;
    }

    pub fn get_int_accrued_amt(&self) -> f64 {
        self.int_accrued_amt
    }

    // string constitn = 20;

    pub fn clear_constitn(&mut self) {
        self.constitn.clear();
    }

    // Param is passed by value, moved
    pub fn set_constitn(&mut self, v: ::std::string::String) {
        self.constitn = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_constitn(&mut self) -> &mut ::std::string::String {
        &mut self.constitn
    }

    // Take field
    pub fn take_constitn(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.constitn, ::std::string::String::new())
    }

    pub fn get_constitn(&self) -> &str {
        &self.constitn
    }

    // int64 lm_exp = 21;

    pub fn clear_lm_exp(&mut self) {
        self.lm_exp = 0;
    }

    // Param is passed by value, moved
    pub fn set_lm_exp(&mut self, v: i64) {
        self.lm_exp = v;
    }

    pub fn get_lm_exp(&self) -> i64 {
        self.lm_exp
    }

    // double lim = 22;

    pub fn clear_lim(&mut self) {
        self.lim = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lim(&mut self, v: f64) {
        self.lim = v;
    }

    pub fn get_lim(&self) -> f64 {
        self.lim
    }

    // string lm_ccy = 23;

    pub fn clear_lm_ccy(&mut self) {
        self.lm_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_lm_ccy(&mut self, v: ::std::string::String) {
        self.lm_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lm_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.lm_ccy
    }

    // Take field
    pub fn take_lm_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lm_ccy, ::std::string::String::new())
    }

    pub fn get_lm_ccy(&self) -> &str {
        &self.lm_ccy
    }

    // string ext_rating_agency = 24;

    pub fn clear_ext_rating_agency(&mut self) {
        self.ext_rating_agency.clear();
    }

    // Param is passed by value, moved
    pub fn set_ext_rating_agency(&mut self, v: ::std::string::String) {
        self.ext_rating_agency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ext_rating_agency(&mut self) -> &mut ::std::string::String {
        &mut self.ext_rating_agency
    }

    // Take field
    pub fn take_ext_rating_agency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ext_rating_agency, ::std::string::String::new())
    }

    pub fn get_ext_rating_agency(&self) -> &str {
        &self.ext_rating_agency
    }

    // string ext_rating = 25;

    pub fn clear_ext_rating(&mut self) {
        self.ext_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_ext_rating(&mut self, v: ::std::string::String) {
        self.ext_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ext_rating(&mut self) -> &mut ::std::string::String {
        &mut self.ext_rating
    }

    // Take field
    pub fn take_ext_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ext_rating, ::std::string::String::new())
    }

    pub fn get_ext_rating(&self) -> &str {
        &self.ext_rating
    }

    // string int_rating = 26;

    pub fn clear_int_rating(&mut self) {
        self.int_rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_rating(&mut self, v: ::std::string::String) {
        self.int_rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_rating(&mut self) -> &mut ::std::string::String {
        &mut self.int_rating
    }

    // Take field
    pub fn take_int_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_rating, ::std::string::String::new())
    }

    pub fn get_int_rating(&self) -> &str {
        &self.int_rating
    }

    // string asset_cd = 27;

    pub fn clear_asset_cd(&mut self) {
        self.asset_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_cd(&mut self, v: ::std::string::String) {
        self.asset_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_cd(&mut self) -> &mut ::std::string::String {
        &mut self.asset_cd
    }

    // Take field
    pub fn take_asset_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_cd, ::std::string::String::new())
    }

    pub fn get_asset_cd(&self) -> &str {
        &self.asset_cd
    }

    // double provision_amt = 28;

    pub fn clear_provision_amt(&mut self) {
        self.provision_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_provision_amt(&mut self, v: f64) {
        self.provision_amt = v;
    }

    pub fn get_provision_amt(&self) -> f64 {
        self.provision_amt
    }

    // int64 prov_dt = 29;

    pub fn clear_prov_dt(&mut self) {
        self.prov_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_prov_dt(&mut self, v: i64) {
        self.prov_dt = v;
    }

    pub fn get_prov_dt(&self) -> i64 {
        self.prov_dt
    }

    // string client_type = 30;

    pub fn clear_client_type(&mut self) {
        self.client_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_type(&mut self, v: ::std::string::String) {
        self.client_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_type(&mut self) -> &mut ::std::string::String {
        &mut self.client_type
    }

    // Take field
    pub fn take_client_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_type, ::std::string::String::new())
    }

    pub fn get_client_type(&self) -> &str {
        &self.client_type
    }

    // string clients_name = 31;

    pub fn clear_clients_name(&mut self) {
        self.clients_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_name(&mut self, v: ::std::string::String) {
        self.clients_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_name(&mut self) -> &mut ::std::string::String {
        &mut self.clients_name
    }

    // Take field
    pub fn take_clients_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_name, ::std::string::String::new())
    }

    pub fn get_clients_name(&self) -> &str {
        &self.clients_name
    }

    // string clients_bsr_type_flg = 32;

    pub fn clear_clients_bsr_type_flg(&mut self) {
        self.clients_bsr_type_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_bsr_type_flg(&mut self, v: ::std::string::String) {
        self.clients_bsr_type_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_bsr_type_flg(&mut self) -> &mut ::std::string::String {
        &mut self.clients_bsr_type_flg
    }

    // Take field
    pub fn take_clients_bsr_type_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_bsr_type_flg, ::std::string::String::new())
    }

    pub fn get_clients_bsr_type_flg(&self) -> &str {
        &self.clients_bsr_type_flg
    }

    // string clients_busdivn_code = 33;

    pub fn clear_clients_busdivn_code(&mut self) {
        self.clients_busdivn_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_busdivn_code(&mut self, v: ::std::string::String) {
        self.clients_busdivn_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_busdivn_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_busdivn_code
    }

    // Take field
    pub fn take_clients_busdivn_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_busdivn_code, ::std::string::String::new())
    }

    pub fn get_clients_busdivn_code(&self) -> &str {
        &self.clients_busdivn_code
    }

    // string clients_const_code = 34;

    pub fn clear_clients_const_code(&mut self) {
        self.clients_const_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_const_code(&mut self, v: ::std::string::String) {
        self.clients_const_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_const_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_const_code
    }

    // Take field
    pub fn take_clients_const_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_const_code, ::std::string::String::new())
    }

    pub fn get_clients_const_code(&self) -> &str {
        &self.clients_const_code
    }

    // string clients_pan_gir_num = 35;

    pub fn clear_clients_pan_gir_num(&mut self) {
        self.clients_pan_gir_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_pan_gir_num(&mut self, v: ::std::string::String) {
        self.clients_pan_gir_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_pan_gir_num(&mut self) -> &mut ::std::string::String {
        &mut self.clients_pan_gir_num
    }

    // Take field
    pub fn take_clients_pan_gir_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_pan_gir_num, ::std::string::String::new())
    }

    pub fn get_clients_pan_gir_num(&self) -> &str {
        &self.clients_pan_gir_num
    }

    // string clients_risk_categorization = 36;

    pub fn clear_clients_risk_categorization(&mut self) {
        self.clients_risk_categorization.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_risk_categorization(&mut self, v: ::std::string::String) {
        self.clients_risk_categorization = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_risk_categorization(&mut self) -> &mut ::std::string::String {
        &mut self.clients_risk_categorization
    }

    // Take field
    pub fn take_clients_risk_categorization(&mut self) -> ::std::string::String {
        ::std::mem::replace(
            &mut self.clients_risk_categorization,
            ::std::string::String::new(),
        )
    }

    pub fn get_clients_risk_categorization(&self) -> &str {
        &self.clients_risk_categorization
    }

    // string clients_risk_cntry = 37;

    pub fn clear_clients_risk_cntry(&mut self) {
        self.clients_risk_cntry.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_risk_cntry(&mut self, v: ::std::string::String) {
        self.clients_risk_cntry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_risk_cntry(&mut self) -> &mut ::std::string::String {
        &mut self.clients_risk_cntry
    }

    // Take field
    pub fn take_clients_risk_cntry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_risk_cntry, ::std::string::String::new())
    }

    pub fn get_clients_risk_cntry(&self) -> &str {
        &self.clients_risk_cntry
    }

    // string clients_segment_code = 38;

    pub fn clear_clients_segment_code(&mut self) {
        self.clients_segment_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients_segment_code(&mut self, v: ::std::string::String) {
        self.clients_segment_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clients_segment_code(&mut self) -> &mut ::std::string::String {
        &mut self.clients_segment_code
    }

    // Take field
    pub fn take_clients_segment_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clients_segment_code, ::std::string::String::new())
    }

    pub fn get_clients_segment_code(&self) -> &str {
        &self.clients_segment_code
    }

    // string corpcl_orgn_qualifier = 39;

    pub fn clear_corpcl_orgn_qualifier(&mut self) {
        self.corpcl_orgn_qualifier.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_orgn_qualifier(&mut self, v: ::std::string::String) {
        self.corpcl_orgn_qualifier = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_orgn_qualifier(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_orgn_qualifier
    }

    // Take field
    pub fn take_corpcl_orgn_qualifier(&mut self) -> ::std::string::String {
        ::std::mem::replace(
            &mut self.corpcl_orgn_qualifier,
            ::std::string::String::new(),
        )
    }

    pub fn get_corpcl_orgn_qualifier(&self) -> &str {
        &self.corpcl_orgn_qualifier
    }

    // string corpcl_indus_code = 40;

    pub fn clear_corpcl_indus_code(&mut self) {
        self.corpcl_indus_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_indus_code(&mut self, v: ::std::string::String) {
        self.corpcl_indus_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_indus_code(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_indus_code
    }

    // Take field
    pub fn take_corpcl_indus_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_indus_code, ::std::string::String::new())
    }

    pub fn get_corpcl_indus_code(&self) -> &str {
        &self.corpcl_indus_code
    }

    // string corpcl_nature_of_bus1 = 41;

    pub fn clear_corpcl_nature_of_bus1(&mut self) {
        self.corpcl_nature_of_bus1.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_nature_of_bus1(&mut self, v: ::std::string::String) {
        self.corpcl_nature_of_bus1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_nature_of_bus1(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_nature_of_bus1
    }

    // Take field
    pub fn take_corpcl_nature_of_bus1(&mut self) -> ::std::string::String {
        ::std::mem::replace(
            &mut self.corpcl_nature_of_bus1,
            ::std::string::String::new(),
        )
    }

    pub fn get_corpcl_nature_of_bus1(&self) -> &str {
        &self.corpcl_nature_of_bus1
    }

    // string corpcl_nature_of_bus2 = 42;

    pub fn clear_corpcl_nature_of_bus2(&mut self) {
        self.corpcl_nature_of_bus2.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_nature_of_bus2(&mut self, v: ::std::string::String) {
        self.corpcl_nature_of_bus2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_nature_of_bus2(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_nature_of_bus2
    }

    // Take field
    pub fn take_corpcl_nature_of_bus2(&mut self) -> ::std::string::String {
        ::std::mem::replace(
            &mut self.corpcl_nature_of_bus2,
            ::std::string::String::new(),
        )
    }

    pub fn get_corpcl_nature_of_bus2(&self) -> &str {
        &self.corpcl_nature_of_bus2
    }

    // string corpcl_nature_of_bus3 = 43;

    pub fn clear_corpcl_nature_of_bus3(&mut self) {
        self.corpcl_nature_of_bus3.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_nature_of_bus3(&mut self, v: ::std::string::String) {
        self.corpcl_nature_of_bus3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_nature_of_bus3(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_nature_of_bus3
    }

    // Take field
    pub fn take_corpcl_nature_of_bus3(&mut self) -> ::std::string::String {
        ::std::mem::replace(
            &mut self.corpcl_nature_of_bus3,
            ::std::string::String::new(),
        )
    }

    pub fn get_corpcl_nature_of_bus3(&self) -> &str {
        &self.corpcl_nature_of_bus3
    }

    // string corpcl_central_state_flg = 44;

    pub fn clear_corpcl_central_state_flg(&mut self) {
        self.corpcl_central_state_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_central_state_flg(&mut self, v: ::std::string::String) {
        self.corpcl_central_state_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_central_state_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_central_state_flg
    }

    // Take field
    pub fn take_corpcl_central_state_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(
            &mut self.corpcl_central_state_flg,
            ::std::string::String::new(),
        )
    }

    pub fn get_corpcl_central_state_flg(&self) -> &str {
        &self.corpcl_central_state_flg
    }

    // string corpcl_public_sector_flg = 45;

    pub fn clear_corpcl_public_sector_flg(&mut self) {
        self.corpcl_public_sector_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_public_sector_flg(&mut self, v: ::std::string::String) {
        self.corpcl_public_sector_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_public_sector_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_public_sector_flg
    }

    // Take field
    pub fn take_corpcl_public_sector_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(
            &mut self.corpcl_public_sector_flg,
            ::std::string::String::new(),
        )
    }

    pub fn get_corpcl_public_sector_flg(&self) -> &str {
        &self.corpcl_public_sector_flg
    }

    // string corpcl_primary_dlr_flg = 46;

    pub fn clear_corpcl_primary_dlr_flg(&mut self) {
        self.corpcl_primary_dlr_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_primary_dlr_flg(&mut self, v: ::std::string::String) {
        self.corpcl_primary_dlr_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_primary_dlr_flg(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_primary_dlr_flg
    }

    // Take field
    pub fn take_corpcl_primary_dlr_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(
            &mut self.corpcl_primary_dlr_flg,
            ::std::string::String::new(),
        )
    }

    pub fn get_corpcl_primary_dlr_flg(&self) -> &str {
        &self.corpcl_primary_dlr_flg
    }

    // string corpcl_multilateral_bank = 47;

    pub fn clear_corpcl_multilateral_bank(&mut self) {
        self.corpcl_multilateral_bank.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_multilateral_bank(&mut self, v: ::std::string::String) {
        self.corpcl_multilateral_bank = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_multilateral_bank(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_multilateral_bank
    }

    // Take field
    pub fn take_corpcl_multilateral_bank(&mut self) -> ::std::string::String {
        ::std::mem::replace(
            &mut self.corpcl_multilateral_bank,
            ::std::string::String::new(),
        )
    }

    pub fn get_corpcl_multilateral_bank(&self) -> &str {
        &self.corpcl_multilateral_bank
    }

    // string corpcl_connp_inv_num = 48;

    pub fn clear_corpcl_connp_inv_num(&mut self) {
        self.corpcl_connp_inv_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpcl_connp_inv_num(&mut self, v: ::std::string::String) {
        self.corpcl_connp_inv_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpcl_connp_inv_num(&mut self) -> &mut ::std::string::String {
        &mut self.corpcl_connp_inv_num
    }

    // Take field
    pub fn take_corpcl_connp_inv_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpcl_connp_inv_num, ::std::string::String::new())
    }

    pub fn get_corpcl_connp_inv_num(&self) -> &str {
        &self.corpcl_connp_inv_num
    }

    // double corpcl_bc_gross_turnover = 49;

    pub fn clear_corpcl_bc_gross_turnover(&mut self) {
        self.corpcl_bc_gross_turnover = 0.;
    }

    // Param is passed by value, moved
    pub fn set_corpcl_bc_gross_turnover(&mut self, v: f64) {
        self.corpcl_bc_gross_turnover = v;
    }

    pub fn get_corpcl_bc_gross_turnover(&self) -> f64 {
        self.corpcl_bc_gross_turnover
    }

    // string w4b_cd = 50;

    pub fn clear_w4b_cd(&mut self) {
        self.w4b_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_w4b_cd(&mut self, v: ::std::string::String) {
        self.w4b_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_w4b_cd(&mut self) -> &mut ::std::string::String {
        &mut self.w4b_cd
    }

    // Take field
    pub fn take_w4b_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.w4b_cd, ::std::string::String::new())
    }

    pub fn get_w4b_cd(&self) -> &str {
        &self.w4b_cd
    }

    // string balm_llg = 51;

    pub fn clear_balm_llg(&mut self) {
        self.balm_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_balm_llg(&mut self, v: ::std::string::String) {
        self.balm_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balm_llg(&mut self) -> &mut ::std::string::String {
        &mut self.balm_llg
    }

    // Take field
    pub fn take_balm_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balm_llg, ::std::string::String::new())
    }

    pub fn get_balm_llg(&self) -> &str {
        &self.balm_llg
    }

    // string care_llg = 52;

    pub fn clear_care_llg(&mut self) {
        self.care_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_care_llg(&mut self, v: ::std::string::String) {
        self.care_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_care_llg(&mut self) -> &mut ::std::string::String {
        &mut self.care_llg
    }

    // Take field
    pub fn take_care_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.care_llg, ::std::string::String::new())
    }

    pub fn get_care_llg(&self) -> &str {
        &self.care_llg
    }

    // string ba_llg = 53;

    pub fn clear_ba_llg(&mut self) {
        self.ba_llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_ba_llg(&mut self, v: ::std::string::String) {
        self.ba_llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ba_llg(&mut self) -> &mut ::std::string::String {
        &mut self.ba_llg
    }

    // Take field
    pub fn take_ba_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ba_llg, ::std::string::String::new())
    }

    pub fn get_ba_llg(&self) -> &str {
        &self.ba_llg
    }

    // string asset_code = 54;

    pub fn clear_asset_code(&mut self) {
        self.asset_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_code(&mut self, v: ::std::string::String) {
        self.asset_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_code(&mut self) -> &mut ::std::string::String {
        &mut self.asset_code
    }

    // Take field
    pub fn take_asset_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_code, ::std::string::String::new())
    }

    pub fn get_asset_code(&self) -> &str {
        &self.asset_code
    }

    // int64 npa_dt = 55;

    pub fn clear_npa_dt(&mut self) {
        self.npa_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_npa_dt(&mut self, v: i64) {
        self.npa_dt = v;
    }

    pub fn get_npa_dt(&self) -> i64 {
        self.npa_dt
    }

    // double account_balance = 56;

    pub fn clear_account_balance(&mut self) {
        self.account_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_account_balance(&mut self, v: f64) {
        self.account_balance = v;
    }

    pub fn get_account_balance(&self) -> f64 {
        self.account_balance
    }

    // double pwo = 57;

    pub fn clear_pwo(&mut self) {
        self.pwo = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pwo(&mut self, v: f64) {
        self.pwo = v;
    }

    pub fn get_pwo(&self) -> f64 {
        self.pwo
    }

    // int64 written_off_dt = 58;

    pub fn clear_written_off_dt(&mut self) {
        self.written_off_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_written_off_dt(&mut self, v: i64) {
        self.written_off_dt = v;
    }

    pub fn get_written_off_dt(&self) -> i64 {
        self.written_off_dt
    }

    // double ho_balance = 59;

    pub fn clear_ho_balance(&mut self) {
        self.ho_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ho_balance(&mut self, v: f64) {
        self.ho_balance = v;
    }

    pub fn get_ho_balance(&self) -> f64 {
        self.ho_balance
    }

    // double npa_provision = 60;

    pub fn clear_npa_provision(&mut self) {
        self.npa_provision = 0.;
    }

    // Param is passed by value, moved
    pub fn set_npa_provision(&mut self, v: f64) {
        self.npa_provision = v;
    }

    pub fn get_npa_provision(&self) -> f64 {
        self.npa_provision
    }

    // double ho_provision = 61;

    pub fn clear_ho_provision(&mut self) {
        self.ho_provision = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ho_provision(&mut self, v: f64) {
        self.ho_provision = v;
    }

    pub fn get_ho_provision(&self) -> f64 {
        self.ho_provision
    }

    // double suspencebalance = 62;

    pub fn clear_suspencebalance(&mut self) {
        self.suspencebalance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_suspencebalance(&mut self, v: f64) {
        self.suspencebalance = v;
    }

    pub fn get_suspencebalance(&self) -> f64 {
        self.suspencebalance
    }

    // double suspence_writeoff = 63;

    pub fn clear_suspence_writeoff(&mut self) {
        self.suspence_writeoff = 0.;
    }

    // Param is passed by value, moved
    pub fn set_suspence_writeoff(&mut self, v: f64) {
        self.suspence_writeoff = v;
    }

    pub fn get_suspence_writeoff(&self) -> f64 {
        self.suspence_writeoff
    }

    // double ho_suspence = 64;

    pub fn clear_ho_suspence(&mut self) {
        self.ho_suspence = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ho_suspence(&mut self, v: f64) {
        self.ho_suspence = v;
    }

    pub fn get_ho_suspence(&self) -> f64 {
        self.ho_suspence
    }

    // double claim = 65;

    pub fn clear_claim(&mut self) {
        self.claim = 0.;
    }

    // Param is passed by value, moved
    pub fn set_claim(&mut self, v: f64) {
        self.claim = v;
    }

    pub fn get_claim(&self) -> f64 {
        self.claim
    }

    // double primary = 66;

    pub fn clear_primary(&mut self) {
        self.primary = 0.;
    }

    // Param is passed by value, moved
    pub fn set_primary(&mut self, v: f64) {
        self.primary = v;
    }

    pub fn get_primary(&self) -> f64 {
        self.primary
    }

    // double collateral = 67;

    pub fn clear_collateral(&mut self) {
        self.collateral = 0.;
    }

    // Param is passed by value, moved
    pub fn set_collateral(&mut self, v: f64) {
        self.collateral = v;
    }

    pub fn get_collateral(&self) -> f64 {
        self.collateral
    }

    // double total_security = 68;

    pub fn clear_total_security(&mut self) {
        self.total_security = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_security(&mut self, v: f64) {
        self.total_security = v;
    }

    pub fn get_total_security(&self) -> f64 {
        self.total_security
    }

    // int64 primary_valuation_dt = 69;

    pub fn clear_primary_valuation_dt(&mut self) {
        self.primary_valuation_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_primary_valuation_dt(&mut self, v: i64) {
        self.primary_valuation_dt = v;
    }

    pub fn get_primary_valuation_dt(&self) -> i64 {
        self.primary_valuation_dt
    }

    // int64 collateral_valuation_dt = 70;

    pub fn clear_collateral_valuation_dt(&mut self) {
        self.collateral_valuation_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_collateral_valuation_dt(&mut self, v: i64) {
        self.collateral_valuation_dt = v;
    }

    pub fn get_collateral_valuation_dt(&self) -> i64 {
        self.collateral_valuation_dt
    }

    // double gold_deficit = 71;

    pub fn clear_gold_deficit(&mut self) {
        self.gold_deficit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gold_deficit(&mut self, v: f64) {
        self.gold_deficit = v;
    }

    pub fn get_gold_deficit(&self) -> f64 {
        self.gold_deficit
    }

    // double fraud = 72;

    pub fn clear_fraud(&mut self) {
        self.fraud = 0.;
    }

    // Param is passed by value, moved
    pub fn set_fraud(&mut self, v: f64) {
        self.fraud = v;
    }

    pub fn get_fraud(&self) -> f64 {
        self.fraud
    }

    // double wilful_default = 73;

    pub fn clear_wilful_default(&mut self) {
        self.wilful_default = 0.;
    }

    // Param is passed by value, moved
    pub fn set_wilful_default(&mut self, v: f64) {
        self.wilful_default = v;
    }

    pub fn get_wilful_default(&self) -> f64 {
        self.wilful_default
    }

    // double subsidy = 74;

    pub fn clear_subsidy(&mut self) {
        self.subsidy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_subsidy(&mut self, v: f64) {
        self.subsidy = v;
    }

    pub fn get_subsidy(&self) -> f64 {
        self.subsidy
    }

    // string priority = 75;

    pub fn clear_priority(&mut self) {
        self.priority.clear();
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: ::std::string::String) {
        self.priority = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_priority(&mut self) -> &mut ::std::string::String {
        &mut self.priority
    }

    // Take field
    pub fn take_priority(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.priority, ::std::string::String::new())
    }

    pub fn get_priority(&self) -> &str {
        &self.priority
    }

    // string priority_type = 76;

    pub fn clear_priority_type(&mut self) {
        self.priority_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_priority_type(&mut self, v: ::std::string::String) {
        self.priority_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_priority_type(&mut self) -> &mut ::std::string::String {
        &mut self.priority_type
    }

    // Take field
    pub fn take_priority_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.priority_type, ::std::string::String::new())
    }

    pub fn get_priority_type(&self) -> &str {
        &self.priority_type
    }

    // string main_sector = 77;

    pub fn clear_main_sector(&mut self) {
        self.main_sector.clear();
    }

    // Param is passed by value, moved
    pub fn set_main_sector(&mut self, v: ::std::string::String) {
        self.main_sector = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_main_sector(&mut self) -> &mut ::std::string::String {
        &mut self.main_sector
    }

    // Take field
    pub fn take_main_sector(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.main_sector, ::std::string::String::new())
    }

    pub fn get_main_sector(&self) -> &str {
        &self.main_sector
    }

    // string sub_sector = 78;

    pub fn clear_sub_sector(&mut self) {
        self.sub_sector.clear();
    }

    // Param is passed by value, moved
    pub fn set_sub_sector(&mut self, v: ::std::string::String) {
        self.sub_sector = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sub_sector(&mut self) -> &mut ::std::string::String {
        &mut self.sub_sector
    }

    // Take field
    pub fn take_sub_sector(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sub_sector, ::std::string::String::new())
    }

    pub fn get_sub_sector(&self) -> &str {
        &self.sub_sector
    }

    // string activity = 79;

    pub fn clear_activity(&mut self) {
        self.activity.clear();
    }

    // Param is passed by value, moved
    pub fn set_activity(&mut self, v: ::std::string::String) {
        self.activity = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_activity(&mut self) -> &mut ::std::string::String {
        &mut self.activity
    }

    // Take field
    pub fn take_activity(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.activity, ::std::string::String::new())
    }

    pub fn get_activity(&self) -> &str {
        &self.activity
    }

    // string industry = 80;

    pub fn clear_industry(&mut self) {
        self.industry.clear();
    }

    // Param is passed by value, moved
    pub fn set_industry(&mut self, v: ::std::string::String) {
        self.industry = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_industry(&mut self) -> &mut ::std::string::String {
        &mut self.industry
    }

    // Take field
    pub fn take_industry(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.industry, ::std::string::String::new())
    }

    pub fn get_industry(&self) -> &str {
        &self.industry
    }

    // string categoryofborrower = 81;

    pub fn clear_categoryofborrower(&mut self) {
        self.categoryofborrower.clear();
    }

    // Param is passed by value, moved
    pub fn set_categoryofborrower(&mut self, v: ::std::string::String) {
        self.categoryofborrower = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_categoryofborrower(&mut self) -> &mut ::std::string::String {
        &mut self.categoryofborrower
    }

    // Take field
    pub fn take_categoryofborrower(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.categoryofborrower, ::std::string::String::new())
    }

    pub fn get_categoryofborrower(&self) -> &str {
        &self.categoryofborrower
    }

    // string org_gl_head = 82;

    pub fn clear_org_gl_head(&mut self) {
        self.org_gl_head.clear();
    }

    // Param is passed by value, moved
    pub fn set_org_gl_head(&mut self, v: ::std::string::String) {
        self.org_gl_head = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_org_gl_head(&mut self) -> &mut ::std::string::String {
        &mut self.org_gl_head
    }

    // Take field
    pub fn take_org_gl_head(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.org_gl_head, ::std::string::String::new())
    }

    pub fn get_org_gl_head(&self) -> &str {
        &self.org_gl_head
    }

    // double npa_amt = 83;

    pub fn clear_npa_amt(&mut self) {
        self.npa_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_npa_amt(&mut self, v: f64) {
        self.npa_amt = v;
    }

    pub fn get_npa_amt(&self) -> f64 {
        self.npa_amt
    }

    // int64 sanc_dt = 84;

    pub fn clear_sanc_dt(&mut self) {
        self.sanc_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_sanc_dt(&mut self, v: i64) {
        self.sanc_dt = v;
    }

    pub fn get_sanc_dt(&self) -> i64 {
        self.sanc_dt
    }

    // string occp_cd = 85;

    pub fn clear_occp_cd(&mut self) {
        self.occp_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_occp_cd(&mut self, v: ::std::string::String) {
        self.occp_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_occp_cd(&mut self) -> &mut ::std::string::String {
        &mut self.occp_cd
    }

    // Take field
    pub fn take_occp_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.occp_cd, ::std::string::String::new())
    }

    pub fn get_occp_cd(&self) -> &str {
        &self.occp_cd
    }

    // string sens_sec = 86;

    pub fn clear_sens_sec(&mut self) {
        self.sens_sec.clear();
    }

    // Param is passed by value, moved
    pub fn set_sens_sec(&mut self, v: ::std::string::String) {
        self.sens_sec = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sens_sec(&mut self) -> &mut ::std::string::String {
        &mut self.sens_sec
    }

    // Take field
    pub fn take_sens_sec(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sens_sec, ::std::string::String::new())
    }

    pub fn get_sens_sec(&self) -> &str {
        &self.sens_sec
    }

    // string prior_subtype = 87;

    pub fn clear_prior_subtype(&mut self) {
        self.prior_subtype.clear();
    }

    // Param is passed by value, moved
    pub fn set_prior_subtype(&mut self, v: ::std::string::String) {
        self.prior_subtype = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prior_subtype(&mut self) -> &mut ::std::string::String {
        &mut self.prior_subtype
    }

    // Take field
    pub fn take_prior_subtype(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prior_subtype, ::std::string::String::new())
    }

    pub fn get_prior_subtype(&self) -> &str {
        &self.prior_subtype
    }

    // string restruct_flag = 88;

    pub fn clear_restruct_flag(&mut self) {
        self.restruct_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_restruct_flag(&mut self, v: ::std::string::String) {
        self.restruct_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_restruct_flag(&mut self) -> &mut ::std::string::String {
        &mut self.restruct_flag
    }

    // Take field
    pub fn take_restruct_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.restruct_flag, ::std::string::String::new())
    }

    pub fn get_restruct_flag(&self) -> &str {
        &self.restruct_flag
    }

    // int64 restruct_dt = 89;

    pub fn clear_restruct_dt(&mut self) {
        self.restruct_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_restruct_dt(&mut self, v: i64) {
        self.restruct_dt = v;
    }

    pub fn get_restruct_dt(&self) -> i64 {
        self.restruct_dt
    }

    // string mor_prd = 90;

    pub fn clear_mor_prd(&mut self) {
        self.mor_prd.clear();
    }

    // Param is passed by value, moved
    pub fn set_mor_prd(&mut self, v: ::std::string::String) {
        self.mor_prd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mor_prd(&mut self) -> &mut ::std::string::String {
        &mut self.mor_prd
    }

    // Take field
    pub fn take_mor_prd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mor_prd, ::std::string::String::new())
    }

    pub fn get_mor_prd(&self) -> &str {
        &self.mor_prd
    }

    // string rating = 91;

    pub fn clear_rating(&mut self) {
        self.rating.clear();
    }

    // Param is passed by value, moved
    pub fn set_rating(&mut self, v: ::std::string::String) {
        self.rating = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rating(&mut self) -> &mut ::std::string::String {
        &mut self.rating
    }

    // Take field
    pub fn take_rating(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rating, ::std::string::String::new())
    }

    pub fn get_rating(&self) -> &str {
        &self.rating
    }

    // string consitin = 92;

    pub fn clear_consitin(&mut self) {
        self.consitin.clear();
    }

    // Param is passed by value, moved
    pub fn set_consitin(&mut self, v: ::std::string::String) {
        self.consitin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consitin(&mut self) -> &mut ::std::string::String {
        &mut self.consitin
    }

    // Take field
    pub fn take_consitin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.consitin, ::std::string::String::new())
    }

    pub fn get_consitin(&self) -> &str {
        &self.consitin
    }

    // string pan = 93;

    pub fn clear_pan(&mut self) {
        self.pan.clear();
    }

    // Param is passed by value, moved
    pub fn set_pan(&mut self, v: ::std::string::String) {
        self.pan = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pan(&mut self) -> &mut ::std::string::String {
        &mut self.pan
    }

    // Take field
    pub fn take_pan(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pan, ::std::string::String::new())
    }

    pub fn get_pan(&self) -> &str {
        &self.pan
    }

    // double limit_amt = 94;

    pub fn clear_limit_amt(&mut self) {
        self.limit_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_limit_amt(&mut self, v: f64) {
        self.limit_amt = v;
    }

    pub fn get_limit_amt(&self) -> f64 {
        self.limit_amt
    }

    // double gross_adv = 95;

    pub fn clear_gross_adv(&mut self) {
        self.gross_adv = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gross_adv(&mut self, v: f64) {
        self.gross_adv = v;
    }

    pub fn get_gross_adv(&self) -> f64 {
        self.gross_adv
    }

    // double exp_amt = 96;

    pub fn clear_exp_amt(&mut self) {
        self.exp_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_exp_amt(&mut self, v: f64) {
        self.exp_amt = v;
    }

    pub fn get_exp_amt(&self) -> f64 {
        self.exp_amt
    }

    // double unvail_amt = 97;

    pub fn clear_unvail_amt(&mut self) {
        self.unvail_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_unvail_amt(&mut self, v: f64) {
        self.unvail_amt = v;
    }

    pub fn get_unvail_amt(&self) -> f64 {
        self.unvail_amt
    }

    // double gold_gram = 98;

    pub fn clear_gold_gram(&mut self) {
        self.gold_gram = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gold_gram(&mut self, v: f64) {
        self.gold_gram = v;
    }

    pub fn get_gold_gram(&self) -> f64 {
        self.gold_gram
    }

    // string fund_flag = 99;

    pub fn clear_fund_flag(&mut self) {
        self.fund_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_fund_flag(&mut self, v: ::std::string::String) {
        self.fund_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fund_flag(&mut self) -> &mut ::std::string::String {
        &mut self.fund_flag
    }

    // Take field
    pub fn take_fund_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fund_flag, ::std::string::String::new())
    }

    pub fn get_fund_flag(&self) -> &str {
        &self.fund_flag
    }

    // double ltv_value = 100;

    pub fn clear_ltv_value(&mut self) {
        self.ltv_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ltv_value(&mut self, v: f64) {
        self.ltv_value = v;
    }

    pub fn get_ltv_value(&self) -> f64 {
        self.ltv_value
    }

    // int64 pt_i64_1 = 101;

    pub fn clear_pt_i64_1(&mut self) {
        self.pt_i64_1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_1(&mut self, v: i64) {
        self.pt_i64_1 = v;
    }

    pub fn get_pt_i64_1(&self) -> i64 {
        self.pt_i64_1
    }

    // int64 pt_i64_2 = 102;

    pub fn clear_pt_i64_2(&mut self) {
        self.pt_i64_2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_2(&mut self, v: i64) {
        self.pt_i64_2 = v;
    }

    pub fn get_pt_i64_2(&self) -> i64 {
        self.pt_i64_2
    }

    // int64 pt_i64_3 = 103;

    pub fn clear_pt_i64_3(&mut self) {
        self.pt_i64_3 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_3(&mut self, v: i64) {
        self.pt_i64_3 = v;
    }

    pub fn get_pt_i64_3(&self) -> i64 {
        self.pt_i64_3
    }

    // int64 pt_i64_4 = 104;

    pub fn clear_pt_i64_4(&mut self) {
        self.pt_i64_4 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_4(&mut self, v: i64) {
        self.pt_i64_4 = v;
    }

    pub fn get_pt_i64_4(&self) -> i64 {
        self.pt_i64_4
    }

    // int64 pt_i64_5 = 105;

    pub fn clear_pt_i64_5(&mut self) {
        self.pt_i64_5 = 0;
    }

    // Param is passed by value, moved
    pub fn set_pt_i64_5(&mut self, v: i64) {
        self.pt_i64_5 = v;
    }

    pub fn get_pt_i64_5(&self) -> i64 {
        self.pt_i64_5
    }

    // double pt_f64_1 = 106;

    pub fn clear_pt_f64_1(&mut self) {
        self.pt_f64_1 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_1(&mut self, v: f64) {
        self.pt_f64_1 = v;
    }

    pub fn get_pt_f64_1(&self) -> f64 {
        self.pt_f64_1
    }

    // double pt_f64_2 = 107;

    pub fn clear_pt_f64_2(&mut self) {
        self.pt_f64_2 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_2(&mut self, v: f64) {
        self.pt_f64_2 = v;
    }

    pub fn get_pt_f64_2(&self) -> f64 {
        self.pt_f64_2
    }

    // double pt_f64_3 = 108;

    pub fn clear_pt_f64_3(&mut self) {
        self.pt_f64_3 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_3(&mut self, v: f64) {
        self.pt_f64_3 = v;
    }

    pub fn get_pt_f64_3(&self) -> f64 {
        self.pt_f64_3
    }

    // double pt_f64_4 = 109;

    pub fn clear_pt_f64_4(&mut self) {
        self.pt_f64_4 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_4(&mut self, v: f64) {
        self.pt_f64_4 = v;
    }

    pub fn get_pt_f64_4(&self) -> f64 {
        self.pt_f64_4
    }

    // double pt_f64_5 = 110;

    pub fn clear_pt_f64_5(&mut self) {
        self.pt_f64_5 = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pt_f64_5(&mut self, v: f64) {
        self.pt_f64_5 = v;
    }

    pub fn get_pt_f64_5(&self) -> f64 {
        self.pt_f64_5
    }

    // string pt_str_1 = 111;

    pub fn clear_pt_str_1(&mut self) {
        self.pt_str_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_1(&mut self, v: ::std::string::String) {
        self.pt_str_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_1(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_1
    }

    // Take field
    pub fn take_pt_str_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_1, ::std::string::String::new())
    }

    pub fn get_pt_str_1(&self) -> &str {
        &self.pt_str_1
    }

    // string pt_str_2 = 112;

    pub fn clear_pt_str_2(&mut self) {
        self.pt_str_2.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_2(&mut self, v: ::std::string::String) {
        self.pt_str_2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_2(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_2
    }

    // Take field
    pub fn take_pt_str_2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_2, ::std::string::String::new())
    }

    pub fn get_pt_str_2(&self) -> &str {
        &self.pt_str_2
    }

    // string pt_str_3 = 113;

    pub fn clear_pt_str_3(&mut self) {
        self.pt_str_3.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_3(&mut self, v: ::std::string::String) {
        self.pt_str_3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_3(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_3
    }

    // Take field
    pub fn take_pt_str_3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_3, ::std::string::String::new())
    }

    pub fn get_pt_str_3(&self) -> &str {
        &self.pt_str_3
    }

    // string pt_str_4 = 114;

    pub fn clear_pt_str_4(&mut self) {
        self.pt_str_4.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_4(&mut self, v: ::std::string::String) {
        self.pt_str_4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_4(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_4
    }

    // Take field
    pub fn take_pt_str_4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_4, ::std::string::String::new())
    }

    pub fn get_pt_str_4(&self) -> &str {
        &self.pt_str_4
    }

    // string pt_str_5 = 115;

    pub fn clear_pt_str_5(&mut self) {
        self.pt_str_5.clear();
    }

    // Param is passed by value, moved
    pub fn set_pt_str_5(&mut self, v: ::std::string::String) {
        self.pt_str_5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pt_str_5(&mut self) -> &mut ::std::string::String {
        &mut self.pt_str_5
    }

    // Take field
    pub fn take_pt_str_5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pt_str_5, ::std::string::String::new())
    }

    pub fn get_pt_str_5(&self) -> &str {
        &self.pt_str_5
    }
}

impl ::protobuf::Message for OutputAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.acc_no,
                    )?;
                }
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.acnts_internal_acnum,
                    )?;
                }
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.acnts_brn_code,
                    )?;
                }
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.acnts_client_num,
                    )?;
                }
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.ucic,
                    )?;
                }
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.acnts_curr_code,
                    )?;
                }
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.acnts_prod_code,
                    )?;
                }
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.gl_cd,
                    )?;
                }
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.acc_open_dt = tmp;
                }
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.bal = tmp;
                }
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.balccy = tmp;
                }
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.int_rate = tmp;
                }
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.int_type,
                    )?;
                }
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.int_bench,
                    )?;
                }
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.int_spread,
                    )?;
                }
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.last_reset_dt = tmp;
                }
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.next_reset_dt = tmp;
                }
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.reset_no_of_months,
                    )?;
                }
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.int_accrued_amt = tmp;
                }
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.constitn,
                    )?;
                }
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.lm_exp = tmp;
                }
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.lim = tmp;
                }
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.lm_ccy,
                    )?;
                }
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.ext_rating_agency,
                    )?;
                }
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.ext_rating,
                    )?;
                }
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.int_rating,
                    )?;
                }
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.asset_cd,
                    )?;
                }
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.provision_amt = tmp;
                }
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.prov_dt = tmp;
                }
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.client_type,
                    )?;
                }
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.clients_name,
                    )?;
                }
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.clients_bsr_type_flg,
                    )?;
                }
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.clients_busdivn_code,
                    )?;
                }
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.clients_const_code,
                    )?;
                }
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.clients_pan_gir_num,
                    )?;
                }
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.clients_risk_categorization,
                    )?;
                }
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.clients_risk_cntry,
                    )?;
                }
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.clients_segment_code,
                    )?;
                }
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.corpcl_orgn_qualifier,
                    )?;
                }
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.corpcl_indus_code,
                    )?;
                }
                41 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.corpcl_nature_of_bus1,
                    )?;
                }
                42 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.corpcl_nature_of_bus2,
                    )?;
                }
                43 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.corpcl_nature_of_bus3,
                    )?;
                }
                44 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.corpcl_central_state_flg,
                    )?;
                }
                45 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.corpcl_public_sector_flg,
                    )?;
                }
                46 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.corpcl_primary_dlr_flg,
                    )?;
                }
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.corpcl_multilateral_bank,
                    )?;
                }
                48 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.corpcl_connp_inv_num,
                    )?;
                }
                49 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.corpcl_bc_gross_turnover = tmp;
                }
                50 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.w4b_cd,
                    )?;
                }
                51 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.balm_llg,
                    )?;
                }
                52 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.care_llg,
                    )?;
                }
                53 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.ba_llg,
                    )?;
                }
                54 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.asset_code,
                    )?;
                }
                55 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.npa_dt = tmp;
                }
                56 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.account_balance = tmp;
                }
                57 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.pwo = tmp;
                }
                58 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.written_off_dt = tmp;
                }
                59 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.ho_balance = tmp;
                }
                60 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.npa_provision = tmp;
                }
                61 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.ho_provision = tmp;
                }
                62 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.suspencebalance = tmp;
                }
                63 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.suspence_writeoff = tmp;
                }
                64 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.ho_suspence = tmp;
                }
                65 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.claim = tmp;
                }
                66 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.primary = tmp;
                }
                67 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.collateral = tmp;
                }
                68 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.total_security = tmp;
                }
                69 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.primary_valuation_dt = tmp;
                }
                70 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.collateral_valuation_dt = tmp;
                }
                71 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.gold_deficit = tmp;
                }
                72 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.fraud = tmp;
                }
                73 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.wilful_default = tmp;
                }
                74 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.subsidy = tmp;
                }
                75 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.priority,
                    )?;
                }
                76 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.priority_type,
                    )?;
                }
                77 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.main_sector,
                    )?;
                }
                78 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.sub_sector,
                    )?;
                }
                79 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.activity,
                    )?;
                }
                80 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.industry,
                    )?;
                }
                81 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.categoryofborrower,
                    )?;
                }
                82 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.org_gl_head,
                    )?;
                }
                83 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.npa_amt = tmp;
                }
                84 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.sanc_dt = tmp;
                }
                85 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.occp_cd,
                    )?;
                }
                86 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.sens_sec,
                    )?;
                }
                87 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.prior_subtype,
                    )?;
                }
                88 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.restruct_flag,
                    )?;
                }
                89 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.restruct_dt = tmp;
                }
                90 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.mor_prd,
                    )?;
                }
                91 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.rating,
                    )?;
                }
                92 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.consitin,
                    )?;
                }
                93 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pan)?;
                }
                94 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.limit_amt = tmp;
                }
                95 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.gross_adv = tmp;
                }
                96 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.exp_amt = tmp;
                }
                97 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.unvail_amt = tmp;
                }
                98 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.gold_gram = tmp;
                }
                99 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.fund_flag,
                    )?;
                }
                100 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.ltv_value = tmp;
                }
                101 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_1 = tmp;
                }
                102 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_2 = tmp;
                }
                103 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_3 = tmp;
                }
                104 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_4 = tmp;
                }
                105 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.pt_i64_5 = tmp;
                }
                106 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_1 = tmp;
                }
                107 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_2 = tmp;
                }
                108 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_3 = tmp;
                }
                109 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_4 = tmp;
                }
                110 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.pt_f64_5 = tmp;
                }
                111 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.pt_str_1,
                    )?;
                }
                112 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.pt_str_2,
                    )?;
                }
                113 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.pt_str_3,
                    )?;
                }
                114 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.pt_str_4,
                    )?;
                }
                115 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.pt_str_5,
                    )?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.acc_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.acc_no);
        }
        if !self.acnts_internal_acnum.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.acnts_internal_acnum);
        }
        if !self.acnts_brn_code.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.acnts_brn_code);
        }
        if !self.acnts_client_num.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.acnts_client_num);
        }
        if !self.ucic.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.ucic);
        }
        if !self.acnts_curr_code.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.acnts_curr_code);
        }
        if !self.acnts_prod_code.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.acnts_prod_code);
        }
        if !self.gl_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.gl_cd);
        }
        if self.acc_open_dt != 0 {
            my_size += ::protobuf::rt::value_size(
                9,
                self.acc_open_dt,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.bal != 0. {
            my_size += 9;
        }
        if self.balccy != 0. {
            my_size += 9;
        }
        if self.int_rate != 0. {
            my_size += 9;
        }
        if !self.int_type.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.int_type);
        }
        if !self.int_bench.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.int_bench);
        }
        if !self.int_spread.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.int_spread);
        }
        if self.last_reset_dt != 0 {
            my_size += ::protobuf::rt::value_size(
                16,
                self.last_reset_dt,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.next_reset_dt != 0 {
            my_size += ::protobuf::rt::value_size(
                17,
                self.next_reset_dt,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.reset_no_of_months.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.reset_no_of_months);
        }
        if self.int_accrued_amt != 0. {
            my_size += 10;
        }
        if !self.constitn.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.constitn);
        }
        if self.lm_exp != 0 {
            my_size += ::protobuf::rt::value_size(
                21,
                self.lm_exp,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.lim != 0. {
            my_size += 10;
        }
        if !self.lm_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.lm_ccy);
        }
        if !self.ext_rating_agency.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.ext_rating_agency);
        }
        if !self.ext_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.ext_rating);
        }
        if !self.int_rating.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.int_rating);
        }
        if !self.asset_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.asset_cd);
        }
        if self.provision_amt != 0. {
            my_size += 10;
        }
        if self.prov_dt != 0 {
            my_size += ::protobuf::rt::value_size(
                29,
                self.prov_dt,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.client_type.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.client_type);
        }
        if !self.clients_name.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.clients_name);
        }
        if !self.clients_bsr_type_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.clients_bsr_type_flg);
        }
        if !self.clients_busdivn_code.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.clients_busdivn_code);
        }
        if !self.clients_const_code.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.clients_const_code);
        }
        if !self.clients_pan_gir_num.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.clients_pan_gir_num);
        }
        if !self.clients_risk_categorization.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.clients_risk_categorization);
        }
        if !self.clients_risk_cntry.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.clients_risk_cntry);
        }
        if !self.clients_segment_code.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.clients_segment_code);
        }
        if !self.corpcl_orgn_qualifier.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.corpcl_orgn_qualifier);
        }
        if !self.corpcl_indus_code.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.corpcl_indus_code);
        }
        if !self.corpcl_nature_of_bus1.is_empty() {
            my_size += ::protobuf::rt::string_size(41, &self.corpcl_nature_of_bus1);
        }
        if !self.corpcl_nature_of_bus2.is_empty() {
            my_size += ::protobuf::rt::string_size(42, &self.corpcl_nature_of_bus2);
        }
        if !self.corpcl_nature_of_bus3.is_empty() {
            my_size += ::protobuf::rt::string_size(43, &self.corpcl_nature_of_bus3);
        }
        if !self.corpcl_central_state_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(44, &self.corpcl_central_state_flg);
        }
        if !self.corpcl_public_sector_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(45, &self.corpcl_public_sector_flg);
        }
        if !self.corpcl_primary_dlr_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.corpcl_primary_dlr_flg);
        }
        if !self.corpcl_multilateral_bank.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.corpcl_multilateral_bank);
        }
        if !self.corpcl_connp_inv_num.is_empty() {
            my_size += ::protobuf::rt::string_size(48, &self.corpcl_connp_inv_num);
        }
        if self.corpcl_bc_gross_turnover != 0. {
            my_size += 10;
        }
        if !self.w4b_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(50, &self.w4b_cd);
        }
        if !self.balm_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(51, &self.balm_llg);
        }
        if !self.care_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(52, &self.care_llg);
        }
        if !self.ba_llg.is_empty() {
            my_size += ::protobuf::rt::string_size(53, &self.ba_llg);
        }
        if !self.asset_code.is_empty() {
            my_size += ::protobuf::rt::string_size(54, &self.asset_code);
        }
        if self.npa_dt != 0 {
            my_size += ::protobuf::rt::value_size(
                55,
                self.npa_dt,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.account_balance != 0. {
            my_size += 10;
        }
        if self.pwo != 0. {
            my_size += 10;
        }
        if self.written_off_dt != 0 {
            my_size += ::protobuf::rt::value_size(
                58,
                self.written_off_dt,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.ho_balance != 0. {
            my_size += 10;
        }
        if self.npa_provision != 0. {
            my_size += 10;
        }
        if self.ho_provision != 0. {
            my_size += 10;
        }
        if self.suspencebalance != 0. {
            my_size += 10;
        }
        if self.suspence_writeoff != 0. {
            my_size += 10;
        }
        if self.ho_suspence != 0. {
            my_size += 10;
        }
        if self.claim != 0. {
            my_size += 10;
        }
        if self.primary != 0. {
            my_size += 10;
        }
        if self.collateral != 0. {
            my_size += 10;
        }
        if self.total_security != 0. {
            my_size += 10;
        }
        if self.primary_valuation_dt != 0 {
            my_size += ::protobuf::rt::value_size(
                69,
                self.primary_valuation_dt,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.collateral_valuation_dt != 0 {
            my_size += ::protobuf::rt::value_size(
                70,
                self.collateral_valuation_dt,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.gold_deficit != 0. {
            my_size += 10;
        }
        if self.fraud != 0. {
            my_size += 10;
        }
        if self.wilful_default != 0. {
            my_size += 10;
        }
        if self.subsidy != 0. {
            my_size += 10;
        }
        if !self.priority.is_empty() {
            my_size += ::protobuf::rt::string_size(75, &self.priority);
        }
        if !self.priority_type.is_empty() {
            my_size += ::protobuf::rt::string_size(76, &self.priority_type);
        }
        if !self.main_sector.is_empty() {
            my_size += ::protobuf::rt::string_size(77, &self.main_sector);
        }
        if !self.sub_sector.is_empty() {
            my_size += ::protobuf::rt::string_size(78, &self.sub_sector);
        }
        if !self.activity.is_empty() {
            my_size += ::protobuf::rt::string_size(79, &self.activity);
        }
        if !self.industry.is_empty() {
            my_size += ::protobuf::rt::string_size(80, &self.industry);
        }
        if !self.categoryofborrower.is_empty() {
            my_size += ::protobuf::rt::string_size(81, &self.categoryofborrower);
        }
        if !self.org_gl_head.is_empty() {
            my_size += ::protobuf::rt::string_size(82, &self.org_gl_head);
        }
        if self.npa_amt != 0. {
            my_size += 10;
        }
        if self.sanc_dt != 0 {
            my_size += ::protobuf::rt::value_size(
                84,
                self.sanc_dt,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.occp_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(85, &self.occp_cd);
        }
        if !self.sens_sec.is_empty() {
            my_size += ::protobuf::rt::string_size(86, &self.sens_sec);
        }
        if !self.prior_subtype.is_empty() {
            my_size += ::protobuf::rt::string_size(87, &self.prior_subtype);
        }
        if !self.restruct_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(88, &self.restruct_flag);
        }
        if self.restruct_dt != 0 {
            my_size += ::protobuf::rt::value_size(
                89,
                self.restruct_dt,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.mor_prd.is_empty() {
            my_size += ::protobuf::rt::string_size(90, &self.mor_prd);
        }
        if !self.rating.is_empty() {
            my_size += ::protobuf::rt::string_size(91, &self.rating);
        }
        if !self.consitin.is_empty() {
            my_size += ::protobuf::rt::string_size(92, &self.consitin);
        }
        if !self.pan.is_empty() {
            my_size += ::protobuf::rt::string_size(93, &self.pan);
        }
        if self.limit_amt != 0. {
            my_size += 10;
        }
        if self.gross_adv != 0. {
            my_size += 10;
        }
        if self.exp_amt != 0. {
            my_size += 10;
        }
        if self.unvail_amt != 0. {
            my_size += 10;
        }
        if self.gold_gram != 0. {
            my_size += 10;
        }
        if !self.fund_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(99, &self.fund_flag);
        }
        if self.ltv_value != 0. {
            my_size += 10;
        }
        if self.pt_i64_1 != 0 {
            my_size += ::protobuf::rt::value_size(
                101,
                self.pt_i64_1,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.pt_i64_2 != 0 {
            my_size += ::protobuf::rt::value_size(
                102,
                self.pt_i64_2,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.pt_i64_3 != 0 {
            my_size += ::protobuf::rt::value_size(
                103,
                self.pt_i64_3,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.pt_i64_4 != 0 {
            my_size += ::protobuf::rt::value_size(
                104,
                self.pt_i64_4,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.pt_i64_5 != 0 {
            my_size += ::protobuf::rt::value_size(
                105,
                self.pt_i64_5,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.pt_f64_1 != 0. {
            my_size += 10;
        }
        if self.pt_f64_2 != 0. {
            my_size += 10;
        }
        if self.pt_f64_3 != 0. {
            my_size += 10;
        }
        if self.pt_f64_4 != 0. {
            my_size += 10;
        }
        if self.pt_f64_5 != 0. {
            my_size += 10;
        }
        if !self.pt_str_1.is_empty() {
            my_size += ::protobuf::rt::string_size(111, &self.pt_str_1);
        }
        if !self.pt_str_2.is_empty() {
            my_size += ::protobuf::rt::string_size(112, &self.pt_str_2);
        }
        if !self.pt_str_3.is_empty() {
            my_size += ::protobuf::rt::string_size(113, &self.pt_str_3);
        }
        if !self.pt_str_4.is_empty() {
            my_size += ::protobuf::rt::string_size(114, &self.pt_str_4);
        }
        if !self.pt_str_5.is_empty() {
            my_size += ::protobuf::rt::string_size(115, &self.pt_str_5);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.acc_no.is_empty() {
            os.write_string(1, &self.acc_no)?;
        }
        if !self.acnts_internal_acnum.is_empty() {
            os.write_string(2, &self.acnts_internal_acnum)?;
        }
        if !self.acnts_brn_code.is_empty() {
            os.write_string(3, &self.acnts_brn_code)?;
        }
        if !self.acnts_client_num.is_empty() {
            os.write_string(4, &self.acnts_client_num)?;
        }
        if !self.ucic.is_empty() {
            os.write_string(5, &self.ucic)?;
        }
        if !self.acnts_curr_code.is_empty() {
            os.write_string(6, &self.acnts_curr_code)?;
        }
        if !self.acnts_prod_code.is_empty() {
            os.write_string(7, &self.acnts_prod_code)?;
        }
        if !self.gl_cd.is_empty() {
            os.write_string(8, &self.gl_cd)?;
        }
        if self.acc_open_dt != 0 {
            os.write_int64(9, self.acc_open_dt)?;
        }
        if self.bal != 0. {
            os.write_double(10, self.bal)?;
        }
        if self.balccy != 0. {
            os.write_double(11, self.balccy)?;
        }
        if self.int_rate != 0. {
            os.write_double(12, self.int_rate)?;
        }
        if !self.int_type.is_empty() {
            os.write_string(13, &self.int_type)?;
        }
        if !self.int_bench.is_empty() {
            os.write_string(14, &self.int_bench)?;
        }
        if !self.int_spread.is_empty() {
            os.write_string(15, &self.int_spread)?;
        }
        if self.last_reset_dt != 0 {
            os.write_int64(16, self.last_reset_dt)?;
        }
        if self.next_reset_dt != 0 {
            os.write_int64(17, self.next_reset_dt)?;
        }
        if !self.reset_no_of_months.is_empty() {
            os.write_string(18, &self.reset_no_of_months)?;
        }
        if self.int_accrued_amt != 0. {
            os.write_double(19, self.int_accrued_amt)?;
        }
        if !self.constitn.is_empty() {
            os.write_string(20, &self.constitn)?;
        }
        if self.lm_exp != 0 {
            os.write_int64(21, self.lm_exp)?;
        }
        if self.lim != 0. {
            os.write_double(22, self.lim)?;
        }
        if !self.lm_ccy.is_empty() {
            os.write_string(23, &self.lm_ccy)?;
        }
        if !self.ext_rating_agency.is_empty() {
            os.write_string(24, &self.ext_rating_agency)?;
        }
        if !self.ext_rating.is_empty() {
            os.write_string(25, &self.ext_rating)?;
        }
        if !self.int_rating.is_empty() {
            os.write_string(26, &self.int_rating)?;
        }
        if !self.asset_cd.is_empty() {
            os.write_string(27, &self.asset_cd)?;
        }
        if self.provision_amt != 0. {
            os.write_double(28, self.provision_amt)?;
        }
        if self.prov_dt != 0 {
            os.write_int64(29, self.prov_dt)?;
        }
        if !self.client_type.is_empty() {
            os.write_string(30, &self.client_type)?;
        }
        if !self.clients_name.is_empty() {
            os.write_string(31, &self.clients_name)?;
        }
        if !self.clients_bsr_type_flg.is_empty() {
            os.write_string(32, &self.clients_bsr_type_flg)?;
        }
        if !self.clients_busdivn_code.is_empty() {
            os.write_string(33, &self.clients_busdivn_code)?;
        }
        if !self.clients_const_code.is_empty() {
            os.write_string(34, &self.clients_const_code)?;
        }
        if !self.clients_pan_gir_num.is_empty() {
            os.write_string(35, &self.clients_pan_gir_num)?;
        }
        if !self.clients_risk_categorization.is_empty() {
            os.write_string(36, &self.clients_risk_categorization)?;
        }
        if !self.clients_risk_cntry.is_empty() {
            os.write_string(37, &self.clients_risk_cntry)?;
        }
        if !self.clients_segment_code.is_empty() {
            os.write_string(38, &self.clients_segment_code)?;
        }
        if !self.corpcl_orgn_qualifier.is_empty() {
            os.write_string(39, &self.corpcl_orgn_qualifier)?;
        }
        if !self.corpcl_indus_code.is_empty() {
            os.write_string(40, &self.corpcl_indus_code)?;
        }
        if !self.corpcl_nature_of_bus1.is_empty() {
            os.write_string(41, &self.corpcl_nature_of_bus1)?;
        }
        if !self.corpcl_nature_of_bus2.is_empty() {
            os.write_string(42, &self.corpcl_nature_of_bus2)?;
        }
        if !self.corpcl_nature_of_bus3.is_empty() {
            os.write_string(43, &self.corpcl_nature_of_bus3)?;
        }
        if !self.corpcl_central_state_flg.is_empty() {
            os.write_string(44, &self.corpcl_central_state_flg)?;
        }
        if !self.corpcl_public_sector_flg.is_empty() {
            os.write_string(45, &self.corpcl_public_sector_flg)?;
        }
        if !self.corpcl_primary_dlr_flg.is_empty() {
            os.write_string(46, &self.corpcl_primary_dlr_flg)?;
        }
        if !self.corpcl_multilateral_bank.is_empty() {
            os.write_string(47, &self.corpcl_multilateral_bank)?;
        }
        if !self.corpcl_connp_inv_num.is_empty() {
            os.write_string(48, &self.corpcl_connp_inv_num)?;
        }
        if self.corpcl_bc_gross_turnover != 0. {
            os.write_double(49, self.corpcl_bc_gross_turnover)?;
        }
        if !self.w4b_cd.is_empty() {
            os.write_string(50, &self.w4b_cd)?;
        }
        if !self.balm_llg.is_empty() {
            os.write_string(51, &self.balm_llg)?;
        }
        if !self.care_llg.is_empty() {
            os.write_string(52, &self.care_llg)?;
        }
        if !self.ba_llg.is_empty() {
            os.write_string(53, &self.ba_llg)?;
        }
        if !self.asset_code.is_empty() {
            os.write_string(54, &self.asset_code)?;
        }
        if self.npa_dt != 0 {
            os.write_int64(55, self.npa_dt)?;
        }
        if self.account_balance != 0. {
            os.write_double(56, self.account_balance)?;
        }
        if self.pwo != 0. {
            os.write_double(57, self.pwo)?;
        }
        if self.written_off_dt != 0 {
            os.write_int64(58, self.written_off_dt)?;
        }
        if self.ho_balance != 0. {
            os.write_double(59, self.ho_balance)?;
        }
        if self.npa_provision != 0. {
            os.write_double(60, self.npa_provision)?;
        }
        if self.ho_provision != 0. {
            os.write_double(61, self.ho_provision)?;
        }
        if self.suspencebalance != 0. {
            os.write_double(62, self.suspencebalance)?;
        }
        if self.suspence_writeoff != 0. {
            os.write_double(63, self.suspence_writeoff)?;
        }
        if self.ho_suspence != 0. {
            os.write_double(64, self.ho_suspence)?;
        }
        if self.claim != 0. {
            os.write_double(65, self.claim)?;
        }
        if self.primary != 0. {
            os.write_double(66, self.primary)?;
        }
        if self.collateral != 0. {
            os.write_double(67, self.collateral)?;
        }
        if self.total_security != 0. {
            os.write_double(68, self.total_security)?;
        }
        if self.primary_valuation_dt != 0 {
            os.write_int64(69, self.primary_valuation_dt)?;
        }
        if self.collateral_valuation_dt != 0 {
            os.write_int64(70, self.collateral_valuation_dt)?;
        }
        if self.gold_deficit != 0. {
            os.write_double(71, self.gold_deficit)?;
        }
        if self.fraud != 0. {
            os.write_double(72, self.fraud)?;
        }
        if self.wilful_default != 0. {
            os.write_double(73, self.wilful_default)?;
        }
        if self.subsidy != 0. {
            os.write_double(74, self.subsidy)?;
        }
        if !self.priority.is_empty() {
            os.write_string(75, &self.priority)?;
        }
        if !self.priority_type.is_empty() {
            os.write_string(76, &self.priority_type)?;
        }
        if !self.main_sector.is_empty() {
            os.write_string(77, &self.main_sector)?;
        }
        if !self.sub_sector.is_empty() {
            os.write_string(78, &self.sub_sector)?;
        }
        if !self.activity.is_empty() {
            os.write_string(79, &self.activity)?;
        }
        if !self.industry.is_empty() {
            os.write_string(80, &self.industry)?;
        }
        if !self.categoryofborrower.is_empty() {
            os.write_string(81, &self.categoryofborrower)?;
        }
        if !self.org_gl_head.is_empty() {
            os.write_string(82, &self.org_gl_head)?;
        }
        if self.npa_amt != 0. {
            os.write_double(83, self.npa_amt)?;
        }
        if self.sanc_dt != 0 {
            os.write_int64(84, self.sanc_dt)?;
        }
        if !self.occp_cd.is_empty() {
            os.write_string(85, &self.occp_cd)?;
        }
        if !self.sens_sec.is_empty() {
            os.write_string(86, &self.sens_sec)?;
        }
        if !self.prior_subtype.is_empty() {
            os.write_string(87, &self.prior_subtype)?;
        }
        if !self.restruct_flag.is_empty() {
            os.write_string(88, &self.restruct_flag)?;
        }
        if self.restruct_dt != 0 {
            os.write_int64(89, self.restruct_dt)?;
        }
        if !self.mor_prd.is_empty() {
            os.write_string(90, &self.mor_prd)?;
        }
        if !self.rating.is_empty() {
            os.write_string(91, &self.rating)?;
        }
        if !self.consitin.is_empty() {
            os.write_string(92, &self.consitin)?;
        }
        if !self.pan.is_empty() {
            os.write_string(93, &self.pan)?;
        }
        if self.limit_amt != 0. {
            os.write_double(94, self.limit_amt)?;
        }
        if self.gross_adv != 0. {
            os.write_double(95, self.gross_adv)?;
        }
        if self.exp_amt != 0. {
            os.write_double(96, self.exp_amt)?;
        }
        if self.unvail_amt != 0. {
            os.write_double(97, self.unvail_amt)?;
        }
        if self.gold_gram != 0. {
            os.write_double(98, self.gold_gram)?;
        }
        if !self.fund_flag.is_empty() {
            os.write_string(99, &self.fund_flag)?;
        }
        if self.ltv_value != 0. {
            os.write_double(100, self.ltv_value)?;
        }
        if self.pt_i64_1 != 0 {
            os.write_int64(101, self.pt_i64_1)?;
        }
        if self.pt_i64_2 != 0 {
            os.write_int64(102, self.pt_i64_2)?;
        }
        if self.pt_i64_3 != 0 {
            os.write_int64(103, self.pt_i64_3)?;
        }
        if self.pt_i64_4 != 0 {
            os.write_int64(104, self.pt_i64_4)?;
        }
        if self.pt_i64_5 != 0 {
            os.write_int64(105, self.pt_i64_5)?;
        }
        if self.pt_f64_1 != 0. {
            os.write_double(106, self.pt_f64_1)?;
        }
        if self.pt_f64_2 != 0. {
            os.write_double(107, self.pt_f64_2)?;
        }
        if self.pt_f64_3 != 0. {
            os.write_double(108, self.pt_f64_3)?;
        }
        if self.pt_f64_4 != 0. {
            os.write_double(109, self.pt_f64_4)?;
        }
        if self.pt_f64_5 != 0. {
            os.write_double(110, self.pt_f64_5)?;
        }
        if !self.pt_str_1.is_empty() {
            os.write_string(111, &self.pt_str_1)?;
        }
        if !self.pt_str_2.is_empty() {
            os.write_string(112, &self.pt_str_2)?;
        }
        if !self.pt_str_3.is_empty() {
            os.write_string(113, &self.pt_str_3)?;
        }
        if !self.pt_str_4.is_empty() {
            os.write_string(114, &self.pt_str_4)?;
        }
        if !self.pt_str_5.is_empty() {
            os.write_string(115, &self.pt_str_5)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputAccount {
        OutputAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "acc_no",
                    |m: &OutputAccount| &m.acc_no,
                    |m: &mut OutputAccount| &mut m.acc_no,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "acnts_internal_acnum",
                    |m: &OutputAccount| &m.acnts_internal_acnum,
                    |m: &mut OutputAccount| &mut m.acnts_internal_acnum,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "acnts_brn_code",
                    |m: &OutputAccount| &m.acnts_brn_code,
                    |m: &mut OutputAccount| &mut m.acnts_brn_code,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "acnts_client_num",
                    |m: &OutputAccount| &m.acnts_client_num,
                    |m: &mut OutputAccount| &mut m.acnts_client_num,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "ucic",
                    |m: &OutputAccount| &m.ucic,
                    |m: &mut OutputAccount| &mut m.ucic,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "acnts_curr_code",
                    |m: &OutputAccount| &m.acnts_curr_code,
                    |m: &mut OutputAccount| &mut m.acnts_curr_code,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "acnts_prod_code",
                    |m: &OutputAccount| &m.acnts_prod_code,
                    |m: &mut OutputAccount| &mut m.acnts_prod_code,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "gl_cd",
                    |m: &OutputAccount| &m.gl_cd,
                    |m: &mut OutputAccount| &mut m.gl_cd,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "acc_open_dt",
                    |m: &OutputAccount| &m.acc_open_dt,
                    |m: &mut OutputAccount| &mut m.acc_open_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "bal",
                    |m: &OutputAccount| &m.bal,
                    |m: &mut OutputAccount| &mut m.bal,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "balccy",
                    |m: &OutputAccount| &m.balccy,
                    |m: &mut OutputAccount| &mut m.balccy,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "int_rate",
                    |m: &OutputAccount| &m.int_rate,
                    |m: &mut OutputAccount| &mut m.int_rate,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "int_type",
                    |m: &OutputAccount| &m.int_type,
                    |m: &mut OutputAccount| &mut m.int_type,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "int_bench",
                    |m: &OutputAccount| &m.int_bench,
                    |m: &mut OutputAccount| &mut m.int_bench,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "int_spread",
                    |m: &OutputAccount| &m.int_spread,
                    |m: &mut OutputAccount| &mut m.int_spread,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "last_reset_dt",
                    |m: &OutputAccount| &m.last_reset_dt,
                    |m: &mut OutputAccount| &mut m.last_reset_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "next_reset_dt",
                    |m: &OutputAccount| &m.next_reset_dt,
                    |m: &mut OutputAccount| &mut m.next_reset_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "reset_no_of_months",
                    |m: &OutputAccount| &m.reset_no_of_months,
                    |m: &mut OutputAccount| &mut m.reset_no_of_months,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "int_accrued_amt",
                    |m: &OutputAccount| &m.int_accrued_amt,
                    |m: &mut OutputAccount| &mut m.int_accrued_amt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "constitn",
                    |m: &OutputAccount| &m.constitn,
                    |m: &mut OutputAccount| &mut m.constitn,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "lm_exp",
                    |m: &OutputAccount| &m.lm_exp,
                    |m: &mut OutputAccount| &mut m.lm_exp,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "lim",
                    |m: &OutputAccount| &m.lim,
                    |m: &mut OutputAccount| &mut m.lim,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "lm_ccy",
                    |m: &OutputAccount| &m.lm_ccy,
                    |m: &mut OutputAccount| &mut m.lm_ccy,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "ext_rating_agency",
                    |m: &OutputAccount| &m.ext_rating_agency,
                    |m: &mut OutputAccount| &mut m.ext_rating_agency,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "ext_rating",
                    |m: &OutputAccount| &m.ext_rating,
                    |m: &mut OutputAccount| &mut m.ext_rating,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "int_rating",
                    |m: &OutputAccount| &m.int_rating,
                    |m: &mut OutputAccount| &mut m.int_rating,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "asset_cd",
                    |m: &OutputAccount| &m.asset_cd,
                    |m: &mut OutputAccount| &mut m.asset_cd,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "provision_amt",
                    |m: &OutputAccount| &m.provision_amt,
                    |m: &mut OutputAccount| &mut m.provision_amt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "prov_dt",
                    |m: &OutputAccount| &m.prov_dt,
                    |m: &mut OutputAccount| &mut m.prov_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "client_type",
                    |m: &OutputAccount| &m.client_type,
                    |m: &mut OutputAccount| &mut m.client_type,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "clients_name",
                    |m: &OutputAccount| &m.clients_name,
                    |m: &mut OutputAccount| &mut m.clients_name,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "clients_bsr_type_flg",
                    |m: &OutputAccount| &m.clients_bsr_type_flg,
                    |m: &mut OutputAccount| &mut m.clients_bsr_type_flg,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "clients_busdivn_code",
                    |m: &OutputAccount| &m.clients_busdivn_code,
                    |m: &mut OutputAccount| &mut m.clients_busdivn_code,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "clients_const_code",
                    |m: &OutputAccount| &m.clients_const_code,
                    |m: &mut OutputAccount| &mut m.clients_const_code,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "clients_pan_gir_num",
                    |m: &OutputAccount| &m.clients_pan_gir_num,
                    |m: &mut OutputAccount| &mut m.clients_pan_gir_num,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "clients_risk_categorization",
                    |m: &OutputAccount| &m.clients_risk_categorization,
                    |m: &mut OutputAccount| &mut m.clients_risk_categorization,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "clients_risk_cntry",
                    |m: &OutputAccount| &m.clients_risk_cntry,
                    |m: &mut OutputAccount| &mut m.clients_risk_cntry,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "clients_segment_code",
                    |m: &OutputAccount| &m.clients_segment_code,
                    |m: &mut OutputAccount| &mut m.clients_segment_code,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "corpcl_orgn_qualifier",
                    |m: &OutputAccount| &m.corpcl_orgn_qualifier,
                    |m: &mut OutputAccount| &mut m.corpcl_orgn_qualifier,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "corpcl_indus_code",
                    |m: &OutputAccount| &m.corpcl_indus_code,
                    |m: &mut OutputAccount| &mut m.corpcl_indus_code,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "corpcl_nature_of_bus1",
                    |m: &OutputAccount| &m.corpcl_nature_of_bus1,
                    |m: &mut OutputAccount| &mut m.corpcl_nature_of_bus1,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "corpcl_nature_of_bus2",
                    |m: &OutputAccount| &m.corpcl_nature_of_bus2,
                    |m: &mut OutputAccount| &mut m.corpcl_nature_of_bus2,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "corpcl_nature_of_bus3",
                    |m: &OutputAccount| &m.corpcl_nature_of_bus3,
                    |m: &mut OutputAccount| &mut m.corpcl_nature_of_bus3,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "corpcl_central_state_flg",
                    |m: &OutputAccount| &m.corpcl_central_state_flg,
                    |m: &mut OutputAccount| &mut m.corpcl_central_state_flg,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "corpcl_public_sector_flg",
                    |m: &OutputAccount| &m.corpcl_public_sector_flg,
                    |m: &mut OutputAccount| &mut m.corpcl_public_sector_flg,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "corpcl_primary_dlr_flg",
                    |m: &OutputAccount| &m.corpcl_primary_dlr_flg,
                    |m: &mut OutputAccount| &mut m.corpcl_primary_dlr_flg,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "corpcl_multilateral_bank",
                    |m: &OutputAccount| &m.corpcl_multilateral_bank,
                    |m: &mut OutputAccount| &mut m.corpcl_multilateral_bank,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "corpcl_connp_inv_num",
                    |m: &OutputAccount| &m.corpcl_connp_inv_num,
                    |m: &mut OutputAccount| &mut m.corpcl_connp_inv_num,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "corpcl_bc_gross_turnover",
                    |m: &OutputAccount| &m.corpcl_bc_gross_turnover,
                    |m: &mut OutputAccount| &mut m.corpcl_bc_gross_turnover,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "w4b_cd",
                    |m: &OutputAccount| &m.w4b_cd,
                    |m: &mut OutputAccount| &mut m.w4b_cd,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "balm_llg",
                    |m: &OutputAccount| &m.balm_llg,
                    |m: &mut OutputAccount| &mut m.balm_llg,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "care_llg",
                    |m: &OutputAccount| &m.care_llg,
                    |m: &mut OutputAccount| &mut m.care_llg,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "ba_llg",
                    |m: &OutputAccount| &m.ba_llg,
                    |m: &mut OutputAccount| &mut m.ba_llg,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "asset_code",
                    |m: &OutputAccount| &m.asset_code,
                    |m: &mut OutputAccount| &mut m.asset_code,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "npa_dt",
                    |m: &OutputAccount| &m.npa_dt,
                    |m: &mut OutputAccount| &mut m.npa_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "account_balance",
                    |m: &OutputAccount| &m.account_balance,
                    |m: &mut OutputAccount| &mut m.account_balance,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "pwo",
                    |m: &OutputAccount| &m.pwo,
                    |m: &mut OutputAccount| &mut m.pwo,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "written_off_dt",
                    |m: &OutputAccount| &m.written_off_dt,
                    |m: &mut OutputAccount| &mut m.written_off_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "ho_balance",
                    |m: &OutputAccount| &m.ho_balance,
                    |m: &mut OutputAccount| &mut m.ho_balance,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "npa_provision",
                    |m: &OutputAccount| &m.npa_provision,
                    |m: &mut OutputAccount| &mut m.npa_provision,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "ho_provision",
                    |m: &OutputAccount| &m.ho_provision,
                    |m: &mut OutputAccount| &mut m.ho_provision,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "suspencebalance",
                    |m: &OutputAccount| &m.suspencebalance,
                    |m: &mut OutputAccount| &mut m.suspencebalance,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "suspence_writeoff",
                    |m: &OutputAccount| &m.suspence_writeoff,
                    |m: &mut OutputAccount| &mut m.suspence_writeoff,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "ho_suspence",
                    |m: &OutputAccount| &m.ho_suspence,
                    |m: &mut OutputAccount| &mut m.ho_suspence,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "claim",
                    |m: &OutputAccount| &m.claim,
                    |m: &mut OutputAccount| &mut m.claim,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "primary",
                    |m: &OutputAccount| &m.primary,
                    |m: &mut OutputAccount| &mut m.primary,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "collateral",
                    |m: &OutputAccount| &m.collateral,
                    |m: &mut OutputAccount| &mut m.collateral,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "total_security",
                    |m: &OutputAccount| &m.total_security,
                    |m: &mut OutputAccount| &mut m.total_security,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "primary_valuation_dt",
                    |m: &OutputAccount| &m.primary_valuation_dt,
                    |m: &mut OutputAccount| &mut m.primary_valuation_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "collateral_valuation_dt",
                    |m: &OutputAccount| &m.collateral_valuation_dt,
                    |m: &mut OutputAccount| &mut m.collateral_valuation_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "gold_deficit",
                    |m: &OutputAccount| &m.gold_deficit,
                    |m: &mut OutputAccount| &mut m.gold_deficit,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "fraud",
                    |m: &OutputAccount| &m.fraud,
                    |m: &mut OutputAccount| &mut m.fraud,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "wilful_default",
                    |m: &OutputAccount| &m.wilful_default,
                    |m: &mut OutputAccount| &mut m.wilful_default,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "subsidy",
                    |m: &OutputAccount| &m.subsidy,
                    |m: &mut OutputAccount| &mut m.subsidy,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "priority",
                    |m: &OutputAccount| &m.priority,
                    |m: &mut OutputAccount| &mut m.priority,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "priority_type",
                    |m: &OutputAccount| &m.priority_type,
                    |m: &mut OutputAccount| &mut m.priority_type,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "main_sector",
                    |m: &OutputAccount| &m.main_sector,
                    |m: &mut OutputAccount| &mut m.main_sector,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "sub_sector",
                    |m: &OutputAccount| &m.sub_sector,
                    |m: &mut OutputAccount| &mut m.sub_sector,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "activity",
                    |m: &OutputAccount| &m.activity,
                    |m: &mut OutputAccount| &mut m.activity,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "industry",
                    |m: &OutputAccount| &m.industry,
                    |m: &mut OutputAccount| &mut m.industry,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "categoryofborrower",
                    |m: &OutputAccount| &m.categoryofborrower,
                    |m: &mut OutputAccount| &mut m.categoryofborrower,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "org_gl_head",
                    |m: &OutputAccount| &m.org_gl_head,
                    |m: &mut OutputAccount| &mut m.org_gl_head,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "npa_amt",
                    |m: &OutputAccount| &m.npa_amt,
                    |m: &mut OutputAccount| &mut m.npa_amt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "sanc_dt",
                    |m: &OutputAccount| &m.sanc_dt,
                    |m: &mut OutputAccount| &mut m.sanc_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "occp_cd",
                    |m: &OutputAccount| &m.occp_cd,
                    |m: &mut OutputAccount| &mut m.occp_cd,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "sens_sec",
                    |m: &OutputAccount| &m.sens_sec,
                    |m: &mut OutputAccount| &mut m.sens_sec,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "prior_subtype",
                    |m: &OutputAccount| &m.prior_subtype,
                    |m: &mut OutputAccount| &mut m.prior_subtype,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "restruct_flag",
                    |m: &OutputAccount| &m.restruct_flag,
                    |m: &mut OutputAccount| &mut m.restruct_flag,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "restruct_dt",
                    |m: &OutputAccount| &m.restruct_dt,
                    |m: &mut OutputAccount| &mut m.restruct_dt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "mor_prd",
                    |m: &OutputAccount| &m.mor_prd,
                    |m: &mut OutputAccount| &mut m.mor_prd,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "rating",
                    |m: &OutputAccount| &m.rating,
                    |m: &mut OutputAccount| &mut m.rating,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "consitin",
                    |m: &OutputAccount| &m.consitin,
                    |m: &mut OutputAccount| &mut m.consitin,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "pan",
                    |m: &OutputAccount| &m.pan,
                    |m: &mut OutputAccount| &mut m.pan,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "limit_amt",
                    |m: &OutputAccount| &m.limit_amt,
                    |m: &mut OutputAccount| &mut m.limit_amt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "gross_adv",
                    |m: &OutputAccount| &m.gross_adv,
                    |m: &mut OutputAccount| &mut m.gross_adv,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "exp_amt",
                    |m: &OutputAccount| &m.exp_amt,
                    |m: &mut OutputAccount| &mut m.exp_amt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "unvail_amt",
                    |m: &OutputAccount| &m.unvail_amt,
                    |m: &mut OutputAccount| &mut m.unvail_amt,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "gold_gram",
                    |m: &OutputAccount| &m.gold_gram,
                    |m: &mut OutputAccount| &mut m.gold_gram,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "fund_flag",
                    |m: &OutputAccount| &m.fund_flag,
                    |m: &mut OutputAccount| &mut m.fund_flag,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "ltv_value",
                    |m: &OutputAccount| &m.ltv_value,
                    |m: &mut OutputAccount| &mut m.ltv_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "pt_i64_1",
                    |m: &OutputAccount| &m.pt_i64_1,
                    |m: &mut OutputAccount| &mut m.pt_i64_1,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "pt_i64_2",
                    |m: &OutputAccount| &m.pt_i64_2,
                    |m: &mut OutputAccount| &mut m.pt_i64_2,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "pt_i64_3",
                    |m: &OutputAccount| &m.pt_i64_3,
                    |m: &mut OutputAccount| &mut m.pt_i64_3,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "pt_i64_4",
                    |m: &OutputAccount| &m.pt_i64_4,
                    |m: &mut OutputAccount| &mut m.pt_i64_4,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "pt_i64_5",
                    |m: &OutputAccount| &m.pt_i64_5,
                    |m: &mut OutputAccount| &mut m.pt_i64_5,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "pt_f64_1",
                    |m: &OutputAccount| &m.pt_f64_1,
                    |m: &mut OutputAccount| &mut m.pt_f64_1,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "pt_f64_2",
                    |m: &OutputAccount| &m.pt_f64_2,
                    |m: &mut OutputAccount| &mut m.pt_f64_2,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "pt_f64_3",
                    |m: &OutputAccount| &m.pt_f64_3,
                    |m: &mut OutputAccount| &mut m.pt_f64_3,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "pt_f64_4",
                    |m: &OutputAccount| &m.pt_f64_4,
                    |m: &mut OutputAccount| &mut m.pt_f64_4,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "pt_f64_5",
                    |m: &OutputAccount| &m.pt_f64_5,
                    |m: &mut OutputAccount| &mut m.pt_f64_5,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "pt_str_1",
                    |m: &OutputAccount| &m.pt_str_1,
                    |m: &mut OutputAccount| &mut m.pt_str_1,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "pt_str_2",
                    |m: &OutputAccount| &m.pt_str_2,
                    |m: &mut OutputAccount| &mut m.pt_str_2,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "pt_str_3",
                    |m: &OutputAccount| &m.pt_str_3,
                    |m: &mut OutputAccount| &mut m.pt_str_3,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "pt_str_4",
                    |m: &OutputAccount| &m.pt_str_4,
                    |m: &mut OutputAccount| &mut m.pt_str_4,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "pt_str_5",
                    |m: &OutputAccount| &m.pt_str_5,
                    |m: &mut OutputAccount| &mut m.pt_str_5,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OutputAccount>(
                    "OutputAccount",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static OutputAccount {
        static mut instance: ::protobuf::lazy::Lazy<OutputAccount> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OutputAccount,
        };
        unsafe { instance.get(OutputAccount::new) }
    }
}

impl ::protobuf::Clear for OutputAccount {
    fn clear(&mut self) {
        self.clear_acc_no();
        self.clear_acnts_internal_acnum();
        self.clear_acnts_brn_code();
        self.clear_acnts_client_num();
        self.clear_ucic();
        self.clear_acnts_curr_code();
        self.clear_acnts_prod_code();
        self.clear_gl_cd();
        self.clear_acc_open_dt();
        self.clear_bal();
        self.clear_balccy();
        self.clear_int_rate();
        self.clear_int_type();
        self.clear_int_bench();
        self.clear_int_spread();
        self.clear_last_reset_dt();
        self.clear_next_reset_dt();
        self.clear_reset_no_of_months();
        self.clear_int_accrued_amt();
        self.clear_constitn();
        self.clear_lm_exp();
        self.clear_lim();
        self.clear_lm_ccy();
        self.clear_ext_rating_agency();
        self.clear_ext_rating();
        self.clear_int_rating();
        self.clear_asset_cd();
        self.clear_provision_amt();
        self.clear_prov_dt();
        self.clear_client_type();
        self.clear_clients_name();
        self.clear_clients_bsr_type_flg();
        self.clear_clients_busdivn_code();
        self.clear_clients_const_code();
        self.clear_clients_pan_gir_num();
        self.clear_clients_risk_categorization();
        self.clear_clients_risk_cntry();
        self.clear_clients_segment_code();
        self.clear_corpcl_orgn_qualifier();
        self.clear_corpcl_indus_code();
        self.clear_corpcl_nature_of_bus1();
        self.clear_corpcl_nature_of_bus2();
        self.clear_corpcl_nature_of_bus3();
        self.clear_corpcl_central_state_flg();
        self.clear_corpcl_public_sector_flg();
        self.clear_corpcl_primary_dlr_flg();
        self.clear_corpcl_multilateral_bank();
        self.clear_corpcl_connp_inv_num();
        self.clear_corpcl_bc_gross_turnover();
        self.clear_w4b_cd();
        self.clear_balm_llg();
        self.clear_care_llg();
        self.clear_ba_llg();
        self.clear_asset_code();
        self.clear_npa_dt();
        self.clear_account_balance();
        self.clear_pwo();
        self.clear_written_off_dt();
        self.clear_ho_balance();
        self.clear_npa_provision();
        self.clear_ho_provision();
        self.clear_suspencebalance();
        self.clear_suspence_writeoff();
        self.clear_ho_suspence();
        self.clear_claim();
        self.clear_primary();
        self.clear_collateral();
        self.clear_total_security();
        self.clear_primary_valuation_dt();
        self.clear_collateral_valuation_dt();
        self.clear_gold_deficit();
        self.clear_fraud();
        self.clear_wilful_default();
        self.clear_subsidy();
        self.clear_priority();
        self.clear_priority_type();
        self.clear_main_sector();
        self.clear_sub_sector();
        self.clear_activity();
        self.clear_industry();
        self.clear_categoryofborrower();
        self.clear_org_gl_head();
        self.clear_npa_amt();
        self.clear_sanc_dt();
        self.clear_occp_cd();
        self.clear_sens_sec();
        self.clear_prior_subtype();
        self.clear_restruct_flag();
        self.clear_restruct_dt();
        self.clear_mor_prd();
        self.clear_rating();
        self.clear_consitin();
        self.clear_pan();
        self.clear_limit_amt();
        self.clear_gross_adv();
        self.clear_exp_amt();
        self.clear_unvail_amt();
        self.clear_gold_gram();
        self.clear_fund_flag();
        self.clear_ltv_value();
        self.clear_pt_i64_1();
        self.clear_pt_i64_2();
        self.clear_pt_i64_3();
        self.clear_pt_i64_4();
        self.clear_pt_i64_5();
        self.clear_pt_f64_1();
        self.clear_pt_f64_2();
        self.clear_pt_f64_3();
        self.clear_pt_f64_4();
        self.clear_pt_f64_5();
        self.clear_pt_str_1();
        self.clear_pt_str_2();
        self.clear_pt_str_3();
        self.clear_pt_str_4();
        self.clear_pt_str_5();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmessage.proto\"\xbe\x1e\n\rOutputAccount\x12\x15\n\x06acc_no\x18\x01\
    \x20\x01(\tR\x05accNo\x120\n\x14acnts_internal_acnum\x18\x02\x20\x01(\tR\
    \x12acntsInternalAcnum\x12$\n\x0eacnts_brn_code\x18\x03\x20\x01(\tR\x0ca\
    cntsBrnCode\x12(\n\x10acnts_client_num\x18\x04\x20\x01(\tR\x0eacntsClien\
    tNum\x12\x12\n\x04ucic\x18\x05\x20\x01(\tR\x04ucic\x12&\n\x0facnts_curr_\
    code\x18\x06\x20\x01(\tR\racntsCurrCode\x12&\n\x0facnts_prod_code\x18\
    \x07\x20\x01(\tR\racntsProdCode\x12\x13\n\x05gl_cd\x18\x08\x20\x01(\tR\
    \x04glCd\x12\x1e\n\x0bacc_open_dt\x18\t\x20\x01(\x03R\taccOpenDt\x12\x10\
    \n\x03bal\x18\n\x20\x01(\x01R\x03bal\x12\x16\n\x06balccy\x18\x0b\x20\x01\
    (\x01R\x06balccy\x12\x19\n\x08int_rate\x18\x0c\x20\x01(\x01R\x07intRate\
    \x12\x19\n\x08int_type\x18\r\x20\x01(\tR\x07intType\x12\x1b\n\tint_bench\
    \x18\x0e\x20\x01(\tR\x08intBench\x12\x1d\n\nint_spread\x18\x0f\x20\x01(\
    \tR\tintSpread\x12\"\n\rlast_reset_dt\x18\x10\x20\x01(\x03R\x0blastReset\
    Dt\x12\"\n\rnext_reset_dt\x18\x11\x20\x01(\x03R\x0bnextResetDt\x12+\n\
    \x12reset_no_of_months\x18\x12\x20\x01(\tR\x0fresetNoOfMonths\x12&\n\x0f\
    int_accrued_amt\x18\x13\x20\x01(\x01R\rintAccruedAmt\x12\x1a\n\x08consti\
    tn\x18\x14\x20\x01(\tR\x08constitn\x12\x15\n\x06lm_exp\x18\x15\x20\x01(\
    \x03R\x05lmExp\x12\x10\n\x03lim\x18\x16\x20\x01(\x01R\x03lim\x12\x15\n\
    \x06lm_ccy\x18\x17\x20\x01(\tR\x05lmCcy\x12*\n\x11ext_rating_agency\x18\
    \x18\x20\x01(\tR\x0fextRatingAgency\x12\x1d\n\next_rating\x18\x19\x20\
    \x01(\tR\textRating\x12\x1d\n\nint_rating\x18\x1a\x20\x01(\tR\tintRating\
    \x12\x19\n\x08asset_cd\x18\x1b\x20\x01(\tR\x07assetCd\x12#\n\rprovision_\
    amt\x18\x1c\x20\x01(\x01R\x0cprovisionAmt\x12\x17\n\x07prov_dt\x18\x1d\
    \x20\x01(\x03R\x06provDt\x12\x1f\n\x0bclient_type\x18\x1e\x20\x01(\tR\nc\
    lientType\x12!\n\x0cclients_name\x18\x1f\x20\x01(\tR\x0bclientsName\x12/\
    \n\x14clients_bsr_type_flg\x18\x20\x20\x01(\tR\x11clientsBsrTypeFlg\x120\
    \n\x14clients_busdivn_code\x18!\x20\x01(\tR\x12clientsBusdivnCode\x12,\n\
    \x12clients_const_code\x18\"\x20\x01(\tR\x10clientsConstCode\x12-\n\x13c\
    lients_pan_gir_num\x18#\x20\x01(\tR\x10clientsPanGirNum\x12>\n\x1bclient\
    s_risk_categorization\x18$\x20\x01(\tR\x19clientsRiskCategorization\x12,\
    \n\x12clients_risk_cntry\x18%\x20\x01(\tR\x10clientsRiskCntry\x120\n\x14\
    clients_segment_code\x18&\x20\x01(\tR\x12clientsSegmentCode\x122\n\x15co\
    rpcl_orgn_qualifier\x18'\x20\x01(\tR\x13corpclOrgnQualifier\x12*\n\x11co\
    rpcl_indus_code\x18(\x20\x01(\tR\x0fcorpclIndusCode\x121\n\x15corpcl_nat\
    ure_of_bus1\x18)\x20\x01(\tR\x12corpclNatureOfBus1\x121\n\x15corpcl_natu\
    re_of_bus2\x18*\x20\x01(\tR\x12corpclNatureOfBus2\x121\n\x15corpcl_natur\
    e_of_bus3\x18+\x20\x01(\tR\x12corpclNatureOfBus3\x127\n\x18corpcl_centra\
    l_state_flg\x18,\x20\x01(\tR\x15corpclCentralStateFlg\x127\n\x18corpcl_p\
    ublic_sector_flg\x18-\x20\x01(\tR\x15corpclPublicSectorFlg\x123\n\x16cor\
    pcl_primary_dlr_flg\x18.\x20\x01(\tR\x13corpclPrimaryDlrFlg\x128\n\x18co\
    rpcl_multilateral_bank\x18/\x20\x01(\tR\x16corpclMultilateralBank\x12/\n\
    \x14corpcl_connp_inv_num\x180\x20\x01(\tR\x11corpclConnpInvNum\x127\n\
    \x18corpcl_bc_gross_turnover\x181\x20\x01(\x01R\x15corpclBcGrossTurnover\
    \x12\x15\n\x06w4b_cd\x182\x20\x01(\tR\x05w4bCd\x12\x19\n\x08balm_llg\x18\
    3\x20\x01(\tR\x07balmLlg\x12\x19\n\x08care_llg\x184\x20\x01(\tR\x07careL\
    lg\x12\x15\n\x06ba_llg\x185\x20\x01(\tR\x05baLlg\x12\x1d\n\nasset_code\
    \x186\x20\x01(\tR\tassetCode\x12\x15\n\x06npa_dt\x187\x20\x01(\x03R\x05n\
    paDt\x12'\n\x0faccount_balance\x188\x20\x01(\x01R\x0eaccountBalance\x12\
    \x10\n\x03pwo\x189\x20\x01(\x01R\x03pwo\x12$\n\x0ewritten_off_dt\x18:\
    \x20\x01(\x03R\x0cwrittenOffDt\x12\x1d\n\nho_balance\x18;\x20\x01(\x01R\
    \thoBalance\x12#\n\rnpa_provision\x18<\x20\x01(\x01R\x0cnpaProvision\x12\
    !\n\x0cho_provision\x18=\x20\x01(\x01R\x0bhoProvision\x12(\n\x0fsuspence\
    balance\x18>\x20\x01(\x01R\x0fsuspencebalance\x12+\n\x11suspence_writeof\
    f\x18?\x20\x01(\x01R\x10suspenceWriteoff\x12\x1f\n\x0bho_suspence\x18@\
    \x20\x01(\x01R\nhoSuspence\x12\x14\n\x05claim\x18A\x20\x01(\x01R\x05clai\
    m\x12\x18\n\x07primary\x18B\x20\x01(\x01R\x07primary\x12\x1e\n\ncollater\
    al\x18C\x20\x01(\x01R\ncollateral\x12%\n\x0etotal_security\x18D\x20\x01(\
    \x01R\rtotalSecurity\x120\n\x14primary_valuation_dt\x18E\x20\x01(\x03R\
    \x12primaryValuationDt\x126\n\x17collateral_valuation_dt\x18F\x20\x01(\
    \x03R\x15collateralValuationDt\x12!\n\x0cgold_deficit\x18G\x20\x01(\x01R\
    \x0bgoldDeficit\x12\x14\n\x05fraud\x18H\x20\x01(\x01R\x05fraud\x12%\n\
    \x0ewilful_default\x18I\x20\x01(\x01R\rwilfulDefault\x12\x18\n\x07subsid\
    y\x18J\x20\x01(\x01R\x07subsidy\x12\x1a\n\x08priority\x18K\x20\x01(\tR\
    \x08priority\x12#\n\rpriority_type\x18L\x20\x01(\tR\x0cpriorityType\x12\
    \x1f\n\x0bmain_sector\x18M\x20\x01(\tR\nmainSector\x12\x1d\n\nsub_sector\
    \x18N\x20\x01(\tR\tsubSector\x12\x1a\n\x08activity\x18O\x20\x01(\tR\x08a\
    ctivity\x12\x1a\n\x08industry\x18P\x20\x01(\tR\x08industry\x12.\n\x12cat\
    egoryofborrower\x18Q\x20\x01(\tR\x12categoryofborrower\x12\x1e\n\x0borg_\
    gl_head\x18R\x20\x01(\tR\torgGlHead\x12\x17\n\x07npa_amt\x18S\x20\x01(\
    \x01R\x06npaAmt\x12\x17\n\x07sanc_dt\x18T\x20\x01(\x03R\x06sancDt\x12\
    \x17\n\x07occp_cd\x18U\x20\x01(\tR\x06occpCd\x12\x19\n\x08sens_sec\x18V\
    \x20\x01(\tR\x07sensSec\x12#\n\rprior_subtype\x18W\x20\x01(\tR\x0cpriorS\
    ubtype\x12#\n\rrestruct_flag\x18X\x20\x01(\tR\x0crestructFlag\x12\x1f\n\
    \x0brestruct_dt\x18Y\x20\x01(\x03R\nrestructDt\x12\x17\n\x07mor_prd\x18Z\
    \x20\x01(\tR\x06morPrd\x12\x16\n\x06rating\x18[\x20\x01(\tR\x06rating\
    \x12\x1a\n\x08consitin\x18\\\x20\x01(\tR\x08consitin\x12\x10\n\x03pan\
    \x18]\x20\x01(\tR\x03pan\x12\x1b\n\tlimit_amt\x18^\x20\x01(\x01R\x08limi\
    tAmt\x12\x1b\n\tgross_adv\x18_\x20\x01(\x01R\x08grossAdv\x12\x17\n\x07ex\
    p_amt\x18`\x20\x01(\x01R\x06expAmt\x12\x1d\n\nunvail_amt\x18a\x20\x01(\
    \x01R\tunvailAmt\x12\x1b\n\tgold_gram\x18b\x20\x01(\x01R\x08goldGram\x12\
    \x1b\n\tfund_flag\x18c\x20\x01(\tR\x08fundFlag\x12\x1b\n\tltv_value\x18d\
    \x20\x01(\x01R\x08ltvValue\x12\x18\n\x08pt_i64_1\x18e\x20\x01(\x03R\x06p\
    tI641\x12\x18\n\x08pt_i64_2\x18f\x20\x01(\x03R\x06ptI642\x12\x18\n\x08pt\
    _i64_3\x18g\x20\x01(\x03R\x06ptI643\x12\x18\n\x08pt_i64_4\x18h\x20\x01(\
    \x03R\x06ptI644\x12\x18\n\x08pt_i64_5\x18i\x20\x01(\x03R\x06ptI645\x12\
    \x18\n\x08pt_f64_1\x18j\x20\x01(\x01R\x06ptF641\x12\x18\n\x08pt_f64_2\
    \x18k\x20\x01(\x01R\x06ptF642\x12\x18\n\x08pt_f64_3\x18l\x20\x01(\x01R\
    \x06ptF643\x12\x18\n\x08pt_f64_4\x18m\x20\x01(\x01R\x06ptF644\x12\x18\n\
    \x08pt_f64_5\x18n\x20\x01(\x01R\x06ptF645\x12\x18\n\x08pt_str_1\x18o\x20\
    \x01(\tR\x06ptStr1\x12\x18\n\x08pt_str_2\x18p\x20\x01(\tR\x06ptStr2\x12\
    \x18\n\x08pt_str_3\x18q\x20\x01(\tR\x06ptStr3\x12\x18\n\x08pt_str_4\x18r\
    \x20\x01(\tR\x06ptStr4\x12\x18\n\x08pt_str_5\x18s\x20\x01(\tR\x06ptStr5b\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<
    ::protobuf::descriptor::FileDescriptorProto,
> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe { file_descriptor_proto_lazy.get(|| parse_descriptor_proto()) }
}
