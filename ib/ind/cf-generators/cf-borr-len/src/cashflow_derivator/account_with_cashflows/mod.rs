// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cf_borr_len.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cashflow {
    fn default() -> &'a Cashflow {
        <Cashflow as ::protobuf::Message>::default_instance()
    }
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;


    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }
    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    // double principal_amount = 2;


    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }
    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    // int64 date = 3;


    pub fn get_date(&self) -> i64 {
        self.date
    }
    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "interest_amount",
                |m: &Cashflow| { &m.interest_amount },
                |m: &mut Cashflow| { &mut m.interest_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "principal_amount",
                |m: &Cashflow| { &m.principal_amount },
                |m: &mut Cashflow| { &mut m.principal_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date",
                |m: &Cashflow| { &m.date },
                |m: &mut Cashflow| { &mut m.date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cashflow>(
                "Cashflow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cashflow {
        static instance: ::protobuf::rt::LazyV2<Cashflow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cashflow::new)
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.interest_amount = 0.;
        self.principal_amount = 0.;
        self.date = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub deal_ref: ::std::string::String,
    pub intt_name: ::std::string::String,
    pub cntpty_name: ::std::string::String,
    pub deal_date: i64,
    pub value_date: i64,
    pub mat_date: i64,
    pub deal_amt_act: f64,
    pub deal_amt_plc: f64,
    pub roi: f64,
    pub int_amt_fx_deal: f64,
    pub mat_amt_fx_deal: f64,
    pub practice: ::std::string::String,
    pub spread: ::std::string::String,
    pub benchmark: ::std::string::String,
    pub rate_sett_freq: ::std::string::String,
    pub sett_freq: ::std::string::String,
    pub sett_typ: ::std::string::String,
    pub dealer: ::std::string::String,
    pub cntpty_id: ::std::string::String,
    pub inv_curcy: ::std::string::String,
    pub gl_code: ::std::string::String,
    pub int_type: ::std::string::String,
    pub cgl: ::std::string::String,
    pub group: ::std::string::String,
    pub llg: ::std::string::String,
    pub cf_type: ::std::string::String,
    pub cf_currency: ::std::string::String,
    pub cf_amount: f64,
    pub cf_date: i64,
    pub cf_date_2: i64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountWithCashflows {
    fn default() -> &'a AccountWithCashflows {
        <AccountWithCashflows as ::protobuf::Message>::default_instance()
    }
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string deal_ref = 1;


    pub fn get_deal_ref(&self) -> &str {
        &self.deal_ref
    }
    pub fn clear_deal_ref(&mut self) {
        self.deal_ref.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_ref(&mut self, v: ::std::string::String) {
        self.deal_ref = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_ref(&mut self) -> &mut ::std::string::String {
        &mut self.deal_ref
    }

    // Take field
    pub fn take_deal_ref(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_ref, ::std::string::String::new())
    }

    // string intt_name = 2;


    pub fn get_intt_name(&self) -> &str {
        &self.intt_name
    }
    pub fn clear_intt_name(&mut self) {
        self.intt_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_intt_name(&mut self, v: ::std::string::String) {
        self.intt_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_intt_name(&mut self) -> &mut ::std::string::String {
        &mut self.intt_name
    }

    // Take field
    pub fn take_intt_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.intt_name, ::std::string::String::new())
    }

    // string cntpty_name = 3;


    pub fn get_cntpty_name(&self) -> &str {
        &self.cntpty_name
    }
    pub fn clear_cntpty_name(&mut self) {
        self.cntpty_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cntpty_name(&mut self, v: ::std::string::String) {
        self.cntpty_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cntpty_name(&mut self) -> &mut ::std::string::String {
        &mut self.cntpty_name
    }

    // Take field
    pub fn take_cntpty_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cntpty_name, ::std::string::String::new())
    }

    // int64 deal_date = 4;


    pub fn get_deal_date(&self) -> i64 {
        self.deal_date
    }
    pub fn clear_deal_date(&mut self) {
        self.deal_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_deal_date(&mut self, v: i64) {
        self.deal_date = v;
    }

    // int64 value_date = 5;


    pub fn get_value_date(&self) -> i64 {
        self.value_date
    }
    pub fn clear_value_date(&mut self) {
        self.value_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_date(&mut self, v: i64) {
        self.value_date = v;
    }

    // int64 mat_date = 6;


    pub fn get_mat_date(&self) -> i64 {
        self.mat_date
    }
    pub fn clear_mat_date(&mut self) {
        self.mat_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_date(&mut self, v: i64) {
        self.mat_date = v;
    }

    // double deal_amt_act = 7;


    pub fn get_deal_amt_act(&self) -> f64 {
        self.deal_amt_act
    }
    pub fn clear_deal_amt_act(&mut self) {
        self.deal_amt_act = 0.;
    }

    // Param is passed by value, moved
    pub fn set_deal_amt_act(&mut self, v: f64) {
        self.deal_amt_act = v;
    }

    // double deal_amt_plc = 8;


    pub fn get_deal_amt_plc(&self) -> f64 {
        self.deal_amt_plc
    }
    pub fn clear_deal_amt_plc(&mut self) {
        self.deal_amt_plc = 0.;
    }

    // Param is passed by value, moved
    pub fn set_deal_amt_plc(&mut self, v: f64) {
        self.deal_amt_plc = v;
    }

    // double roi = 9;


    pub fn get_roi(&self) -> f64 {
        self.roi
    }
    pub fn clear_roi(&mut self) {
        self.roi = 0.;
    }

    // Param is passed by value, moved
    pub fn set_roi(&mut self, v: f64) {
        self.roi = v;
    }

    // double int_amt_fx_deal = 10;


    pub fn get_int_amt_fx_deal(&self) -> f64 {
        self.int_amt_fx_deal
    }
    pub fn clear_int_amt_fx_deal(&mut self) {
        self.int_amt_fx_deal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt_fx_deal(&mut self, v: f64) {
        self.int_amt_fx_deal = v;
    }

    // double mat_amt_fx_deal = 11;


    pub fn get_mat_amt_fx_deal(&self) -> f64 {
        self.mat_amt_fx_deal
    }
    pub fn clear_mat_amt_fx_deal(&mut self) {
        self.mat_amt_fx_deal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mat_amt_fx_deal(&mut self, v: f64) {
        self.mat_amt_fx_deal = v;
    }

    // string practice = 12;


    pub fn get_practice(&self) -> &str {
        &self.practice
    }
    pub fn clear_practice(&mut self) {
        self.practice.clear();
    }

    // Param is passed by value, moved
    pub fn set_practice(&mut self, v: ::std::string::String) {
        self.practice = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_practice(&mut self) -> &mut ::std::string::String {
        &mut self.practice
    }

    // Take field
    pub fn take_practice(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.practice, ::std::string::String::new())
    }

    // string spread = 13;


    pub fn get_spread(&self) -> &str {
        &self.spread
    }
    pub fn clear_spread(&mut self) {
        self.spread.clear();
    }

    // Param is passed by value, moved
    pub fn set_spread(&mut self, v: ::std::string::String) {
        self.spread = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spread(&mut self) -> &mut ::std::string::String {
        &mut self.spread
    }

    // Take field
    pub fn take_spread(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.spread, ::std::string::String::new())
    }

    // string benchmark = 14;


    pub fn get_benchmark(&self) -> &str {
        &self.benchmark
    }
    pub fn clear_benchmark(&mut self) {
        self.benchmark.clear();
    }

    // Param is passed by value, moved
    pub fn set_benchmark(&mut self, v: ::std::string::String) {
        self.benchmark = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_benchmark(&mut self) -> &mut ::std::string::String {
        &mut self.benchmark
    }

    // Take field
    pub fn take_benchmark(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.benchmark, ::std::string::String::new())
    }

    // string rate_sett_freq = 15;


    pub fn get_rate_sett_freq(&self) -> &str {
        &self.rate_sett_freq
    }
    pub fn clear_rate_sett_freq(&mut self) {
        self.rate_sett_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_sett_freq(&mut self, v: ::std::string::String) {
        self.rate_sett_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_sett_freq(&mut self) -> &mut ::std::string::String {
        &mut self.rate_sett_freq
    }

    // Take field
    pub fn take_rate_sett_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_sett_freq, ::std::string::String::new())
    }

    // string sett_freq = 16;


    pub fn get_sett_freq(&self) -> &str {
        &self.sett_freq
    }
    pub fn clear_sett_freq(&mut self) {
        self.sett_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_sett_freq(&mut self, v: ::std::string::String) {
        self.sett_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sett_freq(&mut self) -> &mut ::std::string::String {
        &mut self.sett_freq
    }

    // Take field
    pub fn take_sett_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sett_freq, ::std::string::String::new())
    }

    // string sett_typ = 17;


    pub fn get_sett_typ(&self) -> &str {
        &self.sett_typ
    }
    pub fn clear_sett_typ(&mut self) {
        self.sett_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_sett_typ(&mut self, v: ::std::string::String) {
        self.sett_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sett_typ(&mut self) -> &mut ::std::string::String {
        &mut self.sett_typ
    }

    // Take field
    pub fn take_sett_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sett_typ, ::std::string::String::new())
    }

    // string dealer = 18;


    pub fn get_dealer(&self) -> &str {
        &self.dealer
    }
    pub fn clear_dealer(&mut self) {
        self.dealer.clear();
    }

    // Param is passed by value, moved
    pub fn set_dealer(&mut self, v: ::std::string::String) {
        self.dealer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dealer(&mut self) -> &mut ::std::string::String {
        &mut self.dealer
    }

    // Take field
    pub fn take_dealer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dealer, ::std::string::String::new())
    }

    // string cntpty_id = 19;


    pub fn get_cntpty_id(&self) -> &str {
        &self.cntpty_id
    }
    pub fn clear_cntpty_id(&mut self) {
        self.cntpty_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cntpty_id(&mut self, v: ::std::string::String) {
        self.cntpty_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cntpty_id(&mut self) -> &mut ::std::string::String {
        &mut self.cntpty_id
    }

    // Take field
    pub fn take_cntpty_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cntpty_id, ::std::string::String::new())
    }

    // string inv_curcy = 20;


    pub fn get_inv_curcy(&self) -> &str {
        &self.inv_curcy
    }
    pub fn clear_inv_curcy(&mut self) {
        self.inv_curcy.clear();
    }

    // Param is passed by value, moved
    pub fn set_inv_curcy(&mut self, v: ::std::string::String) {
        self.inv_curcy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inv_curcy(&mut self) -> &mut ::std::string::String {
        &mut self.inv_curcy
    }

    // Take field
    pub fn take_inv_curcy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.inv_curcy, ::std::string::String::new())
    }

    // string gl_code = 21;


    pub fn get_gl_code(&self) -> &str {
        &self.gl_code
    }
    pub fn clear_gl_code(&mut self) {
        self.gl_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_gl_code(&mut self, v: ::std::string::String) {
        self.gl_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gl_code(&mut self) -> &mut ::std::string::String {
        &mut self.gl_code
    }

    // Take field
    pub fn take_gl_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gl_code, ::std::string::String::new())
    }

    // string int_type = 22;


    pub fn get_int_type(&self) -> &str {
        &self.int_type
    }
    pub fn clear_int_type(&mut self) {
        self.int_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_type(&mut self, v: ::std::string::String) {
        self.int_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int_type(&mut self) -> &mut ::std::string::String {
        &mut self.int_type
    }

    // Take field
    pub fn take_int_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int_type, ::std::string::String::new())
    }

    // string cgl = 23;


    pub fn get_cgl(&self) -> &str {
        &self.cgl
    }
    pub fn clear_cgl(&mut self) {
        self.cgl.clear();
    }

    // Param is passed by value, moved
    pub fn set_cgl(&mut self, v: ::std::string::String) {
        self.cgl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cgl(&mut self) -> &mut ::std::string::String {
        &mut self.cgl
    }

    // Take field
    pub fn take_cgl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cgl, ::std::string::String::new())
    }

    // string group = 24;


    pub fn get_group(&self) -> &str {
        &self.group
    }
    pub fn clear_group(&mut self) {
        self.group.clear();
    }

    // Param is passed by value, moved
    pub fn set_group(&mut self, v: ::std::string::String) {
        self.group = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group(&mut self) -> &mut ::std::string::String {
        &mut self.group
    }

    // Take field
    pub fn take_group(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group, ::std::string::String::new())
    }

    // string llg = 25;


    pub fn get_llg(&self) -> &str {
        &self.llg
    }
    pub fn clear_llg(&mut self) {
        self.llg.clear();
    }

    // Param is passed by value, moved
    pub fn set_llg(&mut self, v: ::std::string::String) {
        self.llg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_llg(&mut self) -> &mut ::std::string::String {
        &mut self.llg
    }

    // Take field
    pub fn take_llg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.llg, ::std::string::String::new())
    }

    // string cf_type = 26;


    pub fn get_cf_type(&self) -> &str {
        &self.cf_type
    }
    pub fn clear_cf_type(&mut self) {
        self.cf_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_cf_type(&mut self, v: ::std::string::String) {
        self.cf_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf_type(&mut self) -> &mut ::std::string::String {
        &mut self.cf_type
    }

    // Take field
    pub fn take_cf_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cf_type, ::std::string::String::new())
    }

    // string cf_currency = 27;


    pub fn get_cf_currency(&self) -> &str {
        &self.cf_currency
    }
    pub fn clear_cf_currency(&mut self) {
        self.cf_currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_cf_currency(&mut self, v: ::std::string::String) {
        self.cf_currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf_currency(&mut self) -> &mut ::std::string::String {
        &mut self.cf_currency
    }

    // Take field
    pub fn take_cf_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cf_currency, ::std::string::String::new())
    }

    // double cf_amount = 28;


    pub fn get_cf_amount(&self) -> f64 {
        self.cf_amount
    }
    pub fn clear_cf_amount(&mut self) {
        self.cf_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cf_amount(&mut self, v: f64) {
        self.cf_amount = v;
    }

    // int64 cf_date = 29;


    pub fn get_cf_date(&self) -> i64 {
        self.cf_date
    }
    pub fn clear_cf_date(&mut self) {
        self.cf_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_cf_date(&mut self, v: i64) {
        self.cf_date = v;
    }

    // int64 cf_date_2 = 30;


    pub fn get_cf_date_2(&self) -> i64 {
        self.cf_date_2
    }
    pub fn clear_cf_date_2(&mut self) {
        self.cf_date_2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_cf_date_2(&mut self, v: i64) {
        self.cf_date_2 = v;
    }

    // repeated .Cashflow cashflows = 31;


    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_ref)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.intt_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cntpty_name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deal_date = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.value_date = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_date = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.deal_amt_act = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.deal_amt_plc = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.roi = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt_fx_deal = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.mat_amt_fx_deal = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.practice)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.spread)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.benchmark)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_sett_freq)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sett_freq)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sett_typ)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dealer)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cntpty_id)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.inv_curcy)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gl_code)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int_type)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cgl)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.llg)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cf_type)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cf_currency)?;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.cf_amount = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cf_date = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cf_date_2 = tmp;
                },
                31 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.deal_ref.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.deal_ref);
        }
        if !self.intt_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.intt_name);
        }
        if !self.cntpty_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.cntpty_name);
        }
        if self.deal_date != 0 {
            my_size += ::protobuf::rt::value_size(4, self.deal_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.value_date != 0 {
            my_size += ::protobuf::rt::value_size(5, self.value_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mat_date != 0 {
            my_size += ::protobuf::rt::value_size(6, self.mat_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.deal_amt_act != 0. {
            my_size += 9;
        }
        if self.deal_amt_plc != 0. {
            my_size += 9;
        }
        if self.roi != 0. {
            my_size += 9;
        }
        if self.int_amt_fx_deal != 0. {
            my_size += 9;
        }
        if self.mat_amt_fx_deal != 0. {
            my_size += 9;
        }
        if !self.practice.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.practice);
        }
        if !self.spread.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.spread);
        }
        if !self.benchmark.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.benchmark);
        }
        if !self.rate_sett_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.rate_sett_freq);
        }
        if !self.sett_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.sett_freq);
        }
        if !self.sett_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.sett_typ);
        }
        if !self.dealer.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.dealer);
        }
        if !self.cntpty_id.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.cntpty_id);
        }
        if !self.inv_curcy.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.inv_curcy);
        }
        if !self.gl_code.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.gl_code);
        }
        if !self.int_type.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.int_type);
        }
        if !self.cgl.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.cgl);
        }
        if !self.group.is_empty() {
            my_size += ::protobuf::rt::string_size(24, &self.group);
        }
        if !self.llg.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.llg);
        }
        if !self.cf_type.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.cf_type);
        }
        if !self.cf_currency.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.cf_currency);
        }
        if self.cf_amount != 0. {
            my_size += 10;
        }
        if self.cf_date != 0 {
            my_size += ::protobuf::rt::value_size(29, self.cf_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cf_date_2 != 0 {
            my_size += ::protobuf::rt::value_size(30, self.cf_date_2, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.deal_ref.is_empty() {
            os.write_string(1, &self.deal_ref)?;
        }
        if !self.intt_name.is_empty() {
            os.write_string(2, &self.intt_name)?;
        }
        if !self.cntpty_name.is_empty() {
            os.write_string(3, &self.cntpty_name)?;
        }
        if self.deal_date != 0 {
            os.write_int64(4, self.deal_date)?;
        }
        if self.value_date != 0 {
            os.write_int64(5, self.value_date)?;
        }
        if self.mat_date != 0 {
            os.write_int64(6, self.mat_date)?;
        }
        if self.deal_amt_act != 0. {
            os.write_double(7, self.deal_amt_act)?;
        }
        if self.deal_amt_plc != 0. {
            os.write_double(8, self.deal_amt_plc)?;
        }
        if self.roi != 0. {
            os.write_double(9, self.roi)?;
        }
        if self.int_amt_fx_deal != 0. {
            os.write_double(10, self.int_amt_fx_deal)?;
        }
        if self.mat_amt_fx_deal != 0. {
            os.write_double(11, self.mat_amt_fx_deal)?;
        }
        if !self.practice.is_empty() {
            os.write_string(12, &self.practice)?;
        }
        if !self.spread.is_empty() {
            os.write_string(13, &self.spread)?;
        }
        if !self.benchmark.is_empty() {
            os.write_string(14, &self.benchmark)?;
        }
        if !self.rate_sett_freq.is_empty() {
            os.write_string(15, &self.rate_sett_freq)?;
        }
        if !self.sett_freq.is_empty() {
            os.write_string(16, &self.sett_freq)?;
        }
        if !self.sett_typ.is_empty() {
            os.write_string(17, &self.sett_typ)?;
        }
        if !self.dealer.is_empty() {
            os.write_string(18, &self.dealer)?;
        }
        if !self.cntpty_id.is_empty() {
            os.write_string(19, &self.cntpty_id)?;
        }
        if !self.inv_curcy.is_empty() {
            os.write_string(20, &self.inv_curcy)?;
        }
        if !self.gl_code.is_empty() {
            os.write_string(21, &self.gl_code)?;
        }
        if !self.int_type.is_empty() {
            os.write_string(22, &self.int_type)?;
        }
        if !self.cgl.is_empty() {
            os.write_string(23, &self.cgl)?;
        }
        if !self.group.is_empty() {
            os.write_string(24, &self.group)?;
        }
        if !self.llg.is_empty() {
            os.write_string(25, &self.llg)?;
        }
        if !self.cf_type.is_empty() {
            os.write_string(26, &self.cf_type)?;
        }
        if !self.cf_currency.is_empty() {
            os.write_string(27, &self.cf_currency)?;
        }
        if self.cf_amount != 0. {
            os.write_double(28, self.cf_amount)?;
        }
        if self.cf_date != 0 {
            os.write_int64(29, self.cf_date)?;
        }
        if self.cf_date_2 != 0 {
            os.write_int64(30, self.cf_date_2)?;
        }
        for v in &self.cashflows {
            os.write_tag(31, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "deal_ref",
                |m: &AccountWithCashflows| { &m.deal_ref },
                |m: &mut AccountWithCashflows| { &mut m.deal_ref },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "intt_name",
                |m: &AccountWithCashflows| { &m.intt_name },
                |m: &mut AccountWithCashflows| { &mut m.intt_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cntpty_name",
                |m: &AccountWithCashflows| { &m.cntpty_name },
                |m: &mut AccountWithCashflows| { &mut m.cntpty_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "deal_date",
                |m: &AccountWithCashflows| { &m.deal_date },
                |m: &mut AccountWithCashflows| { &mut m.deal_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "value_date",
                |m: &AccountWithCashflows| { &m.value_date },
                |m: &mut AccountWithCashflows| { &mut m.value_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "mat_date",
                |m: &AccountWithCashflows| { &m.mat_date },
                |m: &mut AccountWithCashflows| { &mut m.mat_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "deal_amt_act",
                |m: &AccountWithCashflows| { &m.deal_amt_act },
                |m: &mut AccountWithCashflows| { &mut m.deal_amt_act },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "deal_amt_plc",
                |m: &AccountWithCashflows| { &m.deal_amt_plc },
                |m: &mut AccountWithCashflows| { &mut m.deal_amt_plc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "roi",
                |m: &AccountWithCashflows| { &m.roi },
                |m: &mut AccountWithCashflows| { &mut m.roi },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "int_amt_fx_deal",
                |m: &AccountWithCashflows| { &m.int_amt_fx_deal },
                |m: &mut AccountWithCashflows| { &mut m.int_amt_fx_deal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "mat_amt_fx_deal",
                |m: &AccountWithCashflows| { &m.mat_amt_fx_deal },
                |m: &mut AccountWithCashflows| { &mut m.mat_amt_fx_deal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "practice",
                |m: &AccountWithCashflows| { &m.practice },
                |m: &mut AccountWithCashflows| { &mut m.practice },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "spread",
                |m: &AccountWithCashflows| { &m.spread },
                |m: &mut AccountWithCashflows| { &mut m.spread },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "benchmark",
                |m: &AccountWithCashflows| { &m.benchmark },
                |m: &mut AccountWithCashflows| { &mut m.benchmark },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rate_sett_freq",
                |m: &AccountWithCashflows| { &m.rate_sett_freq },
                |m: &mut AccountWithCashflows| { &mut m.rate_sett_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sett_freq",
                |m: &AccountWithCashflows| { &m.sett_freq },
                |m: &mut AccountWithCashflows| { &mut m.sett_freq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sett_typ",
                |m: &AccountWithCashflows| { &m.sett_typ },
                |m: &mut AccountWithCashflows| { &mut m.sett_typ },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dealer",
                |m: &AccountWithCashflows| { &m.dealer },
                |m: &mut AccountWithCashflows| { &mut m.dealer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cntpty_id",
                |m: &AccountWithCashflows| { &m.cntpty_id },
                |m: &mut AccountWithCashflows| { &mut m.cntpty_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "inv_curcy",
                |m: &AccountWithCashflows| { &m.inv_curcy },
                |m: &mut AccountWithCashflows| { &mut m.inv_curcy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gl_code",
                |m: &AccountWithCashflows| { &m.gl_code },
                |m: &mut AccountWithCashflows| { &mut m.gl_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int_type",
                |m: &AccountWithCashflows| { &m.int_type },
                |m: &mut AccountWithCashflows| { &mut m.int_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cgl",
                |m: &AccountWithCashflows| { &m.cgl },
                |m: &mut AccountWithCashflows| { &mut m.cgl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group",
                |m: &AccountWithCashflows| { &m.group },
                |m: &mut AccountWithCashflows| { &mut m.group },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "llg",
                |m: &AccountWithCashflows| { &m.llg },
                |m: &mut AccountWithCashflows| { &mut m.llg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cf_type",
                |m: &AccountWithCashflows| { &m.cf_type },
                |m: &mut AccountWithCashflows| { &mut m.cf_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cf_currency",
                |m: &AccountWithCashflows| { &m.cf_currency },
                |m: &mut AccountWithCashflows| { &mut m.cf_currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "cf_amount",
                |m: &AccountWithCashflows| { &m.cf_amount },
                |m: &mut AccountWithCashflows| { &mut m.cf_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cf_date",
                |m: &AccountWithCashflows| { &m.cf_date },
                |m: &mut AccountWithCashflows| { &mut m.cf_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cf_date_2",
                |m: &AccountWithCashflows| { &m.cf_date_2 },
                |m: &mut AccountWithCashflows| { &mut m.cf_date_2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                "cashflows",
                |m: &AccountWithCashflows| { &m.cashflows },
                |m: &mut AccountWithCashflows| { &mut m.cashflows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountWithCashflows>(
                "AccountWithCashflows",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static instance: ::protobuf::rt::LazyV2<AccountWithCashflows> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountWithCashflows::new)
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.deal_ref.clear();
        self.intt_name.clear();
        self.cntpty_name.clear();
        self.deal_date = 0;
        self.value_date = 0;
        self.mat_date = 0;
        self.deal_amt_act = 0.;
        self.deal_amt_plc = 0.;
        self.roi = 0.;
        self.int_amt_fx_deal = 0.;
        self.mat_amt_fx_deal = 0.;
        self.practice.clear();
        self.spread.clear();
        self.benchmark.clear();
        self.rate_sett_freq.clear();
        self.sett_freq.clear();
        self.sett_typ.clear();
        self.dealer.clear();
        self.cntpty_id.clear();
        self.inv_curcy.clear();
        self.gl_code.clear();
        self.int_type.clear();
        self.cgl.clear();
        self.group.clear();
        self.llg.clear();
        self.cf_type.clear();
        self.cf_currency.clear();
        self.cf_amount = 0.;
        self.cf_date = 0;
        self.cf_date_2 = 0;
        self.cashflows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11cf_borr_len.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\
    \x01\x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\
    \x20\x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03\
    R\x04date\"\x8f\x07\n\x14AccountWithCashflows\x12\x19\n\x08deal_ref\x18\
    \x01\x20\x01(\tR\x07dealRef\x12\x1b\n\tintt_name\x18\x02\x20\x01(\tR\x08\
    inttName\x12\x1f\n\x0bcntpty_name\x18\x03\x20\x01(\tR\ncntptyName\x12\
    \x1b\n\tdeal_date\x18\x04\x20\x01(\x03R\x08dealDate\x12\x1d\n\nvalue_dat\
    e\x18\x05\x20\x01(\x03R\tvalueDate\x12\x19\n\x08mat_date\x18\x06\x20\x01\
    (\x03R\x07matDate\x12\x20\n\x0cdeal_amt_act\x18\x07\x20\x01(\x01R\ndealA\
    mtAct\x12\x20\n\x0cdeal_amt_plc\x18\x08\x20\x01(\x01R\ndealAmtPlc\x12\
    \x10\n\x03roi\x18\t\x20\x01(\x01R\x03roi\x12%\n\x0fint_amt_fx_deal\x18\n\
    \x20\x01(\x01R\x0cintAmtFxDeal\x12%\n\x0fmat_amt_fx_deal\x18\x0b\x20\x01\
    (\x01R\x0cmatAmtFxDeal\x12\x1a\n\x08practice\x18\x0c\x20\x01(\tR\x08prac\
    tice\x12\x16\n\x06spread\x18\r\x20\x01(\tR\x06spread\x12\x1c\n\tbenchmar\
    k\x18\x0e\x20\x01(\tR\tbenchmark\x12$\n\x0erate_sett_freq\x18\x0f\x20\
    \x01(\tR\x0crateSettFreq\x12\x1b\n\tsett_freq\x18\x10\x20\x01(\tR\x08set\
    tFreq\x12\x19\n\x08sett_typ\x18\x11\x20\x01(\tR\x07settTyp\x12\x16\n\x06\
    dealer\x18\x12\x20\x01(\tR\x06dealer\x12\x1b\n\tcntpty_id\x18\x13\x20\
    \x01(\tR\x08cntptyId\x12\x1b\n\tinv_curcy\x18\x14\x20\x01(\tR\x08invCurc\
    y\x12\x17\n\x07gl_code\x18\x15\x20\x01(\tR\x06glCode\x12\x19\n\x08int_ty\
    pe\x18\x16\x20\x01(\tR\x07intType\x12\x10\n\x03cgl\x18\x17\x20\x01(\tR\
    \x03cgl\x12\x14\n\x05group\x18\x18\x20\x01(\tR\x05group\x12\x10\n\x03llg\
    \x18\x19\x20\x01(\tR\x03llg\x12\x17\n\x07cf_type\x18\x1a\x20\x01(\tR\x06\
    cfType\x12\x1f\n\x0bcf_currency\x18\x1b\x20\x01(\tR\ncfCurrency\x12\x1b\
    \n\tcf_amount\x18\x1c\x20\x01(\x01R\x08cfAmount\x12\x17\n\x07cf_date\x18\
    \x1d\x20\x01(\x03R\x06cfDate\x12\x1a\n\tcf_date_2\x18\x1e\x20\x01(\x03R\
    \x07cfDate2\x12'\n\tcashflows\x18\x1f\x20\x03(\x0b2\t.CashflowR\tcashflo\
    wsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
