// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double prin_amt = 2;

    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_int_amt();
        self.clear_prin_amt();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub trade_id: ::std::string::String,
    pub book: ::std::string::String,
    pub st_dt: i64,
    pub opt_sell_buy: ::std::string::String,
    pub put_call: ::std::string::String,
    pub call_ccy: ::std::string::String,
    pub call_amt: f64,
    pub put_ccy: ::std::string::String,
    pub put_amt: f64,
    pub strike_rt: f64,
    pub delivery_dt: i64,
    pub current_spot: f64,
    pub mtm_gain_loss_inr: f64,
    pub spot_delta: f64,
    pub frwrd_delta_ccy: ::std::string::String,
    pub frwrd_delta: f64,
    pub country_name: ::std::string::String,
    pub cust_typ: ::std::string::String,
    pub tot_int_amt: f64,
    pub tot_prin_amt: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string trade_id = 1;

    pub fn clear_trade_id(&mut self) {
        self.trade_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_trade_id(&mut self, v: ::std::string::String) {
        self.trade_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trade_id(&mut self) -> &mut ::std::string::String {
        &mut self.trade_id
    }

    // Take field
    pub fn take_trade_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trade_id, ::std::string::String::new())
    }

    pub fn get_trade_id(&self) -> &str {
        &self.trade_id
    }

    // string book = 2;

    pub fn clear_book(&mut self) {
        self.book.clear();
    }

    // Param is passed by value, moved
    pub fn set_book(&mut self, v: ::std::string::String) {
        self.book = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_book(&mut self) -> &mut ::std::string::String {
        &mut self.book
    }

    // Take field
    pub fn take_book(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.book, ::std::string::String::new())
    }

    pub fn get_book(&self) -> &str {
        &self.book
    }

    // int64 st_dt = 3;

    pub fn clear_st_dt(&mut self) {
        self.st_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_st_dt(&mut self, v: i64) {
        self.st_dt = v;
    }

    pub fn get_st_dt(&self) -> i64 {
        self.st_dt
    }

    // string opt_sell_buy = 4;

    pub fn clear_opt_sell_buy(&mut self) {
        self.opt_sell_buy.clear();
    }

    // Param is passed by value, moved
    pub fn set_opt_sell_buy(&mut self, v: ::std::string::String) {
        self.opt_sell_buy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_opt_sell_buy(&mut self) -> &mut ::std::string::String {
        &mut self.opt_sell_buy
    }

    // Take field
    pub fn take_opt_sell_buy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.opt_sell_buy, ::std::string::String::new())
    }

    pub fn get_opt_sell_buy(&self) -> &str {
        &self.opt_sell_buy
    }

    // string put_call = 5;

    pub fn clear_put_call(&mut self) {
        self.put_call.clear();
    }

    // Param is passed by value, moved
    pub fn set_put_call(&mut self, v: ::std::string::String) {
        self.put_call = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_put_call(&mut self) -> &mut ::std::string::String {
        &mut self.put_call
    }

    // Take field
    pub fn take_put_call(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.put_call, ::std::string::String::new())
    }

    pub fn get_put_call(&self) -> &str {
        &self.put_call
    }

    // string call_ccy = 6;

    pub fn clear_call_ccy(&mut self) {
        self.call_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_call_ccy(&mut self, v: ::std::string::String) {
        self.call_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_call_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.call_ccy
    }

    // Take field
    pub fn take_call_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.call_ccy, ::std::string::String::new())
    }

    pub fn get_call_ccy(&self) -> &str {
        &self.call_ccy
    }

    // double call_amt = 7;

    pub fn clear_call_amt(&mut self) {
        self.call_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_call_amt(&mut self, v: f64) {
        self.call_amt = v;
    }

    pub fn get_call_amt(&self) -> f64 {
        self.call_amt
    }

    // string put_ccy = 8;

    pub fn clear_put_ccy(&mut self) {
        self.put_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_put_ccy(&mut self, v: ::std::string::String) {
        self.put_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_put_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.put_ccy
    }

    // Take field
    pub fn take_put_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.put_ccy, ::std::string::String::new())
    }

    pub fn get_put_ccy(&self) -> &str {
        &self.put_ccy
    }

    // double put_amt = 9;

    pub fn clear_put_amt(&mut self) {
        self.put_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_put_amt(&mut self, v: f64) {
        self.put_amt = v;
    }

    pub fn get_put_amt(&self) -> f64 {
        self.put_amt
    }

    // double strike_rt = 10;

    pub fn clear_strike_rt(&mut self) {
        self.strike_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_strike_rt(&mut self, v: f64) {
        self.strike_rt = v;
    }

    pub fn get_strike_rt(&self) -> f64 {
        self.strike_rt
    }

    // int64 delivery_dt = 11;

    pub fn clear_delivery_dt(&mut self) {
        self.delivery_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_delivery_dt(&mut self, v: i64) {
        self.delivery_dt = v;
    }

    pub fn get_delivery_dt(&self) -> i64 {
        self.delivery_dt
    }

    // double current_spot = 12;

    pub fn clear_current_spot(&mut self) {
        self.current_spot = 0.;
    }

    // Param is passed by value, moved
    pub fn set_current_spot(&mut self, v: f64) {
        self.current_spot = v;
    }

    pub fn get_current_spot(&self) -> f64 {
        self.current_spot
    }

    // double mtm_gain_loss_inr = 13;

    pub fn clear_mtm_gain_loss_inr(&mut self) {
        self.mtm_gain_loss_inr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mtm_gain_loss_inr(&mut self, v: f64) {
        self.mtm_gain_loss_inr = v;
    }

    pub fn get_mtm_gain_loss_inr(&self) -> f64 {
        self.mtm_gain_loss_inr
    }

    // double spot_delta = 14;

    pub fn clear_spot_delta(&mut self) {
        self.spot_delta = 0.;
    }

    // Param is passed by value, moved
    pub fn set_spot_delta(&mut self, v: f64) {
        self.spot_delta = v;
    }

    pub fn get_spot_delta(&self) -> f64 {
        self.spot_delta
    }

    // string frwrd_delta_ccy = 15;

    pub fn clear_frwrd_delta_ccy(&mut self) {
        self.frwrd_delta_ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_frwrd_delta_ccy(&mut self, v: ::std::string::String) {
        self.frwrd_delta_ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_frwrd_delta_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.frwrd_delta_ccy
    }

    // Take field
    pub fn take_frwrd_delta_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.frwrd_delta_ccy, ::std::string::String::new())
    }

    pub fn get_frwrd_delta_ccy(&self) -> &str {
        &self.frwrd_delta_ccy
    }

    // double frwrd_delta = 16;

    pub fn clear_frwrd_delta(&mut self) {
        self.frwrd_delta = 0.;
    }

    // Param is passed by value, moved
    pub fn set_frwrd_delta(&mut self, v: f64) {
        self.frwrd_delta = v;
    }

    pub fn get_frwrd_delta(&self) -> f64 {
        self.frwrd_delta
    }

    // string country_name = 17;

    pub fn clear_country_name(&mut self) {
        self.country_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_country_name(&mut self, v: ::std::string::String) {
        self.country_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country_name(&mut self) -> &mut ::std::string::String {
        &mut self.country_name
    }

    // Take field
    pub fn take_country_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.country_name, ::std::string::String::new())
    }

    pub fn get_country_name(&self) -> &str {
        &self.country_name
    }

    // string cust_typ = 18;

    pub fn clear_cust_typ(&mut self) {
        self.cust_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_typ(&mut self, v: ::std::string::String) {
        self.cust_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_typ(&mut self) -> &mut ::std::string::String {
        &mut self.cust_typ
    }

    // Take field
    pub fn take_cust_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_typ, ::std::string::String::new())
    }

    pub fn get_cust_typ(&self) -> &str {
        &self.cust_typ
    }

    // double tot_int_amt = 19;

    pub fn clear_tot_int_amt(&mut self) {
        self.tot_int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_int_amt(&mut self, v: f64) {
        self.tot_int_amt = v;
    }

    pub fn get_tot_int_amt(&self) -> f64 {
        self.tot_int_amt
    }

    // double tot_prin_amt = 20;

    pub fn clear_tot_prin_amt(&mut self) {
        self.tot_prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_prin_amt(&mut self, v: f64) {
        self.tot_prin_amt = v;
    }

    pub fn get_tot_prin_amt(&self) -> f64 {
        self.tot_prin_amt
    }

    // repeated .Cashflow cashflows = 21;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trade_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.book)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.st_dt = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.opt_sell_buy)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.put_call)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.call_ccy)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.call_amt = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.put_ccy)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.put_amt = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.strike_rt = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.delivery_dt = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.current_spot = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.mtm_gain_loss_inr = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.spot_delta = tmp;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.frwrd_delta_ccy)?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.frwrd_delta = tmp;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.country_name)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_typ)?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_int_amt = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_prin_amt = tmp;
                },
                21 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.trade_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.trade_id);
        }
        if !self.book.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.book);
        }
        if self.st_dt != 0 {
            my_size += ::protobuf::rt::value_size(3, self.st_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.opt_sell_buy.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.opt_sell_buy);
        }
        if !self.put_call.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.put_call);
        }
        if !self.call_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.call_ccy);
        }
        if self.call_amt != 0. {
            my_size += 9;
        }
        if !self.put_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.put_ccy);
        }
        if self.put_amt != 0. {
            my_size += 9;
        }
        if self.strike_rt != 0. {
            my_size += 9;
        }
        if self.delivery_dt != 0 {
            my_size += ::protobuf::rt::value_size(11, self.delivery_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.current_spot != 0. {
            my_size += 9;
        }
        if self.mtm_gain_loss_inr != 0. {
            my_size += 9;
        }
        if self.spot_delta != 0. {
            my_size += 9;
        }
        if !self.frwrd_delta_ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.frwrd_delta_ccy);
        }
        if self.frwrd_delta != 0. {
            my_size += 10;
        }
        if !self.country_name.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.country_name);
        }
        if !self.cust_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.cust_typ);
        }
        if self.tot_int_amt != 0. {
            my_size += 10;
        }
        if self.tot_prin_amt != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.trade_id.is_empty() {
            os.write_string(1, &self.trade_id)?;
        }
        if !self.book.is_empty() {
            os.write_string(2, &self.book)?;
        }
        if self.st_dt != 0 {
            os.write_int64(3, self.st_dt)?;
        }
        if !self.opt_sell_buy.is_empty() {
            os.write_string(4, &self.opt_sell_buy)?;
        }
        if !self.put_call.is_empty() {
            os.write_string(5, &self.put_call)?;
        }
        if !self.call_ccy.is_empty() {
            os.write_string(6, &self.call_ccy)?;
        }
        if self.call_amt != 0. {
            os.write_double(7, self.call_amt)?;
        }
        if !self.put_ccy.is_empty() {
            os.write_string(8, &self.put_ccy)?;
        }
        if self.put_amt != 0. {
            os.write_double(9, self.put_amt)?;
        }
        if self.strike_rt != 0. {
            os.write_double(10, self.strike_rt)?;
        }
        if self.delivery_dt != 0 {
            os.write_int64(11, self.delivery_dt)?;
        }
        if self.current_spot != 0. {
            os.write_double(12, self.current_spot)?;
        }
        if self.mtm_gain_loss_inr != 0. {
            os.write_double(13, self.mtm_gain_loss_inr)?;
        }
        if self.spot_delta != 0. {
            os.write_double(14, self.spot_delta)?;
        }
        if !self.frwrd_delta_ccy.is_empty() {
            os.write_string(15, &self.frwrd_delta_ccy)?;
        }
        if self.frwrd_delta != 0. {
            os.write_double(16, self.frwrd_delta)?;
        }
        if !self.country_name.is_empty() {
            os.write_string(17, &self.country_name)?;
        }
        if !self.cust_typ.is_empty() {
            os.write_string(18, &self.cust_typ)?;
        }
        if self.tot_int_amt != 0. {
            os.write_double(19, self.tot_int_amt)?;
        }
        if self.tot_prin_amt != 0. {
            os.write_double(20, self.tot_prin_amt)?;
        }
        for v in &self.cashflows {
            os.write_tag(21, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "trade_id",
                    |m: &AccountWithCashflows| { &m.trade_id },
                    |m: &mut AccountWithCashflows| { &mut m.trade_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "book",
                    |m: &AccountWithCashflows| { &m.book },
                    |m: &mut AccountWithCashflows| { &mut m.book },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "st_dt",
                    |m: &AccountWithCashflows| { &m.st_dt },
                    |m: &mut AccountWithCashflows| { &mut m.st_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "opt_sell_buy",
                    |m: &AccountWithCashflows| { &m.opt_sell_buy },
                    |m: &mut AccountWithCashflows| { &mut m.opt_sell_buy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "put_call",
                    |m: &AccountWithCashflows| { &m.put_call },
                    |m: &mut AccountWithCashflows| { &mut m.put_call },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "call_ccy",
                    |m: &AccountWithCashflows| { &m.call_ccy },
                    |m: &mut AccountWithCashflows| { &mut m.call_ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "call_amt",
                    |m: &AccountWithCashflows| { &m.call_amt },
                    |m: &mut AccountWithCashflows| { &mut m.call_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "put_ccy",
                    |m: &AccountWithCashflows| { &m.put_ccy },
                    |m: &mut AccountWithCashflows| { &mut m.put_ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "put_amt",
                    |m: &AccountWithCashflows| { &m.put_amt },
                    |m: &mut AccountWithCashflows| { &mut m.put_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "strike_rt",
                    |m: &AccountWithCashflows| { &m.strike_rt },
                    |m: &mut AccountWithCashflows| { &mut m.strike_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "delivery_dt",
                    |m: &AccountWithCashflows| { &m.delivery_dt },
                    |m: &mut AccountWithCashflows| { &mut m.delivery_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "current_spot",
                    |m: &AccountWithCashflows| { &m.current_spot },
                    |m: &mut AccountWithCashflows| { &mut m.current_spot },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "mtm_gain_loss_inr",
                    |m: &AccountWithCashflows| { &m.mtm_gain_loss_inr },
                    |m: &mut AccountWithCashflows| { &mut m.mtm_gain_loss_inr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "spot_delta",
                    |m: &AccountWithCashflows| { &m.spot_delta },
                    |m: &mut AccountWithCashflows| { &mut m.spot_delta },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "frwrd_delta_ccy",
                    |m: &AccountWithCashflows| { &m.frwrd_delta_ccy },
                    |m: &mut AccountWithCashflows| { &mut m.frwrd_delta_ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "frwrd_delta",
                    |m: &AccountWithCashflows| { &m.frwrd_delta },
                    |m: &mut AccountWithCashflows| { &mut m.frwrd_delta },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "country_name",
                    |m: &AccountWithCashflows| { &m.country_name },
                    |m: &mut AccountWithCashflows| { &mut m.country_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_typ",
                    |m: &AccountWithCashflows| { &m.cust_typ },
                    |m: &mut AccountWithCashflows| { &mut m.cust_typ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_int_amt",
                    |m: &AccountWithCashflows| { &m.tot_int_amt },
                    |m: &mut AccountWithCashflows| { &mut m.tot_int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_prin_amt",
                    |m: &AccountWithCashflows| { &m.tot_prin_amt },
                    |m: &mut AccountWithCashflows| { &mut m.tot_prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_trade_id();
        self.clear_book();
        self.clear_st_dt();
        self.clear_opt_sell_buy();
        self.clear_put_call();
        self.clear_call_ccy();
        self.clear_call_amt();
        self.clear_put_ccy();
        self.clear_put_amt();
        self.clear_strike_rt();
        self.clear_delivery_dt();
        self.clear_current_spot();
        self.clear_mtm_gain_loss_inr();
        self.clear_spot_delta();
        self.clear_frwrd_delta_ccy();
        self.clear_frwrd_delta();
        self.clear_country_name();
        self.clear_cust_typ();
        self.clear_tot_int_amt();
        self.clear_tot_prin_amt();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ecurr_opt.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\
    \x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prin\
    Amt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\x9c\x05\n\x14Accou\
    ntWithCashflows\x12\x19\n\x08trade_id\x18\x01\x20\x01(\tR\x07tradeId\x12\
    \x12\n\x04book\x18\x02\x20\x01(\tR\x04book\x12\x13\n\x05st_dt\x18\x03\
    \x20\x01(\x03R\x04stDt\x12\x20\n\x0copt_sell_buy\x18\x04\x20\x01(\tR\nop\
    tSellBuy\x12\x19\n\x08put_call\x18\x05\x20\x01(\tR\x07putCall\x12\x19\n\
    \x08call_ccy\x18\x06\x20\x01(\tR\x07callCcy\x12\x19\n\x08call_amt\x18\
    \x07\x20\x01(\x01R\x07callAmt\x12\x17\n\x07put_ccy\x18\x08\x20\x01(\tR\
    \x06putCcy\x12\x17\n\x07put_amt\x18\t\x20\x01(\x01R\x06putAmt\x12\x1b\n\
    \tstrike_rt\x18\n\x20\x01(\x01R\x08strikeRt\x12\x1f\n\x0bdelivery_dt\x18\
    \x0b\x20\x01(\x03R\ndeliveryDt\x12!\n\x0ccurrent_spot\x18\x0c\x20\x01(\
    \x01R\x0bcurrentSpot\x12)\n\x11mtm_gain_loss_inr\x18\r\x20\x01(\x01R\x0e\
    mtmGainLossInr\x12\x1d\n\nspot_delta\x18\x0e\x20\x01(\x01R\tspotDelta\
    \x12&\n\x0ffrwrd_delta_ccy\x18\x0f\x20\x01(\tR\rfrwrdDeltaCcy\x12\x1f\n\
    \x0bfrwrd_delta\x18\x10\x20\x01(\x01R\nfrwrdDelta\x12!\n\x0ccountry_name\
    \x18\x11\x20\x01(\tR\x0bcountryName\x12\x19\n\x08cust_typ\x18\x12\x20\
    \x01(\tR\x07custTyp\x12\x1e\n\x0btot_int_amt\x18\x13\x20\x01(\x01R\ttotI\
    ntAmt\x12\x20\n\x0ctot_prin_amt\x18\x14\x20\x01(\x01R\ntotPrinAmt\x12'\n\
    \tcashflows\x18\x15\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
