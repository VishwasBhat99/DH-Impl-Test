// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub interest_amount: f64,
    pub principal_amount: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double interest_amount = 1;

    pub fn clear_interest_amount(&mut self) {
        self.interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_amount(&mut self, v: f64) {
        self.interest_amount = v;
    }

    pub fn get_interest_amount(&self) -> f64 {
        self.interest_amount
    }

    // double principal_amount = 2;

    pub fn clear_principal_amount(&mut self) {
        self.principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_principal_amount(&mut self, v: f64) {
        self.principal_amount = v;
    }

    pub fn get_principal_amount(&self) -> f64 {
        self.principal_amount
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.principal_amount = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interest_amount != 0. {
            my_size += 9;
        }
        if self.principal_amount != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.interest_amount != 0. {
            os.write_double(1, self.interest_amount)?;
        }
        if self.principal_amount != 0. {
            os.write_double(2, self.principal_amount)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_amount",
                    |m: &Cashflow| { &m.interest_amount },
                    |m: &mut Cashflow| { &mut m.interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "principal_amount",
                    |m: &Cashflow| { &m.principal_amount },
                    |m: &mut Cashflow| { &mut m.principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_interest_amount();
        self.clear_principal_amount();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub acc_no: ::std::string::String,
    pub branch_code: ::std::string::String,
    pub cust_no: ::std::string::String,
    pub ucc_id: ::std::string::String,
    pub ccy: ::std::string::String,
    pub product: ::std::string::String,
    pub acc_date: i64,
    pub gl_code: i32,
    pub glcode_compounded_portion: ::std::string::String,
    pub glcode_int_accrued: ::std::string::String,
    pub deposit_date: i64,
    pub initial_deposit_amount: f64,
    pub initial_dep_amtlcy: f64,
    pub current_outstanding_bal: f64,
    pub current_outstandingbal_lcy: f64,
    pub cum_interest: f64,
    pub cum_interest_amt_lcy: f64,
    pub maturity_date: i64,
    pub interest_type: ::std::string::String,
    pub interst_acrrual_basis: ::std::string::String,
    pub interest_accured_amount: f64,
    pub interest_compution_type: ::std::string::String,
    pub interest_rate: f64,
    pub interest_payment_freq: i64,
    pub next_int_payment_dt: i64,
    pub compounding_freq: i64,
    pub next_compounding_dt: i64,
    pub floating_rate_benchmark: f64,
    pub spread: f64,
    pub next_repricing_dt: i64,
    pub repricing_frequency: i64,
    pub non_withdrawable_flag: ::std::string::String,
    pub noticedays: i64,
    pub lockin_till_dt: i64,
    pub dep_pledged_against_loan_yn: ::std::string::String,
    pub customerconstitutioncode_1: ::std::string::String,
    pub customerconstitutioncode_2: ::std::string::String,
    pub customerconstitutioncode_3: ::std::string::String,
    pub customerconstitutioncode_4: ::std::string::String,
    pub customerconstitutioncode_5: ::std::string::String,
    pub period_months: i64,
    pub period_days: i64,
    pub intrest_craeted_upto: i64,
    pub interest_accrued_upto: i64,
    pub f_15hyear: ::std::string::String,
    pub tds_rate: f64,
    pub app1: ::std::string::String,
    pub app2: ::std::string::String,
    pub app3: ::std::string::String,
    pub app4: ::std::string::String,
    pub app5: ::std::string::String,
    pub app6: ::std::string::String,
    pub app7: ::std::string::String,
    pub total_principal_balance: f64,
    pub alm_line: ::std::string::String,
    pub npa_class: ::std::string::String,
    pub common_cust_id: ::std::string::String,
    pub derived_next_reprice_date: i64,
    pub risk_weight: ::std::string::String,
    pub restructure_flag: ::std::string::String,
    pub resid: ::std::string::String,
    pub ia_line: ::std::string::String,
    pub balm_l2: ::std::string::String,
    pub ora_concat: ::std::string::String,
    pub tot_balance: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string acc_no = 1;

    pub fn clear_acc_no(&mut self) {
        self.acc_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc_no(&mut self, v: ::std::string::String) {
        self.acc_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc_no(&mut self) -> &mut ::std::string::String {
        &mut self.acc_no
    }

    // Take field
    pub fn take_acc_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc_no, ::std::string::String::new())
    }

    pub fn get_acc_no(&self) -> &str {
        &self.acc_no
    }

    // string branch_code = 2;

    pub fn clear_branch_code(&mut self) {
        self.branch_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch_code(&mut self, v: ::std::string::String) {
        self.branch_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch_code(&mut self) -> &mut ::std::string::String {
        &mut self.branch_code
    }

    // Take field
    pub fn take_branch_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch_code, ::std::string::String::new())
    }

    pub fn get_branch_code(&self) -> &str {
        &self.branch_code
    }

    // string cust_no = 3;

    pub fn clear_cust_no(&mut self) {
        self.cust_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_cust_no(&mut self, v: ::std::string::String) {
        self.cust_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cust_no(&mut self) -> &mut ::std::string::String {
        &mut self.cust_no
    }

    // Take field
    pub fn take_cust_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cust_no, ::std::string::String::new())
    }

    pub fn get_cust_no(&self) -> &str {
        &self.cust_no
    }

    // string ucc_id = 4;

    pub fn clear_ucc_id(&mut self) {
        self.ucc_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_ucc_id(&mut self, v: ::std::string::String) {
        self.ucc_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ucc_id(&mut self) -> &mut ::std::string::String {
        &mut self.ucc_id
    }

    // Take field
    pub fn take_ucc_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ucc_id, ::std::string::String::new())
    }

    pub fn get_ucc_id(&self) -> &str {
        &self.ucc_id
    }

    // string ccy = 5;

    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }

    // string product = 6;

    pub fn clear_product(&mut self) {
        self.product.clear();
    }

    // Param is passed by value, moved
    pub fn set_product(&mut self, v: ::std::string::String) {
        self.product = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product(&mut self) -> &mut ::std::string::String {
        &mut self.product
    }

    // Take field
    pub fn take_product(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product, ::std::string::String::new())
    }

    pub fn get_product(&self) -> &str {
        &self.product
    }

    // int64 acc_date = 7;

    pub fn clear_acc_date(&mut self) {
        self.acc_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_acc_date(&mut self, v: i64) {
        self.acc_date = v;
    }

    pub fn get_acc_date(&self) -> i64 {
        self.acc_date
    }

    // int32 gl_code = 8;

    pub fn clear_gl_code(&mut self) {
        self.gl_code = 0;
    }

    // Param is passed by value, moved
    pub fn set_gl_code(&mut self, v: i32) {
        self.gl_code = v;
    }

    pub fn get_gl_code(&self) -> i32 {
        self.gl_code
    }

    // string glcode_compounded_portion = 9;

    pub fn clear_glcode_compounded_portion(&mut self) {
        self.glcode_compounded_portion.clear();
    }

    // Param is passed by value, moved
    pub fn set_glcode_compounded_portion(&mut self, v: ::std::string::String) {
        self.glcode_compounded_portion = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_glcode_compounded_portion(&mut self) -> &mut ::std::string::String {
        &mut self.glcode_compounded_portion
    }

    // Take field
    pub fn take_glcode_compounded_portion(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.glcode_compounded_portion, ::std::string::String::new())
    }

    pub fn get_glcode_compounded_portion(&self) -> &str {
        &self.glcode_compounded_portion
    }

    // string glcode_int_accrued = 10;

    pub fn clear_glcode_int_accrued(&mut self) {
        self.glcode_int_accrued.clear();
    }

    // Param is passed by value, moved
    pub fn set_glcode_int_accrued(&mut self, v: ::std::string::String) {
        self.glcode_int_accrued = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_glcode_int_accrued(&mut self) -> &mut ::std::string::String {
        &mut self.glcode_int_accrued
    }

    // Take field
    pub fn take_glcode_int_accrued(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.glcode_int_accrued, ::std::string::String::new())
    }

    pub fn get_glcode_int_accrued(&self) -> &str {
        &self.glcode_int_accrued
    }

    // int64 deposit_date = 11;

    pub fn clear_deposit_date(&mut self) {
        self.deposit_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_deposit_date(&mut self, v: i64) {
        self.deposit_date = v;
    }

    pub fn get_deposit_date(&self) -> i64 {
        self.deposit_date
    }

    // double initial_deposit_amount = 12;

    pub fn clear_initial_deposit_amount(&mut self) {
        self.initial_deposit_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_initial_deposit_amount(&mut self, v: f64) {
        self.initial_deposit_amount = v;
    }

    pub fn get_initial_deposit_amount(&self) -> f64 {
        self.initial_deposit_amount
    }

    // double initial_dep_amtlcy = 13;

    pub fn clear_initial_dep_amtlcy(&mut self) {
        self.initial_dep_amtlcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_initial_dep_amtlcy(&mut self, v: f64) {
        self.initial_dep_amtlcy = v;
    }

    pub fn get_initial_dep_amtlcy(&self) -> f64 {
        self.initial_dep_amtlcy
    }

    // double current_outstanding_bal = 14;

    pub fn clear_current_outstanding_bal(&mut self) {
        self.current_outstanding_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_current_outstanding_bal(&mut self, v: f64) {
        self.current_outstanding_bal = v;
    }

    pub fn get_current_outstanding_bal(&self) -> f64 {
        self.current_outstanding_bal
    }

    // double current_outstandingbal_lcy = 15;

    pub fn clear_current_outstandingbal_lcy(&mut self) {
        self.current_outstandingbal_lcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_current_outstandingbal_lcy(&mut self, v: f64) {
        self.current_outstandingbal_lcy = v;
    }

    pub fn get_current_outstandingbal_lcy(&self) -> f64 {
        self.current_outstandingbal_lcy
    }

    // double cum_interest = 16;

    pub fn clear_cum_interest(&mut self) {
        self.cum_interest = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cum_interest(&mut self, v: f64) {
        self.cum_interest = v;
    }

    pub fn get_cum_interest(&self) -> f64 {
        self.cum_interest
    }

    // double cum_interest_amt_lcy = 17;

    pub fn clear_cum_interest_amt_lcy(&mut self) {
        self.cum_interest_amt_lcy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cum_interest_amt_lcy(&mut self, v: f64) {
        self.cum_interest_amt_lcy = v;
    }

    pub fn get_cum_interest_amt_lcy(&self) -> f64 {
        self.cum_interest_amt_lcy
    }

    // int64 maturity_date = 18;

    pub fn clear_maturity_date(&mut self) {
        self.maturity_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_maturity_date(&mut self, v: i64) {
        self.maturity_date = v;
    }

    pub fn get_maturity_date(&self) -> i64 {
        self.maturity_date
    }

    // string interest_type = 19;

    pub fn clear_interest_type(&mut self) {
        self.interest_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_interest_type(&mut self, v: ::std::string::String) {
        self.interest_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interest_type(&mut self) -> &mut ::std::string::String {
        &mut self.interest_type
    }

    // Take field
    pub fn take_interest_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interest_type, ::std::string::String::new())
    }

    pub fn get_interest_type(&self) -> &str {
        &self.interest_type
    }

    // string interst_acrrual_basis = 20;

    pub fn clear_interst_acrrual_basis(&mut self) {
        self.interst_acrrual_basis.clear();
    }

    // Param is passed by value, moved
    pub fn set_interst_acrrual_basis(&mut self, v: ::std::string::String) {
        self.interst_acrrual_basis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interst_acrrual_basis(&mut self) -> &mut ::std::string::String {
        &mut self.interst_acrrual_basis
    }

    // Take field
    pub fn take_interst_acrrual_basis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interst_acrrual_basis, ::std::string::String::new())
    }

    pub fn get_interst_acrrual_basis(&self) -> &str {
        &self.interst_acrrual_basis
    }

    // double interest_accured_amount = 21;

    pub fn clear_interest_accured_amount(&mut self) {
        self.interest_accured_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_accured_amount(&mut self, v: f64) {
        self.interest_accured_amount = v;
    }

    pub fn get_interest_accured_amount(&self) -> f64 {
        self.interest_accured_amount
    }

    // string interest_compution_type = 22;

    pub fn clear_interest_compution_type(&mut self) {
        self.interest_compution_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_interest_compution_type(&mut self, v: ::std::string::String) {
        self.interest_compution_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interest_compution_type(&mut self) -> &mut ::std::string::String {
        &mut self.interest_compution_type
    }

    // Take field
    pub fn take_interest_compution_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interest_compution_type, ::std::string::String::new())
    }

    pub fn get_interest_compution_type(&self) -> &str {
        &self.interest_compution_type
    }

    // double interest_rate = 23;

    pub fn clear_interest_rate(&mut self) {
        self.interest_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_interest_rate(&mut self, v: f64) {
        self.interest_rate = v;
    }

    pub fn get_interest_rate(&self) -> f64 {
        self.interest_rate
    }

    // int64 interest_payment_freq = 24;

    pub fn clear_interest_payment_freq(&mut self) {
        self.interest_payment_freq = 0;
    }

    // Param is passed by value, moved
    pub fn set_interest_payment_freq(&mut self, v: i64) {
        self.interest_payment_freq = v;
    }

    pub fn get_interest_payment_freq(&self) -> i64 {
        self.interest_payment_freq
    }

    // int64 next_int_payment_dt = 25;

    pub fn clear_next_int_payment_dt(&mut self) {
        self.next_int_payment_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_int_payment_dt(&mut self, v: i64) {
        self.next_int_payment_dt = v;
    }

    pub fn get_next_int_payment_dt(&self) -> i64 {
        self.next_int_payment_dt
    }

    // int64 compounding_freq = 26;

    pub fn clear_compounding_freq(&mut self) {
        self.compounding_freq = 0;
    }

    // Param is passed by value, moved
    pub fn set_compounding_freq(&mut self, v: i64) {
        self.compounding_freq = v;
    }

    pub fn get_compounding_freq(&self) -> i64 {
        self.compounding_freq
    }

    // int64 next_compounding_dt = 27;

    pub fn clear_next_compounding_dt(&mut self) {
        self.next_compounding_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_compounding_dt(&mut self, v: i64) {
        self.next_compounding_dt = v;
    }

    pub fn get_next_compounding_dt(&self) -> i64 {
        self.next_compounding_dt
    }

    // double floating_rate_benchmark = 28;

    pub fn clear_floating_rate_benchmark(&mut self) {
        self.floating_rate_benchmark = 0.;
    }

    // Param is passed by value, moved
    pub fn set_floating_rate_benchmark(&mut self, v: f64) {
        self.floating_rate_benchmark = v;
    }

    pub fn get_floating_rate_benchmark(&self) -> f64 {
        self.floating_rate_benchmark
    }

    // double spread = 29;

    pub fn clear_spread(&mut self) {
        self.spread = 0.;
    }

    // Param is passed by value, moved
    pub fn set_spread(&mut self, v: f64) {
        self.spread = v;
    }

    pub fn get_spread(&self) -> f64 {
        self.spread
    }

    // int64 next_repricing_dt = 30;

    pub fn clear_next_repricing_dt(&mut self) {
        self.next_repricing_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_repricing_dt(&mut self, v: i64) {
        self.next_repricing_dt = v;
    }

    pub fn get_next_repricing_dt(&self) -> i64 {
        self.next_repricing_dt
    }

    // int64 repricing_frequency = 31;

    pub fn clear_repricing_frequency(&mut self) {
        self.repricing_frequency = 0;
    }

    // Param is passed by value, moved
    pub fn set_repricing_frequency(&mut self, v: i64) {
        self.repricing_frequency = v;
    }

    pub fn get_repricing_frequency(&self) -> i64 {
        self.repricing_frequency
    }

    // string non_withdrawable_flag = 32;

    pub fn clear_non_withdrawable_flag(&mut self) {
        self.non_withdrawable_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_non_withdrawable_flag(&mut self, v: ::std::string::String) {
        self.non_withdrawable_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_non_withdrawable_flag(&mut self) -> &mut ::std::string::String {
        &mut self.non_withdrawable_flag
    }

    // Take field
    pub fn take_non_withdrawable_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.non_withdrawable_flag, ::std::string::String::new())
    }

    pub fn get_non_withdrawable_flag(&self) -> &str {
        &self.non_withdrawable_flag
    }

    // int64 noticedays = 33;

    pub fn clear_noticedays(&mut self) {
        self.noticedays = 0;
    }

    // Param is passed by value, moved
    pub fn set_noticedays(&mut self, v: i64) {
        self.noticedays = v;
    }

    pub fn get_noticedays(&self) -> i64 {
        self.noticedays
    }

    // int64 lockin_till_dt = 34;

    pub fn clear_lockin_till_dt(&mut self) {
        self.lockin_till_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_lockin_till_dt(&mut self, v: i64) {
        self.lockin_till_dt = v;
    }

    pub fn get_lockin_till_dt(&self) -> i64 {
        self.lockin_till_dt
    }

    // string dep_pledged_against_loan_yn = 35;

    pub fn clear_dep_pledged_against_loan_yn(&mut self) {
        self.dep_pledged_against_loan_yn.clear();
    }

    // Param is passed by value, moved
    pub fn set_dep_pledged_against_loan_yn(&mut self, v: ::std::string::String) {
        self.dep_pledged_against_loan_yn = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dep_pledged_against_loan_yn(&mut self) -> &mut ::std::string::String {
        &mut self.dep_pledged_against_loan_yn
    }

    // Take field
    pub fn take_dep_pledged_against_loan_yn(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dep_pledged_against_loan_yn, ::std::string::String::new())
    }

    pub fn get_dep_pledged_against_loan_yn(&self) -> &str {
        &self.dep_pledged_against_loan_yn
    }

    // string customerconstitutioncode_1 = 36;

    pub fn clear_customerconstitutioncode_1(&mut self) {
        self.customerconstitutioncode_1.clear();
    }

    // Param is passed by value, moved
    pub fn set_customerconstitutioncode_1(&mut self, v: ::std::string::String) {
        self.customerconstitutioncode_1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customerconstitutioncode_1(&mut self) -> &mut ::std::string::String {
        &mut self.customerconstitutioncode_1
    }

    // Take field
    pub fn take_customerconstitutioncode_1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customerconstitutioncode_1, ::std::string::String::new())
    }

    pub fn get_customerconstitutioncode_1(&self) -> &str {
        &self.customerconstitutioncode_1
    }

    // string customerconstitutioncode_2 = 37;

    pub fn clear_customerconstitutioncode_2(&mut self) {
        self.customerconstitutioncode_2.clear();
    }

    // Param is passed by value, moved
    pub fn set_customerconstitutioncode_2(&mut self, v: ::std::string::String) {
        self.customerconstitutioncode_2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customerconstitutioncode_2(&mut self) -> &mut ::std::string::String {
        &mut self.customerconstitutioncode_2
    }

    // Take field
    pub fn take_customerconstitutioncode_2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customerconstitutioncode_2, ::std::string::String::new())
    }

    pub fn get_customerconstitutioncode_2(&self) -> &str {
        &self.customerconstitutioncode_2
    }

    // string customerconstitutioncode_3 = 38;

    pub fn clear_customerconstitutioncode_3(&mut self) {
        self.customerconstitutioncode_3.clear();
    }

    // Param is passed by value, moved
    pub fn set_customerconstitutioncode_3(&mut self, v: ::std::string::String) {
        self.customerconstitutioncode_3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customerconstitutioncode_3(&mut self) -> &mut ::std::string::String {
        &mut self.customerconstitutioncode_3
    }

    // Take field
    pub fn take_customerconstitutioncode_3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customerconstitutioncode_3, ::std::string::String::new())
    }

    pub fn get_customerconstitutioncode_3(&self) -> &str {
        &self.customerconstitutioncode_3
    }

    // string customerconstitutioncode_4 = 39;

    pub fn clear_customerconstitutioncode_4(&mut self) {
        self.customerconstitutioncode_4.clear();
    }

    // Param is passed by value, moved
    pub fn set_customerconstitutioncode_4(&mut self, v: ::std::string::String) {
        self.customerconstitutioncode_4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customerconstitutioncode_4(&mut self) -> &mut ::std::string::String {
        &mut self.customerconstitutioncode_4
    }

    // Take field
    pub fn take_customerconstitutioncode_4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customerconstitutioncode_4, ::std::string::String::new())
    }

    pub fn get_customerconstitutioncode_4(&self) -> &str {
        &self.customerconstitutioncode_4
    }

    // string customerconstitutioncode_5 = 40;

    pub fn clear_customerconstitutioncode_5(&mut self) {
        self.customerconstitutioncode_5.clear();
    }

    // Param is passed by value, moved
    pub fn set_customerconstitutioncode_5(&mut self, v: ::std::string::String) {
        self.customerconstitutioncode_5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customerconstitutioncode_5(&mut self) -> &mut ::std::string::String {
        &mut self.customerconstitutioncode_5
    }

    // Take field
    pub fn take_customerconstitutioncode_5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customerconstitutioncode_5, ::std::string::String::new())
    }

    pub fn get_customerconstitutioncode_5(&self) -> &str {
        &self.customerconstitutioncode_5
    }

    // int64 period_months = 41;

    pub fn clear_period_months(&mut self) {
        self.period_months = 0;
    }

    // Param is passed by value, moved
    pub fn set_period_months(&mut self, v: i64) {
        self.period_months = v;
    }

    pub fn get_period_months(&self) -> i64 {
        self.period_months
    }

    // int64 period_days = 42;

    pub fn clear_period_days(&mut self) {
        self.period_days = 0;
    }

    // Param is passed by value, moved
    pub fn set_period_days(&mut self, v: i64) {
        self.period_days = v;
    }

    pub fn get_period_days(&self) -> i64 {
        self.period_days
    }

    // int64 intrest_craeted_upto = 43;

    pub fn clear_intrest_craeted_upto(&mut self) {
        self.intrest_craeted_upto = 0;
    }

    // Param is passed by value, moved
    pub fn set_intrest_craeted_upto(&mut self, v: i64) {
        self.intrest_craeted_upto = v;
    }

    pub fn get_intrest_craeted_upto(&self) -> i64 {
        self.intrest_craeted_upto
    }

    // int64 interest_accrued_upto = 44;

    pub fn clear_interest_accrued_upto(&mut self) {
        self.interest_accrued_upto = 0;
    }

    // Param is passed by value, moved
    pub fn set_interest_accrued_upto(&mut self, v: i64) {
        self.interest_accrued_upto = v;
    }

    pub fn get_interest_accrued_upto(&self) -> i64 {
        self.interest_accrued_upto
    }

    // string f_15hyear = 45;

    pub fn clear_f_15hyear(&mut self) {
        self.f_15hyear.clear();
    }

    // Param is passed by value, moved
    pub fn set_f_15hyear(&mut self, v: ::std::string::String) {
        self.f_15hyear = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_f_15hyear(&mut self) -> &mut ::std::string::String {
        &mut self.f_15hyear
    }

    // Take field
    pub fn take_f_15hyear(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.f_15hyear, ::std::string::String::new())
    }

    pub fn get_f_15hyear(&self) -> &str {
        &self.f_15hyear
    }

    // double tds_rate = 46;

    pub fn clear_tds_rate(&mut self) {
        self.tds_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tds_rate(&mut self, v: f64) {
        self.tds_rate = v;
    }

    pub fn get_tds_rate(&self) -> f64 {
        self.tds_rate
    }

    // string app1 = 47;

    pub fn clear_app1(&mut self) {
        self.app1.clear();
    }

    // Param is passed by value, moved
    pub fn set_app1(&mut self, v: ::std::string::String) {
        self.app1 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app1(&mut self) -> &mut ::std::string::String {
        &mut self.app1
    }

    // Take field
    pub fn take_app1(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app1, ::std::string::String::new())
    }

    pub fn get_app1(&self) -> &str {
        &self.app1
    }

    // string app2 = 48;

    pub fn clear_app2(&mut self) {
        self.app2.clear();
    }

    // Param is passed by value, moved
    pub fn set_app2(&mut self, v: ::std::string::String) {
        self.app2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app2(&mut self) -> &mut ::std::string::String {
        &mut self.app2
    }

    // Take field
    pub fn take_app2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app2, ::std::string::String::new())
    }

    pub fn get_app2(&self) -> &str {
        &self.app2
    }

    // string app3 = 49;

    pub fn clear_app3(&mut self) {
        self.app3.clear();
    }

    // Param is passed by value, moved
    pub fn set_app3(&mut self, v: ::std::string::String) {
        self.app3 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app3(&mut self) -> &mut ::std::string::String {
        &mut self.app3
    }

    // Take field
    pub fn take_app3(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app3, ::std::string::String::new())
    }

    pub fn get_app3(&self) -> &str {
        &self.app3
    }

    // string app4 = 50;

    pub fn clear_app4(&mut self) {
        self.app4.clear();
    }

    // Param is passed by value, moved
    pub fn set_app4(&mut self, v: ::std::string::String) {
        self.app4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app4(&mut self) -> &mut ::std::string::String {
        &mut self.app4
    }

    // Take field
    pub fn take_app4(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app4, ::std::string::String::new())
    }

    pub fn get_app4(&self) -> &str {
        &self.app4
    }

    // string app5 = 51;

    pub fn clear_app5(&mut self) {
        self.app5.clear();
    }

    // Param is passed by value, moved
    pub fn set_app5(&mut self, v: ::std::string::String) {
        self.app5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app5(&mut self) -> &mut ::std::string::String {
        &mut self.app5
    }

    // Take field
    pub fn take_app5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app5, ::std::string::String::new())
    }

    pub fn get_app5(&self) -> &str {
        &self.app5
    }

    // string app6 = 52;

    pub fn clear_app6(&mut self) {
        self.app6.clear();
    }

    // Param is passed by value, moved
    pub fn set_app6(&mut self, v: ::std::string::String) {
        self.app6 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app6(&mut self) -> &mut ::std::string::String {
        &mut self.app6
    }

    // Take field
    pub fn take_app6(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app6, ::std::string::String::new())
    }

    pub fn get_app6(&self) -> &str {
        &self.app6
    }

    // string app7 = 53;

    pub fn clear_app7(&mut self) {
        self.app7.clear();
    }

    // Param is passed by value, moved
    pub fn set_app7(&mut self, v: ::std::string::String) {
        self.app7 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app7(&mut self) -> &mut ::std::string::String {
        &mut self.app7
    }

    // Take field
    pub fn take_app7(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app7, ::std::string::String::new())
    }

    pub fn get_app7(&self) -> &str {
        &self.app7
    }

    // double total_principal_balance = 54;

    pub fn clear_total_principal_balance(&mut self) {
        self.total_principal_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_principal_balance(&mut self, v: f64) {
        self.total_principal_balance = v;
    }

    pub fn get_total_principal_balance(&self) -> f64 {
        self.total_principal_balance
    }

    // string alm_line = 55;

    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }

    // string npa_class = 56;

    pub fn clear_npa_class(&mut self) {
        self.npa_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_npa_class(&mut self, v: ::std::string::String) {
        self.npa_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_npa_class(&mut self) -> &mut ::std::string::String {
        &mut self.npa_class
    }

    // Take field
    pub fn take_npa_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.npa_class, ::std::string::String::new())
    }

    pub fn get_npa_class(&self) -> &str {
        &self.npa_class
    }

    // string common_cust_id = 57;

    pub fn clear_common_cust_id(&mut self) {
        self.common_cust_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_common_cust_id(&mut self, v: ::std::string::String) {
        self.common_cust_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_common_cust_id(&mut self) -> &mut ::std::string::String {
        &mut self.common_cust_id
    }

    // Take field
    pub fn take_common_cust_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.common_cust_id, ::std::string::String::new())
    }

    pub fn get_common_cust_id(&self) -> &str {
        &self.common_cust_id
    }

    // int64 derived_next_reprice_date = 58;

    pub fn clear_derived_next_reprice_date(&mut self) {
        self.derived_next_reprice_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_derived_next_reprice_date(&mut self, v: i64) {
        self.derived_next_reprice_date = v;
    }

    pub fn get_derived_next_reprice_date(&self) -> i64 {
        self.derived_next_reprice_date
    }

    // string risk_weight = 59;

    pub fn clear_risk_weight(&mut self) {
        self.risk_weight.clear();
    }

    // Param is passed by value, moved
    pub fn set_risk_weight(&mut self, v: ::std::string::String) {
        self.risk_weight = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_risk_weight(&mut self) -> &mut ::std::string::String {
        &mut self.risk_weight
    }

    // Take field
    pub fn take_risk_weight(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.risk_weight, ::std::string::String::new())
    }

    pub fn get_risk_weight(&self) -> &str {
        &self.risk_weight
    }

    // string restructure_flag = 60;

    pub fn clear_restructure_flag(&mut self) {
        self.restructure_flag.clear();
    }

    // Param is passed by value, moved
    pub fn set_restructure_flag(&mut self, v: ::std::string::String) {
        self.restructure_flag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_restructure_flag(&mut self) -> &mut ::std::string::String {
        &mut self.restructure_flag
    }

    // Take field
    pub fn take_restructure_flag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.restructure_flag, ::std::string::String::new())
    }

    pub fn get_restructure_flag(&self) -> &str {
        &self.restructure_flag
    }

    // string resid = 61;

    pub fn clear_resid(&mut self) {
        self.resid.clear();
    }

    // Param is passed by value, moved
    pub fn set_resid(&mut self, v: ::std::string::String) {
        self.resid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resid(&mut self) -> &mut ::std::string::String {
        &mut self.resid
    }

    // Take field
    pub fn take_resid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resid, ::std::string::String::new())
    }

    pub fn get_resid(&self) -> &str {
        &self.resid
    }

    // string ia_line = 62;

    pub fn clear_ia_line(&mut self) {
        self.ia_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_ia_line(&mut self, v: ::std::string::String) {
        self.ia_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ia_line(&mut self) -> &mut ::std::string::String {
        &mut self.ia_line
    }

    // Take field
    pub fn take_ia_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ia_line, ::std::string::String::new())
    }

    pub fn get_ia_line(&self) -> &str {
        &self.ia_line
    }

    // string balm_l2 = 63;

    pub fn clear_balm_l2(&mut self) {
        self.balm_l2.clear();
    }

    // Param is passed by value, moved
    pub fn set_balm_l2(&mut self, v: ::std::string::String) {
        self.balm_l2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balm_l2(&mut self) -> &mut ::std::string::String {
        &mut self.balm_l2
    }

    // Take field
    pub fn take_balm_l2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balm_l2, ::std::string::String::new())
    }

    pub fn get_balm_l2(&self) -> &str {
        &self.balm_l2
    }

    // string ora_concat = 64;

    pub fn clear_ora_concat(&mut self) {
        self.ora_concat.clear();
    }

    // Param is passed by value, moved
    pub fn set_ora_concat(&mut self, v: ::std::string::String) {
        self.ora_concat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ora_concat(&mut self) -> &mut ::std::string::String {
        &mut self.ora_concat
    }

    // Take field
    pub fn take_ora_concat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ora_concat, ::std::string::String::new())
    }

    pub fn get_ora_concat(&self) -> &str {
        &self.ora_concat
    }

    // double tot_balance = 65;

    pub fn clear_tot_balance(&mut self) {
        self.tot_balance = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tot_balance(&mut self, v: f64) {
        self.tot_balance = v;
    }

    pub fn get_tot_balance(&self) -> f64 {
        self.tot_balance
    }

    // repeated .Cashflow cashflows = 66;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc_no)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch_code)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cust_no)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ucc_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.acc_date = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.gl_code = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.glcode_compounded_portion)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.glcode_int_accrued)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deposit_date = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.initial_deposit_amount = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.initial_dep_amtlcy = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.current_outstanding_bal = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.current_outstandingbal_lcy = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.cum_interest = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.cum_interest_amt_lcy = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maturity_date = tmp;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interest_type)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interst_acrrual_basis)?;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_accured_amount = tmp;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interest_compution_type)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.interest_rate = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.interest_payment_freq = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_int_payment_dt = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.compounding_freq = tmp;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_compounding_dt = tmp;
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.floating_rate_benchmark = tmp;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.spread = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.next_repricing_dt = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.repricing_frequency = tmp;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.non_withdrawable_flag)?;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.noticedays = tmp;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lockin_till_dt = tmp;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dep_pledged_against_loan_yn)?;
                },
                36 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customerconstitutioncode_1)?;
                },
                37 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customerconstitutioncode_2)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customerconstitutioncode_3)?;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customerconstitutioncode_4)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customerconstitutioncode_5)?;
                },
                41 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.period_months = tmp;
                },
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.period_days = tmp;
                },
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.intrest_craeted_upto = tmp;
                },
                44 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.interest_accrued_upto = tmp;
                },
                45 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.f_15hyear)?;
                },
                46 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tds_rate = tmp;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app1)?;
                },
                48 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app2)?;
                },
                49 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app3)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app4)?;
                },
                51 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app5)?;
                },
                52 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app6)?;
                },
                53 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app7)?;
                },
                54 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_principal_balance = tmp;
                },
                55 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alm_line)?;
                },
                56 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.npa_class)?;
                },
                57 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.common_cust_id)?;
                },
                58 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.derived_next_reprice_date = tmp;
                },
                59 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.risk_weight)?;
                },
                60 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.restructure_flag)?;
                },
                61 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resid)?;
                },
                62 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ia_line)?;
                },
                63 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.balm_l2)?;
                },
                64 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ora_concat)?;
                },
                65 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tot_balance = tmp;
                },
                66 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.acc_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.acc_no);
        }
        if !self.branch_code.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.branch_code);
        }
        if !self.cust_no.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.cust_no);
        }
        if !self.ucc_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.ucc_id);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.ccy);
        }
        if !self.product.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.product);
        }
        if self.acc_date != 0 {
            my_size += ::protobuf::rt::value_size(7, self.acc_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gl_code != 0 {
            my_size += ::protobuf::rt::value_size(8, self.gl_code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.glcode_compounded_portion.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.glcode_compounded_portion);
        }
        if !self.glcode_int_accrued.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.glcode_int_accrued);
        }
        if self.deposit_date != 0 {
            my_size += ::protobuf::rt::value_size(11, self.deposit_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.initial_deposit_amount != 0. {
            my_size += 9;
        }
        if self.initial_dep_amtlcy != 0. {
            my_size += 9;
        }
        if self.current_outstanding_bal != 0. {
            my_size += 9;
        }
        if self.current_outstandingbal_lcy != 0. {
            my_size += 9;
        }
        if self.cum_interest != 0. {
            my_size += 10;
        }
        if self.cum_interest_amt_lcy != 0. {
            my_size += 10;
        }
        if self.maturity_date != 0 {
            my_size += ::protobuf::rt::value_size(18, self.maturity_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.interest_type.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.interest_type);
        }
        if !self.interst_acrrual_basis.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.interst_acrrual_basis);
        }
        if self.interest_accured_amount != 0. {
            my_size += 10;
        }
        if !self.interest_compution_type.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.interest_compution_type);
        }
        if self.interest_rate != 0. {
            my_size += 10;
        }
        if self.interest_payment_freq != 0 {
            my_size += ::protobuf::rt::value_size(24, self.interest_payment_freq, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_int_payment_dt != 0 {
            my_size += ::protobuf::rt::value_size(25, self.next_int_payment_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.compounding_freq != 0 {
            my_size += ::protobuf::rt::value_size(26, self.compounding_freq, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_compounding_dt != 0 {
            my_size += ::protobuf::rt::value_size(27, self.next_compounding_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.floating_rate_benchmark != 0. {
            my_size += 10;
        }
        if self.spread != 0. {
            my_size += 10;
        }
        if self.next_repricing_dt != 0 {
            my_size += ::protobuf::rt::value_size(30, self.next_repricing_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.repricing_frequency != 0 {
            my_size += ::protobuf::rt::value_size(31, self.repricing_frequency, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.non_withdrawable_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.non_withdrawable_flag);
        }
        if self.noticedays != 0 {
            my_size += ::protobuf::rt::value_size(33, self.noticedays, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lockin_till_dt != 0 {
            my_size += ::protobuf::rt::value_size(34, self.lockin_till_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.dep_pledged_against_loan_yn.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.dep_pledged_against_loan_yn);
        }
        if !self.customerconstitutioncode_1.is_empty() {
            my_size += ::protobuf::rt::string_size(36, &self.customerconstitutioncode_1);
        }
        if !self.customerconstitutioncode_2.is_empty() {
            my_size += ::protobuf::rt::string_size(37, &self.customerconstitutioncode_2);
        }
        if !self.customerconstitutioncode_3.is_empty() {
            my_size += ::protobuf::rt::string_size(38, &self.customerconstitutioncode_3);
        }
        if !self.customerconstitutioncode_4.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.customerconstitutioncode_4);
        }
        if !self.customerconstitutioncode_5.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.customerconstitutioncode_5);
        }
        if self.period_months != 0 {
            my_size += ::protobuf::rt::value_size(41, self.period_months, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.period_days != 0 {
            my_size += ::protobuf::rt::value_size(42, self.period_days, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.intrest_craeted_upto != 0 {
            my_size += ::protobuf::rt::value_size(43, self.intrest_craeted_upto, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.interest_accrued_upto != 0 {
            my_size += ::protobuf::rt::value_size(44, self.interest_accrued_upto, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.f_15hyear.is_empty() {
            my_size += ::protobuf::rt::string_size(45, &self.f_15hyear);
        }
        if self.tds_rate != 0. {
            my_size += 10;
        }
        if !self.app1.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.app1);
        }
        if !self.app2.is_empty() {
            my_size += ::protobuf::rt::string_size(48, &self.app2);
        }
        if !self.app3.is_empty() {
            my_size += ::protobuf::rt::string_size(49, &self.app3);
        }
        if !self.app4.is_empty() {
            my_size += ::protobuf::rt::string_size(50, &self.app4);
        }
        if !self.app5.is_empty() {
            my_size += ::protobuf::rt::string_size(51, &self.app5);
        }
        if !self.app6.is_empty() {
            my_size += ::protobuf::rt::string_size(52, &self.app6);
        }
        if !self.app7.is_empty() {
            my_size += ::protobuf::rt::string_size(53, &self.app7);
        }
        if self.total_principal_balance != 0. {
            my_size += 10;
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(55, &self.alm_line);
        }
        if !self.npa_class.is_empty() {
            my_size += ::protobuf::rt::string_size(56, &self.npa_class);
        }
        if !self.common_cust_id.is_empty() {
            my_size += ::protobuf::rt::string_size(57, &self.common_cust_id);
        }
        if self.derived_next_reprice_date != 0 {
            my_size += ::protobuf::rt::value_size(58, self.derived_next_reprice_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.risk_weight.is_empty() {
            my_size += ::protobuf::rt::string_size(59, &self.risk_weight);
        }
        if !self.restructure_flag.is_empty() {
            my_size += ::protobuf::rt::string_size(60, &self.restructure_flag);
        }
        if !self.resid.is_empty() {
            my_size += ::protobuf::rt::string_size(61, &self.resid);
        }
        if !self.ia_line.is_empty() {
            my_size += ::protobuf::rt::string_size(62, &self.ia_line);
        }
        if !self.balm_l2.is_empty() {
            my_size += ::protobuf::rt::string_size(63, &self.balm_l2);
        }
        if !self.ora_concat.is_empty() {
            my_size += ::protobuf::rt::string_size(64, &self.ora_concat);
        }
        if self.tot_balance != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.acc_no.is_empty() {
            os.write_string(1, &self.acc_no)?;
        }
        if !self.branch_code.is_empty() {
            os.write_string(2, &self.branch_code)?;
        }
        if !self.cust_no.is_empty() {
            os.write_string(3, &self.cust_no)?;
        }
        if !self.ucc_id.is_empty() {
            os.write_string(4, &self.ucc_id)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(5, &self.ccy)?;
        }
        if !self.product.is_empty() {
            os.write_string(6, &self.product)?;
        }
        if self.acc_date != 0 {
            os.write_int64(7, self.acc_date)?;
        }
        if self.gl_code != 0 {
            os.write_int32(8, self.gl_code)?;
        }
        if !self.glcode_compounded_portion.is_empty() {
            os.write_string(9, &self.glcode_compounded_portion)?;
        }
        if !self.glcode_int_accrued.is_empty() {
            os.write_string(10, &self.glcode_int_accrued)?;
        }
        if self.deposit_date != 0 {
            os.write_int64(11, self.deposit_date)?;
        }
        if self.initial_deposit_amount != 0. {
            os.write_double(12, self.initial_deposit_amount)?;
        }
        if self.initial_dep_amtlcy != 0. {
            os.write_double(13, self.initial_dep_amtlcy)?;
        }
        if self.current_outstanding_bal != 0. {
            os.write_double(14, self.current_outstanding_bal)?;
        }
        if self.current_outstandingbal_lcy != 0. {
            os.write_double(15, self.current_outstandingbal_lcy)?;
        }
        if self.cum_interest != 0. {
            os.write_double(16, self.cum_interest)?;
        }
        if self.cum_interest_amt_lcy != 0. {
            os.write_double(17, self.cum_interest_amt_lcy)?;
        }
        if self.maturity_date != 0 {
            os.write_int64(18, self.maturity_date)?;
        }
        if !self.interest_type.is_empty() {
            os.write_string(19, &self.interest_type)?;
        }
        if !self.interst_acrrual_basis.is_empty() {
            os.write_string(20, &self.interst_acrrual_basis)?;
        }
        if self.interest_accured_amount != 0. {
            os.write_double(21, self.interest_accured_amount)?;
        }
        if !self.interest_compution_type.is_empty() {
            os.write_string(22, &self.interest_compution_type)?;
        }
        if self.interest_rate != 0. {
            os.write_double(23, self.interest_rate)?;
        }
        if self.interest_payment_freq != 0 {
            os.write_int64(24, self.interest_payment_freq)?;
        }
        if self.next_int_payment_dt != 0 {
            os.write_int64(25, self.next_int_payment_dt)?;
        }
        if self.compounding_freq != 0 {
            os.write_int64(26, self.compounding_freq)?;
        }
        if self.next_compounding_dt != 0 {
            os.write_int64(27, self.next_compounding_dt)?;
        }
        if self.floating_rate_benchmark != 0. {
            os.write_double(28, self.floating_rate_benchmark)?;
        }
        if self.spread != 0. {
            os.write_double(29, self.spread)?;
        }
        if self.next_repricing_dt != 0 {
            os.write_int64(30, self.next_repricing_dt)?;
        }
        if self.repricing_frequency != 0 {
            os.write_int64(31, self.repricing_frequency)?;
        }
        if !self.non_withdrawable_flag.is_empty() {
            os.write_string(32, &self.non_withdrawable_flag)?;
        }
        if self.noticedays != 0 {
            os.write_int64(33, self.noticedays)?;
        }
        if self.lockin_till_dt != 0 {
            os.write_int64(34, self.lockin_till_dt)?;
        }
        if !self.dep_pledged_against_loan_yn.is_empty() {
            os.write_string(35, &self.dep_pledged_against_loan_yn)?;
        }
        if !self.customerconstitutioncode_1.is_empty() {
            os.write_string(36, &self.customerconstitutioncode_1)?;
        }
        if !self.customerconstitutioncode_2.is_empty() {
            os.write_string(37, &self.customerconstitutioncode_2)?;
        }
        if !self.customerconstitutioncode_3.is_empty() {
            os.write_string(38, &self.customerconstitutioncode_3)?;
        }
        if !self.customerconstitutioncode_4.is_empty() {
            os.write_string(39, &self.customerconstitutioncode_4)?;
        }
        if !self.customerconstitutioncode_5.is_empty() {
            os.write_string(40, &self.customerconstitutioncode_5)?;
        }
        if self.period_months != 0 {
            os.write_int64(41, self.period_months)?;
        }
        if self.period_days != 0 {
            os.write_int64(42, self.period_days)?;
        }
        if self.intrest_craeted_upto != 0 {
            os.write_int64(43, self.intrest_craeted_upto)?;
        }
        if self.interest_accrued_upto != 0 {
            os.write_int64(44, self.interest_accrued_upto)?;
        }
        if !self.f_15hyear.is_empty() {
            os.write_string(45, &self.f_15hyear)?;
        }
        if self.tds_rate != 0. {
            os.write_double(46, self.tds_rate)?;
        }
        if !self.app1.is_empty() {
            os.write_string(47, &self.app1)?;
        }
        if !self.app2.is_empty() {
            os.write_string(48, &self.app2)?;
        }
        if !self.app3.is_empty() {
            os.write_string(49, &self.app3)?;
        }
        if !self.app4.is_empty() {
            os.write_string(50, &self.app4)?;
        }
        if !self.app5.is_empty() {
            os.write_string(51, &self.app5)?;
        }
        if !self.app6.is_empty() {
            os.write_string(52, &self.app6)?;
        }
        if !self.app7.is_empty() {
            os.write_string(53, &self.app7)?;
        }
        if self.total_principal_balance != 0. {
            os.write_double(54, self.total_principal_balance)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(55, &self.alm_line)?;
        }
        if !self.npa_class.is_empty() {
            os.write_string(56, &self.npa_class)?;
        }
        if !self.common_cust_id.is_empty() {
            os.write_string(57, &self.common_cust_id)?;
        }
        if self.derived_next_reprice_date != 0 {
            os.write_int64(58, self.derived_next_reprice_date)?;
        }
        if !self.risk_weight.is_empty() {
            os.write_string(59, &self.risk_weight)?;
        }
        if !self.restructure_flag.is_empty() {
            os.write_string(60, &self.restructure_flag)?;
        }
        if !self.resid.is_empty() {
            os.write_string(61, &self.resid)?;
        }
        if !self.ia_line.is_empty() {
            os.write_string(62, &self.ia_line)?;
        }
        if !self.balm_l2.is_empty() {
            os.write_string(63, &self.balm_l2)?;
        }
        if !self.ora_concat.is_empty() {
            os.write_string(64, &self.ora_concat)?;
        }
        if self.tot_balance != 0. {
            os.write_double(65, self.tot_balance)?;
        }
        for v in &self.cashflows {
            os.write_tag(66, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acc_no",
                    |m: &AccountWithCashflows| { &m.acc_no },
                    |m: &mut AccountWithCashflows| { &mut m.acc_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "branch_code",
                    |m: &AccountWithCashflows| { &m.branch_code },
                    |m: &mut AccountWithCashflows| { &mut m.branch_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cust_no",
                    |m: &AccountWithCashflows| { &m.cust_no },
                    |m: &mut AccountWithCashflows| { &mut m.cust_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ucc_id",
                    |m: &AccountWithCashflows| { &m.ucc_id },
                    |m: &mut AccountWithCashflows| { &mut m.ucc_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy",
                    |m: &AccountWithCashflows| { &m.ccy },
                    |m: &mut AccountWithCashflows| { &mut m.ccy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "product",
                    |m: &AccountWithCashflows| { &m.product },
                    |m: &mut AccountWithCashflows| { &mut m.product },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "acc_date",
                    |m: &AccountWithCashflows| { &m.acc_date },
                    |m: &mut AccountWithCashflows| { &mut m.acc_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "gl_code",
                    |m: &AccountWithCashflows| { &m.gl_code },
                    |m: &mut AccountWithCashflows| { &mut m.gl_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "glcode_compounded_portion",
                    |m: &AccountWithCashflows| { &m.glcode_compounded_portion },
                    |m: &mut AccountWithCashflows| { &mut m.glcode_compounded_portion },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "glcode_int_accrued",
                    |m: &AccountWithCashflows| { &m.glcode_int_accrued },
                    |m: &mut AccountWithCashflows| { &mut m.glcode_int_accrued },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "deposit_date",
                    |m: &AccountWithCashflows| { &m.deposit_date },
                    |m: &mut AccountWithCashflows| { &mut m.deposit_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "initial_deposit_amount",
                    |m: &AccountWithCashflows| { &m.initial_deposit_amount },
                    |m: &mut AccountWithCashflows| { &mut m.initial_deposit_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "initial_dep_amtlcy",
                    |m: &AccountWithCashflows| { &m.initial_dep_amtlcy },
                    |m: &mut AccountWithCashflows| { &mut m.initial_dep_amtlcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "current_outstanding_bal",
                    |m: &AccountWithCashflows| { &m.current_outstanding_bal },
                    |m: &mut AccountWithCashflows| { &mut m.current_outstanding_bal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "current_outstandingbal_lcy",
                    |m: &AccountWithCashflows| { &m.current_outstandingbal_lcy },
                    |m: &mut AccountWithCashflows| { &mut m.current_outstandingbal_lcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "cum_interest",
                    |m: &AccountWithCashflows| { &m.cum_interest },
                    |m: &mut AccountWithCashflows| { &mut m.cum_interest },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "cum_interest_amt_lcy",
                    |m: &AccountWithCashflows| { &m.cum_interest_amt_lcy },
                    |m: &mut AccountWithCashflows| { &mut m.cum_interest_amt_lcy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "maturity_date",
                    |m: &AccountWithCashflows| { &m.maturity_date },
                    |m: &mut AccountWithCashflows| { &mut m.maturity_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "interest_type",
                    |m: &AccountWithCashflows| { &m.interest_type },
                    |m: &mut AccountWithCashflows| { &mut m.interest_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "interst_acrrual_basis",
                    |m: &AccountWithCashflows| { &m.interst_acrrual_basis },
                    |m: &mut AccountWithCashflows| { &mut m.interst_acrrual_basis },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_accured_amount",
                    |m: &AccountWithCashflows| { &m.interest_accured_amount },
                    |m: &mut AccountWithCashflows| { &mut m.interest_accured_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "interest_compution_type",
                    |m: &AccountWithCashflows| { &m.interest_compution_type },
                    |m: &mut AccountWithCashflows| { &mut m.interest_compution_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "interest_rate",
                    |m: &AccountWithCashflows| { &m.interest_rate },
                    |m: &mut AccountWithCashflows| { &mut m.interest_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "interest_payment_freq",
                    |m: &AccountWithCashflows| { &m.interest_payment_freq },
                    |m: &mut AccountWithCashflows| { &mut m.interest_payment_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "next_int_payment_dt",
                    |m: &AccountWithCashflows| { &m.next_int_payment_dt },
                    |m: &mut AccountWithCashflows| { &mut m.next_int_payment_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "compounding_freq",
                    |m: &AccountWithCashflows| { &m.compounding_freq },
                    |m: &mut AccountWithCashflows| { &mut m.compounding_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "next_compounding_dt",
                    |m: &AccountWithCashflows| { &m.next_compounding_dt },
                    |m: &mut AccountWithCashflows| { &mut m.next_compounding_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "floating_rate_benchmark",
                    |m: &AccountWithCashflows| { &m.floating_rate_benchmark },
                    |m: &mut AccountWithCashflows| { &mut m.floating_rate_benchmark },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "spread",
                    |m: &AccountWithCashflows| { &m.spread },
                    |m: &mut AccountWithCashflows| { &mut m.spread },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "next_repricing_dt",
                    |m: &AccountWithCashflows| { &m.next_repricing_dt },
                    |m: &mut AccountWithCashflows| { &mut m.next_repricing_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "repricing_frequency",
                    |m: &AccountWithCashflows| { &m.repricing_frequency },
                    |m: &mut AccountWithCashflows| { &mut m.repricing_frequency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "non_withdrawable_flag",
                    |m: &AccountWithCashflows| { &m.non_withdrawable_flag },
                    |m: &mut AccountWithCashflows| { &mut m.non_withdrawable_flag },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "noticedays",
                    |m: &AccountWithCashflows| { &m.noticedays },
                    |m: &mut AccountWithCashflows| { &mut m.noticedays },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "lockin_till_dt",
                    |m: &AccountWithCashflows| { &m.lockin_till_dt },
                    |m: &mut AccountWithCashflows| { &mut m.lockin_till_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dep_pledged_against_loan_yn",
                    |m: &AccountWithCashflows| { &m.dep_pledged_against_loan_yn },
                    |m: &mut AccountWithCashflows| { &mut m.dep_pledged_against_loan_yn },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "customerconstitutioncode_1",
                    |m: &AccountWithCashflows| { &m.customerconstitutioncode_1 },
                    |m: &mut AccountWithCashflows| { &mut m.customerconstitutioncode_1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "customerconstitutioncode_2",
                    |m: &AccountWithCashflows| { &m.customerconstitutioncode_2 },
                    |m: &mut AccountWithCashflows| { &mut m.customerconstitutioncode_2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "customerconstitutioncode_3",
                    |m: &AccountWithCashflows| { &m.customerconstitutioncode_3 },
                    |m: &mut AccountWithCashflows| { &mut m.customerconstitutioncode_3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "customerconstitutioncode_4",
                    |m: &AccountWithCashflows| { &m.customerconstitutioncode_4 },
                    |m: &mut AccountWithCashflows| { &mut m.customerconstitutioncode_4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "customerconstitutioncode_5",
                    |m: &AccountWithCashflows| { &m.customerconstitutioncode_5 },
                    |m: &mut AccountWithCashflows| { &mut m.customerconstitutioncode_5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "period_months",
                    |m: &AccountWithCashflows| { &m.period_months },
                    |m: &mut AccountWithCashflows| { &mut m.period_months },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "period_days",
                    |m: &AccountWithCashflows| { &m.period_days },
                    |m: &mut AccountWithCashflows| { &mut m.period_days },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "intrest_craeted_upto",
                    |m: &AccountWithCashflows| { &m.intrest_craeted_upto },
                    |m: &mut AccountWithCashflows| { &mut m.intrest_craeted_upto },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "interest_accrued_upto",
                    |m: &AccountWithCashflows| { &m.interest_accrued_upto },
                    |m: &mut AccountWithCashflows| { &mut m.interest_accrued_upto },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "f_15hyear",
                    |m: &AccountWithCashflows| { &m.f_15hyear },
                    |m: &mut AccountWithCashflows| { &mut m.f_15hyear },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tds_rate",
                    |m: &AccountWithCashflows| { &m.tds_rate },
                    |m: &mut AccountWithCashflows| { &mut m.tds_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app1",
                    |m: &AccountWithCashflows| { &m.app1 },
                    |m: &mut AccountWithCashflows| { &mut m.app1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app2",
                    |m: &AccountWithCashflows| { &m.app2 },
                    |m: &mut AccountWithCashflows| { &mut m.app2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app3",
                    |m: &AccountWithCashflows| { &m.app3 },
                    |m: &mut AccountWithCashflows| { &mut m.app3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app4",
                    |m: &AccountWithCashflows| { &m.app4 },
                    |m: &mut AccountWithCashflows| { &mut m.app4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app5",
                    |m: &AccountWithCashflows| { &m.app5 },
                    |m: &mut AccountWithCashflows| { &mut m.app5 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app6",
                    |m: &AccountWithCashflows| { &m.app6 },
                    |m: &mut AccountWithCashflows| { &mut m.app6 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "app7",
                    |m: &AccountWithCashflows| { &m.app7 },
                    |m: &mut AccountWithCashflows| { &mut m.app7 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_principal_balance",
                    |m: &AccountWithCashflows| { &m.total_principal_balance },
                    |m: &mut AccountWithCashflows| { &mut m.total_principal_balance },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "alm_line",
                    |m: &AccountWithCashflows| { &m.alm_line },
                    |m: &mut AccountWithCashflows| { &mut m.alm_line },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "npa_class",
                    |m: &AccountWithCashflows| { &m.npa_class },
                    |m: &mut AccountWithCashflows| { &mut m.npa_class },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "common_cust_id",
                    |m: &AccountWithCashflows| { &m.common_cust_id },
                    |m: &mut AccountWithCashflows| { &mut m.common_cust_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "derived_next_reprice_date",
                    |m: &AccountWithCashflows| { &m.derived_next_reprice_date },
                    |m: &mut AccountWithCashflows| { &mut m.derived_next_reprice_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "risk_weight",
                    |m: &AccountWithCashflows| { &m.risk_weight },
                    |m: &mut AccountWithCashflows| { &mut m.risk_weight },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "restructure_flag",
                    |m: &AccountWithCashflows| { &m.restructure_flag },
                    |m: &mut AccountWithCashflows| { &mut m.restructure_flag },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "resid",
                    |m: &AccountWithCashflows| { &m.resid },
                    |m: &mut AccountWithCashflows| { &mut m.resid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ia_line",
                    |m: &AccountWithCashflows| { &m.ia_line },
                    |m: &mut AccountWithCashflows| { &mut m.ia_line },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "balm_l2",
                    |m: &AccountWithCashflows| { &m.balm_l2 },
                    |m: &mut AccountWithCashflows| { &mut m.balm_l2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ora_concat",
                    |m: &AccountWithCashflows| { &m.ora_concat },
                    |m: &mut AccountWithCashflows| { &mut m.ora_concat },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tot_balance",
                    |m: &AccountWithCashflows| { &m.tot_balance },
                    |m: &mut AccountWithCashflows| { &mut m.tot_balance },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_acc_no();
        self.clear_branch_code();
        self.clear_cust_no();
        self.clear_ucc_id();
        self.clear_ccy();
        self.clear_product();
        self.clear_acc_date();
        self.clear_gl_code();
        self.clear_glcode_compounded_portion();
        self.clear_glcode_int_accrued();
        self.clear_deposit_date();
        self.clear_initial_deposit_amount();
        self.clear_initial_dep_amtlcy();
        self.clear_current_outstanding_bal();
        self.clear_current_outstandingbal_lcy();
        self.clear_cum_interest();
        self.clear_cum_interest_amt_lcy();
        self.clear_maturity_date();
        self.clear_interest_type();
        self.clear_interst_acrrual_basis();
        self.clear_interest_accured_amount();
        self.clear_interest_compution_type();
        self.clear_interest_rate();
        self.clear_interest_payment_freq();
        self.clear_next_int_payment_dt();
        self.clear_compounding_freq();
        self.clear_next_compounding_dt();
        self.clear_floating_rate_benchmark();
        self.clear_spread();
        self.clear_next_repricing_dt();
        self.clear_repricing_frequency();
        self.clear_non_withdrawable_flag();
        self.clear_noticedays();
        self.clear_lockin_till_dt();
        self.clear_dep_pledged_against_loan_yn();
        self.clear_customerconstitutioncode_1();
        self.clear_customerconstitutioncode_2();
        self.clear_customerconstitutioncode_3();
        self.clear_customerconstitutioncode_4();
        self.clear_customerconstitutioncode_5();
        self.clear_period_months();
        self.clear_period_days();
        self.clear_intrest_craeted_upto();
        self.clear_interest_accrued_upto();
        self.clear_f_15hyear();
        self.clear_tds_rate();
        self.clear_app1();
        self.clear_app2();
        self.clear_app3();
        self.clear_app4();
        self.clear_app5();
        self.clear_app6();
        self.clear_app7();
        self.clear_total_principal_balance();
        self.clear_alm_line();
        self.clear_npa_class();
        self.clear_common_cust_id();
        self.clear_derived_next_reprice_date();
        self.clear_risk_weight();
        self.clear_restructure_flag();
        self.clear_resid();
        self.clear_ia_line();
        self.clear_balm_l2();
        self.clear_ora_concat();
        self.clear_tot_balance();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eproto/td.proto\"r\n\x08Cashflow\x12'\n\x0finterest_amount\x18\x01\
    \x20\x01(\x01R\x0einterestAmount\x12)\n\x10principal_amount\x18\x02\x20\
    \x01(\x01R\x0fprincipalAmount\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\
    \x04date\"\xc8\x14\n\x14AccountWithCashflows\x12\x15\n\x06acc_no\x18\x01\
    \x20\x01(\tR\x05accNo\x12\x1f\n\x0bbranch_code\x18\x02\x20\x01(\tR\nbran\
    chCode\x12\x17\n\x07cust_no\x18\x03\x20\x01(\tR\x06custNo\x12\x15\n\x06u\
    cc_id\x18\x04\x20\x01(\tR\x05uccId\x12\x10\n\x03ccy\x18\x05\x20\x01(\tR\
    \x03ccy\x12\x18\n\x07product\x18\x06\x20\x01(\tR\x07product\x12\x19\n\
    \x08acc_date\x18\x07\x20\x01(\x03R\x07accDate\x12\x17\n\x07gl_code\x18\
    \x08\x20\x01(\x05R\x06glCode\x12:\n\x19glcode_compounded_portion\x18\t\
    \x20\x01(\tR\x17glcodeCompoundedPortion\x12,\n\x12glcode_int_accrued\x18\
    \n\x20\x01(\tR\x10glcodeIntAccrued\x12!\n\x0cdeposit_date\x18\x0b\x20\
    \x01(\x03R\x0bdepositDate\x124\n\x16initial_deposit_amount\x18\x0c\x20\
    \x01(\x01R\x14initialDepositAmount\x12,\n\x12initial_dep_amtlcy\x18\r\
    \x20\x01(\x01R\x10initialDepAmtlcy\x126\n\x17current_outstanding_bal\x18\
    \x0e\x20\x01(\x01R\x15currentOutstandingBal\x12<\n\x1acurrent_outstandin\
    gbal_lcy\x18\x0f\x20\x01(\x01R\x18currentOutstandingbalLcy\x12!\n\x0ccum\
    _interest\x18\x10\x20\x01(\x01R\x0bcumInterest\x12/\n\x14cum_interest_am\
    t_lcy\x18\x11\x20\x01(\x01R\x11cumInterestAmtLcy\x12#\n\rmaturity_date\
    \x18\x12\x20\x01(\x03R\x0cmaturityDate\x12#\n\rinterest_type\x18\x13\x20\
    \x01(\tR\x0cinterestType\x122\n\x15interst_acrrual_basis\x18\x14\x20\x01\
    (\tR\x13interstAcrrualBasis\x126\n\x17interest_accured_amount\x18\x15\
    \x20\x01(\x01R\x15interestAccuredAmount\x126\n\x17interest_compution_typ\
    e\x18\x16\x20\x01(\tR\x15interestComputionType\x12#\n\rinterest_rate\x18\
    \x17\x20\x01(\x01R\x0cinterestRate\x122\n\x15interest_payment_freq\x18\
    \x18\x20\x01(\x03R\x13interestPaymentFreq\x12-\n\x13next_int_payment_dt\
    \x18\x19\x20\x01(\x03R\x10nextIntPaymentDt\x12)\n\x10compounding_freq\
    \x18\x1a\x20\x01(\x03R\x0fcompoundingFreq\x12.\n\x13next_compounding_dt\
    \x18\x1b\x20\x01(\x03R\x11nextCompoundingDt\x126\n\x17floating_rate_benc\
    hmark\x18\x1c\x20\x01(\x01R\x15floatingRateBenchmark\x12\x16\n\x06spread\
    \x18\x1d\x20\x01(\x01R\x06spread\x12*\n\x11next_repricing_dt\x18\x1e\x20\
    \x01(\x03R\x0fnextRepricingDt\x12/\n\x13repricing_frequency\x18\x1f\x20\
    \x01(\x03R\x12repricingFrequency\x122\n\x15non_withdrawable_flag\x18\x20\
    \x20\x01(\tR\x13nonWithdrawableFlag\x12\x1e\n\nnoticedays\x18!\x20\x01(\
    \x03R\nnoticedays\x12$\n\x0elockin_till_dt\x18\"\x20\x01(\x03R\x0clockin\
    TillDt\x12<\n\x1bdep_pledged_against_loan_yn\x18#\x20\x01(\tR\x17depPled\
    gedAgainstLoanYn\x12=\n\x1acustomerconstitutioncode_1\x18$\x20\x01(\tR\
    \x19customerconstitutioncode1\x12=\n\x1acustomerconstitutioncode_2\x18%\
    \x20\x01(\tR\x19customerconstitutioncode2\x12=\n\x1acustomerconstitution\
    code_3\x18&\x20\x01(\tR\x19customerconstitutioncode3\x12=\n\x1acustomerc\
    onstitutioncode_4\x18'\x20\x01(\tR\x19customerconstitutioncode4\x12=\n\
    \x1acustomerconstitutioncode_5\x18(\x20\x01(\tR\x19customerconstitutionc\
    ode5\x12#\n\rperiod_months\x18)\x20\x01(\x03R\x0cperiodMonths\x12\x1f\n\
    \x0bperiod_days\x18*\x20\x01(\x03R\nperiodDays\x120\n\x14intrest_craeted\
    _upto\x18+\x20\x01(\x03R\x12intrestCraetedUpto\x122\n\x15interest_accrue\
    d_upto\x18,\x20\x01(\x03R\x13interestAccruedUpto\x12\x1b\n\tf_15hyear\
    \x18-\x20\x01(\tR\x08f15hyear\x12\x19\n\x08tds_rate\x18.\x20\x01(\x01R\
    \x07tdsRate\x12\x12\n\x04app1\x18/\x20\x01(\tR\x04app1\x12\x12\n\x04app2\
    \x180\x20\x01(\tR\x04app2\x12\x12\n\x04app3\x181\x20\x01(\tR\x04app3\x12\
    \x12\n\x04app4\x182\x20\x01(\tR\x04app4\x12\x12\n\x04app5\x183\x20\x01(\
    \tR\x04app5\x12\x12\n\x04app6\x184\x20\x01(\tR\x04app6\x12\x12\n\x04app7\
    \x185\x20\x01(\tR\x04app7\x126\n\x17total_principal_balance\x186\x20\x01\
    (\x01R\x15totalPrincipalBalance\x12\x19\n\x08alm_line\x187\x20\x01(\tR\
    \x07almLine\x12\x1b\n\tnpa_class\x188\x20\x01(\tR\x08npaClass\x12$\n\x0e\
    common_cust_id\x189\x20\x01(\tR\x0ccommonCustId\x129\n\x19derived_next_r\
    eprice_date\x18:\x20\x01(\x03R\x16derivedNextRepriceDate\x12\x1f\n\x0bri\
    sk_weight\x18;\x20\x01(\tR\nriskWeight\x12)\n\x10restructure_flag\x18<\
    \x20\x01(\tR\x0frestructureFlag\x12\x14\n\x05resid\x18=\x20\x01(\tR\x05r\
    esid\x12\x17\n\x07ia_line\x18>\x20\x01(\tR\x06iaLine\x12\x17\n\x07balm_l\
    2\x18?\x20\x01(\tR\x06balmL2\x12\x1d\n\nora_concat\x18@\x20\x01(\tR\tora\
    Concat\x12\x1f\n\x0btot_balance\x18A\x20\x01(\x01R\ntotBalance\x12'\n\tc\
    ashflows\x18B\x20\x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
