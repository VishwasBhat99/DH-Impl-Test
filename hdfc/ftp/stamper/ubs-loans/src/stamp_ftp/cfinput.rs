use sdb_io;
use serde_json;
use std::io::Read;

#[derive(Serialize, Deserialize, Debug)]
pub struct AccFieldNames {
    pub cust_no: String,
    pub reference: String,
    pub cust_name: String,
    pub branch_cd: String,
    pub norm_int_rt: String,
    pub acurl_freq: String,
    pub book_dt: String,
    pub val_dt: String,
    pub mat_dt: String,
    pub user_def_stats: String,
    pub prod_cd: String,
    pub gl: String,
    pub curr: String,
    pub prin_ost_bal: String,
    pub spread: String,
    pub compmis2: String,
    pub rt_flag_new: String,
    pub rt_cd_new: String,
    pub division: String,
    pub alm_line: String,
    pub ia_llg: String,
    pub balm_llg: String,
    pub repricing_freq: String,
    pub lst_repricing_dt: String,
    pub nxt_repricing_dt: String,
    pub int_basis: String,
    pub cust_typ: String,
    pub npa_typ: String,
    pub bmid: String,
    pub compmis1: String,
    pub compmis3: String,
    pub org_tenor: String,
    pub resid_tenor: String,
    pub def_ftp_flag: String,
    pub concat: String,
    pub cntr_party: String,
    pub lcy_amount: String,
    pub bdp_division: String,
    pub bdp_coa: String,
    pub concat_two_point: String,
    pub psl_category: String,
    pub retail_wholesale: String,
    pub total_interest_amount: String,
    pub total_principal_amount: String,
    pub call_dt: String,
    pub put_dt: String,
    pub nxt_reprice_dt_udf: String,
    pub lst_reprice_dt_udf: String,
    pub benchmark: String,
    pub benchmark_manual: String,
    pub benchmark_spread: String,
    pub gl_description: String,
    pub prod_desc: String,
    pub der_int_rate: String,
    pub yld_grp_al: String,
    pub frequency: String,
    pub old_rt_typ: String,
    pub der_rate_flag: String,
    pub source_file_name: String,
    pub cashflows: String,
}

impl AccFieldNames {
    pub fn new_from_path(_path: &str) -> AccFieldNames {
        let mut file = sdb_io::open_file_read(_path).expect("Unable to open Required-Fields-File");
        let mut buf = String::new();
        file.read_to_string(&mut buf)
            .expect("Cannot read input as string from Req-Fields File");
        let req_fields: AccFieldNames =
            serde_json::from_str(&buf[..]).expect("Required-Fields-File was not well-formatted");
        req_fields
    }

    pub fn get_input_fields_names(_path: &str) -> AccFieldNames {
        let req_fields = Self::new_from_path(_path);
        AccFieldNames {
            cust_no: req_fields.cust_no.to_string(),
            reference: req_fields.reference.to_string(),
            cust_name: req_fields.cust_name.to_string(),
            branch_cd: req_fields.branch_cd.to_string(),
            norm_int_rt: req_fields.norm_int_rt.to_string(),
            acurl_freq: req_fields.acurl_freq.to_string(),
            book_dt: req_fields.book_dt.to_string(),
            val_dt: req_fields.val_dt.to_string(),
            mat_dt: req_fields.mat_dt.to_string(),
            user_def_stats: req_fields.user_def_stats.to_string(),
            prod_cd: req_fields.prod_cd.to_string(),
            gl: req_fields.gl.to_string(),
            curr: req_fields.curr.to_string(),
            prin_ost_bal: req_fields.prin_ost_bal.to_string(),
            spread: req_fields.spread.to_string(),
            compmis2: req_fields.compmis2.to_string(),
            rt_flag_new: req_fields.rt_flag_new.to_string(),
            rt_cd_new: req_fields.rt_cd_new.to_string(),
            division: req_fields.division.to_string(),
            alm_line: req_fields.alm_line.to_string(),
            ia_llg: req_fields.ia_llg.to_string(),
            balm_llg: req_fields.balm_llg.to_string(),
            repricing_freq: req_fields.repricing_freq.to_string(),
            lst_repricing_dt: req_fields.lst_repricing_dt.to_string(),
            nxt_repricing_dt: req_fields.nxt_repricing_dt.to_string(),
            int_basis: req_fields.int_basis.to_string(),
            cust_typ: req_fields.cust_typ.to_string(),
            npa_typ: req_fields.npa_typ.to_string(),
            bmid: req_fields.bmid.to_string(),
            compmis1: req_fields.compmis1.to_string(),
            compmis3: req_fields.compmis3.to_string(),
            org_tenor: req_fields.org_tenor.to_string(),
            resid_tenor: req_fields.resid_tenor.to_string(),
            def_ftp_flag: req_fields.def_ftp_flag.to_string(),
            concat: req_fields.concat.to_string(),
            cntr_party: req_fields.cntr_party.to_string(),
            lcy_amount: req_fields.lcy_amount.to_string(),
            bdp_coa: req_fields.bdp_coa.to_string(),
            bdp_division: req_fields.bdp_division.to_string(),
            psl_category: req_fields.psl_category.to_string(),
            concat_two_point: req_fields.concat_two_point.to_string(),
            retail_wholesale: req_fields.retail_wholesale.to_string(),
            total_interest_amount: req_fields.total_interest_amount.to_string(),
            total_principal_amount: req_fields.total_principal_amount.to_string(),
            call_dt: req_fields.call_dt.to_string(),
            put_dt: req_fields.put_dt.to_string(),
            nxt_reprice_dt_udf: req_fields.nxt_reprice_dt_udf.to_string(),
            lst_reprice_dt_udf: req_fields.lst_reprice_dt_udf.to_string(),
            benchmark: req_fields.benchmark.to_string(),
            benchmark_manual: req_fields.benchmark_manual.to_string(),
            benchmark_spread: req_fields.benchmark_spread.to_string(),
            gl_description: req_fields.gl_description.to_string(),
            prod_desc: req_fields.prod_desc.to_string(),
            der_int_rate: req_fields.der_int_rate.to_string(),
            yld_grp_al: req_fields.yld_grp_al.to_string(),
            frequency: req_fields.frequency.to_string(),
            old_rt_typ: req_fields.old_rt_typ.to_string(),
            der_rate_flag: req_fields.der_rate_flag.to_string(),
            source_file_name: req_fields.source_file_name.to_string(),
            cashflows: req_fields.cashflows.to_string(),
        }
    }
}
