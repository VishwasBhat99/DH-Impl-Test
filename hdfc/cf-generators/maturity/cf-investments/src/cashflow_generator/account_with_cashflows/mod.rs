// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double prin_amt = 2;

    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_int_amt();
        self.clear_prin_amt();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub deal_no: ::std::string::String,
    pub short_name: ::std::string::String,
    pub nxt_rep_dt: i64,
    pub deal_dt: i64,
    pub portfolio: ::std::string::String,
    pub deal_rt: f64,
    pub org_face_val: i64,
    pub os_face_val: i64,
    pub org_cst_val: f64,
    pub acrd_int: f64,
    pub book_yield: f64,
    pub int_basis: i64,
    pub avg_os_vd: f64,
    pub avg_os_dd: f64,
    pub os_cost_val: f64,
    pub org_bal: f64,
    pub coup_rt: f64,
    pub nxt_coup_dt: i64,
    pub gl: i64,
    pub mat_dt: i64,
    pub secu_desc: ::std::string::String,
    pub prod_desc: ::std::string::String,
    pub prod_cd: ::std::string::String,
    pub lst_coup_dt: i64,
    pub call_dt1: i64,
    pub coup_freq: ::std::string::String,
    pub val_dt: i64,
    pub acrl_freq: ::std::string::String,
    pub lst_rep_dt: i64,
    pub lst_put_dt: i64,
    pub inst: ::std::string::String,
    pub org_term: i64,
    pub acrl_basis: ::std::string::String,
    pub div: ::std::string::String,
    pub alm_line: ::std::string::String,
    pub cmpnd_freq: i64,
    pub nxt_cmpnd_dt: i64,
    pub rt_chng_freq: i64,
    pub rt_flg: ::std::string::String,
    pub rep_idx: ::std::string::String,
    pub nxt_pay_dt: i64,
    pub prev_rep_dt: i64,
    pub int_pay_freq: i64,
    pub call_dt: i64,
    pub put_dt: i64,
    pub int_rt: f64,
    pub port_typ: ::std::string::String,
    pub total_interest_amount: f64,
    pub total_principal_amount: f64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string deal_no = 1;

    pub fn clear_deal_no(&mut self) {
        self.deal_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_deal_no(&mut self, v: ::std::string::String) {
        self.deal_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deal_no(&mut self) -> &mut ::std::string::String {
        &mut self.deal_no
    }

    // Take field
    pub fn take_deal_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deal_no, ::std::string::String::new())
    }

    pub fn get_deal_no(&self) -> &str {
        &self.deal_no
    }

    // string short_name = 2;

    pub fn clear_short_name(&mut self) {
        self.short_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_short_name(&mut self, v: ::std::string::String) {
        self.short_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_short_name(&mut self) -> &mut ::std::string::String {
        &mut self.short_name
    }

    // Take field
    pub fn take_short_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.short_name, ::std::string::String::new())
    }

    pub fn get_short_name(&self) -> &str {
        &self.short_name
    }

    // int64 nxt_rep_dt = 3;

    pub fn clear_nxt_rep_dt(&mut self) {
        self.nxt_rep_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_rep_dt(&mut self, v: i64) {
        self.nxt_rep_dt = v;
    }

    pub fn get_nxt_rep_dt(&self) -> i64 {
        self.nxt_rep_dt
    }

    // int64 deal_dt = 4;

    pub fn clear_deal_dt(&mut self) {
        self.deal_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_deal_dt(&mut self, v: i64) {
        self.deal_dt = v;
    }

    pub fn get_deal_dt(&self) -> i64 {
        self.deal_dt
    }

    // string portfolio = 5;

    pub fn clear_portfolio(&mut self) {
        self.portfolio.clear();
    }

    // Param is passed by value, moved
    pub fn set_portfolio(&mut self, v: ::std::string::String) {
        self.portfolio = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_portfolio(&mut self) -> &mut ::std::string::String {
        &mut self.portfolio
    }

    // Take field
    pub fn take_portfolio(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.portfolio, ::std::string::String::new())
    }

    pub fn get_portfolio(&self) -> &str {
        &self.portfolio
    }

    // double deal_rt = 6;

    pub fn clear_deal_rt(&mut self) {
        self.deal_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_deal_rt(&mut self, v: f64) {
        self.deal_rt = v;
    }

    pub fn get_deal_rt(&self) -> f64 {
        self.deal_rt
    }

    // int64 org_face_val = 7;

    pub fn clear_org_face_val(&mut self) {
        self.org_face_val = 0;
    }

    // Param is passed by value, moved
    pub fn set_org_face_val(&mut self, v: i64) {
        self.org_face_val = v;
    }

    pub fn get_org_face_val(&self) -> i64 {
        self.org_face_val
    }

    // int64 os_face_val = 8;

    pub fn clear_os_face_val(&mut self) {
        self.os_face_val = 0;
    }

    // Param is passed by value, moved
    pub fn set_os_face_val(&mut self, v: i64) {
        self.os_face_val = v;
    }

    pub fn get_os_face_val(&self) -> i64 {
        self.os_face_val
    }

    // double org_cst_val = 9;

    pub fn clear_org_cst_val(&mut self) {
        self.org_cst_val = 0.;
    }

    // Param is passed by value, moved
    pub fn set_org_cst_val(&mut self, v: f64) {
        self.org_cst_val = v;
    }

    pub fn get_org_cst_val(&self) -> f64 {
        self.org_cst_val
    }

    // double acrd_int = 10;

    pub fn clear_acrd_int(&mut self) {
        self.acrd_int = 0.;
    }

    // Param is passed by value, moved
    pub fn set_acrd_int(&mut self, v: f64) {
        self.acrd_int = v;
    }

    pub fn get_acrd_int(&self) -> f64 {
        self.acrd_int
    }

    // double book_yield = 11;

    pub fn clear_book_yield(&mut self) {
        self.book_yield = 0.;
    }

    // Param is passed by value, moved
    pub fn set_book_yield(&mut self, v: f64) {
        self.book_yield = v;
    }

    pub fn get_book_yield(&self) -> f64 {
        self.book_yield
    }

    // int64 int_basis = 12;

    pub fn clear_int_basis(&mut self) {
        self.int_basis = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_basis(&mut self, v: i64) {
        self.int_basis = v;
    }

    pub fn get_int_basis(&self) -> i64 {
        self.int_basis
    }

    // double avg_os_vd = 13;

    pub fn clear_avg_os_vd(&mut self) {
        self.avg_os_vd = 0.;
    }

    // Param is passed by value, moved
    pub fn set_avg_os_vd(&mut self, v: f64) {
        self.avg_os_vd = v;
    }

    pub fn get_avg_os_vd(&self) -> f64 {
        self.avg_os_vd
    }

    // double avg_os_dd = 14;

    pub fn clear_avg_os_dd(&mut self) {
        self.avg_os_dd = 0.;
    }

    // Param is passed by value, moved
    pub fn set_avg_os_dd(&mut self, v: f64) {
        self.avg_os_dd = v;
    }

    pub fn get_avg_os_dd(&self) -> f64 {
        self.avg_os_dd
    }

    // double os_cost_val = 15;

    pub fn clear_os_cost_val(&mut self) {
        self.os_cost_val = 0.;
    }

    // Param is passed by value, moved
    pub fn set_os_cost_val(&mut self, v: f64) {
        self.os_cost_val = v;
    }

    pub fn get_os_cost_val(&self) -> f64 {
        self.os_cost_val
    }

    // double org_bal = 16;

    pub fn clear_org_bal(&mut self) {
        self.org_bal = 0.;
    }

    // Param is passed by value, moved
    pub fn set_org_bal(&mut self, v: f64) {
        self.org_bal = v;
    }

    pub fn get_org_bal(&self) -> f64 {
        self.org_bal
    }

    // double coup_rt = 17;

    pub fn clear_coup_rt(&mut self) {
        self.coup_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_coup_rt(&mut self, v: f64) {
        self.coup_rt = v;
    }

    pub fn get_coup_rt(&self) -> f64 {
        self.coup_rt
    }

    // int64 nxt_coup_dt = 18;

    pub fn clear_nxt_coup_dt(&mut self) {
        self.nxt_coup_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_coup_dt(&mut self, v: i64) {
        self.nxt_coup_dt = v;
    }

    pub fn get_nxt_coup_dt(&self) -> i64 {
        self.nxt_coup_dt
    }

    // int64 gl = 19;

    pub fn clear_gl(&mut self) {
        self.gl = 0;
    }

    // Param is passed by value, moved
    pub fn set_gl(&mut self, v: i64) {
        self.gl = v;
    }

    pub fn get_gl(&self) -> i64 {
        self.gl
    }

    // int64 mat_dt = 20;

    pub fn clear_mat_dt(&mut self) {
        self.mat_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_mat_dt(&mut self, v: i64) {
        self.mat_dt = v;
    }

    pub fn get_mat_dt(&self) -> i64 {
        self.mat_dt
    }

    // string secu_desc = 21;

    pub fn clear_secu_desc(&mut self) {
        self.secu_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_secu_desc(&mut self, v: ::std::string::String) {
        self.secu_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secu_desc(&mut self) -> &mut ::std::string::String {
        &mut self.secu_desc
    }

    // Take field
    pub fn take_secu_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.secu_desc, ::std::string::String::new())
    }

    pub fn get_secu_desc(&self) -> &str {
        &self.secu_desc
    }

    // string prod_desc = 22;

    pub fn clear_prod_desc(&mut self) {
        self.prod_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_desc(&mut self, v: ::std::string::String) {
        self.prod_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_desc(&mut self) -> &mut ::std::string::String {
        &mut self.prod_desc
    }

    // Take field
    pub fn take_prod_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_desc, ::std::string::String::new())
    }

    pub fn get_prod_desc(&self) -> &str {
        &self.prod_desc
    }

    // string prod_cd = 23;

    pub fn clear_prod_cd(&mut self) {
        self.prod_cd.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_cd(&mut self, v: ::std::string::String) {
        self.prod_cd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_cd(&mut self) -> &mut ::std::string::String {
        &mut self.prod_cd
    }

    // Take field
    pub fn take_prod_cd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_cd, ::std::string::String::new())
    }

    pub fn get_prod_cd(&self) -> &str {
        &self.prod_cd
    }

    // int64 lst_coup_dt = 24;

    pub fn clear_lst_coup_dt(&mut self) {
        self.lst_coup_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_lst_coup_dt(&mut self, v: i64) {
        self.lst_coup_dt = v;
    }

    pub fn get_lst_coup_dt(&self) -> i64 {
        self.lst_coup_dt
    }

    // int64 call_dt1 = 25;

    pub fn clear_call_dt1(&mut self) {
        self.call_dt1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_call_dt1(&mut self, v: i64) {
        self.call_dt1 = v;
    }

    pub fn get_call_dt1(&self) -> i64 {
        self.call_dt1
    }

    // string coup_freq = 26;

    pub fn clear_coup_freq(&mut self) {
        self.coup_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_coup_freq(&mut self, v: ::std::string::String) {
        self.coup_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coup_freq(&mut self) -> &mut ::std::string::String {
        &mut self.coup_freq
    }

    // Take field
    pub fn take_coup_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coup_freq, ::std::string::String::new())
    }

    pub fn get_coup_freq(&self) -> &str {
        &self.coup_freq
    }

    // int64 val_dt = 27;

    pub fn clear_val_dt(&mut self) {
        self.val_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_val_dt(&mut self, v: i64) {
        self.val_dt = v;
    }

    pub fn get_val_dt(&self) -> i64 {
        self.val_dt
    }

    // string acrl_freq = 28;

    pub fn clear_acrl_freq(&mut self) {
        self.acrl_freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_acrl_freq(&mut self, v: ::std::string::String) {
        self.acrl_freq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acrl_freq(&mut self) -> &mut ::std::string::String {
        &mut self.acrl_freq
    }

    // Take field
    pub fn take_acrl_freq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acrl_freq, ::std::string::String::new())
    }

    pub fn get_acrl_freq(&self) -> &str {
        &self.acrl_freq
    }

    // int64 lst_rep_dt = 29;

    pub fn clear_lst_rep_dt(&mut self) {
        self.lst_rep_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_lst_rep_dt(&mut self, v: i64) {
        self.lst_rep_dt = v;
    }

    pub fn get_lst_rep_dt(&self) -> i64 {
        self.lst_rep_dt
    }

    // int64 lst_put_dt = 30;

    pub fn clear_lst_put_dt(&mut self) {
        self.lst_put_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_lst_put_dt(&mut self, v: i64) {
        self.lst_put_dt = v;
    }

    pub fn get_lst_put_dt(&self) -> i64 {
        self.lst_put_dt
    }

    // string inst = 31;

    pub fn clear_inst(&mut self) {
        self.inst.clear();
    }

    // Param is passed by value, moved
    pub fn set_inst(&mut self, v: ::std::string::String) {
        self.inst = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inst(&mut self) -> &mut ::std::string::String {
        &mut self.inst
    }

    // Take field
    pub fn take_inst(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.inst, ::std::string::String::new())
    }

    pub fn get_inst(&self) -> &str {
        &self.inst
    }

    // int64 org_term = 32;

    pub fn clear_org_term(&mut self) {
        self.org_term = 0;
    }

    // Param is passed by value, moved
    pub fn set_org_term(&mut self, v: i64) {
        self.org_term = v;
    }

    pub fn get_org_term(&self) -> i64 {
        self.org_term
    }

    // string acrl_basis = 33;

    pub fn clear_acrl_basis(&mut self) {
        self.acrl_basis.clear();
    }

    // Param is passed by value, moved
    pub fn set_acrl_basis(&mut self, v: ::std::string::String) {
        self.acrl_basis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acrl_basis(&mut self) -> &mut ::std::string::String {
        &mut self.acrl_basis
    }

    // Take field
    pub fn take_acrl_basis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acrl_basis, ::std::string::String::new())
    }

    pub fn get_acrl_basis(&self) -> &str {
        &self.acrl_basis
    }

    // string div = 34;

    pub fn clear_div(&mut self) {
        self.div.clear();
    }

    // Param is passed by value, moved
    pub fn set_div(&mut self, v: ::std::string::String) {
        self.div = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_div(&mut self) -> &mut ::std::string::String {
        &mut self.div
    }

    // Take field
    pub fn take_div(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.div, ::std::string::String::new())
    }

    pub fn get_div(&self) -> &str {
        &self.div
    }

    // string alm_line = 35;

    pub fn clear_alm_line(&mut self) {
        self.alm_line.clear();
    }

    // Param is passed by value, moved
    pub fn set_alm_line(&mut self, v: ::std::string::String) {
        self.alm_line = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alm_line(&mut self) -> &mut ::std::string::String {
        &mut self.alm_line
    }

    // Take field
    pub fn take_alm_line(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alm_line, ::std::string::String::new())
    }

    pub fn get_alm_line(&self) -> &str {
        &self.alm_line
    }

    // int64 cmpnd_freq = 36;

    pub fn clear_cmpnd_freq(&mut self) {
        self.cmpnd_freq = 0;
    }

    // Param is passed by value, moved
    pub fn set_cmpnd_freq(&mut self, v: i64) {
        self.cmpnd_freq = v;
    }

    pub fn get_cmpnd_freq(&self) -> i64 {
        self.cmpnd_freq
    }

    // int64 nxt_cmpnd_dt = 37;

    pub fn clear_nxt_cmpnd_dt(&mut self) {
        self.nxt_cmpnd_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_cmpnd_dt(&mut self, v: i64) {
        self.nxt_cmpnd_dt = v;
    }

    pub fn get_nxt_cmpnd_dt(&self) -> i64 {
        self.nxt_cmpnd_dt
    }

    // int64 rt_chng_freq = 38;

    pub fn clear_rt_chng_freq(&mut self) {
        self.rt_chng_freq = 0;
    }

    // Param is passed by value, moved
    pub fn set_rt_chng_freq(&mut self, v: i64) {
        self.rt_chng_freq = v;
    }

    pub fn get_rt_chng_freq(&self) -> i64 {
        self.rt_chng_freq
    }

    // string rt_flg = 39;

    pub fn clear_rt_flg(&mut self) {
        self.rt_flg.clear();
    }

    // Param is passed by value, moved
    pub fn set_rt_flg(&mut self, v: ::std::string::String) {
        self.rt_flg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rt_flg(&mut self) -> &mut ::std::string::String {
        &mut self.rt_flg
    }

    // Take field
    pub fn take_rt_flg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rt_flg, ::std::string::String::new())
    }

    pub fn get_rt_flg(&self) -> &str {
        &self.rt_flg
    }

    // string rep_idx = 40;

    pub fn clear_rep_idx(&mut self) {
        self.rep_idx.clear();
    }

    // Param is passed by value, moved
    pub fn set_rep_idx(&mut self, v: ::std::string::String) {
        self.rep_idx = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rep_idx(&mut self) -> &mut ::std::string::String {
        &mut self.rep_idx
    }

    // Take field
    pub fn take_rep_idx(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rep_idx, ::std::string::String::new())
    }

    pub fn get_rep_idx(&self) -> &str {
        &self.rep_idx
    }

    // int64 nxt_pay_dt = 41;

    pub fn clear_nxt_pay_dt(&mut self) {
        self.nxt_pay_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_pay_dt(&mut self, v: i64) {
        self.nxt_pay_dt = v;
    }

    pub fn get_nxt_pay_dt(&self) -> i64 {
        self.nxt_pay_dt
    }

    // int64 prev_rep_dt = 42;

    pub fn clear_prev_rep_dt(&mut self) {
        self.prev_rep_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_prev_rep_dt(&mut self, v: i64) {
        self.prev_rep_dt = v;
    }

    pub fn get_prev_rep_dt(&self) -> i64 {
        self.prev_rep_dt
    }

    // int64 int_pay_freq = 43;

    pub fn clear_int_pay_freq(&mut self) {
        self.int_pay_freq = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_pay_freq(&mut self, v: i64) {
        self.int_pay_freq = v;
    }

    pub fn get_int_pay_freq(&self) -> i64 {
        self.int_pay_freq
    }

    // int64 call_dt = 44;

    pub fn clear_call_dt(&mut self) {
        self.call_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_call_dt(&mut self, v: i64) {
        self.call_dt = v;
    }

    pub fn get_call_dt(&self) -> i64 {
        self.call_dt
    }

    // int64 put_dt = 45;

    pub fn clear_put_dt(&mut self) {
        self.put_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_put_dt(&mut self, v: i64) {
        self.put_dt = v;
    }

    pub fn get_put_dt(&self) -> i64 {
        self.put_dt
    }

    // double int_rt = 46;

    pub fn clear_int_rt(&mut self) {
        self.int_rt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_rt(&mut self, v: f64) {
        self.int_rt = v;
    }

    pub fn get_int_rt(&self) -> f64 {
        self.int_rt
    }

    // string port_typ = 47;

    pub fn clear_port_typ(&mut self) {
        self.port_typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_port_typ(&mut self, v: ::std::string::String) {
        self.port_typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_port_typ(&mut self) -> &mut ::std::string::String {
        &mut self.port_typ
    }

    // Take field
    pub fn take_port_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.port_typ, ::std::string::String::new())
    }

    pub fn get_port_typ(&self) -> &str {
        &self.port_typ
    }

    // double total_interest_amount = 48;

    pub fn clear_total_interest_amount(&mut self) {
        self.total_interest_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_interest_amount(&mut self, v: f64) {
        self.total_interest_amount = v;
    }

    pub fn get_total_interest_amount(&self) -> f64 {
        self.total_interest_amount
    }

    // double total_principal_amount = 49;

    pub fn clear_total_principal_amount(&mut self) {
        self.total_principal_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_principal_amount(&mut self, v: f64) {
        self.total_principal_amount = v;
    }

    pub fn get_total_principal_amount(&self) -> f64 {
        self.total_principal_amount
    }

    // repeated .Cashflow cashflows = 50;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deal_no)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.short_name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_rep_dt = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deal_dt = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.portfolio)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.deal_rt = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.org_face_val = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.os_face_val = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.org_cst_val = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.acrd_int = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.book_yield = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int_basis = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.avg_os_vd = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.avg_os_dd = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.os_cost_val = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.org_bal = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.coup_rt = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_coup_dt = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.gl = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mat_dt = tmp;
                },
                21 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.secu_desc)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_desc)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_cd)?;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lst_coup_dt = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.call_dt1 = tmp;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coup_freq)?;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.val_dt = tmp;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acrl_freq)?;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lst_rep_dt = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lst_put_dt = tmp;
                },
                31 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.inst)?;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.org_term = tmp;
                },
                33 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acrl_basis)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.div)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alm_line)?;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cmpnd_freq = tmp;
                },
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_cmpnd_dt = tmp;
                },
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rt_chng_freq = tmp;
                },
                39 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rt_flg)?;
                },
                40 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rep_idx)?;
                },
                41 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_pay_dt = tmp;
                },
                42 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.prev_rep_dt = tmp;
                },
                43 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int_pay_freq = tmp;
                },
                44 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.call_dt = tmp;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.put_dt = tmp;
                },
                46 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_rt = tmp;
                },
                47 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.port_typ)?;
                },
                48 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_interest_amount = tmp;
                },
                49 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_principal_amount = tmp;
                },
                50 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.deal_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.deal_no);
        }
        if !self.short_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.short_name);
        }
        if self.nxt_rep_dt != 0 {
            my_size += ::protobuf::rt::value_size(3, self.nxt_rep_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.deal_dt != 0 {
            my_size += ::protobuf::rt::value_size(4, self.deal_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.portfolio.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.portfolio);
        }
        if self.deal_rt != 0. {
            my_size += 9;
        }
        if self.org_face_val != 0 {
            my_size += ::protobuf::rt::value_size(7, self.org_face_val, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.os_face_val != 0 {
            my_size += ::protobuf::rt::value_size(8, self.os_face_val, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.org_cst_val != 0. {
            my_size += 9;
        }
        if self.acrd_int != 0. {
            my_size += 9;
        }
        if self.book_yield != 0. {
            my_size += 9;
        }
        if self.int_basis != 0 {
            my_size += ::protobuf::rt::value_size(12, self.int_basis, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.avg_os_vd != 0. {
            my_size += 9;
        }
        if self.avg_os_dd != 0. {
            my_size += 9;
        }
        if self.os_cost_val != 0. {
            my_size += 9;
        }
        if self.org_bal != 0. {
            my_size += 10;
        }
        if self.coup_rt != 0. {
            my_size += 10;
        }
        if self.nxt_coup_dt != 0 {
            my_size += ::protobuf::rt::value_size(18, self.nxt_coup_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gl != 0 {
            my_size += ::protobuf::rt::value_size(19, self.gl, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mat_dt != 0 {
            my_size += ::protobuf::rt::value_size(20, self.mat_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.secu_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(21, &self.secu_desc);
        }
        if !self.prod_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.prod_desc);
        }
        if !self.prod_cd.is_empty() {
            my_size += ::protobuf::rt::string_size(23, &self.prod_cd);
        }
        if self.lst_coup_dt != 0 {
            my_size += ::protobuf::rt::value_size(24, self.lst_coup_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.call_dt1 != 0 {
            my_size += ::protobuf::rt::value_size(25, self.call_dt1, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.coup_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.coup_freq);
        }
        if self.val_dt != 0 {
            my_size += ::protobuf::rt::value_size(27, self.val_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.acrl_freq.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.acrl_freq);
        }
        if self.lst_rep_dt != 0 {
            my_size += ::protobuf::rt::value_size(29, self.lst_rep_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lst_put_dt != 0 {
            my_size += ::protobuf::rt::value_size(30, self.lst_put_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.inst.is_empty() {
            my_size += ::protobuf::rt::string_size(31, &self.inst);
        }
        if self.org_term != 0 {
            my_size += ::protobuf::rt::value_size(32, self.org_term, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.acrl_basis.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.acrl_basis);
        }
        if !self.div.is_empty() {
            my_size += ::protobuf::rt::string_size(34, &self.div);
        }
        if !self.alm_line.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.alm_line);
        }
        if self.cmpnd_freq != 0 {
            my_size += ::protobuf::rt::value_size(36, self.cmpnd_freq, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.nxt_cmpnd_dt != 0 {
            my_size += ::protobuf::rt::value_size(37, self.nxt_cmpnd_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rt_chng_freq != 0 {
            my_size += ::protobuf::rt::value_size(38, self.rt_chng_freq, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.rt_flg.is_empty() {
            my_size += ::protobuf::rt::string_size(39, &self.rt_flg);
        }
        if !self.rep_idx.is_empty() {
            my_size += ::protobuf::rt::string_size(40, &self.rep_idx);
        }
        if self.nxt_pay_dt != 0 {
            my_size += ::protobuf::rt::value_size(41, self.nxt_pay_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prev_rep_dt != 0 {
            my_size += ::protobuf::rt::value_size(42, self.prev_rep_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_pay_freq != 0 {
            my_size += ::protobuf::rt::value_size(43, self.int_pay_freq, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.call_dt != 0 {
            my_size += ::protobuf::rt::value_size(44, self.call_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.put_dt != 0 {
            my_size += ::protobuf::rt::value_size(45, self.put_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.int_rt != 0. {
            my_size += 10;
        }
        if !self.port_typ.is_empty() {
            my_size += ::protobuf::rt::string_size(47, &self.port_typ);
        }
        if self.total_interest_amount != 0. {
            my_size += 10;
        }
        if self.total_principal_amount != 0. {
            my_size += 10;
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.deal_no.is_empty() {
            os.write_string(1, &self.deal_no)?;
        }
        if !self.short_name.is_empty() {
            os.write_string(2, &self.short_name)?;
        }
        if self.nxt_rep_dt != 0 {
            os.write_int64(3, self.nxt_rep_dt)?;
        }
        if self.deal_dt != 0 {
            os.write_int64(4, self.deal_dt)?;
        }
        if !self.portfolio.is_empty() {
            os.write_string(5, &self.portfolio)?;
        }
        if self.deal_rt != 0. {
            os.write_double(6, self.deal_rt)?;
        }
        if self.org_face_val != 0 {
            os.write_int64(7, self.org_face_val)?;
        }
        if self.os_face_val != 0 {
            os.write_int64(8, self.os_face_val)?;
        }
        if self.org_cst_val != 0. {
            os.write_double(9, self.org_cst_val)?;
        }
        if self.acrd_int != 0. {
            os.write_double(10, self.acrd_int)?;
        }
        if self.book_yield != 0. {
            os.write_double(11, self.book_yield)?;
        }
        if self.int_basis != 0 {
            os.write_int64(12, self.int_basis)?;
        }
        if self.avg_os_vd != 0. {
            os.write_double(13, self.avg_os_vd)?;
        }
        if self.avg_os_dd != 0. {
            os.write_double(14, self.avg_os_dd)?;
        }
        if self.os_cost_val != 0. {
            os.write_double(15, self.os_cost_val)?;
        }
        if self.org_bal != 0. {
            os.write_double(16, self.org_bal)?;
        }
        if self.coup_rt != 0. {
            os.write_double(17, self.coup_rt)?;
        }
        if self.nxt_coup_dt != 0 {
            os.write_int64(18, self.nxt_coup_dt)?;
        }
        if self.gl != 0 {
            os.write_int64(19, self.gl)?;
        }
        if self.mat_dt != 0 {
            os.write_int64(20, self.mat_dt)?;
        }
        if !self.secu_desc.is_empty() {
            os.write_string(21, &self.secu_desc)?;
        }
        if !self.prod_desc.is_empty() {
            os.write_string(22, &self.prod_desc)?;
        }
        if !self.prod_cd.is_empty() {
            os.write_string(23, &self.prod_cd)?;
        }
        if self.lst_coup_dt != 0 {
            os.write_int64(24, self.lst_coup_dt)?;
        }
        if self.call_dt1 != 0 {
            os.write_int64(25, self.call_dt1)?;
        }
        if !self.coup_freq.is_empty() {
            os.write_string(26, &self.coup_freq)?;
        }
        if self.val_dt != 0 {
            os.write_int64(27, self.val_dt)?;
        }
        if !self.acrl_freq.is_empty() {
            os.write_string(28, &self.acrl_freq)?;
        }
        if self.lst_rep_dt != 0 {
            os.write_int64(29, self.lst_rep_dt)?;
        }
        if self.lst_put_dt != 0 {
            os.write_int64(30, self.lst_put_dt)?;
        }
        if !self.inst.is_empty() {
            os.write_string(31, &self.inst)?;
        }
        if self.org_term != 0 {
            os.write_int64(32, self.org_term)?;
        }
        if !self.acrl_basis.is_empty() {
            os.write_string(33, &self.acrl_basis)?;
        }
        if !self.div.is_empty() {
            os.write_string(34, &self.div)?;
        }
        if !self.alm_line.is_empty() {
            os.write_string(35, &self.alm_line)?;
        }
        if self.cmpnd_freq != 0 {
            os.write_int64(36, self.cmpnd_freq)?;
        }
        if self.nxt_cmpnd_dt != 0 {
            os.write_int64(37, self.nxt_cmpnd_dt)?;
        }
        if self.rt_chng_freq != 0 {
            os.write_int64(38, self.rt_chng_freq)?;
        }
        if !self.rt_flg.is_empty() {
            os.write_string(39, &self.rt_flg)?;
        }
        if !self.rep_idx.is_empty() {
            os.write_string(40, &self.rep_idx)?;
        }
        if self.nxt_pay_dt != 0 {
            os.write_int64(41, self.nxt_pay_dt)?;
        }
        if self.prev_rep_dt != 0 {
            os.write_int64(42, self.prev_rep_dt)?;
        }
        if self.int_pay_freq != 0 {
            os.write_int64(43, self.int_pay_freq)?;
        }
        if self.call_dt != 0 {
            os.write_int64(44, self.call_dt)?;
        }
        if self.put_dt != 0 {
            os.write_int64(45, self.put_dt)?;
        }
        if self.int_rt != 0. {
            os.write_double(46, self.int_rt)?;
        }
        if !self.port_typ.is_empty() {
            os.write_string(47, &self.port_typ)?;
        }
        if self.total_interest_amount != 0. {
            os.write_double(48, self.total_interest_amount)?;
        }
        if self.total_principal_amount != 0. {
            os.write_double(49, self.total_principal_amount)?;
        }
        for v in &self.cashflows {
            os.write_tag(50, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deal_no",
                    |m: &AccountWithCashflows| { &m.deal_no },
                    |m: &mut AccountWithCashflows| { &mut m.deal_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "short_name",
                    |m: &AccountWithCashflows| { &m.short_name },
                    |m: &mut AccountWithCashflows| { &mut m.short_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "nxt_rep_dt",
                    |m: &AccountWithCashflows| { &m.nxt_rep_dt },
                    |m: &mut AccountWithCashflows| { &mut m.nxt_rep_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "deal_dt",
                    |m: &AccountWithCashflows| { &m.deal_dt },
                    |m: &mut AccountWithCashflows| { &mut m.deal_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "portfolio",
                    |m: &AccountWithCashflows| { &m.portfolio },
                    |m: &mut AccountWithCashflows| { &mut m.portfolio },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "deal_rt",
                    |m: &AccountWithCashflows| { &m.deal_rt },
                    |m: &mut AccountWithCashflows| { &mut m.deal_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "org_face_val",
                    |m: &AccountWithCashflows| { &m.org_face_val },
                    |m: &mut AccountWithCashflows| { &mut m.org_face_val },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "os_face_val",
                    |m: &AccountWithCashflows| { &m.os_face_val },
                    |m: &mut AccountWithCashflows| { &mut m.os_face_val },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "org_cst_val",
                    |m: &AccountWithCashflows| { &m.org_cst_val },
                    |m: &mut AccountWithCashflows| { &mut m.org_cst_val },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "acrd_int",
                    |m: &AccountWithCashflows| { &m.acrd_int },
                    |m: &mut AccountWithCashflows| { &mut m.acrd_int },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "book_yield",
                    |m: &AccountWithCashflows| { &m.book_yield },
                    |m: &mut AccountWithCashflows| { &mut m.book_yield },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "int_basis",
                    |m: &AccountWithCashflows| { &m.int_basis },
                    |m: &mut AccountWithCashflows| { &mut m.int_basis },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "avg_os_vd",
                    |m: &AccountWithCashflows| { &m.avg_os_vd },
                    |m: &mut AccountWithCashflows| { &mut m.avg_os_vd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "avg_os_dd",
                    |m: &AccountWithCashflows| { &m.avg_os_dd },
                    |m: &mut AccountWithCashflows| { &mut m.avg_os_dd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "os_cost_val",
                    |m: &AccountWithCashflows| { &m.os_cost_val },
                    |m: &mut AccountWithCashflows| { &mut m.os_cost_val },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "org_bal",
                    |m: &AccountWithCashflows| { &m.org_bal },
                    |m: &mut AccountWithCashflows| { &mut m.org_bal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "coup_rt",
                    |m: &AccountWithCashflows| { &m.coup_rt },
                    |m: &mut AccountWithCashflows| { &mut m.coup_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "nxt_coup_dt",
                    |m: &AccountWithCashflows| { &m.nxt_coup_dt },
                    |m: &mut AccountWithCashflows| { &mut m.nxt_coup_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "gl",
                    |m: &AccountWithCashflows| { &m.gl },
                    |m: &mut AccountWithCashflows| { &mut m.gl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "mat_dt",
                    |m: &AccountWithCashflows| { &m.mat_dt },
                    |m: &mut AccountWithCashflows| { &mut m.mat_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "secu_desc",
                    |m: &AccountWithCashflows| { &m.secu_desc },
                    |m: &mut AccountWithCashflows| { &mut m.secu_desc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "prod_desc",
                    |m: &AccountWithCashflows| { &m.prod_desc },
                    |m: &mut AccountWithCashflows| { &mut m.prod_desc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "prod_cd",
                    |m: &AccountWithCashflows| { &m.prod_cd },
                    |m: &mut AccountWithCashflows| { &mut m.prod_cd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "lst_coup_dt",
                    |m: &AccountWithCashflows| { &m.lst_coup_dt },
                    |m: &mut AccountWithCashflows| { &mut m.lst_coup_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "call_dt1",
                    |m: &AccountWithCashflows| { &m.call_dt1 },
                    |m: &mut AccountWithCashflows| { &mut m.call_dt1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "coup_freq",
                    |m: &AccountWithCashflows| { &m.coup_freq },
                    |m: &mut AccountWithCashflows| { &mut m.coup_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "val_dt",
                    |m: &AccountWithCashflows| { &m.val_dt },
                    |m: &mut AccountWithCashflows| { &mut m.val_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acrl_freq",
                    |m: &AccountWithCashflows| { &m.acrl_freq },
                    |m: &mut AccountWithCashflows| { &mut m.acrl_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "lst_rep_dt",
                    |m: &AccountWithCashflows| { &m.lst_rep_dt },
                    |m: &mut AccountWithCashflows| { &mut m.lst_rep_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "lst_put_dt",
                    |m: &AccountWithCashflows| { &m.lst_put_dt },
                    |m: &mut AccountWithCashflows| { &mut m.lst_put_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "inst",
                    |m: &AccountWithCashflows| { &m.inst },
                    |m: &mut AccountWithCashflows| { &mut m.inst },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "org_term",
                    |m: &AccountWithCashflows| { &m.org_term },
                    |m: &mut AccountWithCashflows| { &mut m.org_term },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "acrl_basis",
                    |m: &AccountWithCashflows| { &m.acrl_basis },
                    |m: &mut AccountWithCashflows| { &mut m.acrl_basis },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "div",
                    |m: &AccountWithCashflows| { &m.div },
                    |m: &mut AccountWithCashflows| { &mut m.div },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "alm_line",
                    |m: &AccountWithCashflows| { &m.alm_line },
                    |m: &mut AccountWithCashflows| { &mut m.alm_line },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cmpnd_freq",
                    |m: &AccountWithCashflows| { &m.cmpnd_freq },
                    |m: &mut AccountWithCashflows| { &mut m.cmpnd_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "nxt_cmpnd_dt",
                    |m: &AccountWithCashflows| { &m.nxt_cmpnd_dt },
                    |m: &mut AccountWithCashflows| { &mut m.nxt_cmpnd_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "rt_chng_freq",
                    |m: &AccountWithCashflows| { &m.rt_chng_freq },
                    |m: &mut AccountWithCashflows| { &mut m.rt_chng_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rt_flg",
                    |m: &AccountWithCashflows| { &m.rt_flg },
                    |m: &mut AccountWithCashflows| { &mut m.rt_flg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rep_idx",
                    |m: &AccountWithCashflows| { &m.rep_idx },
                    |m: &mut AccountWithCashflows| { &mut m.rep_idx },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "nxt_pay_dt",
                    |m: &AccountWithCashflows| { &m.nxt_pay_dt },
                    |m: &mut AccountWithCashflows| { &mut m.nxt_pay_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "prev_rep_dt",
                    |m: &AccountWithCashflows| { &m.prev_rep_dt },
                    |m: &mut AccountWithCashflows| { &mut m.prev_rep_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "int_pay_freq",
                    |m: &AccountWithCashflows| { &m.int_pay_freq },
                    |m: &mut AccountWithCashflows| { &mut m.int_pay_freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "call_dt",
                    |m: &AccountWithCashflows| { &m.call_dt },
                    |m: &mut AccountWithCashflows| { &mut m.call_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "put_dt",
                    |m: &AccountWithCashflows| { &m.put_dt },
                    |m: &mut AccountWithCashflows| { &mut m.put_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_rt",
                    |m: &AccountWithCashflows| { &m.int_rt },
                    |m: &mut AccountWithCashflows| { &mut m.int_rt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "port_typ",
                    |m: &AccountWithCashflows| { &m.port_typ },
                    |m: &mut AccountWithCashflows| { &mut m.port_typ },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_interest_amount",
                    |m: &AccountWithCashflows| { &m.total_interest_amount },
                    |m: &mut AccountWithCashflows| { &mut m.total_interest_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_principal_amount",
                    |m: &AccountWithCashflows| { &m.total_principal_amount },
                    |m: &mut AccountWithCashflows| { &mut m.total_principal_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_deal_no();
        self.clear_short_name();
        self.clear_nxt_rep_dt();
        self.clear_deal_dt();
        self.clear_portfolio();
        self.clear_deal_rt();
        self.clear_org_face_val();
        self.clear_os_face_val();
        self.clear_org_cst_val();
        self.clear_acrd_int();
        self.clear_book_yield();
        self.clear_int_basis();
        self.clear_avg_os_vd();
        self.clear_avg_os_dd();
        self.clear_os_cost_val();
        self.clear_org_bal();
        self.clear_coup_rt();
        self.clear_nxt_coup_dt();
        self.clear_gl();
        self.clear_mat_dt();
        self.clear_secu_desc();
        self.clear_prod_desc();
        self.clear_prod_cd();
        self.clear_lst_coup_dt();
        self.clear_call_dt1();
        self.clear_coup_freq();
        self.clear_val_dt();
        self.clear_acrl_freq();
        self.clear_lst_rep_dt();
        self.clear_lst_put_dt();
        self.clear_inst();
        self.clear_org_term();
        self.clear_acrl_basis();
        self.clear_div();
        self.clear_alm_line();
        self.clear_cmpnd_freq();
        self.clear_nxt_cmpnd_dt();
        self.clear_rt_chng_freq();
        self.clear_rt_flg();
        self.clear_rep_idx();
        self.clear_nxt_pay_dt();
        self.clear_prev_rep_dt();
        self.clear_int_pay_freq();
        self.clear_call_dt();
        self.clear_put_dt();
        self.clear_int_rt();
        self.clear_port_typ();
        self.clear_total_interest_amount();
        self.clear_total_principal_amount();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10investment.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\x18\x01\x20\
    \x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\x01R\x07prin\
    Amt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\xc4\x0b\n\x14Accou\
    ntWithCashflows\x12\x17\n\x07deal_no\x18\x01\x20\x01(\tR\x06dealNo\x12\
    \x1d\n\nshort_name\x18\x02\x20\x01(\tR\tshortName\x12\x1c\n\nnxt_rep_dt\
    \x18\x03\x20\x01(\x03R\x08nxtRepDt\x12\x17\n\x07deal_dt\x18\x04\x20\x01(\
    \x03R\x06dealDt\x12\x1c\n\tportfolio\x18\x05\x20\x01(\tR\tportfolio\x12\
    \x17\n\x07deal_rt\x18\x06\x20\x01(\x01R\x06dealRt\x12\x20\n\x0corg_face_\
    val\x18\x07\x20\x01(\x03R\norgFaceVal\x12\x1e\n\x0bos_face_val\x18\x08\
    \x20\x01(\x03R\tosFaceVal\x12\x1e\n\x0borg_cst_val\x18\t\x20\x01(\x01R\t\
    orgCstVal\x12\x19\n\x08acrd_int\x18\n\x20\x01(\x01R\x07acrdInt\x12\x1d\n\
    \nbook_yield\x18\x0b\x20\x01(\x01R\tbookYield\x12\x1b\n\tint_basis\x18\
    \x0c\x20\x01(\x03R\x08intBasis\x12\x1a\n\tavg_os_vd\x18\r\x20\x01(\x01R\
    \x07avgOsVd\x12\x1a\n\tavg_os_dd\x18\x0e\x20\x01(\x01R\x07avgOsDd\x12\
    \x1e\n\x0bos_cost_val\x18\x0f\x20\x01(\x01R\tosCostVal\x12\x17\n\x07org_\
    bal\x18\x10\x20\x01(\x01R\x06orgBal\x12\x17\n\x07coup_rt\x18\x11\x20\x01\
    (\x01R\x06coupRt\x12\x1e\n\x0bnxt_coup_dt\x18\x12\x20\x01(\x03R\tnxtCoup\
    Dt\x12\x0e\n\x02gl\x18\x13\x20\x01(\x03R\x02gl\x12\x15\n\x06mat_dt\x18\
    \x14\x20\x01(\x03R\x05matDt\x12\x1b\n\tsecu_desc\x18\x15\x20\x01(\tR\x08\
    secuDesc\x12\x1b\n\tprod_desc\x18\x16\x20\x01(\tR\x08prodDesc\x12\x17\n\
    \x07prod_cd\x18\x17\x20\x01(\tR\x06prodCd\x12\x1e\n\x0blst_coup_dt\x18\
    \x18\x20\x01(\x03R\tlstCoupDt\x12\x19\n\x08call_dt1\x18\x19\x20\x01(\x03\
    R\x07callDt1\x12\x1b\n\tcoup_freq\x18\x1a\x20\x01(\tR\x08coupFreq\x12\
    \x15\n\x06val_dt\x18\x1b\x20\x01(\x03R\x05valDt\x12\x1b\n\tacrl_freq\x18\
    \x1c\x20\x01(\tR\x08acrlFreq\x12\x1c\n\nlst_rep_dt\x18\x1d\x20\x01(\x03R\
    \x08lstRepDt\x12\x1c\n\nlst_put_dt\x18\x1e\x20\x01(\x03R\x08lstPutDt\x12\
    \x12\n\x04inst\x18\x1f\x20\x01(\tR\x04inst\x12\x19\n\x08org_term\x18\x20\
    \x20\x01(\x03R\x07orgTerm\x12\x1d\n\nacrl_basis\x18!\x20\x01(\tR\tacrlBa\
    sis\x12\x10\n\x03div\x18\"\x20\x01(\tR\x03div\x12\x19\n\x08alm_line\x18#\
    \x20\x01(\tR\x07almLine\x12\x1d\n\ncmpnd_freq\x18$\x20\x01(\x03R\tcmpndF\
    req\x12\x20\n\x0cnxt_cmpnd_dt\x18%\x20\x01(\x03R\nnxtCmpndDt\x12\x20\n\
    \x0crt_chng_freq\x18&\x20\x01(\x03R\nrtChngFreq\x12\x15\n\x06rt_flg\x18'\
    \x20\x01(\tR\x05rtFlg\x12\x17\n\x07rep_idx\x18(\x20\x01(\tR\x06repIdx\
    \x12\x1c\n\nnxt_pay_dt\x18)\x20\x01(\x03R\x08nxtPayDt\x12\x1e\n\x0bprev_\
    rep_dt\x18*\x20\x01(\x03R\tprevRepDt\x12\x20\n\x0cint_pay_freq\x18+\x20\
    \x01(\x03R\nintPayFreq\x12\x17\n\x07call_dt\x18,\x20\x01(\x03R\x06callDt\
    \x12\x15\n\x06put_dt\x18-\x20\x01(\x03R\x05putDt\x12\x15\n\x06int_rt\x18\
    .\x20\x01(\x01R\x05intRt\x12\x19\n\x08port_typ\x18/\x20\x01(\tR\x07portT\
    yp\x122\n\x15total_interest_amount\x180\x20\x01(\x01R\x13totalInterestAm\
    ount\x124\n\x16total_principal_amount\x181\x20\x01(\x01R\x14totalPrincip\
    alAmount\x12'\n\tcashflows\x182\x20\x03(\x0b2\t.CashflowR\tcashflowsb\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
