// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Cashflow {
    // message fields
    pub int_amt: f64,
    pub prin_amt: f64,
    pub date: i64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Cashflow {
    pub fn new() -> Cashflow {
        ::std::default::Default::default()
    }

    // double int_amt = 1;

    pub fn clear_int_amt(&mut self) {
        self.int_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_int_amt(&mut self, v: f64) {
        self.int_amt = v;
    }

    pub fn get_int_amt(&self) -> f64 {
        self.int_amt
    }

    // double prin_amt = 2;

    pub fn clear_prin_amt(&mut self) {
        self.prin_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prin_amt(&mut self, v: f64) {
        self.prin_amt = v;
    }

    pub fn get_prin_amt(&self) -> f64 {
        self.prin_amt
    }

    // int64 date = 3;

    pub fn clear_date(&mut self) {
        self.date = 0;
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: i64) {
        self.date = v;
    }

    pub fn get_date(&self) -> i64 {
        self.date
    }
}

impl ::protobuf::Message for Cashflow {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.int_amt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.prin_amt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_amt != 0. {
            my_size += 9;
        }
        if self.prin_amt != 0. {
            my_size += 9;
        }
        if self.date != 0 {
            my_size += ::protobuf::rt::value_size(3, self.date, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.int_amt != 0. {
            os.write_double(1, self.int_amt)?;
        }
        if self.prin_amt != 0. {
            os.write_double(2, self.prin_amt)?;
        }
        if self.date != 0 {
            os.write_int64(3, self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cashflow {
        Cashflow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "int_amt",
                    |m: &Cashflow| { &m.int_amt },
                    |m: &mut Cashflow| { &mut m.int_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "prin_amt",
                    |m: &Cashflow| { &m.prin_amt },
                    |m: &mut Cashflow| { &mut m.prin_amt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "date",
                    |m: &Cashflow| { &m.date },
                    |m: &mut Cashflow| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cashflow>(
                    "Cashflow",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Cashflow {
        static mut instance: ::protobuf::lazy::Lazy<Cashflow> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cashflow,
        };
        unsafe {
            instance.get(Cashflow::new)
        }
    }
}

impl ::protobuf::Clear for Cashflow {
    fn clear(&mut self) {
        self.clear_int_amt();
        self.clear_prin_amt();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cashflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cashflow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountWithCashflows {
    // message fields
    pub account_number: ::std::string::String,
    pub cust_ref_code: i64,
    pub pp_table: ::std::string::String,
    pub ccf_percent: f64,
    pub exp_start_date: i64,
    pub exp_end_date: i64,
    pub undrawn_amount: f64,
    pub prod_type_desc: ::std::string::String,
    pub party_type_desc: ::std::string::String,
    pub undrn_cov_amount: f64,
    pub pre_mitigation_rw_ul: f64,
    pub undrn_rwa: f64,
    pub gl_code: i64,
    pub ccy_code: ::std::string::String,
    pub ret_corporate_ind: ::std::string::String,
    pub as_on_dt: i64,
    pub nxt_rep_dt: i64,
    pub cashflows: ::protobuf::RepeatedField<Cashflow>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AccountWithCashflows {
    pub fn new() -> AccountWithCashflows {
        ::std::default::Default::default()
    }

    // string account_number = 1;

    pub fn clear_account_number(&mut self) {
        self.account_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_number(&mut self, v: ::std::string::String) {
        self.account_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_number(&mut self) -> &mut ::std::string::String {
        &mut self.account_number
    }

    // Take field
    pub fn take_account_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_number, ::std::string::String::new())
    }

    pub fn get_account_number(&self) -> &str {
        &self.account_number
    }

    // int64 cust_ref_code = 2;

    pub fn clear_cust_ref_code(&mut self) {
        self.cust_ref_code = 0;
    }

    // Param is passed by value, moved
    pub fn set_cust_ref_code(&mut self, v: i64) {
        self.cust_ref_code = v;
    }

    pub fn get_cust_ref_code(&self) -> i64 {
        self.cust_ref_code
    }

    // string pp_table = 3;

    pub fn clear_pp_table(&mut self) {
        self.pp_table.clear();
    }

    // Param is passed by value, moved
    pub fn set_pp_table(&mut self, v: ::std::string::String) {
        self.pp_table = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pp_table(&mut self) -> &mut ::std::string::String {
        &mut self.pp_table
    }

    // Take field
    pub fn take_pp_table(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pp_table, ::std::string::String::new())
    }

    pub fn get_pp_table(&self) -> &str {
        &self.pp_table
    }

    // double ccf_percent = 4;

    pub fn clear_ccf_percent(&mut self) {
        self.ccf_percent = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ccf_percent(&mut self, v: f64) {
        self.ccf_percent = v;
    }

    pub fn get_ccf_percent(&self) -> f64 {
        self.ccf_percent
    }

    // int64 exp_start_date = 5;

    pub fn clear_exp_start_date(&mut self) {
        self.exp_start_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_exp_start_date(&mut self, v: i64) {
        self.exp_start_date = v;
    }

    pub fn get_exp_start_date(&self) -> i64 {
        self.exp_start_date
    }

    // int64 exp_end_date = 6;

    pub fn clear_exp_end_date(&mut self) {
        self.exp_end_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_exp_end_date(&mut self, v: i64) {
        self.exp_end_date = v;
    }

    pub fn get_exp_end_date(&self) -> i64 {
        self.exp_end_date
    }

    // double undrawn_amount = 7;

    pub fn clear_undrawn_amount(&mut self) {
        self.undrawn_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_undrawn_amount(&mut self, v: f64) {
        self.undrawn_amount = v;
    }

    pub fn get_undrawn_amount(&self) -> f64 {
        self.undrawn_amount
    }

    // string prod_type_desc = 8;

    pub fn clear_prod_type_desc(&mut self) {
        self.prod_type_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_prod_type_desc(&mut self, v: ::std::string::String) {
        self.prod_type_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prod_type_desc(&mut self) -> &mut ::std::string::String {
        &mut self.prod_type_desc
    }

    // Take field
    pub fn take_prod_type_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prod_type_desc, ::std::string::String::new())
    }

    pub fn get_prod_type_desc(&self) -> &str {
        &self.prod_type_desc
    }

    // string party_type_desc = 9;

    pub fn clear_party_type_desc(&mut self) {
        self.party_type_desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_party_type_desc(&mut self, v: ::std::string::String) {
        self.party_type_desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_party_type_desc(&mut self) -> &mut ::std::string::String {
        &mut self.party_type_desc
    }

    // Take field
    pub fn take_party_type_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.party_type_desc, ::std::string::String::new())
    }

    pub fn get_party_type_desc(&self) -> &str {
        &self.party_type_desc
    }

    // double undrn_cov_amount = 10;

    pub fn clear_undrn_cov_amount(&mut self) {
        self.undrn_cov_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_undrn_cov_amount(&mut self, v: f64) {
        self.undrn_cov_amount = v;
    }

    pub fn get_undrn_cov_amount(&self) -> f64 {
        self.undrn_cov_amount
    }

    // double pre_mitigation_rw_ul = 11;

    pub fn clear_pre_mitigation_rw_ul(&mut self) {
        self.pre_mitigation_rw_ul = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pre_mitigation_rw_ul(&mut self, v: f64) {
        self.pre_mitigation_rw_ul = v;
    }

    pub fn get_pre_mitigation_rw_ul(&self) -> f64 {
        self.pre_mitigation_rw_ul
    }

    // double undrn_rwa = 12;

    pub fn clear_undrn_rwa(&mut self) {
        self.undrn_rwa = 0.;
    }

    // Param is passed by value, moved
    pub fn set_undrn_rwa(&mut self, v: f64) {
        self.undrn_rwa = v;
    }

    pub fn get_undrn_rwa(&self) -> f64 {
        self.undrn_rwa
    }

    // int64 gl_code = 13;

    pub fn clear_gl_code(&mut self) {
        self.gl_code = 0;
    }

    // Param is passed by value, moved
    pub fn set_gl_code(&mut self, v: i64) {
        self.gl_code = v;
    }

    pub fn get_gl_code(&self) -> i64 {
        self.gl_code
    }

    // string ccy_code = 14;

    pub fn clear_ccy_code(&mut self) {
        self.ccy_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy_code(&mut self, v: ::std::string::String) {
        self.ccy_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy_code(&mut self) -> &mut ::std::string::String {
        &mut self.ccy_code
    }

    // Take field
    pub fn take_ccy_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy_code, ::std::string::String::new())
    }

    pub fn get_ccy_code(&self) -> &str {
        &self.ccy_code
    }

    // string ret_corporate_ind = 15;

    pub fn clear_ret_corporate_ind(&mut self) {
        self.ret_corporate_ind.clear();
    }

    // Param is passed by value, moved
    pub fn set_ret_corporate_ind(&mut self, v: ::std::string::String) {
        self.ret_corporate_ind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ret_corporate_ind(&mut self) -> &mut ::std::string::String {
        &mut self.ret_corporate_ind
    }

    // Take field
    pub fn take_ret_corporate_ind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ret_corporate_ind, ::std::string::String::new())
    }

    pub fn get_ret_corporate_ind(&self) -> &str {
        &self.ret_corporate_ind
    }

    // int64 as_on_dt = 16;

    pub fn clear_as_on_dt(&mut self) {
        self.as_on_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_as_on_dt(&mut self, v: i64) {
        self.as_on_dt = v;
    }

    pub fn get_as_on_dt(&self) -> i64 {
        self.as_on_dt
    }

    // int64 nxt_rep_dt = 17;

    pub fn clear_nxt_rep_dt(&mut self) {
        self.nxt_rep_dt = 0;
    }

    // Param is passed by value, moved
    pub fn set_nxt_rep_dt(&mut self, v: i64) {
        self.nxt_rep_dt = v;
    }

    pub fn get_nxt_rep_dt(&self) -> i64 {
        self.nxt_rep_dt
    }

    // repeated .Cashflow cashflows = 18;

    pub fn clear_cashflows(&mut self) {
        self.cashflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_cashflows(&mut self, v: ::protobuf::RepeatedField<Cashflow>) {
        self.cashflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cashflows(&mut self) -> &mut ::protobuf::RepeatedField<Cashflow> {
        &mut self.cashflows
    }

    // Take field
    pub fn take_cashflows(&mut self) -> ::protobuf::RepeatedField<Cashflow> {
        ::std::mem::replace(&mut self.cashflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_cashflows(&self) -> &[Cashflow] {
        &self.cashflows
    }
}

impl ::protobuf::Message for AccountWithCashflows {
    fn is_initialized(&self) -> bool {
        for v in &self.cashflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_number)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cust_ref_code = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pp_table)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.ccf_percent = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.exp_start_date = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.exp_end_date = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.undrawn_amount = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prod_type_desc)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.party_type_desc)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.undrn_cov_amount = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pre_mitigation_rw_ul = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.undrn_rwa = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.gl_code = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy_code)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ret_corporate_ind)?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.as_on_dt = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.nxt_rep_dt = tmp;
                },
                18 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cashflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.account_number);
        }
        if self.cust_ref_code != 0 {
            my_size += ::protobuf::rt::value_size(2, self.cust_ref_code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.pp_table.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.pp_table);
        }
        if self.ccf_percent != 0. {
            my_size += 9;
        }
        if self.exp_start_date != 0 {
            my_size += ::protobuf::rt::value_size(5, self.exp_start_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.exp_end_date != 0 {
            my_size += ::protobuf::rt::value_size(6, self.exp_end_date, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.undrawn_amount != 0. {
            my_size += 9;
        }
        if !self.prod_type_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.prod_type_desc);
        }
        if !self.party_type_desc.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.party_type_desc);
        }
        if self.undrn_cov_amount != 0. {
            my_size += 9;
        }
        if self.pre_mitigation_rw_ul != 0. {
            my_size += 9;
        }
        if self.undrn_rwa != 0. {
            my_size += 9;
        }
        if self.gl_code != 0 {
            my_size += ::protobuf::rt::value_size(13, self.gl_code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ccy_code.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.ccy_code);
        }
        if !self.ret_corporate_ind.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.ret_corporate_ind);
        }
        if self.as_on_dt != 0 {
            my_size += ::protobuf::rt::value_size(16, self.as_on_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.nxt_rep_dt != 0 {
            my_size += ::protobuf::rt::value_size(17, self.nxt_rep_dt, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cashflows {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.account_number.is_empty() {
            os.write_string(1, &self.account_number)?;
        }
        if self.cust_ref_code != 0 {
            os.write_int64(2, self.cust_ref_code)?;
        }
        if !self.pp_table.is_empty() {
            os.write_string(3, &self.pp_table)?;
        }
        if self.ccf_percent != 0. {
            os.write_double(4, self.ccf_percent)?;
        }
        if self.exp_start_date != 0 {
            os.write_int64(5, self.exp_start_date)?;
        }
        if self.exp_end_date != 0 {
            os.write_int64(6, self.exp_end_date)?;
        }
        if self.undrawn_amount != 0. {
            os.write_double(7, self.undrawn_amount)?;
        }
        if !self.prod_type_desc.is_empty() {
            os.write_string(8, &self.prod_type_desc)?;
        }
        if !self.party_type_desc.is_empty() {
            os.write_string(9, &self.party_type_desc)?;
        }
        if self.undrn_cov_amount != 0. {
            os.write_double(10, self.undrn_cov_amount)?;
        }
        if self.pre_mitigation_rw_ul != 0. {
            os.write_double(11, self.pre_mitigation_rw_ul)?;
        }
        if self.undrn_rwa != 0. {
            os.write_double(12, self.undrn_rwa)?;
        }
        if self.gl_code != 0 {
            os.write_int64(13, self.gl_code)?;
        }
        if !self.ccy_code.is_empty() {
            os.write_string(14, &self.ccy_code)?;
        }
        if !self.ret_corporate_ind.is_empty() {
            os.write_string(15, &self.ret_corporate_ind)?;
        }
        if self.as_on_dt != 0 {
            os.write_int64(16, self.as_on_dt)?;
        }
        if self.nxt_rep_dt != 0 {
            os.write_int64(17, self.nxt_rep_dt)?;
        }
        for v in &self.cashflows {
            os.write_tag(18, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountWithCashflows {
        AccountWithCashflows::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "account_number",
                    |m: &AccountWithCashflows| { &m.account_number },
                    |m: &mut AccountWithCashflows| { &mut m.account_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "cust_ref_code",
                    |m: &AccountWithCashflows| { &m.cust_ref_code },
                    |m: &mut AccountWithCashflows| { &mut m.cust_ref_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pp_table",
                    |m: &AccountWithCashflows| { &m.pp_table },
                    |m: &mut AccountWithCashflows| { &mut m.pp_table },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "ccf_percent",
                    |m: &AccountWithCashflows| { &m.ccf_percent },
                    |m: &mut AccountWithCashflows| { &mut m.ccf_percent },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "exp_start_date",
                    |m: &AccountWithCashflows| { &m.exp_start_date },
                    |m: &mut AccountWithCashflows| { &mut m.exp_start_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "exp_end_date",
                    |m: &AccountWithCashflows| { &m.exp_end_date },
                    |m: &mut AccountWithCashflows| { &mut m.exp_end_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "undrawn_amount",
                    |m: &AccountWithCashflows| { &m.undrawn_amount },
                    |m: &mut AccountWithCashflows| { &mut m.undrawn_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "prod_type_desc",
                    |m: &AccountWithCashflows| { &m.prod_type_desc },
                    |m: &mut AccountWithCashflows| { &mut m.prod_type_desc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "party_type_desc",
                    |m: &AccountWithCashflows| { &m.party_type_desc },
                    |m: &mut AccountWithCashflows| { &mut m.party_type_desc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "undrn_cov_amount",
                    |m: &AccountWithCashflows| { &m.undrn_cov_amount },
                    |m: &mut AccountWithCashflows| { &mut m.undrn_cov_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "pre_mitigation_rw_ul",
                    |m: &AccountWithCashflows| { &m.pre_mitigation_rw_ul },
                    |m: &mut AccountWithCashflows| { &mut m.pre_mitigation_rw_ul },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "undrn_rwa",
                    |m: &AccountWithCashflows| { &m.undrn_rwa },
                    |m: &mut AccountWithCashflows| { &mut m.undrn_rwa },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "gl_code",
                    |m: &AccountWithCashflows| { &m.gl_code },
                    |m: &mut AccountWithCashflows| { &mut m.gl_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ccy_code",
                    |m: &AccountWithCashflows| { &m.ccy_code },
                    |m: &mut AccountWithCashflows| { &mut m.ccy_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ret_corporate_ind",
                    |m: &AccountWithCashflows| { &m.ret_corporate_ind },
                    |m: &mut AccountWithCashflows| { &mut m.ret_corporate_ind },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "as_on_dt",
                    |m: &AccountWithCashflows| { &m.as_on_dt },
                    |m: &mut AccountWithCashflows| { &mut m.as_on_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "nxt_rep_dt",
                    |m: &AccountWithCashflows| { &m.nxt_rep_dt },
                    |m: &mut AccountWithCashflows| { &mut m.nxt_rep_dt },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cashflow>>(
                    "cashflows",
                    |m: &AccountWithCashflows| { &m.cashflows },
                    |m: &mut AccountWithCashflows| { &mut m.cashflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountWithCashflows>(
                    "AccountWithCashflows",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountWithCashflows {
        static mut instance: ::protobuf::lazy::Lazy<AccountWithCashflows> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountWithCashflows,
        };
        unsafe {
            instance.get(AccountWithCashflows::new)
        }
    }
}

impl ::protobuf::Clear for AccountWithCashflows {
    fn clear(&mut self) {
        self.clear_account_number();
        self.clear_cust_ref_code();
        self.clear_pp_table();
        self.clear_ccf_percent();
        self.clear_exp_start_date();
        self.clear_exp_end_date();
        self.clear_undrawn_amount();
        self.clear_prod_type_desc();
        self.clear_party_type_desc();
        self.clear_undrn_cov_amount();
        self.clear_pre_mitigation_rw_ul();
        self.clear_undrn_rwa();
        self.clear_gl_code();
        self.clear_ccy_code();
        self.clear_ret_corporate_ind();
        self.clear_as_on_dt();
        self.clear_nxt_rep_dt();
        self.clear_cashflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountWithCashflows {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountWithCashflows {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aAccountWithCashflows.proto\"R\n\x08Cashflow\x12\x17\n\x07int_amt\
    \x18\x01\x20\x01(\x01R\x06intAmt\x12\x19\n\x08prin_amt\x18\x02\x20\x01(\
    \x01R\x07prinAmt\x12\x12\n\x04date\x18\x03\x20\x01(\x03R\x04date\"\x93\
    \x05\n\x14AccountWithCashflows\x12%\n\x0eaccount_number\x18\x01\x20\x01(\
    \tR\raccountNumber\x12\"\n\rcust_ref_code\x18\x02\x20\x01(\x03R\x0bcustR\
    efCode\x12\x19\n\x08pp_table\x18\x03\x20\x01(\tR\x07ppTable\x12\x1f\n\
    \x0bccf_percent\x18\x04\x20\x01(\x01R\nccfPercent\x12$\n\x0eexp_start_da\
    te\x18\x05\x20\x01(\x03R\x0cexpStartDate\x12\x20\n\x0cexp_end_date\x18\
    \x06\x20\x01(\x03R\nexpEndDate\x12%\n\x0eundrawn_amount\x18\x07\x20\x01(\
    \x01R\rundrawnAmount\x12$\n\x0eprod_type_desc\x18\x08\x20\x01(\tR\x0cpro\
    dTypeDesc\x12&\n\x0fparty_type_desc\x18\t\x20\x01(\tR\rpartyTypeDesc\x12\
    (\n\x10undrn_cov_amount\x18\n\x20\x01(\x01R\x0eundrnCovAmount\x12/\n\x14\
    pre_mitigation_rw_ul\x18\x0b\x20\x01(\x01R\x11preMitigationRwUl\x12\x1b\
    \n\tundrn_rwa\x18\x0c\x20\x01(\x01R\x08undrnRwa\x12\x17\n\x07gl_code\x18\
    \r\x20\x01(\x03R\x06glCode\x12\x19\n\x08ccy_code\x18\x0e\x20\x01(\tR\x07\
    ccyCode\x12*\n\x11ret_corporate_ind\x18\x0f\x20\x01(\tR\x0fretCorporateI\
    nd\x12\x18\n\x08as_on_dt\x18\x10\x20\x01(\x03R\x06asOnDt\x12\x1c\n\nnxt_\
    rep_dt\x18\x11\x20\x01(\x03R\x08nxtRepDt\x12'\n\tcashflows\x18\x12\x20\
    \x03(\x0b2\t.CashflowR\tcashflowsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}